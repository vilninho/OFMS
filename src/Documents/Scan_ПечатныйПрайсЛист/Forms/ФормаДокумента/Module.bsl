
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Вызываем общий обработчик события
	Если Не Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПараметрыДокумента();
	КонецЕсли;
	
	ЗаполнитьПрайсЛист();
	
	УправлениеДиалогомНаСервере();
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРазделыПоПечатномуПрайсЛисту(Команда)
	
	Если Объект.РазделыПрайсЛиста.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРазделыПоПечатномуПрайсЛистуЗавершение", ЭтотОбъект),
		Нстр("ru = 'Таблица разделов будет очищена. Продолжить?'; en = 'The table of sections will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПечатногоПрайсЛиста", ЭтотОбъект);
		ОткрытьФорму("Документ.Scan_ПечатныйПрайсЛист.ФормаВыбора", , ЭтотОбъект,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазделыПоПечатномуПрайсЛистуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПечатногоПрайсЛиста", ЭтотОбъект);
		ОткрытьФорму("Документ.Scan_ПечатныйПрайсЛист.ФормаВыбора", , ЭтотОбъект,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПечатногоПрайсЛиста(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ЗаполнитьПоПечатномуПрайсЛистуНаСервере(РезультатЗакрытия);
		ОбновитьОтображение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРазделы(Команда)
	
	Если Объект.РазделыПрайсЛиста.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьРазделыЗавершение", ЭтотОбъект),
		Нстр("ru = 'Будут очищены все таблицы документа. Продолжить?'; en = 'All tables will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОчиститьТаблицыДокументаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРазделыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицыДокументаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШкалуЦенПоРазделу(Команда)
	
	ИдентификаторРаздела = Элементы.РазделыПрайсЛиста.ТекущиеДанные.ИдентификаторРаздела;
	
	СтрокиШкалыЦен = Объект.ШкалаЦен.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);

	Если СтрокиШкалыЦен.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьШкалуЦенПоРазделуФрагмент", ЭтотОбъект, ДополнительныеПараметры),
		Нстр("ru = 'Шкала будет обновлена. Продолжить?'; en = 'The scale will be updated. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		СписокРазделовДляВыбора = Новый СписокЗначений;
		
		Для Каждого СтрокаРаздела Из Объект.РазделыПрайсЛиста Цикл
			ИдентификаторРаздела = СтрокаРаздела.ИдентификаторРаздела;
			
			Если ИдентификаторРаздела = ДополнительныеПараметры.ИдентификаторРаздела Тогда
				Продолжить;
			КонецЕсли;
			
			СписокРазделовДляВыбора.Добавить(ИдентификаторРаздела, СтрокаРаздела.Наименование);
		КонецЦикла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьШкалуЦенПоРазделуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВыборИзСписка(ОписаниеОповещения,СписокРазделовДляВыбора, Элементы.ШкалаЦенНаименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШкалуЦенПоРазделуФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СписокРазделовДляВыбора = Новый СписокЗначений;
	
	Для Каждого СтрокаРаздела Из Объект.РазделыПрайсЛиста Цикл
		ИдентификаторРаздела = СтрокаРаздела.ИдентификаторРаздела;
		
		Если ИдентификаторРаздела = ДополнительныеПараметры.ИдентификаторРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРазделовДляВыбора.Добавить(ИдентификаторРаздела, СтрокаРаздела.Наименование);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьШкалуЦенПоРазделуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения,СписокРазделовДляВыбора, Элементы.ШкалаЦенНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШкалуЦенПоРазделуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущегоРаздела = ДополнительныеПараметры.ИдентификаторРаздела;
	ИдентификаторРаздела         = ВыбранныйЭлемент.Значение;
	
	СтрокиКопируемойШкалыЦен = Объект.ШкалаЦен.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
	
	Если СтрокиКопируемойШкалыЦен.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	УдалитьЦеныДляКлиента(Новый Структура("ИдентификаторРаздела", ИдентификаторТекущегоРаздела));
	УдалитьШкалуЦен(Новый Структура("ИдентификаторРаздела", ИдентификаторТекущегоРаздела));
	
	Для Каждого СтрокаКопируемойШкалыЦен Из СтрокиКопируемойШкалыЦен Цикл
		НоваяСтрокаШкалыЦен = Объект.ШкалаЦен.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаШкалыЦен, СтрокаКопируемойШкалыЦен,,"ИдентификаторРаздела,ИдентификаторШкалы");
		НоваяСтрокаШкалыЦен.ИдентификаторРаздела = ИдентификаторТекущегоРаздела;
		НоваяСтрокаШкалыЦен.ИдентификаторШкалы   = НовыйИдентификаторТаблицыНаКлиенте("ШкалаЦен", "ИдентификаторШкалы");
	КонецЦикла;
	
	ПересчитатьСпецификацииНаСервере();
	ОбновитьОтображениеПрайсЛиста();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьШкалуЦенВРазделы(Команда)
	
	ИдентификаторРаздела = Элементы.РазделыПрайсЛиста.ТекущиеДанные.ИдентификаторРаздела;
	
	СтрокиКопируемойШкалыЦен = Объект.ШкалаЦен.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
	
	Если СтрокиКопируемойШкалыЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
	ДополнительныеПараметры.Вставить("СтрокиШкалыЦен",       СтрокиКопируемойШкалыЦен);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СкопироватьШкалуЦенВРазделыЗавершение", ЭтотОбъект, ДополнительныеПараметры),
	Нстр("ru = 'Будут обновлены шкалы по всем разделам. Продолжить?'; en = 'Scales for all sections will be updated. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьШкалуЦенВРазделыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРаздела Из Объект.РазделыПрайсЛиста Цикл
		ИдентификаторРаздела = СтрокаРаздела.ИдентификаторРаздела;
		
		Если ИдентификаторРаздела = ДополнительныеПараметры.ИдентификаторРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьЦеныДляКлиента(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
		УдалитьШкалуЦен(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
		
		Для Каждого СтрокаКопируемойШкалыЦен Из ДополнительныеПараметры.СтрокиШкалыЦен Цикл
			НоваяСтрокаШкалыЦен = Объект.ШкалаЦен.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаШкалыЦен, СтрокаКопируемойШкалыЦен,,"ИдентификаторРаздела,ИдентификаторШкалы");
			НоваяСтрокаШкалыЦен.ИдентификаторРаздела = ИдентификаторРаздела;
			НоваяСтрокаШкалыЦен.ИдентификаторШкалы   = НовыйИдентификаторТаблицыНаКлиенте("ШкалаЦен", "ИдентификаторШкалы");
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьСпецификацииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьШкалуЦен(Команда)
	
	ИдентификаторРаздела = Неопределено;
	
	НайденныеСтрокиРазделов = Объект.РазделыПрайсЛиста.НайтиСтроки(Новый Структура("ТекущийРаздел", Истина));
	Если НайденныеСтрокиРазделов.Количество() > 0 Тогда
		ИдентификаторРаздела = НайденныеСтрокиРазделов[0].ИдентификаторРаздела;
	КонецЕсли;
	
	Если ИдентификаторРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиШкалы = Объект.ШкалаЦен.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
	
	Если НайденныеСтрокиШкалы.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
		ДополнительныеПараметры.Вставить("СтрокиШкалы",          НайденныеСтрокиШкалы);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьШкалуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Нстр("ru = 'Будут очищена шкала и прайс-лист по разделу. Продолжить?'; en = 'Scales and price list for current section will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьШкалуЦенЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого СтрокаШкалы Из ДополнительныеПараметры.СтрокиШкалы Цикл
			Объект.ШкалаЦен.Удалить(СтрокаШкалы);
		КонецЦикла;
		
		НайденныеСтрокиЦенДляКлиента = Объект.ЦеныДляКлиента.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ДополнительныеПараметры.ИдентификаторРаздела));
		Для Каждого СтрокаЦенДляКлиента Из НайденныеСтрокиЦенДляКлиента Цикл
			Объект.ЦеныДляКлиента.Удалить(СтрокаЦенДляКлиента);
		КонецЦикла;
		
		//НайденныеСтрокиПрайсЛиста = ПрайсЛист.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
		//Для Каждого СтрокаПрайсЛиста Из НайденныеСтрокиПрайсЛиста Цикл
		//	ПрайсЛист.Удалить(СтрокаПрайсЛиста);
		//КонецЦикла;
		
		ОбновитьОтображениеПрайсЛиста();
		УправлениеДиалогомНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификации(Команда)
	
	Если Объект.ДокументОснование.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПрайсЛист.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСпецификацииФрагмент", ЭтотОбъект),
		Нстр("ru = 'В таблице прайс-листа есть строки. Продолжить?'; en = 'The price list table is not empty. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьСпецификацииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификацииФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСпецификацииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификацииЗавершение()
	
	ОткрытьФормуЗаполненияСпецификаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаполненияСпецификаций()
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьСпецификацииПоОснованию", ЭтотОбъект);
	
	СписокРазделов = Новый СписокЗначений;
	Для Каждого СтрокаРаздела Из Объект.РазделыПрайсЛиста Цикл
		СписокРазделов.Добавить(СтрокаРаздела.ИдентификаторРаздела, СтрокаРаздела.Наименование);
	КонецЦикла;
	
	СпецификацииПоРазделам = Новый Соответствие;
	Для Каждого СтрокаСпецификации Из Объект.СтандартныеСпецификации Цикл
		СпецификацииПоРазделам.Вставить(СтрокаСпецификации.СтандартнаяСпецификация, СтрокаСпецификации.ИдентификаторРаздела);
	КонецЦикла;
	
	АдресСпецификацийПоРазделам = ПоместитьВоВременноеХранилище(СпецификацииПоРазделам, Новый УникальныйИдентификатор);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Калькуляция",                      Объект.ДокументОснование);
	ПараметрыЗаполнения.Вставить("РазделыПрайсЛиста",                СписокРазделов);
	ПараметрыЗаполнения.Вставить("АдресСпецификацииПоРазделамСоотв", АдресСпецификацийПоРазделам);
	
	ОткрытьФорму("Документ.Scan_ПечатныйПрайсЛист.Форма.ФормаЗаполнения", ПараметрыЗаполнения, ЭтотОбъект,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСпецификацию(Команда)
	
	Если    ПрайсЛист.Количество() = 0
		Или Объект.РазделыПрайсЛиста.Количество() = 0
		Или Элементы.ПрайсЛист.ТекущиеДанные = Неопределено
		Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущегоРаздела = Элементы.РазделыПрайсЛиста.ТекущиеДанные.ИдентификаторРаздела;
	СтандартнаяСпецификация      = Элементы.ПрайсЛист.ТекущиеДанные.СтандартнаяСпецификация;
		
	НайденныеСтрокиСпецификации = Объект.СтандартныеСпецификации.НайтиСтроки(Новый Структура("СтандартнаяСпецификация", СтандартнаяСпецификация));
	Если НайденныеСтрокиСпецификации.Количество() > 0 Тогда
		ИдентификаторСпецификации = НайденныеСтрокиСпецификации[0].ИдентификаторСпецификации;
	Иначе
		ИдентификаторСпецификации = Неопределено;
	КонецЕсли;
	
	СписокРазделовДляВыбора = Новый СписокЗначений;
	
	Для Каждого СтрокаРаздела Из Объект.РазделыПрайсЛиста Цикл
		ИдентификаторРаздела = СтрокаРаздела.ИдентификаторРаздела;
		
		Если ИдентификаторРаздела = ИдентификаторТекущегоРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРазделовДляВыбора.Добавить(ИдентификаторРаздела, СтрокаРаздела.Наименование);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторРаздела",      ИдентификаторТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ИдентификаторСпецификации", ИдентификаторСпецификации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереместитьСпецификациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокРазделовДляВыбора, Элементы.ПрайсЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСпецификациюЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЦеныДляКлиента(Новый Структура("ИдентификаторСпецификации", ДополнительныеПараметры.ИдентификаторСпецификации));
	
	НайденныеСтрокиСпецификации = Объект.СтандартныеСпецификации.НайтиСтроки(Новый Структура("ИдентификаторСпецификации", ДополнительныеПараметры.ИдентификаторСпецификации));
	Для Каждого СтрокаСпецификации Из НайденныеСтрокиСпецификации Цикл
		СтрокаСпецификации.ИдентификаторРаздела = ВыбранныйЭлемент.Значение;
		
		НайденныеСтрокиШкалы = Объект.ШкалаЦен.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ВыбранныйЭлемент.Значение));
		
		Счетчик = 1;
		Для Каждого СтрокаШкалыЦен Из НайденныеСтрокиШкалы Цикл
			НоваяСтрока = Объект.ЦеныДляКлиента.Добавить();
			НоваяСтрока.ИдентификаторРаздела      = ВыбранныйЭлемент.Значение;
			НоваяСтрока.ИдентификаторШкалы        = СтрокаШкалыЦен.ИдентификаторШкалы;
			НоваяСтрока.ИдентификаторСпецификации = СтрокаСпецификации.ИдентификаторСпецификации;
			НоваяСтрока.ЦенаДляКлиента            = СтрокаСпецификации.ЦенаДляКлиентаОкр - СтрокаШкалыЦен.Скидка;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьСпецификацииНаСервере();
	
	ЗаполнитьПрайсЛист();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСпецификации(Команда)
	
	Если ПрайсЛист.Количество() <> 0 Тогда
		ПересчитатьСпецификацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСпецификации(Команда)
	
	ИдентификаторРаздела = Неопределено;
	
	НайденныеСтрокиРазделов = Объект.РазделыПрайсЛиста.НайтиСтроки(Новый Структура("ТекущийРаздел", Истина));
	Если НайденныеСтрокиРазделов.Количество() > 0 Тогда
		ИдентификаторРаздела = НайденныеСтрокиРазделов[0].ИдентификаторРаздела;
	КонецЕсли;
	
	Если ИдентификаторРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиПрайсЛиста = ПрайсЛист.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
	
	Если НайденныеСтрокиПрайсЛиста.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
		ДополнительныеПараметры.Вставить("СтрокиПрайсЛиста",     НайденныеСтрокиПрайсЛиста);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьСпецификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Нстр("ru = 'Строки прайс-листа по текущему разделу будут удалены. Продолжить?'; en = 'Price list lines for the current section will be deleted. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСпецификацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого СтрокаПрайсЛиста Из ДополнительныеПараметры.СтрокиПрайсЛиста Цикл
			ПрайсЛист.Удалить(СтрокаПрайсЛиста);
		КонецЦикла;
		
		НайденныеСтрокиСпецификации = Объект.СтандартныеСпецификации.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ДополнительныеПараметры.ИдентификаторРаздела));
		Для Каждого СтрокаСпецификации Из НайденныеСтрокиСпецификации Цикл
			Объект.СтандартныеСпецификации.Удалить(СтрокаСпецификации);
		КонецЦикла;
		
		ОбновитьОтображениеПрайсЛиста();
		УправлениеДиалогомНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОпубликованПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПрайсЛист.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДокументОснованиеНачалоВыбораЗавершение", ЭтотОбъект),
		Нстр("ru = 'Таблица прайс-листа будет очищена. Продолжить?'; en = 'Price list will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДокументОснование = ОткрытьФорму("Документ.Scan_Калькуляция.ФормаВыбора",, Элементы.ДокументОснование);
		
		Объект.СтандартныеСпецификации.Очистить();
		Объект.ЦеныДляКлиента.Очистить();
		
		ПрайсЛист.Очистить();
		
		ОбновитьОтображение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		Объект.ДокументОснование = ВыбранноеЗначение;
		
		ОткрытьФормуЗаполненияСпецификаций();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура РазделыПрайсЛистаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Для Каждого СтрокаРаздела Из Объект.РазделыПрайсЛиста Цикл
		НайденнаяСтрокаРаздела = Объект.РазделыПрайсЛиста.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если  НайденнаяСтрокаРаздела <> Неопределено
			И СтрокаРаздела.ИдентификаторРаздела = НайденнаяСтрокаРаздела.ИдентификаторРаздела 
			Тогда
			СтрокаРаздела.ТекущийРаздел = Истина;
		Иначе
			СтрокаРаздела.ТекущийРаздел = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ШкалаЦен.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторРаздела", Элементы.РазделыПрайсЛиста.ТекущиеДанные.ИдентификаторРаздела);
	
	ОбновитьОтображениеПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПрайсЛистаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ИдентификаторРаздела = Элементы.РазделыПрайсЛиста.ТекущиеДанные.ИдентификаторРаздела;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
	
	НайденныеСтрокиШкалыЦен     = Объект.ШкалаЦен.НайтиСтроки(ПараметрыОтбора);
	НайденныеСтрокиСпецификаций = Объект.СтандартныеСпецификации.НайтиСтроки(ПараметрыОтбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
	ДополнительныеПараметры.Вставить("СтрокиШкалыЦен",       НайденныеСтрокиШкалыЦен);
	ДополнительныеПараметры.Вставить("СтрокиСпецификаций",   НайденныеСтрокиСпецификаций);
	
	Если    НайденныеСтрокиШкалыЦен.Количество() > 0 
		Или НайденныеСтрокиСпецификаций.Количество() > 0
		Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("РазделыПрайсЛистаПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Нстр("ru = 'Будет удалена вся информация по разделу. Продолжить?'; en = 'All information of the section will be deleted. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОчиститьТаблицыПоРазделуНаКлиенте(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПрайсЛистаПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицыПоРазделуНаКлиенте(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПрайсЛистаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИдентификаторРаздела = НовыйИдентификаторТаблицыНаКлиенте("РазделыПрайсЛиста", "ИдентификаторРаздела");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПрайсЛистаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	НайденныеСтроки = Объект.РазделыПрайсЛиста.НайтиСтроки(Новый Структура("ТекущийРаздел", Истина));
	
	Если  НоваяСтрока 
		И НайденныеСтроки.Количество() = 0 
		Тогда
		Элементы.РазделыПрайсЛиста.ТекущиеДанные.ТекущийРаздел = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалаЦенПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ИдентификаторШкалы = Элементы.ШкалаЦен.ТекущиеДанные.ИдентификаторШкалы;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИдентификаторШкалы", ИдентификаторШкалы);
	
	НайденныеСтрокиЦенДляКлиента = Объект.ЦеныДляКлиента.НайтиСтроки(ПараметрыОтбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторШкалы",  ИдентификаторШкалы);
	ДополнительныеПараметры.Вставить("СтрокиЦенДляКлиента", НайденныеСтрокиЦенДляКлиента);
	
	Если НайденныеСтрокиЦенДляКлиента.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ШкалаЦенПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Нстр("ru = 'Будут удалены все цены по элементу шкалы. Продолжить?'; en = 'All prices of the scale item will be deleted. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОчиститьТаблицыПоШкалеНаКлиенте(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалаЦенПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицыПоШкалеНаКлиенте(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалаЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИдентификаторРаздела = Элементы.РазделыПрайсЛиста.ТекущиеДанные.ИдентификаторРаздела;
		Элемент.ТекущиеДанные.ИдентификаторШкалы   = НовыйИдентификаторТаблицыНаКлиенте("ШкалаЦен", "ИдентификаторШкалы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента1ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента2ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента3ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента4ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента5ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента6ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента7ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента8ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента9ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиента10ПриИзменении(Элемент)
	
	ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыДокумента()
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Объект.Автор                 = ТекущийПользователь;
	Объект.ВалютаДокумента       = Справочники.Валюты.НайтиПоКоду("643");
	Объект.ДатаСоздания          = ТекущаяДата();
	Объект.Дата                  = ТекущаяДата();
	Объект.Менеджер              = ТекущийПользователь;
	Объект.Организация           = ТекущийПользователь.Организация;
	Объект.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
	
КонецПроцедуры

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	Если  Объект.ШкалаЦен.Количество() = 0
		И ПрайсЛист.Количество() = 0
		Тогда
		Элементы.РазделыПрайсЛистаЗаполнитьРазделыПоПечатномуПрайсЛисту.Доступность = Истина;
	Иначе
		Элементы.РазделыПрайсЛистаЗаполнитьРазделыПоПечатномуПрайсЛисту.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ИдентификаторПрайсЛиста.ТолькоПросмотр = Объект.Опубликован;
	Элементы.НаименованиеПрайсЛиста.ТолькоПросмотр  = Объект.Опубликован;
	Элементы.ДатаВступленияВСилу.ТолькоПросмотр     = Объект.Опубликован;
	Элементы.ПорядокОкругления.ТолькоПросмотр       = Объект.Опубликован;
	Элементы.ДокументОснование.ТолькоПросмотр       = Объект.Опубликован;
	Элементы.Пояснение.ТолькоПросмотр               = Объект.Опубликован;
	Элементы.РазделыПрайсЛиста.ТолькоПросмотр       = Объект.Опубликован;
	Элементы.ШкалаЦен.ТолькоПросмотр                = Объект.Опубликован;
	Элементы.ПрайсЛист.ТолькоПросмотр               = Объект.Опубликован;
	
	Элементы.РазделыПрайсЛистаЗаполнитьРазделыПоПечатномуПрайсЛисту.Доступность = Не Объект.Опубликован;
	Элементы.РазделыПрайсЛистаОчиститьРазделы.Доступность                       = Не Объект.Опубликован;
	
	Элементы.ШкалаЦенЗаполнитьШкалуЦенПоРазделу.Доступность  = Не Объект.Опубликован;
	Элементы.ШкалаЦенСкопироватьШкалуЦенВРазделы.Доступность = Не Объект.Опубликован;
	Элементы.ШкалаЦенОчиститьШкалуЦен.Доступность            = Не Объект.Опубликован;
	
	Элементы.ПрайсЛистЗаполнитьСпецификации.Доступность   = Не Объект.Опубликован;
	Элементы.ПрайсЛистПереместитьСпецификацию.Доступность = Не Объект.Опубликован;
	Элементы.ПрайсЛистПересчитатьСпецификации.Доступность = Не Объект.Опубликован;
	Элементы.ПрайсЛистОчиститьСпецификации.Доступность    = Не Объект.Опубликован;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображение()
	
	Если Объект.РазделыПрайсЛиста.Количество() > 0 Тогда
		НайденныеСтрокиТекущегоРаздела = Объект.РазделыПрайсЛиста.НайтиСтроки(Новый Структура("ТекущийРаздел", Истина));
		Если НайденныеСтрокиТекущегоРаздела.Количество() Тогда
			Элементы.РазделыПрайсЛиста.ТекущаяСтрока = НайденныеСтрокиТекущегоРаздела[0].ПолучитьИдентификатор();
			Элементы.ШкалаЦен.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторРаздела", НайденныеСтрокиТекущегоРаздела[0].ИдентификаторРаздела);
		Иначе
			Объект.РазделыПрайсЛиста[0].ТекущийРаздел = Истина;
			
			Элементы.РазделыПрайсЛиста.ТекущаяСтрока = Объект.РазделыПрайсЛиста[0].ПолучитьИдентификатор();
			Элементы.ШкалаЦен.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторРаздела", Объект.РазделыПрайсЛиста[0].ИдентификаторРаздела);
		КонецЕсли;
		
		ОбновитьОтображениеПрайсЛиста();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПрайсЛиста()
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ПрайсЛистЦеныДляКлиента.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = Ложь;
	КонецЦикла;
	
	НайденныеСтрокиРаздела = Объект.РазделыПрайсЛиста.НайтиСтроки(Новый Структура("ТекущийРаздел", Истина));
	Если НайденныеСтрокиРаздела.Количество() > 0 Тогда
		ИдентификаторРаздела = НайденныеСтрокиРаздела[0].ИдентификаторРаздела;
	Иначе
		ИдентификаторРаздела = Неопределено;
	КонецЕсли;
	
	Если  ИдентификаторРаздела = Неопределено 
		И Объект.РазделыПрайсЛиста.Количество() > 0
		Тогда
		ИдентификаторРаздела = Объект.РазделыПрайсЛиста[0].ИдентификаторРаздела;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
	
	НайденныеСтрокиШкалы = Объект.ШкалаЦен.НайтиСтроки(ПараметрыОтбора);
	
	Счетчик = 1;
	Для Каждого НайденнаяСтрокаШкалы Из НайденныеСтрокиШкалы Цикл
		Элемент = Элементы.ПрайсЛистЦеныДляКлиента.ПодчиненныеЭлементы["ПрайсЛистЦенаДляКлиента"+Счетчик];
		Элемент.Видимость = Истина;
		Элемент.Заголовок = НайденнаяСтрокаШкалы.Наименование;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Элементы.ПрайсЛист.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторРаздела", ИдентификаторРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПечатномуПрайсЛистуНаСервере(ПечатныйПрайсЛистСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПечатныйПрайсЛист", ПечатныйПрайсЛистСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ПечатныйПрайсЛистРазделыПрайсЛиста.Наименование КАК Наименование,
	|	Scan_ПечатныйПрайсЛистРазделыПрайсЛиста.Пояснение КАК Пояснение,
	|	Scan_ПечатныйПрайсЛистРазделыПрайсЛиста.ИдентификаторРаздела КАК ИдентификаторРаздела,
	|	Scan_ПечатныйПрайсЛистРазделыПрайсЛиста.ТекущийРаздел КАК ТекущийРаздел
	|ИЗ
	|	Документ.Scan_ПечатныйПрайсЛист.РазделыПрайсЛиста КАК Scan_ПечатныйПрайсЛистРазделыПрайсЛиста
	|ГДЕ
	|	Scan_ПечатныйПрайсЛистРазделыПрайсЛиста.Ссылка = &ПечатныйПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Scan_ПечатныйПрайсЛистШкалаЦен.Наименование КАК Наименование,
	|	Scan_ПечатныйПрайсЛистШкалаЦен.КоличествоОт КАК КоличествоОт,
	|	Scan_ПечатныйПрайсЛистШкалаЦен.КоличествоДо КАК КоличествоДо,
	|	Scan_ПечатныйПрайсЛистШкалаЦен.Скидка КАК Скидка,
	|	Scan_ПечатныйПрайсЛистШкалаЦен.ИдентификаторРаздела КАК ИдентификаторРаздела,
	|	Scan_ПечатныйПрайсЛистШкалаЦен.ИдентификаторШкалы КАК ИдентификаторШкалы
	|ИЗ
	|	Документ.Scan_ПечатныйПрайсЛист.ШкалаЦен КАК Scan_ПечатныйПрайсЛистШкалаЦен
	|ГДЕ
	|	Scan_ПечатныйПрайсЛистШкалаЦен.Ссылка = &ПечатныйПрайсЛист";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Объект.РазделыПрайсЛиста.Загрузить(РезультатыЗапроса[0].Выгрузить());
	Объект.ШкалаЦен.Загрузить(РезультатыЗапроса[1].Выгрузить());
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыДокументаНаКлиенте()
	
	Объект.РазделыПрайсЛиста.Очистить();
	Объект.ШкалаЦен.Очистить();
	Объект.СтандартныеСпецификации.Очистить();
	Объект.ЦеныДляКлиента.Очистить();
	
	ПрайсЛист.Очистить();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыПоРазделуНаКлиенте(ДополнительныеПараметры)
	
	УдаляемыеСтрокиШкалыЦен     = ДополнительныеПараметры.СтрокиШкалыЦен;
	УдаляемыеСтрокиСпецификаций = ДополнительныеПараметры.СтрокиСпецификаций;
	
	Для Каждого УдаляемаяСтрокаШкалыЦен Из УдаляемыеСтрокиШкалыЦен Цикл
		Для Каждого УдаляемаяСтрокаСпецификации Из УдаляемыеСтрокиСпецификаций Цикл
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("ИдентификаторШкалы",        УдаляемаяСтрокаШкалыЦен.ИдентификаторШкалы);
			ПараметрыДействия.Вставить("ИдентификаторСпецификации", УдаляемаяСтрокаСпецификации.ИдентификаторСпецификации); 
			
			УдалитьЦеныДляКлиента(ПараметрыДействия);
		КонецЦикла;
	КонецЦикла;
	
	УдалитьШкалуЦен(, УдаляемыеСтрокиШкалыЦен);
	УдалитьСпецификации(, УдаляемыеСтрокиСпецификаций);
	УдалитьРаздел(Новый Структура("ИдентификаторРаздела", ДополнительныеПараметры.ИдентификаторРаздела));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыПоШкалеНаКлиенте(ДополнительныеПараметры)
	
	УдалитьЦеныДляКлиента(, ДополнительныеПараметры.СтрокиЦенДляКлиента);
	УдалитьШкалуЦен(Новый Структура("ИдентификаторШкалы", ДополнительныеПараметры.ИдентификаторШкалы));
	
	ОбновитьОтображениеПрайсЛиста();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификацииПоОснованию(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицыПоВыбраннымСпецификациям(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПоВыбраннымСпецификациям(АдресВыбранныхСпецификаций)
	
	Объект.СтандартныеСпецификации.Очистить();
	Объект.ЦеныДляКлиента.Очистить();
	
	Попытка
		ВыбранныеСпецификации = ПолучитьИзВременногоХранилища(АдресВыбранныхСпецификаций);
	Исключение
		Возврат;
	КонецПопытки;
	
	Для Каждого СтрокаСпецификации Из ВыбранныеСпецификации Цикл
		Для Каждого СтрокаРаздела Из Объект.РазделыПрайсЛиста Цикл
			ИдентификаторРаздела = СтрокаРаздела.ИдентификаторРаздела;
			Если СтрокаСпецификации["Раздел"+ИдентификаторРаздела] Тогда
				НоваяСтрокаСпецификации = Объект.СтандартныеСпецификации.Добавить();
				НоваяСтрокаСпецификации.СтандартнаяСпецификация   = СтрокаСпецификации.Спецификация;
				НоваяСтрокаСпецификации.ЦенаДляДилера             = СтрокаСпецификации.ЦенаДляДилера;
				НоваяСтрокаСпецификации.ЦенаДляДилераОкр          = ОкруглитьЦенуСпецификации(СтрокаСпецификации.ЦенаДляДилера, Объект.ПорядокОкругления);
				НоваяСтрокаСпецификации.ЦенаДляКлиента            = СтрокаСпецификации.ЦенаДляКлиента;
				НоваяСтрокаСпецификации.ЦенаДляКлиентаОкр         = ОкруглитьЦенуСпецификации(СтрокаСпецификации.ЦенаДляКлиента, Объект.ПорядокОкругления);
				НоваяСтрокаСпецификации.ИдентификаторРаздела      = ИдентификаторРаздела;
				НоваяСтрокаСпецификации.ИдентификаторСпецификации = НовыйИдентификаторТаблицыНаСервере("СтандартныеСпецификации", "ИдентификаторСпецификации");
				
				Если НоваяСтрокаСпецификации.ЦенаДляКлиентаОкр <> 0 Тогда
					НайденныеСтрокиШкалыЦен = Объект.ШкалаЦен.НайтиСтроки(Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела));
					Для Каждого НайденнаяСтрокаШкалыЦен Из НайденныеСтрокиШкалыЦен Цикл
						НоваяСтрокаШкалы = Объект.ЦеныДляКлиента.Добавить();
						НоваяСтрокаШкалы.ИдентификаторРаздела      = ИдентификаторРаздела;
						НоваяСтрокаШкалы.ИдентификаторШкалы        = НайденнаяСтрокаШкалыЦен.ИдентификаторШкалы;
						НоваяСтрокаШкалы.ИдентификаторСпецификации = НоваяСтрокаСпецификации.ИдентификаторСпецификации;
						НоваяСтрокаШкалы.ЦенаДляКлиента            = НоваяСтрокаСпецификации.ЦенаДляКлиентаОкр - НайденнаяСтрокаШкалыЦен.Скидка;
					КонецЦикла;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьПрайсЛист();
	ОбновитьОтображениеПрайсЛиста();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрайсЛист()
	
	ПрайсЛист.Очистить();
	
	Для Каждого СтрокаСпецификации Из Объект.СтандартныеСпецификации Цикл
		НоваяСтрокаПрайсЛиста = ПрайсЛист.Добавить();
		НоваяСтрокаПрайсЛиста.СтандартнаяСпецификация = СтрокаСпецификации.СтандартнаяСпецификация;
		НоваяСтрокаПрайсЛиста.ЦенаДляДилера           = СтрокаСпецификации.ЦенаДляДилераОкр;
		НоваяСтрокаПрайсЛиста.ЦенаДляКлиента          = СтрокаСпецификации.ЦенаДляКлиентаОкр;
		НоваяСтрокаПрайсЛиста.ИдентификаторРаздела    = СтрокаСпецификации.ИдентификаторРаздела;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторРаздела", СтрокаСпецификации.ИдентификаторРаздела);
		
		НайденныеСтрокиШкалы = Объект.ШкалаЦен.НайтиСтроки(ПараметрыОтбора);
		
		Счетчик = 1;
		Для Каждого СтрокаШкалы Из НайденныеСтрокиШкалы Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИдентификаторСпецификации", СтрокаСпецификации.ИдентификаторСпецификации);
			ПараметрыОтбора.Вставить("ИдентификаторШкалы",        СтрокаШкалы.ИдентификаторШкалы);
			
			НайденныеСтроки = Объект.ЦеныДляКлиента.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрокаПрайсЛиста["ЦенаДляКлиента"+Счетчик] = НайденныеСтроки[0].ЦенаДляКлиента;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСпецификацииРазделаНаСервере(ИдентификаторРаздела)
	
	ПараметрыОтбораРаздел = Новый Структура("ИдентификаторРаздела", ИдентификаторРаздела);
	
	НайденныеСтрокиСпецификаций = Объект.СтандартныеСпецификации.НайтиСтроки(ПараметрыОтбораРаздел);
	Для Каждого СтрокаСпецификации Из НайденныеСтрокиСпецификаций Цикл
		СтрокаСпецификации.ЦенаДляДилераОкр  = ОкруглитьЦенуСпецификации(СтрокаСпецификации.ЦенаДляДилера, Объект.ПорядокОкругления);
		СтрокаСпецификации.ЦенаДляКлиентаОкр = ОкруглитьЦенуСпецификации(СтрокаСпецификации.ЦенаДляКлиента, Объект.ПорядокОкругления);
		
		НайденныеСтрокиШкалыЦен = Объект.ШкалаЦен.НайтиСтроки(ПараметрыОтбораРаздел);
		Для Каждого СтрокаШкалыЦен Из НайденныеСтрокиШкалыЦен Цикл
			ИдентификаторШкалы        = СтрокаШкалыЦен.ИдентификаторШкалы;
			ИдентификаторСпецификации = СтрокаСпецификации.ИдентификаторСпецификации;
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("ИдентификаторСпецификации", ИдентификаторСпецификации);
			ПараметрыОтбора.Вставить("ИдентификаторШкалы",        ИдентификаторШкалы);
			
			НайденныеСтрокиЦенДляКлиента = Объект.ЦеныДляКлиента.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтрокиЦенДляКлиента.Количество() = 0 Тогда
				НоваяСтрока = Объект.ЦеныДляКлиента.Добавить();
				НоваяСтрока.ИдентификаторРаздела      = ИдентификаторРаздела;
				НоваяСтрока.ИдентификаторШкалы        = ИдентификаторШкалы;
				НоваяСтрока.ИдентификаторСпецификации = ИдентификаторСпецификации;
				НоваяСтрока.ЦенаДляКлиента            = СтрокаСпецификации.ЦенаДляКлиентаОкр - СтрокаШкалыЦен.Скидка;
			Иначе
				НайденныеСтрокиЦенДляКлиента[0].ЦенаДляКлиента = СтрокаСпецификации.ЦенаДляКлиентаОкр - СтрокаШкалыЦен.Скидка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСпецификацииНаСервере()
	
	Для Каждого СтрокаРаздела Из Объект.РазделыПрайсЛиста Цикл
		ПересчитатьСпецификацииРазделаНаСервере(СтрокаРаздела.ИдентификаторРаздела);
	КонецЦикла;
	
	ЗаполнитьПрайсЛист();
	ОбновитьОтображениеПрайсЛиста();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистЦенаДляКлиентаПриИзменении(Элемент)
	
	ИдентификаторРаздела    = Элементы.РазделыПрайсЛиста.ТекущиеДанные.ИдентификаторРаздела;
	НаименованиеШкалыЦен    = Элемент.Заголовок;
	ЦенаДляКлиента          = Элемент.ТекстРедактирования;
	СтандартнаяСпецификация = Элементы.ПрайсЛист.ТекущиеДанные.СтандартнаяСпецификация;
	
	НайденныеСтрокиСпецификации = Объект.СтандартныеСпецификации.НайтиСтроки(Новый Структура("СтандартнаяСпецификация", СтандартнаяСпецификация));
	Если НайденныеСтрокиСпецификации.Количество() > 0 Тогда
		ИдентификаторСпецификации = НайденныеСтрокиСпецификации[0].ИдентификаторСпецификации;
	Иначе
		ИдентификаторСпецификации = Неопределено;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Наименование",         НаименованиеШкалыЦен);
	ПараметрыОтбора.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
	
	НайденныеСтрокиШкалыЦен = Объект.ШкалаЦен.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаШкалыЦен Из НайденныеСтрокиШкалыЦен Цикл
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ИдентификаторСпецификации", ИдентификаторСпецификации);
		ПараметрыОтбора.Вставить("ИдентификаторШкалы",        СтрокаШкалыЦен.ИдентификаторШкалы);
		
		НайденныеСтрокиЦенДляКлиента = Объект.ЦеныДляКлиента.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаЦеныДляКлиента Из НайденныеСтрокиЦенДляКлиента Цикл
			СтрокаЦеныДляКлиента.ЦенаДляКлиента = ЦенаДляКлиента;
		КонецЦикла;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОкруглитьЦенуСпецификации(ЦенаСпецификации, ПорядокОкругления)
	
	ЗначениеОкругления = Pow(10, ПорядокОкругления);
	ОстатокОтДеления   = ЦенаСпецификации % ЗначениеОкругления;
	
	РазностьОкругления = ЗначениеОкругления - ОстатокОтДеления;
	
	Возврат ЦенаСпецификации + РазностьОкругления;
	
КонецФункции

&НаКлиенте
Процедура УдалитьРаздел(ПараметрыДействия = Неопределено, УдаляемыеСтроки = Неопределено)
	
	Если УдаляемыеСтроки = Неопределено Тогда
		УдаляемыеСтроки = Новый Массив;
		
		Если ПараметрыДействия <> Неопределено Тогда
			ПараметрыОтбора = Новый Структура;
			
			ИдентификаторРаздела = Неопределено;
			
			Если ПараметрыДействия.Свойство("ИдентификаторРаздела", ИдентификаторРаздела) Тогда
				ПараметрыОтбора.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
			КонецЕсли;
			
			Если ПараметрыОтбора.Количество() > 0 Тогда
				УдаляемыеСтроки = Объект.РазделыПрайсЛиста.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
		Иначе
			УдаляемыеСтроки = Объект.РазделыПрайсЛиста;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.РазделыПрайсЛиста.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры 
//rarus bonmak 09.08.2021 16834 ++
//&НаКлиенте
//Процедура ДобавитьЦеныДляКлиента(ИдентификаторРаздела = Неопределено, ИдентификаторШкалыЦен = Неопределено, Спецификация = Неопределено)
//	
//	
//	
//КонецПроцедуры
//rarus bonmak 09.08.2021 16834 --
&НаКлиенте
Процедура УдалитьШкалуЦен(ПараметрыДействия = Неопределено, УдаляемыеСтроки = Неопределено)
	
	Если УдаляемыеСтроки = Неопределено Тогда
		УдаляемыеСтроки = Новый Массив;
		
		Если ПараметрыДействия <> Неопределено Тогда
			ПараметрыОтбора = Новый Структура;
			
			ИдентификаторРаздела = Неопределено;
			ИдентификаторШкалы   = Неопределено;
			
			Если ПараметрыДействия.Свойство("ИдентификаторРаздела", ИдентификаторРаздела) Тогда
				ПараметрыОтбора.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
			КонецЕсли;
			
			Если ПараметрыДействия.Свойство("ИдентификаторШкалы", ИдентификаторШкалы) Тогда
				ПараметрыОтбора.Вставить("ИдентификаторШкалы", ИдентификаторШкалы);
			КонецЕсли;
			
			Если ПараметрыОтбора.Количество() > 0 Тогда
				УдаляемыеСтроки = Объект.ШкалаЦен.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
		Иначе
			УдаляемыеСтроки = Объект.ШкалаЦен;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.ШкалаЦен.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСпецификации(ПараметрыДействия = Неопределено, УдаляемыеСтроки = Неопределено)
	
	Если УдаляемыеСтроки = Неопределено Тогда
		УдаляемыеСтроки = Новый Массив;
		
		Если ПараметрыДействия <> Неопределено Тогда
			ПараметрыОтбора = Новый Структура;
			
			ИдентификаторРаздела      = Неопределено;
			ИдентификаторСпецификации = Неопределено;
			
			Если ПараметрыДействия.Свойство("ИдентификаторРаздела", ИдентификаторРаздела) Тогда
				ПараметрыОтбора.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
			КонецЕсли;
			
			Если ПараметрыДействия.Свойство("ИдентификаторСпецификации", ИдентификаторСпецификации) Тогда
				ПараметрыОтбора.Вставить("ИдентификаторСпецификации", ИдентификаторСпецификации);
			КонецЕсли;
			
			Если ПараметрыОтбора.Количество() > 0 Тогда
				УдаляемыеСтроки = Объект.СтандартныеСпецификации.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
		Иначе
			УдаляемыеСтроки = Объект.СтандартныеСпецификации;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.СтандартныеСпецификации.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЦеныДляКлиента(ПараметрыДействия = Неопределено, УдаляемыеСтроки = Неопределено)
	
	Если УдаляемыеСтроки = Неопределено Тогда
		УдаляемыеСтроки = Новый Массив;
		
		Если ПараметрыДействия <> Неопределено Тогда
			ПараметрыОтбора = Новый Структура;
			
			ИдентификаторРаздела      = Неопределено;
			ИдентификаторШкалы        = Неопределено;
			ИдентификаторСпецификации = Неопределено;
			
			Если ПараметрыДействия.Свойство("ИдентификаторРаздела", ИдентификаторРаздела) Тогда
				ПараметрыОтбора.Вставить("ИдентификаторРаздела", ИдентификаторРаздела);
			КонецЕсли;
			
			Если ПараметрыДействия.Свойство("ИдентификаторШкалы", ИдентификаторШкалы) Тогда
				ПараметрыОтбора.Вставить("ИдентификаторШкалы", ИдентификаторШкалы);
			КонецЕсли;
			
			Если ПараметрыДействия.Свойство("ИдентификаторСпецификации", ИдентификаторСпецификации) Тогда
				ПараметрыОтбора.Вставить("ИдентификаторСпецификации", ИдентификаторСпецификации);
			КонецЕсли;
			
			Если ПараметрыОтбора.Количество() > 0 Тогда
				УдаляемыеСтроки = Объект.ЦеныДляКлиента.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
		Иначе
			УдаляемыеСтроки = Объект.ЦеныДляКлиента;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.ЦеныДляКлиента.Удалить(УдаляемаяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция НовыйИдентификаторТаблицыНаКлиенте(ИмяТаблицы, ИмяИдентификатора)
	
	НовыйИдентификатор = 0;
	
	Если Объект[ИмяТаблицы].Количество() > 0 Тогда
		МаксимальныйИдентификатор = 0;
		
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
			Если СтрокаТаблицы[ИмяИдентификатора] > МаксимальныйИдентификатор Тогда
				МаксимальныйИдентификатор = СтрокаТаблицы[ИмяИдентификатора];
			КонецЕсли;
		КонецЦикла;
		
		НовыйИдентификатор = МаксимальныйИдентификатор+1;
	КонецЕсли;
	
	Возврат НовыйИдентификатор;
	
КонецФункции

&НаСервере
Функция НовыйИдентификаторТаблицыНаСервере(ИмяТаблицы, ИмяИдентификатора)
	
	НовыйИдентификатор = 0;
	
	Если Объект[ИмяТаблицы].Количество() > 0 Тогда
		МаксимальныйИдентификатор = 0;
		
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
			Если СтрокаТаблицы[ИмяИдентификатора] > МаксимальныйИдентификатор Тогда
				МаксимальныйИдентификатор = СтрокаТаблицы[ИмяИдентификатора];
			КонецЕсли;
		КонецЦикла;
		
		НовыйИдентификатор = МаксимальныйИдентификатор+1;
	КонецЕсли;
	
	Возврат НовыйИдентификатор;
	
КонецФункции

#КонецОбласти
