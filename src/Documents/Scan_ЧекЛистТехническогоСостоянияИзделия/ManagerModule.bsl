//rarus tenkam 18.11.2017 mantis 9427 +++
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ИЗМЕНЕНИЯ ДАННЫХ ОБЪЕКТА

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.СписокРабот.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ИЗМЕНЕНИЯ ДАННЫХ РЕКВИЗИТОВ ШАПКИ

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//// Счет на оплату
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Не Пользователи.РолиДоступны("_ДемоПечатьНепроведенныхДокументов");
	
	//// Демо-пример ограничения доступности команд печати.
	//Если Пользователи.РолиДоступны("_ДемоПечатьСчетаНаОплатуНаПринтер") Тогда
	//	// Счет на оплату (на принтер).
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "СчетЗаказ";
	//	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (на принтер)'");
	//	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	//	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//	КомандаПечати.СразуНаПринтер = Истина;
	//КонецЕсли;
	//
	//// Комплект документов
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
	//КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ФиксированныйКомплект = Истина;
	//КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	//КомандаПечати.Порядок = 75;
	//
	//// Комплект документов (на принтер).
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
	//КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ФиксированныйКомплект = Истина;
	//КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	//КомандаПечати.СразуНаПринтер = Истина;
	//КомандаПечати.Порядок = 75;
	//
	//// Настраиваемый комплект документов.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
	//КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	//КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	//КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	//КомандаПечати.Порядок = 75;
	//
	//// Счет на оплату в документ Adobe PDF.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в документ Adobe PDF'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.PDF;
	//
	//// Счет на оплату в Microsoft Word.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетНаОплату(MSWord)";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в Microsoft Word'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord2007;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	//КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	//
	//// Счет на оплату в OpenOffice.org Writer.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетНаОплату(ODT)";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в OpenOffice.org Writer'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	//КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	
	//// Квитанция на оплату с QR кодом.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ПФ_MXL_Тест";
	//КомандаПечати.Представление = НСтр("ru = 'Заявка на действие (тест)'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	//КомандаПечати.Порядок = 85;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	//rarus sergei 29.09.2016 mantis 7162 ++	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СервисныеОперацииПриКТС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_СервисныеОперацииПриКТС",
		"Сервисные операции при КТС",
		ПечатьПФ_MXL_СервисныеОперацииПриКТС(МассивОбъектов, ОбъектыПечати,, ПараметрыПечати));
	КонецЕсли;          	
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	//ДанныеПоВсемОбъектам = Новый Соответствие;
	//
	//Для Каждого ОбъектСсылка Из МассивДокументов Цикл
	//	ДанныеОбъектаПоМакетам = Новый Соответствие;
	//	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
	//		ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка));
	//	КонецЦикла;
	//	ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	//КонецЦикла;
	//
	//ОписаниеОбластей = Новый Соответствие;
	//ДвоичныеДанныеМакетов = Новый Соответствие;
	//ТипыМакетов = Новый Соответствие;
	//
	//Для Каждого ИмяМакета Из МассивИменМакетов Цикл
	//	Если ИмяМакета = "СчетНаОплату(MSWord)" Тогда
	//		ДвоичныеДанныеМакетов.Вставить(ИмяМакета, 
	//			УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплату"));
	//		ТипыМакетов.Вставить(ИмяМакета, "DOC");
	//	ИначеЕсли ИмяМакета = "СчетНаОплату(ODT)" Тогда
	//		ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет._ДемоПФ_ODT_СчетНаОплату"));
	//		ТипыМакетов.Вставить(ИмяМакета, "ODT");
	//	КонецЕсли;
	//	ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	//КонецЦикла;
	//
	//Возврат Новый Структура("Данные, Макеты",
	//	ДанныеПоВсемОбъектам,
	//	Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
	//		ОписаниеОбластей,
	//		ТипыМакетов,
	//		ДвоичныеДанныеМакетов));
	
КонецФункции

#КонецОбласти
#КонецЕсли

Функция ПечатьПФ_MXL_СервисныеОперацииПриКТС(МассивОбъектов,ОбъектыПечати,ИмяМакета = "ПечатьПФ_MXL_СервисныеОперацииПриКТС",ПараметрыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Если МассивОбъектов.Количество() = 1 Тогда
		ТабличныйДокумент.ИспользуемоеИмяФайла = Scan_Печать.ПолучитьПредставлениеДокумента(МассивОбъектов[0],"Чек лист технического состояния изделия");
	КонецЕсли;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_MXL_СервисныеОперацииПриКТС";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Scan_ЧекЛистТехническогоСостоянияИзделия.ПФ_MXL_СервисныеОперацииПриКТС");
	 	
	Документ = МассивОбъектов[0];
		
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаПервая = Макет.ПолучитьОбласть("СтрокаПервая");
	ОбластьСтрокаВложенная = Макет.ПолучитьОбласть("СтрокаВложенная");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	//Заполним шапку
	Если ЗначениеЗаполнено(Документ.ДоговорСИсполнителем) Тогда
		ОбластьШапка.Параметры.ДоговорСИсполнителем = "№ " + Документ.ДоговорСИсполнителем.НомерДоговора + " от " + Формат(Документ.ДоговорСИсполнителем.ДатаНачала, "ДЛФ=ДД");
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ.Изделие) Тогда
		ОбластьШапка.Параметры.НомерШасси = Документ.Изделие.НомерИзделия;
	КонецЕсли;
	
	ОбластьШапка.Параметры.КоличествоДней = НРег(ЧислоПрописью(Документ.СрокКТС,,"день,дня,дней,м,,,,,0"));
	
	ДатаПостановкиНаХранение = РегистрыСведений.Scan_МатрицаХраненияИзделий.ПолучитьДатуПостановкиНаХранение(Документ.Изделие, Документ.МестоХранения, Документ, Документ.ПлановаяДатаВыполненияКТС);
	ОбластьШапка.Параметры.ДатаПостановкиНаХранение = Формат(ДатаПостановкиНаХранение, "ДЛФ=ДД");
	ОбластьШапка.Параметры.ПлановаяДатаПроверки = Формат(Документ.ПлановаяДатаВыполненияКТС, "ДЛФ=ДД");   	
	

	ТабличныйДокумент.Вывести(ОбластьШапка);
	//Заполним строки
	
	НомерСтроки = 1;
	НомерВложеннойСтроки = 1;
	МассивБукв = ПолучитьМассивБукв();
	
	СтараяПерваяСтрока = Неопределено;
	ВерхняяСтрокаДерева = Неопределено;
	Для Каждого ТекСтрокаОбъекта Из Документ.СписокРабот Цикл
		Если Не ЗначениеЗаполнено(ТекСтрокаОбъекта.Составляющая) Тогда
			ОбластьСтрокаПервая.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтрокаПервая.Параметры.Работы = ТекСтрокаОбъекта.Работы;			
			ОбластьСтрокаПервая.Параметры.РезультатБыло = ТекСтрокаОбъекта.РезультатБыло;
			ОбластьСтрокаПервая.Параметры.РезультатСтало = ТекСтрокаОбъекта.РезультатСтало;	
			НомерСтроки = НомерСтроки + 1;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаПервая);
		Иначе
			Если СтараяПерваяСтрока <> ТекСтрокаОбъекта.Работы Тогда
				ЭтоПерваяСтрока = Истина;
			Иначе
				ЭтоПерваяСтрока = Ложь;
			КонецЕсли;
			
			Если ЭтоПерваяСтрока Тогда
				
				ОбластьСтрокаПервая.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрокаПервая.Параметры.Работы = ТекСтрокаОбъекта.Работы;			
				СтараяПерваяСтрока = ТекСтрокаОбъекта.Работы;
				НомерСтроки = НомерСтроки + 1;
				НомерВложеннойСтроки = 1;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаПервая);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтараяПерваяСтрока) Тогда
				ОбластьСтрокаВложенная.Параметры.НомерСтроки = МассивБукв[НомерВложеннойСтроки];
				ОбластьСтрокаВложенная.Параметры.Составляющая = ТекСтрокаОбъекта.Составляющая;			
				ОбластьСтрокаВложенная.Параметры.РезультатБыло = ТекСтрокаОбъекта.РезультатБыло;
				ОбластьСтрокаВложенная.Параметры.РезультатСтало = ТекСтрокаОбъекта.РезультатСтало;	
				НомерВложеннойСтроки = НомерВложеннойСтроки + 1;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаВложенная);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 	
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция снимает пометку "Подтверждена перевозчиком" в заявке перевозчику и выполняет все необходимые движения
Функция СнятьПодтверждениеКТС(ДокументСсылка, СообщениеОбОшибке = "") Экспорт
	Если ДокументСсылка.КТСВыполнен = Ложь Тогда
		СообщениеОбОшибке = "У документа " + ДокументСсылка + " и так не установлен признак выполнения!";
		Возврат Ложь;
	КонецЕсли;
	
	Если ДокументСсылка.ПометкаУдаления Тогда
		СообщениеОбОшибке = "Нельзя изменять помеченный на удаление документ!";
		Возврат Ложь;
	КонецЕсли;

	ДокОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокОбъект.КТСВыполнен = Ложь;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписьЖурналаРегистрации("Снятие подтверждения документа", УровеньЖурналаРегистрации.Информация, , ДокументСсылка,
		НСтр("ru = 'Снят признак подтверждения документа чек лист технического состояния изделия'"));
		
		Возврат Истина;	
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки(); 
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция СформироватьЧекЛист(ИзделиеСсылка, МестоХранения, ПлановаяДатаВыполненияКТС, ПакетСервисныхОпераций, СообщениеОбОшибке = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ИзделиеСсылка) Тогда
		СообщениеОбОшибке = "Изделие не заполнено!";
		Возврат Неопределено;
	КонецЕсли;
	
	Если МестоХранения.Маршрут Тогда
		СообщениеОбОшибке = "Место хранения является маршрутом!";
		Возврат Неопределено;
	КонецЕсли;
	
	СтарыйЧекЛист = ПолучитьАктуальныйЧекЛист(ИзделиеСсылка);
	Если ЗначениеЗаполнено(СтарыйЧекЛист) Тогда
		//Чек лист уже есть
		СообщениеОбОшибке = "Для изделия " + ИзделиеСсылка + " уже есть чек лист технического состояния: " + СтарыйЧекЛист;
		Возврат Неопределено;
	КонецЕсли;
	
	ДокОбъект = Документы.Scan_ЧекЛистТехническогоСостоянияИзделия.СоздатьДокумент();
	ДокОбъект.Изделие = ИзделиеСсылка;
	ДокОбъект.МестоХранения = МестоХранения;
	ДокОбъект.Исполнитель = МестоХранения.Контрагент;//rarus bonmak 15.04.2020 14456 //rarus bonmak 03.06.2020 16165 
	//rarus bonmak 15.04.2020 14456 ++
	//rarus bonmak 03.06.2020 16165 ++
	Если МестоХранения.ТипСклада = Перечисления.Scan_ТипыСклада.Производство И МестоХранения.Контрагент.Кузовостроитель Тогда
		ТекДоговор = Справочники.Scan_ДоговорыВзаиморасчетов.ПолучитьДоговорПодряда(МестоХранения.Контрагент);
	Иначе
		ТекДоговор = Справочники.Scan_ДоговорыВзаиморасчетов.ПолучитьДоговорХранения(МестоХранения.Контрагент);
	КонецЕсли;
	ДокОбъект.ДоговорСИсполнителем = ТекДоговор;
	//rarus bonmak 03.06.2020 16165 --
	//rarus bonmak 15.04.2020 14456 --
	ДокОбъект.ПлановаяДатаВыполненияКТС = ПлановаяДатаВыполненияКТС;
	ДокОбъект.КТСВыполнен = Ложь;
	
	ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ЧекЛистТехническогоСостоянияИзделия;
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ДокОбъект.Организация = ТекПользователь.Организация;
	ДокОбъект.ПодразделениеКомпании = ТекПользователь.ПодразделениеОрганизации;
	ДокОбъект.Автор = ТекПользователь;
	ДокОбъект.Менеджер = ТекПользователь;
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.СрокКТС = ПакетСервисныхОпераций.СрокКТС;
	
	//rarus vikhle 24.04.2020 mt 15695 +++
	Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекПользователь,ДокОбъект.Компания,ДокОбъект.Контрагент);	
	//rarus vikhle 24.04.2020 mt 15695 ---
	
	//Заполним табличную часть
	Для Каждого ТекОперация Из ПакетСервисныхОпераций.СервисныеОперацииПакета Цикл
		МассивСоставляющих = Справочники.Scan_СоставляющиеСервисныхОпераций.ПолучитьМассивСоставляющих(ТекОперация.СервиснаяОперацияПакета);
		Если МассивСоставляющих.Количество() = 0 Тогда
			НоваяСтрока = ДокОбъект.СписокРабот.Добавить();
			НоваяСтрока.Работы = ТекОперация.СервиснаяОперацияПакета;
		Иначе
			Для Каждого ТекСоставляющая Из МассивСоставляющих Цикл
				НоваяСтрока = ДокОбъект.СписокРабот.Добавить();
				НоваяСтрока.Работы = ТекОперация.СервиснаяОперацияПакета;
				НоваяСтрока.Составляющая = ТекСоставляющая;			
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписьЖурналаРегистрации("Формирование документа", УровеньЖурналаРегистрации.Информация, , ДокОбъект.Ссылка,
		НСтр("ru = 'Программно сформирован чек лист технического состояния изделия'"));
		Возврат ДокОбъект.Ссылка;	
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки(); 
		Возврат Неопределено;
	КонецПопытки;
КонецФункции   

Функция ПолучитьАктуальныйЧекЛист(ИзделиеСсылка, ЗаписываемыйЧекЛист = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ЗаписываемыйЧекЛист) Тогда
		ЗаписываемыйЧекЛист = Документы.Scan_ЧекЛистТехническогоСостоянияИзделия.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЧекЛистТехническогоСостоянияИзделия.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Scan_ЧекЛистТехническогоСостоянияИзделия КАК Scan_ЧекЛистТехническогоСостоянияИзделия
		|ГДЕ
		|	Scan_ЧекЛистТехническогоСостоянияИзделия.Изделие = &ИзделиеСсылка
		|	И Scan_ЧекЛистТехническогоСостоянияИзделия.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЧекЛистТехническогоСостоянияИзделия.Проведен = ИСТИНА
		|	И Scan_ЧекЛистТехническогоСостоянияИзделия.ФактическаяДатаВыполненияКТС = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И Scan_ЧекЛистТехническогоСостоянияИзделия.Ссылка <> &ЗаписываемыйЧекЛист";
	
	Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
	Запрос.УстановитьПараметр("ЗаписываемыйЧекЛист", ЗаписываемыйЧекЛист);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;;
	
	Возврат Документы.Scan_ЧекЛистТехническогоСостоянияИзделия.ПустаяСсылка();
КонецФункции 

Функция ПолучитьМассивБукв() Экспорт
	МассивБукв = Новый Массив;
	
	МассивБукв.Добавить("0");
	МассивБукв.Добавить("а");
	МассивБукв.Добавить("б");
	МассивБукв.Добавить("в");
	МассивБукв.Добавить("г");
	МассивБукв.Добавить("д"); 	
	МассивБукв.Добавить("е");
	МассивБукв.Добавить("ж");
	МассивБукв.Добавить("з");
	МассивБукв.Добавить("и");
	МассивБукв.Добавить("к");
	МассивБукв.Добавить("л");
	МассивБукв.Добавить("м");
	МассивБукв.Добавить("н");
	МассивБукв.Добавить("о"); 	
	МассивБукв.Добавить("п");
	МассивБукв.Добавить("р");
	МассивБукв.Добавить("с");
	МассивБукв.Добавить("т");
	МассивБукв.Добавить("у");
	МассивБукв.Добавить("ф");
	МассивБукв.Добавить("х");
	МассивБукв.Добавить("ц");
	МассивБукв.Добавить("ч");
	МассивБукв.Добавить("ш");
	МассивБукв.Добавить("э"); 
	МассивБукв.Добавить("ю"); 
	МассивБукв.Добавить("я");
	
	Возврат МассивБукв;
КонецФункции

//rarus tenkam 18.11.2017 mantis 9427 ---

//rarus tenkam 07.02.2018 mantis 12721 +++
Функция ОбработатьДанныеАКБ(ЧекЛистСсылка) Экспорт
	ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Информация, , ,"Начата обработка созданного чек листа",);
				
	Если НЕ ЗначениеЗаполнено(ЧекЛистСсылка.Изделие) Тогда
		ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В чек-листе %1 не заполнено изделие.'"), ЧекЛистСсылка),);
		Возврат Неопределено;
	КонецЕсли;
	
	ВСоставеЕстьАКБ1 = Ложь;
	ВСоставеЕстьАКБ2 = Ложь;
	Если ЕстьПроверкаУровняЗаряженностиАКБ(ЧекЛистСсылка, ВСоставеЕстьАКБ1, ВСоставеЕстьАКБ2) Тогда
		
		НомерЧекЛиста = ПолучитьПорядковыйНомерЧекЛиста(ЧекЛистСсылка);
		
		Если НомерЧекЛиста = 1 Тогда
			Если ВСоставеЕстьАКБ1 И Справочники.Scan_АккумуляторныеБатареи.НетАКБ(ЧекЛистСсылка.Изделие,1) Тогда
				НоваяАКБ = Справочники.Scan_АккумуляторныеБатареи.СоздатьЭлемент();
				НоваяАКБ.Изделие = ЧекЛистСсылка.Изделие;
				НоваяАКБ.ПорядокАКБ = 1;
				НоваяАКБ.Наименование = НоваяАКБ.Изделие.НомерИзделия + ", АКБ " + НоваяАКБ.ПорядокАКБ + ", " + НоваяАКБ.НомерАКБ;
				Попытка
					НоваяАКБ.Записать();
					ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Информация, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создана АКБ %1.'"), НоваяАКБ.Ссылка),);
				Исключение
					ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось создать АКБ № %1 для изделия %2.'"), 1, ЧекЛистСсылка.Изделие),);
				КонецПопытки; 				
			КонецЕсли;
			
			Если ВСоставеЕстьАКБ2 И Справочники.Scan_АккумуляторныеБатареи.НетАКБ(ЧекЛистСсылка.Изделие,2) Тогда
				НоваяАКБ = Справочники.Scan_АккумуляторныеБатареи.СоздатьЭлемент();
				НоваяАКБ.Изделие = ЧекЛистСсылка.Изделие;
				НоваяАКБ.ПорядокАКБ = 2;
				НоваяАКБ.Наименование = НоваяАКБ.Изделие.НомерИзделия + ", АКБ " + НоваяАКБ.ПорядокАКБ + ", " + НоваяАКБ.НомерАКБ;
				Попытка
					НоваяАКБ.Записать();
					ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Информация, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создана АКБ %1.'"), НоваяАКБ.Ссылка),);
				Исключение
					ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось создать АКБ № %1 для изделия %2.'"), 2, ЧекЛистСсылка.Изделие),);
				КонецПопытки; 				
			КонецЕсли;
			
		ИначеЕсли НомерЧекЛиста = 2 Тогда
			ЧекЛистОбъект = ЧекЛистСсылка.ПолучитьОбъект();
			
			Для Каждого ТекСтрока Из ЧекЛистОбъект.СписокРабот Цикл
				Если ТекСтрока.Составляющая.Код = "100000001" И ТекСтрока.Составляющая.Наименование = "Емкость" Тогда
					
					АКБИзделия = Справочники.Scan_АккумуляторныеБатареи.ПолучитьАКБ(ЧекЛистСсылка.Изделие, 1);
					СтруктураСведений = РегистрыСведений.Scan_ДанныеПоАКБИзделий.ПолучитьХарактеристикиАКБ(АКБИзделия, ТекущаяДата());
					Если ЗначениеЗаполнено(СтруктураСведений) Тогда
						ТекСтрока.РезультатБыло = СтруктураСведений.Емкость;	
					Иначе
						ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получеть значение емкости из регистра Данные по АКБ для АКБ %1.'"), 2, АКБИзделия),);
					КонецЕсли;
					
					
				ИначеЕсли ТекСтрока.Составляющая.Код = "200000001" И ТекСтрока.Составляющая.Наименование = "Емкость" Тогда  
					
					АКБИзделия = Справочники.Scan_АккумуляторныеБатареи.ПолучитьАКБ(ЧекЛистСсылка.Изделие, 2);
					СтруктураСведений = РегистрыСведений.Scan_ДанныеПоАКБИзделий.ПолучитьХарактеристикиАКБ(АКБИзделия, ТекущаяДата());
					Если ЗначениеЗаполнено(СтруктураСведений) Тогда
						ТекСтрока.РезультатБыло = СтруктураСведений.Емкость;	
					Иначе
						ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получеть значение емкости из регистра Данные по АКБ для АКБ %1.'"), 2, АКБИзделия),);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЦикла;
			
			Попытка
				ЧекЛистОбъект.Записать();
				ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Примечание, , ,"В документе %1 заполнено значение Было для Емкостей .",);
			Исключение
				ЗаписьЖурналаРегистрации("Регламентное задание. Контроль сроков выполнения КТС", УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать чек-лист %1 .'"), 2, ЧекЛистСсылка),);
			КонецПопытки; 			
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЕстьПроверкаУровняЗаряженностиАКБ(ЧекЛистСсылка, ВСоставеЕстьАКБ1 = Ложь, ВСоставеЕстьАКБ2 = Ложь) Экспорт 
	Для Каждого ТекСтрока Из ЧекЛистСсылка.СписокРабот Цикл
		Если ТекСтрока.Работы = ПредопределенноеЗначение("Справочник.Scan_СервисныеОперации.ПроверитьУровеньЗаряженностиАккумуляторныхБатареи1") Тогда
			ВСоставеЕстьАКБ1 = Истина;
		КонецЕсли;
		
		Если ТекСтрока.Работы = ПредопределенноеЗначение("Справочник.Scan_СервисныеОперации.ПроверитьУровеньЗаряженностиАккумуляторныхБатареи2") Тогда
			ВСоставеЕстьАКБ2 = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ВСоставеЕстьАКБ1 ИЛИ ВСоставеЕстьАКБ2 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПорядковыйНомерЧекЛиста(ЧекЛистСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЧекЛистТехническогоСостоянияИзделия.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Scan_ЧекЛистТехническогоСостоянияИзделия КАК Scan_ЧекЛистТехническогоСостоянияИзделия
		|ГДЕ
		|	Scan_ЧекЛистТехническогоСостоянияИзделия.Изделие = &Изделие
		|	И Scan_ЧекЛистТехническогоСостоянияИзделия.Проведен = ИСТИНА
		|	И Scan_ЧекЛистТехническогоСостоянияИзделия.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Scan_ЧекЛистТехническогоСостоянияИзделия.Дата";
	
	Запрос.УстановитьПараметр("Изделие", ЧекЛистСсылка.Изделие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НомерЧекЛиста = 1;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Ссылка = ЧекЛистСсылка Тогда
			Возврат НомерЧекЛиста;
		КонецЕсли;
		НомерЧекЛиста = НомерЧекЛиста + 1;
	КонецЦикла;
	Возврат 0;	
		
КонецФункции

//rarus tenkam 07.02.2018 mantis 12721 ---