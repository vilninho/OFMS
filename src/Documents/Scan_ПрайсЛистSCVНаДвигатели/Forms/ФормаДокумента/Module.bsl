#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Вызываем общий обработчик события
	Если Не Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПараметрыДокумента();
	КонецЕсли;
	
	ЗаполнитьТипыПродуктов();
	ЗаполнитьТаблицыПрайсЛиста();
	
	ДобавитьЭлементыОпцииОборудования();
	ЗаполнитьТаблицуОпцииОборудования();
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	// Прикрепить файл можно только к записанному документу
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьИзФайлаФрагмент", ЭтотОбъект),
		Нстр("ru = 'Перед загрузкой необходимо записать документ. Продолжить?'; en = 'It is necessary to save the document. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		// На самом деле, таблица будет перезаполнена с учетом новых даннных из файла
		Если Объект.ПрайсЛист.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект),
			Нстр("ru = 'Таблица прайс-листа будет перезаполнена. Продолжить?'; en = 'The prices table will be updated. Proceed?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьЗагрузкуПрайсЛистаФайла();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	// Если пользователь согласен, документ записывается
	Если  РезультатВопроса = КодВозвратаДиалога.Да 
		И Записать()
		Тогда
		Если Объект.ПрайсЛист.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект),
			Нстр("ru = 'Таблица прайс-листа будет перезаполнена. Продолжить?'; en = 'The prices table will be updated. Proceed?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьЗагрузкуПрайсЛистаФайла();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗагрузкуПрайсЛистаФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствия(Команда)
	
	Если Объект.ТаблицаСоответствия.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСоответствияЗавершение", ЭтотОбъект),
		Нстр("ru = 'Будут установлены соответствия опций. Продолжить?'; en = 'Options will be matched. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьСоответствияНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Сообщить(Нстр("ru = 'Начата установка соответствий'; en = 'Matching'") + " " + ТекущаяДата());
		УстановитьСоответствияНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыДокумента()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Объект.Автор                 = ТекущийПользователь;
	Объект.ВалютаДокумента       = Справочники.Валюты.НайтиПоКоду("643");
	Объект.ДатаСоздания          = ТекущаяДата();
	Объект.Дата                  = ТекущаяДата();
	Объект.Менеджер              = ТекущийПользователь;
	Объект.Организация           = ТекущийПользователь.Организация;
	Объект.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыПродуктов()
	
	//!!
	// Заменить идентификаторы на корректные
	ТипПродуктаIndustrial        = Справочники.Scan_ТипыПродуктов.НайтиПоРеквизиту("IDExternalSystem", "1972d852-5c9c-11e7-80fd-001dd8b71c6f");
	ТипПродуктаPower_generation  = Справочники.Scan_ТипыПродуктов.НайтиПоРеквизиту("IDExternalSystem", "76f4cb96-cdca-11e6-80f0-001dd8b71c6f");
	ТипПродуктаMarine_propulsion = Справочники.Scan_ТипыПродуктов.НайтиПоРеквизиту("IDExternalSystem", "1972d852-5c9c-11e7-80fd-001dd8b71c6f");
	ТипПродуктаMarine_auxiliary  = Справочники.Scan_ТипыПродуктов.НайтиПоРеквизиту("IDExternalSystem", "76f4cb96-cdca-11e6-80f0-001dd8b71c6f");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

#Область ЗагрузкаФайлаПрайсЛиста

&НаКлиенте
Процедура ВыполнитьЗагрузкуПрайсЛистаФайла()
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьПрайсЛистНаДвигателиИзФайла", ЭтотОбъект);
	
	ПараметрыКоманды = Новый Структура("ИмяКоманды", "ЗагрузитьПрайсЛистНаДвигателиИзФайла");
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла", ПараметрыКоманды, ЭтотОбъект,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПрайсЛистНаДвигателиИзФайла(ЗначенияВыбранныхПараметров, Параметры) Экспорт
	
	Если    ЗначенияВыбранныхПараметров = Неопределено 
		Или ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена 
		Тогда
		Возврат;
	КонецЕсли;
		
	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'") + " " + ТекущаяДата());
		
	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьПрайсЛистНаДвигателиИзФайлаЗавершение(ЗначенияВыбранныхПараметров);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьПрайсЛистНаДвигателиИзФайлаФрагмент", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПрайсЛистНаДвигателиИзФайлаФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьПрайсЛистНаДвигателиИзФайлаЗавершение(ЗначенияВыбранныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПрайсЛистНаДвигателиИзФайлаЗавершение(Знач ЗначенияВыбранныхПараметров)
	
	// Чтение файла прайс-листа
	ПрочитатьФайлПрайсЛистаНаДвигатели(ЗначенияВыбранныхПараметров);
	// Заполнение таблицы опций оборудования - это таблица формы, а не объекта
	ЗаполнитьТаблицуОпцииОборудования();
	
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'") + " " + ТекущаяДата());
	
	// Оповещение для автоматического обновления списка присоединенных файлов
	Оповестить("Запись_Файл");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлПрайсЛистаНаДвигатели(ЗначенияВыбранныхПараметров)
	
	ИмяФайла = "";
	
	ВалютаRUB = Справочники.Валюты.НайтиПоКоду("643");
	ВалютаEUR = Справочники.Валюты.НайтиПоКоду("978");
	
	МассивПодстрок = СтрРазделить(ЗначенияВыбранныхПараметров.ПутьКФайлу, "\", Истина);
	Если МассивПодстрок.Количество() > 0 Тогда
		ИмяФайла = МассивПодстрок[МассивПодстрок.Количество() - 1];
	КонецЕсли;
	
	// Сохраняем файл в каталоге временных файлов
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДатаСеанса(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	// Записываем данные из временного хранилища в файл
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЗначенияВыбранныхПараметров.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	//Читать будем построителем запроса через табличный документ
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	#Область ЧтениеIndustrial
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть("Industrial");
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 4;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 20;
	
	// Копируем последнюю строку шапки таблицы для собственных заголовков колонок
	ОбластьДанных.ВставитьОбласть(ОбластьДанных.Область("R3"), , ТипСмещенияТабличногоДокумента.ПоВертикали);
	НомерПоследнейСтроки = ОбластьДанных.ВысотаТаблицы;
	
	// Добавляем собственные заголовки колонок
	Для Счетчик = 1 По 20 Цикл
		ОбластьЯчейка = ОбластьДанных.Область(НомерПервойСтроки, Счетчик, НомерПервойСтроки, Счетчик);
		ОбластьЯчейка.Текст = "_" + Счетчик;
	КонецЦикла;
	
	// Читаем данные построителем запроса из области табличного документа
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	Попытка
		ДанныеIndustrial = ПостроительЗапроса.Результат.Выгрузить(); 
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// Доп проверка - все ли колонки прочитаны, их столько, сколько нужно
	Если ДанныеIndustrial.Колонки.Количество() < 20 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЧтениеPower_generation
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть("Power_generation");
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 4;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 22;
	
	// Копируем последнюю строку шапки таблицы для собственных заголовков колонок
	ОбластьДанных.ВставитьОбласть(ОбластьДанных.Область("R3"), , ТипСмещенияТабличногоДокумента.ПоВертикали);
	НомерПоследнейСтроки = ОбластьДанных.ВысотаТаблицы;
	
	// Добавляем собственные заголовки колонок
	Для Счетчик = 1 По 22 Цикл
		ОбластьЯчейка = ОбластьДанных.Область(НомерПервойСтроки, Счетчик, НомерПервойСтроки, Счетчик);
		ОбластьЯчейка.Текст = "_" + Счетчик;
	КонецЦикла;
	
	// Читаем данные построителем запроса из области табличного документа
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	Попытка
		ДанныеPower_generation = ПостроительЗапроса.Результат.Выгрузить(); 
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// Доп проверка - все ли колонки прочитаны, их столько, сколько нужно
	Если ДанныеPower_generation.Колонки.Количество() < 22 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЧтениеMarine_propulsion
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть("Marine_propulsion");
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 4;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 17;
	
	// Копируем последнюю строку шапки таблицы для собственных заголовков колонок
	ОбластьДанных.ВставитьОбласть(ОбластьДанных.Область("R3"), , ТипСмещенияТабличногоДокумента.ПоВертикали);
	НомерПоследнейСтроки = ОбластьДанных.ВысотаТаблицы;
	
	// Добавляем собственные заголовки колонок
	Для Счетчик = 1 По 17 Цикл
		ОбластьЯчейка = ОбластьДанных.Область(НомерПервойСтроки, Счетчик, НомерПервойСтроки, Счетчик);
		ОбластьЯчейка.Текст = "_" + Счетчик;
	КонецЦикла;
	
	// Читаем данные построителем запроса из области табличного документа
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	Попытка
		ДанныеMarine_propulsion = ПостроительЗапроса.Результат.Выгрузить(); 
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// Доп проверка - все ли колонки прочитаны, их столько, сколько нужно
	Если ДанныеMarine_propulsion.Колонки.Количество() < 17 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЧтениеMarine_auxiliary
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть("Marine_auxiliary");
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 4;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 15;
	
	// Копируем последнюю строку шапки таблицы для собственных заголовков колонок
	ОбластьДанных.ВставитьОбласть(ОбластьДанных.Область("R3"), , ТипСмещенияТабличногоДокумента.ПоВертикали);
	НомерПоследнейСтроки = ОбластьДанных.ВысотаТаблицы;
	
	// Добавляем собственные заголовки колонок
	Для Счетчик = 1 По 15 Цикл
		ОбластьЯчейка = ОбластьДанных.Область(НомерПервойСтроки, Счетчик, НомерПервойСтроки, Счетчик);
		ОбластьЯчейка.Текст = "_" + Счетчик;
	КонецЦикла;
	
	// Читаем данные построителем запроса из области табличного документа
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	Попытка
		ДанныеMarine_auxiliary = ПостроительЗапроса.Результат.Выгрузить(); 
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// Доп проверка - все ли колонки прочитаны, их столько, сколько нужно
	Если ДанныеMarine_auxiliary.Колонки.Количество() < 15 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЧтениеEquipment
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть("Equipment");
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 5;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 16;
	
	// Копируем последнюю строку шапки таблицы для собственных заголовков колонок
	ОбластьДанных.ВставитьОбласть(ОбластьДанных.Область("R4"), , ТипСмещенияТабличногоДокумента.ПоВертикали);
	НомерПоследнейСтроки = ОбластьДанных.ВысотаТаблицы;
	
	// Добавляем собственные заголовки колонок
	Для Счетчик = 1 По 16 Цикл
		ОбластьЯчейка = ОбластьДанных.Область(НомерПервойСтроки, Счетчик, НомерПервойСтроки, Счетчик);
		ОбластьЯчейка.Текст = "_" + Счетчик;
	КонецЦикла;
	
	// Читаем данные построителем запроса из области табличного документа
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	Попытка
		ДанныеEquipment = ПостроительЗапроса.Результат.Выгрузить(); 
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// Доп проверка - все ли колонки прочитаны, их столько, сколько нужно
	Если ДанныеEquipment.Колонки.Количество() < 16 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗаполнениеТабличныхЧастей
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрайсЛист",                    Объект.ПрайсЛист.Выгрузить());
	Запрос.УстановитьПараметр("ДанныеIndustrial",             ДанныеIndustrial);
	Запрос.УстановитьПараметр("ДанныеPower_generation",       ДанныеPower_generation);
	Запрос.УстановитьПараметр("ДанныеMarine_propulsion",      ДанныеMarine_propulsion);
	Запрос.УстановитьПараметр("ДанныеMarine_auxiliary",       ДанныеMarine_auxiliary);
	Запрос.УстановитьПараметр("ДанныеEquipment",              ДанныеEquipment);
	Запрос.УстановитьПараметр("ТипПродуктаIndustrial",        ТипПродуктаIndustrial);
	Запрос.УстановитьПараметр("ТипПродуктаPower_generation",  ТипПродуктаPower_generation);
	Запрос.УстановитьПараметр("ТипПродуктаMarine_propulsion", ТипПродуктаMarine_propulsion);
	Запрос.УстановитьПараметр("ТипПродуктаMarine_auxiliary",  ТипПродуктаMarine_auxiliary);
	Запрос.УстановитьПараметр("ИмяФайла",                     ИмяФайла);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПрайсЛист.ТипПродукта КАК ТипПродукта,
	|	ПрайсЛист.Объем КАК Объем,
	|	ПрайсЛист.Тип КАК Тип,
	|	ПрайсЛист.VariantCode КАК VariantCode,
	|	ПрайсЛист.RefCode КАК RefCode,
	|	ПрайсЛист.Цена КАК Цена,
	|	ПрайсЛист.ЦенаEUR КАК ЦенаEUR,
	|	ПрайсЛист.КлассМощности КАК КлассМощности,
	|	ПрайсЛист.КлассЭкологический КАК КлассЭкологический,
	|	ПрайсЛист.КлассЭкологическийСпособПовышения КАК КлассЭкологическийСпособПовышения,
	|	ПрайсЛист.СистемаВпрыска КАК СистемаВпрыска,
	|	ПрайсЛист.СистемаОхлаждения КАК СистемаОхлаждения,
	|	ПрайсЛист.КрутящийМомент КАК КрутящийМомент,
	|	ПрайсЛист.КрутящийМоментОбороты КАК КрутящийМоментОбороты,
	|	ПрайсЛист.МощностьКВТ КАК МощностьКВТ,
	|	ПрайсЛист.МощностьЛС КАК МощностьЛС,
	|	ПрайсЛист.МощностьОбороты КАК МощностьОбороты,
	|	ПрайсЛист.МощностьКВТ1500 КАК МощностьКВТ1500,
	|	ПрайсЛист.МощностьКВТ1800 КАК МощностьКВТ1800,
	|	ПрайсЛист.МощностьКВА1500 КАК МощностьКВА1500,
	|	ПрайсЛист.МощностьКВА1800 КАК МощностьКВА1800,
	|	ПрайсЛист.МощностьКВЕ1500 КАК МощностьКВЕ1500,
	|	ПрайсЛист.МощностьКВЕ1800 КАК МощностьКВЕ1800,
	|	ПрайсЛист.КоэффициентПроизводительностиКВТ1500 КАК КоэффициентПроизводительностиКВТ1500,
	|	ПрайсЛист.КоэффициентПроизводительностиКВТ1800 КАК КоэффициентПроизводительностиКВТ1800,
	|	ПрайсЛист.КоэффициентПроизводительностиКВА1500 КАК КоэффициентПроизводительностиКВА1500,
	|	ПрайсЛист.КоэффициентПроизводительностиКВА1800 КАК КоэффициентПроизводительностиКВА1800,
	|	ПрайсЛист.ИсточникЗагрузки КАК ИсточникЗагрузки
	|ПОМЕСТИТЬ ВТ_ПрайсЛист
	|ИЗ
	|	&ПрайсЛист КАК ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТипПродуктаIndustrial КАК ТипПродукта,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._1 КАК Строка(10)), """") КАК Объем,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._2 КАК Строка(10)), """") КАК Тип,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._3 КАК Число(10)), 0) КАК МощностьКВТ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._4 КАК Число(10)), 0) КАК МощностьЛС,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._5 КАК Число(10)), 0) КАК МощностьОбороты,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._6 КАК Строка(10)), """") КАК КлассМощности,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._7 КАК Число(10)), 0) КАК КрутящийМомент,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._8 КАК Число(10)), 0) КАК КрутящийМоментОбороты,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._9 КАК Строка(10)), """") КАК СистемаВпрыска,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._10 КАК Строка(25)), """") КАК КлассЭкологическийСпособПовышения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._15 КАК Строка(10)), """") КАК КлассЭкологический,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._18 КАК Строка(10)), """") КАК VariantCode,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._19 КАК Строка(10)), """") КАК RefCode,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеIndustrial._20 КАК Число(15,2)), 0) КАК Цена,
	|	ВЫРАЗИТЬ("""" КАК Строка(25)) КАК СистемаОхлаждения,
	|	0 КАК МощностьКВТ1500,
	|	0 КАК МощностьКВТ1800,
	|	0 КАК МощностьКВА1500,
	|	0 КАК МощностьКВА1800,
	|	0 КАК МощностьКВЕ1500,
	|	0 КАК МощностьКВЕ1800,
	|	0 КАК КоэффициентПроизводительностиКВТ1500,
	|	0 КАК КоэффициентПроизводительностиКВТ1800,
	|	0 КАК КоэффициентПроизводительностиКВА1500,
	|	0 КАК КоэффициентПроизводительностиКВА1800,
	|	&ИмяФайла КАК ИсточникЗагрузки
	|ПОМЕСТИТЬ ВТ_ДанныеIndustrial
	|ИЗ
	|	&ДанныеIndustrial КАК ДанныеIndustrial
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТипПродуктаPower_generation КАК ТипПродукта,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._1 КАК Строка(10)), """") КАК Объем,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._2 КАК Строка(10)), """") КАК Тип,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._3 КАК Число(10)), 0) КАК МощностьКВТ1500,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._4 КАК Число(10)), 0) КАК МощностьКВТ1800,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._5 КАК Число(10)), 0) КАК МощностьКВА1500,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._6 КАК Число(10)), 0) КАК МощностьКВА1800,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._7 КАК Число(10)), 0) КАК МощностьКВЕ1500,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._8 КАК Число(10)), 0) КАК МощностьКВЕ1800,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._9 КАК Число(10)), 0) КАК КоэффициентПроизводительностиКВТ1500,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._10 КАК Число(10)), 0) КАК КоэффициентПроизводительностиКВТ1800,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._11 КАК Число(10)), 0) КАК КоэффициентПроизводительностиКВА1500,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._12 КАК Число(10)), 0) КАК КоэффициентПроизводительностиКВА1800,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._13 КАК Строка(10)), """") КАК КлассМощности,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._14 КАК Строка(10)), """") КАК СистемаВпрыска,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._15 КАК Строка(25)), """") КАК КлассЭкологическийСпособПовышения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._20 КАК Строка(10)), """") КАК VariantCode,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._21 КАК Строка(10)), """") КАК RefCode,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеPower_generation._22 КАК Число(15,2)), 0) КАК Цена,
	|	ВЫРАЗИТЬ("""" КАК Строка(10)) КАК КлассЭкологический,
	|	ВЫРАЗИТЬ("""" КАК Строка(25)) СистемаОхлаждения,
	|	0 КАК КрутящийМомент,
	|	0 КАК КрутящийМоментОбороты,
	|	0 КАК МощностьКВТ,
	|	0 КАК МощностьЛС,
	|	0 КАК МощностьОбороты,
	|	&ИмяФайла КАК ИсточникЗагрузки
	|ПОМЕСТИТЬ ВТ_ДанныеPower_generation
	|ИЗ
	|	&ДанныеPower_generation КАК ДанныеPower_generation
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТипПродуктаMarine_propulsion КАК ТипПродукта,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._1 КАК Строка(10)), """") КАК Объем,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._2 КАК Строка(10)), """") КАК Тип,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._3 КАК Число(10)), 0) КАК МощностьКВТ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._4 КАК Число(10)), 0) КАК МощностьЛС,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._5 КАК Число(10)), 0) КАК КрутящийМоментОбороты,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._6 КАК Строка(10)), """") КАК КлассМощности,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._7 КАК Строка(25)), """") КАК СистемаОхлаждения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._8 КАК Строка(10)), """") КАК СистемаВпрыска,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._9 КАК Строка(25)), """") КАК КлассЭкологическийСпособПовышения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._15 КАК Строка(10)), """") КАК VariantCode,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._16 КАК Строка(10)), """") КАК RefCode,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_propulsion._17 КАК Число(15,2)), 0) КАК Цена,
	|	ВЫРАЗИТЬ("""" КАК Строка(10)) КАК КлассЭкологический,
	|	0 КАК КрутящийМомент,
	|	0 КАК МощностьОбороты,
	|	0 КАК МощностьКВТ1500,
	|	0 КАК МощностьКВТ1800,
	|	0 КАК МощностьКВА1500,
	|	0 КАК МощностьКВА1800,
	|	0 КАК МощностьКВЕ1500,
	|	0 КАК МощностьКВЕ1800,
	|	0 КАК КоэффициентПроизводительностиКВТ1500,
	|	0 КАК КоэффициентПроизводительностиКВТ1800,
	|	0 КАК КоэффициентПроизводительностиКВА1500,
	|	0 КАК КоэффициентПроизводительностиКВА1800,
	|	&ИмяФайла КАК ИсточникЗагрузки
	|ПОМЕСТИТЬ ВТ_ДанныеMarine_propulsion
	|ИЗ
	|	&ДанныеMarine_propulsion КАК ДанныеMarine_propulsion
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТипПродуктаMarine_auxiliary КАК ТипПродукта,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._1 КАК Строка(10)), """") КАК Объем,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._2 КАК Строка(10)), """") КАК Тип,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._3 КАК Число(10)), 0) КАК МощностьКВТ1500,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._4 КАК Число(10)), 0) КАК МощностьКВТ1800,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._5 КАК Строка(10)), """") КАК КлассМощности,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._6 КАК Строка(25)), """") КАК СистемаОхлаждения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._7 КАК Строка(10)), """") КАК СистемаВпрыска,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._8 КАК Строка(25)), """") КАК КлассЭкологическийСпособПовышения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._13 КАК Строка(10)), """") КАК VariantCode,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._14 КАК Строка(10)), """") КАК RefCode,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеMarine_auxiliary._15 КАК Число(15,2)), 0) КАК Цена,
	|	ВЫРАЗИТЬ("""" КАК Строка(10)) КАК КлассЭкологический,
	|	0 КАК КрутящийМомент,
	|	0 КАК КрутящийМоментОбороты,
	|	0 КАК МощностьКВТ,
	|	0 КАК МощностьЛС,
	|	0 КАК МощностьОбороты,
	|	0 КАК МощностьКВА1500,
	|	0 КАК МощностьКВА1800,
	|	0 КАК МощностьКВЕ1500,
	|	0 КАК МощностьКВЕ1800,
	|	0 КАК КоэффициентПроизводительностиКВТ1500,
	|	0 КАК КоэффициентПроизводительностиКВТ1800,
	|	0 КАК КоэффициентПроизводительностиКВА1500,
	|	0 КАК КоэффициентПроизводительностиКВА1800,
	|	&ИмяФайла КАК ИсточникЗагрузки
	|ПОМЕСТИТЬ ВТ_ДанныеMarine_auxiliary
	|ИЗ
	|	&ДанныеMarine_auxiliary КАК ДанныеMarine_auxiliary
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеEquipment._1 КАК VariantCode,
	|	ДанныеEquipment._2 КАК RefCode,
	|	ДанныеEquipment._3 КАК VariantDescription,
	|	ДанныеEquipment._4 КАК _9Ind,
	|	ДанныеEquipment._5 КАК _9Pg,
	|	ДанныеEquipment._6 КАК _9MProp,
	|	ДанныеEquipment._7 КАК _9MAux,
	|	ДанныеEquipment._8 КАК _13Ind,
	|	ДанныеEquipment._9 КАК _13Pg,
	|	ДанныеEquipment._10 КАК _13MProp,
	|	ДанныеEquipment._11 КАК _13MAux,
	|	ДанныеEquipment._12 КАК _16Ind,
	|	ДанныеEquipment._13 КАК _16Pg,
	|	ДанныеEquipment._14 КАК _16MProp,
	|	ДанныеEquipment._15 КАК _16MAux,
	|	ДанныеEquipment._16 КАК Цена,
	|	0 КАК ЦенаEUR
	|ПОМЕСТИТЬ ВТ_ДанныеEquipment
	|ИЗ
	|	&ДанныеEquipment КАК ДанныеEquipment
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеIndustrial.ТипПродукта КАК ТипПродукта,
	|	ВТ_ДанныеIndustrial.Объем КАК Объем,
	|	ВТ_ДанныеIndustrial.Тип КАК Тип,
	|	ПОДСТРОКА(ВТ_ДанныеIndustrial.VariantCode, 1, 7) КАК VariantCode,
	|	ВТ_ДанныеIndustrial.RefCode КАК RefCode,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "0 ", "ВТ_ДанныеIndustrial.Цена ") + " КАК Цена,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "ВТ_ДанныеIndustrial.Цена ", "0 ") + " КАК ЦенаEUR,
	|	ВТ_ДанныеIndustrial.КлассМощности КАК КлассМощности,
	|	ВТ_ДанныеIndustrial.КлассЭкологический КАК КлассЭкологический,
	|	ВТ_ДанныеIndustrial.КлассЭкологическийСпособПовышения КАК КлассЭкологическийСпособПовышения,
	|	ВТ_ДанныеIndustrial.СистемаВпрыска КАК СистемаВпрыска,
	|	ВТ_ДанныеIndustrial.СистемаОхлаждения КАК СистемаОхлаждения,
	|	ВТ_ДанныеIndustrial.КрутящийМомент КАК КрутящийМомент,
	|	ВТ_ДанныеIndustrial.КрутящийМоментОбороты КАК КрутящийМоментОбороты,
	|	ВТ_ДанныеIndustrial.МощностьКВТ КАК МощностьКВТ,
	|	ВТ_ДанныеIndustrial.МощностьЛС КАК МощностьЛС,
	|	ВТ_ДанныеIndustrial.МощностьОбороты КАК МощностьОбороты,
	|	ВТ_ДанныеIndustrial.МощностьКВТ1500 КАК МощностьКВТ1500,
	|	ВТ_ДанныеIndustrial.МощностьКВТ1800 КАК МощностьКВТ1800,
	|	ВТ_ДанныеIndustrial.МощностьКВА1500 КАК МощностьКВА1500,
	|	ВТ_ДанныеIndustrial.МощностьКВА1800 КАК МощностьКВА1800,
	|	ВТ_ДанныеIndustrial.МощностьКВЕ1500 КАК МощностьКВЕ1500,
	|	ВТ_ДанныеIndustrial.МощностьКВЕ1800 КАК МощностьКВЕ1800,
	|	ВТ_ДанныеIndustrial.КоэффициентПроизводительностиКВТ1500 КАК КоэффициентПроизводительностиКВТ1500,
	|	ВТ_ДанныеIndustrial.КоэффициентПроизводительностиКВТ1800 КАК КоэффициентПроизводительностиКВТ1800,
	|	ВТ_ДанныеIndustrial.КоэффициентПроизводительностиКВА1500 КАК КоэффициентПроизводительностиКВА1500,
	|	ВТ_ДанныеIndustrial.КоэффициентПроизводительностиКВА1800 КАК КоэффициентПроизводительностиКВА1800,
	|	ВТ_ДанныеIndustrial.ИсточникЗагрузки КАК ИсточникЗагрузки
	|ПОМЕСТИТЬ ВТ_ДанныеДляЗагрузки
	|ИЗ
	|	ВТ_ДанныеIndustrial КАК ВТ_ДанныеIndustrial
	|ГДЕ
	|	ВТ_ДанныеIndustrial.VariantCode <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеPower_generation.ТипПродукта,
	|	ВТ_ДанныеPower_generation.Объем,
	|	ВТ_ДанныеPower_generation.Тип,
	|	ПОДСТРОКА(ВТ_ДанныеPower_generation.VariantCode, 1, 7),
	|	ВТ_ДанныеPower_generation.RefCode,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "0 ", "ВТ_ДанныеPower_generation.Цена ") + " КАК Цена,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "ВТ_ДанныеPower_generation.Цена ", "0 ") + " КАК ЦенаEUR,
	|	ВТ_ДанныеPower_generation.КлассМощности,
	|	ВТ_ДанныеPower_generation.КлассЭкологический,
	|	ВТ_ДанныеPower_generation.КлассЭкологическийСпособПовышения,
	|	ВТ_ДанныеPower_generation.СистемаВпрыска,
	|	ВТ_ДанныеPower_generation.СистемаОхлаждения,
	|	ВТ_ДанныеPower_generation.КрутящийМомент,
	|	ВТ_ДанныеPower_generation.КрутящийМоментОбороты,
	|	ВТ_ДанныеPower_generation.МощностьКВТ,
	|	ВТ_ДанныеPower_generation.МощностьЛС,
	|	ВТ_ДанныеPower_generation.МощностьОбороты,
	|	ВТ_ДанныеPower_generation.МощностьКВТ1500,
	|	ВТ_ДанныеPower_generation.МощностьКВТ1800,
	|	ВТ_ДанныеPower_generation.МощностьКВА1500,
	|	ВТ_ДанныеPower_generation.МощностьКВА1800,
	|	ВТ_ДанныеPower_generation.МощностьКВЕ1500,
	|	ВТ_ДанныеPower_generation.МощностьКВЕ1800,
	|	ВТ_ДанныеPower_generation.КоэффициентПроизводительностиКВТ1500,
	|	ВТ_ДанныеPower_generation.КоэффициентПроизводительностиКВТ1800,
	|	ВТ_ДанныеPower_generation.КоэффициентПроизводительностиКВА1500,
	|	ВТ_ДанныеPower_generation.КоэффициентПроизводительностиКВА1800,
	|	ВТ_ДанныеPower_generation.ИсточникЗагрузки
	|ИЗ
	|	ВТ_ДанныеPower_generation КАК ВТ_ДанныеPower_generation
	|ГДЕ
	|	ВТ_ДанныеPower_generation.VariantCode <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеMarine_propulsion.ТипПродукта,
	|	ВТ_ДанныеMarine_propulsion.Объем,
	|	ВТ_ДанныеMarine_propulsion.Тип,
	|	ПОДСТРОКА(ВТ_ДанныеMarine_propulsion.VariantCode, 1, 7),
	|	ВТ_ДанныеMarine_propulsion.RefCode,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "0 ", "ВТ_ДанныеMarine_propulsion.Цена ") + " КАК Цена,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "ВТ_ДанныеMarine_propulsion.Цена ", "0 ") + " КАК ЦенаEUR,
	|	ВТ_ДанныеMarine_propulsion.КлассМощности,
	|	ВТ_ДанныеMarine_propulsion.КлассЭкологический,
	|	ВТ_ДанныеMarine_propulsion.КлассЭкологическийСпособПовышения,
	|	ВТ_ДанныеMarine_propulsion.СистемаВпрыска,
	|	ВТ_ДанныеMarine_propulsion.СистемаОхлаждения,
	|	ВТ_ДанныеMarine_propulsion.КрутящийМомент,
	|	ВТ_ДанныеMarine_propulsion.КрутящийМоментОбороты,
	|	ВТ_ДанныеMarine_propulsion.МощностьКВТ,
	|	ВТ_ДанныеMarine_propulsion.МощностьЛС,
	|	ВТ_ДанныеMarine_propulsion.МощностьОбороты,
	|	ВТ_ДанныеMarine_propulsion.МощностьКВТ1500,
	|	ВТ_ДанныеMarine_propulsion.МощностьКВТ1800,
	|	ВТ_ДанныеMarine_propulsion.МощностьКВА1500,
	|	ВТ_ДанныеMarine_propulsion.МощностьКВА1800,
	|	ВТ_ДанныеMarine_propulsion.МощностьКВЕ1500,
	|	ВТ_ДанныеMarine_propulsion.МощностьКВЕ1800,
	|	ВТ_ДанныеMarine_propulsion.КоэффициентПроизводительностиКВТ1500,
	|	ВТ_ДанныеMarine_propulsion.КоэффициентПроизводительностиКВТ1800,
	|	ВТ_ДанныеMarine_propulsion.КоэффициентПроизводительностиКВА1500,
	|	ВТ_ДанныеMarine_propulsion.КоэффициентПроизводительностиКВА1800,
	|	ВТ_ДанныеMarine_propulsion.ИсточникЗагрузки
	|ИЗ
	|	ВТ_ДанныеMarine_propulsion КАК ВТ_ДанныеMarine_propulsion
	|ГДЕ
	|	ВТ_ДанныеMarine_propulsion.VariantCode <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеMarine_auxiliary.ТипПродукта,
	|	ВТ_ДанныеMarine_auxiliary.Объем,
	|	ВТ_ДанныеMarine_auxiliary.Тип,
	|	ПОДСТРОКА(ВТ_ДанныеMarine_auxiliary.VariantCode, 1, 7),
	|	ВТ_ДанныеMarine_auxiliary.RefCode,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "0 ", "ВТ_ДанныеMarine_auxiliary.Цена ") + " КАК Цена,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "ВТ_ДанныеMarine_auxiliary.Цена ", "0 ") + " КАК ЦенаEUR,
	|	ВТ_ДанныеMarine_auxiliary.КлассМощности,
	|	ВТ_ДанныеMarine_auxiliary.КлассЭкологический,
	|	ВТ_ДанныеMarine_auxiliary.КлассЭкологическийСпособПовышения,
	|	ВТ_ДанныеMarine_auxiliary.СистемаВпрыска,
	|	ВТ_ДанныеMarine_auxiliary.СистемаОхлаждения,
	|	ВТ_ДанныеMarine_auxiliary.КрутящийМомент,
	|	ВТ_ДанныеMarine_auxiliary.КрутящийМоментОбороты,
	|	ВТ_ДанныеMarine_auxiliary.МощностьКВТ,
	|	ВТ_ДанныеMarine_auxiliary.МощностьЛС,
	|	ВТ_ДанныеMarine_auxiliary.МощностьОбороты,
	|	ВТ_ДанныеMarine_auxiliary.МощностьКВТ1500,
	|	ВТ_ДанныеMarine_auxiliary.МощностьКВТ1800,
	|	ВТ_ДанныеMarine_auxiliary.МощностьКВА1500,
	|	ВТ_ДанныеMarine_auxiliary.МощностьКВА1800,
	|	ВТ_ДанныеMarine_auxiliary.МощностьКВЕ1500,
	|	ВТ_ДанныеMarine_auxiliary.МощностьКВЕ1800,
	|	ВТ_ДанныеMarine_auxiliary.КоэффициентПроизводительностиКВТ1500,
	|	ВТ_ДанныеMarine_auxiliary.КоэффициентПроизводительностиКВТ1800,
	|	ВТ_ДанныеMarine_auxiliary.КоэффициентПроизводительностиКВА1500,
	|	ВТ_ДанныеMarine_auxiliary.КоэффициентПроизводительностиКВА1800,
	|	ВТ_ДанныеMarine_auxiliary.ИсточникЗагрузки
	|ИЗ
	|	ВТ_ДанныеMarine_auxiliary КАК ВТ_ДанныеMarine_auxiliary
	|ГДЕ
	|	ВТ_ДанныеMarine_auxiliary.VariantCode <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПрайсЛист.ТипПродукта КАК ТипПродукта,
	|	ВТ_ПрайсЛист.Объем КАК Объем,
	|	ВТ_ПрайсЛист.Тип КАК Тип,
	|	ВТ_ПрайсЛист.VariantCode КАК VariantCode,
	|	ВТ_ПрайсЛист.RefCode КАК RefCode,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "ВТ_ПрайсЛист.Цена ", "0 ") + " КАК Цена,
	|	" + ?(ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR, "0 ", "ВТ_ПрайсЛист.ЦенаEUR ") + " КАК ЦенаEUR,
	|	ВТ_ПрайсЛист.КлассМощности КАК КлассМощности,
	|	ВТ_ПрайсЛист.КлассЭкологический КАК КлассЭкологический,
	|	ВТ_ПрайсЛист.КлассЭкологическийСпособПовышения КАК КлассЭкологическийСпособПовышения,
	|	ВТ_ПрайсЛист.СистемаВпрыска КАК СистемаВпрыска,
	|	ВТ_ПрайсЛист.СистемаОхлаждения КАК СистемаОхлаждения,
	|	ВТ_ПрайсЛист.КрутящийМомент КАК КрутящийМомент,
	|	ВТ_ПрайсЛист.КрутящийМоментОбороты КАК КрутящийМоментОбороты,
	|	ВТ_ПрайсЛист.МощностьКВТ КАК МощностьКВТ,
	|	ВТ_ПрайсЛист.МощностьЛС КАК МощностьЛС,
	|	ВТ_ПрайсЛист.МощностьОбороты КАК МощностьОбороты,
	|	ВТ_ПрайсЛист.МощностьКВТ1500 КАК МощностьКВТ1500,
	|	ВТ_ПрайсЛист.МощностьКВТ1800 КАК МощностьКВТ1800,
	|	ВТ_ПрайсЛист.МощностьКВА1500 КАК МощностьКВА1500,
	|	ВТ_ПрайсЛист.МощностьКВА1800 КАК МощностьКВА1800,
	|	ВТ_ПрайсЛист.МощностьКВЕ1500 КАК МощностьКВЕ1500,
	|	ВТ_ПрайсЛист.МощностьКВЕ1800 КАК МощностьКВЕ1800,
	|	ВТ_ПрайсЛист.КоэффициентПроизводительностиКВТ1500 КАК КоэффициентПроизводительностиКВТ1500,
	|	ВТ_ПрайсЛист.КоэффициентПроизводительностиКВТ1800 КАК КоэффициентПроизводительностиКВТ1800,
	|	ВТ_ПрайсЛист.КоэффициентПроизводительностиКВА1500 КАК КоэффициентПроизводительностиКВА1500,
	|	ВТ_ПрайсЛист.КоэффициентПроизводительностиКВА1800 КАК КоэффициентПроизводительностиКВА1800,
	|	ВТ_ПрайсЛист.ИсточникЗагрузки КАК ИсточникЗагрузки
	|ИЗ
	|	ВТ_ПрайсЛист КАК ВТ_ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДляЗагрузки.ТипПродукта КАК ТипПродукта,
	|	ВТ_ДанныеДляЗагрузки.Объем КАК Объем,
	|	ВТ_ДанныеДляЗагрузки.Тип КАК Тип,
	|	ВТ_ДанныеДляЗагрузки.VariantCode КАК VariantCode,
	|	ВТ_ДанныеДляЗагрузки.RefCode КАК RefCode,
	|	МАКСИМУМ(ВТ_ДанныеДляЗагрузки.Цена) КАК Цена,
	|	МАКСИМУМ(ВТ_ДанныеДляЗагрузки.ЦенаEUR) КАК ЦенаEUR,
	|	ВТ_ДанныеДляЗагрузки.КлассМощности КАК КлассМощности,
	|	ВТ_ДанныеДляЗагрузки.КлассЭкологический КАК КлассЭкологический,
	|	ВТ_ДанныеДляЗагрузки.КлассЭкологическийСпособПовышения КАК КлассЭкологическийСпособПовышения,
	|	ВТ_ДанныеДляЗагрузки.СистемаВпрыска КАК СистемаВпрыска,
	|	ВТ_ДанныеДляЗагрузки.СистемаОхлаждения КАК СистемаОхлаждения,
	|	ВТ_ДанныеДляЗагрузки.КрутящийМомент КАК КрутящийМомент,
	|	ВТ_ДанныеДляЗагрузки.КрутящийМоментОбороты КАК КрутящийМоментОбороты,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВТ КАК МощностьКВТ,
	|	ВТ_ДанныеДляЗагрузки.МощностьЛС КАК МощностьЛС,
	|	ВТ_ДанныеДляЗагрузки.МощностьОбороты КАК МощностьОбороты,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВТ1500 КАК МощностьКВТ1500,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВТ1800 КАК МощностьКВТ1800,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВА1500 КАК МощностьКВА1500,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВА1800 КАК МощностьКВА1800,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВЕ1500 КАК МощностьКВЕ1500,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВЕ1800 КАК МощностьКВЕ1800,
	|	ВТ_ДанныеДляЗагрузки.КоэффициентПроизводительностиКВТ1500 КАК КоэффициентПроизводительностиКВТ1500,
	|	ВТ_ДанныеДляЗагрузки.КоэффициентПроизводительностиКВТ1800 КАК КоэффициентПроизводительностиКВТ1800,
	|	ВТ_ДанныеДляЗагрузки.КоэффициентПроизводительностиКВА1500 КАК КоэффициентПроизводительностиКВА1500,
	|	ВТ_ДанныеДляЗагрузки.КоэффициентПроизводительностиКВА1800 КАК КоэффициентПроизводительностиКВА1800,
	|	МАКСИМУМ(ВТ_ДанныеДляЗагрузки.ИсточникЗагрузки) КАК ИсточникЗагрузки
	|ИЗ
	|	ВТ_ДанныеДляЗагрузки КАК ВТ_ДанныеДляЗагрузки
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеДляЗагрузки.ТипПродукта,
	|	ВТ_ДанныеДляЗагрузки.Объем,
	|	ВТ_ДанныеДляЗагрузки.Тип,
	|	ВТ_ДанныеДляЗагрузки.VariantCode,
	|	ВТ_ДанныеДляЗагрузки.RefCode,
	|	ВТ_ДанныеДляЗагрузки.КлассМощности,
	|	ВТ_ДанныеДляЗагрузки.КлассЭкологический,
	|	ВТ_ДанныеДляЗагрузки.КлассЭкологическийСпособПовышения,
	|	ВТ_ДанныеДляЗагрузки.СистемаВпрыска,
	|	ВТ_ДанныеДляЗагрузки.СистемаОхлаждения,
	|	ВТ_ДанныеДляЗагрузки.КрутящийМомент,
	|	ВТ_ДанныеДляЗагрузки.КрутящийМоментОбороты,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВТ,
	|	ВТ_ДанныеДляЗагрузки.МощностьЛС,
	|	ВТ_ДанныеДляЗагрузки.МощностьОбороты,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВТ1500,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВТ1800,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВА1500,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВА1800,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВЕ1500,
	|	ВТ_ДанныеДляЗагрузки.МощностьКВЕ1800,
	|	ВТ_ДанныеДляЗагрузки.КоэффициентПроизводительностиКВТ1500,
	|	ВТ_ДанныеДляЗагрузки.КоэффициентПроизводительностиКВТ1800,
	|	ВТ_ДанныеДляЗагрузки.КоэффициентПроизводительностиКВА1500,
	|	ВТ_ДанныеДляЗагрузки.КоэффициентПроизводительностиКВА1800
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДанныеДляЗагрузки.VariantCode
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеEquipment.RefCode КАК RefCode,
	|	ПОДСТРОКА(ВТ_ДанныеEquipment.VariantCode, 1, 7) КАК VariantCode,
	|	ВТ_ДанныеEquipment.VariantDescription КАК ОписаниеОпции,
	|	ВТ_ДанныеEquipment._9Ind КАК _9Ind,
	|	ВТ_ДанныеEquipment._9Pg КАК _9Pg,
	|	ВТ_ДанныеEquipment._9MProp КАК _9MProp,
	|	ВТ_ДанныеEquipment._9MAux КАК _9MAux,
	|	ВТ_ДанныеEquipment._13Ind КАК _13Ind,
	|	ВТ_ДанныеEquipment._13Pg КАК _13Pg,
	|	ВТ_ДанныеEquipment._13MProp КАК _13MProp,
	|	ВТ_ДанныеEquipment._13MAux КАК _13MAux,
	|	ВТ_ДанныеEquipment._16Ind КАК _16Ind,
	|	ВТ_ДанныеEquipment._16Pg КАК _16Pg,
	|	ВТ_ДанныеEquipment._16MProp КАК _16MProp,
	|	ВТ_ДанныеEquipment._16MAux КАК _16MAux,
	|	ВТ_ДанныеEquipment.Цена КАК Цена,
	|	ВТ_ДанныеEquipment.ЦенаEUR КАК ЦенаEUR
	|ИЗ
	|	ВТ_ДанныеEquipment КАК ВТ_ДанныеEquipment
	|ГДЕ
	|	ВТ_ДанныеEquipment.RefCode <> """"
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДанныеEquipment.VariantCode";
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаПрайсЛиста = МассивРезультатовЗапроса[7].Выгрузить();
	Объект.ПрайсЛист.Загрузить(ТаблицаПрайсЛиста);
	
	ЗаполнитьТаблицыПрайсЛиста();
	
	ТаблицаПрайсЛиста.Свернуть("RefCode,VariantCode,ИсточникЗагрузки");
	ТаблицаПрайсЛиста.Сортировать("VariantCode");
	Объект.ТаблицаСоответствия.Загрузить(ТаблицаПрайсЛиста);
	
	//ТаблицаОпцийОборудования = МассивРезультатовЗапроса[8].Выгрузить();
	//Объект.ОпцииОборудования.Загрузить(ТаблицаОпцийОборудования);
	
	ВыборкаОпцииОборудования = МассивРезультатовЗапроса[8].Выбрать();
	Пока ВыборкаОпцииОборудования.Следующий() Цикл
		// 9
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._9Ind) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаIndustrial);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "09");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаIndustrial;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "09";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._9Pg) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаPower_generation);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "09");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаPower_generation;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "09";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._9MProp) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаMarine_propulsion);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "09");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаMarine_propulsion;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "09";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._9MAux) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаMarine_auxiliary);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "09");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаMarine_auxiliary;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "09";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// 13
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._13Ind) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаIndustrial);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "13");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаIndustrial;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "13";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._13Pg) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаPower_generation);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "13");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаPower_generation;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "13";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._13MProp) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаMarine_propulsion);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "13");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаMarine_propulsion;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "13";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._13MAux) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаMarine_auxiliary);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "13");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаMarine_auxiliary;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "13";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// 16
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._16Ind) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаIndustrial);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "16");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаIndustrial;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "16";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._16Pg) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаPower_generation);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "16");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаPower_generation;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "16";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._16MProp) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаMarine_propulsion);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "16");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаMarine_propulsion;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "16";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОпцииОборудования._16MAux) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаMarine_auxiliary);
			ПараметрыОтбора.Вставить("VariantCode", ВыборкаОпцииОборудования.VariantCode);
			ПараметрыОтбора.Вставить("Объем",       "16");
			
			НайденныеСтроки = Объект.ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ОпцииОборудования.Добавить();
				НоваяСтрока.ТипПродукта = ТипПродуктаMarine_auxiliary;
				НоваяСтрока.RefCode = ВыборкаОпцииОборудования.RefCode;
				НоваяСтрока.VariantCode = ВыборкаОпцииОборудования.VariantCode;
				НоваяСтрока.ОписаниеОпции = ВыборкаОпцииОборудования.ОписаниеОпции;
				НоваяСтрока.Объем = "16";
				НоваяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НоваяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НоваяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.Применимость = Истина;
				Если ЗначенияВыбранныхПараметров.ДвигателиВалюта = ВалютаEUR Тогда
					НайденнаяСтрока.ЦенаEUR = ВыборкаОпцииОборудования.Цена;
				Иначе
					НайденнаяСтрока.Цена = ВыборкаОпцииОборудования.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПрикреплениеФайлаКДокументу
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФорматФайла",    ЗначенияВыбранныхПараметров.ФорматФайла);
	СтруктураПараметров.Вставить("АдресХранилища", ЗначенияВыбранныхПараметров.АдресВХранилище);
	СтруктураПараметров.Вставить("ПутьКФайлу",     ЗначенияВыбранныхПараметров.ПутьКФайлу);
	
	Scan_ВспомогательныеФункцииСервер.ОбновитьПрисоединенныйФайлНаСервере(СтруктураПараметров, Объект.Ссылка);
	
	// Файл уже не нужен - удаляем
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение 
		Сообщить(НСтр("ru = 'Ошибка при удалении файла'; en = 'Error'")); // Rarus tenkam 29.06.2022 mantis 18726 АПК +
	КонецПопытки;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ОпцииОборудования

&НаСервере
Процедура ДобавитьЭлементыОпцииОборудования()
	
	МассивРеквизитов = Новый Массив;
	
	// Массивы типов для реквизитов таблицы
	МассивТиповСтрока = Новый Массив;
	МассивТиповСтрока.Добавить(Тип("Строка"));
	
	МассивТиповБулево = Новый Массив;
	МассивТиповБулево.Добавить(Тип("Булево"));
	
	МассивТиповЧисло = Новый Массив;
	МассивТиповЧисло.Добавить(Тип("Число"));
	
	КЧ = Новый КвалификаторыЧисла(15, 2);
	
	// НомерСтроки
	НоваяКолонка = Новый РеквизитФормы("НомерСтроки", Новый ОписаниеТипов(МассивТиповЧисло), "ОпцииОборудования", "N");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	// VariantCode
	НоваяКолонка = Новый РеквизитФормы("VariantCode", Новый ОписаниеТипов(МассивТиповСтрока), "ОпцииОборудования", "Variant code");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	// RefCode
	НоваяКолонка = Новый РеквизитФормы("RefCode", Новый ОписаниеТипов(МассивТиповСтрока), "ОпцииОборудования", "Ref. code");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	// ОписаниеОпции
	НоваяКолонка = Новый РеквизитФормы("ОписаниеОпции", Новый ОписаниеТипов(МассивТиповСтрока), "ОпцииОборудования", "Описание опции");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	// 9
	НоваяКолонка = Новый РеквизитФормы("_9Ind", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "IND1");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_9Pg", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "PG1");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_9MProp", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "M_PROP1");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_9MAux", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "M_AUX1");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	// 13
	НоваяКолонка = Новый РеквизитФормы("_13Ind", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "IND2");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_13Pg", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "PG2");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_13MProp", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "M_PROP2");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_13MAux", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "M_AUX2");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	// 16
	НоваяКолонка = Новый РеквизитФормы("_16Ind", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "IND3");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_16Pg", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "PG3");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_16MProp", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "M_PROP3");
	МассивРеквизитов.Добавить(НоваяКолонка);
	НоваяКолонка = Новый РеквизитФормы("_16MAux", Новый ОписаниеТипов(МассивТиповБулево), "ОпцииОборудования", "M_AUX3");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	// Цены
	НоваяКолонка = Новый РеквизитФормы("Цена", Новый ОписаниеТипов(МассивТиповЧисло,,, КЧ), "ОпцииОборудования", "RUB");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	НоваяКолонка = Новый РеквизитФормы("ЦенаEUR", Новый ОписаниеТипов(МассивТиповЧисло,,, КЧ), "ОпцииОборудования", "EUR");
	МассивРеквизитов.Добавить(НоваяКолонка);
	
	// Добавление реквизитов
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Элемент формы для НомерСтроки
	//НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудованияНомерСтроки", Тип("ПолеФормы"), Элементы.ОпцииОборудования);
	//НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	//НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования.НомерСтроки";
	//НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	// Элемент формы для VariantCode
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудованияVariantCode", Тип("ПолеФормы"), Элементы.ОпцииОборудования);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования.VariantCode";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	// Элемент формы для RefCode
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудованияRefCode", Тип("ПолеФормы"), Элементы.ОпцииОборудования);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования.RefCode";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	// Элемент формы для ОписаниеОпции
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудованияОписаниеОпции", Тип("ПолеФормы"), Элементы.ОпцииОборудования);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования.ОписаниеОпции";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	// 9
	НоваяГруппаФормы = Элементы.Добавить("ОпцииОборудования_9", Тип("ГруппаФормы"), Элементы.ОпцииОборудования);
	НоваяГруппаФормы.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаФормы.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяГруппаФормы.ОтображатьВШапке = Истина;
	НоваяГруппаФормы.ОтображатьЗаголовок = Истина;
	НоваяГруппаФормы.Заголовок = "9-litre engines";
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_9Ind", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._9Ind";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_9Pg", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._9Pg";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_9MProp", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._9MProp";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_9MAux", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._9MAux";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	// 13
	НоваяГруппаФормы = Элементы.Добавить("ОпцииОборудования_13", Тип("ГруппаФормы"), Элементы.ОпцииОборудования);
	НоваяГруппаФормы.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаФормы.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяГруппаФормы.ОтображатьВШапке = Истина;
	НоваяГруппаФормы.ОтображатьЗаголовок = Истина;
	НоваяГруппаФормы.Заголовок = "13-litre engines";
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_13Ind", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._13Ind";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_13Pg", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._13Pg";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_13MProp", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._13MProp";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_13MAux", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._13MAux";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	// 16
	НоваяГруппаФормы = Элементы.Добавить("ОпцииОборудования_16", Тип("ГруппаФормы"), Элементы.ОпцииОборудования);
	НоваяГруппаФормы.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаФормы.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяГруппаФормы.ОтображатьВШапке = Истина;
	НоваяГруппаФормы.ОтображатьЗаголовок = Истина;
	НоваяГруппаФормы.Заголовок = "16-litre engines";
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_16Ind", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._16Ind";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_16Pg", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._16Pg";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_16MProp", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._16MProp";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудования_16MAux", Тип("ПолеФормы"), НоваяГруппаФормы);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования._16MAux";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	// Элементы формы для цен
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудованияЦена", Тип("ПолеФормы"), Элементы.ОпцииОборудования);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования.Цена";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	НовыйЭлементФормы = Элементы.Добавить("ОпцииОборудованияЦенаEUR", Тип("ПолеФормы"), Элементы.ОпцииОборудования);
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементФормы.ПутьКДанным = "ОпцииОборудования.ЦенаEUR";
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОпцииОборудования()
	
	ОпцииОборудования.Очистить();
	
	Счетчик = 1;
	
	Для Каждого СтрокаОпцииОборудования Из Объект.ОпцииОборудования Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("VariantCode", СтрокаОпцииОборудования.VariantCode);
		
		СтрокиОпцииОборудования = ОпцииОборудования.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиОпцииОборудования.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиОпцииОборудования[0];
		Иначе
			СтрокаТаблицы = ОпцииОборудования.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаОпцииОборудования);
			СтрокаТаблицы.НомерСтроки = Счетчик;
			
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если СтрокаОпцииОборудования.ТипПродукта = ТипПродуктаIndustrial Тогда
			Если СтрокаОпцииОборудования.Объем = "09" Тогда
				СтрокаТаблицы._9Ind = СтрокаОпцииОборудования.Применимость;
			ИначеЕсли СтрокаОпцииОборудования.Объем = "13" Тогда
				СтрокаТаблицы._13Ind = СтрокаОпцииОборудования.Применимость;
			ИначеЕсли СтрокаОпцииОборудования.Объем = "16" Тогда
				СтрокаТаблицы._16Ind = СтрокаОпцииОборудования.Применимость;
			КонецЕсли;
		ИначеЕсли СтрокаОпцииОборудования.ТипПродукта = ТипПродуктаPower_generation Тогда
			Если СтрокаОпцииОборудования.Объем = "09" Тогда
				СтрокаТаблицы._9Pg = СтрокаОпцииОборудования.Применимость;
			ИначеЕсли СтрокаОпцииОборудования.Объем = "13" Тогда
				СтрокаТаблицы._13Pg = СтрокаОпцииОборудования.Применимость;
			ИначеЕсли СтрокаОпцииОборудования.Объем = "16" Тогда
				СтрокаТаблицы._16Pg = СтрокаОпцииОборудования.Применимость;
			КонецЕсли;
		ИначеЕсли СтрокаОпцииОборудования.ТипПродукта = ТипПродуктаMarine_propulsion Тогда
			Если СтрокаОпцииОборудования.Объем = "09" Тогда
				СтрокаТаблицы._9MProp = СтрокаОпцииОборудования.Применимость;
			ИначеЕсли СтрокаОпцииОборудования.Объем = "13" Тогда
				СтрокаТаблицы._13MProp = СтрокаОпцииОборудования.Применимость;
			ИначеЕсли СтрокаОпцииОборудования.Объем = "16" Тогда
				СтрокаТаблицы._16MProp = СтрокаОпцииОборудования.Применимость;
			КонецЕсли;
		ИначеЕсли СтрокаОпцииОборудования.ТипПродукта = ТипПродуктаMarine_auxiliary Тогда
			Если СтрокаОпцииОборудования.Объем = "09" Тогда
				СтрокаТаблицы._9MAux = СтрокаОпцииОборудования.Применимость;
			ИначеЕсли СтрокаОпцииОборудования.Объем = "13" Тогда
				СтрокаТаблицы._13MAux = СтрокаОпцииОборудования.Применимость;
			ИначеЕсли СтрокаОпцииОборудования.Объем = "16" Тогда
				СтрокаТаблицы._16MAux = СтрокаОпцииОборудования.Применимость;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьТаблицыПрайсЛиста()
	
	// Заполним таблицу формы Industrial
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаIndustrial);
	
	СтрокиIndustrial = Объект.ПрайсЛист.НайтиСтроки(ПараметрыОтбора);
	ТаблицаIndustrial.Загрузить(Объект.ПрайсЛист.Выгрузить(СтрокиIndustrial));
	
	// Заполним таблицу формы Power_generation
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаPower_generation);
	
	СтрокиPower_generation = Объект.ПрайсЛист.НайтиСтроки(ПараметрыОтбора);
	ТаблицаPowerGeneration.Загрузить(Объект.ПрайсЛист.Выгрузить(СтрокиPower_generation));
	
	// Заполним таблицу формы Marine_propulsion
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаMarine_propulsion);
	
	СтрокиMarine_propulsion = Объект.ПрайсЛист.НайтиСтроки(ПараметрыОтбора);
	ТаблицаMarinePropulsion.Загрузить(Объект.ПрайсЛист.Выгрузить(СтрокиMarine_propulsion));
	
	// Заполним таблицу формы Marine_auxiliary
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипПродукта", ТипПродуктаMarine_auxiliary);
	
	СтрокиMarine_auxiliary = Объект.ПрайсЛист.НайтиСтроки(ПараметрыОтбора);
	ТаблицаMarineAuxiliary.Загрузить(Объект.ПрайсЛист.Выгрузить(СтрокиMarine_auxiliary));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСоответствияНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", Объект.ТаблицаСоответствия.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаСоответствия.RefCode КАК RefCode,
	|	ТаблицаСоответствия.VariantCode КАК VariantCode,
	|	ТаблицаСоответствия.ИсточникЗагрузки КАК ИсточникЗагрузки
	|ПОМЕСТИТЬ ВТ_ТаблицаСоответствия
	|ИЗ
	|	&П1 КАК ТаблицаСоответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоответствия.RefCode КАК RefCode,
	|	ВТ_ТаблицаСоответствия.VariantCode КАК VariantCode,
	|	ВТ_ТаблицаСоответствия.ИсточникЗагрузки КАК ИсточникЗагрузки,
	|	Scan_ОпцииПродуктов.Ссылка КАК Опция
	|ИЗ
	|	ВТ_ТаблицаСоответствия КАК ВТ_ТаблицаСоответствия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
	|		ПО ВТ_ТаблицаСоответствия.VariantCode = Scan_ОпцииПродуктов.Код";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыгрузкаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаВыгрузки Из ВыгрузкаРезультатаЗапроса Цикл
		Если ЗначениеЗаполнено(СтрокаВыгрузки.Опция) Тогда
			ОпцияОбъект = СтрокаВыгрузки.Опция.ПолучитьОбъект();
			ОпцияОбъект.RefCode         = СтрокаВыгрузки.RefCode;
			ОпцияОбъект.ИсточникRefCode = СтрокаВыгрузки.ИсточникЗагрузки;
			Попытка
				ОпцияОбъект.Записать();
			Исключение 
				Сообщить(НСтр("ru = 'Ошибка при записи опции'; en = 'Error'")); // Rarus tenkam 29.06.2022 mantis 18726 АПК +
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ТаблицаСоответствия.Загрузить(ВыгрузкаРезультатаЗапроса);
	
	Сообщить(НСтр("ru = 'Установка соответствий завершена'; en = 'Completed'") + " " + ТекущаяДатаСеанса());
	
КонецПроцедуры

#КонецОбласти