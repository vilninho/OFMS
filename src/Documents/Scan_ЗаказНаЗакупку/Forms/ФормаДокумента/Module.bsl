
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ХозОперации ++
	Scan_ВспомогательныеФункцииСервер.ИнициализироватьМенюВыбораХозОперации(ЭтаФорма);
	
	// Вызываем общий обработчик события
	Если Не Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	// ХозОперации --
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПараметрыДокумента();
	КонецЕсли;
	
	ВидимостьПродуктовЗапросаНаНадстройку = ХранилищеНастроекДанныхФорм.Загрузить("ЗаказНаЗакупку", "ВидимостьПродуктовЗапросаНаНадстройку");
	
	Если ПустаяСтрока(Объект.ТипЗаказа) Тогда
		Объект.ТипЗаказа = "PurchaseOrder";
	КонецЕсли;
	
	НестандартныйЗаказ = Объект.НестандартныйЗаказ;
	
	УправлениеДиалогомНаСервере();
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройкиМонитораНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьЗаказаНаЗакупку");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.НестандартныйЗаказ = НестандартныйЗаказ;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СуммаДокумента = ТекущийОбъект.ПродуктыКЗаказу.Итог("Сумма");
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 ---   

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если  ПустаяСтрока(Объект.IDSystem) 
		И Не Объект.Ссылка.Пустая()
		Тогда
		ТекущийОбъект.IDSystem = Строка(Объект.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

//rarus agar 20.02.2021 17230 ++
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Scan_Изделия.Форма.ФормаНадстройкиУслуги"
		И ЗначениеЗаполнено(ВыбранноеЗначение) 
		И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Scan_Изделия")
		И ВыбранноеЗначение <> Элементы.ПродуктыКЗаказу.ТекущиеДанные.Продукт
		Тогда
		Элементы.ПродуктыКЗаказу.ТекущиеДанные.Продукт = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 20.02.2021 17230 --

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

#КонецОбласти

#Область ОбработчикиКомандФормы

//rarus agar 20.02.2021 17230 ++
&НаКлиенте
Процедура СоздатьНадстройку(Команда)
	
	Если Элементы.ПродуктыКЗаказу.ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные = Элементы.ПродуктыКЗаказу.ТекущиеДанные;
		
		Если ТекущиеДанные.Продукт.Пустая() Тогда
			
			ПараметрыНадстройки = Новый Структура;
			ПараметрыНадстройки.Вставить("Надстр_Поставщик",   Объект.Поставщик);
			ПараметрыНадстройки.Вставить("Наименование",       ТекущиеДанные.ПродуктЗапросаНаНадстройку);
			ПараметрыНадстройки.Вставить("МаркаПродукта",      ТекущиеДанные.МаркаПродуктаЗапросаНаНадстройки);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыНадстройки);
			
			ОткрытьФорму("Справочник.Scan_Изделия.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Продукт);
			
			ОткрытьФорму("Справочник.Scan_Изделия.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 20.02.2021 17230 --

&НаКлиенте
Процедура СоздатьПрицеп(Команда) // Rarus tenkam 18.10.2021 mantis 17822 +++
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьПрицепЗавершение", ЭтотОбъект),
		Нстр("ru = 'Перед созданием прицепов необходимо записать документ. Продолжить?'; en = 'The document must be saved before editing VIN. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		СоздатьПрицепОткрыть();	
	КонецЕсли;
КонецПроцедуры // Rarus tenkam 18.10.2021 mantis 17822 ---

&НаКлиенте
Процедура СоздатьПрицепЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт // Rarus tenkam 21.10.2021 mantis 17822 +++ 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да 
		И Записать()
		Тогда
		СоздатьПрицепОткрыть();
	КонецЕсли;
	
КонецПроцедуры // Rarus tenkam 10.11.2021 mantis 17822 ---

&НаКлиенте
Процедура СоздатьПрицепОткрыть() // Rarus tenkam 10.11.2021 mantis 17822 +++  	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаказНаЗакупку", Объект.Ссылка);
	ПараметрыФормы.Вставить("Поставщик", Объект.Поставщик);
	ПараметрыФормы.Вставить("МассивПрицепов", ПолучитьПрицепыЗаказа());
		
	Если Элементы.ПродуктыКЗаказу.ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные = Элементы.ПродуктыКЗаказу.ТекущиеДанные;
		
		Если ТекущиеДанные.Продукт.Пустая() Тогда
			
			ПараметрыФормы.Вставить("Наименование", ТекущиеДанные.ПродуктЗапросаНаНадстройку);
			ПараметрыФормы.Вставить("МаркаПродукта", ТекущиеДанные.МаркаПродуктаЗапросаНаНадстройки);
			
			ОткрытьФорму("Документ.Scan_ЗаказНаЗакупку.Форма.ФормаСозданияПрицепов", ПараметрыФормы, ЭтотОбъект,,,,Новый ОписаниеОповещения("ДобавитьПрицепыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			//Если ЭтоНадстройка(ТекущиеДанные.Продукт) Тогда
			//	Сообщить(НСтр("ru = 'В строке уже указан продукт-надстройка!'; en = 'Product already exists!'"));	
			//Иначе
				ОткрытьФорму("Документ.Scan_ЗаказНаЗакупку.Форма.ФормаСозданияПрицепов", ПараметрыФормы, ЭтотОбъект,,,,Новый ОписаниеОповещения("ДобавитьПрицепыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			//КонецЕсли;
		КонецЕсли;
	Иначе   		
		ОткрытьФорму("Документ.Scan_ЗаказНаЗакупку.Форма.ФормаСозданияПрицепов", ПараметрыФормы, ЭтотОбъект,,,,Новый ОписаниеОповещения("ДобавитьПрицепыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;	
КонецПроцедуры // Rarus tenkam 10.11.2021 mantis 17822 ---

&НаКлиенте
Процедура УказатьVINПродуктов(Команда) // Rarus tenkam 21.10.2021 mantis 17822 +++
	
	Если Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УказатьVINПродуктовЗавершение", ЭтотОбъект),
		Нстр("ru = 'Перед распределением VIN-номеров необходимо записать документ. Продолжить?'; en = 'The document must be saved before editing VIN. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		УказатьVINПродуктовОткрыть();	
	КонецЕсли;
	
КонецПроцедуры // Rarus tenkam 21.10.2021 mantis 17822 ---

&НаКлиенте
Процедура УказатьVINПродуктовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт // Rarus tenkam 21.10.2021 mantis 17822 +++ 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да 
		И Записать()
		Тогда
		УказатьVINПродуктовОткрыть();
	КонецЕсли;
	
КонецПроцедуры // Rarus tenkam 21.10.2021 mantis 17822 ---

&НаКлиенте
Процедура УказатьVINПродуктовОткрыть() // Rarus tenkam 21.10.2021 mantis 17822 +++ 
	МассивПрицепов = ПолучитьПрицепыЗаказа();	
	Если МассивПрицепов.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'В таблице нет ни одного прицепа!'; en = 'Products not found!'"));			
		Возврат
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивПрицепов", МассивПрицепов);
	ПараметрыФормы.Вставить("ЗаказНаЗакупку", Объект.Ссылка);
	ОткрытьФорму("Документ.Scan_ЗаказНаЗакупку.Форма.ФормаВводVINПродуктов", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
КонецПроцедуры // Rarus tenkam 21.10.2021 mantis 17822 ---

// Rarus tenkam 14.01.2021 АПК +++
//&НаСервереБезКонтекста
//Функция ЭтоНадстройка(ПродуктСсылка) 
//	ГруппаИзделийOFMS = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПродуктСсылка, "ГруппаИзделийOFMS");
//	Если ГруппаИзделийOFMS = ПредопределенноеЗначение("Перечисление.Scan_ГруппыИзделийOFMS.Надстройка")	Тогда
//		Возврат Истина;
//	КонецЕсли;
//	Возврат Ложь;
//КонецФункции
// Rarus tenkam 14.01.2021 АПК ---

&НаКлиенте
Процедура УстановитьВидимостьПродуктовЗапросаНаНадстройку(Команда)
	
	ВидимостьПродуктовЗапросаНаНадстройку = Не ВидимостьПродуктовЗапросаНаНадстройку;
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВДО(Команда)
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	Если Объект.ЦентрЗатрат.Пустая() Тогда
		Сообщить(НСтр("ru = 'Не заполнен кост-центр!'; en = 'Cost center not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Договор) Тогда
		Сообщить(НСтр("ru = 'Не заполнен договор!'; en = 'Contract not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.АдресПоставки) Тогда
		Сообщить(НСтр("ru = 'Не заполнен адрес поставки!'; en = 'Delivery address not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.УсловияПоставки) Тогда
		Сообщить(НСтр("ru = 'Не заполнены условия поставки!'; en = 'Delivery conditions not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.УсловияОплаты) Тогда
		Сообщить(НСтр("ru = 'Не заполнены условия оплаты!'; en = 'Terms of payment not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если  ПустаяСтрока(Объект.ДополнительнаяИнформация) 
		И Объект.НестандартныйЗаказ
		Тогда
		Сообщить(НСтр("ru = 'Не заполнена дополнительная информация!'; en = 'Additional information not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если    ПустаяСтрока(Объект.IDSystem)
		Или Объект.IDSystem = "00000000-0000-0000-0000-000000000000"
		Тогда
		Сообщить(НСтр("ru = 'Не заполнен идентификатор заказа на закупку - поле ""ID System""!'; en = 'Purchase order ID System not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Объект.ПродуктыКЗаказу.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Необходимо указать продукты к заказу!'; en = 'Products to order have to be specified!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьВДОЗавершение", ЭтотОбъект),
		Нстр("ru = 'Перед отправкой необходимо записать документ. Продолжить?'; en = 'The document must be saved before sending. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОтправитьВДОНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВДОЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если  РезультатВопроса = КодВозвратаДиалога.Да 
		И Записать()
		Тогда
		ОтправитьВДОНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьВДО(Команда)
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	Если Объект.ЦентрЗатрат.Пустая() Тогда
		Сообщить(НСтр("ru = 'Не заполнен кост-центр!'; en = 'Cost center not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Договор) Тогда
		Сообщить(НСтр("ru = 'Не заполнен договор!'; en = 'Contract not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.АдресПоставки) Тогда
		Сообщить(НСтр("ru = 'Не заполнен адрес поставки!'; en = 'Delivery address not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.УсловияПоставки) Тогда
		Сообщить(НСтр("ru = 'Не заполнены условия поставки!'; en = 'Delivery conditions not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.УсловияОплаты) Тогда
		Сообщить(НСтр("ru = 'Не заполнены условия оплаты!'; en = 'Terms of payment not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если  ПустаяСтрока(Объект.ДополнительнаяИнформация) 
		И Объект.НестандартныйЗаказ
		Тогда
		Сообщить(НСтр("ru = 'Не заполнена дополнительная информация!'; en = 'Additional information not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если    ПустаяСтрока(Объект.IDSystem)
		Или Объект.IDSystem = "00000000-0000-0000-0000-000000000000"
		Тогда
		Сообщить(НСтр("ru = 'Не заполнен идентификатор заказа на закупку ID System!'; en = 'Purchase order ID System not filled!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Объект.ПродуктыКЗаказу.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Необходимо указать продукты к заказу!'; en = 'Products to order have to be specified!'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьВДОЗавершение", ЭтотОбъект),
		Нстр("ru = 'Перед отправкой необходимо записать документ. Продолжить?'; en = 'The document must be saved before sending. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		СогласоватьВДОНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьВДОЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если  РезультатВопроса = КодВозвратаДиалога.Да 
		И Записать()
		Тогда
		СогласоватьВДОНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзДО(Команда)
	
	ОчиститьСообщения();
	
	Если    ПустаяСтрока(Объект.IDSystem)
		Или Объект.IDSystem = "00000000-0000-0000-0000-000000000000"
		Тогда
		Сообщить(НСтр("ru = 'Не заполнен идентификатор заказа на закупку ID System!'; en = 'Purchase order ID System not filled!'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьИзДОНаСервере();
	
КонецПроцедуры

//rarus agar 01.04.2021 17545 ++
&НаКлиенте
Процедура ОбновитьПоЗапросу(Команда)
	
	ОбновитьПоЗапросуНаСервере();
	
КонецПроцедуры
//rarus agar 01.04.2021 17545 --


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НестандартныйЗаказПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикКомпанияПриИзменении(Элемент)
	
	ПоставщикКомпанияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикКомпанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Поставщик.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	МассивКомпаний = ПолучитьКомпанииПоставщикиКонтрагента(Объект.Поставщик);
	
	СписокКомпаний = Новый СписокЗначений;
	СписокКомпаний.ЗагрузитьЗначения(МассивКомпаний);
	
	Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	Отбор.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение   = СписокКомпаний;
	Отбор.Использование    = Истина;
	Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОткрытьФорму("Справочник.Scan_Компании.ФормаВыбора", ПараметрыФормы, Элементы.ПоставщикКомпания);
	
КонецПроцедуры

//rarus vikhle 06.04.2021 mt 17484 +++
&НаКлиенте
Процедура ПоставщикКомпанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоставщикКомпанияОбработкаВыбораПродолжение",ЭтотОбъект,ВыбранноеЗначение); //rarus vikhle 15.04.2021 mt 17484
	Scan_ВспомогательныеФункцииКлиент.ПроверитьАктивностьВыбраннойКомпании(ВыбранноеЗначение,ОписаниеОповещения,СтандартнаяОбработка);
	
КонецПроцедуры
//rarus vikhle 06.04.2021 mt 17484 ---

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ПоставщикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ПоставщикКомпания.Пустая() Тогда
		ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
		
		Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный") Тогда
			ОтборРезидент = Истина;
		Иначе
			ОтборРезидент = Ложь;
		КонецЕсли;
		
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Резидент");
		Отбор.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение   = ОтборРезидент;
		Отбор.Использование    = Истина;
		Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
		
		ОткрытьФорму("Справочник.Scan_Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.Поставщик);
	Иначе
		ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
		
		Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный") Тогда
			ОтборРезидент = Истина;
		Иначе
			ОтборРезидент = Ложь;
		КонецЕсли;
		
		МассивКонтрагентов = ПолучитьКонтрагентовКомпанииПоставщика(Объект.ПоставщикКомпания, ОтборРезидент);
		
		СписокКонтрагентов = Новый СписокЗначений;
		СписокКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
		
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		Отбор.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.ПравоеЗначение   = СписокКонтрагентов;
		Отбор.Использование    = Истина;
		Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
		
		ОткрытьФорму("Справочник.Scan_Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.Поставщик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если  Объект.Поставщик.Пустая()
		И Объект.ПоставщикКомпания.Пустая()
		Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить(НСтр("ru = 'Для выбора договора укажите поставщика!'; en = 'To select a contract, specify a supplier!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Ответственный", ПолучитьПользователяОСНаСервере(Объект.Автор));
	ПараметрыПолучения.Вставить("СписокАдресов", СписокАдресов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияАдресовПоставкиИзДО",ЭтотОбъект);
	ОткрытьФорму("Документ.Scan_ЗаказНаЗакупку.Форма.ФормаПолученияАдресовПоставки",ПараметрыПолучения,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Подсказка = НСтр("ru = 'Условия поставки'; en = 'Delivery conditions'");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВвводаУсловийПоставки", ЭтотОбъект);
	// rarus agar 17.08.2021 18161 ++
	//ПоказатьВводСтроки(Оповещение, Объект.УсловияПоставки , Подсказка, 0, Истина);
	ПоказатьВводСтроки(Оповещение, Объект.УсловияПоставки , Подсказка, 500, Истина);
	// rarus agar 17.08.2021 18161 --
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВвводаУсловийПоставки(УсловияПоставки, ДополнительныеПараметры) Экспорт
	
	// rarus agar 17.08.2021 18161 ++
	//Если ЗначениеЗаполнено(УсловияПоставки) Тогда
	// rarus agar 17.08.2021 18161 --
	Если  УсловияПоставки <> Неопределено
		И Объект.УсловияПоставки <> УсловияПоставки 
		Тогда
		Объект.УсловияПоставки = УсловияПоставки;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияОплатыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Подсказка = НСтр("ru = 'Условия оплаты'; en = 'Terms of payment'");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВвводаУсловийОплаты", ЭтотОбъект);
	// rarus agar 17.08.2021 18161 ++
	//ПоказатьВводСтроки(Оповещение, Объект.УсловияОплаты , Подсказка, 0, Истина);
	ПоказатьВводСтроки(Оповещение, Объект.УсловияОплаты , Подсказка, 500, Истина);
	// rarus agar 17.08.2021 18161 --
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВвводаУсловийОплаты(УсловияОплаты, ДополнительныеПараметры) Экспорт
	
	// rarus agar 17.08.2021 18161 ++
	//Если ЗначениеЗаполнено(УсловияОплаты) Тогда
	Если  УсловияОплаты <> Неопределено 
		И Объект.УсловияОплаты <> УсловияОплаты 
		Тогда
	// rarus agar 17.08.2021 18161 --
		Объект.УсловияОплаты = УсловияОплаты;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Подсказка = НСтр("ru = 'Дополнительная информация'; en = 'Additional information'");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВвводаДополнительнойИнформации", ЭтотОбъект);
	ПоказатьВводСтроки(Оповещение, Объект.ДополнительнаяИнформация , Подсказка, 0, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВвводаДополнительнойИнформации(ДополнительнаяИнформация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительнаяИнформация) Тогда
		Объект.ДополнительнаяИнформация = ДополнительнаяИнформация;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура IDSystemОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	IDSystemОткрытиеНаСервере();
КонецПроцедуры

//rarus kabany 09.04.2021 17474 +++
&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.ХозОперация =ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный") Тогда 
	ТекстВопроса = НСтр("ru = 'Данный Заказ на закупку будет привязан к другому Запросу на надстройки. Продолжить редактирование?';
		                                     |en = 'This Purchase Order will be linked to another Add-On Request. Continue editing?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФормыЗавершение", ЭтотОбъект, Элемент);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да, НСтр("ru = 'Предупреждение'"));
	
Иначе
	ТекстПредупреждения = НСтр("ru = 'Редактирование основания разрешено только для документов «Заказ на закупку» с хозяйственной операцией ""Заказ на закупку (локальный)""';
		                                     |en = 'Editing the base is allowed only for documents «Purchase order» with the business transaction ""Purchase order (local)""'");
	ПоказатьПредупреждение(,ТекстПредупреждения);	
КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ВыборФормыЗавершение(Ответ, Элемент) Экспорт 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УстановитьРежимОтображенияСписок", Истина);
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФиксированныеНастройки.Отбор, "ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно,Ложь,,Истина);
	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФиксированныеНастройки.Отбор, "Проведен", ВидСравненияКомпоновкиДанных.Равно,Истина,,Истина); //rarus kabany 12.04.2021 17474 +++
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФиксированныеНастройки.Отбор, "ПереданВОтделПланированияПродаж", ВидСравненияКомпоновкиДанных.Равно,Истина,,Истина);
	
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОткрытьФорму("Документ.Scan_ЗапросНаНадстройки.ФормаВыбора",ПараметрыФормы,Элемент); //rarus kabany 12.04.2021 17474 +++ 	
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДокОснование =Объект.ДокументОснование; 
		
		Объект.ПоставщикКомпания = ДокОснование.Поставщик;
		//rarus kabany 09.04.2021 17474 +++
		Если НЕ ЗначениеЗаполнено(ДокОснование.Контрагент) Тогда 
			ПоставщикКомпанияПриИзмененииНаСервере();
			Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
				Объект.Договор =  Scan_ВспомогательныеФункцииСервер.ПолучитьОсновнойДоговорКонграгента(Объект.Поставщик); //rarus kabany 12.04.2021 17474 +++
			КонецЕсли;
		Иначе
			Объект.Поставщик = ДокОснование.Контрагент;
			Объект.Договор =  Scan_ВспомогательныеФункцииСервер.ПолучитьОсновнойДоговорКонграгента(Объект.Поставщик); //rarus kabany 12.04.2021 17474 +++
		КонецЕсли;
		//rarus kabany 09.04.2021 17474 ---
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры
//rarus kabany 09.04.2021 17474 ---

//rarus kabany 15.04.2021 17579 +++
&НаКлиенте
Процедура ОчиститьДанныеПоставщика(Команда)
	
	ДопПарам = Новый Структура();	
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный") Тогда
		вопрос = НСтр("ru = 'Поля «Поставщик (компания)», «Поставщик (юр. лицо)» и «Договор» будут очищены. Продолжить?';
		|en = 'The «Supplier (company)», «Supplier (legal entity)» and «Contract» fields will be cleared. Proceed?'");		
		ДопПарам.Вставить("ХозОперация", 1);
		
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро") Тогда 
		вопрос = НСтр("ru = 'Поля «Поставщик (компания)» и «Поставщик (юр. лицо)» будут очищены. Продолжить?';
		|en = 'The «Supplier (company)» and «Supplier (legal entity)» fields will be cleared. Proceed?'");			
		ДопПарам.Вставить("ХозОперация", 2);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьДанныеПоставщикаПосле",
	ЭтотОбъект,
	ДопПарам);
	
	ПоказатьВопрос(Оповещение,
	вопрос,
	РежимДиалогаВопрос.ДаНет,
	0, // таймаут в секундах
	КодВозвратаДиалога.Да 
	);    	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПоставщикаПосле(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
	ОчиститьДанныеПоставщикаПослеСервер(Параметры)		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПоставщикаПослеСервер(Параметры)
	
	Если Параметры.ХозОперация = 1 Тогда
			Объект.ПоставщикКомпания = Справочники.Scan_Компании.ПустаяСсылка();
			Объект.Поставщик = Справочники.Scan_Контрагенты.ПустаяСсылка();
			Объект.Договор = Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка();			
		ИначеЕсли Параметры.ХозОперация = 2 Тогда			
			Объект.ПоставщикКомпания = Справочники.Scan_Компании.ПустаяСсылка();
			Объект.Поставщик = Справочники.Scan_Контрагенты.ПустаяСсылка();			
		КонецЕсли;
		
КонецПроцедуры
//rarus kabany 15.04.2021 17579 ---

&НаСервере
Функция ПолучитьСписокСкладовПоставщика(ТекПоставщик) // Rarus tenkam 22.03.2022 mantis 18574 +++
	
	МассивСкладов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СоответствиеСкладовИМестХранения.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.Scan_СоответствиеСкладовИМестХранения КАК Scan_СоответствиеСкладовИМестХранения
		|ГДЕ
		|	Scan_СоответствиеСкладовИМестХранения.МестоХранения.Контрагент = &ТекПоставщик
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_СоответствиеСкладовИМестХранения.Склад";
	
	Запрос.УстановитьПараметр("ТекПоставщик", ТекПоставщик);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСкладов.Добавить(ВыборкаДетальныеЗаписи.Склад);
	КонецЦикла;
	
	Возврат МассивСкладов;
	
КонецФункции // Rarus tenkam 22.03.2022 mantis 18574 ---

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // Rarus tenkam 22.03.2022 mantis 18574 +++
	
	СтандартнаяОбработка = Ложь;
	
	ТекПараметрыВыбора = Новый Структура;
	
	Если Не Объект.Поставщик.Пустая() Тогда
		СписокСкладов = ПолучитьСписокСкладовПоставщика(Объект.Поставщик);
		
		Если СписокСкладов.Количество() <> 0 Тогда
			ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФиксированныеНастройки.Отбор,
																	"Ссылка",
																	ВидСравненияКомпоновкиДанных.ВСписке,
																	СписокСкладов,,Истина);
			ТекПараметрыВыбора.Вставить("ФиксированныеНастройки",ФиксированныеНастройки);
		КонецЕсли;		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Scan_Склады.ФормаВыбора", 
					ТекПараметрыВыбора, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры // Rarus tenkam 22.03.2022 mantis 18574 ---


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ПродуктыКЗаказуПродуктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	фиксНастройки = Новый НастройкиКомпоновкиДанных;
	
	МассивТиповПродуктов = ПолучитьТипыПродуктовНадстроекИУслуг();
	
	СписокТиповПродуктов = Новый СписокЗначений;
	СписокТиповПродуктов.ЗагрузитьЗначения(МассивТиповПродуктов);
	
	эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	эОтбор.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ТипПродукта");
	эОтбор.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	эОтбор.ПравоеЗначение   = СписокТиповПродуктов;
	эОтбор.Использование    = Истина;
	эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	эОтбор.Представление    = "Тип продукта"; //rarus agar 14.09.2020 15696 +-
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
	
	Результат = ОткрытьФорму("Справочник.Scan_Изделия.ФормаВыбора", ПараметрыФормы, Элементы.ПродуктыКЗаказуПродукт);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыКЗаказуКоличествоПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПродуктыКЗаказу.ТекущиеДанные;
	ДанныеСтроки.Сумма = ДанныеСтроки.Количество * ДанныеСтроки.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыКЗаказуЦенаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПродуктыКЗаказу.ТекущиеДанные;
	ДанныеСтроки.Сумма = ДанныеСтроки.Количество * ДанныеСтроки.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыКЗаказуСуммаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПродуктыКЗаказу.ТекущиеДанные;
	Если ДанныеСтроки.Количество <> 0 Тогда
		ДанныеСтроки.Цена = ДанныеСтроки.Сумма / ДанныеСтроки.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыКЗаказуНомераЗаказовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.ПродуктыКЗаказу.ТекущаяСтрока);
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьНомераЗаказовВСтроке", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокНомеровЗаказов = Новый СписокЗначений;
	МассивНомеровЗаказов = СтрРазделить(Элементы.ПродуктыКЗаказу.ТекущиеДанные.НомераЗаказов, ",", Ложь);
	Для Каждого НомерЗаказа Из МассивНомеровЗаказов Цикл
		СписокНомеровЗаказов.Добавить(НомерЗаказа);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НомераЗаказов", СписокНомеровЗаказов);
	
	ОткрытьФорму("Документ.Scan_ЗаказНаЗакупку.Форма.ФормаВводаНомеровЗаказов", ПараметрыОткрытия, ЭтотОбъект,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//rarus agar 20.02.2021 17230 ++
&НаКлиенте
Процедура ПродуктыКЗаказуПродуктСоздание(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ПродуктыКЗаказу.ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ПродуктыКЗаказу.ТекущиеДанные;
		
		ПараметрыНадстройки = Новый Структура;
		ПараметрыНадстройки.Вставить("Надстр_Поставщик",   Объект.Поставщик);
		ПараметрыНадстройки.Вставить("Наименование",       ТекущиеДанные.ПродуктЗапросаНаНадстройку);
		ПараметрыНадстройки.Вставить("МаркаПродукта",      ТекущиеДанные.МаркаПродуктаЗапросаНаНадстройки);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыНадстройки);
		
		ОткрытьФорму("Справочник.Scan_Изделия.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 20.02.2021 17230 --

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыДокумента() Экспорт // rarus tenkam 05.07.2021 mantis 17987 (добавила Экспорт) +
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Объект.Автор                 = ТекущийПользователь;
	Объект.ВалютаДокумента       = Справочники.Валюты.НайтиПоКоду("643");
	Объект.ДатаСоздания          = ТекущаяДата();
	Объект.Дата                  = ТекущаяДата();
	Объект.Менеджер              = ТекущийПользователь;
	Объект.Организация           = ТекущийПользователь.Организация;
	Объект.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
	
КонецПроцедуры

#Область ХозОперации

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Хоз. операция" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Документы.Scan_ЗаказНаЗакупку.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	Если    (Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро")
		И    ЗначениеЗаполнено(Объект.Поставщик)
		И    Объект.Поставщик.Резидент)
		Или (Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный")
		И    ЗначениеЗаполнено(Объект.Поставщик)
		И Не Объект.Поставщик.Резидент)
		Тогда
		Объект.Поставщик = Неопределено;
		ПоставщикПриИзмененииНаСервере();
	КонецЕсли;
	
	// rarus agar 11.03.2022 18869 ++
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный") Тогда
		СтавкаНДС = ПредопределенноеЗначение("Справочник.Scan_СтавкиНДС.ОсновнаяСтавкаНДС");
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро") Тогда
		СтавкаНДС = ПредопределенноеЗначение("Справочник.Scan_СтавкиНДС.БезНДС");
	КонецЕсли;
	
	Для Каждого ПродуктКЗаказу Из Объект.ПродуктыКЗаказу Цикл
		Если ПродуктКЗаказу.СтавкаНДС <> СтавкаНДС Тогда
			ПродуктКЗаказу.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
	КонецЦикла;
	// rarus agar 11.03.2022 18869 --
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ХозОперацияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	ВыбраннаяХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации."+СтрЗаменить(Команда.Имя, "ХозОперация", ""));
	
	Если  ВыбраннаяХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро")
		И ЗначениеЗаполнено(Объект.ДОНомерЗаказаНаЗакупку)
		Тогда
		Сообщить(НСтр("ru = 'Номер заказа на закупку (1С:ДО) заполнен. Изменение операции запрещено!'; en = 'Purchase order number (1C:DM) has already filled in. Change of operation is prohibited!'"));
		Возврат;
	КонецЕсли;
	
	Если  ВыбраннаяХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный")
		И ЗначениеЗаполнено(Объект.BBНомерЗаказаНаЗакупку)
		Тогда
		Сообщить(НСтр("ru = '№ заказа (BB Europe) заполнен. Изменение операции запрещено!'; en = 'Purchase order number (BB Europe) has already filled in. Change of operation is prohibited!'"));
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события выбора одного из пунктов меню доступных хоз. операций
	Scan_УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры // ХозОперацияПриИзменении()

#КонецОбласти

&НаСервере
Процедура УправлениеДиалогомНаСервере() Экспорт // rarus tenkam 05.07.2021 mantis 17987 (добавила Экспорт) +
	
	Если ВидимостьПродуктовЗапросаНаНадстройку Тогда
		Элементы.ПродуктыКЗаказуСкрытьПродуктЗапросаНаНадстройку.Заголовок = "Скрыть продукты запроса на надстройки";
	Иначе
		Элементы.ПродуктыКЗаказуСкрытьПродуктЗапросаНаНадстройку.Заголовок = "Показать продукты запроса на надстройки";
	КонецЕсли;
	
	Элементы.ПродуктыКЗаказуПродуктЗапросаНаНадстройку.Видимость       = ВидимостьПродуктовЗапросаНаНадстройку;
	//rarus agar 20.02.2021 17230 ++
	Элементы.ПродуктыКЗаказуМаркаПродуктаЗапросаНаНадстройки.Видимость = ВидимостьПродуктовЗапросаНаНадстройку;
	//rarus agar 20.02.2021 17230 --
	Элементы.ПродуктыКЗаказуСкрытьПродуктЗапросаНаНадстройку.Пометка = ВидимостьПродуктовЗапросаНаНадстройку;
	
	Элементы.ФормаСогласоватьВДО.Доступность = ЗначениеЗаполнено(Объект.ДОНомерЗаказаНаЗакупку) И Не Объект.ДОПроцессСогласованияЗапущен;
	
	ЭтоЗаказЛокальный = Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный");
	ЭтоЗаказЕвро      = Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро");
	
	Элементы.ДействияФормыДО.Видимость          = ЭтоЗаказЛокальный;
	Элементы.ГруппаДанныеДО.Видимость           = ЭтоЗаказЛокальный;
	Элементы.ТипЗаказа.Видимость                = ЭтоЗаказЛокальный;
	Элементы.НестандартныйЗаказ.Видимость       = ЭтоЗаказЛокальный;
	Элементы.ЦентрЗатрат.Видимость              = ЭтоЗаказЛокальный;
	Элементы.Комментарий.Видимость              = ЭтоЗаказЛокальный;
	Элементы.Договор.Видимость                  = ЭтоЗаказЛокальный;
	Элементы.АдресПоставки.Видимость            = ЭтоЗаказЛокальный;
	Элементы.УсловияПоставки.Видимость          = ЭтоЗаказЛокальный;
	Элементы.УсловияОплаты.Видимость            = ЭтоЗаказЛокальный;
	Элементы.ДополнительнаяИнформация.Видимость = ЭтоЗаказЛокальный;
	
	Элементы.ГруппаДанныеЕвро.Видимость = ЭтоЗаказЕвро;
	
	//rarus agar 01.04.2021 17545 ++
	Элементы.ПродуктыКЗаказуОбновитьПоЗапросу.Видимость = ЭтоЗаказЛокальный 
														И (Объект.ДОСтатусЗаказаНаЗакупку = "" Или Объект.ДОСтатусЗаказаНаЗакупку = "Проект");
	//rarus agar 01.04.2021 17545 --
	
	// Rarus tenkam 22.03.2022 mantis 18574 +++
	
	ЭтоКузовостроитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Поставщик, "Кузовостроитель");
	ЭтоКузовостроитель = ?(ЭтоКузовостроитель = Неопределено, Ложь, ЭтоКузовостроитель);
	Элементы.Склад.ТолькоПросмотр = НЕ ЭтоКузовостроитель;
	// Rarus tenkam 22.03.2022 mantis 18574 ---	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиМонитораНаСервере()
	
	ХранилищеНастроекДанныхФорм.Сохранить("ЗаказНаЗакупку", "ВидимостьПродуктовЗапросаНаНадстройку", ВидимостьПродуктовЗапросаНаНадстройку);
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикКомпанияПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.ПоставщикКомпания) Тогда
		Объект.Поставщик = Неопределено;
		Объект.Договор   = Неопределено;
	Иначе
		Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный") Тогда
			ОтборРезидент = Истина;
		Иначе
			ОтборРезидент = Ложь;
		КонецЕсли;
		
		КонтрагентыКомпанииПоставщика = ПолучитьКонтрагентовКомпанииПоставщика(Объект.ПоставщикКомпания, ОтборРезидент);
		
		Если КонтрагентыКомпанииПоставщика.Количество() = 1 Тогда
			Объект.Поставщик = КонтрагентыКомпанииПоставщика[0];
		ИначеЕсли КонтрагентыКомпанииПоставщика.Найти(Объект.Поставщик) = Неопределено Тогда
			Объект.Поставщик = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Объект.ПоставщикКомпания = Неопределено;
	Иначе
		КомпанииПоставщикиКонтрагента = ПолучитьКомпанииПоставщикиКонтрагента(Объект.Поставщик);
		
		Если КомпанииПоставщикиКонтрагента.Количество() = 1 Тогда
			Объект.ПоставщикКомпания = КомпанииПоставщикиКонтрагента[0];
		ИначеЕсли КомпанииПоставщикиКонтрагента.Найти(Объект.ПоставщикКомпания) = Неопределено  Тогда
			Объект.ПоставщикКомпания = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Rarus tenkam 22.03.2022 mantis 18574 +++
	УправлениеДиалогомНаСервере();
	Если Элементы.Склад.ТолькоПросмотр Тогда
		Объект.Склад = ПредопределенноеЗначение("Справочник.Scan_Склады.ПустаяСсылка");
	КонецЕсли;
	// Rarus tenkam 22.03.2022 mantis 18574 ---	
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.УсловияПоставки = Неопределено;
		Объект.УсловияОплаты   = Неопределено;
	Иначе
		Объект.УсловияПоставки = Объект.Договор.ДОУсловияПоставки;
		Объект.УсловияОплаты   = Объект.Договор.ДОУсловияОплаты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомпанииПоставщикиКонтрагента(ПоставщикКонтрагент)
	
	ВидВзаимодействияПоставщик = Scan_ПраваИНастройки.Scan_Право("ВидВзаимодействияПоставщик");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",                 ПоставщикКонтрагент);
	Запрос.УстановитьПараметр("ВидВзаимодействияПоставщик", ВидВзаимодействияПоставщик);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ВзаимосвязьКомпанийСКонтрагентами.Компания КАК Компания
	|ИЗ
	|	РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами КАК Scan_ВзаимосвязьКомпанийСКонтрагентами
	|ГДЕ
	|	Scan_ВзаимосвязьКомпанийСКонтрагентами.Контрагент = &Контрагент
	|	И Scan_ВзаимосвязьКомпанийСКонтрагентами.ВидВзаимодействия = &ВидВзаимодействияПоставщик";
	РезультатЗапроса = Запрос.Выполнить();
	
	КомпанииПоставщикиКонтрагента = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Компания");
	
	Возврат КомпанииПоставщикиКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентовКомпанииПоставщика(ПоставщикКомпания, Резидент)
	
	ВидВзаимодействияПоставщик = Scan_ПраваИНастройки.Scan_Право("ВидВзаимодействияПоставщик");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компания",                   ПоставщикКомпания);
	Запрос.УстановитьПараметр("ВидВзаимодействияПоставщик", ВидВзаимодействияПоставщик);
	Запрос.УстановитьПараметр("Резидент",                   Резидент);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ВзаимосвязьКомпанийСКонтрагентами.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами КАК Scan_ВзаимосвязьКомпанийСКонтрагентами
	|ГДЕ
	|	Scan_ВзаимосвязьКомпанийСКонтрагентами.Компания = &Компания
	|	И Scan_ВзаимосвязьКомпанийСКонтрагентами.ВидВзаимодействия = &ВидВзаимодействияПоставщик
	|	И Scan_ВзаимосвязьКомпанийСКонтрагентами.Контрагент.Резидент = &Резидент";
	РезультатЗапроса = Запрос.Выполнить();
	
	КонтрагентыКомпанииПоставщика = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат КонтрагентыКомпанииПоставщика;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипыПродуктовНадстроекИУслуг()
	
	МассивТиповПродуктов = Новый Массив;
	
	МассивТиповПродуктовНадстроек = Справочники.Scan_ТипыПродуктов.ПолучитьТипыПродуктовНадстроекИОборудования();
	Для Каждого ЭлементМассива Из МассивТиповПродуктовНадстроек Цикл
		МассивТиповПродуктов.Добавить(ЭлементМассива);
	КонецЦикла;
	
	МассивТиповПродуктовУслуг = Справочники.Scan_ТипыПродуктов.ПолучитьТипыПродуктовУслуг();
	Для Каждого ЭлементМассива Из МассивТиповПродуктовУслуг Цикл
		МассивТиповПродуктов.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Возврат МассивТиповПродуктов;
	
КонецФункции

&НаСервере
Процедура ОтправитьВДОНаСервере()
	
	Отказ = Ложь;
	
	Ответственный = ПолучитьПользователяОСНаСервере(Объект.Автор);
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Сообщить(НСтр("ru = 'Ошибка получения данных автора! Заказ на закупку не отправлен.'; en = 'Failed to get the data of the author! The purchase order has not been sent.'"));
		Возврат;
	КонецЕсли;
	
	ПродуктыКЗаказу = Новый ТаблицаЗначений;
	ПродуктыКЗаказу.Колонки.Добавить("ИдентификаторПродукта");
	ПродуктыКЗаказу.Колонки.Добавить("Наименование");
	ПродуктыКЗаказу.Колонки.Добавить("ТипПродукта");
	ПродуктыКЗаказу.Колонки.Добавить("ДатаПоставки");
	ПродуктыКЗаказу.Колонки.Добавить("Количество");
	ПродуктыКЗаказу.Колонки.Добавить("Цена");
	ПродуктыКЗаказу.Колонки.Добавить("КодВалюты");
	ПродуктыКЗаказу.Колонки.Добавить("СтавкаНДС");
	ПродуктыКЗаказу.Колонки.Добавить("КомментарийДляПоставщика");
	ПродуктыКЗаказу.Колонки.Добавить("КомментарийВнутренний");
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаПродуктов Из Объект.ПродуктыКЗаказу Цикл
		Если СтрокаПродуктов.Продукт.Пустая() Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнен продукт.'; en = 'Line # %1 is not filled with product.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не СтрокаПродуктов.Продукт.Пустая() 
			И ПустаяСтрока(СтрокаПродуктов.Продукт.IDExternalSystemProduct) 
			Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'У продукта %1 не заполнен идентификатор продукта - поле ""ID External System продукта"".'; en = 'Product %1 has an empty ID External System Product.'"),
			         СтрокаПродуктов.Продукт.Наименование));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не СтрокаПродуктов.Продукт.Пустая() 
			И ПустаяСтрока(СтрокаПродуктов.Продукт.НомерИзделия) 
			Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'У продукта %1 не заполнен номер продукта.'; en = 'Product %1 has an empty product number.'"),
			         СтрокаПродуктов.Продукт.Наименование));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не СтрокаПродуктов.Продукт.Пустая() 
			И СтрокаПродуктов.Продукт.ТипПродукта.Пустая() 
			Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'У продукта %1 не заполнен тип продукта.'; en = 'Product %1 has an empty product type.'"),
			         СтрокаПродуктов.Продукт.Наименование));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.Количество = 0 Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнено количество.'; en = 'Line # %1 is not filled with quantity.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.Цена = 0 Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнена цена.'; en = 'Line # %1 is not filled with price.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.Валюта.Пустая() Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнена валюта.'; en = 'Line # %1 is not filled with currency.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.СтавкаНДС.Пустая() Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнена ставка НДС.'; en = 'Line # %1 is not filled with VAT rate.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		НоваяСтрока = ПродуктыКЗаказу.Добавить();
		НоваяСтрока.ИдентификаторПродукта    = СтрокаПродуктов.Продукт.IDExternalSystemProduct;
		НоваяСтрока.Наименование             = СтрокаПродуктов.Продукт.Наименование;
		НоваяСтрока.ТипПродукта              = СтрокаПродуктов.Продукт.ТипПродукта.Наименование;
		НоваяСтрока.ДатаПоставки             = СтрокаПродуктов.ДатаПоставки;
		НоваяСтрока.Количество               = СтрокаПродуктов.Количество;
		НоваяСтрока.Цена                     = СтрокаПродуктов.Цена;
		НоваяСтрока.КодВалюты                = СтрокаПродуктов.Валюта.Код;
		НоваяСтрока.СтавкаНДС                = СтрокаПродуктов.СтавкаНДС.Ставка;
		НоваяСтрока.КомментарийДляПоставщика = СтрокаПродуктов.КомментарийДляПоставщика;
		НоваяСтрока.КомментарийВнутренний    = СтрокаПродуктов.КомментарийВнутренний;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ЗаказНаЗакупку",           Объект.Ссылка);
	ПараметрыВызова.Вставить("ИдентификаторЗаказа",      Объект.IDSystem);
	ПараметрыВызова.Вставить("ДатаЗаказа",               Объект.Дата);
	ПараметрыВызова.Вставить("ТипЗаказа",                Объект.ТипЗаказа);
	ПараметрыВызова.Вставить("НестандартныйЗаказ",       Объект.НестандартныйЗаказ);
	ПараметрыВызова.Вставить("ДополнительнаяИнформация", Объект.ДополнительнаяИнформация);
	ПараметрыВызова.Вставить("Комментарий",              Объект.Комментарий);
	ПараметрыВызова.Вставить("Поставщик",                Объект.Поставщик);
	ПараметрыВызова.Вставить("ИдентификаторПоставщика",  Объект.Поставщик.IDExternalSystem);
	ПараметрыВызова.Вставить("Договор",                  Объект.Договор);
	ПараметрыВызова.Вставить("ИдентификаторДоговора",    Объект.Договор.ДОIDExternalSystem);
	ПараметрыВызова.Вставить("НаименованиеДоговора",     Объект.Договор.ДОНаименованиеДоговора);
	ПараметрыВызова.Вставить("ЦентрЗатрат",              Объект.ЦентрЗатрат.Наименование);
	ПараметрыВызова.Вставить("АдресПоставки",            Объект.АдресПоставки);
	ПараметрыВызова.Вставить("УсловияПоставки",          Объект.УсловияПоставки);
	ПараметрыВызова.Вставить("УсловияОплаты",            Объект.УсловияОплаты);
	ПараметрыВызова.Вставить("Ответственный",            Ответственный);
	ПараметрыВызова.Вставить("ПродуктыКЗаказу",          ПродуктыКЗаказу);

	ОтветСервиса = Scan_ВебСервисы.ВызовВебСервиса1СДО("setPurchaseOrder", ПараметрыВызова, Отказ);
	
	Если Не Отказ Тогда
		Сообщить(НСтр("ru = 'Данные заказа успешно переданы в 1С:ДО.'; en = 'Data has been successfully transferred to 1C:DM.'"));
		
		Объект.ДОНомерЗаказаНаЗакупку       = ОтветСервиса.НомерЗаказа;
		Объект.ДОДатаЗаказаНаЗакупку        = ОтветСервиса.ДатаЗаказа;
		Объект.ДОСтатусЗаказаНаЗакупку      = ОтветСервиса.СтатусЗаказа;
		
		Если    Не ЗначениеЗаполнено(ОтветСервиса.НомерЗаказа)
			Или Не ЗначениеЗаполнено(ОтветСервиса.ДатаЗаказа)
			Или Не ЗначениеЗаполнено(ОтветСервиса.СтатусЗаказа)
			Тогда
			Сообщить(НСтр("ru = 'По заказу на закупку из 1С:ДО поступили не все данные. Проверьте заполнение в документе полей: ""№ заказа (1С:ДО)"", ""Дата заказа на закупку (1С:ДО)"", ""Статус заказа (1С:ДО)""';
			             | en = 'Not all data received. Check the fields: ""Purchase order number (1C:DM)"", ""Purchase order date (1C:DM)"", ""Status (1C:DM)""'"));
		КонецЕсли;
		
		Попытка
			Записать();
			
			ОбработатьВзаимосвязьИзделий();
			//ОбработатьВзаимосвязьЗаказов();
		Исключение
			Сообщить(НСтр("ru = 'Не удалось записать документ.'; en = 'Failed to save the document.'"));
		КонецПопытки;
	Иначе
		Сообщить(НСтр("ru = 'Не удалось передать данные заказа в 1С:ДО.'; en = 'Data transfer to 1C:DM has failed.'"));
		Сообщить(ОтветСервиса);
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьВДОНаСервере()
	
	Отказ = Ложь;
	
	#Область setPurchaseOrder
	
	Ответственный = ПолучитьПользователяОСНаСервере(Объект.Автор);
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Сообщить(НСтр("ru = 'Ошибка получения данных автора! Заказ на закупку не отправлен.'; en = 'Failed to get the data of the author! The purchase order has not been sent.'"));
		Возврат;
	КонецЕсли;
	
	ПродуктыКЗаказу = Новый ТаблицаЗначений;
	ПродуктыКЗаказу.Колонки.Добавить("ИдентификаторПродукта");
	ПродуктыКЗаказу.Колонки.Добавить("Наименование");
	ПродуктыКЗаказу.Колонки.Добавить("ТипПродукта");
	ПродуктыКЗаказу.Колонки.Добавить("ДатаПоставки");
	ПродуктыКЗаказу.Колонки.Добавить("Количество");
	ПродуктыКЗаказу.Колонки.Добавить("Цена");
	ПродуктыКЗаказу.Колонки.Добавить("КодВалюты");
	ПродуктыКЗаказу.Колонки.Добавить("СтавкаНДС");
	ПродуктыКЗаказу.Колонки.Добавить("КомментарийДляПоставщика");
	ПродуктыКЗаказу.Колонки.Добавить("КомментарийВнутренний");
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаПродуктов Из Объект.ПродуктыКЗаказу Цикл
		Если СтрокаПродуктов.Продукт.Пустая() Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнен продукт.'; en = 'Line # %1 is not filled with product.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не СтрокаПродуктов.Продукт.Пустая() 
			И ПустаяСтрока(СтрокаПродуктов.Продукт.IDExternalSystemProduct) 
			Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'У продукта %1 не заполнен идентификатор продукта.'; en = 'Product %1 has an empty ID External System Product.'"),
			         СтрокаПродуктов.Продукт.Наименование));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не СтрокаПродуктов.Продукт.Пустая() 
			И ПустаяСтрока(СтрокаПродуктов.Продукт.НомерИзделия) 
			Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'У продукта %1 не заполнен номер продукта.'; en = 'Product %1 has an empty product number.'"),
			         СтрокаПродуктов.Продукт.Наименование));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не СтрокаПродуктов.Продукт.Пустая() 
			И СтрокаПродуктов.Продукт.ТипПродукта.Пустая() 
			Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'У продукта %1 не заполнен тип продукта.'; en = 'Product %1 has an empty product type.'"),
			         СтрокаПродуктов.Продукт.Наименование));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.ДатаПоставки = Дата(1,1,1) Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнена дата поставки.'; en = 'Line # %1 is not filled with delivery date.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.Количество = 0 Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнено количество.'; en = 'Line # %1 is not filled with quantity.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.Цена = 0 Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнена цена.'; en = 'Line # %1 is not filled with price.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.Валюта.Пустая() Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнена валюта.'; en = 'Line # %1 is not filled with currency.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если СтрокаПродуктов.СтавкаНДС.Пустая() Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'В строке № %1 не заполнена ставка НДС.'; en = 'Line # %1 is not filled with VAT rate.'"),
			         СтрокаПродуктов.НомерСтроки));
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		НоваяСтрока = ПродуктыКЗаказу.Добавить();
		НоваяСтрока.ИдентификаторПродукта    = СтрокаПродуктов.Продукт.IDExternalSystemProduct;
		НоваяСтрока.Наименование             = СтрокаПродуктов.Продукт.Наименование;
		НоваяСтрока.ТипПродукта              = СтрокаПродуктов.Продукт.ТипПродукта.Наименование;
		НоваяСтрока.ДатаПоставки             = СтрокаПродуктов.ДатаПоставки;
		НоваяСтрока.Количество               = СтрокаПродуктов.Количество;
		НоваяСтрока.Цена                     = СтрокаПродуктов.Цена;
		НоваяСтрока.КодВалюты                = СтрокаПродуктов.Валюта.Код;
		НоваяСтрока.СтавкаНДС                = СтрокаПродуктов.СтавкаНДС.Ставка;
		НоваяСтрока.КомментарийДляПоставщика = СтрокаПродуктов.КомментарийДляПоставщика;
		НоваяСтрока.КомментарийВнутренний    = СтрокаПродуктов.КомментарийВнутренний;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ЗаказНаЗакупку",           Объект.Ссылка);
	ПараметрыВызова.Вставить("ИдентификаторЗаказа",      Объект.IDSystem);
	ПараметрыВызова.Вставить("ДатаЗаказа",               Объект.Дата);
	ПараметрыВызова.Вставить("ТипЗаказа",                Объект.ТипЗаказа);
	ПараметрыВызова.Вставить("НестандартныйЗаказ",       Объект.НестандартныйЗаказ);
	ПараметрыВызова.Вставить("ДополнительнаяИнформация", Объект.ДополнительнаяИнформация);
	ПараметрыВызова.Вставить("Комментарий",              Объект.Комментарий);
	ПараметрыВызова.Вставить("Поставщик",                Объект.Поставщик);
	ПараметрыВызова.Вставить("ИдентификаторПоставщика",  Объект.Поставщик.IDExternalSystem);
	ПараметрыВызова.Вставить("Договор",                  Объект.Договор);
	ПараметрыВызова.Вставить("ИдентификаторДоговора",    Объект.Договор.ДОIDExternalSystem);
	ПараметрыВызова.Вставить("НаименованиеДоговора",     Объект.Договор.ДОНаименованиеДоговора);
	ПараметрыВызова.Вставить("ЦентрЗатрат",              Объект.ЦентрЗатрат.Наименование);
	ПараметрыВызова.Вставить("АдресПоставки",            Объект.АдресПоставки);
	ПараметрыВызова.Вставить("УсловияПоставки",          Объект.УсловияПоставки);
	ПараметрыВызова.Вставить("УсловияОплаты",            Объект.УсловияОплаты);
	ПараметрыВызова.Вставить("Ответственный",            Ответственный);
	ПараметрыВызова.Вставить("ПродуктыКЗаказу",          ПродуктыКЗаказу);

	ОтветСервиса = Scan_ВебСервисы.ВызовВебСервиса1СДО("setPurchaseOrder", ПараметрыВызова, Отказ);
	
	Если Не Отказ Тогда
		Сообщить(НСтр("ru = 'Данные заказа успешно переданы в 1С:ДО.'; en = 'Data has been successfully transferred to 1C:DM.'"));
		
		Объект.ДОНомерЗаказаНаЗакупку       = ОтветСервиса.НомерЗаказа;
		Объект.ДОДатаЗаказаНаЗакупку        = ОтветСервиса.ДатаЗаказа;
		Объект.ДОСтатусЗаказаНаЗакупку      = ОтветСервиса.СтатусЗаказа;
		
		Если    Не ЗначениеЗаполнено(ОтветСервиса.НомерЗаказа)
			Или Не ЗначениеЗаполнено(ОтветСервиса.ДатаЗаказа)
			Или Не ЗначениеЗаполнено(ОтветСервиса.СтатусЗаказа)
			Тогда
			Сообщить(НСтр("ru = 'По заказу на закупку из 1С:ДО поступили не все данные. Проверьте заполнение в документе полей: ""№ заказа (1С:ДО)"", ""Дата заказа на закупку (1С:ДО)"", ""Статус заказа (1С:ДО)""';
			             | en = 'Not all data received. Check the fields: ""Purchase order number (1C:DM)"", ""Purchase order date (1C:DM)"", ""Status (1C:DM)""'"));
		КонецЕсли;
	Иначе
		Сообщить(НСтр("ru = 'Не удалось передать данные заказа в 1С:ДО.'; en = 'Data transfer to 1C:DM has failed.'"));
		Сообщить(ОтветСервиса);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область setPurchaseOrderApproval
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ИдентификаторЗаказа", Объект.IDSystem);
	
	ОтветСервиса = Scan_ВебСервисы.ВызовВебСервиса1СДО("setPurchaseOrderApproval", ПараметрыВызова, Отказ);
	
	Если Не Отказ Тогда
		Сообщить(НСтр("ru = 'Заказ отправлен на согласование в 1С:ДО.'; en = 'The order has been sent for approval in 1C:DM.'"));
		
		Если ЗначениеЗаполнено(ОтветСервиса.СтатусЗаказа) Тогда
			Объект.ДОСтатусЗаказаНаЗакупку      = ОтветСервиса.СтатусЗаказа;
		КонецЕсли;
		Объект.ДОПроцессСогласованияЗапущен = Не ОтветСервиса.Отклонен;
			
		Если ОтветСервиса.Отклонен Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'Процесс согласования в 1С:ДО не был стартован по причине: ""%1"".'; 
						            |en = 'Failed to start the approval process in 1C:DM: ""%1"".'"), 
						            ОтветСервиса.СообщениеОбОшибке));
		КонецЕсли;
		
		Попытка
			Записать();
		Исключение 
			Сообщить(НСтр("ru = 'Не удалось записать документ.'; en = 'Failed to save the document.'"));
		КонецПопытки;
	Иначе
		Сообщить(НСтр("ru = 'Не удалось отправить заказ на согласование в 1С:ДО.'; en = 'Data transfer to 1C:DM has failed.'"));
		Сообщить(ОтветСервиса);
	КонецЕсли;
	
	#КонецОбласти
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзДОНаСервере()
	
	Отказ = Ложь;
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ИдентификаторЗаказа", Объект.IDSystem);
	
	ОтветСервиса = Scan_ВебСервисы.ВызовВебСервиса1СДО("GetOrderStatus", ПараметрыВызова, Отказ);
	
	Если Не Отказ Тогда
		Сообщить(НСтр("ru = 'Данные заказа успешно обновлены из 1С:ДО.'; en = 'Data updates successfully.'"));
		Объект.ДОНомерЗаказаНаЗакупку       = ОтветСервиса.НомерЗаказа;
		Объект.ДОДатаЗаказаНаЗакупку        = ОтветСервиса.ДатаЗаказа;
		Объект.ДОСтатусЗаказаНаЗакупку      = ОтветСервиса.СтатусЗаказа;
		
		Попытка
			Записать();
		Исключение 
			Сообщить(НСтр("ru = 'Не удалось записать документ.'; en = 'Failed to save the document.'"));
		КонецПопытки;
	Иначе
		Сообщить(НСтр("ru = 'Не удалось обновить данные заказа из 1С:ДО.'; en = 'Data update failed.'"));
		Сообщить(ОтветСервиса);
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВзаимосвязьИзделий(УдалитьВзаимосвязь = Ложь)
	
	Если УдалитьВзаимосвязь Тогда
		Для Каждого СтрокаПродукта Из Объект.ПродуктыКЗаказу Цикл
			ПродуктЗаказаНаЗавод = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(СтрокаПродукта.ЗаказНаЗавод);
			Если ЗначениеЗаполнено(ПродуктЗаказаНаЗавод) Тогда
				МенеджерЗаписи = РегистрыСведений.Scan_ВзаимосвязьИзделий.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ИзделиеТС                     = ПродуктЗаказаНаЗавод;
				МенеджерЗаписи.НадстройкиОборудованияПрицепы = СтрокаПродукта.Продукт;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТипыПродуктовУслуг = Справочники.Scan_ТипыПродуктов.ПолучитьТипыПродуктовУслуг();
		
		Для Каждого СтрокаПродукта Из Объект.ПродуктыКЗаказу Цикл
			Если ТипыПродуктовУслуг.Найти(СтрокаПродукта.Продукт.ТипПродукта) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНомеровЗаказов = СтрРазделить(СтрокаПродукта.НомераЗаказов, ",", Ложь);
			Для Каждого НомерЗаказа Из МассивНомеровЗаказов Цикл
				ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(НомерЗаказа, Истина);
				Если ЗаказНаЗаводСсылка.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				ПродуктЗаказаНаЗавод = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(ЗаказНаЗаводСсылка);
				Если ЗначениеЗаполнено(ПродуктЗаказаНаЗавод) Тогда
					МенеджерЗаписи = РегистрыСведений.Scan_ВзаимосвязьИзделий.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ИзделиеТС                     = ПродуктЗаказаНаЗавод;
					МенеджерЗаписи.НадстройкиОборудованияПрицепы = СтрокаПродукта.Продукт;
					МенеджерЗаписи.Пользователь                  = Пользователи.ТекущийПользователь();
					МенеджерЗаписи.ДатаИзмененияСвязи            = ТекущаяДатаСеанса();
					
					Попытка
						МенеджерЗаписи.Записать();
					Исключение
						Сообщить(СтрШаблон(НСтр("ru = 'Не удалось установить взаимосвязь надстройки ""%1"" с продуктом ""%2"".'; 
						                        |en = 'Failed to link superstructure ""%1"" with product ""%2"".'"), 
						                        ПродуктЗаказаНаЗавод, СтрокаПродукта.Продукт));
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВзаимосвязьЗаказов(УдалитьВзаимосвязь = Ложь)

	Для Каждого СтрокаПродукта Из Объект.ПродуктыКЗаказу Цикл
		МассивНомеровЗаказов = СтрРазделить(СтрокаПродукта.НомераЗаказов, ",", Ложь);
		Для Каждого НомерЗаказа Из МассивНомеровЗаказов Цикл
			ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(НомерЗаказа, Истина);
			Если ЗаказНаЗаводСсылка.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаказНаЗаводОбъект = ЗаказНаЗаводСсылка.ПолучитьОбъект();
			
			Если УдалитьВзаимосвязь Тогда
				НайденныеСтроки = ЗаказНаЗаводОбъект.ЗаказыНаЗакупку.НайтиСтроки(Новый Структура("ЗаказНаЗакупку", Объект.Ссылка));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ЗаказНаЗаводОбъект.ЗаказыНаЗакупку.Удалить(НайденнаяСтрока);
				КонецЦикла;
			Иначе
				НайденныеСтроки = ЗаказНаЗаводОбъект.ЗаказыНаЗакупку.НайтиСтроки(Новый Структура("ЗаказНаЗакупку", Объект.Ссылка));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ЗаказНаЗаводОбъект.ЗаказыНаЗакупку.Добавить();
					НоваяСтрока.Кузовщик       = Объект.Поставщик;
					НоваяСтрока.ЗаказНаЗакупку = Объект.Ссылка;
				Иначе
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если НайденнаяСтрока.Кузовщик <> Объект.Поставщик Тогда
							НайденнаяСтрока.Кузовщик = Объект.Поставщик;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаЗаказыНаЗакупку = ЗаказНаЗаводОбъект.ЗаказыНаЗакупку.Выгрузить();
			
			ТаблицаКузовщиков = ТаблицаЗаказыНаЗакупку.Скопировать(,"Кузовщик");
			ТаблицаКузовщиков.Свернуть("Кузовщик");
			
			КузовщикиПредставление = СтрСоединить(ТаблицаКузовщиков.ВыгрузитьКолонку("Кузовщик"), ",");
			Если ЗаказНаЗаводОбъект.КузовщикиПредставление <> КузовщикиПредставление Тогда
				ЗаказНаЗаводОбъект.КузовщикиПредставление = КузовщикиПредставление;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЗаказыНаЗакупку", ТаблицаЗаказыНаЗакупку.ВыгрузитьКолонку("ЗаказНаЗакупку"));
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку КАК Номер
			|ИЗ
			|	Документ.Scan_ЗаказНаЗакупку КАК Scan_ЗаказНаЗакупку
			|ГДЕ
			|	Scan_ЗаказНаЗакупку.Ссылка В(&ЗаказыНаЗакупку)
			|	И Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку <> """"
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номер";
			РезультатЗапроса = Запрос.Выполнить();
			
			ЗаказыНаЗакупкуПредставление = СтрСоединить(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номер"), ",");
			Если ЗаказНаЗаводОбъект.ЗаказыНаЗакупкуПредставление <> ЗаказыНаЗакупкуПредставление Тогда
				ЗаказНаЗаводОбъект.ЗаказыНаЗакупкуПредставление = ЗаказыНаЗакупкуПредставление;
			КонецЕсли;
			
			Если ЗаказНаЗаводОбъект.Модифицированность() Тогда
				Попытка
					ЗаказНаЗаводОбъект.Записать();
				Исключение
					Сообщить(СтрШаблон(НСтр("ru = 'Не удалось обновить взаимосвязь заказа на завод ""%1"" с заказом на закупку ""%2"".'; 
					|en = 'Failed to link оrder to the plant ""%1"" with purchase order ""%2"".'"), 
					СтрокаПродукта.ЗаказНаЗавод, Объект.Ссылка));
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура IDSystemОткрытиеНаСервере()
	
	Если  (ПустаяСтрока(Объект.IDSystem) Или Объект.IDSystem = "00000000-0000-0000-0000-000000000000")
		И Не Объект.Ссылка.Пустая()
		Тогда
		Объект.IDSystem = Строка(Объект.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераЗаказовВСтроке(АдресНомеровЗаказов, ДополнительныеПараметры) Экспорт
	
	Попытка
		ВыбранныеНомераЗаказов = ПолучитьИзВременногоХранилища(АдресНомеровЗаказов);
	Исключение
		Возврат;
	КонецПопытки;
	
	СтрокаТаблицы = Объект.ПродуктыКЗаказу.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	СтрокаТаблицы.НомераЗаказов = СтрСоединить(ВыбранныеНомераЗаказов, ",");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПользователяОСНаСервере(Пользователь)

	Ответственный = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Пользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить(НСтр("ru = 'Ошибка получения данных автора! Заказ на закупку не отправлен.'; en = 'Failed to get the data of the author! The purchase order has not been sent.'"));
		Возврат Ответственный;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Выборка.ИдентификаторПользователяИБ);
	Если СвойстваПользователяИБ = Неопределено Тогда
		Сообщить(НСтр("ru = 'Ошибка получения данных автора! Заказ на закупку не отправлен.'; en = 'Failed to get the data of the author! The purchase order has not been sent.'"));
		Возврат Ответственный;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ПользовательСДоменом = СвойстваПользователяИБ.ПользовательОС;
	ПользовательСДоменом = СтрЗаменить(ПользовательСДоменом, "\\", "");
	МассивПользователяСДоменом = СтрРазделить(ПользовательСДоменом, "\", Ложь);
	
	Если МассивПользователяСДоменом.Количество() = 1 Тогда
		Ответственный = МассивПользователяСДоменом[0];
	ИначеЕсли МассивПользователяСДоменом.Количество() = 2 Тогда
		Ответственный = МассивПользователяСДоменом[1];
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияАдресовПоставкиИзДО(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.АдресПоставки = РезультатЗакрытия.ВыбранныйАдрес;
		
		ЗаполнитьСписокАдресовНаСервере(РезультатЗакрытия.СписокАдресов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАдресовНаСервере(СписокАдресовДО)
	
	Если СписокАдресов.Количество() = 0 Тогда
		СписокАдресов.Загрузить(СписокАдресовДО.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

//rarus agar 01.04.2021 17545 ++
&НаСервере
Процедура ОбновитьПоЗапросуНаСервере()
	
	ИдентификаторыЗаказаНаЗакупку = Новый Массив;
	
	Для Каждого СтрокаПродуктаКЗаказу Из Объект.ПродуктыКЗаказу Цикл
		Если Не ПустаяСтрока(СтрокаПродуктаКЗаказу.ИдентификаторСтрокиЗапроса) Тогда
			ИдентификаторыЗаказаНаЗакупку.Добавить(СтрокаПродуктаКЗаказу.ИдентификаторСтрокиЗапроса);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗапросОснование",               Объект.ДокументОснование);
	Запрос.УстановитьПараметр("ИдентификаторыЗаказаНаЗакупку", ИдентификаторыЗаказаНаЗакупку);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.ТоварУслуга КАК ТоварУслуга,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.МаркаПродукта КАК МаркаПродукта,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.Количество КАК Количество,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.Цена КАК Цена,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.Валюта КАК Валюта,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.НомераЗаказов КАК НомераЗаказов,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.Scan_ЗапросНаНадстройки.ТоварыУслугиРаботы КАК Scan_ЗапросНаНадстройкиТоварыУслугиРаботы
	|ГДЕ
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.Ссылка = &ЗапросОснование
	|	И Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.ИдентификаторСтроки В(&ИдентификаторыЗаказаНаЗакупку)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.ТоварУслуга КАК ТоварУслуга,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.МаркаПродукта КАК МаркаПродукта,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.Количество КАК Количество,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.Цена КАК Цена,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.Валюта КАК Валюта,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.НомераЗаказов КАК НомераЗаказов,
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.Scan_ЗапросНаНадстройки.ТоварыУслугиРаботы КАК Scan_ЗапросНаНадстройкиТоварыУслугиРаботы
	|ГДЕ
	|	Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.Ссылка = &ЗапросОснование
	|	И НЕ Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.ИдентификаторСтроки В (&ИдентификаторыЗаказаНаЗакупку)
	|	И НЕ Scan_ЗапросНаНадстройкиТоварыУслугиРаботы.ИдентификаторСтроки = """"";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	СтрокиЗапросаВЗаказе   = РезультатыЗапроса[0];
	СтрокиЗапросаНеВЗаказе = РезультатыЗапроса[1];
	
	ИзмененныеСтроки  = Новый Массив;
	УдаленныеСтроки   = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	// rarus agar 11.03.2022 18869 ++
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный") Тогда
		ОсновнаяСтавкаНДС = ПредопределенноеЗначение("Справочник.Scan_СтавкиНДС.ОсновнаяСтавкаНДС");
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро") Тогда
		ОсновнаяСтавкаНДС = ПредопределенноеЗначение("Справочник.Scan_СтавкиНДС.БезНДС");
	КонецЕсли;
	// rarus agar 11.03.2022 18869 --
	
	ВыборкаСтрокиЗапросаВЗаказе = СтрокиЗапросаВЗаказе.Выбрать();
	Для Каждого СтрокаПродуктаКЗаказу Из Объект.ПродуктыКЗаказу Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаПродуктаКЗаказу.ИдентификаторСтрокиЗапроса);
		Если ВыборкаСтрокиЗапросаВЗаказе.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаИзменена = Ложь;
			
			Если СтрокаПродуктаКЗаказу.ПродуктЗапросаНаНадстройку <> ВыборкаСтрокиЗапросаВЗаказе.ТоварУслуга Тогда
				СтрокаПродуктаКЗаказу.ПродуктЗапросаНаНадстройку = ВыборкаСтрокиЗапросаВЗаказе.ТоварУслуга;
				СтрокаИзменена = Истина;
			КонецЕсли;
			
			Если СтрокаПродуктаКЗаказу.МаркаПродуктаЗапросаНаНадстройки <> ВыборкаСтрокиЗапросаВЗаказе.МаркаПродукта Тогда
				СтрокаПродуктаКЗаказу.МаркаПродуктаЗапросаНаНадстройки = ВыборкаСтрокиЗапросаВЗаказе.МаркаПродукта;
				СтрокаИзменена = Истина;
			КонецЕсли;
			
			Если СтрокаПродуктаКЗаказу.Количество <> ВыборкаСтрокиЗапросаВЗаказе.Количество Тогда
				СтрокаПродуктаКЗаказу.Количество = ВыборкаСтрокиЗапросаВЗаказе.Количество;
				СтрокаИзменена = Истина;
			КонецЕсли;
			
			Если СтрокаПродуктаКЗаказу.Цена <> ВыборкаСтрокиЗапросаВЗаказе.Цена Тогда
				СтрокаПродуктаКЗаказу.Цена = ВыборкаСтрокиЗапросаВЗаказе.Цена;
				СтрокаИзменена = Истина;
			КонецЕсли;
			
			СуммаСтроки = ВыборкаСтрокиЗапросаВЗаказе.Количество * ВыборкаСтрокиЗапросаВЗаказе.Цена;
			Если СтрокаПродуктаКЗаказу.Сумма <> СуммаСтроки Тогда
				СтрокаПродуктаКЗаказу.Сумма = СуммаСтроки;
				СтрокаИзменена = Истина;
			КонецЕсли;
			
			Если СтрокаПродуктаКЗаказу.Валюта <> ВыборкаСтрокиЗапросаВЗаказе.Валюта Тогда
				СтрокаПродуктаКЗаказу.Валюта = ВыборкаСтрокиЗапросаВЗаказе.Валюта;
				СтрокаИзменена = Истина;
			КонецЕсли;
			
			Если СтрокаПродуктаКЗаказу.СтавкаНДС <> ОсновнаяСтавкаНДС Тогда
				СтрокаПродуктаКЗаказу.СтавкаНДС = ОсновнаяСтавкаНДС;
				СтрокаИзменена = Истина;
			КонецЕсли;
			
			Если СтрокаПродуктаКЗаказу.НомераЗаказов <> ВыборкаСтрокиЗапросаВЗаказе.НомераЗаказов Тогда
				СтрокаПродуктаКЗаказу.НомераЗаказов = ВыборкаСтрокиЗапросаВЗаказе.НомераЗаказов;
				СтрокаИзменена = Истина;
			КонецЕсли;
			
			Если СтрокаИзменена Тогда
				СтрокаПродуктаКЗаказу.ДатаПоставки = Неопределено;
				ИзмененныеСтроки.Добавить(СтрокаПродуктаКЗаказу.НомерСтроки);
			КонецЕсли;
		Иначе
			УдаленныеСтроки.Добавить(СтрокаПродуктаКЗаказу.НомерСтроки);
		КонецЕсли;
		
		ВыборкаСтрокиЗапросаВЗаказе.Сбросить();
	КонецЦикла;
	
	ВыборкаСтрокиЗапросаНеВЗаказе = СтрокиЗапросаНеВЗаказе.Выбрать();
	Пока ВыборкаСтрокиЗапросаНеВЗаказе.Следующий() Цикл
		НоваяСтрокаПродуктаКЗаказу = Объект.ПродуктыКЗаказу.Добавить();
		НоваяСтрокаПродуктаКЗаказу.ПродуктЗапросаНаНадстройку       = ВыборкаСтрокиЗапросаНеВЗаказе.ТоварУслуга;
		НоваяСтрокаПродуктаКЗаказу.МаркаПродуктаЗапросаНаНадстройки = ВыборкаСтрокиЗапросаНеВЗаказе.МаркаПродукта;
		НоваяСтрокаПродуктаКЗаказу.Количество                       = ВыборкаСтрокиЗапросаНеВЗаказе.Количество;
		НоваяСтрокаПродуктаКЗаказу.Цена                             = ВыборкаСтрокиЗапросаНеВЗаказе.Цена;
		НоваяСтрокаПродуктаКЗаказу.Сумма                            = ВыборкаСтрокиЗапросаНеВЗаказе.Количество * ВыборкаСтрокиЗапросаНеВЗаказе.Цена;
		НоваяСтрокаПродуктаКЗаказу.СтавкаНДС                        = ОсновнаяСтавкаНДС;
		НоваяСтрокаПродуктаКЗаказу.Валюта                           = ВыборкаСтрокиЗапросаНеВЗаказе.Валюта;
		НоваяСтрокаПродуктаКЗаказу.НомераЗаказов                    = ВыборкаСтрокиЗапросаНеВЗаказе.НомераЗаказов;
		НоваяСтрокаПродуктаКЗаказу.ИдентификаторСтрокиЗапроса       = ВыборкаСтрокиЗапросаНеВЗаказе.ИдентификаторСтроки;
		
		ДобавленныеСтроки.Добавить(НоваяСтрокаПродуктаКЗаказу.НомерСтроки);
	КонецЦикла;
	
	Если ИзмененныеСтроки.Количество() > 0 Тогда
		ВывестиСообщениеПол(НСтр("ru = 'Обновлены строки №№: %1.'"),,,,, СтрСоединить(ИзмененныеСтроки, ","));
	КонецЕсли;
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ВывестиСообщениеПол(НСтр("ru = 'Добавлены строки №№: %1.'"),,,,, СтрСоединить(ДобавленныеСтроки, ","));
	КонецЕсли;
	
	Если УдаленныеСтроки.Количество() > 0 Тогда
		ВывестиСообщениеПол(НСтр("ru = 'Не найдены строки №№: %1.'"),,,,, СтрСоединить(УдаленныеСтроки, ","));
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 01.04.2021 17545 --

//rarus vikhle 15.04.2021 mt 17484 +++
&НаКлиенте
Процедура ПоставщикКомпанияОбработкаВыбораПродолжение(Результат, ВыбраннаяКомпания) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПоставщикКомпания = ВыбраннаяКомпания;
	Иначе
		Объект.ПоставщикКомпания = Неопределено;	
	КонецЕсли;
	
	 ПоставщикКомпанияПриИзменении(Элементы.ПоставщикКомпания);
	
КонецПроцедуры
//rarus vikhle 15.04.2021 mt 17484 ---

&НаСервере
Функция ПолучитьПрицепыЗаказа() // Rarus tenkam 21.10.2021 mantis 17822 +++
	МассивПрицепов = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ПродуктыКЗаказу Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Продукт) Тогда
			ГруппаИзделийOFMS = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Продукт, "ГруппаИзделийOFMS");
			Если ГруппаИзделийOFMS = ПредопределенноеЗначение("Перечисление.Scan_ГруппыИзделийOFMS.ПрицепнаяТехника") Тогда
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Продукт", ТекСтрока.Продукт);
				СтруктураДанных.Вставить("Цена", ТекСтрока.Цена);
				СтруктураДанных.Вставить("СтавкаНДС", ТекСтрока.СтавкаНДС);
				СтруктураДанных.Вставить("Валюта", ТекСтрока.Валюта);
				СтруктураДанных.Вставить("ЗаказНаЗавод", ТекСтрока.ЗаказНаЗавод);
				СтруктураДанных.Вставить("НомераЗаказов", ТекСтрока.НомераЗаказов);
				
				МассивПрицепов.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивПрицепов;
КонецФункции // Rarus tenkam 21.10.2021 mantis 17822 ---

&НаКлиенте
Процедура ДобавитьПрицепыЗавершение(ЗначениеВозвращаемыхДанных, ДополнительныеПараметры) Экспорт // Rarus tenkam 21.10.2021 mantis 17822 +++
	Если ЗначениеВозвращаемыхДанных = Неопределено ИЛИ
		ЗначениеВозвращаемыхДанных = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеВозвращаемыхДанных.МассивПрицепов.Количество() <> 0 Тогда
		ТекПродуктЗапросаНаНадстройку = "";
		ТекМаркаПродуктаЗапросаНаНадстройки = ПредопределенноеЗначение("Справочник.Scan_МаркиПродуктов.ПустаяСсылка");
		ТекДатаПоставки = Дата('00010101');
		ТекКомментарийДляПоставщика = "";
		ТекКомментарийВнутренний = "";
		ТекИдентификаторСтрокиЗапроса = "";
		
		// Удалим активизированную строку
		Если Элементы.ПродуктыКЗаказу.ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные = Элементы.ПродуктыКЗаказу.ТекущиеДанные; 		
			Если ТекущиеДанные.Продукт.Пустая() Тогда
				
				ТекПродуктЗапросаНаНадстройку = ТекущиеДанные.ПродуктЗапросаНаНадстройку;
				ТекМаркаПродуктаЗапросаНаНадстройки = ТекущиеДанные.МаркаПродуктаЗапросаНаНадстройки;
				ТекДатаПоставки = ТекущиеДанные.ДатаПоставки;
				ТекКомментарийДляПоставщика = ТекущиеДанные.КомментарийДляПоставщика;
				ТекКомментарийВнутренний = ТекущиеДанные.КомментарийВнутренний;
				ТекИдентификаторСтрокиЗапроса = ТекущиеДанные.ИдентификаторСтрокиЗапроса; 
				
				Объект.ПродуктыКЗаказу.Удалить(ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
		
		// Добавим прицепы
		Для Каждого ТекСтрока Из ЗначениеВозвращаемыхДанных.МассивПрицепов Цикл    			
			ПараметрыОтбора = Новый Структура("Продукт", ТекСтрока.Продукт);
			Если Объект.ПродуктыКЗаказу.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.ПродуктыКЗаказу.Добавить();
				НоваяСтрока.Продукт = ТекСтрока.Продукт;
				НоваяСтрока.Количество = 1;
				НоваяСтрока.Цена = ТекСтрока.Цена;
				НоваяСтрока.Сумма = ТекСтрока.Цена;
				НоваяСтрока.СтавкаНДС = ТекСтрока.СтавкаНДС;
				НоваяСтрока.Валюта = ТекСтрока.Валюта;
				НоваяСтрока.ЗаказНаЗавод = ТекСтрока.ЗаказНаЗавод;
				НоваяСтрока.НомераЗаказов = ТекСтрока.НомераЗаказов;
				
				НоваяСтрока.ПродуктЗапросаНаНадстройку = ТекПродуктЗапросаНаНадстройку;
				НоваяСтрока.МаркаПродуктаЗапросаНаНадстройки = ТекМаркаПродуктаЗапросаНаНадстройки;
				НоваяСтрока.ДатаПоставки = ТекДатаПоставки;
				НоваяСтрока.КомментарийДляПоставщика = ТекКомментарийДляПоставщика;
				НоваяСтрока.КомментарийВнутренний = ТекКомментарийВнутренний;
				НоваяСтрока.ИдентификаторСтрокиЗапроса = ТекИдентификаторСтрокиЗапроса;
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;  
	
	ЭтаФорма.Модифицированность	= Истина;
КонецПроцедуры // Rarus tenkam 21.10.2021 mantis 17822 +++


#КонецОбласти