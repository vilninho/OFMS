#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);                
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ХозОперации нельзя выбрать, т.к. ++
	//Scan_ВспомогательныеФункцииСервер.ИнициализироватьМенюВыбораХозОперации(ЭтаФорма);

		
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Параметры документа ++
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь() ;
		Объект.Организация = ТекущийПользователь.Организация;
		Объект.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
		Объект.Автор = ТекущийПользователь;
		Объект.Менеджер = ТекущийПользователь;
		Объект.Дата = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
		Если не ЗначениеЗаполнено(Объект.ГодПланирования) Тогда
			Объект.ГодПланирования = Год(ТекущаяДатаСеанса()); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()	
		КонецЕсли;
		//rarus vikhle 22.04.2020 mt 15695 +++	
		Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекущийПользователь,Объект.Компания,Объект.Контрагент);
		//rarus vikhle 22.04.2020 mt 15695 ---
		Объект.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
			// Параметры документа --
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();	
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Scan_ВспомогательныеФункцииКлиент.ПроверитьПользователяПортала();//rarus vikhle 07.05.2020 mt 15695
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ = Отказ или Документы.Scan_УстановкаПланаПоOrderIntake.ЕстьВведенныеЗаГодДокументы(ТекущийОбъект);
	
	Отказ = Отказ или Документы.Scan_УстановкаПланаПоOrderIntake.ЕстьОшибкиЗаполнения(ТекущийОбъект); 	
	
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если НЕ Отказ Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
		КонецЕсли;  		
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
	
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ХозОперации ++
#Область ХозОперации
// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Хоз. операция" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Документы.Scan_УстановкаПланаПоOrderIntake.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();	
КонецПроцедуры // ХозОперацияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)                                                                                         
	// Вызываем общий обработчик события выбора одного из пунктов меню доступных хоз. операций
	Scan_УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;                     
	
	// Обработаем событие в контексте сервера
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбновитьЗаголовокФормы();
	УправлениеДиалогомНаСервере();
КонецПроцедуры // ХозОперацияПриИзменении()

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = Строка(Объект.Ссылка) + ". (" + Строка(Объект.ХозОперация)+ ")";
	Иначе
		Заголовок = Строка(Объект.ХозОперация) + " (создание)";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
// ХозОперации --

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	УправлениеДиалогомНаСервере();	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);	
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект, ПараметрыДействия_НастроитьПараметрыДокумента());
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	Если Команда.Имя="НастроитьПараметрыДокумента" Тогда
		ПараметрыДействия = ПараметрыДействия_НастроитьПараметрыДокумента();
	иначе
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	УправлениеДиалогомНаСервере();
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

#КонецОбласти

#Область ВспомогательныеФункции


&НаСервере
Процедура УправлениеДиалогомНаСервере()
	Если Объект.Ссылка.Проведен Тогда
		Элементы.ГруппаФон.ТолькоПросмотр = истина;
	КонецЕсли; 
	ИндексЗаблокированногоМесяца = Месяц(?(значениезаполнено(Объект.Дата),Объект.Дата, ТекущаяДатаСеанса()));
	Для ИндексМесяца = 1 по 12  Цикл
		ЭтаФорма.Элементы["ГруппаМесяц"+ ИндексМесяца].ТОлькопросмотр = ложь;
	КонецЦикла;
	Если Объект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.КорректировкаПланаПоOI Тогда
		
		Если ИндексЗаблокированногоМесяца > 1 Тогда //для января блокировка не нужна
			Для ИндексМесяца = 1 по ИндексЗаблокированногоМесяца - 1  Цикл
				ЭтаФорма.Элементы["ГруппаМесяц"+ ИндексМесяца].ТОлькопросмотр  = истина;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	Если Объект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.КорректировкаПланаПоOI Тогда
		Элементы.ГодПланирования.ТолькоПросмотр = истина;	
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Функция ПараметрыДействия_НастроитьПараметрыДокумента()
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ЗапретитьИзменение_ВалютаДокумента", Истина);
	Возврат ПараметрыДействия;
КонецФункции

#КонецОбласти



&НаСервере
Процедура РаспределитьПоМесяцамНаСервере()
	
	// необходимо очистить прошлое распределение
	Месяцы = Документы.Scan_УстановкаПланаПоOrderIntake.ПолучитьМассивПоказателей();
		
	Если Объект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.УстановкаПланаПоOI Тогда
		КоличествоМесяцевРаспределения = 12;
	Иначе
		КоличествоМесяцевРаспределения = 13 - Месяц(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Для ИндексМесяца = 12 - КоличествоМесяцевРаспределения по 11 Цикл
		Объект[Месяцы[ИндексМесяца]] = 0;	
	КонецЦикла;

	
	Если не Объект.ИтогоЗаГод = 0 Тогда
		ЗаблокированнаяСумма = 0;
		Если КоличествоМесяцевРаспределения < 12 Тогда
			// Определить фиксированную сумму заблокироавнных месяцев
			Для индексМесяца = 0 по 11 - КоличествоМесяцевРаспределения Цикл
				ЗаблокированнаяСумма = ЗаблокированнаяСумма + Объект[Месяцы[ИндексМесяца]];
			КонецЦикла;
		КонецЕсли;
		КоличествоНаМесяц = цел((Объект.ИтогоЗаГод - ЗаблокированнаяСумма)/ КоличествоМесяцевРаспределения);
		НераспределенныйОстаток = (Объект.ИтогоЗаГод - ЗаблокированнаяСумма) % КоличествоМесяцевРаспределения;
		
		// Может оказаться один из вариантов:
		// 1. На все месяцы не хватает целых показателей - распределить по 1 до тех пор пока хватает 
		// 2. На все месяцы хватает, делится кратно количеству месяцев, распределить поровну.
		// 3. На все месяцы хватает, не делится кратно. Распределить полностью по целому остатку, остальное по очереди дораспределить на нужные месяцы.
		Если КоличествоНаМесяц <= 1 и НераспределенныйОстаток = 0 Тогда
			// вариант 1
			Для ИндексМесяца = 12 - КоличествоМесяцевРаспределения по 11 - КоличествоМесяцевРаспределения + Объект.ИтогоЗаГод - ЗаблокированнаяСумма Цикл
				Объект[Месяцы[ИндексМесяца]] = 1;
			КонецЦикла;
		ИначеЕсли НераспределенныйОстаток = 0 Тогда
			// вариант 2
			Для ИндексМесяца = 12 - КоличествоМесяцевРаспределения по 11 Цикл
				Объект[Месяцы[ИндексМесяца]] = КоличествоНаМесяц;
			КонецЦикла;
		Иначе
			// вариант 3
			Для ИндексМесяца = 12 - КоличествоМесяцевРаспределения по 11 Цикл
				Объект[Месяцы[ИндексМесяца]] = КоличествоНаМесяц;
			КонецЦикла;
			Для ИндексМесяца = 12 - КоличествоМесяцевРаспределения по 11 - КоличествоМесяцевРаспределения + НераспределенныйОстаток Цикл
				Объект[Месяцы[ИндексМесяца]] = Объект[Месяцы[ИндексМесяца]]+1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоМесяцам(Команда)
	РаспределитьПоМесяцамНаСервере();
КонецПроцедуры

процедура ПоказателиПриИзмененииНаСервере()
	
	Документы.Scan_УстановкаПланаПоOrderIntake.ПересчитатьИтоговыйПоказатель(Объект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательМесяц1ПриИзменении(Элемент)
	ПоказателиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГодПланированияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Объект.ГодПланирования<2000 Тогда
		ВывестиСообщениеПол(Нстр("ru = 'Некорректно указан год'; en = 'Incorrect year'"),Объект,"ГодПланирования");
		Объект.ГодПланирования = Год(ТекущаяДата());
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьЗаголовокФормы();
	УправлениеДиалогомНаСервере();
КонецПроцедуры






