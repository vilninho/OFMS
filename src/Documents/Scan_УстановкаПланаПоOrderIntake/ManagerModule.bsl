////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ИЗМЕНЕНИЯ ДАННЫХ ОБЪЕКТА

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ИЗМЕНЕНИЯ ДАННЫХ РЕКВИЗИТОВ ШАПКИ

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ГодПланирования");
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	  	
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	
	
КонецФункции

#КонецОбласти
#КонецЕсли


// Производит проверку наличия уже введенных документов за этот же год.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//    
Функция ЕстьВведенныеЗаГодДокументы(Объект) экспорт
	ЕстьОшибки = ложь;
	
	Если не Объект.Хозоперация = Справочники.Scan_ХозяйственныеОперации.КорректировкаПланаПоOI Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_УстановкаПланаПоOrderIntake.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Scan_УстановкаПланаПоOrderIntake КАК Scan_УстановкаПланаПоOrderIntake
			|ГДЕ
			|	Scan_УстановкаПланаПоOrderIntake.ГодПланирования = &ГодПланирования
			|	И НЕ Scan_УстановкаПланаПоOrderIntake.Ссылка = &Ссылка
			|	И Scan_УстановкаПланаПоOrderIntake.ПометкаУдаления = ЛОЖЬ
			|	И Scan_УстановкаПланаПоOrderIntake.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.УстановкаПланаПоOI)";
		
		Запрос.УстановитьПараметр("ГодПланирования", Объект.ГодПланирования);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если не РезультатЗапроса.Пустой() Тогда
			ВывестиСообщениеПол(НСТР("ru = 'На %1 год уже введен документ ""Установка плана Order Intake""'; en = 'At %1 year, the document ""Order Plan Intake Plan Installation"" has already been introduced'"),
			Объект, "ГодПланирования",,,СТРЗаменить(Строка(Объект.ГодПланирования),Символы.НПП,""));
			ЕстьОшибки =  истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ЕстьОшибки;
	
КонецФункции

// Производит проверку документа на наличие ошибок.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  
Функция ЕстьОшибкиЗаполнения(Объект) экспорт
	
	ЕстьОшибки = ложь;
	МассивМесяцев  =ПолучитьМассивПоказателей();
	
	СуммаРасчетная = 0; 
	
		
	Для ИндексМесяца = 0 по 11 Цикл
		СуммаРасчетная = СуммаРасчетная + Объект[МассивМесяцев[ИндексМесяца]];
	КонецЦикла;
					
	Если Объект.ИтогоЗаГод <> СуммаРасчетная ТОгда
		ВывестиСообщениеПол(НСТР("ru = 'Помесячная сумма планов отличается от общей суммы'; en = 'The monthly amount of plans differs from the total amount'"),
		Объект, "ИтогоЗаГод");
		ЕстьОшибки = истина;
	КонецЕсли;

	Возврат ЕстьОшибки;
	
	
КонецФункции

// Производит пересчет итогового показателя документа.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  
Процедура ПересчитатьИтоговыйПоказатель(Объект) экспорт

	СуммаРасчетная = 0; 
	МассивМесяцев  = ПолучитьМассивПоказателей();
	
	Для ИндексМесяца = 0 по 11 Цикл
		СуммаРасчетная = СуммаРасчетная + Объект[МассивМесяцев[ИндексМесяца]];
	КонецЦикла;	
	
	Объект.ИтогоЗаГод = СуммаРасчетная;
	
КонецПроцедуры

// Служебная функция, производит получение массива месяцев для обращения к документу.
//
Функция ПолучитьМассивПоказателей() экспорт
	
	МассивМесяцев = новый Массив;
	МассивМесяцев.Добавить("Январь");
	МассивМесяцев.Добавить("Февраль");
	МассивМесяцев.Добавить("март");
	МассивМесяцев.Добавить("Апрель");
	МассивМесяцев.Добавить("Май");
	МассивМесяцев.Добавить("Июнь");
	МассивМесяцев.Добавить("Июль");
	МассивМесяцев.Добавить("Август");
	МассивМесяцев.Добавить("Сентябрь");
	МассивМесяцев.Добавить("Октябрь");
	МассивМесяцев.Добавить("Ноябрь");
	МассивМесяцев.Добавить("Декабрь");
	
	возврат МассивМесяцев;
КонецФункции