
#Область ОбработчикиСобытийФормы

//rarus vikhle 16.11.2021 m 18340 +++

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если Не Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Scan_ВспомогательныеФункцииСервер.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Если Объект.ЦеныНаАренду.Количество() > 0 Тогда
			ЗаполнитьЦеныНаАрендуНаСервере(Истина);
		КонецЕсли;	
						
	Иначе
		
		ЗаполнитьПараметрыДокумента();
		
		Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.StdПрайсЛистНаАренду") Тогда
			Объект.ТекстПФУсловияАренды = Scan_ПраваИНастройки.Scan_Право("ТекстПФУсловияАренды");
		КонецЕсли;	
		
		Если НЕ Параметры.ЗначениеКопирования.Пустая() И Объект.ЦеныНаАренду.Количество() > 0 Тогда
			ЗаполнитьЦеныНаАрендуНаСервере(Истина);	
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеДиалогом();
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	ОбновитьЗаголовокФормы(); // rarus vikhle 20.12.2021 m 18340
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ЦеныНаАренду.Количество() = 0 Тогда
		Отказ = Истина;
		ВывестиСообщениеПол(Нстр("ru = 'Не заполнена таблица ""Цены на аренду""'"),, "ЦеныНаАренду");
	КонецЕсли;	
		
	Для Каждого СтрокаТЧ Из Объект.ЦеныНаАренду Цикл
		
		Если СтрокаТЧ.Цена = 0 Тогда
			Отказ	= Истина;
			Поле 	= ""; 
			
			СтруктураОтбора = Новый Структура("СрокОт, СрокДо", СтрокаТЧ.СрокОт, СтрокаТЧ.СрокДо);
			СтрокиКолонки = ДанныеКолонокЦен.НайтиСтроки(СтруктураОтбора);
			Если СтрокиКолонки.Количество() > 0 Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ПробегОт", СтрокаТЧ.ПробегОт);
				СтруктураОтбора.Вставить("ПробегДо", СтрокаТЧ.ПробегДо);
								
				СтрокиКроссТаблицы = ЦеныНаАренду.НайтиСтроки(СтруктураОтбора);
				Если СтрокиКроссТаблицы.Количество() > 0 Тогда
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеныНаАренду", 
																			ЦеныНаАренду.Индекс(СтрокиКроссТаблицы[0]) + 1, 
																			СтрокиКолонки[0].ИмяРеквизитаЦена); 
				КонецЕсли;	
					
			КонецЕсли;	
			
			ВывестиСообщениеПол(Нстр("ru = 'Не заполнена цена для пробега %1-%2 км сроком %3-%4'"),, 
								Поле,,, 
								СтрокаТЧ.ПробегОт,
								СтрокаТЧ.ПробегДо,
								СтрокаТЧ.СрокОт,
								СтрокаТЧ.СрокДо);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеДиалогом();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьЗаголовокФормы(); // rarus vikhle 20.12.2021 m 18340	
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
 КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШкалаПробегаАренды

//// rarus vikhle 20.12.2021 m 18340 +++
//&НаКлиенте
//Процедура ШкалаПробегаАрендыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//
	////ТекущиеДанные = Элемент.ТекущиеДанные;
	////Если НоваяСтрока Тогда 
	////	ТекущиеДанные.ПорядокОтображения = ТекущиеДанные.НомерСтроки;
	////КонецЕсли;	
	//
//КонецПроцедуры
//// rarus vikhle 20.12.2021 m 18340 ---

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШкалаСрокаАренды

//// rarus vikhle 20.12.2021 m 18340 +++
//&НаКлиенте
//Процедура ШкалаСрокаАрендыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
//	// rarus vikhle 20.12.2021 m 18340
//	//ТекущиеДанные = Элемент.ТекущиеДанные;
//	//Если НоваяСтрока Тогда 
//	//	ТекущиеДанные.ПорядокОтображения = ТекущиеДанные.НомерСтроки;
//	//КонецЕсли;
//	// rarus vikhle 20.12.2021 m 18340
//КонецПроцедуры
//// rarus vikhle 20.12.2021 m 18340 ---

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЦеныНаАренду

&НаКлиенте
Процедура Подключаемый_ЦеныНаАрендуЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЦеныНаАренду.ТекущиеДанные;
		
	СтруктураОтбора = Новый Структура("ИмяЭлемента", Элемент.Имя);
	СтрокиЭлемента	= ДанныеКолонокЦен.НайтиСтроки(СтруктураОтбора);
	Если СтрокиЭлемента.Количество() > 0 Тогда
		ДанныеКолонки = СтрокиЭлемента[0];
	Иначе
		ВывестиСообщениеПол(Нстр("ru = 'Цена не была обновлена в табличной части ""Цена на аренду"". Не найдена строка с текущей колонкой в служебной таблице ""ДанныеКолонокЦен"" '"));
		Возврат;
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура("СрокОт, СрокДо, ПробегОт, ПробегДо");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	СтруктураОтбора.Вставить("СрокОт", ДанныеКолонки.СрокОт);
	СтруктураОтбора.Вставить("СрокДо", ДанныеКолонки.СрокДо);
	
	СтрокиТЧ = Объект.ЦеныНаАренду.НайтиСтроки(СтруктураОтбора);
	Если СтрокиТЧ.Количество() > 0 Тогда
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СтрокаТЧ.Цена = ТекущиеДанные[ДанныеКолонки.ИмяРеквизитаЦена];	
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	Scan_УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.StdПрайсЛистНаАренду") Тогда
		
		Объект.Продукт			= Неопределено;
		Объект.КонечныйКлиент	= Неопределено;
					
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.UOПрайсЛистНаАренду") Тогда 
		
		Объект.Модель				= Неопределено;
		Объект.ТекстПФУсловияАренды = "";
		
	КонецЕсли;
	
	ОбновитьЗаголовокФормы(); // rarus vikhle 20.12.2021 m 18340
	
	УправлениеДиалогом();	
	
	Если Объект.ТекстПФУсловияАренды = "" 
		И Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.StdПрайсЛистНаАренду") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаполненияТекстаПФ", ЭтотОбъект);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаЗаполненияТекстаПФ", ЭтотОбъект), Нстр("ru = 'Заполнить текст ПФ Условия аренды по умолчанию?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧЦеныНаАренду(Команда)
	
	ЗаполнитьЦеныНаАрендуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПрайсЛистуАренды(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПрайсЛиста", ЭтотОбъект);
	ОткрытьФорму("Документ.Scan_ПрайсЛистАренда.ФормаВыбора",,,,,,ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиШкалы(Команда)
	
	Если НЕ СтруктураТаблицСовпадает() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбновленияШкалы", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
						Нстр("ru = 'Структура таблиц отличается, при обновлении показателей шкалы цены будут очищены, продолжить?'"),
						РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбновитьПоказателиШкалыНаСервере();					
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЦеныНаАренду(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОчисткиЦен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, 
					Нстр("ru = 'Таблица ""Цены на аренду"" будет очищена, продолжить?'"),
					РежимДиалогаВопрос.ДаНет);
					
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ТЧ ШкалаПробегаАренды 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШкалаПробегаАрендыПробегОт.Имя);

	ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ШкалаПробегаАренды.ПробегОт");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ШкалаПробегаАренды.ПробегДо");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	// ТЧ ШкалаСрокаАренды 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШкалаСрокаАрендыСрокОт.Имя);

	ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ШкалаСрокаАренды.СрокОт");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ШкалаСрокаАренды.СрокДо");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
КонецПроцедуры	

&НаСервере
Процедура УправлениеДиалогом()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Для Каждого Элемент Из Элементы.ВыборХозОперации.ПодчиненныеЭлементы Цикл
			Элемент.Доступность = Ложь;
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.StdПрайсЛистНаАренду") Тогда
		
		Элементы.Продукт.Видимость				= Ложь;
		Элементы.КонечныйКлиент.Видимость		= Ложь;
		
		Элементы.СтраницаНастройкиПФ.Видимость	= Истина;
		Элементы.Модель.Видимость				= Истина;
		
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.UOПрайсЛистНаАренду") Тогда 
		
		Элементы.Модель.Видимость				= Ложь;
		Элементы.СтраницаНастройкиПФ.Видимость	= Ложь;
		
		Элементы.Продукт.Видимость				= Истина;
		Элементы.КонечныйКлиент.Видимость		= Истина;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПараметрыДокумента()
	
	ТекущийПользователь 	= Пользователи.ТекущийПользователь();
	КодРубля				= 643;
	РеквизитыПользователя	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийПользователь, "Организация, ПодразделениеОрганизации");
	
	Объект.Автор                 = ТекущийПользователь;
	Объект.ВалютаДокумента       = Справочники.Валюты.НайтиПоКоду(КодРубля);
	Объект.ДатаСоздания          = ТекущаяДатаСеанса();
	Объект.Дата                  = ТекущаяДатаСеанса();
	Объект.Менеджер              = ТекущийПользователь;
	Объект.Организация           = РеквизитыПользователя.Организация;
	Объект.ПодразделениеКомпании = РеквизитыПользователя.ПодразделениеОрганизации;
	
	Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекущийПользователь,Объект.Компания,Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполненияТекстаПФ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ТекстПФУсловияАренды = Scan_ПраваИНастройки.Scan_Право("ТекстПФУсловияАренды");
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныНаАрендуНаСервере(НачальноеЗаполнение = Ложь)
	
	ДокументОбъект			= РеквизитФормыВЗначение("Объект");
	РеквизитыТаблицыЦен		= ПолучитьРеквизиты("ЦеныНаАренду");
	УдаляемыеРеквизиты		= РеквизитыКУдалению(РеквизитыТаблицыЦен);
	ДобавляемыеРеквизиты	= Новый Массив;
		
	Если НЕ ДокументОбъект.ТЧШкалКорректны() Тогда
		ВывестиСообщениеПол(Нстр("ru = 'Табличные части шкал некорректно заполнены, кросс-таблица ""Цены на аренду"" не была заполнена.'"));
		Возврат;
	КонецЕсли;	
	
	// Начальное заполнение
	Если НачальноеЗаполнение Тогда
		
		МассивРезультатовКомбинаций = Документы.Scan_ПрайсЛистАренда.КомбинацииШкал(ДокументОбъект);
		
		РезультатНекорректныхДанных = МассивРезультатовКомбинаций[7];
		ТаблицыКорректны			= РезультатНекорректныхДанных.Пустой();
		Если НЕ ТаблицыКорректны Тогда
			ВывестиСообщениеПол(Нстр("ru = 'Данные табличных частей не совпадают. Кросс-таблица ""Цены на аренду"" не была заполнена. Необходимо скорректировать табличные части, перезаполнить показатели шкалы или перезаполнить табличную часть ""Цены на аренду""'"));
			Возврат;
		КонецЕсли;	
		
		КомбинацииПробегов	= МассивРезультатовКомбинаций[8].Выгрузить();
		КомбинацииСроков	= МассивРезультатовКомбинаций[9].Выгрузить();
		
		ЦеныНаАренду.Очистить();
		ДанныеКолонокЦен.Очистить();
		УдалитьДобавленныеКолонки();
		
		// Добавление колонок и реквизитов со сроками в таблицу "ЦеныНаАренду"
		ДобавитьКолонкиВТаблицуЦен(КомбинацииСроков, ДобавляемыеРеквизиты);
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
		
		ЗаполнитьПутиКДанным();
		
		// Заполнение таблицы "ЦеныНаАренду"
		Для Каждого СтрокаПробега Из КомбинацииПробегов Цикл
			
			НоваяСтрока = ЦеныНаАренду.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПробега);
			
			Для Каждого Элемент Из Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы Цикл
				ОтборЦеныНаАренду		= Новый Структура("СрокОт, СрокДо, ПробегОт, ПробегДо");
				ОтборДанныеКолонокЦен	= Новый Структура("ИмяЭлемента", Элемент.Имя);
				// Определяем по таблице ДанныеКолонокЦен какой реквизит соответсвует тек. колонке и заполняем цену
				СтрокиЭлемента = ДанныеКолонокЦен.НайтиСтроки(ОтборДанныеКолонокЦен);
				Если СтрокиЭлемента.Количество() = 1 Тогда
					СтрокаЭлемента =  СтрокиЭлемента[0]; 
					
					ЗаполнитьЗначенияСвойств(ОтборЦеныНаАренду, СтрокаЭлемента);
					ЗаполнитьЗначенияСвойств(ОтборЦеныНаАренду, НоваяСтрока); 
					
					СтрокиТЧ = Объект.ЦеныНаАренду.НайтиСтроки(ОтборЦеныНаАренду);
					Если СтрокиТЧ.Количество() = 1 Тогда
						ИмяРеквизитаЦена				= СтрокаЭлемента.ИмяРеквизитаЦена; 
						НоваяСтрока[ИмяРеквизитаЦена]	= СтрокиТЧ[0].Цена;
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;
				
		Возврат;
	КонецЕсли;	
	
	// Заполнение по команде
	ЦеныНаАренду.Очистить();
	Объект.ЦеныНаАренду.Очистить();
	ДанныеКолонокЦен.Очистить();
	
	УдалитьДобавленныеКолонки();
	
	// Добавление колонок и реквизитов со сроками в таблицу "ЦеныНаАренду"
	//ДокументОбъект.ШкалаСрокаАренды.Сортировать("ПорядокОтображения"); // rarus vikhle 20.12.2021 m 18340
	ДобавитьКолонкиВТаблицуЦен(ДокументОбъект.ШкалаСрокаАренды, ДобавляемыеРеквизиты);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	ЗаполнитьПутиКДанным();	
	
	// Заполнение таблицы "ЦеныНаАренду"
	//ДокументОбъект.ШкалаПробегаАренды.Сортировать("ПорядокОтображения"); // rarus vikhle 20.12.2021 m 18340
	
	Для Каждого Строка Из ДокументОбъект.ШкалаПробегаАренды Цикл
		
		ЗаполнитьЗначенияСвойств(ЦеныНаАренду.Добавить(), Строка);
		
		Для Каждого СтрокаШкалы Из Объект.ШкалаСрокаАренды Цикл
			НоваяСтрокаТЧ = Объект.ЦеныНаАренду.Добавить();  
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаШкалы);
		КонецЦикла;	
		
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьШкалыПоПрайсЛистуНаСервере(ПрайсЛист)
	
	ДанныеПрайсЛиста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрайсЛист, "ШкалаПробегаАренды, ШкалаСрокаАренды, Представление");
	Объект.ШкалаПробегаАренды.Загрузить(ДанныеПрайсЛиста.ШкалаПробегаАренды.Выгрузить());
	Объект.ШкалаСрокаАренды.Загрузить(ДанныеПрайсЛиста.ШкалаСрокаАренды.Выгрузить());
	ЗаполнитьЦеныНаАрендуНаСервере(Ложь);
	
	ВывестиСообщениеПол(Нстр("ru = 'Табличные части документа были перезаполнены из прайс-листа <%1>'"),,,,, ДанныеПрайсЛиста.Представление); 
	
КонецПроцедуры	

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	ПараметрыДействия = Новый Структура("ДоступностьДаты", Ложь); // Поле Дата должно быть недоступно для редактирования
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Открываем форму расширенного редактирования параметров документа
	ПараметрыДействия = Новый Структура("ДоступностьДаты", Ложь); // Поле Дата должно быть недоступно для редактирования
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) //rarus vikhle 18.01.2022 АПК, убрал Экспорт
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Поле Дата должно быть недоступно для редактирования
	Если Команда.Имя = "НастроитьПараметрыДокумента" Тогда
		ПараметрыДействия.Вставить("ДоступностьДаты", Ложь);
	КонецЕсли;	
	
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПрайсЛиста(ПрайсЛист, ДопПараметры) Экспорт 
	
	Если НЕ ПрайсЛист = Неопределено Тогда
		ЗаполнитьШкалыПоПрайсЛистуНаСервере(ПрайсЛист);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЭтоДобавленныйРеквизит(Реквизит)
	
	Возврат НЕ (Реквизит.Имя = "ПробегОт" ИЛИ Реквизит.Имя = "ПробегДо");
		
КонецФункции	

&НаСервере
Процедура ОбновитьПоказателиШкалыНаСервере()
	
	ДокументОбъект			= РеквизитФормыВЗначение("Объект");
		
	Если НЕ ДокументОбъект.ТЧШкалКорректны() Тогда
		ВывестиСообщениеПол(Нстр("ru = 'Табличные части шкал некорректно заполнены, показатели шкалы кросс-таблицы ""Цены на аренду"" не были обновлены.'"));
		Возврат;
	КонецЕсли;	
	
	// Обновление диапазонов пробегов в кросс-таблице ЦеныНаАренду
	//ДокументОбъект.ШкалаПробегаАренды.Сортировать("ПорядокОтображения"); // rarus vikhle 20.12.2021 m 18340
	Для Сч = 0 По ДокументОбъект.ШкалаПробегаАренды.Количество() - 1 Цикл 
		// Определяем наличие строки с таким же диапазоном пробега как в шкале
		СтруктураОтбора = Новый Структура("ПробегОт, ПробегДо");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ДокументОбъект.ШкалаПробегаАренды[Сч]);	
		СтрокиТЗ = ЦеныНаАренду.НайтиСтроки(СтруктураОтбора);
		// У найденной строки изменяем позицию согласно порядку отображения
		Если СтрокиТЗ.Количество() = 1 Тогда
			НоваяСтрока = ЦеныНаАренду.Вставить(Сч);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиТЗ[0]); 
			ЦеныНаАренду.Удалить(СтрокиТЗ[0]);
			
			Продолжить;
		КонецЕсли;	
		
		// Проверяем, есть ли текущий дипазон в шкале 
		СтруктураОтбораШкалы = Новый Структура("ПробегОт, ПробегДо");
		ЗаполнитьЗначенияСвойств(СтруктураОтбораШкалы, ЦеныНаАренду[Сч]);
		СтрокиШкалы = ДокументОбъект.ШкалаПробегаАренды.НайтиСтроки(СтруктураОтбораШкалы);
		
		Если СтрокиШкалы.Количество() > 0 Тогда
			// Копируем строку, будет перенесена согласно порядку в следующих итерациях
			ЗаполнитьЗначенияСвойств(ЦеныНаАренду.Добавить(), ЦеныНаАренду[Сч]);
		КонецЕсли;	
		
		// Получаем строки ТЧ с текущим диапазоном пробега
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ЦеныНаАренду[Сч]);
		СтарыеСтрокиТЧ = Объект.ЦеныНаАренду.НайтиСтроки(СтруктураОтбора);
		// Изменяем текущую строку
		ЗаполнитьЗначенияСвойств(ЦеныНаАренду[Сч], ДокументОбъект.ШкалаПробегаАренды[Сч]); 
		
		// Устанавливаем новый диапазон пробега в полученных раннее строках ТЧ цен
		Для Каждого СтрокаПробега Из СтарыеСтрокиТЧ Цикл
			ЗаполнитьЗначенияСвойств(СтрокаПробега, ЦеныНаАренду[Сч]); 
		КонецЦикла;
		
	КонецЦикла;	
	
	
	// Обновление диапазонов сроков в кросс-таблице ЦеныНаАренду
	
	// Получаем диапазоны сроков колонок, которых нет в шкале
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШкалаСрока.СрокОт КАК СрокОт,
	               |	ШкалаСрока.СрокДо КАК СрокДо,
				   // rarus vikhle 20.12.2021 m 18340 заменил порядок на номер строки +++
				   |	ШкалаСрока.НомерСтроки КАК НомерСтроки 
				   // rarus vikhle 20.12.2021 m 18340 ---
	               |ПОМЕСТИТЬ ШкалаСрока
	               |ИЗ
	               |	&ШкалаСрока КАК ШкалаСрока
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеКолонок.ИмяЭлемента КАК ИмяЭлемента,
	               |	ДанныеКолонок.СрокОт КАК СрокОт,
	               |	ДанныеКолонок.СрокДо КАК СрокДо
	               |ПОМЕСТИТЬ ДанныеКолонок
	               |ИЗ
	               |	&ДанныеКолонок КАК ДанныеКолонок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеКолонок.ИмяЭлемента КАК ИмяЭлемента,
	               |	ДанныеКолонок.СрокОт КАК СрокОт,
	               |	ДанныеКолонок.СрокДо КАК СрокДо
	               |ИЗ
	               |	ДанныеКолонок КАК ДанныеКолонок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ШкалаСрока КАК ШкалаСрока
	               |		ПО (ШкалаСрока.СрокОт = ДанныеКолонок.СрокОт)
	               |			И (ШкалаСрока.СрокДо = ДанныеКолонок.СрокДо)
	               |ГДЕ
	               |	ШкалаСрока.НомерСтроки ЕСТЬ NULL"; // rarus vikhle 20.12.2021 m 18340
	Запрос.УстановитьПараметр("ШкалаСрока", 	ДокументОбъект.ШкалаСрокаАренды.Выгрузить()); 
	Запрос.УстановитьПараметр("ДанныеКолонок",	РеквизитФормыВЗначение("ДанныеКолонокЦен"));
	НеиспользуемыеСроки = Запрос.Выполнить().Выгрузить();
	
	//ДокументОбъект.ШкалаСрокаАренды.Сортировать("ПорядокОтображения");  // rarus vikhle 20.12.2021 m 18340
	Для Сч = 0 По ДокументОбъект.ШкалаСрокаАренды.Количество() - 1 Цикл 
		
		ТекущаяСтрокаШкалы	= ДокументОбъект.ШкалаСрокаАренды[Сч]; 
		ТекущаяКолонка		= Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы[Сч]; 
		
		// Проверяем наличие колонок с таким же диапазоном сроков как в шкале
		СтруктураОтбора = Новый Структура("СрокОт, СрокДо");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущаяСтрокаШкалы); 
		СтрокиДанныхКолонок = ДанныеКолонокЦен.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиДанныхКолонок.Количество() > 0 Тогда
			
			// При необходимости перемещаем колонку на новую позицию согласно порядку отображения
			Если НЕ Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы[Сч].Имя = СтрокиДанныхКолонок[0].ИмяЭлемента Тогда
				МестоРасположения = Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы[Сч];
				ИмяЭлемента = СтрокиДанныхКолонок[0].ИмяЭлемента; 
				Элементы.Переместить(Элементы[ИмяЭлемента], 
									Элементы.ЦеныНаАрендуГруппаСрокАренды, 
									МестоРасположения);
			КонецЕсли;
			
		Иначе
			// Проверяем, есть ли текущая комбинация пробега колонки в шкале пробега 
			СтруктураОтбора = Новый Структура("ИмяЭлемента", ТекущаяКолонка.Имя);
			СтрокиЭлемента = НеиспользуемыеСроки.НайтиСтроки(СтруктураОтбора);
			Если СтрокиЭлемента.Количество() > 0 Тогда // Диапазон колонки отсутствует в шкале, можно использовать текущую колонку 
				
				// Обновляем заголовок колонки
				ЗаголовокКолонки			= СформироватьЗаголовокКолонки(ТекущаяСтрокаШкалы.СрокОт, ТекущаяСтрокаШкалы.СрокДо);
				ТекущаяКолонка.Заголовок	= ЗаголовокКолонки;
				
				СтарыйСрокОт = СтрокиЭлемента[0].СрокОт;
				СтарыйСрокДо = СтрокиЭлемента[0].СрокДо;
				
				// Обновляем в служебной таблице ДанныеКолонокЦен
				СтрокиДанныхКолонок = ДанныеКолонокЦен.НайтиСтроки(СтруктураОтбора);
				Если СтрокиДанныхКолонок.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокиДанныхКолонок[0], ТекущаяСтрокаШкалы);
				КонецЕсли;	
				
				// Получаем строки ТЧ цен со старым диапазоном сроков
				СтруктураОтбора = Новый Структура("СрокОт, СрокДо", СтарыйСрокОт, СтарыйСрокДо);
				СтрокиТЧ		= Объект.ЦеныНаАренду.НайтиСтроки(СтруктураОтбора);
				// Обновляем диапазон в ТЧ цен
				Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекущаяСтрокаШкалы); 
				КонецЦикла;
				
			ИначеЕсли НеиспользуемыеСроки.Количество() > 0 Тогда
				// Диапазон колонки есть в шкале, используем первую колонку с неиспользуемым диапазоном	
				НеиспользованнаяСтрока 	= НеиспользуемыеСроки[0];
				ИмяЭлемента				= НеиспользуемыеСроки[0].ИмяЭлемента;
				
				// Обновляем заголовок колонки
				ЗаголовокКолонки				= СформироватьЗаголовокКолонки(ТекущаяСтрокаШкалы.СрокОт, ТекущаяСтрокаШкалы.СрокДо);
				Элементы[ИмяЭлемента].Заголовок = ЗаголовокКолонки;
				
				// При необходимости перемещаем колонку на новую позицию согласно порядку отображения
				Если НЕ Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы[Сч].Имя = ИмяЭлемента Тогда
					МестоРасположения = Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы[Сч];
					Элементы.Переместить(Элементы[ИмяЭлемента], 
										Элементы.ЦеныНаАрендуГруппаСрокАренды, 
										МестоРасположения);
				КонецЕсли;						
				
				СтруктураОтбора = Новый Структура("ИмяЭлемента", ИмяЭлемента);
				СтрокиДанныхКолонок = ДанныеКолонокЦен.НайтиСтроки(СтруктураОтбора);
				Если СтрокиДанныхКолонок.Количество() > 0 Тогда
					
					СтарыйСрокОт = СтрокиДанныхКолонок[0].СрокОт;
					СтарыйСрокДо = СтрокиДанныхКолонок[0].СрокДо;
					// Обновляем в служебной таблице ДанныеКолонокЦен
					ЗаполнитьЗначенияСвойств(СтрокиДанныхКолонок[0], ТекущаяСтрокаШкалы);
					
					// Получаем строки ТЧ цен со старым диапазоном сроков
					СтруктураОтбора = Новый Структура("СрокОт, СрокДо", СтарыйСрокОт, СтарыйСрокДо);
					СтрокиТЧ		= Объект.ЦеныНаАренду.НайтиСтроки(СтруктураОтбора);
					// Обновляем диапазон в ТЧ цен
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекущаяСтрокаШкалы); 
					КонецЦикла;
					
				КонецЕсли;	
				
				НеиспользуемыеСроки.Удалить(НеиспользованнаяСтрока);
								
			КонецЕсли;	
					
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция СтруктураТаблицСовпадает()
	
	Возврат НЕ (Объект.ШкалаПробегаАренды.Количество() <> ЦеныНаАренду.Количество()
		ИЛИ Объект.ШкалаСрокаАренды.Количество() <> Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы.Количество());	
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаОбновленияШкалы(Результат, ДопПараметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЦеныНаАрендуНаСервере();	
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция РеквизитыКУдалению(РеквизитыТаблицыЦен)
	
	УдаляемыеРеквизиты = Новый Массив;
	
	 Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		 
		Если ЭтоДобавленныйРеквизит(Реквизит) Тогда
			ПутьКРеквизиту = "ЦеныНаАренду." + Реквизит.Имя;
			УдаляемыеРеквизиты.Добавить(ПутьКРеквизиту);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат УдаляемыеРеквизиты;
	
КонецФункции	

&НаСервере
Процедура УдалитьДобавленныеКолонки()
	
	// Удаление программно добавленных колонок
	КолвоКолонок = Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы.Количество(); 
	Для Индекс = 1 По КолвоКолонок Цикл
		
		ТекЭлемент = Элементы.ЦеныНаАрендуГруппаСрокАренды.ПодчиненныеЭлементы[КолвоКолонок - Индекс]; 
		Элементы.Удалить(ТекЭлемент);		
			
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьКолонкиВТаблицуЦен(Знач КоллекцияКолонок, ДобавляемыеРеквизиты)
	
	// Добавление колонок в таблицу "Цены на аренду"
	
	Счетчик = 0;
	
	Для Каждого Строка Из КоллекцияКолонок Цикл
		
		ЗаголовокЭлемента	= СформироватьЗаголовокКолонки(Строка.СрокОт, Строка.СрокДо); 
		ИмяРеквизита		= "Цена" + Счетчик;
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, 
											ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный),
											"ЦеныНаАренду");
										
		НоваяКолонка = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ЦеныНаАрендуГруппаСрокАренды);
		НоваяКолонка.Заголовок				= ЗаголовокЭлемента;
		НоваяКолонка.РежимРедактирования	= РежимРедактированияКолонки.ВходПриВводе;
		НоваяКолонка.Вид					= ВидПоляФормы.ПолеВвода;
		НоваяКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр; 
		НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ЦеныНаАрендуЦенаПриИзменении");
		
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
					
		НоваяСтрокаДанных = ДанныеКолонокЦен.Добавить();
		НоваяСтрокаДанных.ИмяЭлемента		= НоваяКолонка.Имя;
		НоваяСтрокаДанных.ИмяРеквизитаЦена	= ИмяРеквизита;
		НоваяСтрокаДанных.СрокОт			= Строка.СрокОт;
		НоваяСтрокаДанных.СрокДо			= Строка.СрокДо;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПутиКДанным()
	
	Для Каждого Строка Из ДанныеКолонокЦен Цикл
		Элемент		= Элементы[Строка.ИмяЭлемента];
		Реквизит	= Строка.ИмяРеквизитаЦена;
		
		Элемент.ПутьКДанным = "ЦеныНаАренду." + Реквизит;	
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СформироватьЗаголовокКолонки(Знач СрокОт, Знач СрокДо)
	
	Возврат НСтр("ru = 'От '") + СрокОт + НСтр("ru = ' До '") + СрокДо; 
	
КонецФункции	

&НаКлиенте
Процедура ПослеВопросаОчисткиЦен(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицыЦен();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОчиститьТаблицыЦен()
	
	ЦеныНаАренду.Очистить();
	Объект.ЦеныНаАренду.Очистить();
	ДанныеКолонокЦен.Очистить();
	
	УдалитьДобавленныеКолонки();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьЗаголовокФормы() // rarus vikhle 20.12.2021 m 18340 +++
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Заголовок = Строка(Объект.Ссылка) + ". " + Строка(Объект.ХозОперация);
	Иначе
		Заголовок = Нстр("ru = 'Прайс-лист аренда. '") + Строка(Объект.ХозОперация) + НСтр("ru = ' (создание)'"); //rarus vikhle 18.01.2022 АПК, + локализация
	КонецЕсли;
	
КонецПроцедуры // rarus vikhle 20.12.2021 m 18340 ---	 

//rarus vikhle 16.11.2021 m 18340 ---

#КонецОбласти