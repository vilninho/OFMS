#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	#Область ПрограммныйИнтерфейс	
	//rarus vikhle 17.11.2021 m 18340 +++
	
	#Область Печать
	
	// Формирует печатные формы
	//
	// Параметры:
	//  Объект					 - 	ссылка на объект, который нужно распечатать; 
	//  ПараметрыПечати			 - 	дополнительные настройки печати; 
	//  КоллекцияПечатныхФорм	 - 	ТаблицаЗначений - сформированные табличные документы (выходной параметр). 
	//  ОбъектыПечати			 - 	СписокЗначений  - значение - ссылка на объект;
	//                                           	  представление - имя области в которой был выведен объект (выходной
	//                                                            параметр); 
	//  ПараметрыВывода			 - 	Структура       - дополнительные параметры сформированных табличных документов (выходной
	//		                                          параметр). 
	//
	Процедура Печать(Объект, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПрайсЛистАренда") Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"ПФ_MXL_ПрайсЛистАренда", 
			Нстр("ru = 'Прайс-лист аренда'"), //rarus vikhle 24.12.2021 АПК 
			Печать_ПФ_MXL_ПрайсЛистАренда(Объект, ОбъектыПечати, ПараметрыПечати, "ПФ_MXL_ПрайсЛистАренда")); //rarus vikhle 24.12.2021 АПК поменял порядок параметров 
		КонецЕсли;													
		
		
	КонецПроцедуры
	
	// Формирует ПФ Прайс лист аренда
	//
	// Параметры:
	//  Объект			 - ДокументСсылка.Scan_ПрайсЛистАренда	 - ссылка на объект, который нужно распечатать;
	//  ОбъектыПечати	 - СписокЗначений						 - значение - ссылка на объект;
	//  						представление - имя области в которой был выведен объект (выходной
	//  						параметр);
	//  ПараметрыПечати	 - 										 - дополнительные настройки печати;
	//  ИмяМакета		 - Строка								 - имя макета;
	// 
	// Возвращаемое значение:
	//  ТабличныйДокумент - прайс лист с арендой
	//
	Функция Печать_ПФ_MXL_ПрайсЛистАренда(Объект, ОбъектыПечати, ПараметрыПечати, ИмяМакета = "ПФ_MXL_ПрайсЛистАренда") Экспорт //rarus vikhle 24.12.2021 АПК поменял порядок параметров
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.ПолеСверху = 0;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Scan_ПрайсЛистАренда.ПФ_MXL_ПрайсЛистАренда");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.СтандартнаяСпецификация = Объект.Модель;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Если ПараметрыПечати.Свойство("МассивФайлов") Тогда
			Файлы = ПараметрыПечати.МассивФайлов;
			КоличествоКартинок = Файлы.Количество();
			
			Для Сч = 0 По Файлы.ВГраница() Цикл
				Если Сч = 0 ИЛИ Сч = 2 Тогда
					ОбластьИзображения	= Макет.ПолучитьОбласть("Изображения|ЛеваяКартинка");
					ДанныеКартинки		= РаботаСФайлами.ДвоичныеДанныеФайла(Файлы[Сч]);
					Картинка			= Новый Картинка(ДанныеКартинки, Ложь);
					
					ОбластьИзображения.Рисунки.КартинкаЛевая.Картинка = Картинка;
					ТабличныйДокумент.Вывести(ОбластьИзображения);
				Иначе
					ОбластьИзображения	= Макет.ПолучитьОбласть("Изображения|ПраваяКартинка");
					ДанныеКартинки		= РаботаСФайлами.ДвоичныеДанныеФайла(Файлы[Сч]);
					Картинка			= Новый Картинка(ДанныеКартинки, Ложь);
					
					ОбластьИзображения.Рисунки.КартинкаПравая.Картинка = Картинка;
					ТабличныйДокумент.Присоединить(ОбластьИзображения);
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		ОбластьГоризонтальныйРазделитель = Макет.ПолучитьОбласть("ГоризонтальныйРазделитель");
		ТабличныйДокумент.Вывести(ОбластьГоризонтальныйРазделитель);
		
		КроссТаблица = Документы.Scan_ПрайсЛистАренда.ПолучитьКроссТаблицуЦен(Объект);
		
		ОбластьШапкаТаблицыКолонкаПробег = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаПробег");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыКолонкаПробег);
		
		Если КроссТаблица.Колонки.Количество() > 5 Тогда
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;	
		
		Для Сч = 1 По КроссТаблица.Колонки.Количество() - 1 Цикл
			ОбластьШапкаТаблицыВертикальныйРазделитель = Макет.ПолучитьОбласть("ШапкаТаблицы|ВертикальныйРазделитель");
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыВертикальныйРазделитель);
			
			ОбластьШапкаТаблицыКолонкаЦена = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаЦена");
			ОбластьШапкаТаблицыКолонкаЦена.Параметры.СрокАренды = КроссТаблица.Колонки[Сч].Заголовок;
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаЦена);
			
		КонецЦикла;
		
		ОбластьГоризонтальныйРазделитель = Макет.ПолучитьОбласть("ГоризонтальныйРазделитель");
		ТабличныйДокумент.Вывести(ОбластьГоризонтальныйРазделитель);
		
		ОбластьОписаниеКолонокКолонкаПробег = Макет.ПолучитьОбласть("ОписаниеКолонок|КолонкаПробег");
		ТабличныйДокумент.Вывести(ОбластьОписаниеКолонокКолонкаПробег);
		
		Для Сч = 1 По КроссТаблица.Колонки.Количество() - 1 Цикл 
			ОбластьОписаниеКолонокВертикальныйРазделитель = Макет.ПолучитьОбласть("ОписаниеКолонок|ВертикальныйРазделитель");
			ТабличныйДокумент.Присоединить(ОбластьОписаниеКолонокВертикальныйРазделитель);
			
			ОбластьОписаниеКолонокКолонкаЦена = Макет.ПолучитьОбласть("ОписаниеКолонок|КолонкаЦена");
			ТабличныйДокумент.Присоединить(ОбластьОписаниеКолонокКолонкаЦена);
			
		КонецЦикла;	
		
		СчетчикКолонок = 0;
		Для Каждого СтрокаТаблицы Из КроссТаблица Цикл
			ОбластьГоризонтальныйРазделитель = Макет.ПолучитьОбласть("ГоризонтальныйРазделитель");
			ТабличныйДокумент.Вывести(ОбластьГоризонтальныйРазделитель);
			
			ОбластьСтрокаЦеныКолонкаПробег = Макет.ПолучитьОбласть("СтрокаЦены|КолонкаПробег");
			ОбластьСтрокаЦеныКолонкаПробег.Параметры.Пробег = СтрокаТаблицы.ПробегПредставление;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаЦеныКолонкаПробег);
			
			Если СчетчикКолонок % 2 = 0 Тогда
				ЦветФона = Новый Цвет(232, 232, 234);	
			Иначе
				ЦветФона = Новый Цвет(209, 207, 207);	
			КонецЕсли;
			
			Для Сч = 1 По КроссТаблица.Колонки.Количество() - 1 Цикл
				ОбластьСтрокаЦеныВертикальныйРазделитель = Макет.ПолучитьОбласть("СтрокаЦены|ВертикальныйРазделитель");
				ТабличныйДокумент.Присоединить(ОбластьСтрокаЦеныВертикальныйРазделитель);
				
				ОбластьСтрокаЦеныКолонкаЦена = Макет.ПолучитьОбласть("СтрокаЦены|КолонкаЦена");
				ОбластьСтрокаЦеныКолонкаЦена.Параметры.Цена = СтрокаТаблицы[КроссТаблица.Колонки[Сч].Имя];
				
				ПрисоединеннаяОбласть = ТабличныйДокумент.Присоединить(ОбластьСтрокаЦеныКолонкаЦена);
				ПрисоединеннаяОбласть.ЦветФона = ЦветФона;
			КонецЦикла;
			
			СчетчикКолонок = СчетчикКолонок + 1;
			
		КонецЦикла;	
		
		ОбластьОписание = Макет.ПолучитьОбласть("Описание");
		ОбластьОписание.Параметры.ТекстУсловийОплаты = Объект.ТекстПФУсловияАренды;
		ТабличныйДокумент.Вывести(ОбластьОписание);
		
		ОбластьДанныеОрганизации = Макет.ПолучитьОбласть("ДанныеОрганизации");
		
		ОбластьДанныеОрганизации.Параметры.Организация = Объект.Организация.НаименованиеПолное;
		КИОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,,, Ложь);
		
		Для Каждого СтрокаТЗ Из КИОрганизации Цикл
			Если СтрокаТЗ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда 
				ОбластьДанныеОрганизации.Параметры.Адрес = СтрокаТЗ.Представление; 	
			ИначеЕсли СтрокаТЗ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
				ОбластьДанныеОрганизации.Параметры.Телефон = СтрокаТЗ.Представление; 	
			ИначеЕсли СтрокаТЗ.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда 	
				ОбластьДанныеОрганизации.Параметры.Факс = СтрокаТЗ.Представление;	
			КонецЕсли;	
		КонецЦикла;	
		
		ОбластьДанныеОрганизации.Параметры.РегистрационныйНомер = Объект.Организация.РегистрационныйНомер; 
		ТабличныйДокумент.Вывести(ОбластьДанныеОрганизации);
		
		Возврат ТабличныйДокумент;
		
	КонецФункции	
	
	#КонецОбласти
	
	// Возвращает максимальный номер прайс листа с переданной хоз. операцией
	//
	// Параметры:
	//  ХозОперация	 - СправочникСсылка_Scan_ХозяйственныеОперации	-
	// 
	// Возвращаемое значение:
	// Число  - Максимальный номер прайс листа с переданной хоз. операцией
	//
	Функция МаксимальныйНомерПрайсЛиста(ХозОперация) Экспорт
		
		МаксНомерПрайсЛиста = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Scan_ПрайсЛистАренда.НомерПрайсЛиста), 0) КАК МаксНомер
		|ИЗ
		|	Документ.Scan_ПрайсЛистАренда КАК Scan_ПрайсЛистАренда
		|ГДЕ
		|	Scan_ПрайсЛистАренда.ХозОперация = &ХозОперация";
		Запрос.УстановитьПараметр("ХозОперация", ХозОперация);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			МаксНомерПрайсЛиста = Выборка.МаксНомер;	
		КонецЕсли;	
		
		Возврат МаксНомерПрайсЛиста;
		
	КонецФункции	
	
	// Возвращает массив с результатами запроса с комбинациями диапазонов табличных частей ШкалаПробега и ШкалаСрока 
	// и ошибками при их наличии  
	//
	// Параметры:
	//  ПрайсЛист	 - ДокументСсылка.Scan_ПрайсЛистАренда, ДокументОбъект.Scan_ПрайсЛистАренда	 - 
	// 
	// Возвращаемое значение:
	//  Массив - Массив[7] - результат запроса с ошибочными данными, при корректных данных пустой
	//			 Массив[8] - результат запроса с комбинациями пробегов
	//   		 Массив[9] - результат запроса с комбинациями сроков
	//
	Функция КомбинацииШкал(ПрайсЛист) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТЧЦеныНаАренду.СрокОт КАК СрокОт,
		|	ТЧЦеныНаАренду.СрокДо КАК СрокДо,
		|	ТЧЦеныНаАренду.ПробегОт КАК ПробегОт,
		|	ТЧЦеныНаАренду.ПробегДо КАК ПробегДо,
		|	ТЧЦеныНаАренду.Цена КАК Цена,
		|	ТЧЦеныНаАренду.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ЦеныНаАренду
		|ИЗ
		|	&ТЧЦеныНаАренду КАК ТЧЦеныНаАренду
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧШкалаПробега.ПробегОт КАК ПробегОт,
		|	ТЧШкалаПробега.ПробегДо КАК ПробегДо,
		//|	ТЧШкалаПробега.ПорядокОтображения КАК ПорядокОтображения, // rarus vikhle 20.12.2021 m 18340
		|	ТЧШкалаПробега.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ШкалаПробега
		|ИЗ
		|	&ТЧШкалаПробега КАК ТЧШкалаПробега
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧШкалаСрока.СрокОт КАК СрокОт,
		|	ТЧШкалаСрока.СрокДо КАК СрокДо,
		// |	ТЧШкалаСрока.ПорядокОтображения КАК ПорядокОтображения, // rarus vikhle 20.12.2021 m 18340
		|	ТЧШкалаСрока.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ШкалаСрока
		|ИЗ
		|	&ТЧШкалаСрока КАК ТЧШкалаСрока
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНаАренду.ПробегОт КАК ПробегОт,
		|	ЦеныНаАренду.ПробегДо КАК ПробегДо
		|ПОМЕСТИТЬ КомбинацииПробега
		|ИЗ
		|	ЦеныНаАренду КАК ЦеныНаАренду
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНаАренду.ПробегОт,
		|	ЦеныНаАренду.ПробегДо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНаАренду.СрокОт КАК СрокОт,
		|	ЦеныНаАренду.СрокДо КАК СрокДо
		|ПОМЕСТИТЬ КомбинацииСроков
		|ИЗ
		|	ЦеныНаАренду КАК ЦеныНаАренду
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНаАренду.СрокОт,
		|	ЦеныНаАренду.СрокДо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомбинацииПробега.ПробегОт КАК ПробегОт,
		|	КомбинацииПробега.ПробегДо КАК ПробегДо,
		|	ЕСТЬNULL(МАКСИМУМ(ШкалаПробега.НомерСтроки), 0) КАК НомерСтроки, // rarus vikhle 20.12.2021 m 18340
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ШкалаПробега.НомерСтроки), 0) КАК КолВоСтрокШкалы
		|ПОМЕСТИТЬ КомбинацииПробегаСКоличеством
		|ИЗ
		|	КомбинацииПробега КАК КомбинацииПробега
		|		ЛЕВОЕ СОЕДИНЕНИЕ ШкалаПробега КАК ШкалаПробега
		|		ПО КомбинацииПробега.ПробегОт = ШкалаПробега.ПробегОт
		|			И КомбинацииПробега.ПробегДо = ШкалаПробега.ПробегДо
		|
		|СГРУППИРОВАТЬ ПО
		|	КомбинацииПробега.ПробегОт,
		|	КомбинацииПробега.ПробегДо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомбинацииСроков.СрокОт КАК СрокОт,
		|	КомбинацииСроков.СрокДо КАК СрокДо,
		|	ЕСТЬNULL(МАКСИМУМ(ШкалаСрока.НомерСтроки), 0) КАК НомерСтроки, // rarus vikhle 20.12.2021 m 18340
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ШкалаСрока.НомерСтроки), 0) КАК КолВоСтрокШкалы
		|ПОМЕСТИТЬ КомбинацииСроковСКоличеством
		|ИЗ
		|	КомбинацииСроков КАК КомбинацииСроков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ШкалаСрока КАК ШкалаСрока
		|		ПО КомбинацииСроков.СрокОт = ШкалаСрока.СрокОт
		|			И КомбинацииСроков.СрокДо = ШкалаСрока.СрокДо
		|
		|СГРУППИРОВАТЬ ПО
		|	КомбинацииСроков.СрокОт,
		|	КомбинацииСроков.СрокДо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомбинацииПробегаСКоличеством.КолВоСтрокШкалы КАК ПробегОт
		|ИЗ
		|	КомбинацииПробегаСКоличеством КАК КомбинацииПробегаСКоличеством
		|ГДЕ
		|	КомбинацииПробегаСКоличеством.КолВоСтрокШкалы <> 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КомбинацииСроковСКоличеством.КолВоСтрокШкалы
		|ИЗ
		|	КомбинацииСроковСКоличеством КАК КомбинацииСроковСКоличеством
		|ГДЕ
		|	КомбинацииСроковСКоличеством.КолВоСтрокШкалы <> 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КомбинацииПробегаСКоличеством.ПробегОт ЕСТЬ NULL
		|				ИЛИ ШкалаПробега.ПробегОт ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|	КОНЕЦ
		|ИЗ
		|	КомбинацииПробегаСКоличеством КАК КомбинацииПробегаСКоличеством
		|		ПОЛНОЕ СОЕДИНЕНИЕ ШкалаПробега КАК ШкалаПробега
		|		ПО КомбинацииПробегаСКоличеством.ПробегОт = ШкалаПробега.ПробегОт
		|			И КомбинацииПробегаСКоличеством.ПробегДо = ШкалаПробега.ПробегДо
		|			И КомбинацииПробегаСКоличеством.НомерСтроки = ШкалаПробега.НомерСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА КомбинацииПробегаСКоличеством.ПробегОт ЕСТЬ NULL
		|				ИЛИ ШкалаПробега.ПробегОт ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	НЕ КОЛИЧЕСТВО(КомбинацииПробегаСКоличеством.ПробегОт) = КОЛИЧЕСТВО(ШкалаПробега.ПробегОт)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КомбинацииСроковСКоличеством.СрокОт ЕСТЬ NULL
		|				ИЛИ ШкалаСрока.СрокОт ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|	КОНЕЦ
		|ИЗ
		|	КомбинацииСроковСКоличеством КАК КомбинацииСроковСКоличеством
		|		ПОЛНОЕ СОЕДИНЕНИЕ ШкалаСрока КАК ШкалаСрока
		|		ПО КомбинацииСроковСКоличеством.СрокОт = ШкалаСрока.СрокОт
		|			И КомбинацииСроковСКоличеством.СрокДо = ШкалаСрока.СрокДо
		|			И КомбинацииСроковСКоличеством.НомерСтроки = ШкалаСрока.НомерСтроки 
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА КомбинацииСроковСКоличеством.СрокОт ЕСТЬ NULL
		|				ИЛИ ШкалаСрока.СрокОт ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	НЕ КОЛИЧЕСТВО(КомбинацииСроковСКоличеством.СрокОт) = КОЛИЧЕСТВО(ШкалаСрока.СрокОт)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомбинацииПробегаСКоличеством.ПробегОт КАК ПробегОт,
		|	КомбинацииПробегаСКоличеством.ПробегДо КАК ПробегДо
		// rarus vikhle 20.12.2021 m 18340 +++
		//|	КомбинацииПробегаСПорядками.ПорядокОтображения КАК ПорядокОтображения
		// rarus vikhle 20.12.2021 m 18340 ---
		|ИЗ
		|	КомбинацииПробегаСКоличеством КАК КомбинацииПробегаСКоличеством
		// rarus vikhle 20.12.2021 m 18340 +++
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		// rarus vikhle 20.12.2021 m 18340 ---
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомбинацииСроковСКоличеством.СрокОт КАК СрокОт,
		|	КомбинацииСроковСКоличеством.СрокДо КАК СрокДо
		// rarus vikhle 20.12.2021 m 18340 +++
		//|	КомбинацииСроковСПорядками.ПорядокОтображения КАК ПорядокОтображения
		// rarus vikhle 20.12.2021 m 18340 ---
		|ИЗ
		|	КомбинацииСроковСКоличеством КАК КомбинацииСроковСКоличеством
		|
		// rarus vikhle 20.12.2021 m 18340 +++
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		// rarus vikhle 20.12.2021 m 18340 ---
		
		Запрос.УстановитьПараметр("ТЧЦеныНаАренду", ПрайсЛист.ЦеныНаАренду.Выгрузить());
		Запрос.УстановитьПараметр("ТЧШкалаПробега", ПрайсЛист.ШкалаПробегаАренды.Выгрузить());
		Запрос.УстановитьПараметр("ТЧШкалаСрока",	ПрайсЛист.ШкалаСрокаАренды.Выгрузить());
		
		МассивРезультатов = Запрос.ВыполнитьПакет();	
		
		Возврат МассивРезультатов;
		
	КонецФункции
	
	// Возвращает кросс-таблицу значений на основе данных тч Цены на аренду
	//
	// Параметры:
	//  ПрайсЛистСсылка	 - ДокументСсылка.Scan_ПрайсЛистАренда	 - 
	// 
	// Возвращаемое значение:
	// ТаблицаЗначений  - 
	//
	Функция ПолучитьКроссТаблицуЦен(ПрайсЛистСсылка) Экспорт
		
		КроссТаблица = Новый ТаблицаЗначений;
		КроссТаблица.Колонки.Добавить("ПробегПредставление");
		КроссТаблица.Колонки.Добавить("ПробегОт");
		КроссТаблица.Колонки.Добавить("ПробегДо");
		
		МассивРезультатовКомбинаций = КомбинацииШкал(ПрайсЛистСсылка);
		КомбинацииПробегов	= МассивРезультатовКомбинаций[8].Выгрузить();
		КомбинацииСроков	= МассивРезультатовКомбинаций[9].Выгрузить();
		
		ИсходнаяСтрока		= Нстр("ru = ';%1 МЕСЯЦ;;%1 МЕСЯЦА;%1 МЕСЯЦЕВ;%1 МЕСЯЦА'"); 
		Сч 					= 0;
		
		// Добавляем колонки сроков в ТЗ
		Для Каждого Комбинация Из КомбинацииСроков Цикл
			
			Если Комбинация.СрокОт = Комбинация.СрокДо Тогда
				ЗаголовокКолонки = СтрокаСЧислом(ИсходнаяСтрока,
				Комбинация.СрокОт,
				ВидЧисловогоЗначения.Количественное,
				"L=ru");
			Иначе
				НачалоЗаголовка	= Строка(Комбинация.СрокОт) + "-";  
				КонецЗаголовка	= СтрокаСЧислом(ИсходнаяСтрока,
				Комбинация.СрокДо,
				ВидЧисловогоЗначения.Количественное,
				"L=ru");
				ЗаголовокКолонки = НачалоЗаголовка + КонецЗаголовка;								
			КонецЕсли;	
			
			КроссТаблица.Колонки.Добавить("Цена" + Сч,, ЗаголовокКолонки);
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
		// Заполняем строки ТЗ
		Для Каждого СтрокаПробега Из КомбинацииПробегов Цикл
			
			НоваяСтрока = КроссТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПробега);
			
			Если НоваяСтрока.ПробегОт = 0 Тогда
				НоваяСтрока.ПробегПредставление = Нстр("ru = 'ДО '") + НоваяСтрока.ПробегДо + Нстр("ru = ' КМ'");   
			Иначе	
				НоваяСтрока.ПробегПредставление = Нстр("ru = 'ОТ '") + НоваяСтрока.ПробегОт + Нстр("ru = ' КМ'") 
				+ Символы.ПС + Нстр("ru = 'ДО '") + НоваяСтрока.ПробегДо +  Нстр("ru = ' КМ'");   
			КонецЕсли;	
			
			Для Сч = 0 По КомбинацииСроков.Количество() - 1 Цикл
				
				СтруктураОтбора = Новый Структура("СрокОт, СрокДо, ПробегОт, ПробегДо");
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, КомбинацииСроков[Сч]);
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаПробега); 
				
				СтрокиТЧ = ПрайсЛистСсылка.ЦеныНаАренду.НайтиСтроки(СтруктураОтбора);
				Если СтрокиТЧ.Количество() > 0 Тогда
					КолонкаЦены = КроссТаблица.Колонки[Сч + 3]; // Первые 3 колонки - колонка пробега, порядок комбинаций сроков соответсвует порядку колонок
					НоваяСтрока[КолонкаЦены.Имя] = СтрокиТЧ[0].Цена;
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;
		
		// Удаляяем колонки ПробегОт и ПробегДо
		КроссТаблица.Колонки.Удалить(1);
		КроссТаблица.Колонки.Удалить(1);
		
		Возврат КроссТаблица;	
		
	КонецФункции	
	
	// Возвращает массив ссылок актуальных прайс листов аренды, у которых:
	// 	Если хоз. операция STD, тогда совпадает модель с моделью переданного прайс листа
	// 	Если хоз. операция UO, тогда совпадает продукт и конечный клиент с данными переданного прайс листа 
	//
	// Параметры:
	//  ПрайсЛистСсылка	 - ДокументСсылка.Scan_ПрайсЛистАренда	 - 
	// 
	// Возвращаемое значение:
	//  Массив - массив ссылок актуальных прайс листов аренды
	//
	Функция ПрайсЛистыКОтмене(ПрайсЛистСсылка) Экспорт 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Scan_ПрайсЛистАренда.Ссылка КАК ПрайсЛист
		|ИЗ
		|	Документ.Scan_ПрайсЛистАренда КАК Scan_ПрайсЛистАренда
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Scan_ПрайсЛистАренда КАК Scan_ПрайсЛистАрендаАктуальный
		|		ПО (ВЫБОР
		|				КОГДА Scan_ПрайсЛистАрендаАктуальный.Ссылка = &АктуальныйПрайсЛист
		|						И Scan_ПрайсЛистАрендаАктуальный.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.STDПрайсЛистНаАренду)
		|					ТОГДА НЕ Scan_ПрайсЛистАренда.НеАктуален
		|							И Scan_ПрайсЛистАренда.Модель = Scan_ПрайсЛистАрендаАктуальный.Модель
		|							И НЕ Scan_ПрайсЛистАренда.Ссылка = Scan_ПрайсЛистАрендаАктуальный.Ссылка
		|				КОГДА Scan_ПрайсЛистАрендаАктуальный.Ссылка = &АктуальныйПрайсЛист
		|						И Scan_ПрайсЛистАрендаАктуальный.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.UOПрайсЛистНаАренду)
		|					ТОГДА НЕ Scan_ПрайсЛистАрендаАктуальный.НеАктуален
		|							И Scan_ПрайсЛистАренда.Продукт = Scan_ПрайсЛистАрендаАктуальный.Продукт
		|							И Scan_ПрайсЛистАренда.КонечныйКлиент = Scan_ПрайсЛистАрендаАктуальный.КонечныйКлиент
		|							И НЕ Scan_ПрайсЛистАренда.Ссылка = Scan_ПрайсЛистАрендаАктуальный.Ссылка
		|			КОНЕЦ)";
		Запрос.УстановитьПараметр("АктуальныйПрайсЛист", ПрайсЛистСсылка); 
		ПрайсЛисты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПрайсЛист");
		
		Возврат ПрайсЛисты;
		
	КонецФункции	
	
	
	#КонецОбласти
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
//rarus vikhle 17.11.2021 m 18340 ---