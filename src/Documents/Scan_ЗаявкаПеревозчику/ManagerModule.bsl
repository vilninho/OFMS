//rarus sergei 28.09.2016 mantis 7160 ++
Функция ПроверитьВыбранныеСсылки(ВыбранныеСтроки) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие
	              |ИЗ
	              |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	              |ГДЕ
	              |	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В(&ВыбранныеСтроки)
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие";
	Запрос.УстановитьПараметр("ВыбранныеСтроки",ВыбранныеСтроки);
	ТЗ =Запрос.Выполнить().Выгрузить();
	МассивУникальныхДокументов = ТЗ.ВыгрузитьКолонку("ЗаявкаНаДействие");
	ПодходятПоКритериям = Истина;
	Если МассивУникальныхДокументов.Количество() = 1 Тогда
		
		ПодходятПоКритериям = Истина;
		
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Scan_ЗаявкаНаДействие.Грузополучатель КАК Грузополучатель,
		               |	Scan_ЗаявкаНаДействие.МестоДоставки КАК МестоДоставки,
		               |	Scan_ЗаявкаНаДействие.СпособДоставки КАК СпособДоставки,
		               |	НАЧАЛОПЕРИОДА(Scan_ЗаявкаНаДействие.ДатаДоставкиПлановая, ДЕНЬ) КАК ДатаДоставкиПлановая,
		               |	Scan_ЗаявкаНаДействие.ПриемВВыходныеИПраздничные,
		               |	Scan_ЗаявкаНаДействие.ХозОперация
		               |ИЗ
		               |	Документ.Scan_ЗаявкаНаДействие КАК Scan_ЗаявкаНаДействие
		               |ГДЕ
		               |	Scan_ЗаявкаНаДействие.Ссылка В(&СписокДокументов)";
		Запрос.УстановитьПараметр("СписокДокументов",МассивУникальныхДокументов);
		Результат = Запрос.Выполнить().Выгрузить();
		МассивНайденныхСтрок = Результат.НайтиСтроки(Новый Структура("ХозОперация",Результат[0].ХозОперация));
		Если МассивНайденныхСтрок.Количество() <> МассивУникальныхДокументов.Количество() Тогда
			ПодходятПоКритериям = Ложь;
			Сообщить("Нельзя создать Заявку перевозчику, так как у выбранных Заявок на действие разные хояйственные операции");
		КонецЕсли; 
		МассивНайденныхСтрок = Результат.НайтиСтроки(Новый Структура("Грузополучатель",Результат[0].Грузополучатель));
		Если МассивНайденныхСтрок.Количество() <> МассивУникальныхДокументов.Количество() Тогда
			ПодходятПоКритериям = Ложь;
			Сообщить("Нельзя создать Заявку перевозчику, если у выбранных продуктов разный грузополучатель");
		КонецЕсли; 
		МассивНайденныхСтрок = Результат.НайтиСтроки(Новый Структура("МестоДоставки",Результат[0].МестоДоставки));
		Если МассивНайденныхСтрок.Количество() <> МассивУникальныхДокументов.Количество() Тогда
			ПодходятПоКритериям = Ложь;
			Сообщить("Нельзя создать Заявку перевозчику, если у выбранных продуктов разное место доставки");
		КонецЕсли; 
		МассивНайденныхСтрок = Результат.НайтиСтроки(Новый Структура("СпособДоставки",Результат[0].СпособДоставки));
		Если МассивНайденныхСтрок.Количество() <> МассивУникальныхДокументов.Количество() Тогда
			ПодходятПоКритериям = Ложь;
			Сообщить("Нельзя создать Заявку перевозчику, если у выбранных продуктов разный способ доставки");
		КонецЕсли; 
		МассивНайденныхСтрок = Результат.НайтиСтроки(Новый Структура("ДатаДоставкиПлановая",Результат[0].ДатаДоставкиПлановая));
		Если МассивНайденныхСтрок.Количество() <> МассивУникальныхДокументов.Количество() Тогда
			ПодходятПоКритериям = Ложь;
			Сообщить("Нельзя создать Заявку перевозчику, если у выбранных продуктов разная дата доставки");
		КонецЕсли; 
		МассивНайденныхСтрок = Результат.НайтиСтроки(Новый Структура("ПриемВВыходныеИПраздничные",Результат[0].ПриемВВыходныеИПраздничные));
		Если МассивНайденныхСтрок.Количество() <> МассивУникальныхДокументов.Количество() Тогда
			ПодходятПоКритериям = Ложь;
			Сообщить("Нельзя создать Заявку перевозчику, так как у выбранных Заявок на действие не совпадает возможность приема в выходные дни");
		КонецЕсли; 

	КонецЕсли;	
	Возврат  ПодходятПоКритериям;
	
	

КонецФункции 

Функция ПолучитьКЛПолучателя(Документ) Экспорт
	МассивКЛ = Документ.КонтактыПолучателя.ВыгрузитьКолонку("КонтактноеЛицо");
	МассивУникальныхКЛ = Новый Массив;
	МассивУникальныхКЛ.Добавить(МассивКЛ[0]);
	Для каждого элемент Из МассивКЛ Цикл
		Индекс = МассивУникальныхКЛ.Найти(элемент);	
		Если Индекс = Неопределено Тогда
			МассивУникальныхКЛ.Добавить(Элемент);	
		КонецЕсли; 
	КонецЦикла; 
	Возврат МассивУникальныхКЛ;
КонецФункции

Функция ПолучитьКЛОтправителя(Документ) Экспорт
	МассивКЛ = Документ.КонтактыОтправителя.ВыгрузитьКолонку("КонтактноеЛицо");
	МассивУникальныхКЛ = Новый Массив;
	МассивУникальныхКЛ.Добавить(МассивКЛ[0]);
	Для каждого элемент Из МассивКЛ Цикл
		Индекс = МассивУникальныхКЛ.Найти(элемент);	
		Если Индекс = Неопределено Тогда
			МассивУникальныхКЛ.Добавить(Элемент);	
		КонецЕсли; 
	КонецЦикла; 

	Возврат МассивУникальныхКЛ;
КонецФункции

Функция ЗаполнитьКИОтправителя(КЛ, Документ) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КонтактноеЛицо",КЛ);
	МассивКонтактнойИнформации = Документ.КонтактыОтправителя.НайтиСтроки(ПараметрыОтбора);
	СтрокаКИ = "";
	Для каждого элемент Из МассивКонтактнойИнформации Цикл
		СтрокаКИ =СтрокаКИ + элемент.ВидКонтактнойИнформации.Наименование+"   "+элемент.Представление+символы.ПС;	
		
	
	КонецЦикла; 
	Возврат СтрокаКИ;
КонецФункции

Функция ЗаполнитьКИПолучателя(КЛ, Документ) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КонтактноеЛицо",КЛ);
	МассивКонтактнойИнформации = Документ.КонтактыПолучателя.НайтиСтроки(ПараметрыОтбора);
	СтрокаКИ = "";
	Для каждого элемент Из МассивКонтактнойИнформации Цикл
		СтрокаКИ =СтрокаКИ + элемент.ВидКонтактнойИнформации.Наименование+"   "+элемент.Представление+символы.ПС;	
		
	
	КонецЦикла; 
	Возврат СтрокаКИ;
КонецФункции

Функция ПолучитьТаблицуИзделий(Документ) Экспорт
	ТаблицаИзделий = Новый ТаблицаЗначений;
	ТаблицаИзделий = Документ.СоставЗаявки.Выгрузить();
	ТаблицаИзделий.Колонки.Добавить("Марка", Новый ОписаниеТипов("СправочникСсылка.Scan_МаркиПродуктов"));
	ТаблицаИзделий.Колонки.Добавить("ТипЛогистический", Новый ОписаниеТипов("СправочникСсылка.Scan_ТипыПродуктовЛогистика"));
	//rarus abrant 27.04.2017 mantis 9439 +++
	ТаблицаИзделий.Колонки.Добавить("НомерИзделия", Новый ОписаниеТипов("Строка"));
	//rarus abrant 27.04.2017 mantis 9439 ---
	Для итератор = 0 По ТаблицаИзделий.Количество() - 1 Цикл
		ТаблицаИзделий[итератор].Марка = Документ.СоставЗаявки[итератор].Изделие.МаркаПродукта;
		ТаблицаИзделий[итератор].ТипЛогистический = Документ.СоставЗаявки[итератор].Изделие.ТипПродуктаЛогистический;
		//rarus abrant 27.04.2017 mantis 9439 +++
		ТаблицаИзделий[итератор].НомерИзделия = Документ.СоставЗаявки[итератор].Изделие.НомерИзделия;
		//rarus abrant 27.04.2017 mantis 9439 ---
	КонецЦикла;
	//rarus abrant 25.04.2017 Mantis 9439 +++
	ТаблицаИзделий.Сортировать("ТипЛогистический,Марка,НомерИзделия");
	//ТаблицаИзделий.Сортировать("ТипЛогистический,Марка");
	//rarus abrant 25.04.2017 Mantis 9439 ---
	НомерСтроки = 1;
	Для каждого строка Из ТаблицаИзделий Цикл
		строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки+1;
	КонецЦикла; 
	Возврат ТаблицаИзделий;	
КонецФункции

//rarus tenkam 05.10.2016 mantis 7183 ++

// Функция устанавливает пометку "Подтверждена перевозчиком" в заявке перевозчику и выполняет все необходимые движения
Функция УстановитьПодтверждениеПеревозчиком(ЗаявкаСсылка, СообщениеОбОшибке = "") Экспорт
	Если ЗаявкаСсылка.ПодтвержденаПеревозчиком Тогда
		СообщениеОбОшибке = "" + ЗаявкаСсылка + " уже подтверждена!";
		Возврат Ложь;
	КонецЕсли;
	
	//rarus tenkam 23.12.2016 mantis 8216 ++
	Если ЗаявкаСсылка.Сторнирован Тогда
		СообщениеОбОшибке = "Нельзя изменять сторнированный документ!";
		Возврат Ложь;
	КонецЕсли;
	//rarus tenkam 23.12.2016 mantis 8216 --
	
	//УстановитьПривилегированныйРежим(Истина);
	ДокОбъект = ЗаявкаСсылка.ПолучитьОбъект();
	ДокОбъект.ПодтвержденаПеревозчиком = Истина;
	ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Подтверждена;
	
	//rarus tenkam 26.10.2016 mantis 7688 ++
	////Если местонахождение всех изделий совпадает с местом отгрузки тогда заполним дату ухода
	//ВсеИзделияНаМестеОтгрузки = ВсеИзделияНаМестеОтгрузки(ЗаявкаСсылка); 
	//Если ВсеИзделияНаМестеОтгрузки Тогда
	//	ВремяУходаФакт = Scan_ПраваИНастройки.Scan_Право("ВремяФактическогоУходаИзделий");
	//	ДокОбъект.ДатаУходаФакт = НачалоДня(ДокОбъект.ДатаПолучения) + (ВремяУходаФакт - НачалоДня(ВремяУходаФакт));
	//	Для Каждого СтрокаИзделия Из ДокОбъект.СоставЗаявки Цикл
	//		СтрокаИзделия.ДатаУходаФакт = ДокОбъект.ДатаУходаФакт;
	//	КонецЦикла;
	//КонецЕсли;
	
	//rarus tenkam 26.10.2016 mantis 7688 --
	Попытка
		// rarus tenkam 14.06.2019 mantis 14412 +++
		Если НЕ ДокОбъект.ПроверитьЗаполнение() Тогда
			СообщениеОбОшибке = "Не удалось подтвердить документ!";
			Возврат Ложь;		
		КонецЕсли;
		// rarus tenkam 14.06.2019 mantis 14412 ---
		УстановитьПривилегированныйРежим(ИСТИНА);
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Для Каждого СтрокаТЧ Из ДокОбъект.СоставЗаявки Цикл
			Scan_ВспомогательныеФункцииСервер.НастроитьСтатусДокументаЗаявкаНаДействие(СтрокаТЧ.ЗаявкаНаДействие);
		КонецЦикла; 
		
		//rarus tenkam 23.08.2017 mantis 9444 +++
		Если Scan_ПраваИНастройки.Scan_Право("АвтоматическаяОтправкаПФЗаявокНаДействие") Тогда
			МассивЗаявок = ПолучитьЗаявкиНаДействие(ДокОбъект.Ссылка);
			Для Каждого ТекЗаявка Из МассивЗаявок Цикл
				СообщениеОтправки = "";
				ВсеОк = Ложь;
				
				//rarus tenkam 25.09.2017 mantis 11216 +++
				Если НЕ Scan_ВспомогательныеФункцииСервер.ЭтоЗаявкаCПеревозкой(ТекЗаявка) Тогда 
					Продолжить;
				КонецЕсли;
				//rarus tenkam 25.09.2017 mantis 11216 ---				
				Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПФЗаявки(ТекЗаявка, СообщениеОтправки, ВсеОк); //rarus BProg_Gladkov 02.05.2020 0015962 +- Перемещена в Scan_ОтправкаПисемПоЭлектроннойПочте	
				
				Если ЗначениеЗаполнено(СообщениеОтправки) Тогда		
					Сообщить(СообщениеОтправки);
				КонецЕсли;
				
				// rarus tenkam 17.07.2020 mantis 16322 +++
				Если ВсеОК И
					(ТекЗаявка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
					ТекЗаявка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение) Тогда
					
					Scan_ВспомогательныеФункцииСервер.УстановитьСтатусЗаявкиНаДействие(ТекЗаявка, ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаДействие.ЗаявкаОтправлена"));		
				КонецЕсли;
				
				// rarus tenkam 17.07.2020 mantis 16322 ---
			КонецЦикла;
		КонецЕсли;    
		//rarus tenkam 23.08.2017 mantis 9444 ---
		
		// rarus agar 10.03.2022 15689 ++
		СообщениеОтправки = "";
		Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьДетализированныйАкт(ДокОбъект.Ссылка, СообщениеОтправки);
		Если ЗначениеЗаполнено(СообщениеОтправки) Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеОтправки);
		КонецЕсли;
		// rarus agar 10.03.2022 15689 --
		
		//rarus tenkam 16.08.2017 mantis 10831 +++
		//ОтправитьПлановыеДанныев1БД(ДокОбъект.Ссылка);		//rarus tenkam 29.06.2017 mantis 9065 +
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ДокОбъект.Ссылка);
		ФоновыеЗадания.Выполнить("Scan_ВебСервисы.ОтправитьПлановыеДанныев1БД", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, "Отправка плановых данных в 1БД");	
	    //rarus tenkam 16.08.2017 mantis 10831 ---
		
		Возврат Истина;	
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки(); 
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Функция снимает пометку "Подтверждена перевозчиком" в заявке перевозчику и выполняет все необходимые движения
Функция СнятьПодтверждениеПеревозчиком(ЗаявкаСсылка, СообщениеОбОшибке = "") Экспорт
	Если ЗаявкаСсылка.ПодтвержденаПеревозчиком = Ложь Тогда
		СообщениеОбОшибке = "" + ЗаявкаСсылка + " и так не подтверждена!";
		Возврат Ложь;
	КонецЕсли;
	
	//rarus tenkam 23.12.2016 mantis 8216 ++
	Если ЗаявкаСсылка.Сторнирован Тогда
		СообщениеОбОшибке = "Нельзя изменять сторнированный документ!";
		Возврат Ложь;
	КонецЕсли;
	//rarus tenkam 23.12.2016 mantis 8216 --
	
	//УстановитьПривилегированныйРежим(Истина);
	ДокОбъект = ЗаявкаСсылка.ПолучитьОбъект();
	ДокОбъект.ПодтвержденаПеревозчиком = Ложь;
	ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе;
	ДокОбъект.ДатаУходаФакт = Дата('00010101');
	Для Каждого СтрокаИзделия Из ДокОбъект.СоставЗаявки Цикл
		СтрокаИзделия.ДатаУходаФакт = ДокОбъект.ДатаУходаФакт;
	КонецЦикла;

	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Для Каждого СтрокаТЧ Из ДокОбъект.СоставЗаявки Цикл
			Scan_ВспомогательныеФункцииСервер.НастроитьСтатусДокументаЗаявкаНаДействие(СтрокаТЧ.ЗаявкаНаДействие);
		КонецЦикла; 
		
		//rarus tenkam 16.08.2017 mantis 10831 +++
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ДокОбъект.Ссылка);
		ФоновыеЗадания.Выполнить("Scan_ВебСервисы.ОтправитьОтменуПлановыхДанныех1БД", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, "Отправка отмены плановых данных в 1БД");	
	    //rarus tenkam 16.08.2017 mantis 10831 ---
		
		Возврат Истина;	
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки(); 
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Функция проверяет у всех ли изделий в тч заполнена дата фактической доставки
Функция ВсеИзделияИсполнены(ЗаявкаСсылка) Экспорт
	ВсеИсполнены = Истина;
	Для Каждого СтрокаИзделия Из ЗаявкаСсылка.СоставЗаявки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаИзделия.ДатаДоставкиФакт) Тогда
			ВсеИсполнены = Ложь;
			Возврат ВсеИсполнены;
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеИсполнены;
КонецФункции

// Функция проверяет все ли изделия находятна на указанном месте храенения. Если место хранения не указано, то проверяется место отгрузк заявки
Функция ВсеИзделияНаМестеОтгрузки(ЗаявкаСсылка, МестоХранения = Неопределено) Экспорт
	МестоОтгрузки = ?(ЗначениеЗаполнено(МестоХранения), МестоХранения, ЗаявкаСсылка.МестоОтгрузки);
	ВсеНаМесте = Истина;
	Для Каждого СтрокаИзделия Из ЗаявкаСсылка.СоставЗаявки Цикл
		МестонахождениеИзделия = РегистрыНакопления.Scan_МестонахождениеИзделий.ПолучитьМестоположениеИзделия(СтрокаИзделия.Изделие, ЗаявкаСсылка.ДатаПолучения);
		Если МестонахождениеИзделия <> МестоОтгрузки Тогда
			ВсеНаМесте = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеНаМесте;	
КонецФункции
//rarus tenkam 05.10.2016 mantis 7183 --

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
		

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ЗаявкаПеревозчику";
	КомандаПечати.Представление = НСтр("ru = 'Печать'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	КомандаПечати.Порядок = 85;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаявкаПеревозчику") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ЗаявкаПеревозчику",
															"Заявка перевозчику",
															ПечатьПФ_MXL_ЗаявкаПеревозчику(МассивОбъектов, ОбъектыПечати,, ПараметрыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТранспортнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ТранспортнаяНакладная",
															"Транспортная накладная",
															ПечатьПФ_MXL_ТранспортнаяНакладная(МассивОбъектов, ОбъектыПечати,, ПараметрыПечати));
	//rarus agar 17.03.2021 17274 ++
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТранспортнаяНакладная2200") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ТранспортнаяНакладная2200",
															"Транспортная накладная",
															ПечатьПФ_MXL_ТранспортнаяНакладная2200(МассивОбъектов, ОбъектыПечати,, ПараметрыПечати));
	//rarus agar 17.03.2021 17274 --
	//rarus vikhle 01.02.2022 m 18740 +++
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТранспортнаяНакладная2116") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ТранспортнаяНакладная2116",
															"Транспортная накладная",
															ПечатьПФ_MXL_ТранспортнаяНакладная2116(МассивОбъектов, ОбъектыПечати,, ПараметрыПечати)); 
	//rarus vikhle 01.02.2022 m 18740 ---														
	// rarus agar 10.02.2022 15689 ++
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ДетализированныйАкт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ДетализированныйАкт",
															"Детализированный акт",
															ПечатьПФ_MXL_ДетализированныйАкт(МассивОбъектов, ОбъектыПечати,, ПараметрыПечати));
	// rarus agar 10.02.2022 15689 --
	КонецЕсли;

	//// печать счета на оплату
	//ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаявкаПеревозчику");
	//Если ПечатнаяФорма <> Неопределено Тогда
	//	// имена файлов
	//	ИменаФайлов = Новый Соответствие;
	//	// описание печатной формы
	//	ПечатнаяФорма.ТабличныйДокумент = ПечатьПФ_MXL_ЗаявкаПеревозчику(МассивОбъектов, ОбъектыПечати, "ПФ_MXL_ЗаявкаПеревозчику",ПараметрыПечати);
	//	ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Заявка перевозчику'");
	//	ПечатнаяФорма.ПолныйПутьКМакету = "Документ.Scan_ЗаявкаПеревозчику.ПФ_MXL_ЗаявкаПеревозчику";
	//	ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИменаФайлов;
	//КонецЕсли;
КонецПроцедуры

Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	//ДанныеПоВсемОбъектам = Новый Соответствие;
	//
	//Для Каждого ОбъектСсылка Из МассивДокументов Цикл
	//	ДанныеОбъектаПоМакетам = Новый Соответствие;
	//	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
	//		ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка));
	//	КонецЦикла;
	//	ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	//КонецЦикла;
	//
	//ОписаниеОбластей = Новый Соответствие;
	//ДвоичныеДанныеМакетов = Новый Соответствие;
	//ТипыМакетов = Новый Соответствие;
	//
	//Для Каждого ИмяМакета Из МассивИменМакетов Цикл
	//	Если ИмяМакета = "СчетНаОплату(MSWord)" Тогда
	//		ДвоичныеДанныеМакетов.Вставить(ИмяМакета, 
	//			УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплату"));
	//		ТипыМакетов.Вставить(ИмяМакета, "DOC");
	//	ИначеЕсли ИмяМакета = "СчетНаОплату(ODT)" Тогда
	//		ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет._ДемоПФ_ODT_СчетНаОплату"));
	//		ТипыМакетов.Вставить(ИмяМакета, "ODT");
	//	КонецЕсли;
	//	ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	//КонецЦикла;
	//
	//Возврат Новый Структура("Данные, Макеты",
	//	ДанныеПоВсемОбъектам,
	//	Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
	//		ОписаниеОбластей,
	//		ТипыМакетов,
	//		ДвоичныеДанныеМакетов));
	
КонецФункции

#КонецОбласти
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для вызова из дополнительной печатной формы.

// Процедура печати документа.
//
Функция ПечатьПФ_MXL_ЗаявкаПеревозчику(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПФ_MXL_ЗаявкаПеревозчику",ПараметрыПечати = Неопределено) Экспорт
	Scan_СборСтатистики.Scan_Печать(ИмяМакета); // Rarus tenkam 11.04.2022 mantis 18433 +
	ТабличныйДокумент = Новый ТабличныйДокумент;
	//rarus sergei 06.10.2016 mantis 7160 ++
	Если МассивОбъектов.Количество() = 1 Тогда
		ТабличныйДокумент.ИспользуемоеИмяФайла = "ЗаявкаПеревозчику "+ Scan_Печать.ПолучитьНомерДляПечати(МассивОбъектов[0]);
	КонецЕсли;
	//rarus sergei 06.10.2016 mantis 7160 --
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_MXL_ЗаявкаПеревозчику";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Scan_ЗаявкаПеревозчику.ПФ_MXL_ЗаявкаПеревозчику");
	
	Если ПараметрыПечати <> Неопределено Тогда
		ВыводитьГруппировкиИзделий = ПараметрыПечати.ВыводитьГруппировкиИзделий;
		ВыводитьТаможенноеОформление = ПараметрыПечати.ВыводитьТаможенноеОформление;
		ПоказыватьДопУсловия = ПараметрыПечати.ПоказыватьДопУсловия;
		ТОСтранаОтправления = ПараметрыПечати.ТОСтранаОтправления;
		ТОСтранаПрибытия = ПараметрыПечати.ТОСтранаПрибытия;
		Если ПараметрыПечати.Свойство("ДопУсловия") Тогда
			ДопУсловия = ПараметрыПечати.ДопУсловия;
		КонецЕсли;
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь; 
		ОбластьШапкаТаблицы = Scan_Печать.ПривестиМакетПечатнойФормы(Макет,Документ,,ПараметрыПечати);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьНаименованиеУслуги = Макет.ПолучитьОбласть("НаименованиеУслуги");
		ОбластьАннулировано = Макет.ПолучитьОбласть("Аннулировано");
		ОбластьКорректировка = Макет.ПолучитьОбласть("Корректировка");
		//rarus sergei 25.11.2016 mantis 8005 ++
		//Если Документ.Сторнирован = Истина Тогда
		//	ОбластьАннулировано = Макет.ПолучитьОбласть("Аннулировано");			
		//КонецЕсли; 
		//Если Документ.Корректировка = Ложь Тогда
		//	ОбластьШапка.УдалитьОбласть(ОбластьШапка.Область("Корректировка"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		 
		//rarus sergei 25.11.2016 mantis 8005 --
		
		// rarus agar 13.12.2022 19668 ++
		ВыводитьЛоготип = Ложь;
		ПараметрыПечати.Свойство("ВыводитьЛоготип", ВыводитьЛоготип);
		Если ВыводитьЛоготип Тогда
			ОбластьЛоготип = Макет.ПолучитьОбласть("ОбластьЛоготип");
			ФайлЛоготип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Организация, "ФайлЛоготип");
			Если ЗначениеЗаполнено(ФайлЛоготип) Тогда
				ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлЛоготип, Ложь);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					ОбластьЛоготип.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
				КонецЕсли;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьЛоготип);
		КонецЕсли;
		
		СтруктураДанныхБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Организация, "Банк,РасчетныйСчет,КорреспондентскийСчет,БИК");
		ОбластьШапка.Параметры.Банк = СтруктураДанныхБанка.Банк;
		ОбластьШапка.Параметры.РасчетныйСчет = СтруктураДанныхБанка.РасчетныйСчет;
		ОбластьШапка.Параметры.КорреспондентскийСчет = СтруктураДанныхБанка.КорреспондентскийСчет;
		ОбластьШапка.Параметры.БИК = СтруктураДанныхБанка.БИК;
		ОбластьШапка.Параметры.ВебСайт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Документ.Организация, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
		ОбластьШапка.Параметры.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Документ.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
		// rarus agar 13.12.2022 19668 --
		
		ОбластьСтрокаЛиния = Макет.ПолучитьОбласть("СтрокаЛиния");
		СтруктураПараметров=Новый Структура("Наименование,АдресФактический,ТелефонРабочий,Факс","","","тел.: ","Факс: ");  //rarus sergei 03.10.2016 mantis 7162 +
		ОбластьШапка.Параметры.ОрганизацияПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(Документ.Организация,СтруктураПараметров);  //rarus sergei 03.10.2016 mantis 7162 +
		ОбластьШапка.Параметры.НомерДоговора = Документ.ДоговорСПеревозчиком.НомерДоговора;
		ОбластьШапка.Параметры.ДатаНачалаДоговора = Формат(Документ.ДоговорСПеревозчиком.ДатаНачала, "ДЛФ=ДД"); 
		ОбластьШапка.Параметры.КонтрагентДоговора = Scan_Печать.ПолучитьНаименованиеСправочника(Документ.ДоговорСПеревозчиком.Владелец); //rarus sergei 25.10.2016 mantis 7160 + доп. требования
		//ОбластьШапка.Параметры.ТекстЗаголовка = Scan_Печать.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = Scan_Печать.ПолучитьПредставлениеДокумента(Документ);
		ГруппаПродукта = Scan_Печать.ПолучитьПредставлениеГруппыПродукта(Документ);
		ОбластьНаименованиеУслуги.Параметры.ГруппаПродукта = ГруппаПродукта;
		ОбластьНаименованиеУслуги.Параметры.СпособДоставки = Документ.СпособДоставкиИзделий;
		//ОбластьШапка.Параметры.СпособДоставки = Документ.СпособДоставкиИзделий;
		
		//ОбластьШапка.Параметры.ГруппаПродукта = ГруппаПродукта;
		НомерСтраницы = 1;
		// получение необходимых областей
		
		
		ОбластьШапкаТаблицы.Параметры.ГруппаПродукта = ГруппаПродукта; 
		//ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		Если Документ.Сторнирован = Истина Тогда
			ТабличныйДокумент.Вывести(ОбластьАннулировано);			
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		Если Документ.Корректировка = Истина Тогда    
			ОбластьКорректировка.Параметры.ДокументОснование = Scan_Печать.ПолучитьПредставлениеДокумента(Документ.ДокументОснованиеКорректировки,"заявки");
			ТабличныйДокумент.Вывести(ОбластьКорректировка);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьНаименованиеУслуги);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);                                   
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьШапкаТЧКонтакты = Макет.ПолучитьОбласть("ШапкаТЧКонтакты");
		ОбластьШапкаТЧКонтакты.Параметры.ДатаПолучения = Формат(Документ.ДатаПолучения, "ДЛФ=D");
		ОбластьШапкаТЧКонтакты.Параметры.ВремяПолучения = Формат(Документ.ДатаПолучения, "ДЛФ=В");
		// rarus tenkam 21.02.2019 manris 14134 +++
		//ОбластьШапкаТЧКонтакты.Параметры.Грузоотправитель = Scan_Печать.ПолучитьНаименованиеСправочника(Документ.КомпанияОтправитель); //rarus sergei 25.10.2016 mantis 7160 + доп. требования
		// rarus vikhle 14.02.2022 m 18740 +++
		Если Документ.КомпанияОтправитель = Справочники.Scan_Контрагенты.СканияРусь Тогда 
			ОбластьШапкаТЧКонтакты.Параметры.Грузоотправитель = Документ.КомпанияОтправитель.Наименование;
		Иначе	
			ОбластьШапкаТЧКонтакты.Параметры.Грузоотправитель = Документ.КомпанияОтправитель.Наименование + Нстр("ru = ' по поручению СКАНИЯ-РУСЬ ООО'"); // rarus vikhle 31.01.2022 m 18740
		КонецЕсли;	
		// rarus vikhle 14.02.2022 m 18740 ---
		// rarus tenkam 21.02.2019 mantis 14134 --- 
		ОбластьШапкаТЧКонтакты.Параметры.АдресПолучения = Документ.МестоОтгрузки.АдресСкладаФактический;
		ОбластьШапкаТЧКонтакты.Параметры.ДатаДоставки = Формат(Документ.ДатаДоставки, "ДЛФ=D");
		ОбластьШапкаТЧКонтакты.Параметры.ВремяДоставки = Формат(Документ.ДатаДоставки, "ДЛФ=В");
		// rarus tenkam 21.02.2019 mantis 14134 +++
		//ОбластьШапкаТЧКонтакты.Параметры.Грузополучатель = Scan_Печать.ПолучитьНаименованиеСправочника(Документ.КомпанияПолучатель); //rarus sergei 25.10.2016 mantis 7160 + доп. требования
		ОбластьШапкаТЧКонтакты.Параметры.Грузополучатель = Документ.КомпанияПолучатель.Наименование;
		// rarus tenkam 21.02.2019 mantis 14134 ---
		ОбластьШапкаТЧКонтакты.Параметры.АдресДоставки = Документ.МестоДоставки.АдресСкладаФактический;
		Если Документ.КонтактыПолучателя.Количество() > 0 или Документ.КонтактыОтправителя.Количество() > 0 Тогда
			ОбластьШапкаТЧКонтакты.Параметры.КонтактныеЛица = "Контактные лица:";	
		КонецЕсли; 
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		//ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		// заполняем ТЧ
		Если ВыводитьГруппировкиИзделий = Истина Тогда
			ВыборкаТабличнойЧасти = ПолучитьТаблицуИзделий(Документ);
		Иначе
			//rarus abrant 25.04.2017 Mantis 9439 +++
			//ВыборкаТабличнойЧасти = Документ.СоставЗаявки;
			ВыборкаТабличнойЧасти = Документ.СоставЗаявки.выгрузить();
			//rarus abrant 27.04.2017 mantis 9439 +++
			ВыборкаТабличнойЧасти.Колонки.Добавить("НомерИзделия", Новый ОписаниеТипов("Строка"));
			Для итератор = 0 По ВыборкаТабличнойЧасти.Количество() - 1 Цикл
			ВыборкаТабличнойЧасти[итератор].НомерИзделия = Документ.СоставЗаявки[итератор].Изделие.НомерИзделия;			
			КонецЦикла;		
			ВыборкаТабличнойЧасти.Сортировать("НомерИзделия");
			//rarus abrant 27.04.2017 mantis 9439 ---
			НомерСтроки = 1;
			Для каждого Строка из ВыборкаТабличнойЧасти Цикл
				Строка.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки +1;
			КонецЦикла;
			//rarus abrant 25.04.2017 Mantis 9439 ---
		КонецЕсли;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,Scan_Печать.ЗаполнитьПредставлениеДанныхТоварнойСтроки(Макет,СтрокаТЧ,Документ));
			
			НомерСтраницы = Scan_Печать.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, , НомерСтраницы, , Документ,,ОбластьСтрокаЛиния);
			
			//инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				//СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаСкидки,СуммаНДС,СуммаВсего",Документ.ВалютаДокумента,0,0,0);
				НомерСтраницыПредыдущий   = НомерСтраницы;                                                         
				//ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				//ОбластьШапкаТаблицы.Параметры.ЗаголовокТЧ = Scan_Печать.ПолучитьПредставлениеДокумента(Документ);
			КонецЕсли;
			
			////добавляем итоги
			//УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьШапкаТЧКонтакты);
		ОбластьСтрокаКИ = Макет.ПолучитьОбласть("СтрокаКИ");
		Если Документ.КонтактыПолучателя.Количество() > 0 Тогда
			СписокКЛПолучателя = Документы.Scan_ЗаявкаПеревозчику.ПолучитьКЛПолучателя(Документ);
		Иначе
			СписокКЛПолучателя = Новый Массив;
		КонецЕсли;
		Если Документ.КонтактыОтправителя.Количество() > 0 Тогда
			СписокКЛОтправителя = Документы.Scan_ЗаявкаПеревозчику.ПолучитьКЛОтправителя(Документ);
		Иначе
			СписокКЛОтправителя = Новый Массив;	
		КонецЕсли;
		Если СписокКЛОтправителя.КОличество() >= СписокКЛПолучателя.КОличество() Тогда
			СчетчикЦикла = СписокКЛОтправителя.КОличество();
		ИначеЕсли СписокКЛОтправителя.КОличество() < СписокКЛПолучателя.КОличество() Тогда
			СчетчикЦикла = СписокКЛПолучателя.КОличество();
		КонецЕсли;
		Если СчетчикЦикла>0 Тогда
			Для итератор = 0 По СчетчикЦикла Цикл
				Если СписокКЛОтправителя.Количество() > итератор Тогда
					СтрокаКИОтправителя = ОбластьСтрокаКИ.Параметры.Параметр1; 
					СтрокаКИОтправителя = Строка(СписокКЛОтправителя[итератор])+ Символы.ПС;
					СтрокаКИ = Документы.Scan_ЗаявкаПеревозчику.ЗаполнитьКИОтправителя(СписокКЛОтправителя[итератор],Документ);
					СтрокаКИОтправителя = СтрокаКИОтправителя+СтрокаКИ;
					ОбластьСтрокаКИ.Параметры.Параметр1 =СтрокаКИОтправителя;
				Иначе
					ОбластьСтрокаКИ.Параметры.Параметр1 ="";
				КонецЕсли;
				Если СписокКЛПолучателя.Количество() > итератор Тогда
					СтрокаКИПолучателя = ОбластьСтрокаКИ.Параметры.Параметр2; 
					СтрокаКИПолучателя = Строка(СписокКЛПолучателя[итератор])+ Символы.ПС;
					СтрокаКИ = Документы.Scan_ЗаявкаПеревозчику.ЗаполнитьКИПолучателя(СписокКЛПолучателя[итератор],Документ);
					СтрокаКИПолучателя = СтрокаКИПолучателя+СтрокаКИ;
					ОбластьСтрокаКИ.Параметры.Параметр2 = СтрокаКИПолучателя;
				Иначе
					ОбластьСтрокаКИ.Параметры.Параметр2 = "";
				КонецЕсли;
				
				НомерСтраницы = Scan_Печать.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаКИ, ОбластьШапкаТЧКонтакты, , НомерСтраницы, , Документ,,ОбластьСтрокаЛиния);
			КонецЦикла;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьСтрокаЛиния);
		//Заполняем информацию по таможенному оформлению
		
		Если ВыводитьТаможенноеОформление = Истина Тогда
			ОбластьТаможенноеОформление = Макет.ПолучитьОбласть("ТаможенноеОформление");
			ОбластьТаможенноеОформление.Параметры.ИнформацияПоТООтправлителя = ТОСтранаОтправления;
			ОбластьТаможенноеОформление.Параметры.ИнформацияПоТОНазначения = ТОСтранаПрибытия;
			МассивОбластейДляПроверки = Новый Массив;
			МассивОбластейДляПроверки.Добавить(ОбластьТаможенноеОформление);
			РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки);
			Если НЕ РезультатПроверки Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
				НомерСтраницы = НомерСтраницы + 1;
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьТаможенноеОформление);
		КонецЕсли;		
		//Заполняем информацию по доп условиям
		Если ПоказыватьДопУсловия = Истина Тогда
			ОбластьШапкаДопУсловий = Макет.ПолучитьОбласть("ШапкаДопУсловий");
			ТабличныйДокумент.Вывести(ОбластьШапкаДопУсловий);
			ОбластьстрокаДопУсловие = Макет.ПолучитьОбласть("строкаДопУсловие"); 
			номерстроки = 1;
			Для каждого строка Из ДопУсловия Цикл
				ОбластьстрокаДопУсловие.Параметры.Условие = строка(номерстроки)+". "+строка.ДопУсловие;
				НомерСтраницы = Scan_Печать.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьстрокаДопУсловие, ОбластьШапкаДопУсловий, , НомерСтраницы, , Документ);
				номерстроки = номерстроки+1;
			КонецЦикла; 
		КонецЕсли;
		//Если Документ.ВыводитьТаможенноеОформление = Ложь И Документ.ПоказыватьДопУсловия = Ложь Тогда
		//	ТабличныйДокумент.Вывести(ОбластьСтрокаЛиния); 
		//КонецЕсли; 

		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОБластьПодвал.Параметры.Организация = Scan_Печать.ПолучитьНаименованиеСправочника(Документ.Организация);  //rarus sergei 25.10.2016 mantis 7160 + доп. требования
		ОбластьПодвал.Параметры.Автор = "/"+Документ.Автор+"/";
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
				
	КонецЦикла;
	Возврат ТабличныйДокумент;
КонецФункции
//rarus sergei 12.09.2016 mantis 7160 --

//rarus sergei 06.12.2016 mantis 7164 ++
Функция ПечатьПФ_MXL_ТранспортнаяНакладная(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПФ_MXL_ТранспортнаяНакладная",ПараметрыПечати = Неопределено) Экспорт
	
	Scan_СборСтатистики.Scan_Печать(ИмяМакета); // Rarus tenkam 11.04.2022 mantis 18433 +
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_MXL_ЗаявкаПеревозчику";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Scan_ЗаявкаПеревозчику.ПФ_MXL_ТранспортнаяНакладная");
	
	КонтрагентПриОтгрузкеИзПорта = Scan_ПраваИНастройки.Scan_Право("КонтрагентПриОтгрузкеИзПорта"); //rarus kabany 15.04.2021 17614 +

	ПервыйДокумент = Истина;
		
	Для Каждого ДанныеПечати Из ПараметрыПечати.МассивВыбранныхИзделий Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ПараметрыПечати.Свойство("Лицевая") Тогда	//rarus tenkam 23.06.2017 mantis 10064 +
			
			ОбластьМакета = Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона");
			//ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
			ОбластьМакета.Параметры.Дата = Формат(МассивОбъектов.Дата,"ДЛФ=Д");
			СтрокаТЧ = МассивОбъектов.СоставЗаявки.Найти(ДанныеПечати,"Изделие");
			ОбластьМакета.Параметры.Номер = МассивОбъектов.Номер + "-"+ СтрокаТЧ.НомерСтроки;
			//rarus tenkam 16.03.2017 mantis 7623 ++
			//СтруктураПараметров=Новый Структура("Наименование,АдресФактический","","");
			СтруктураПараметров = Новый Структура("Наименование,АдресЮридический","","");
			//rarus tenkam 16.03.2017 mantis 7623 ---
			
			Если ТипЗнч(МассивОбъектов.КомпанияОтправитель)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ОбластьМакета.Параметры.ГрузоотправительПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияОтправитель,СтруктураПараметров);
			//Иначе		//rarus tenkam 24.10.2017 mantis 11439 +	
			//    ОбластьМакета.Параметры.ГрузоотправительПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияОтправитель.Контрагент,СтруктураПараметров);		//rarus tenkam 24.10.2017 mantis 11439 +
			КонецЕсли; 
			Если ТипЗнч(МассивОбъектов.КомпанияПолучатель)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ОбластьМакета.Параметры.ГрузополучательПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияПолучатель,СтруктураПараметров);
			//Иначе		//rarus tenkam 24.10.2017 mantis 11439 +	
			//    ОбластьМакета.Параметры.ГрузополучательПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияПолучатель.Контрагент,СтруктураПараметров);		//rarus tenkam 24.10.2017 mantis 11439 +
			КонецЕсли;
			//
			Если ДанныеПечати.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства Тогда
				Если ДанныеПечати.МодельПТС <> "" Тогда
					ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МодельПТС) + " на шасси " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № шасси " + строка(ДанныеПечати.НомерИзделия); 
				Иначе 
					//rarus anch 10.03.2017 mantis 7164 +++
					//ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " на шасси " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № шасси " + строка(ДанныеПечати.НомерИзделия);
					ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № шасси " + строка(ДанныеПечати.НомерИзделия);
					//rarus anch 10.03.2017 mantis 7164 ---
				КонецЕсли;
			Иначе
				ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № двигателя "	+ строка(ДанныеПечати.НомерДвигателяТС);
			КонецЕсли;
			//rarus tenkam 21.02.2017 mantis 7164 +++
			//ТекПродукт = РегистрыСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.ПолучитьПродуктПоИзделию(ДанныеПечати);	//rarus tenkam 10.03.2017 mantis 6897 +
			ПарамПредмИсч = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
			//rarus tenkam 10.03.2017 mantis 6897 +++
			//ОбластьМакета.Параметры.Пункт5_3 = Строка(ТекПродукт.СебестоимостьЛогистическая) + " (" + ЧислоПрописью(ТекПродукт.СебестоимостьЛогистическая,,ПарамПредмИсч) + ")"; 
			//rarus tenkam 25.10.2017 mantis 11182 +++
			Если СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
				СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ
				СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК Тогда
				
					ОбластьМакета.Параметры.Пункт5_3 = Строка(ДанныеПечати.СтоимостьПродажи) + " (" + ЧислоПрописью(ДанныеПечати.СтоимостьПродажи,,ПарамПредмИсч) + ")"; 
			Иначе				
			//rarus tenkam 25.10.2017 mantis 11182 ---			
				ОбластьМакета.Параметры.Пункт5_3 = Строка(ДанныеПечати.СебестоимостьЛогистическая) + " (" + ЧислоПрописью(ДанныеПечати.СебестоимостьЛогистическая,,ПарамПредмИсч) + ")"; 
			КонецЕсли;	//rarus tenkam 25.10.2017 mantis 11182 +		
			//rarus tenkam 10.03.2017 mantis 6897 ---
			//rarus tenkam 21.02.2017 mantis 7164 ---
			
			//rarus kabany 15.04.2021 17614 +++
			Если ЗначениеЗаполнено(КонтрагентПриОтгрузкеИзПорта) и КонтрагентПриОтгрузкеИзПорта = МассивОбъектов.КомпанияОтправитель    Тогда
				ОбластьМакета.Параметры.Пункт6_31 = Формат(МассивОбъектов.ДатаПолучения, "ДЛФ=Д");  
				//rarus kabany 19.04.2021 17614 +++
				Если МассивОбъектов.КонтактыОтправителя.Количество() > 0 Тогда
				ОбластьМакета.Параметры.Пункт6_6 = МассивОбъектов.КонтактыОтправителя[0].КонтактноеЛицо;
				КонецЕсли;
				//rarus kabany 19.04.2021 17614 ---
				Если МассивОбъектов.СпособДоставкиИзделий = Перечисления.Scan_СпособыДоставкиПродуктов.СвоимХодом Тогда
				ОбластьМакета.Параметры.СопрДокументы = "ЭПТС и ОСАГО";	
				ИначеЕсли МассивОбъектов.СпособДоставкиИзделий = Перечисления.Scan_СпособыДоставкиПродуктов.Автовозом Тогда
				ОбластьМакета.Параметры.СопрДокументы = "ЭПТС";		
				КонецЕсли;
			КонецЕсли;
			//rarus kabany 15.04.2021 17614 ---
			
			ОбластьМакета.Параметры.АдресМестаПогрузки = строка(МассивОбъектов.МестоОтгрузки.АдресСкладаФактический);
			ОбластьМакета.Параметры.Пункт6_4 = "См. акт № " + ДанныеПечати.НомерИзделия;		//rarus tenkam 21.02.2017 mantis 7164 +
			ОбластьМакета.Параметры.АдресМестаВыгрузки = строка(МассивОбъектов.МестоДоставки.АдресСкладаФактический);
			ОбластьМакета.Параметры.Пункт7_4 = "См. акт № " + ДанныеПечати.НомерИзделия;		//rarus tenkam 21.02.2017 mantis 7164 +
			
			//rarus tenkam 23.06.2017 mantis 10064 +++
			//ОбластьМакетаОборотная = Макет.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона");
			//ОбластьМакетаОборотная.Параметры.ПредставлениеПеревозчика = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.Перевозчик,СтруктураПараметров);
			//				
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();				
			//ТабличныйДокумент.Вывести(ОбластьМакетаОборотная);
		
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		Если ПараметрыПечати.Свойство("Лицевая") И ПараметрыПечати.Свойство("Оборотная") Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
		КонецЕсли;
		Если ПараметрыПечати.Свойство("оборотная") Тогда
			ОбластьМакетаОборотная = Макет.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона");
			ОбластьМакетаОборотная.Параметры.ПредставлениеПеревозчика = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.Перевозчик,СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакетаОборотная);
		КонецЕсли;
		//rarus tenkam 23.06.2017 mantis 10064 ---
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;	
	Возврат ТабличныйДокумент;
КонецФункции
//rarus sergei 06.12.2016 mantis 7164 --

//rarus agar 17.03.2021 17274 ++
Функция ПечатьПФ_MXL_ТранспортнаяНакладная2200(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПФ_MXL_ТранспортнаяНакладная2200",ПараметрыПечати = Неопределено) Экспорт
	
	Scan_СборСтатистики.Scan_Печать(ИмяМакета); // Rarus tenkam 11.04.2022 mantis 18433 +
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_MXL_ТранспортнаяНакладная2200";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Scan_ЗаявкаПеревозчику.ПФ_MXL_ТранспортнаяНакладная2200");
	
	КонтрагентПриОтгрузкеИзПорта = Scan_ПраваИНастройки.Scan_Право("КонтрагентПриОтгрузкеИзПорта"); //rarus kabany 15.04.2021 17614 +
	
	ПервыйДокумент = Истина;
		
	Для Каждого ДанныеПечати Из ПараметрыПечати.МассивВыбранныхИзделий Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ПараметрыПечати.Свойство("Лицевая") Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона");
			
			СтрокаТЧ = МассивОбъектов.СоставЗаявки.Найти(ДанныеПечати,"Изделие");
			
			ОбластьМакета.Параметры.Пункт0_3 = МассивОбъектов.Номер + "-"+ СтрокаТЧ.НомерСтроки;
			ОбластьМакета.Параметры.Дата     = Формат(МассивОбъектов.Дата, "ДЛФ=Д");
			ОбластьМакета.Параметры.Номер    = МассивОбъектов.Номер;
			
			СтруктураПараметров = Новый Структура("Наименование,ИНН,АдресЮридический","","");
			
			// rarus agar 28.12.2022 19668 ++
			//КомпанияОтправитель = ПредопределенноеЗначение("Справочник.Scan_Контрагенты.СканияРусь");
			КомпанияОтправитель = МассивОбъектов.Организация;
			// rarus agar 28.12.2022 19668 --
			КомпанияОтправительПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(КомпанияОтправитель, СтруктураПараметров);
			
			ОбластьМакета.Параметры.ГрузоотправительПредставление = КомпанияОтправительПредставление;
			ОбластьМакета.Параметры.КлиентПредставление           = КомпанияОтправительПредставление;
			
			Если ТипЗнч(МассивОбъектов.КомпанияПолучатель)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ОбластьМакета.Параметры.ГрузополучательПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияПолучатель,СтруктураПараметров);
			КонецЕсли;
			
			Если ДанныеПечати.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства Тогда
				Если ДанныеПечати.МодельПТС <> "" Тогда
					ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МодельПТС) + " на шасси " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № шасси " + строка(ДанныеПечати.НомерИзделия);
				Иначе 
					ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № шасси " + строка(ДанныеПечати.НомерИзделия);
				КонецЕсли;
			Иначе
				ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № двигателя "	+ строка(ДанныеПечати.НомерДвигателяТС);
			КонецЕсли;
			
			ПарамПредмИсч = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
			Если СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
				СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ
				СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК Тогда
				
				ОбластьМакета.Параметры.ЦенностьГруза = Строка(ДанныеПечати.СтоимостьПродажи) + " (" + ЧислоПрописью(ДанныеПечати.СтоимостьПродажи,,ПарамПредмИсч) + ")";
			Иначе
				ОбластьМакета.Параметры.ЦенностьГруза = Строка(ДанныеПечати.СебестоимостьЛогистическая) + " (" + ЧислоПрописью(ДанныеПечати.СебестоимостьЛогистическая,,ПарамПредмИсч) + ")";
			КонецЕсли;
			
			Если МассивОбъектов.СпособДоставкиИзделий = ПредопределенноеЗначение("Перечисление.Scan_СпособыДоставкиПродуктов.СвоимХодом") Тогда
				ОбластьМакета.Параметры.Пункт5_1 = "Доставка осуществляется своим ходом";
			КонецЕсли;
			
			Если ТипЗнч(МассивОбъектов.КомпанияОтправитель)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ОбластьМакета.Параметры.ЛицоПриемПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияОтправитель,СтруктураПараметров);
			КонецЕсли;
			//rarus kabany 15.04.2021 17614 +++
			Если ЗначениеЗаполнено(КонтрагентПриОтгрузкеИзПорта) и КонтрагентПриОтгрузкеИзПорта = МассивОбъектов.КомпанияОтправитель    Тогда
				ОбластьМакета.Параметры.Пункт6_31 = Формат(МассивОбъектов.ДатаПолучения, "ДЛФ=Д");  
				//rarus kabany 19.04.2021 17614 +++
				Если МассивОбъектов.КонтактыОтправителя.Количество() > 0 Тогда
					ОбластьМакета.Параметры.Пункт6_6 = МассивОбъектов.КонтактыОтправителя[0].КонтактноеЛицо;
				КонецЕсли;
				//rarus kabany 19.04.2021 17614 ---
				Если МассивОбъектов.СпособДоставкиИзделий = Перечисления.Scan_СпособыДоставкиПродуктов.СвоимХодом Тогда
				ОбластьМакета.Параметры.СопрДокументы = "ЭПТС и ОСАГО";	
				ИначеЕсли МассивОбъектов.СпособДоставкиИзделий = Перечисления.Scan_СпособыДоставкиПродуктов.Автовозом Тогда
				ОбластьМакета.Параметры.СопрДокументы = "ЭПТС";		
				КонецЕсли;
			КонецЕсли;
			//rarus kabany 15.04.2021 17614 ---
			ОбластьМакета.Параметры.АдресМестаПогрузки = строка(МассивОбъектов.МестоОтгрузки.АдресСкладаФактический);
			ОбластьМакета.Параметры.Пункт6_4 = "См. акт № " + ДанныеПечати.НомерИзделия;
			
			ОбластьМакета.Параметры.АдресМестаВыгрузки = строка(МассивОбъектов.МестоДоставки.АдресСкладаФактический);
			ОбластьМакета.Параметры.Пункт7_4 = "См. акт № " + ДанныеПечати.НомерИзделия;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		Если ПараметрыПечати.Свойство("Лицевая") И ПараметрыПечати.Свойство("Оборотная") Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		Если ПараметрыПечати.Свойство("оборотная") Тогда
			ОбластьМакетаОборотная = Макет.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона");
			ОбластьМакетаОборотная.Параметры.Пункт10_2 = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.Перевозчик,СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакетаОборотная);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
//rarus agar 17.03.2021 17274 --

//rarus tenkam 23.08.2017 mantis 9444 +++
Функция ПолучитьЗаявкиНаДействие(ЗаявкаПеревозчикуСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуДокументыОснования.Документ.Ссылка КАК ДокументСсылка
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.ДокументыОснования КАК Scan_ЗаявкаПеревозчикуДокументыОснования
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка = &ЗаявкаПеревозчикуСсылка
		|	И ТИПЗНАЧЕНИЯ(Scan_ЗаявкаПеревозчикуДокументыОснования.Документ.Ссылка) = ТИП(Документ.Scan_ЗаявкаНаДействие)
		|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Документ.Сторнирован = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Документ.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Документ.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)";
	
	Запрос.УстановитьПараметр("ЗаявкаПеревозчикуСсылка", ЗаявкаПеревозчикуСсылка);
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	МассивЗаявок = Новый Массив;
	Если ТабРезультат.Количество() <> 0 Тогда
		МассивЗаявок = ТабРезультат.ВыгрузитьКолонку("ДокументСсылка");
	КонецЕсли;
	Возврат МассивЗаявок;	
КонецФункции
//rarus tenkam 23.08.2017 mantis 9444 ---

Функция ПечатьПФ_MXL_ТранспортнаяНакладная2116(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПФ_MXL_ТранспортнаяНакладная2116", ПараметрыПечати = Неопределено) Экспорт // rarus vikhle 01.02.2022 m 18740 +++
	
	Scan_СборСтатистики.Scan_Печать(ИмяМакета); // Rarus tenkam 11.04.2022 mantis 18433 +
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_MXL_ТранспортнаяНакладная2116";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Scan_ЗаявкаПеревозчику.ПФ_MXL_ТранспортнаяНакладная2116");
	
	КонтрагентПриОтгрузкеИзПорта = Scan_ПраваИНастройки.Scan_Право("КонтрагентПриОтгрузкеИзПорта");
	
	ПервыйДокумент = Истина;
		
	Для Каждого ДанныеПечати Из ПараметрыПечати.МассивВыбранныхИзделий Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ПараметрыПечати.Свойство("Лицевая") Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона");
			
			СтрокаТЧ = МассивОбъектов.СоставЗаявки.Найти(ДанныеПечати,"Изделие");
			
			ОбластьМакета.Параметры.Пункт0_3 = МассивОбъектов.Номер + "-"+ СтрокаТЧ.НомерСтроки;
			ОбластьМакета.Параметры.Дата     = Формат(МассивОбъектов.Дата, "ДЛФ=Д");
			ОбластьМакета.Параметры.Номер    = МассивОбъектов.Номер;
			
			СтруктураПараметров = Новый Структура("Наименование, ИНН, АдресЮридический", "", "");
			
			// rarus agar 28.12.2022 19668 ++
			//КомпанияОтправитель = ПредопределенноеЗначение("Справочник.Scan_Контрагенты.СканияРусь");
			КомпанияОтправитель = МассивОбъектов.Организация;
			// rarus agar 28.12.2022 19668 --
			
			КомпанияОтправительПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(КомпанияОтправитель, СтруктураПараметров);
			
			ОбластьМакета.Параметры.ГрузоотправительПредставление = КомпанияОтправительПредставление;
			
			Если ТипЗнч(МассивОбъектов.КомпанияПолучатель)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ОбластьМакета.Параметры.ГрузополучательПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияПолучатель,СтруктураПараметров);
			КонецЕсли;
			
			Если ДанныеПечати.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства Тогда
				Если ДанныеПечати.МодельПТС <> "" Тогда
					ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МодельПТС) + " на шасси " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № шасси " + строка(ДанныеПечати.НомерИзделия);
				Иначе 
					ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № шасси " + строка(ДанныеПечати.НомерИзделия);
				КонецЕсли;
			Иначе
				ОбластьМакета.Параметры.НаименованиеГрузаПредставление1 = строка(ДанныеПечати.ТипПродуктаЛогистический) + " " + строка(ДанныеПечати.МаркаПродукта) + " " + строка(ДанныеПечати.МодельПродукта) + " № двигателя "	+ строка(ДанныеПечати.НомерДвигателяТС);
			КонецЕсли;
			
			ПарамПредмИсч = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
			Если СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
				СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ
				СтрокаТЧ.ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК Тогда
				
				ОбластьМакета.Параметры.ЦенностьГруза = Строка(ДанныеПечати.СтоимостьПродажи) + " (" + ЧислоПрописью(ДанныеПечати.СтоимостьПродажи,,ПарамПредмИсч) + ")";
			Иначе
				ОбластьМакета.Параметры.ЦенностьГруза = Строка(ДанныеПечати.СебестоимостьЛогистическая) + " (" + ЧислоПрописью(ДанныеПечати.СебестоимостьЛогистическая,,ПарамПредмИсч) + ")";
			КонецЕсли;
			
			Если МассивОбъектов.СпособДоставкиИзделий = ПредопределенноеЗначение("Перечисление.Scan_СпособыДоставкиПродуктов.СвоимХодом") Тогда
				ОбластьМакета.Параметры.Пункт5_1 = "Доставка осуществляется своим ходом";
			КонецЕсли;
			
			ОбластьМакета.Параметры.Пункт6_1 = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.Перевозчик,СтруктураПараметров);
			
			//rarus vikhle 14.02.2022 m 18740 +++
			//Если ТипЗнч(МассивОбъектов.КомпанияОтправитель)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
			//	ОбластьМакета.Параметры.ЛицоПриемПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияОтправитель,СтруктураПараметров);
			//КонецЕсли;
			//rarus vikhle 14.02.2022 m 18740 ---
			
			ОбластьМакета.Параметры.АдресМестаВыгрузки = Строка(МассивОбъектов.МестоДоставки.АдресСкладаФактический); //rarus vikhle 04.02.2022 m 18740
			//rarus vikhle 14.02.2022 m 18740 +++
			//ОбластьМакета.Параметры.Пункт8_2 = МассивОбъектов.ДатаПолучения;
			//ОбластьМакета.Параметры.Пункт8_4 = "См. акт № " + ДанныеПечати.НомерИзделия;
			//rarus vikhle 14.02.2022 m 18740 ---
			
			Если ЗначениеЗаполнено(КонтрагентПриОтгрузкеИзПорта) и КонтрагентПриОтгрузкеИзПорта = МассивОбъектов.КомпанияОтправитель    Тогда
				// rarus vikhle 14.02.2022 m 18740 +++
				//ОбластьМакета.Параметры.Пункт8_3 = Формат(МассивОбъектов.ДатаПолучения, "ДЛФ=Д");  
				
				//Если МассивОбъектов.КонтактыОтправителя.Количество() > 0 Тогда
				//	ОбластьМакета.Параметры.Пункт8_6 = МассивОбъектов.КонтактыОтправителя[0].КонтактноеЛицо;
				//КонецЕсли;
				// rarus vikhle 14.02.2022 m 18740 ---
				
				Если МассивОбъектов.СпособДоставкиИзделий = Перечисления.Scan_СпособыДоставкиПродуктов.СвоимХодом Тогда
				//ОбластьМакета.Параметры.СопрДокументы = "ЭПТС и ОСАГО";	
					ОбластьМакета.Параметры.СопрДокументы = "Выписка из ЭПТС/ЭПШТС и полис ОСАГО";//rarus vikhle 14.02.2022 m 18740
				ИначеЕсли МассивОбъектов.СпособДоставкиИзделий = Перечисления.Scan_СпособыДоставкиПродуктов.Автовозом Тогда
				//ОбластьМакета.Параметры.СопрДокументы = "ЭПТС";		
					ОбластьМакета.Параметры.СопрДокументы = "Выписка из ЭПТС/ЭПШТС"; //rarus vikhle 14.02.2022 m 18740
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("Лицевая") И ПараметрыПечати.Свойство("Оборотная") Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("Оборотная") Тогда
			ОбластьМакетаОборотная = Макет.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона");
			
			//rarus vikhle 14.02.2022 m 18740 +++
			Если ТипЗнч(МассивОбъектов.КомпанияОтправитель)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ОбластьМакетаОборотная.Параметры.ЛицоПриемПредставление = Scan_Печать.ПолучитьПредставлениеСправочника(МассивОбъектов.КомпанияОтправитель,СтруктураПараметров);
			КонецЕсли;
			ОбластьМакетаОборотная.Параметры.АдресМестаПогрузки = строка(МассивОбъектов.МестоОтгрузки.АдресСкладаФактический);
			
			ОбластьМакетаОборотная.Параметры.Пункт8_2 = МассивОбъектов.ДатаПолучения;
			ОбластьМакетаОборотная.Параметры.Пункт8_4 = "См. акт № " + ДанныеПечати.НомерИзделия;
			
			Если ЗначениеЗаполнено(КонтрагентПриОтгрузкеИзПорта) и КонтрагентПриОтгрузкеИзПорта = МассивОбъектов.КомпанияОтправитель    Тогда
				ОбластьМакетаОборотная.Параметры.Пункт8_3 = Формат(МассивОбъектов.ДатаПолучения, "ДЛФ=Д");  
				
				Если МассивОбъектов.КонтактыОтправителя.Количество() > 0 Тогда
					ОбластьМакетаОборотная.Параметры.Пункт8_6 = МассивОбъектов.КонтактыОтправителя[0].КонтактноеЛицо;
				КонецЕсли;
				
			КонецЕсли;	
			
			//rarus vikhle 14.02.2022 m 18740 ---
			
			ОбластьМакетаОборотная.Параметры.АдресМестаВыгрузки = Строка(МассивОбъектов.МестоДоставки.АдресСкладаФактический);
			ОбластьМакетаОборотная.Параметры.Пункт10_1 = МассивОбъектов.ДатаДоставки;
			ОбластьМакетаОборотная.Параметры.Пункт10_4 = "См. акт № " + ДанныеПечати.НомерИзделия;
						
			ТабличныйДокумент.Вывести(ОбластьМакетаОборотная);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
	
КонецФункции // rarus vikhle 01.02.2022 m 18740 ---	

// rarus agar 05.03.2022 15689 ++
Функция ПечатьПФ_MXL_ДетализированныйАкт_Старая(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПФ_MXL_ДетализированныйАкт", ПараметрыПечати = Неопределено) Экспорт
	
	Scan_СборСтатистики.Scan_Печать(ИмяМакета); // Rarus tenkam 11.04.2022 mantis 18433 +
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_MXL_ДетализированныйАкт";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Scan_ЗаявкаПеревозчику.ПФ_MXL_ДетализированныйАкт");
	
	КонтрагентПриОтгрузкеИзПорта = Scan_ПраваИНастройки.Scan_Право("КонтрагентПриОтгрузкеИзПорта");
	ТелефонПриемаТСАктПриемаПередачи = Scan_ПраваИНастройки.Scan_Право("ТелефонПриемаТСАктПриемаПередачи");
	ТелефонВнештатныхСитуацийАктПриемаПередачи = Scan_ПраваИНастройки.Scan_Право("ТелефонВнештатныхСитуацийАктПриемаПередачи");
	
	ПервыйДокумент = Истина;
	НомерСтраницы  = 1;
	
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		Для Каждого Продукт Из ПараметрыПечати.МассивПродуктов Цикл
			НомерСтраницы  = 1;
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент    = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ОпцииСпецификации = ОпцииСпецификацииДляДетализированногоАкта(Продукт);
			
			ПеревозчикНаименование  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка.Перевозчик, "НаименованиеСокращенноеДоп");
			ОтправительНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка.КомпанияОтправитель, "НаименованиеСокращенноеДоп");
			ПолучательНаименование  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка.КомпанияПолучатель, "НаименованиеСокращенноеДоп");
			
			#Область Шапка
			
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			
			Если ПараметрыПечати.ЗаполнятьКонтрагентов Тогда
				Сдал1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					Сдал1 = ПеревозчикНаименование;
				Иначе
					Сдал1 = ОтправительНаименование;
				КонецЕсли;
				ОбластьШапка.Параметры.Сдал1 = Сдал1;
				
				Принял1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					Принял1 = ПолучательНаименование;
				Иначе
					Принял1 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьШапка.Параметры.Принял1 = Принял1;
				
				Сдал2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					Сдал2 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьШапка.Параметры.Сдал2 = Сдал2;
				
				Принял2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					Принял2 = ПолучательНаименование;
				КонецЕсли;
				ОбластьШапка.Параметры.Принял2 = Принял2;
			КонецЕсли;
			
			ЗначениеРеквизитовПродукта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Продукт, "НомерИзделия,ЦветКабиныПТС");
			
			ОбластьШапка.Параметры.НомерШасси        = ЗначениеРеквизитовПродукта.НомерИзделия;
			ОбластьШапка.Параметры.ЦветКабиныПТС     = ЗначениеРеквизитовПродукта.ЦветКабиныПТС;
			ОбластьШапка.Параметры.ТелефонПриемка    = ТелефонПриемаТСАктПриемаПередачи;
			ОбластьШапка.Параметры.ТелефонВнештатный = ТелефонВнештатныхСитуацийАктПриемаПередачи;
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			#КонецОбласти
			
			#Область ОпцииСпецификации
			
			ВысотаСтрока1  = 0;
			ВысотаСтрока15 = 0;
			ВысотаСтрока32 = 0;
			
			ВысотаРазделитель = 0;
			
			НомерСтроки = 1;
			
			ОбластьНомерШасси    = Макет.ПолучитьОбласть("НомерШасси");
			ОбластьНомерШасси.Параметры.НомерШасси = ЗначениеРеквизитовПродукта.НомерИзделия;
			
			ОбластьНомерСтраницы = Макет.ПолучитьОбласть("НомерСтраницы");
			
			Для Каждого ОпцияСпецификации Из ОпцииСпецификации Цикл
				Если    НомерСтроки = 2 
					Или НомерСтроки = 16
					Или НомерСтроки = 33
					Тогда
					ОбластьСтрока2 = Макет.ПолучитьОбласть("Строка2");
					ОбластьСтрока2.Параметры.НомерСтроки = НомерСтроки;
					ОбластьСтрока2.Параметры.НаименованиеОпции = ОпцияСпецификации.ПредставлениеДляДетализированногоАкта;
					
					МассивОбластей = Новый Массив;
					МассивОбластей.Добавить(ОбластьСтрока2);
					МассивОбластей.Добавить(ОбластьНомерСтраницы);
					Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
						ТабличныйДокумент.Вывести(ОбластьСтрока2);
					Иначе
						ВысотаРазделитель = ТабличныйДокумент.ВысотаТаблицы + 1;
						
						ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
						ТабличныйДокумент.Вывести(ОбластьНомерСтраницы);
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабличныйДокумент.Вывести(ОбластьНомерШасси);
						ТабличныйДокумент.Вывести(ОбластьСтрока2);
						
						НомерСтраницы = НомерСтраницы + 1;
					КонецЕсли;
				Иначе
					ОбластьСтрока1 = Макет.ПолучитьОбласть("Строка1");
					ОбластьСтрока1.Параметры.НомерСтроки = НомерСтроки;
					ОбластьСтрока1.Параметры.НаименованиеОпции = ОпцияСпецификации.ПредставлениеДляДетализированногоАкта;
					
					Если НомерСтроки = 1 Тогда
						Если ПараметрыПечати.ЗаполнятьКонтрагентов Тогда
							ПримечаниеСдал1 = "";
							Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
								ПримечаниеСдал1 = ПеревозчикНаименование;
							Иначе
								ПримечаниеСдал1 = ОтправительНаименование;
							КонецЕсли;
							ОбластьСтрока1.Параметры.ПримечаниеСдал = ПримечаниеСдал1;
							
							ПримечаниеПринял1 = "";
							Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
								ПримечаниеПринял1 = ПолучательНаименование;
							Иначе
								ПримечаниеПринял1 = ПеревозчикНаименование;
							КонецЕсли;
							ОбластьСтрока1.Параметры.ПримечаниеПринял = ПримечаниеПринял1;
						КонецЕсли;
						
						ВысотаСтрока1 = ТабличныйДокумент.ВысотаТаблицы + 1;
					ИначеЕсли НомерСтроки = 15 Тогда
						Если ПараметрыПечати.ЗаполнятьКонтрагентов Тогда
							ПримечаниеСдал2 = "";
							Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
								ПримечаниеСдал2 = ПеревозчикНаименование;
							КонецЕсли;
							ОбластьСтрока1.Параметры.ПримечаниеСдал = ПримечаниеСдал2;
							
							ПримечаниеПринял2 = "";
							Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
								ПримечаниеПринял2 = ПолучательНаименование;
							КонецЕсли;
							ОбластьСтрока1.Параметры.ПримечаниеПринял = ПримечаниеПринял2;
						КонецЕсли;
						
						ВысотаСтрока15 = ТабличныйДокумент.ВысотаТаблицы + 1;
					ИначеЕсли НомерСтроки = 32 Тогда
						ВысотаСтрока32 = ТабличныйДокумент.ВысотаТаблицы + 1;
					КонецЕсли;
					
					МассивОбластей = Новый Массив;
					МассивОбластей.Добавить(ОбластьСтрока1);
					МассивОбластей.Добавить(ОбластьНомерСтраницы);
					Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
						ТабличныйДокумент.Вывести(ОбластьСтрока1);
					Иначе
						ВысотаРазделитель = ТабличныйДокумент.ВысотаТаблицы + 1;
						
						ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
						ТабличныйДокумент.Вывести(ОбластьНомерСтраницы);
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабличныйДокумент.Вывести(ОбластьНомерШасси);
						ТабличныйДокумент.Вывести(ОбластьСтрока1);
						
						НомерСтраницы = НомерСтраницы + 1;
					КонецЕсли;
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
			Если ВысотаСтрока15 <> 0 Тогда
				ОбластьПримечания1 = ТабличныйДокумент.Область(ВысотаСтрока1 + 2, 16, ВысотаСтрока15 - 1, 19);
				ОбластьПримечания1.Объединить();
				
				ОбластьРаздела1 = ТабличныйДокумент.Область(ВысотаСтрока1, 20, ВысотаСтрока15 - 1, 20);
				ОбластьРаздела1.Объединить();
				ОбластьРаздела1.Текст = "1";
				ОбластьРаздела1.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
				ОбластьРаздела1.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ИначеЕсли ВысотаСтрока1 <> 0 Тогда
				ОбластьПримечания1 = ТабличныйДокумент.Область(ВысотаСтрока1 + 2, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
				ОбластьПримечания1.Объединить();
				
				ОбластьРаздела1 = ТабличныйДокумент.Область(ВысотаСтрока1, 20, ТабличныйДокумент.ВысотаТаблицы, 20);
				ОбластьРаздела1.Объединить();
				ОбластьРаздела1.Текст = "1";
				ОбластьРаздела1.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
				ОбластьРаздела1.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			КонецЕсли;
			
			Если ВысотаСтрока32 <> 0 Тогда
				Если ВысотаРазделитель >= ВысотаСтрока32 Тогда
					ОбластьПримечания2 = ТабличныйДокумент.Область(ВысотаСтрока15 + 2, 16, ВысотаСтрока32 - 1, 19);
					ОбластьПримечания2.Объединить();
					
					ОбластьРаздела2 = ТабличныйДокумент.Область(ВысотаСтрока15, 20, ВысотаСтрока32 - 1, 20);
					ОбластьРаздела2.Объединить();
					ОбластьРаздела2.Текст = "2";
					ОбластьРаздела2.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела2.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
					Если ВысотаСтрока32 = ВысотаРазделитель Тогда
						
					ИначеЕсли ВысотаСтрока32 + 1 = ВысотаРазделитель Тогда
						ОбластьРаздела3_1 = ТабличныйДокумент.Область(ВысотаСтрока32, 20, ВысотаРазделитель - 1, 20);
						ОбластьРаздела3_1.Объединить();
						ОбластьРаздела3_1.Текст = "3";
						ОбластьРаздела3_1.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
						ОбластьРаздела3_1.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
						ОбластьРаздела3_1.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
						ОбластьРаздела3_1.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
						ОбластьРаздела3_1.Шрифт = Новый Шрифт("Arial", 12, Истина);
					ИначеЕсли ВысотаСтрока32 + 2 = ВысотаРазделитель Тогда
						ОбластьРаздела3_1 = ТабличныйДокумент.Область(ВысотаСтрока32, 20, ВысотаРазделитель - 1, 20);
						ОбластьРаздела3_1.Объединить();
						ОбластьРаздела3_1.Текст = "3";
						ОбластьРаздела3_1.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
						ОбластьРаздела3_1.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
						ОбластьРаздела3_1.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
						ОбластьРаздела3_1.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
						ОбластьРаздела3_1.Шрифт = Новый Шрифт("Arial", 12, Истина);
					ИначеЕсли ВысотаСтрока32 + 2 < ВысотаРазделитель Тогда
						ОбластьПримечания3_1 = ТабличныйДокумент.Область(ВысотаСтрока32 + 2, 16, ВысотаРазделитель - 1, 19);
						ОбластьПримечания3_1.Объединить();
						
						ОбластьРаздела3_1 = ТабличныйДокумент.Область(ВысотаСтрока32, 20, ВысотаРазделитель - 1, 20);
						ОбластьРаздела3_1.Объединить();
						ОбластьРаздела3_1.Текст = "3";
						ОбластьРаздела3_1.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
						ОбластьРаздела3_1.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
						ОбластьРаздела3_1.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
						ОбластьРаздела3_1.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
						ОбластьРаздела3_1.Шрифт = Новый Шрифт("Arial", 12, Истина);
					КонецЕсли;
					
					Если ВысотаСтрока32 = ВысотаРазделитель Тогда
						ОбластьПримечания3_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 4, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
						ОбластьПримечания3_2.Объединить();
					ИначеЕсли ВысотаСтрока32 + 1 = ВысотаРазделитель Тогда
						ОбластьПримечания3_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 3, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
						ОбластьПримечания3_2.Объединить();
					Иначе
						ОбластьПримечания3_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 2, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
						ОбластьПримечания3_2.Объединить();
					КонецЕсли;
					
					ОбластьРаздела3_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 2, 20, ТабличныйДокумент.ВысотаТаблицы, 20);
					ОбластьРаздела3_2.Объединить();
					ОбластьРаздела3_2.Текст = "3";
					ОбластьРаздела3_2.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела3_2.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ОбластьРаздела3_2.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
					ОбластьРаздела3_2.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
					ОбластьРаздела3_2.Шрифт = Новый Шрифт("Arial", 12, Истина);
				ИначеЕсли ВысотаРазделитель > ВысотаСтрока15 Тогда
					ОбластьПримечания2_1 = ТабличныйДокумент.Область(ВысотаСтрока15 + 2, 16, ВысотаРазделитель - 1, 19);
					ОбластьПримечания2_1.Объединить();
					
					ОбластьРаздела2_1 = ТабличныйДокумент.Область(ВысотаСтрока15, 20, ВысотаРазделитель - 1, 20);
					ОбластьРаздела2_1.Объединить();
					ОбластьРаздела2_1.Текст = "2";
					ОбластьРаздела2_1.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела2_1.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
					Если ВысотаСтрока32 = ВысотаРазделитель Тогда
						ОбластьПримечания2_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 2, 16, ВысотаСтрока32 - 1, 19);
					Иначе
						ОбластьПримечания2_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 2, 16, ВысотаСтрока32 - 1, 19);
					КонецЕсли;
					ОбластьПримечания2_2.Объединить();
					
					ОбластьРаздела2_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 2, 20, ВысотаСтрока32 - 1, 20);
					ОбластьРаздела2_2.Объединить();
					ОбластьРаздела2_2.Текст = "2";
					ОбластьРаздела2_2.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела2_2.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
					Если ВысотаСтрока32 = ВысотаРазделитель Тогда
						ОбластьПримечания3 = ТабличныйДокумент.Область(ВысотаСтрока32 + 4, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
						ОбластьРаздела3 = ТабличныйДокумент.Область(ВысотаСтрока32 + 2, 20, ТабличныйДокумент.ВысотаТаблицы, 20);
					Иначе
						ОбластьПримечания3 = ТабличныйДокумент.Область(ВысотаСтрока32 + 2, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
						ОбластьРаздела3 = ТабличныйДокумент.Область(ВысотаСтрока32, 20, ТабличныйДокумент.ВысотаТаблицы, 20);
					КонецЕсли;
					ОбластьПримечания3.Объединить();
					ОбластьРаздела3.Объединить();
					ОбластьРаздела3.Текст = "3";
					ОбластьРаздела3.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела3.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				Иначе
					ОбластьПримечания2 = ТабличныйДокумент.Область(ВысотаСтрока15 + 2, 16, ВысотаСтрока32 - 1, 19);
					ОбластьПримечания2.Объединить();
					
					ОбластьРаздела2 = ТабличныйДокумент.Область(ВысотаСтрока15, 20, ВысотаСтрока32 - 1, 20);
					ОбластьРаздела2.Объединить();
					ОбластьРаздела2.Текст = "2";
					ОбластьРаздела2.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела2.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
					ОбластьПримечания3 = ТабличныйДокумент.Область(ВысотаСтрока32 + 2, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
					ОбластьПримечания3.Объединить();
					
					ОбластьРаздела3 = ТабличныйДокумент.Область(ВысотаСтрока32, 20, ТабличныйДокумент.ВысотаТаблицы, 20);
					ОбластьРаздела3.Объединить();
					ОбластьРаздела3.Текст = "3";
					ОбластьРаздела3.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела3.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				КонецЕсли;
			ИначеЕсли ВысотаСтрока15 <> 0 Тогда
				Если ВысотаРазделитель > ВысотаСтрока15 Тогда
					ОбластьПримечания2_1 = ТабличныйДокумент.Область(ВысотаСтрока15 + 2, 16, ВысотаРазделитель - 1, 19);
					ОбластьПримечания2_1.Объединить();
					
					ОбластьРаздела2_1 = ТабличныйДокумент.Область(ВысотаСтрока15, 20, ВысотаРазделитель - 1, 20);
					ОбластьРаздела2_1.Объединить();
					ОбластьРаздела2_1.Текст = "2";
					ОбластьРаздела2_1.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела2_1.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
					ОбластьПримечания2_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 2, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
					ОбластьПримечания2_2.Объединить();
					
					ОбластьРаздела2_2 = ТабличныйДокумент.Область(ВысотаРазделитель + 2, 20, ТабличныйДокумент.ВысотаТаблицы, 20);
					ОбластьРаздела2_2.Объединить();
					ОбластьРаздела2_2.Текст = "2";
					ОбластьРаздела2_2.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела2_2.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				Иначе
					ОбластьПримечания2 = ТабличныйДокумент.Область(ВысотаСтрока15 + 2, 16, ТабличныйДокумент.ВысотаТаблицы, 19);
					ОбластьПримечания2.Объединить();
					
					ОбластьРаздела2 = ТабличныйДокумент.Область(ВысотаСтрока15, 20, ТабличныйДокумент.ВысотаТаблицы, 20);
					ОбластьРаздела2.Объединить();
					ОбластьРаздела2.Текст = "2";
					ОбластьРаздела2.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
					ОбластьРаздела2.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				КонецЕсли;
			КонецЕсли;
			
			//ОбластьСтрока3 = Макет.ПолучитьОбласть("Строка3");
			//ОбластьСтрока3.Параметры.НомерСтроки3 = НомерСтроки;
			//
			//ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
			//НомерСтраницы = Scan_Печать.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока3, ОбластьНомерШасси, , НомерСтраницы, , ДокументСсылка,, ОбластьНомерСтраницы);
			
			#КонецОбласти
			
			#Область Подвал
			
			ОбластьПодвал1 = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвал1.Параметры.НомерРазделаПодвала = "1";
			Если ПараметрыПечати.ЗаполнятьКонтрагентов Тогда
				ПодписантСдал1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантСдал1 = ПеревозчикНаименование;
				Иначе
					ПодписантСдал1 = ОтправительНаименование;
				КонецЕсли;
				ОбластьПодвал1.Параметры.ПодписантСдал = ПодписантСдал1;
				
				ПодписантПринял1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантПринял1 = ПолучательНаименование;
				Иначе
					ПодписантПринял1 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьПодвал1.Параметры.ПодписантПринял = ПодписантПринял1;
				
				ПодписантПередачаПоАдресу1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантПередачаПоАдресу1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "МестоДоставки.АдресСкладаФактический");
				Иначе
					ПодписантПередачаПоАдресу1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "МестоОтгрузки.АдресСкладаФактический");
				КонецЕсли;
				ОбластьПодвал1.Параметры.ПодписантПередачаПоАдресу = ПодписантПередачаПоАдресу1;
			КонецЕсли;
			
			ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
			НомерСтраницы = Scan_Печать.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал1, ОбластьНомерШасси, , НомерСтраницы, , ДокументСсылка,, ОбластьНомерСтраницы);
			
			ОбластьПодвал2 = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвал2.Параметры.НомерРазделаПодвала = "2";
			Если ПараметрыПечати.ЗаполнятьКонтрагентов Тогда
				ПодписантСдал2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантСдал2 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьПодвал2.Параметры.ПодписантСдал = ПодписантСдал2;
				
				ПодписантПринял2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантПринял2 = ПолучательНаименование;
				КонецЕсли;
				ОбластьПодвал2.Параметры.ПодписантПринял = ПодписантПринял2;
				
				ПодписантПередачаПоАдресу2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантПередачаПоАдресу2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "МестоДоставки.АдресСкладаФактический");
				КонецЕсли;
				ОбластьПодвал2.Параметры.ПодписантПередачаПоАдресу = ПодписантПередачаПоАдресу2;
			КонецЕсли;
			
			ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
			НомерСтраницы = Scan_Печать.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал2, ОбластьНомерШасси, , НомерСтраницы, , ДокументСсылка,, ОбластьНомерСтраницы);
			
			ОбластьПодвал3 = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвал3.Параметры.НомерРазделаПодвала = "3";
			
			ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
			НомерСтраницы = Scan_Печать.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал3, ОбластьНомерШасси, , НомерСтраницы, , ДокументСсылка,, ОбластьНомерСтраницы);
			
			ОбластьСтрокаЗаполнения = Макет.ПолучитьОбласть("СтрокаЗаполнения");
			
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьСтрокаЗаполнения);
			МассивОбластей.Добавить(ОбластьНомерСтраницы);
			Пока ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Цикл
				ТабличныйДокумент.Вывести(ОбластьСтрокаЗаполнения);
			КонецЦикла;
			
			ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
			ТабличныйДокумент.Вывести(ОбластьНомерСтраницы);
			
			#КонецОбласти
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			НомерСтраницы = НомерСтраницы + 1;
			
			ТабличныйДокумент.Вывести(ОбластьНомерШасси);
			
			ОбластьШапкаОборот = Макет.ПолучитьОбласть("ШапкаОборот");
			ТабличныйДокумент.Вывести(ОбластьШапкаОборот);
			
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьСтрокаЗаполнения);
			МассивОбластей.Добавить(ОбластьНомерСтраницы);
			Пока ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Цикл
				ТабличныйДокумент.Вывести(ОбластьСтрокаЗаполнения);
			КонецЦикла;
			
			ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
			ТабличныйДокумент.Вывести(ОбластьНомерСтраницы);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОпцииСпецификацииДляДетализированногоАкта(Продукт)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", Продукт);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_Изделия.СпецификацияПродукта КАК СпецификацияПродукта
	|ПОМЕСТИТЬ ВТ_СпецификацияПродукта
	|ИЗ
	|	Справочник.Scan_Изделия КАК Scan_Изделия
	|ГДЕ
	|	Scan_Изделия.Ссылка = &П1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_ВерсииБазовыхСпецификаций.Ссылка КАК ВерсияСпецификации
	|ПОМЕСТИТЬ ВТ_ВерсияСпецификации
	|ИЗ
	|	Справочник.Scan_ВерсииБазовыхСпецификаций КАК Scan_ВерсииБазовыхСпецификаций
	|ГДЕ
	|	Scan_ВерсииБазовыхСпецификаций.Владелец В
	|			(ВЫБРАТЬ
	|				ВТ_СпецификацияПродукта.СпецификацияПродукта
	|			ИЗ
	|				ВТ_СпецификацияПродукта)
	|	И НЕ Scan_ВерсииБазовыхСпецификаций.ПометкаУдаления
	|	И Scan_ВерсииБазовыхСпецификаций.ВидСпецификации = ЗНАЧЕНИЕ(Справочник.Scan_ВидыСпецификацийПродуктов.SPIIСпецификация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_ВерсииБазовыхСпецификаций.ВерсияСпецификации УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Scan_ВерсииБазовыхСпецификацийРасшифровкаОпций.Опция КАК Опция
	|ИЗ
	|	Справочник.Scan_ВерсииБазовыхСпецификаций.РасшифровкаОпций КАК Scan_ВерсииБазовыхСпецификацийРасшифровкаОпций
	|ГДЕ
	|	Scan_ВерсииБазовыхСпецификацийРасшифровкаОпций.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ВерсияСпецификации.ВерсияСпецификации
	|			ИЗ
	|				ВТ_ВерсияСпецификации)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОпцииСпецификации = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Опция");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ОпцииДляДетализированногоАкта.Ссылка КАК ОпцияДляДетализированногоАкта,
	|	Scan_ОпцииДляДетализированногоАкта.ПредставлениеДляДетализированногоАкта КАК ПредставлениеДляДетализированногоАкта,
	|	Scan_ОпцииДляДетализированногоАкта.Родитель.ПорядковыйНомерГруппыВДетализированномАкте КАК ПорядковыйНомерГруппыВДетализированномАкте,
	|	Scan_ОпцииДляДетализированногоАкта.ПорядковыйНомерВДетализированномАкте КАК ПорядковыйНомерВДетализированномАкте,
	|	Scan_ОпцииДляДетализированногоАкта.ИсключитьОпции КАК ИсключитьОпции,
	|	Scan_ОпцииДляДетализированногоАкта.ВключаетОпции КАК ВключаетОпции,
	|	Scan_ОпцииДляДетализированногоАкта.БезОпций КАК БезОпций
	|ИЗ
	|	Справочник.Scan_ОпцииДляДетализированногоАкта КАК Scan_ОпцииДляДетализированногоАкта
	|ГДЕ
	|	НЕ Scan_ОпцииДляДетализированногоАкта.ЭтоГруппа
	|	И НЕ Scan_ОпцииДляДетализированногоАкта.ПометкаУдаления
	|	И Scan_ОпцииДляДетализированногоАкта.ИспользоватьВДетализированномАкте
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_ОпцииДляДетализированногоАкта.Родитель.ПорядковыйНомерГруппыВДетализированномАкте,
	|	ПорядковыйНомерВДетализированномАкте";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОпцииСправочника = РезультатЗапроса.Выгрузить();
	ОпцииДляАкта = ОпцииСправочника.СкопироватьКолонки("ОпцияДляДетализированногоАкта,ПредставлениеДляДетализированногоАкта,ПорядковыйНомерГруппыВДетализированномАкте,ПорядковыйНомерВДетализированномАкте");
	
	Для Каждого ОпцияСправочника Из ОпцииСправочника Цикл
		ДобавитьОпцию = Ложь;
		
		Если ОпцияСправочника.БезОпций Тогда
			ДобавитьОпцию = Истина;
		ИначеЕсли ОпцияСправочника.ВключаетОпции Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("П1", ОпцияСправочника.ОпцияДляДетализированногоАкта);
			Запрос.УстановитьПараметр("П2", ОпцииСпецификации);
			Запрос.Текст = "ВЫБРАТЬ
			|	Scan_ОпцииДляДетализированногоАктаОпции.Опция КАК Опция
			|ИЗ
			|	Справочник.Scan_ОпцииДляДетализированногоАкта.Опции КАК Scan_ОпцииДляДетализированногоАктаОпции
			|ГДЕ
			|	Scan_ОпцииДляДетализированногоАктаОпции.Ссылка = &П1
			|	И Scan_ОпцииДляДетализированногоАктаОпции.Опция В(&П2)";
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				ДобавитьОпцию = Истина;
			КонецЕсли;
		ИначеЕсли ОпцияСправочника.ИсключитьОпции Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("П1", ОпцияСправочника.ОпцияДляДетализированногоАкта);
			Запрос.УстановитьПараметр("П2", ОпцииСпецификации);
			Запрос.Текст = "ВЫБРАТЬ
			|	Scan_ОпцииДляДетализированногоАктаОпции.Опция КАК Опция
			|ПОМЕСТИТЬ ВТ_ОпцииОпцииДляАкта
			|ИЗ
			|	Справочник.Scan_ОпцииДляДетализированногоАкта.Опции КАК Scan_ОпцииДляДетализированногоАктаОпции
			|ГДЕ
			|	Scan_ОпцииДляДетализированногоАктаОпции.Ссылка = &П1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПОДСТРОКА(ВТ_ОпцииОпцииДляАкта.Опция.Код, 1, 5) КАК КодГруппы
			|ПОМЕСТИТЬ ВТ_КодыГрупп
			|ИЗ
			|	ВТ_ОпцииОпцииДляАкта КАК ВТ_ОпцииОпцииДляАкта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Scan_ОпцииПродуктов.Ссылка КАК Опция
			|ИЗ
			|	Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
			|ГДЕ
			|	Scan_ОпцииПродуктов.Родитель.Код В
			|			(ВЫБРАТЬ
			|				ВТ_КодыГрупп.КодГруппы
			|			ИЗ
			|				ВТ_КодыГрупп)
			|	И НЕ Scan_ОпцииПродуктов.Ссылка В
			|				(ВЫБРАТЬ
			|					ВТ_ОпцииОпцииДляАкта.Опция
			|				ИЗ
			|					ВТ_ОпцииОпцииДляАкта)
			|	И Scan_ОпцииПродуктов.Ссылка В(&П2)";
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				ДобавитьОпцию = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьОпцию Тогда
			НоваяСтрока = ОпцииДляАкта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОпцияСправочника);
		КонецЕсли;
	КонецЦикла;
	
	ОпцииДляАкта.Сортировать("ПорядковыйНомерГруппыВДетализированномАкте,ПорядковыйНомерВДетализированномАкте");
	
	Возврат ОпцииДляАкта;
	
КонецФункции
// rarus agar 05.03.2022 15689 --


Функция ПечатьПФ_MXL_ДетализированныйАкт(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПФ_MXL_ДетализированныйАкт", ПараметрыПечати = Неопределено) Экспорт // Rarus tenkam 16.05.2022 mantis 15689 +++
	                              	
	Scan_СборСтатистики.Scan_Печать(ИмяМакета); // Rarus tenkam 11.04.2022 mantis 18433 +
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_MXL_ДетализированныйАкт";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Scan_ЗаявкаПеревозчику.ПФ_MXL_ДетализированныйАкт");
	
	КонтрагентПриОтгрузкеИзПорта = Scan_ПраваИНастройки.Scan_Право("КонтрагентПриОтгрузкеИзПорта");
	ТелефонПриемаТСАктПриемаПередачи = Scan_ПраваИНастройки.Scan_Право("ТелефонПриемаТСАктПриемаПередачи");
	ТелефонВнештатныхСитуацийАктПриемаПередачи = Scan_ПраваИНастройки.Scan_Право("ТелефонВнештатныхСитуацийАктПриемаПередачи");
	
	ПервыйДокумент = Истина;
	НомерСтраницы  = 1;
	
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		Для Каждого Продукт Из ПараметрыПечати.МассивПродуктов Цикл
			НомерСтраницы  = 1;
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент    = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ОпцииСпецификации = ОпцииСпецификацииДляДетализированногоАкта(Продукт);
			
			ПеревозчикНаименование  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка.Перевозчик, "НаименованиеСокращенноеДоп");
			ОтправительНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка.КомпанияОтправитель, "НаименованиеСокращенноеДоп");
			ПолучательНаименование  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка.КомпанияПолучатель, "НаименованиеСокращенноеДоп");
			
			#Область Шапка
			
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			
			Если ПараметрыПечати.ЗаполнятьКонтрагентов Тогда
				Сдал1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					Сдал1 = ПеревозчикНаименование;
				Иначе
					Сдал1 = ОтправительНаименование;
				КонецЕсли;
				ОбластьШапка.Параметры.Сдал1 = Сдал1;
				
				Принял1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					Принял1 = ПолучательНаименование;
				Иначе
					Принял1 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьШапка.Параметры.Принял1 = Принял1;
				
				Сдал2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					Сдал2 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьШапка.Параметры.Сдал2 = Сдал2;
				
				Принял2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					Принял2 = ПолучательНаименование;
				КонецЕсли;
				ОбластьШапка.Параметры.Принял2 = Принял2;
			КонецЕсли;
			
			ЗначениеРеквизитовПродукта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Продукт, "НомерИзделия,ЦветКабиныПТС");
			
			ОбластьШапка.Параметры.НомерШасси        = ЗначениеРеквизитовПродукта.НомерИзделия;
			ОбластьШапка.Параметры.ЦветКабиныПТС     = ЗначениеРеквизитовПродукта.ЦветКабиныПТС;
			ОбластьШапка.Параметры.ТелефонПриемка    = ТелефонПриемаТСАктПриемаПередачи;
			ОбластьШапка.Параметры.ТелефонВнештатный = ТелефонВнештатныхСитуацийАктПриемаПередачи;
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			#КонецОбласти
			
			#Область ШапкаТаблицы
			
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			#КонецОбласти         
			
			#Область Подвал
			
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			Если ПараметрыПечати.ЗаполнятьКонтрагентов Тогда
				ПодписантСдал1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантСдал1 = ПеревозчикНаименование;
				Иначе
					ПодписантСдал1 = ОтправительНаименование;
				КонецЕсли;
				ОбластьПодвал.Параметры.ПодписантСдал1 = ПодписантСдал1;
				
				ПодписантПринял1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантПринял1 = ПолучательНаименование;
				Иначе
					ПодписантПринял1 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьПодвал.Параметры.ПодписантПринял1 = ПодписантПринял1;
				
				ПодписантПередачаПоАдресу1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантПередачаПоАдресу1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "МестоДоставки.АдресСкладаФактический");
				Иначе
					ПодписантПередачаПоАдресу1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "МестоОтгрузки.АдресСкладаФактический");
				КонецЕсли;
				ОбластьПодвал.Параметры.ПодписантПередачаПоАдресу1 = ПодписантПередачаПоАдресу1;
				
				// 2
				ПодписантСдал2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантСдал2 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьПодвал.Параметры.ПодписантСдал2 = ПодписантСдал2;
				
				ПодписантПринял2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантПринял2 = ПолучательНаименование;
				КонецЕсли;
				ОбластьПодвал.Параметры.ПодписантПринял2 = ПодписантПринял2;
				
				ПодписантПередачаПоАдресу2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					ПодписантПередачаПоАдресу2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "МестоДоставки.АдресСкладаФактический");
				КонецЕсли;
				ОбластьПодвал.Параметры.ПодписантПередачаПоАдресу2 = ПодписантПередачаПоАдресу2;
			КонецЕсли;	
			#КонецОбласти      			
			
			ТабличныйДокументКолонки = Новый ТабличныйДокумент;
			ТабличныйДокументКолонкиПроверка = Новый ТабличныйДокумент;
			
			#Область Примечания
			ТабличныйДокументПраво = Новый ТабличныйДокумент;
			
			ОбластьПримечания = Макет.ПолучитьОбласть("Примечания");
			Если ПараметрыПечати.ЗаполнятьКонтрагентов Тогда
				ПримечаниеСдал1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					ПримечаниеСдал1 = ПеревозчикНаименование;
				Иначе
					ПримечаниеСдал1 = ОтправительНаименование;
				КонецЕсли;
				ОбластьПримечания.Параметры.ПримечаниеСдал1 = ПримечаниеСдал1;
				
				ПримечаниеПринял1 = "";
				Если ДокументСсылка.КомпанияОтправитель = КонтрагентПриОтгрузкеИзПорта Тогда
					ПримечаниеПринял1 = ПолучательНаименование;
				Иначе
					ПримечаниеПринял1 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьПримечания.Параметры.ПримечаниеПринял1 = ПримечаниеПринял1;
				
				// 2
				ПримечаниеСдал2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					ПримечаниеСдал2 = ПеревозчикНаименование;
				КонецЕсли;
				ОбластьПримечания.Параметры.ПримечаниеСдал2 = ПримечаниеСдал2;
				
				ПримечаниеПринял2 = "";
				Если ДокументСсылка.КомпанияОтправитель <> КонтрагентПриОтгрузкеИзПорта Тогда
					ПримечаниеПринял2 = ПолучательНаименование;
				КонецЕсли;
				ОбластьПримечания.Параметры.ПримечаниеПринял2 = ПримечаниеПринял2;
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(ОбластьПримечания);
			
			#КонецОбласти
			
			#Область ОпцииСпецификации
			
			ТабличныйДокументЛево = Новый ТабличныйДокумент;
			ТабличныйДокументЛевоПроверка = Новый ТабличныйДокумент;
			
			НомерСтроки = 1;
			
			ОбластьНомерШасси    = Макет.ПолучитьОбласть("НомерШасси");
			ОбластьНомерШасси.Параметры.НомерШасси = ЗначениеРеквизитовПродукта.НомерИзделия;
			
			ОбластьНомерСтраницы = Макет.ПолучитьОбласть("НомерСтраницы");
			
			Для Каждого ОпцияСпецификации Из ОпцииСпецификации Цикл
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрока.Параметры.НаименованиеОпции = ОпцияСпецификации.ПредставлениеДляДетализированногоАкта;
				
				ТабличныйДокументЛевоПроверка.Вывести(ОбластьСтрока);
				
				ТабличныйДокументКолонкиПроверка = Новый ТабличныйДокумент;    		
				ТабличныйДокументКолонкиПроверка.Присоединить(ТабличныйДокументЛевоПроверка);
				ТабличныйДокументКолонкиПроверка.Присоединить(ТабличныйДокументПраво);
				
				МассивОбластей = Новый Массив;
				МассивОбластей.Добавить(ТабличныйДокументКолонкиПроверка);
				МассивОбластей.Добавить(ОбластьНомерСтраницы);
				МассивОбластей.Добавить(ОбластьПодвал);
				
				Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) И 
					ТабличныйДокументЛевоПроверка.ВысотаТаблицы <= ТабличныйДокументПраво.ВысотаТаблицы Тогда
					ТабличныйДокументЛево.Вывести(ОбластьСтрока);
				Иначе
					ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
					ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
					ТабличныйДокумент.Вывести(ТабличныйДокументКолонки);
					ТабличныйДокумент.Вывести(ОбластьПодвал);
					
					ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьНомерСтраницы);
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Новая страница
					ТабличныйДокумент.Вывести(ОбластьНомерШасси);
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					
					ТабличныйДокументКолонки = Новый ТабличныйДокумент;
					
					ТабличныйДокументЛево = Новый ТабличныйДокумент;
					ТабличныйДокументЛевоПроверка = Новый ТабличныйДокумент;
					ТабличныйДокументЛево.Вывести(ОбластьСтрока);
					ТабличныйДокументЛевоПроверка.Вывести(ОбластьСтрока);
					
					НомерСтраницы = НомерСтраницы + 1;
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
			#КонецОбласти
			
			ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
			ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
			
			ТабличныйДокумент.Вывести(ТабличныйДокументКолонки);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
			ОбластьСтрокаЗаполнения = Макет.ПолучитьОбласть("СтрокаЗаполнения");
			
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьСтрокаЗаполнения);
			МассивОбластей.Добавить(ОбластьНомерСтраницы);
			Пока ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Цикл
				ТабличныйДокумент.Вывести(ОбластьСтрокаЗаполнения);
			КонецЦикла;
			
			ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
			ТабличныйДокумент.Вывести(ОбластьНомерСтраницы);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			НомерСтраницы = НомерСтраницы + 1;
			
			// Новая страница
			ТабличныйДокумент.Вывести(ОбластьНомерШасси);
			
			ОбластьШапкаОборот = Макет.ПолучитьОбласть("ШапкаОборот");
			ТабличныйДокумент.Вывести(ОбластьШапкаОборот);
			
			ОбластьСтрокаЗаполнения = Макет.ПолучитьОбласть("СтрокаЗаполнения");
			
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьСтрокаЗаполнения);
			МассивОбластей.Добавить(ОбластьНомерСтраницы);
			Пока ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Цикл
				ТабличныйДокумент.Вывести(ОбластьСтрокаЗаполнения);
			КонецЦикла;
			
			ОбластьНомерСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
			ТабличныйДокумент.Вывести(ОбластьНомерСтраницы);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // Rarus tenkam 16.05.2022 mantis 15689 ---
