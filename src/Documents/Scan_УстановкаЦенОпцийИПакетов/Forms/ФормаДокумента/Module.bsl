#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Вызываем общий обработчик события
	Если Не Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПараметрыДокумента();
	КонецЕсли;
	
	ЗаполнитьРезультатРасчетаКоэффициентаНаДилера();
	ЗаполнитьРезультатРасчетаКоэффициентаНаКлиента();
	
	УправлениеДиалогомНаСервере();
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
 КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ЗагрузкаОпцийИзФайла

&НаКлиенте
Процедура ЗагрузитьОпцииИзФайла(Команда)
	
	Если Объект.ОпцииПродуктов.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьОпцииИзФайлаЗавершение", ЭтотОбъект),
		Нстр("ru = 'Таблица опций будет очищена. Продолжить?'; en = 'The options table will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗагрузкуОпцийИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОпцииИзФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗагрузкуОпцийИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуОпцийИзФайла()
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьОпцииПродуктовИзФайла", ЭтотОбъект);
	
	ПараметрыКоманды = Новый Структура("ИмяКоманды", "ЗагрузитьПрайсЛистИзФайла");
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла",ПараметрыКоманды, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОпцииПродуктовИзФайла(ЗначенияВыбранныхПараметров, Параметры) Экспорт
	
	Если    ЗначенияВыбранныхПараметров = Неопределено 
		Или ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена 
		Тогда
		Возврат;
	КонецЕсли;
		
	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'")+" "+ТекущаяДата());
		
	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьОпцииПродуктовИзФайлаЗавершение(ЗначенияВыбранныхПараметров);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьОпцииПродуктовИзФайлаФрагмент", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОпцииПродуктовИзФайлаФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьОпцииПродуктовИзФайлаЗавершение(ЗначенияВыбранныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОпцииПродуктовИзФайлаЗавершение(Знач ЗначенияВыбранныхПараметров)
	
	ПрочитатьФайлОпцийПродуктов(ЗначенияВыбранныхПараметров);
	
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьЦены(Команда)
	
	КоэффициентDealerNetЗаполнен   = ЗначениеЗаполнено(РезультатРасчетаКоэффициентаНаДилера);
	КоэффициентRetailPriceЗаполнен = ЗначениеЗаполнено(РезультатРасчетаКоэффициентаНаКлиента);
		
	Если Не КоэффициентDealerNetЗаполнен Тогда
		Сообщить(Нстр("ru = 'Не заполнен коэффициент Dealer Net!'; en = 'The Dealer Net factor is not filled!'"));
	КонецЕсли;
	
	Если Не КоэффициентRetailPriceЗаполнен Тогда
		Сообщить(Нстр("ru = 'Не заполнен коэффициент Retail Price!'; en = 'The Retail Price factor is not filled!'"));
	КонецЕсли;
	
	Если    Не КоэффициентDealerNetЗаполнен
		Или Не КоэффициентRetailPriceЗаполнен
		Тогда 
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеЦен();
	
КонецПроцедуры

#Область ВыгрузкаОпцийВФайл

&НаКлиенте
Процедура ВыгрузитьОпцииВФайл(Команда)
	
	ДанныеДляВыгрузки = СформироватьДанныеДляВыгрузки();
	
	ПолноеИмяФайла = "OFMS_PriceList_"+СокрЛП(Объект.ИдентификаторПрайсЛиста)+"_ForETBO.xlsx";
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Укажите каталог и название файла для сохранения.'; en = 'Choose the directory and file name to save.'");
	ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяФайла;
	ДиалогВыбораФайла.Расширение     = "xlsx";
	ДиалогВыбораФайла.Фильтр         = "Файлы MS Excel (*.xlsx)|*.xlsx";
	
	#Если ВебКлиент Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ДанныеДляВыгрузки", ДанныеДляВыгрузки);
		ДополнительныеПараметры.Вставить("ДиалогВыбораФайла", ДиалогВыбораФайла);
		
		НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		                           "ВыгрузитьВФайлВебКлиентФрагмент", ЭтотОбъект, ДополнительныеПараметры));
	#Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеДляВыгрузки", ДанныеДляВыгрузки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьВФайлТонкийКлиентФрагмент", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлВебКлиентФрагмент(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено Тогда
		ДанныеДляВыгрузки = ДополнительныеПараметры.ДанныеДляВыгрузки;
		ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеДляВыгрузки", ДанныеДляВыгрузки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьВФайлТонкийКлиентФрагмент", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	Иначе
		НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("УстановкаРасширенияЗавершение", ЭтотОбъект));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлТонкийКлиентФрагмент(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если  ВыбранныеФайлы <> Неопределено 
		И ВыбранныеФайлы.Количество() > 0
		Тогда
		ПолноеИмяФайла    = ВыбранныеФайлы[0];
		ДанныеДляВыгрузки = ДополнительныеПараметры.ДанныеДляВыгрузки;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьВФайлТонкийКлиентЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		ДанныеДляВыгрузки.НачатьЗапись(ОписаниеОповещения, ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлТонкийКлиентЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Сообщить(Нстр("ru = 'Файл успешно сохранен.'; en = 'File saved successfully.'"));
		
		ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
		
		#Если Не ВебКлиент Тогда
			Попытка
				Excel = Новый COMОбъект("Excel.Application");
				Excel.DisplayAlerts = False;
				Excel.Workbooks.Open(ПолноеИмяФайла);
				Лист = Excel.WorkSheets(1);
				Лист.Name = Объект.НаименованиеПрайсЛиста;	
				Excel.ActiveWorkbook.SaveAs(ПолноеИмяФайла);
				Excel.Quit();
			Исключение
				Сообщить(Нстр("ru = 'Не удалось переименовать лист MS Excel.'; en = 'Failed to rename MS Excel sheet.'"));
			КонецПопытки;
		#КонецЕсли
	Иначе
		Сообщить(Нстр("ru = 'Не удалось сохранить файл. Повторите попытку.'; en = 'Failed to save file. Try again.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Нстр("ru = 'Расширение успешно установлено. Повторите выгрузку.'; en = 'The extension has been successfully installed. Repeat upload.'");
	Иначе
		ВызватьИсключение Нстр("ru = 'Ошибка подключения расширения работы с файлами.'; en = 'Error connecting extension.'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаЦеновыхПакетовИзФайла

&НаКлиенте
Процедура ЗагрузитьПакетыИзФайла(Команда)
	
	Если Объект.ЦеновыеПакеты.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьПакетыИзФайлаЗавершение", ЭтотОбъект),
		// rarus agar 30.04.2021 17322 ++
		//Нстр("ru = 'Таблица ценовых пакетов будет очищена. Продолжить?'; en = 'The price packages table will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
		Нстр("ru = 'Очистить таблицу ценовых пакетов перед загрузкой?'; en = 'Clear the price packages table before uploading?'"), РежимДиалогаВопрос.ДаНетОтмена);
		// rarus agar 30.04.2021 17322 --
	Иначе
		ВыполнитьЗагрузкуПакетовИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПакетыИзФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	// rarus agar 30.04.2021 17322 ++
	//Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	//	ВыполнитьЗагрузкуПакетовИзФайла();
	//КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ЦеновыеПакеты.Очистить();
	КонецЕсли;
	
	ВыполнитьЗагрузкуПакетовИзФайла();
	// rarus agar 30.04.2021 17322 --
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуПакетовИзФайла()
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьЦеновыеПакетыИзФайла", ЭтотОбъект);
	
	ПараметрыКоманды = Новый Структура("ИмяКоманды", "ЗагрузитьЦеновыеПакетыИзФайла");
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла",ПараметрыКоманды, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЦеновыеПакетыИзФайла(ЗначенияВыбранныхПараметров, Параметры) Экспорт
	
	Если    ЗначенияВыбранныхПараметров = Неопределено 
		Или ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена 
		Тогда
		Возврат;
	КонецЕсли;
		
	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'")+" "+ТекущаяДата());
		
	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьЦеновыеПакетыИзФайлаЗавершение(ЗначенияВыбранныхПараметров);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьЦеновыеПакетыИзФайлаФрагмент", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЦеновыеПакетыИзФайлаФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьЦеновыеПакетыИзФайлаЗавершение(ЗначенияВыбранныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЦеновыеПакетыИзФайлаЗавершение(Знач ЗначенияВыбранныхПараметров)
	
	ПрочитатьФайлЦеновыхПакетов(ЗначенияВыбранныхПараметров);
	
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
	
КонецПроцедуры

// rarus agar 30.04.2021 17322 ++
&НаКлиенте
Процедура ЗагрузитьПакетыДистрибьютораИзФайла(Команда)
	
	Если Объект.ЦеновыеПакеты.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьПакетыДистрибьютораИзФайлаЗавершение", ЭтотОбъект),
						Нстр("ru = 'Очистить таблицу ценовых пакетов перед загрузкой?'; en = 'Clear the price packages table before uploading?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		ВыполнитьЗагрузкуПакетовДистрибьютораИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПакетыДистрибьютораИзФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ЦеновыеПакеты.Очистить();
	КонецЕсли;
	
	ВыполнитьЗагрузкуПакетовДистрибьютораИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуПакетовДистрибьютораИзФайла()
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьЦеновыеПакетыДистрибьютораИзФайла", ЭтотОбъект);
	
	ПараметрыКоманды = Новый Структура("ИмяКоманды", "ЗагрузитьЦеновыеПакетыДистрибьютораИзФайла");
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла",ПараметрыКоманды, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЦеновыеПакетыДистрибьютораИзФайла(ЗначенияВыбранныхПараметров, Параметры) Экспорт
	
	Если    ЗначенияВыбранныхПараметров = Неопределено 
		Или ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена 
		Тогда
		Возврат;
	КонецЕсли;
		
	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'")+" "+ТекущаяДата());
		
	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьЦеновыеПакетыДистрибьютораИзФайлаЗавершение(ЗначенияВыбранныхПараметров);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьЦеновыеПакетыДистрибьютораИзФайлаФрагмент", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЦеновыеПакетыДистрибьютораИзФайлаФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьЦеновыеПакетыДистрибьютораИзФайлаЗавершение(ЗначенияВыбранныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЦеновыеПакетыДистрибьютораИзФайлаЗавершение(Знач ЗначенияВыбранныхПараметров)
	
	ПрочитатьФайлЦеновыхПакетовДистрибьютора(ЗначенияВыбранныхПараметров);
	
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
	
КонецПроцедуры
// rarus agar 30.04.2021 17322 --

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоэффициентDealerNetПриИзменении(Элемент)
	
	Если Не Объект.КоэффициентDealerNet.Пустая() Тогда
		ЗаполнитьРезультатРасчетаКоэффициентаНаДилера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентRetailPriceПриИзменении(Элемент)
	
	Если Не Объект.КоэффициентRetailPrice.Пустая() Тогда
		ЗаполнитьРезультатРасчетаКоэффициентаНаКлиента();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ОпцииПродуктовДействуетСДатыПриИзменении(Элемент)
	
	ДействуетСДаты = Элементы.ОпцииПродуктов.ТекущиеДанные.ДействуетСДаты;
	ДействуетСPP   = Элементы.ОпцииПродуктов.ТекущиеДанные.ДействуетСPartPeriod;
	
	ОпцииПродуктовПриИзмененииДатыИлиPartPeriod(ДействуетСДаты, ДействуетСPP);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииПродуктовДействуетСPartPeriodПриИзменении(Элемент)
	
	ДействуетСДаты = Элементы.ОпцииПродуктов.ТекущиеДанные.ДействуетСДаты;
	ДействуетСPP   = Элементы.ОпцииПродуктов.ТекущиеДанные.ДействуетСPartPeriod;
	
	ОпцииПродуктовПриИзмененииДатыИлиPartPeriod(ДействуетСДаты, ДействуетСPP);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыДокумента()
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Объект.Автор                 = ТекущийПользователь;
	Объект.ВалютаДокумента       = Справочники.Валюты.НайтиПоКоду("643");
	Объект.ДатаСоздания          = ТекущаяДата();
	Объект.Дата                  = ТекущаяДата();
	Объект.Менеджер              = ТекущийПользователь;
	Объект.Организация           = ТекущийПользователь.Организация;
	Объект.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
	
КонецПроцедуры

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура УправлениеДиалогомНаСервере()

КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлОпцийПродуктов(ЗначенияВыбранныхПараметров)
	
	Объект.ОпцииПродуктов.Очистить();
	Объект.НезагруженныеОпции.Очистить();
	
	ИмяФайла = "";
	
	МассивПодстрок = СтрРазделить(ЗначенияВыбранныхПараметров.ПутьКФайлу, "\", Истина);
	Если МассивПодстрок.Количество() > 0 Тогда
		ИмяФайла = МассивПодстрок[МассивПодстрок.Количество()-1];
	КонецЕсли;
	
	// Сохраняем файл в каталоге временных файлов
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЗначенияВыбранныхПараметров.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	//Читать будем построителем запроса через табличный документ	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);  
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// При чтении файла Excel в табличный документ каждый лист преобразуется в область
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки    = ЗначенияВыбранныхПараметров.НомерСтроки;
	НомерПоследнейСтроки = ТабличныйДокумент.ВысотаТаблицы;
	
	// Т.к. читается диапазон ячеек области, берем минимальное и максимальное значение номеров колонок,
	// чтобы не пропустить нужные. Ненужные отсечем далее в запросе
	НомерПервойКолонки = Мин(ЗначенияВыбранныхПараметров.ПрайсЛистСемейство, ЗначенияВыбранныхПараметров.ПрайсЛистИсполнение, 
	                         ЗначенияВыбранныхПараметров.ПрайсЛистОпция, ЗначенияВыбранныхПараметров.ПрайсЛистДействуетС,
							 ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСPP, ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПо,
							 ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоPP, ЗначенияВыбранныхПараметров.ПрайсЛистСкидка,
							 ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDistrNet, ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDealerNet,
							 ЗначенияВыбранныхПараметров.ПрайсЛистЦенаRetailPrice); //rarus agar 03.06.2020 16123 +-
							 
	НомерПоследнейКолонки = Макс(ЗначенияВыбранныхПараметров.ПрайсЛистСемейство, ЗначенияВыбранныхПараметров.ПрайсЛистИсполнение, 
	                             ЗначенияВыбранныхПараметров.ПрайсЛистОпция, ЗначенияВыбранныхПараметров.ПрайсЛистДействуетС,
							     ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСPP, ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПо,
							     ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоPP, ЗначенияВыбранныхПараметров.ПрайсЛистСкидка,
								 ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDistrNet, ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDealerNet,
							     ЗначенияВыбранныхПараметров.ПрайсЛистЦенаRetailPrice); //rarus agar 03.06.2020 16123 +-
								 
	// Чтение табличного документа построителем
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	// Результат в таблицу значений - колонки уже типизированы
	Попытка
		ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить(); 
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// Файл уже не нужен - удаляем
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	Если ДанныеФайла.Колонки.Количество() < 9 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	// В запросе полагаться на имена колонок из файла нельзя. Они и поменяться могут
	// Переименовываем колонки по указанным пользователем номерам
	//rarus agar 14.05.2020 15467 Доп1 ++
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистСемействоИмя) Тогда
		КолонкаСемейство = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистСемействоИмя);
		Если КолонкаСемейство <> Неопределено Тогда
			КолонкаСемейство.Имя = "Семейство";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистСемейство <> 0 Тогда
			КолонкаСемейство = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистСемейство-1];
			КолонкаСемейство.Имя = "Семейство";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаСемейство = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистСемейство-1];
		КолонкаСемейство.Имя = "Семейство";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистИсполнениеИмя) Тогда
		КолонкаИсполнение = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистИсполнениеИмя);
		Если КолонкаИсполнение <> Неопределено Тогда
			КолонкаИсполнение.Имя = "Исполнение";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистИсполнение <> 0 Тогда
			КолонкаИсполнение = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистИсполнение-1];
			КолонкаИсполнение.Имя = "Исполнение";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаИсполнение = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистИсполнение-1];
		КолонкаИсполнение.Имя = "Исполнение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистОпцияИмя) Тогда
		КолонкаОписание = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистОпцияИмя);
		Если КолонкаОписание <> Неопределено Тогда
			КолонкаОписание.Имя = "Описание";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистОпция <> 0 Тогда
			КолонкаОписание = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистОпция-1];
			КолонкаОписание.Имя = "Описание";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаОписание = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистОпция-1];
		КолонкаОписание.Имя = "Описание";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСИмя) Тогда
		КолонкаДействуетСДаты = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСИмя);
		Если КолонкаДействуетСДаты <> Неопределено Тогда
			КолонкаДействуетСДаты.Имя = "ДействуетСДаты";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистДействуетС <> 0 Тогда
			КолонкаДействуетСДаты = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистДействуетС-1];
			КолонкаДействуетСДаты.Имя = "ДействуетСДаты";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаДействуетСДаты = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистДействуетС-1];
		КолонкаДействуетСДаты.Имя = "ДействуетСДаты";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСPPИмя) Тогда
		КолонкаДействуетСPartPeriod = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСPPИмя);
		Если КолонкаДействуетСPartPeriod <> Неопределено Тогда
			КолонкаДействуетСPartPeriod.Имя = "ДействуетСPartPeriod";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСPP <> 0 Тогда
			КолонкаДействуетСPartPeriod = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСPP-1];
			КолонкаДействуетСPartPeriod.Имя = "ДействуетСPartPeriod";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаДействуетСPartPeriod = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистДействуетСPP-1];
		КолонкаДействуетСPartPeriod.Имя = "ДействуетСPartPeriod";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоИмя) Тогда
		КолонкаДействуетДоДаты = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоИмя);
		Если КолонкаДействуетДоДаты <> Неопределено Тогда
			КолонкаДействуетДоДаты.Имя = "ДействуетДоДаты";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПо <> 0 Тогда
			КолонкаДействуетДоДаты = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПо-1];
			КолонкаДействуетДоДаты.Имя = "ДействуетДоДаты";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаДействуетДоДаты = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПо-1];
		КолонкаДействуетДоДаты.Имя = "ДействуетДоДаты";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоPPИмя) Тогда
		КолонкаДействуетПоPartPeriod = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоPPИмя);
		Если КолонкаДействуетПоPartPeriod <> Неопределено Тогда
			КолонкаДействуетПоPartPeriod.Имя = "ДействуетПоPartPeriod";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоPP <> 0 Тогда
			КолонкаДействуетПоPartPeriod = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоPP-1];
			КолонкаДействуетПоPartPeriod.Имя = "ДействуетПоPartPeriod";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаДействуетПоPartPeriod = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистДействуетПоPP-1];
		КолонкаДействуетПоPartPeriod.Имя = "ДействуетПоPartPeriod";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистСкидкаИмя) Тогда
		КолонкаСкидка = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистСкидкаИмя);
		Если КолонкаСкидка <> Неопределено Тогда
			КолонкаСкидка.Имя = "Скидка";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистСкидка <> 0 Тогда
			КолонкаСкидка = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистСкидка-1];
			КолонкаСкидка.Имя = "Скидка";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаСкидка = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистСкидка-1];
		КолонкаСкидка.Имя = "Скидка";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDistrNetИмя) Тогда
		КолонкаЦенаDistrNet = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDistrNetИмя);
		Если КолонкаЦенаDistrNet <> Неопределено Тогда
			КолонкаЦенаDistrNet.Имя = "ЦенаDistrNet";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDistrNet <> 0 Тогда
			КолонкаЦенаDistrNet = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDistrNet-1];
			КолонкаЦенаDistrNet.Имя = "ЦенаDistrNet";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаЦенаDistrNet = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDistrNet-1];
		КолонкаЦенаDistrNet.Имя = "ЦенаDistrNet";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDealerNetИмя) Тогда
		КолонкаЦенаDealerNet = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDealerNetИмя);
		Если КолонкаЦенаDealerNet <> Неопределено Тогда
			КолонкаЦенаDealerNet.Имя = "ЦенаDealerNet";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDealerNet <> 0 Тогда
			КолонкаЦенаDealerNet = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDealerNet-1];
			КолонкаЦенаDealerNet.Имя = "ЦенаDealerNet";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаЦенаDealerNet = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистЦенаDealerNet-1];
		КолонкаЦенаDealerNet.Имя = "ЦенаDealerNet";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ПрайсЛистЦенаRetailPriceИмя) Тогда
		КолонкаЦенаRetailPrice = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ПрайсЛистЦенаRetailPriceИмя);
		Если КолонкаЦенаRetailPrice <> Неопределено Тогда
			КолонкаЦенаRetailPrice.Имя = "ЦенаRetailPrice";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ПрайсЛистЦенаRetailPrice <> 0 Тогда
			КолонкаЦенаRetailPrice = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистЦенаRetailPrice-1];
			КолонкаЦенаRetailPrice.Имя = "ЦенаRetailPrice";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаЦенаRetailPrice = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ПрайсЛистЦенаRetailPrice-1];
		КолонкаЦенаRetailPrice.Имя = "ЦенаRetailPrice";
	КонецЕсли;
	//rarus agar 03.06.2020 16123 ++
	
	//rarus agar 03.06.2020 16123 --
	//rarus agar 14.05.2020 15467 Доп1 --
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеФайла", ДанныеФайла);
	Запрос.УстановитьПараметр("ИмяФайла",    ИмяФайла);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеФайла.Семейство + ВЫБОР
	|		КОГДА ПОДСТРОКА(ДанныеФайла.Исполнение, 2, 1) = "" ""
	|			ТОГДА ПОДСТРОКА(ДанныеФайла.Исполнение, 1, 1)
	|		ИНАЧЕ ДанныеФайла.Исполнение
	|	КОНЕЦ КАК Исполнение,
	|	ДанныеФайла.Описание КАК Описание,
	|	ДанныеФайла.ДействуетСДаты КАК ДействуетСДаты,
	|	ПОДСТРОКА(ДанныеФайла.ДействуетСPartPeriod, 3, 5) КАК ДействуетСPartPeriod,
	|	ДанныеФайла.ДействуетДоДаты КАК ДействуетДоДаты,
	|	ПОДСТРОКА(ДанныеФайла.ДействуетПоPartPeriod, 3, 5) КАК ДействуетПоPartPeriod,
	|	ДанныеФайла.Скидка КАК Скидка,
	|	ДанныеФайла.ЦенаDistrNet КАК ЦенаDistrNet,
	|	ДанныеФайла.ЦенаDealerNet КАК ЦенаDealerNet,
	|	ДанныеФайла.ЦенаRetailPrice КАК ЦенаRetailPrice
	|ПОМЕСТИТЬ ВТ_ДанныеФайла
	|ИЗ
	|	&ДанныеФайла КАК ДанныеФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФайла.Исполнение КАК Исполнение,
	|	ВТ_ДанныеФайла.Описание КАК Описание,
	|	ВТ_ДанныеФайла.ДействуетСДаты КАК ДействуетСДаты,
	|	ВТ_ДанныеФайла.ДействуетСPartPeriod КАК ДействуетСPartPeriod,
	|	ВТ_ДанныеФайла.ДействуетДоДаты КАК ДействуетДоДаты,
	|	ВТ_ДанныеФайла.ДействуетПоPartPeriod КАК ДействуетПоPartPeriod,
	|	ВТ_ДанныеФайла.Скидка КАК Скидка,
	|	ВТ_ДанныеФайла.ЦенаDistrNet КАК ЦенаDistrNet,
	|	ВТ_ДанныеФайла.ЦенаDealerNet КАК ЦенаDealerNet,
	|	ВТ_ДанныеФайла.ЦенаRetailPrice КАК ЦенаRetailPrice,
	|	Scan_ОпцииПродуктов.Ссылка КАК Опция
	|ПОМЕСТИТЬ ВТ_ДанныеФайлаСОпциями
	|ИЗ
	|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
	|		ПО ВТ_ДанныеФайла.Исполнение = Scan_ОпцииПродуктов.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФайлаСОпциями.Исполнение КАК Исполнение,
	|	ВТ_ДанныеФайлаСОпциями.Описание КАК Описание,
	|	ВТ_ДанныеФайлаСОпциями.ДействуетСДаты КАК ДействуетСДаты,
	|	ПОДСТРОКА(ВТ_ДанныеФайлаСОпциями.ДействуетСPartPeriod, 1, 2) + "" "" + ПОДСТРОКА(ВТ_ДанныеФайлаСОпциями.ДействуетСPartPeriod, 3, 2) + "" "" + ПОДСТРОКА(ВТ_ДанныеФайлаСОпциями.ДействуетСPartPeriod, 5, 1) КАК ДействуетСPartPeriod,
	|	ВТ_ДанныеФайлаСОпциями.ДействуетДоДаты КАК ДействуетДоДаты,
	|	ВТ_ДанныеФайлаСОпциями.ДействуетПоPartPeriod КАК ДействуетПоPartPeriod,
	|	ВТ_ДанныеФайлаСОпциями.Скидка КАК Скидка,
	|	ВТ_ДанныеФайлаСОпциями.ЦенаDistrNet КАК ЦенаDistrNet,
	|	ВТ_ДанныеФайлаСОпциями.ЦенаDealerNet КАК ЦенаDealerNet,
	|	ВТ_ДанныеФайлаСОпциями.ЦенаRetailPrice КАК ЦенаRetailPrice,
	|	ВТ_ДанныеФайлаСОпциями.Опция КАК Опция,
	|	&ИмяФайла КАК Файл
	|ИЗ
	|	ВТ_ДанныеФайлаСОпциями КАК ВТ_ДанныеФайлаСОпциями
	|ГДЕ
	|	НЕ ВТ_ДанныеФайлаСОпциями.Опция ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФайлаСОпциями.Исполнение КАК Исполнение,
	|	ВТ_ДанныеФайлаСОпциями.Описание КАК Описание
	|ИЗ
	|	ВТ_ДанныеФайлаСОпциями КАК ВТ_ДанныеФайлаСОпциями
	|ГДЕ
	|	ВТ_ДанныеФайлаСОпциями.Опция ЕСТЬ NULL";
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	Объект.ОпцииПродуктов.Загрузить(МассивРезультатовЗапроса[2].Выгрузить());
	Объект.НезагруженныеОпции.Загрузить(МассивРезультатовЗапроса[3].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлЦеновыхПакетов(ЗначенияВыбранныхПараметров)
	
	//Объект.ЦеновыеПакеты.Очистить(); // rarus agar 30.04.2021 17322 +-
	ИмяФайла = "";
	
	МассивПодстрок = СтрРазделить(ЗначенияВыбранныхПараметров.ПутьКФайлу, "\", Истина);
	Если МассивПодстрок.Количество() > 0 Тогда
		ИмяФайла = МассивПодстрок[МассивПодстрок.Количество()-1];
	КонецЕсли;
	
	// Сохраняем файл в каталоге временных файлов
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЗначенияВыбранныхПараметров.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	//Читать будем построителем запроса через табличный документ	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);  
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// При чтении файла Excel в табличный документ каждый лист преобразуется в область
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		НомерЛиста = ЗначенияВыбранныхПараметров.НомерЛиста;
		Если НомерЛиста = 0 Тогда
			ИмяОбластиДанных = ТабличныйДокумент.Области[НомерЛиста].Имя;
		Иначе
			ИмяОбластиДанных = ТабличныйДокумент.Области[НомерЛиста-1].Имя;
		КонецЕсли;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки    = ЗначенияВыбранныхПараметров.НомерСтроки;
	НомерПоследнейСтроки = ТабличныйДокумент.ВысотаТаблицы;
	
	// Т.к. читается диапазон ячеек области, берем минимальное и максимальное значение номеров колонок,
	// чтобы не пропустить нужные. Ненужные отсечем далее в запросе
	НомерПервойКолонки = Мин(ЗначенияВыбранныхПараметров.ЦеновойПакетКод, ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование, 
	                         ЗначенияВыбранныхПараметров.ЦеновойПакетЦена, ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены,
							 ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетС, ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДо, // rarus agar 07.06.2021 17322 ++
							 ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение, ЗначенияВыбранныхПараметров.ЦеновойПакетОпция);
							 
	НомерПоследнейКолонки = Макс(ЗначенияВыбранныхПараметров.ЦеновойПакетКод, ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование, 
	                         ЗначенияВыбранныхПараметров.ЦеновойПакетЦена, ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены,
							 ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетС, ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДо, // rarus agar 07.06.2021 17322 ++
							 ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение, ЗначенияВыбранныхПараметров.ЦеновойПакетОпция);
								 
	// Чтение табличного документа построителем
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	// Результат в таблицу значений - колонки уже типизированы
	Попытка
		ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить(); 
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// Файл уже не нужен - удаляем
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	Если ДанныеФайла.Колонки.Количество() < 7 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетКодИмя) Тогда
		КолонкаКод = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетКодИмя);
		Если КолонкаКод <> Неопределено Тогда
			КолонкаКод.Имя = "Код";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетКод <> 0 Тогда
			КолонкаКод = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетКод-1];
			КолонкаКод.Имя = "Код";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаКод = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетКод-1];
		КолонкаКод.Имя = "Код";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетНаименованиеИмя) Тогда
		КолонкаНаименование = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетНаименованиеИмя);
		Если КолонкаНаименование <> Неопределено Тогда
			КолонкаНаименование.Имя = "Наименование";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование <> 0 Тогда
			КолонкаНаименование = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование-1];
			КолонкаНаименование.Имя = "Наименование";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаНаименование = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование-1];
		КолонкаНаименование.Имя = "Наименование";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетЦенаИмя) Тогда
		КолонкаЦена = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетЦенаИмя);
		Если КолонкаЦена <> Неопределено Тогда
			КолонкаЦена.Имя = "Цена";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетЦена <> 0 Тогда
			КолонкаЦена = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетЦена-1];
			КолонкаЦена.Имя = "Цена";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаЦена = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетЦена-1];
		КолонкаЦена.Имя = "Цена";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦеныИмя) Тогда
		КолонкаТипЗначенияЦены = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦеныИмя);
		Если КолонкаТипЗначенияЦены <> Неопределено Тогда
			КолонкаТипЗначенияЦены.Имя = "ТипЗначенияЦены";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены <> 0 Тогда
			КолонкаТипЗначенияЦены = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены-1];
			КолонкаТипЗначенияЦены.Имя = "ТипЗначенияЦены";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаТипЗначенияЦены = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены-1];
		КолонкаТипЗначенияЦены.Имя = "ТипЗначенияЦены";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСИмя) Тогда
		КолонкаДействуетС = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСИмя);
		Если КолонкаДействуетС <> Неопределено Тогда
			КолонкаДействуетС.Имя = "ДействуетС";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетС <> 0 Тогда
			КолонкаДействуетС = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетС-1];
			КолонкаДействуетС.Имя = "ДействуетС";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаДействуетС = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетС-1];
		КолонкаДействуетС.Имя = "ДействуетС";
	КонецЕсли;
	
	// rarus agar 07.06.2021 17322 ++
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоИмя) Тогда
		КолонкаДействуетДо = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоИмя);
		Если КолонкаДействуетДо <> Неопределено Тогда
			КолонкаДействуетДо.Имя = "ДействуетДо";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДо <> 0 Тогда
			КолонкаДействуетДо = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДо-1];
			КолонкаДействуетДо.Имя = "ДействуетДо";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаДействуетДо = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДо-1];
		КолонкаДействуетДо.Имя = "ДействуетДо";
	КонецЕсли;
	// rarus agar 07.06.2021 17322 --
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнениеИмя) Тогда
		КолонкаИсполнение = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнениеИмя);
		Если КолонкаИсполнение <> Неопределено Тогда
			КолонкаИсполнение.Имя = "Исполнение";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение <> 0 Тогда
			КолонкаИсполнение = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение-1];
			КолонкаИсполнение.Имя = "Исполнение";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаИсполнение = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение-1];
		КолонкаИсполнение.Имя = "Исполнение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИмя) Тогда
		КолонкаОпция = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИмя);
		Если КолонкаОпция <> Неопределено Тогда
			КолонкаОпция.Имя = "Опция";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетОпция <> 0 Тогда
			КолонкаОпция = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетОпция-1];
			КолонкаОпция.Имя = "Опция";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаОпция = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетОпция-1];
		КолонкаОпция.Имя = "Опция";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеФайла", ДанныеФайла);
	Запрос.УстановитьПараметр("ИмяФайла",    ИмяФайла);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеФайла.Код КАК КодПакета,
	|	ДанныеФайла.Наименование КАК НаименованиеПакета,
	|	ДанныеФайла.Цена КАК ЦенаПакета,
	|	ДанныеФайла.ТипЗначенияЦены КАК ТипЗначенияЦены,
	|	ДанныеФайла.ДействуетС КАК ДействуетС,
	// rarus agar 07.06.2021 17322 ++
	|	ДанныеФайла.ДействуетДо КАК ДействуетДо,
	// rarus agar 07.06.2021 17322 --
	|	ДанныеФайла.Исполнение КАК ИсполнениеОпции,
	|	ДанныеФайла.Опция КАК НаименованиеОпции
	|ПОМЕСТИТЬ ВТ_ДанныеФайла
	|ИЗ
	|	&ДанныеФайла КАК ДанныеФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФайла.КодПакета КАК КодПакета,
	|	ВТ_ДанныеФайла.НаименованиеПакета КАК НаименованиеПакета,
	|	ВТ_ДанныеФайла.ЦенаПакета КАК ЦенаПакета,
	|	ВТ_ДанныеФайла.ТипЗначенияЦены КАК ТипЗначенияЦены,
	|	ВТ_ДанныеФайла.ДействуетС КАК ДействуетС,
	// rarus agar 07.06.2021 17322 ++
	|	ВТ_ДанныеФайла.ДействуетДо КАК ДействуетДо,
	// rarus agar 07.06.2021 17322 --
	|	ВТ_ДанныеФайла.ИсполнениеОпции КАК ИсполнениеОпции,
	|	ВТ_ДанныеФайла.НаименованиеОпции КАК НаименованиеОпции,
	|	Scan_ОпцииПродуктов.Ссылка КАК Опция,
	|	Scan_ОпцииПродуктов.Ссылка КАК ЦеновойПакет,
	|	&ИмяФайла КАК Файл
	|ИЗ
	|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
	|		ПО ВТ_ДанныеФайла.ИсполнениеОпции = Scan_ОпцииПродуктов.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ЦеновыеПакеты КАК Scan_ЦеновыеПакеты
	|		ПО ВТ_ДанныеФайла.КодПакета = Scan_ЦеновыеПакеты.Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
	// rarus agar 07.06.2021 17322 ++
	//ТаблицаЦеновыхПакетов    = ТаблицаРезультатаЗапроса.Скопировать(,"КодПакета,НаименованиеПакета,ЦенаПакета,ТипЗначенияЦены,ДействуетС,Файл");
	ТаблицаЦеновыхПакетов    = ТаблицаРезультатаЗапроса.Скопировать(,"КодПакета,НаименованиеПакета,ЦенаПакета,ТипЗначенияЦены,ДействуетС,ДействуетДо,Файл");
	
	//ТаблицаЦеновыхПакетов.Свернуть("КодПакета,НаименованиеПакета,ЦенаПакета,ТипЗначенияЦены,ДействуетС,Файл");
	ТаблицаЦеновыхПакетов.Свернуть("КодПакета,НаименованиеПакета,ЦенаПакета,ТипЗначенияЦены,ДействуетС,ДействуетДо,Файл");
	// rarus agar 07.06.2021 17322 --
	
	Для Каждого СтрокаЦеновогоПакета Из ТаблицаЦеновыхПакетов Цикл
		Если ПустаяСтрока(СтрокаЦеновогоПакета.КодПакета) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦеновойПакетСсылка = Справочники.Scan_ЦеновыеПакеты.НайтиПоКоду(СтрокаЦеновогоПакета.КодПакета);
		Если ЦеновойПакетСсылка.Пустая() Тогда
			ЦеновойПакетОбъект = Справочники.Scan_ЦеновыеПакеты.СоздатьЭлемент();
			ЦеновойПакетОбъект.Код          = СтрокаЦеновогоПакета.КодПакета;
			ЦеновойПакетОбъект.Наименование = СтрокаЦеновогоПакета.НаименованиеПакета;
			Попытка
				ЦеновойПакетОбъект.Записать();
				ЦеновойПакетСсылка = ЦеновойПакетОбъект.Ссылка;
			Исключение КонецПопытки;
		КонецЕсли;
		
		Если СтрокаЦеновогоПакета.ТипЗначенияЦены = "Amount" Тогда
			ТипЗначенияЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыЗначенийЦены.Сумма");
		Иначе
			ТипЗначенияЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыЗначенийЦены.Процент");
		КонецЕсли;
		
		МассивДействуетС = СтрРазделить(СтрокаЦеновогоПакета.ДействуетС, "/");
		Если МассивДействуетС.Количество() = 3 Тогда
			ДействуетСДаты = Дата(Лев(МассивДействуетС[2],4), МассивДействуетС[1], МассивДействуетС[0]);
		Иначе
			ДействуетСДаты = Дата(1,1,1);
		КонецЕсли;
		
		// rarus agar 07.06.2021 17322 ++
		МассивДействуетДо = СтрРазделить(СтрокаЦеновогоПакета.ДействуетДо, "/");
		Если МассивДействуетДо.Количество() = 3 Тогда
			ДействуетДоДаты = Дата(Лев(МассивДействуетДо[2],4), МассивДействуетДо[1], МассивДействуетДо[0]);
		Иначе
			ДействуетДоДаты = Дата(1,1,1);
		КонецЕсли;
		// rarus agar 07.06.2021 17322 --
		
		Если ЗначениеЗаполнено(ЦеновойПакетСсылка) Тогда
			НоваяСтрока = Объект.ЦеновыеПакеты.Добавить();
			НоваяСтрока.ЦеновойПакет     = ЦеновойПакетСсылка;
			НоваяСтрока.ТипЗначенияЦены  = ТипЗначенияЦены;
			НоваяСтрока.ДействуетСДаты   = ДействуетСДаты;
			// rarus agar 07.06.2021 17322 ++
			НоваяСтрока.ДействуетДоДаты  = ДействуетДоДаты;
			// rarus agar 07.06.2021 17322 --
			Если СтрНайти(СтрокаЦеновогоПакета.НаименованиеПакета, "Dealer") Тогда
				НоваяСтрока.ЦенаDealerNet = СтрокаЦеновогоПакета.ЦенаПакета;
			КонецЕсли;
			Если    СтрНайти(СтрокаЦеновогоПакета.НаименованиеПакета, "Retail") 
				Или СтрНайти(СтрокаЦеновогоПакета.НаименованиеПакета, "Customer") 
				Тогда
				НоваяСтрока.ЦенаRetailPrice = СтрокаЦеновогоПакета.ЦенаПакета;
			КонецЕсли;
			НоваяСтрока.Файл  = СтрокаЦеновогоПакета.Файл;
			
			МассивОпций = Новый Массив;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("КодПакета", СтрокаЦеновогоПакета.КодПакета);
			
			НайденныеСтрокиОпций = ТаблицаРезультатаЗапроса.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрокаОпции Из НайденныеСтрокиОпций Цикл
				Если ЗначениеЗаполнено(НайденнаяСтрокаОпции.Опция) Тогда
					МассивОпций.Добавить(НайденнаяСтрокаОпции.Опция);
					РегистрыСведений.Scan_СоответствиеЦеновыхПакетовИОпцийПродуктов.ЗаписатьНаборСоответствий(МассивОпций, ЦеновойПакетСсылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// rarus agar 30.04.2021 17322 ++
&НаСервере
Процедура ПрочитатьФайлЦеновыхПакетовДистрибьютора(ЗначенияВыбранныхПараметров)
	
	ИмяФайла = "";
	
	МассивПодстрок = СтрРазделить(ЗначенияВыбранныхПараметров.ПутьКФайлу, "\", Истина);
	Если МассивПодстрок.Количество() > 0 Тогда
		ИмяФайла = МассивПодстрок[МассивПодстрок.Количество()-1];
	КонецЕсли;
	
	// Сохраняем файл в каталоге временных файлов
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЗначенияВыбранныхПараметров.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	//Читать будем построителем запроса через табличный документ	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);  
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// При чтении файла Excel в табличный документ каждый лист преобразуется в область
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		НомерЛиста = ЗначенияВыбранныхПараметров.НомерЛиста;
		Если НомерЛиста = 0 Тогда
			ИмяОбластиДанных = ТабличныйДокумент.Области[НомерЛиста].Имя;
		Иначе
			ИмяОбластиДанных = ТабличныйДокумент.Области[НомерЛиста-1].Имя;
		КонецЕсли;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки    = ЗначенияВыбранныхПараметров.НомерСтроки;
	НомерПоследнейСтроки = ТабличныйДокумент.ВысотаТаблицы;
	
	// Т.к. читается диапазон ячеек области, берем минимальное и максимальное значение номеров колонок,
	// чтобы не пропустить нужные. Ненужные отсечем далее в запросе
	НомерПервойКолонки = Мин(ЗначенияВыбранныхПараметров.ЦеновойПакетКод, ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование, 
	                         ЗначенияВыбранныхПараметров.ЦеновойПакетЦена, ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены,
							 ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСPP, ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоPP, // rarus agar 07.06.2021 17322 +-
							 ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение, ЗначенияВыбранныхПараметров.ЦеновойПакетОпция);
							 
	НомерПоследнейКолонки = Макс(ЗначенияВыбранныхПараметров.ЦеновойПакетКод, ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование, 
	                         ЗначенияВыбранныхПараметров.ЦеновойПакетЦена, ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены,
							 ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСPP, ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоPP, // rarus agar 07.06.2021 17322 +-
							 ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение, ЗначенияВыбранныхПараметров.ЦеновойПакетОпция);
								 
	// Чтение табличного документа построителем
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	// Результат в таблицу значений - колонки уже типизированы
	Попытка
		ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить(); 
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	// Файл уже не нужен - удаляем
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	Если ДанныеФайла.Колонки.Количество() < 7 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетКодИмя) Тогда
		КолонкаКод = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетКодИмя);
		Если КолонкаКод <> Неопределено Тогда
			КолонкаКод.Имя = "Код";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетКод <> 0 Тогда
			КолонкаКод = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетКод-1];
			КолонкаКод.Имя = "Код";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаКод = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетКод-1];
		КолонкаКод.Имя = "Код";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетНаименованиеИмя) Тогда
		КолонкаНаименование = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетНаименованиеИмя);
		Если КолонкаНаименование <> Неопределено Тогда
			КолонкаНаименование.Имя = "Наименование";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование <> 0 Тогда
			КолонкаНаименование = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование-1];
			КолонкаНаименование.Имя = "Наименование";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаНаименование = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетНаименование-1];
		КолонкаНаименование.Имя = "Наименование";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетЦенаИмя) Тогда
		КолонкаЦена = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетЦенаИмя);
		Если КолонкаЦена <> Неопределено Тогда
			КолонкаЦена.Имя = "Цена";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетЦена <> 0 Тогда
			КолонкаЦена = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетЦена-1];
			КолонкаЦена.Имя = "Цена";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаЦена = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетЦена-1];
		КолонкаЦена.Имя = "Цена";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦеныИмя) Тогда
		КолонкаТипЗначенияЦены = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦеныИмя);
		Если КолонкаТипЗначенияЦены <> Неопределено Тогда
			КолонкаТипЗначенияЦены.Имя = "ТипЗначенияЦены";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены <> 0 Тогда
			КолонкаТипЗначенияЦены = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены-1];
			КолонкаТипЗначенияЦены.Имя = "ТипЗначенияЦены";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаТипЗначенияЦены = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетТипЗначенияЦены-1];
		КолонкаТипЗначенияЦены.Имя = "ТипЗначенияЦены";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСPPИмя) Тогда
		КолонкаДействуетСPP = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСPPИмя);
		Если КолонкаДействуетСPP <> Неопределено Тогда
			КолонкаДействуетСPP.Имя = "ДействуетСPP";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСPP <> 0 Тогда
			КолонкаДействуетСPP = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСPP-1];
			КолонкаДействуетСPP.Имя = "ДействуетСPP";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаДействуетСPP = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетСPP-1];
		КолонкаДействуетСPP.Имя = "ДействуетСPP";
	КонецЕсли;
	
	// rarus agar 07.06.2021 17322 ++
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоPPИмя) Тогда
		КолонкаДействуетДоPP = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоPPИмя);
		Если КолонкаДействуетДоPP <> Неопределено Тогда
			КолонкаДействуетДоPP.Имя = "ДействуетДоPP";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоPP <> 0 Тогда
			КолонкаДействуетДоPP = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоPP-1];
			КолонкаДействуетДоPP.Имя = "ДействуетДоPP";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаДействуетДоPP = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетДействуетДоPP-1];
		КолонкаДействуетДоPP.Имя = "ДействуетДоPP";
	КонецЕсли;
	// rarus agar 07.06.2021 17322 --
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнениеИмя) Тогда
		КолонкаИсполнение = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнениеИмя);
		Если КолонкаИсполнение <> Неопределено Тогда
			КолонкаИсполнение.Имя = "Исполнение";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение <> 0 Тогда
			КолонкаИсполнение = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение-1];
			КолонкаИсполнение.Имя = "Исполнение";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаИсполнение = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИсполнение-1];
		КолонкаИсполнение.Имя = "Исполнение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИмя) Тогда
		КолонкаОпция = ДанныеФайла.Колонки.Найти(ЗначенияВыбранныхПараметров.ЦеновойПакетОпцияИмя);
		Если КолонкаОпция <> Неопределено Тогда
			КолонкаОпция.Имя = "Опция";
		//rarus agar 28.05.2021 17322 ++
		ИначеЕсли ЗначенияВыбранныхПараметров.ЦеновойПакетОпция <> 0 Тогда
			КолонкаОпция = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетОпция-1];
			КолонкаОпция.Имя = "Опция";
		//rarus agar 28.05.2021 17322 --
		КонецЕсли;
	Иначе
		КолонкаОпция = ДанныеФайла.Колонки[ЗначенияВыбранныхПараметров.ЦеновойПакетОпция-1];
		КолонкаОпция.Имя = "Опция";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеФайла", ДанныеФайла);
	Запрос.УстановитьПараметр("ИмяФайла",    ИмяФайла);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеФайла.Код КАК КодПакета,
	|	ДанныеФайла.Наименование КАК НаименованиеПакета,
	|	ДанныеФайла.Цена КАК ЦенаПакета,
	|	ДанныеФайла.ТипЗначенияЦены КАК ТипЗначенияЦены,
	|	ДанныеФайла.ДействуетСPP КАК ДействуетСPP,
	// rarus agar 07.06.2021 17322 ++
	|	ДанныеФайла.ДействуетДоPP КАК ДействуетДоPP,
	// rarus agar 07.06.2021 17322 --
	|	ДанныеФайла.Исполнение КАК ИсполнениеОпции,
	|	ДанныеФайла.Опция КАК НаименованиеОпции
	|ПОМЕСТИТЬ ВТ_ДанныеФайла
	|ИЗ
	|	&ДанныеФайла КАК ДанныеФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФайла.КодПакета КАК КодПакета,
	|	ВТ_ДанныеФайла.НаименованиеПакета КАК НаименованиеПакета,
	|	ВТ_ДанныеФайла.ЦенаПакета КАК ЦенаПакета,
	|	ВТ_ДанныеФайла.ТипЗначенияЦены КАК ТипЗначенияЦены,
	|	ПОДСТРОКА(ВТ_ДанныеФайла.ДействуетСPP, 3, 2) + "" "" + ПОДСТРОКА(ВТ_ДанныеФайла.ДействуетСPP, 5, 2) + "" "" + ПОДСТРОКА(ВТ_ДанныеФайла.ДействуетСPP, 7, 1) КАК ДействуетСPP,
	// rarus agar 07.06.2021 17322 ++
	|	ПОДСТРОКА(ВТ_ДанныеФайла.ДействуетДоPP, 3, 2) + "" "" + ПОДСТРОКА(ВТ_ДанныеФайла.ДействуетДоPP, 5, 2) + "" "" + ПОДСТРОКА(ВТ_ДанныеФайла.ДействуетДоPP, 7, 1) КАК ДействуетДоPP,
	// rarus agar 07.06.2021 17322 --
	|	ВТ_ДанныеФайла.ИсполнениеОпции КАК ИсполнениеОпции,
	|	ВТ_ДанныеФайла.НаименованиеОпции КАК НаименованиеОпции,
	|	Scan_ОпцииПродуктов.Ссылка КАК Опция,
	|	Scan_ОпцииПродуктов.Ссылка КАК ЦеновойПакет,
	|	&ИмяФайла КАК Файл
	|ИЗ
	|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
	|		ПО ВТ_ДанныеФайла.ИсполнениеОпции = Scan_ОпцииПродуктов.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ЦеновыеПакеты КАК Scan_ЦеновыеПакеты
	|		ПО ВТ_ДанныеФайла.КодПакета = Scan_ЦеновыеПакеты.Код";
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
	// rarus agar 07.06.2021 17322 ++
	//ТаблицаЦеновыхПакетов    = ТаблицаРезультатаЗапроса.Скопировать(,"КодПакета,НаименованиеПакета,ЦенаПакета,ТипЗначенияЦены,ДействуетСPP,Файл");
	ТаблицаЦеновыхПакетов    = ТаблицаРезультатаЗапроса.Скопировать(,"КодПакета,НаименованиеПакета,ЦенаПакета,ТипЗначенияЦены,ДействуетСPP,ДействуетДоPP,Файл");
	
	//ТаблицаЦеновыхПакетов.Свернуть("КодПакета,НаименованиеПакета,ЦенаПакета,ТипЗначенияЦены,ДействуетСPP,Файл");
	ТаблицаЦеновыхПакетов.Свернуть("КодПакета,НаименованиеПакета,ЦенаПакета,ТипЗначенияЦены,ДействуетСPP,ДействуетДоPP,Файл");
	// rarus agar 07.06.2021 17322 --
	
	Для Каждого СтрокаЦеновогоПакета Из ТаблицаЦеновыхПакетов Цикл
		Если ПустаяСтрока(СтрокаЦеновогоПакета.КодПакета) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦеновойПакетСсылка = Справочники.Scan_ЦеновыеПакеты.НайтиПоКоду(СтрокаЦеновогоПакета.КодПакета);
		Если ЦеновойПакетСсылка.Пустая() Тогда
			ЦеновойПакетОбъект = Справочники.Scan_ЦеновыеПакеты.СоздатьЭлемент();
			ЦеновойПакетОбъект.Код          = СтрокаЦеновогоПакета.КодПакета;
			ЦеновойПакетОбъект.Наименование = СтрокаЦеновогоПакета.НаименованиеПакета;
			Попытка
				ЦеновойПакетОбъект.Записать();
				ЦеновойПакетСсылка = ЦеновойПакетОбъект.Ссылка;
			Исключение КонецПопытки;
		КонецЕсли;
		
		Если СтрокаЦеновогоПакета.ТипЗначенияЦены = "Amount" Тогда
			ТипЗначенияЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыЗначенийЦены.Сумма");
		Иначе
			ТипЗначенияЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыЗначенийЦены.Процент");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЦеновойПакетСсылка) Тогда
			НоваяСтрока = Объект.ЦеновыеПакеты.Добавить();
			НоваяСтрока.ЦеновойПакет          = ЦеновойПакетСсылка;
			НоваяСтрока.ТипЗначенияЦены       = ТипЗначенияЦены;
			НоваяСтрока.ДействуетСPartPeriod  = СтрокаЦеновогоПакета.ДействуетСPP;
			// rarus agar 07.06.2021 17322 ++
			НоваяСтрока.ДействуетДоPartPeriod = СтрокаЦеновогоПакета.ДействуетДоPP;
			// rarus agar 07.06.2021 17322 --
			НоваяСтрока.ЦенаDistrNet          = СтрокаЦеновогоПакета.ЦенаПакета;
			НоваяСтрока.Файл                  = СтрокаЦеновогоПакета.Файл;
			
			МассивОпций = Новый Массив;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("КодПакета", СтрокаЦеновогоПакета.КодПакета);
			
			НайденныеСтрокиОпций = ТаблицаРезультатаЗапроса.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрокаОпции Из НайденныеСтрокиОпций Цикл
				Если ЗначениеЗаполнено(НайденнаяСтрокаОпции.Опция) Тогда
					МассивОпций.Добавить(НайденнаяСтрокаОпции.Опция);
					РегистрыСведений.Scan_СоответствиеЦеновыхПакетовИОпцийПродуктов.ЗаписатьНаборСоответствий(МассивОпций, ЦеновойПакетСсылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// rarus agar 30.04.2021 17322 --

&НаСервере
Процедура ВыполнитьЗаполнениеЦен()
	
	Для Каждого СтрокаОпцииПродуктов Из Объект.ОпцииПродуктов Цикл
		СтрокаОпцииПродуктов.ЦенаDealerNet   = СтрокаОпцииПродуктов.ЦенаDistrNet * РезультатРасчетаКоэффициентаНаДилера;
		СтрокаОпцииПродуктов.ЦенаRetailPrice = СтрокаОпцииПродуктов.ЦенаDistrNet * РезультатРасчетаКоэффициентаНаКлиента;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеДляВыгрузки()
	
	#Область ЗапросДанных
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.Опция.Родитель.Код КАК FamilyName,
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.Опция.Код КАК Execution,
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.Опция.Наименование КАК Description,
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.ДействуетСДаты КАК _FromDate,
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.ДействуетСPartPeriod КАК FromPP,
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.Скидка КАК Discount,
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.ЦенаDistrNet КАК Distributor,
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.ЦенаDealerNet КАК Dealer,
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.ЦенаRetailPrice КАК Customer
	|ИЗ
	|	Документ.Scan_УстановкаЦенОпцийИПакетов.ОпцииПродуктов КАК Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов
	|ГДЕ
	|	Scan_УстановкаЦенОпцийИПакетовОпцииПродуктов.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	FamilyName,
	|	Execution";
	
	ДанныеДляФайла = Запрос.Выполнить().Выгрузить();
	
	#КонецОбласти
	
	#Область ПостОбработкаДанных
	
	ДанныеДляФайла.Колонки.Вставить(4, "FromDate", Новый ОписаниеТипов("Строка")); 
	ДанныеДляФайла.Колонки.Вставить(6, "ToDate", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаДанных Из ДанныеДляФайла Цикл
		СтрокаДанных.Execution = СтрЗаменить(СтрокаДанных.Execution, СтрокаДанных.FamilyName, "");
		Если ЗначениеЗаполнено(СтрокаДанных._FromDate) Тогда
			СтрокаДанных.FromDate  = Лев(Строка(СтрокаДанных._FromDate), 10);
		КонецЕсли;
		Если Не ПустаяСтрока(СтрокаДанных.FromPP) Тогда
			СтрокаДанных.FromPP    = "20"+ СтрЗаменить(СтрокаДанных.FromPP," ","");
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляФайла.Колонки.Удалить("_FromDate"); 
	
	#КонецОбласти
	
	#Область ТабличныйДокумент
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
	ПостроительОтчета.ВыводитьПодвалТаблицы   = Ложь;
	ПостроительОтчета.ВыводитьПодвалОтчета    = Ложь;
	ПостроительОтчета.ВыводитьОбщиеИтоги      = Ложь;
	ПостроительОтчета.Макет                   = ПолучитьОбщийМакет("Scan_ПрайсЛистETBO");
	ПостроительОтчета.МакетШапкиТаблицы       = "ШапкаТаблицы";
	ПостроительОтчета.МакетДетальныхЗаписей   = "СтрокаТаблицы";
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ДанныеДляФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПостроительОтчета.Вывести(ТабличныйДокумент);
		
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("R2"), ТабличныйДокумент.Область("R2"), ТипСмещенияТабличногоДокумента.ПоГоризонтали, Ложь);
	Для Счетчик = 1 По 11 Цикл
		ТабличныйДокумент.Область(2, Счетчик, 2, Счетчик).Текст = "";
	КонецЦикла;
	ТабличныйДокумент.Область(2, 10, 2, 10).Текст = РезультатРасчетаКоэффициентаНаДилера;
	ТабличныйДокумент.Область(2, 11, 2, 11).Текст = РезультатРасчетаКоэффициентаНаКлиента;
	
	#КонецОбласти
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРезультатРасчетаКоэффициентаНаДилера()
	
	РезультатРасчетаКоэффициентаНаДилера = Scan_ЦенообразованиеСервер.РассчитатьСоставляющую(Объект.КоэффициентDealerNet);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРезультатРасчетаКоэффициентаНаКлиента()
	
	РезультатРасчетаКоэффициентаНаКлиента = Scan_ЦенообразованиеСервер.РассчитатьСоставляющую(Объект.КоэффициентRetailPrice);
	
КонецПроцедуры

&НаСервере
Процедура ОпцииПродуктовПриИзмененииДатыИлиPartPeriod(ДействуетСДаты, ДействуетСPP)
	
	Если  ЗначениеЗаполнено(ДействуетСДаты)
		И ЗначениеЗаполнено(ДействуетСPP)
		И Не Scan_ЦенообразованиеСервер.ДатаСоответствуетPartPeriod(ДействуетСДаты, ДействуетСPP) 
		Тогда
		Сообщить(НСтр("ru = 'Указанный Part Period не соответствует дате начала действия'; en = 'The Part Period does not match the From Date'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

