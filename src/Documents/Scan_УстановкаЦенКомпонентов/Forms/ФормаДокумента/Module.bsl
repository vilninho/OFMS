#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);                
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	//ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);  //Отключено т.к. нет перевода для отчета "Движния документа".
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//rarus vikhle 28.12.2020 mt 16638 +++
	ХозОперация = Объект.ХозОперация;
	//rarus vikhle 28.12.2020 mt 16638 ---
	
	Scan_ВспомогательныеФункцииСервер.ИнициализироватьМенюВыбораХозОперации(ЭтаФорма);//rarus vikhle 13.11.2020 mt 16638
		
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокЗаказовНаЗавод();	
	УправлениеДиалогомНаСервере();	
	
	//rarus vikhle 24.11.2020 mt 16638 +++
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗаполнитьДоступныеОпции();		
	КонецЕсли;	
	
	УстановитьУсловноеОформление();
	//rarus vikhle 24.11.2020 mt 16638 ---
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Scan_ВспомогательныеФункцииКлиент.ПроверитьПользователяПортала();//rarus vikhle 07.05.2020 mt 15695
	//rarus vikhle 28.12.2020 mt 16638
	АвтоЗаголовок = Ложь; //формируем сами
	
	//для док-ов, созданных до введения хоз. операций всегда устанавливаем "УстановкаЦенКомпонентов" 
	Если НЕ Объект.Ссылка.Пустая() И ХозОперация.Пустая() Тогда
		Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.УстановкаЦенКомпонентов");
		Scan_УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, "ХозОперацияУстановкаЦенКомпонентов");	
	КонецЕсли;	
	//rarus vikhle 29.12.2020 mt 16638 ---
	
	ОбновитьЗаголовокФормы();
	//rarus vikhle 28.12.2020 mt 16638 ---
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьЗаголовокФормы();//rarus vikhle 28.12.2020 mt 16638
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);	
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект, ПараметрыДействия_НастроитьПараметрыДокумента());
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	Если Команда.Имя="НастроитьПараметрыДокумента" Тогда
		ПараметрыДействия = ПараметрыДействия_НастроитьПараметрыДокумента();
	иначе
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли	
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипЗапросаPRSОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранТипЗапросаPRS_SOrder = (ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.Scan_ТипыЗапросовPRS.SOrder"));
	
	//rarus vikhle 26.11.2020 mt 16638 +++
	Если НЕ ВыбранТипЗапросаPRS_SOrder И (ЗначениеЗаполнено(Объект.ОпцииSOrder) 
		ИЛИ (Объект.СложныйSOrder И 
		(Объект.ДанныеСложногоSOrder.Количество() > 0 
		ИЛИ Объект.СоставСпецификации.Количество() > 0 
		ИЛИ Объект.НезагруженныеОпции.Количество() > 0
		ИЛИ НЕ Объект.Продукт.Пустая()
		ИЛИ НЕ Объект.Калькуляция.Пустая()))) Тогда
		//rarus vikhle 26.11.2020 mt 16638 ---
		ДополнительныеПараметры = Новый Структура("ТекущееЗначение, ВыбранноеЗначение", Объект.ТипЗапросаPRS, ВыбранноеЗначение);
		ОписаниеОповещения 		= Новый ОписаниеОповещения("ТипЗапросаPRSОбработкаВыбора_ПослеОтвета", ЭтотОбъект, ДополнительныеПараметры);	
		//rarus vikhle 26.11.2020 mt 16638 +++
		ЕстьДанныеСложногоSOrder = Ложь;
		Если Объект.СложныйSOrder И 
			(Объект.ДанныеСложногоSOrder.Количество() > 0 
			ИЛИ Объект.СоставСпецификации.Количество() > 0 
			ИЛИ Объект.НезагруженныеОпции.Количество() > 0
			ИЛИ НЕ Объект.Продукт.Пустая()
			ИЛИ НЕ Объект.Калькуляция.Пустая()) Тогда
			ЕстьДанныеСложногоSOrder = Истина;	
		КонецЕсли;
		Если ЕстьДанныеСложногоSOrder Тогда
		ТекстСообщения 			= НСтр("ru = 'Табличная часть ""Опции S-order"" и данные на закладке ""Сложный S-Order"" будут очищены. Хотите продолжить?';
							  		   |en = 'The tabular part ""Options S-order"" and ""Complicated S-Order"" page data will be cleaned. Do you want to proceed? ';");
		Иначе
		ТекстСообщения 			= НСтр("ru = 'Табличная часть ""Опции S-order"" будет очищена. Хотите продолжить?';
							  		   |en = 'The tabular part ""Options S-order"" will be cleaned. Do you want to proceed? ';");
		КонецЕсли;
	    //rarus vikhle 26.11.2020 mt 16638 ---
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	Иначе	
		Объект.ТипЗапросаPRS = ВыбранноеЗначение;
		ТипЗапросаPRSПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипЗапросаPRSОбработкаВыбора_ПослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ТипЗапросаPRS = ДополнительныеПараметры.ВыбранноеЗначение;
		Объект.ОпцииSOrder.Очистить();
		ТипЗапросаPRSПриИзменении();
		ОчиститьДанныеЗакладкиСложныйSOrder();
	Иначе //Ответ = Нет
		Объект.ТипЗапросаPRS = ДополнительныеПараметры.ТекущееЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомпонентПриИзменении(Элемент)
	ЗаполнитьСписокЗаказовНаЗавод();	
КонецПроцедуры

//rarus vikhle 13.11.2020 mt 16638 +++
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	Scan_УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.УстановкаЦенКомпонентов") Тогда
		Объект.Продукт 													= ПредопределенноеЗначение("Справочник.Scan_Изделия.ПустаяСсылка");
		Объект.Спецификация 											= ПредопределенноеЗначение("Справочник.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка");
		Объект.НаименованиеСпецификации									= ИмяФайлаСпецификации;
		Элементы.Продукт.Доступность 									= Ложь;
		Элементы.Спецификация.Доступность 								= Ложь;
		Элементы.ДанныеСложногоSOrderЗагрузитьСпецификацию.Доступность	= Истина;
		Элементы.СтраницаСпецификация.Доступность 						= Истина;
		ОчиститьКолонкиЗаменЦен();
		ДоступныеОпции.Очистить();
	ИначеЕсли Объект.СоставСпецификации.Количество() > 0 ИЛИ Объект.НезагруженныеОпции.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаСменыХозОперации",ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'В табличной части ""Данные сложного S-Order"" в строках с установленным признаком ""По прайс-листу"" будут очищены колонки ""Замена"" и ""Цена замены"". 
									|Будут очищены данные на закладке ""Спецификация"" , продолжить?'"); 
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		Элементы.Продукт.Доступность 									= Истина;	
		Элементы.ДанныеСложногоSOrderЗагрузитьСпецификацию.Доступность	= Ложь;
		Элементы.СтраницаСпецификация.Доступность 						= Ложь;
		Объект.НаименованиеСпецификации									= Строка(Объект.Спецификация);
		ИмяФайлаСпецификации											= "";
		ДоступныеОпции.Очистить();
		ОчиститьКолонкиЗаменЦен();
	КонецЕсли;	
	
	ОбновитьЗаголовокФормы();//rarus vikhle 28.12.2020 mt 16638
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФиксированныеНастройки.Отбор,
															"Владелец.Изделие",
															ВидСравненияКомпоновкиДанных.Равно,
															Объект.Продукт,,Истина);
	ПараметрыФормы = Новый Структура("ФиксированныеНастройки",ФиксированныеНастройки);
	ОткрытьФорму("Справочник.Scan_ВерсииБазовыхСпецификаций.ФормаВыбора",
				ПараметрыФормы,Элемент,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СложныйSOrderПриИзменении(Элемент)
	
	Если НЕ Объект.СложныйSOrder 
		И (Объект.ДанныеСложногоSOrder.Количество() > 0 
		ИЛИ Объект.СоставСпецификации.Количество() > 0
		ИЛИ НЕ Объект.Калькуляция = ПредопределенноеЗначение("Документ.Scan_Калькуляция.ПустаяСсылка")
		ИЛИ НЕ Объект.Продукт = ПредопределенноеЗначение("Справочник.Scan_Изделия.ПустаяСсылка")
		ИЛИ НЕ Объект.Спецификация =  ПредопределенноеЗначение("Справочник.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка")) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСложныйSOrder",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,Нстр("ru = 'На закладке ""Сложный S-Order"" имеются данные, они будут очищены, продолжить?'"),РежимДиалогаВопрос.ДаНет);
	//rarus vikhle 10.03.2021 mt 16638 +++	
	//ИначеЕсли Объект.СложныйSOrder И Объект.ЦенаЗапроса > 0 Тогда //rarus vikhle 29.12.2020 mt 16638
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСложныйSOrder",ЭтотОбъект);
	//	ПоказатьВопрос(ОписаниеОповещения,Нстр("ru = 'Поле ""Цена"" будет очищено, продолжить?'"),РежимДиалогаВопрос.ДаНет); //rarus vikhle 29.12.2020 mt 16638 изменил вопрос
	//rarus vikhle 10.03.2021 mt 16638 ---	
	Иначе	
		Элементы.СтраницаСложныйSOrder.Видимость	= Объект.СложныйSOrder;
		//Элементы.ЦенаЗапроса.ТолькоПросмотр 		= Объект.СложныйSOrder; //rarus vikhle 10.03.2021 mt 16638
		//Элементы.ОпцииSOrder.ТолькоПросмотр			= Объект.СложныйSOrder; //rarus vikhle 28.12.2020 mt 16638
		//Объект.ЦенаЗапроса 							= ?(Объект.СложныйSOrder,0,Объект.ЦенаЗапроса);	//rarus vikhle 10.03.2021 mt 16638
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияПриИзменении(Элемент)
	
	Если Объект.Калькуляция.Пустая() Тогда
		Объект.IDПрайсЛиста = 0; 	
	Иначе
		Объект.IDПрайсЛиста = Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Калькуляция,"ИдентификаторПрайсЛиста");	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСложногоSOrderКодОснащенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеСложногоSOrder.ТекущиеДанные;
	Если ТекущиеДанные.КодОснащения.Пустая() Тогда
		ТекущиеДанные.ПоПрайсЛисту = Ложь;
		ТекущиеДанные.Наименование = "";
		ТекущиеДанные.НаименованиеАнглийское = "";
		ТекущиеДанные.Замена = ПредопределенноеЗначение("Справочник.Scan_ОпцииПродуктов.ПустаяСсылка");
		ТекущиеДанные.ЦенаЗамены = 0;
	Иначе 
		ТекущиеДанные.Наименование 				= Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.КодОснащения, "Наименование");
		ТекущиеДанные.НаименованиеАнглийское	= Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.КодОснащения, "НаименованиеАнглийское");
		ТекущиеДанные.ПоПрайсЛисту 				= Истина;
		ТекущиеДанные.Цена 						= ПолучитьЦенуОпции(ТекущиеДанные.КодОснащения,Объект.IDПрайсЛиста);
		ДанныеЗамены 							= ПолучитьДанныеЗамены(ТекущиеДанные.КодОснащения,ДоступныеОпции,Объект.IDПрайсЛиста);
		Если ДанныеЗамены.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные,ДанныеЗамены);	
		КонецЕсли;	
	КонецЕсли;
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСложногоSOrderЗаменаРучнаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеСложногоSOrder.ТекущиеДанные;
	Если ТекущиеДанные.ЗаменаРучная.Пустая() Тогда
		ТекущиеДанные.ЦенаРучнойЗамены = 0;
	Иначе
		ТекущиеДанные.ЦенаРучнойЗамены = ПолучитьЦенуОпции(ТекущиеДанные.ЗаменаРучная,Объект.IDПрайсЛиста);
	КонецЕсли;
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСложногоSOrderЗаменаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеСложногоSOrder.ТекущиеДанные;
	Если НЕ ТекущиеДанные.Замена.Пустая() Тогда
		ТекущиеДанные.ЦенаЗамены = 0; 
		ПолучитьЦенуОпции(ТекущиеДанные.Замена,Объект.IDПрайсЛиста);	
	КонецЕсли;
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктПриИзменении(Элемент)
	
	Если Объект.Продукт.Пустая() Тогда
		Элементы.Спецификация.Доступность = Ложь;	
		Объект.Спецификация = ПредопределенноеЗначение("Справочник.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка");
		ДоступныеОпции.Очистить();
		Объект.НаименованиеСпецификации = "";
	Иначе
		Элементы.Спецификация.Доступность = Истина;
		Объект.Спецификация = ПредопределенноеЗначение("Справочник.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка");
		ДоступныеОпции.Очистить();
		Объект.НаименованиеСпецификации = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСложногоSOrderЗаменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФиксированныеНастройки.Отбор,
															"Ссылка",
															ВидСравненияКомпоновкиДанных.ВСписке,
															ДоступныеОпции,,Истина);
	ПараметрыФормы = Новый Структура("ФиксированныеНастройки",ФиксированныеНастройки);
	ОткрытьФорму("Справочник.Scan_ОпцииПродуктов.ФормаВыбора",
				ПараметрыФормы,Элемент,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСложногоSOrderЗаменаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеСложногоSOrder.ТекущиеДанные;
	Если  ТекущиеДанные.Замена <> ВыбранноеЗначение Тогда 
		Если ДоступныеОпции.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			ОчиститьСообщения();
			ВывестиСообщениеПол(Нстр("ru = 'Опция отсутствует в спецификации.'"));
			ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.Scan_ОпцииПродуктов.ПустаяСсылка");
			ТекущиеДанные.ЦенаЗамены = 0;
			Возврат;
		КонецЕсли;	
			
		ТекущиеДанные.ЦенаЗамены = ПолучитьЦенуОпции(ТекущиеДанные.Замена,Объект.IDПрайсЛиста);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПриИзменении(Элемент)
	
	Если Объект.Спецификация.Пустая() Тогда
		Объект.НаименованиеСпецификации = "";
		ДоступныеОпции.Очистить();
	ИначеЕсли Объект.ДанныеСложногоSOrder.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаСпецификации",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,Нстр("ru = 'В табличной части ""Данные сложного S-Order"" 
												|в строках с установленным признаком ""По прайс-листу"" будут очищены колонки ""Замена"" и ""Цена замены"", продолжить?'"),
												РежимДиалогаВопрос.ДаНет);
	Иначе
 		Объект.НаименованиеСпецификации = Строка(Объект.Спецификация);
	    ОбновитьЗаменыНаСервере();												
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСпецификации(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НаименованиеСпецификации = Строка(Объект.Спецификация);
	    ОбновитьЗаменыНаСервере();
	Иначе
		Объект.Спецификация = ПредопределенноеЗначение("Справочник.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка");
		Объект.НаименованиеСпецификации = "";	
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ДанныеСложногоSOrderЦенаПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСложногоSOrderЦенаЗаменыПриИзменении(Элемент)
	
	ОбновитьИтоги();
		
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСложногоSOrderПослеУдаления(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСложногоSOrderПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		ПодключитьОбработчикОжидания("ПриКопированииСтрокиДанныхСложногоSOrder",0.1,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриКопированииСтрокиДанныхСложногоSOrder()
	
	ОбновитьИтоги();
	
КонецПроцедуры	

&НаКлиенте
Процедура СпецификацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПродуктСпецификации = Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение,"Владелец.Изделие");
	Если ПродуктСпецификации <> Объект.Продукт Тогда
		ОчиститьСообщения();
		ВывестиСообщениеПол(Нстр("ru = 'Продукт спецификации не соответствует текущему.'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	

	
КонецПроцедуры

//rarus vikhle 13.11.2020 mt 16638 ---

#КонецОбласти

#Область ВспомогательныеФункции

&НаКлиенте
Процедура ТипЗапросаPRSПриИзменении()
	ЭтоТипЗапросаPRS_SOrder = (Объект.ТипЗапросаPRS = ПредопределенноеЗначение("Перечисление.Scan_ТипыЗапросовPRS.SOrder"));
	ЭтоТипЗапросаPRS_FFU 	= (Объект.ТипЗапросаPRS = ПредопределенноеЗначение("Перечисление.Scan_ТипыЗапросовPRS.FFU"));
	
	ТипОпцииКомпаненты = Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Компонент, "ТипОпции");
	ЭтоКомпоненета_SOrder	= (ТипОпцииКомпаненты <> ПредопределенноеЗначение("Справочник.Scan_ТипыОпций.SOrderОпции"));
	ЭтоКомпоненета_FFU		= (ТипОпцииКомпаненты <> ПредопределенноеЗначение("Справочник.Scan_ТипыОпций.FFUОпции"));
	
	Если (ЭтоТипЗапросаPRS_SOrder И НЕ ЭтоКомпоненета_SOrder) 
		ИЛИ (ЭтоТипЗапросаPRS_FFU И НЕ ЭтоКомпоненета_FFU)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ТипЗапросаPRS)
	Тогда
		Объект.Компонент = Неопределено;
		ЗаполнитьСписокЗаказовНаЗавод();	
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗаказовНаЗавод()
	СписокЗаказовНаЗавод.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.Компонент) тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказовНаЗаводИзРегистра = РегистрыСведений.Scan_КвотыSOrderFFUФакт.ПолучитьЗаказыНаЗаводСОтборомПоОпции(Объект.Компонент);
	СписокЗаказовНаЗавод.Загрузить(СписокЗаказовНаЗаводИзРегистра);
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	Если ЗначениеЗаполнено(Объект.ТипЗапросаPRS) тогда
		Если Объект.ТипЗапросаPRS = Перечисления.Scan_ТипыЗапросовPRS.SOrder Тогда
			ТипОпции = Справочники.Scan_ТипыОпций.SOrderОпции;
		Иначе //ТипЗапросаPRS = FFU
			ТипОпции = Справочники.Scan_ТипыОпций.FFUОпции;
			Объект.СложныйSOrder = Ложь;//rarus vikhle 17.11.2020 mt 16638	
		КонецЕсли;
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ТипОпции", ТипОпции);
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		Элементы.Компонент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		Элементы.Компонент.ПодсказкаВвода = "";
	Иначе
		Элементы.Компонент.ПодсказкаВвода = НСтр("ru = 'Требуется указать тип запроса.';
		                                         |en = 'Specify Preffered.';");
	КонецЕсли;
	Элементы.Компонент.Доступность = ЗначениеЗаполнено(Объект.ТипЗапросаPRS);
	
	ЭтоТипЗапросаPRS_SOrder = (Объект.ТипЗапросаPRS = Перечисления.Scan_ТипыЗапросовPRS.SOrder);
	Элементы.КатегорияSOrder.Видимость 			= ЭтоТипЗапросаPRS_SOrder;
	Элементы.СложныйSOrder.Видимость 			= ЭтоТипЗапросаPRS_SOrder;//rarus vikhle 17.11.2020 mt 16638
	Элементы.СтраницаСложныйSOrder.Видимость	= Объект.СложныйSOrder;//rarus vikhle 17.11.2020 mt 16638
	Элементы.ЦенаРасчет.Видимость				= ЭтоТипЗапросаPRS_SOrder;//rarus vikhle 10.03.2021 mt 16638
	
	Элементы.ОпцииSOrder.Видимость = ЭтоТипЗапросаPRS_SOrder;
	
	//rarus BProg_Gladkov 13.01.2020 0014560 +++
	НастроитьВидимостьКартинкаПериодДействияПросрочен();
	//rarus BProg_Gladkov 13.01.2020 0014560 ---
	
	//rarus vikhle 17.11.2020 mt 16638 +++
	Элементы.Продукт.Доступность 				= НЕ (Объект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.УстановкаЦенКомпонентов);
	Элементы.Спецификация.Доступность 			= НЕ Объект.Продукт.Пустая();
	Элементы.ДанныеСложногоSOrderЗагрузитьСпецификацию.Доступность = Объект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.УстановкаЦенКомпонентов;
	//Элементы.ЦенаЗапроса.ТолькоПросмотр 		= Объект.СложныйSOrder; //rarus vikhle 10.03.2021 mt 16638
	//Элементы.ОпцииSOrder.ТолькоПросмотр			= Объект.СложныйSOrder; //rarus vikhle 28.12.2020 mt 16638
	Элементы.СтраницаСпецификация.Доступность	= Объект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.УстановкаЦенКомпонентов;
	//rarus vikhle 17.11.2020 mt 16638 ---
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыДействия_НастроитьПараметрыДокумента()
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ЗапретитьИзменение_ВалютаДокумента", Истина);
	Возврат ПараметрыДействия;
КонецФункции

//rarus BProg_Gladkov 13.01.2020 0014560 +++
&НаКлиенте
Процедура ПериодДействияЗапросаСПриИзменении(Элемент)
	ПроверитьПериодНаСервере(Объект.ПериодДействияЗапросаС);
КонецПроцедуры

&НаСервере
Процедура ПроверитьПериодНаСервере(Период)
	РегистрыСведений.Scan_ИнформацияПоPartPeriod.ПроверитьПартПериод(Период);
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериоддействияЗапросаПоПриИзменении(Элемент)
	ПроверитьПериодНаСервере(Объект.ПериоддействияЗапросаПо);
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКартинкаПериодДействияПросрочен()
	Элементы.КартинкаПериодДействияПросрочен.Видимость =  Ложь;
	КрайнийСрокРазмещенияЗаказаНаЗавод = Документы.Scan_УстановкаЦенКомпонентов.ПолучитьКрайнийСрокРазмещенияЗаказНаЗаводПоПартПериоду(Объект.ПериоддействияЗапросаПо);
	Если КрайнийСрокРазмещенияЗаказаНаЗавод = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ПериодПросрочен = (НачалоДня(ТекущаяДата()) > КрайнийСрокРазмещенияЗаказаНаЗавод);
	Элементы.КартинкаПериодДействияПросрочен.Видимость = ПериодПросрочен;
	Если ПериодПросрочен тогда
		НовыйЦветФона = Новый Цвет(255, 220, 220);
		Элементы.ПериоддействияЗапросаПо.ЦветФона = НовыйЦветФона;
	Иначе
		Элементы.ПериоддействияЗапросаПо.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
КонецПроцедуры

//rarus BProg_Gladkov 13.01.2020 0014560 ---

//rarus vikhle 13.11.2020 mt 16638 +++

&НаКлиенте
Процедура ПослеЗакрытияВопросаСложныйSOrder(Результат,ДопПараметры) Экспорт
	
	Если НЕ Объект.СложныйSOrder И Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеЗакладкиСложныйSOrder();
	ИначеЕсли Объект.СложныйSOrder И Результат = КодВозвратаДиалога.Да Тогда
		Элементы.СтраницаСложныйSOrder.Видимость	= Объект.СложныйSOrder;
		//Элементы.ЦенаЗапроса.ТолькоПросмотр 		= Объект.СложныйSOrder; //rarus vikhle 10.03.2021 mt 16638
		//Элементы.ОпцииSOrder.ТолькоПросмотр			= Объект.СложныйSOrder;//rarus vikhle 28.12.2020 mt 16638 
		//Объект.ЦенаЗапроса 							= 0; //rarus vikhle 10.03.2021 mt 16638
		//Объект.ОпцииSOrder.Очистить();//rarus vikhle 29.12.2020 mt 16638
	Иначе
		Объект.СложныйSOrder 						= НЕ Объект.СложныйSOrder;
		Элементы.СтраницаСложныйSOrder.Видимость	= Объект.СложныйSOrder;
		//Элементы.ЦенаЗапроса.ТолькоПросмотр 		= Объект.СложныйSOrder; //rarus vikhle 10.03.2021 mt 16638
		//Элементы.ОпцииSOrder.ТолькоПросмотр			= Объект.СложныйSOrder;	//rarus vikhle 28.12.2020 mt 16638
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьДанныеЗакладкиСложныйSOrder()
	
	Объект.ДанныеСложногоSOrder.Очистить();
	Объект.СоставСпецификации.Очистить();
	Объект.НезагруженныеОпции.Очистить();
	Объект.Калькуляция 							= ПредопределенноеЗначение("Документ.Scan_Калькуляция.ПустаяСсылка");
	Объект.IDПрайсЛиста 						= 0;
	Объект.Продукт 								= ПредопределенноеЗначение("Справочник.Scan_Изделия.ПустаяСсылка");
	Объект.Спецификация 						= ПредопределенноеЗначение("Справочник.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка");
	//Объект.ЦенаЗапроса 							= 0; //rarus vikhle 10.03.2021 mt 16638
	Объект.ЦенаРасчет							= 0; //rarus vikhle 10.03.2021 mt 16638 
	Объект.СуммаЗамен							= 0;
	Объект.СуммаПоПрайсЛисту					= 0;
	Объект.СуммаРучныхЗамен						= 0;
	Объект.НаименованиеСпецификации				= "";
	Элементы.СтраницаСложныйSOrder.Видимость	= Ложь;
	//Элементы.ЦенаЗапроса.ТолькоПросмотр			= Ложь; //rarus vikhle 10.03.2021 mt 16638
	//Элементы.ОпцииSOrder.ТолькоПросмотр			= Объект.СложныйSOrder; //rarus vikhle 28.12.2020 mt 16638
		
	ДоступныеОпции.Очистить();
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Цена
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДанныеСложногоSOrderЦена");
	ПолеЭлемента.Использование = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеСложногоSOrder.ПоПрайсЛисту");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Замена ручная
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДанныеСложногоSOrderЗаменаРучная");
	ПолеЭлемента.Использование = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Scan_ХозяйственныеОперации.УстановкаЦенКомпонентов;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Замена
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДанныеСложногоSOrderЗамена");
	ПолеЭлемента.Использование = Истина;
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеСложногоSOrder.Замена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента.Использование = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеСложногоSOrder.ПоПрайсЛисту");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДанныеСложногоSOrderЦенаЗамены");
	ПолеЭлемента.Использование = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеСложногоSOrder.Замена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьЦенуОпции(Опция,IDПрайсЛиста)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ЦеныКомпонентовСпецификацийСрезПоследних.Цена КАК Цена
	               |ИЗ
	               |	РегистрСведений.Scan_ЦеныКомпонентовСпецификаций.СрезПоследних(
	               |			,
	               |			Опции В (&Опция)
	               |				И ИдентификаторПрайсЛиста = &IDПрайсЛиста
	               |				И ТипЦен = ЗНАЧЕНИЕ(Справочник.Scan_ТипыЦен.ЦенаDealerNet)) КАК Scan_ЦеныКомпонентовСпецификацийСрезПоследних";
	Запрос.УстановитьПараметр("Опция",Опция);
	Запрос.УстановитьПараметр("IDПрайсЛиста",IDПрайсЛиста);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьСпецификациюФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если  РезультатВопроса = КодВозвратаДиалога.Да 
		И Записать()
		Тогда
		Если Объект.СоставСпецификации.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьСпецификациюЗавершение", ЭтотОбъект),
			Нстр("ru = 'Таблица спецификаций заполнена. Данные будут очищены. Продолжить?'; en = 'The specification table is full. Data will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьЗагрузкуСпецификаций();
			Элементы.СтраницыСложныйSOrder.ТекущаяСтраница = Элементы.СтраницаСпецификация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСпецификациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗагрузкуСпецификаций();
	ИначеЕсли ТипЗнч(РезультатВопроса) = Тип("Структура") Тогда
		ЗагрузитьСпецификациюНаСервереИзФайла(РезультатВопроса);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьСпецификациюНаСервереИзФайла(ЗначенияВыбранныхПараметров)		
	
	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресХранилища", АдресВХранилище);
		ЗагрузитьСпецификациюНаСервере(ЗначенияВыбранныхПараметров);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьСпецификациюНаСервереИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСпецификациюНаСервереИзФайлаЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресХранилища", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьСпецификациюНаСервере(ЗначенияВыбранныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСпецификаций()
	
	Модифицированность = Истина;
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьСпецификациюЗавершение", ЭтотОбъект);	
	ПараметрыКоманды = Новый Структура("ИмяКоманды", "ЗагрузитьСпецификацию");
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла",
					ПараметрыКоманды, 
					ЭтотОбъект,,,,
					Обработчик,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСпецификациюНаСервере(СтруктураОтвета)
	
	фИмяФайла = "StandartSpecific.xml";
	ДД = ПолучитьИзВременногоХранилища(СтруктураОтвета.АдресХранилища);
	Путь = КаталогВременныхФайлов();
	ДД.Записать(Путь+фИмяФайла); 
	ИмяФайла = Путь+фИмяФайла;
		
	Объект.НезагруженныеОпции.Очистить();
	Объект.СоставСпецификации.Очистить();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ТипЗначенияXDTO = ФабрикаXDTO.Тип("http://xmlns.scania.com/factory/schema/productdata/v1", "ЗагрузкаСпецификаций");
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипЗначенияXDTO);
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	КвалификаторыСтроки = Новый КвалификаторыСтроки(100);
	ТаблицаКодов.Колонки.Добавить("VariantCode",Новый ОписаниеТипов("Строка",,КвалификаторыСтроки));
	ТаблицаКодов.Колонки.Добавить("FamilyDescription",Новый ОписаниеТипов("Строка",,КвалификаторыСтроки));
	ТаблицаКодов.Колонки.Добавить("ExecutionDescription",Новый ОписаниеТипов("Строка",,КвалификаторыСтроки));
	Для Каждого СтрокаVariant Из ОбъектXDTO.EtelSpecification.ListOfVariant.Variant Цикл
		Если СтрНайти(СтрокаVariant.Execution, "-") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		нСтрокаТаблицыКодов = ТаблицаКодов.Добавить();
		нСтрокаТаблицыКодов.VariantCode = СтрокаVariant.VariantCode;
		нСтрокаТаблицыКодов.FamilyDescription = СтрокаVariant.VariantCode;
		нСтрокаТаблицыКодов.ExecutionDescription = СтрокаVariant.VariantCode;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(Путь, фИмяФайла);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаКодов.VariantCode КАК Опция,
	               |	ТаблицаКодов.FamilyDescription КАК ОписаниеСемейства,
	               |	ТаблицаКодов.ExecutionDescription КАК ОПисаниеИсполнения
	               |ПОМЕСТИТЬ ТаблицаКодов
	               |ИЗ
	               |	&ТаблицаКодов КАК ТаблицаКодов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_ОпцииПродуктов.Ссылка КАК Ссылка,
	               |	ТаблицаКодов.ОписаниеСемейства КАК ОписаниеСемейства,
	               |	ТаблицаКодов.ОПисаниеИсполнения КАК ОПисаниеИсполнения,
	               |	ЕСТЬNULL(ТаблицаКодов.Опция, ЗНАЧЕНИЕ(СПРАВОЧНИК.Scan_ОпцииПродуктов.ПустаяСсылка)) КАК Опция
	               |ИЗ
	               |	ТаблицаКодов КАК ТаблицаКодов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
	               |		ПО ТаблицаКодов.Опция = Scan_ОпцииПродуктов.Код
	               |ГДЕ
	               |	НЕ Scan_ОпцииПродуктов.ПометкаУдаления
	               |	И НЕ Scan_ОпцииПродуктов.ЭтоГруппа";
	Запрос.УстановитьПараметр("ТаблицаКодов",ТаблицаКодов);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.Пустая() Тогда
			нСтрокаТЧ = Объект.НезагруженныеОпции.Добавить();
			нСтрокаТЧ.Исполнение = Выборка.Опция;
			нСтрокаТЧ.Описание = СокрЛП(Выборка.ОписаниеСемейства) + " " + СокрЛП(Выборка.ОПисаниеИсполнения);
		Иначе
			нСтрокаТЧ = Объект.СоставСпецификации.Добавить();
			нСтрокаТЧ.Опция = Выборка.Ссылка;
		КонецЕсли;	
	КонецЦикла;	
	
	ИмяФайла = СтруктураОтвета.ПутьКФайлу;
	Пока Не СтрНайти(ИмяФайла, "\") = 0 Цикл
		ИмяФайла = Сред(ИмяФайла, СтрНайти(ИмяФайла,"\") +1);
	КонецЦикла;
	МассивИмениФайла = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивИмениФайла.Количество() > 0 Тогда
		ИмяФайлаСпецификации = МассивИмениФайла[0];
		Объект.НаименованиеСпецификации = ИмяФайлаСпецификации;
	КонецЕсли;
	
	ЗаполнитьДоступныеОпции();
	ОбновитьЗаменыНаСервере();
	
	Элементы.СтраницыСложныйSOrder.ТекущаяСтраница = Элементы.СтраницаСпецификация;
	
	Scan_ВспомогательныеФункцииСервер.ОбновитьПрисоединенныйФайлНаСервере(СтруктураОтвета,Объект.Ссылка);
	
	Если Объект.НезагруженныеОпции.Количество()>0 Тогда
		Сообщить(НСтр("ru = 'Загрузка завершена. Опции загружены не полностью. Просьба обратиться к администратору 1ДБ'; en = 'Loading is complete. Options are not fully loaded. Please contact the 1DB administrator'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗамены(Опция,СписокДоступныхОпций,IDПрайсЛиста)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ОпцииПродуктов.Ссылка КАК Замена
	               |ПОМЕСТИТЬ Замены
	               |ИЗ
	               |	Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
	               |ГДЕ
	               |	Scan_ОпцииПродуктов.Родитель = &РодительТекущйОпции
	               |	И Scan_ОпцииПродуктов.Ссылка В(&ДоступныеОпции)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Замены.Замена КАК Замена,
	               |	ЕСТЬNULL(Scan_ЦеныКомпонентовСпецификацийСрезПоследних.Цена, 0) КАК ЦенаЗамены
	               |ИЗ
	               |	Замены КАК Замены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ЦеныКомпонентовСпецификаций.СрезПоследних(
	               |				,
	               |				Опции В
	               |						(ВЫБРАТЬ
	               |							Замены.Замена
	               |						ИЗ
	               |							Замены КАК Замены)
	               |					И ИдентификаторПрайсЛиста = &IDПрайсЛиста
	               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.Scan_ТипыЦен.ЦенаDealerNet)) КАК Scan_ЦеныКомпонентовСпецификацийСрезПоследних
	               |		ПО Замены.Замена.Ссылка = Scan_ЦеныКомпонентовСпецификацийСрезПоследних.Опции";
	Запрос.УстановитьПараметр("РодительТекущйОпции",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Опция,"Родитель"));
	Запрос.УстановитьПараметр("ДоступныеОпции",СписокДоступныхОпций);
	Запрос.УстановитьПараметр("IDПрайсЛиста",IDПрайсЛиста);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	Иначе
		Возврат Новый Структура();
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбновленияЗамен(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьЗаменыНаСервере();		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьЗаменыНаСервере()
	
	ЗаполнитьДоступныеОпции();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДанныеСложногоSOrder.КодОснащения КАК Справочник.Scan_ОпцииПродуктов) КАК КодОснащения,
	               |	ДанныеСложногоSOrder.НомерСтроки КАК НомерСтроки,
	               |	ДанныеСложногоSOrder.ПоПрайсЛисту КАК ПоПрайсЛисту
	               |ПОМЕСТИТЬ ДанныеСложногоSOrder
	               |ИЗ
	               |	&ДанныеСложногоSOrder КАК ДанныеСложногоSOrder
	               |ГДЕ
	               |	ДанныеСложногоSOrder.ПоПрайсЛисту
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_ОпцииПродуктов.Ссылка КАК Замена,
	               |	ДанныеСложногоSOrder.КодОснащения КАК КодОснащения,
	               |	ДанныеСложногоSOrder.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ Замены
	               |ИЗ
	               |	ДанныеСложногоSOrder КАК ДанныеСложногоSOrder
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
	               |		ПО ДанныеСложногоSOrder.КодОснащения.Родитель = Scan_ОпцииПродуктов.Родитель
	               |ГДЕ
	               |	Scan_ОпцииПродуктов.Ссылка В(&ДоступныеОпции)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Замены.Замена КАК Замена,
	               |	ЕСТЬNULL(Scan_ЦеныКомпонентовСпецификацийСрезПоследних.Цена, 0) КАК ЦенаЗамены,
	               |	Замены.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Замены КАК Замены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ЦеныКомпонентовСпецификаций.СрезПоследних(
	               |				,
	               |				Опции В
	               |						(ВЫБРАТЬ
	               |							Замены.Замена
	               |						ИЗ
	               |							Замены КАК Замены)
	               |					И ИдентификаторПрайсЛиста = &IDПрайсЛиста
	               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.Scan_ТипыЦен.ЦенаDealerNet)) КАК Scan_ЦеныКомпонентовСпецификацийСрезПоследних
	               |		ПО Замены.Замена.Ссылка = Scan_ЦеныКомпонентовСпецификацийСрезПоследних.Опции";
	Запрос.УстановитьПараметр("ДоступныеОпции",ДоступныеОпции);
	Запрос.УстановитьПараметр("ДанныеСложногоSOrder",Объект.ДанныеСложногоSOrder.Выгрузить());	
	Запрос.УстановитьПараметр("IDПрайсЛиста",Объект.IDПрайсЛиста);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ДанныеСложногоSOrder[Выборка.НомерСтроки - 1]; 
		СтрокаТЧ.Замена = Выборка.Замена;
		СтрокаТЧ.ЦенаЗамены = Выборка.ЦенаЗамены;
	КонецЦикла;	
	
	ОбновитьИтоги();
		
	ВывестиСообщениеПол(Нстр("ru = 'Замены загружены.'"));
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьИтоги()
	
	Объект.СуммаЗамен 			= 0;
	Объект.СуммаПоПрайсЛисту	= 0;
	Объект.СуммаРучныхЗамен		= 0;
	
	Для Каждого СтрокаТаблицы Из Объект.ДанныеСложногоSOrder Цикл 
		Если СтрокаТаблицы.ПоПрайсЛисту Тогда
			Объект.СуммаПоПрайсЛисту = Объект.СуммаПоПрайсЛисту + СтрокаТаблицы.Цена;
		Иначе
			Объект.СуммаРучныхЗамен = Объект.СуммаРучныхЗамен + СтрокаТаблицы.Цена;
		КонецЕсли;
		Если Объект.ХозОперация =  ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.РасчетОтSOrder") Тогда
			Если НЕ СтрокаТаблицы.ЗаменаРучная.Пустая() Тогда
				Объект.СуммаЗамен = Объект.СуммаЗамен + СтрокаТаблицы.ЦенаРучнойЗамены;			
			Иначе
				Объект.СуммаЗамен = Объект.СуммаЗамен + СтрокаТаблицы.ЦенаЗамены;
			КонецЕсли;	
		Иначе
			Объект.СуммаЗамен = Объект.СуммаЗамен + СтрокаТаблицы.ЦенаЗамены;	
		КонецЕсли;	
	КонецЦикла;	
		 
	//Объект.ЦенаЗапроса = Объект.СуммаРучныхЗамен + Объект.СуммаПоПрайсЛисту - Объект.СуммаЗамен;
	Объект.ЦенаРасчет = Объект.СуммаРучныхЗамен + Объект.СуммаПоПрайсЛисту - Объект.СуммаЗамен; //rarus vikhle 10.03.2020 mt 16638
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДоступныеОпции()
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.УстановкаЦенКомпонентов") Тогда
		ДоступныеОпции.ЗагрузитьЗначения(Объект.СоставСпецификации.Выгрузить().ВыгрузитьКолонку("Опция"));		
	ИначеЕсли НЕ Объект.Спецификация.Пустая() Тогда 	
		ДоступныеОпции.ЗагрузитьЗначения(Объект.Спецификация.РасшифровкаОпций.ВыгрузитьКолонку("Опция"));
	КонецЕсли;
		
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаСменыХозОперации(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.Продукт.Доступность 									= Истина;	
		Элементы.ДанныеСложногоSOrderЗагрузитьСпецификацию.Доступность	= Ложь;
		Элементы.СтраницаСпецификация.Доступность 						= Ложь;
		Объект.НаименованиеСпецификации									= Строка(Объект.Спецификация);
		ИмяФайлаСпецификации											= "";
		Объект.СоставСпецификации.Очистить();
		Объект.НезагруженныеОпции.Очистить();
		ДоступныеОпции.Очистить();
		ОчиститьКолонкиЗаменЦен();
	Иначе
		Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.УстановкаЦенКомпонентов");		
		Scan_УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команды.ХозОперацияУстановкаЦенКомпонентов.Имя);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКолонкиЗаменЦен()
	
	ПараметрыОтбора = Новый Структура ("ПоПрайсЛисту",Истина);
	МассивСтрокПоПрайсЛисту = Объект.ДанныеСложногоSOrder.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЭлементМассива Из МассивСтрокПоПрайсЛисту Цикл
		ЭлементМассива.Замена = Справочники.Scan_ОпцииПродуктов.ПустаяСсылка();
		ЭлементМассива.ЦенаЗамены = 0;
	КонецЦикла;	
	
	ОбновитьИтоги();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьСпецификацию(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьСпецификациюФрагмент", ЭтотОбъект),
		Нстр("ru = 'Перед загрузкой необходимо записать документ. Продолжить?'; en = 'It is necessary to save the document. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Если Объект.СоставСпецификации.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьСпецификациюЗавершение", ЭтотОбъект),
			Нстр("ru = 'Таблица спецификаций заполнена. Данные будут очищены. Продолжить?'; en = 'The specification table is full. Data will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьЗагрузкуСпецификаций();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//rarus vikhle 13.11.2020 mt 16638 ---

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	//rarus vikhle 28.12.2020 mt 16638 +++
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = Строка(Объект.Ссылка) + ". " + Строка(Объект.ХозОперация);
	Иначе
		Заголовок = "Установка цен компонентов изделий. " + Строка(Объект.ХозОперация) + " (создание)";
	КонецЕсли;
	//rarus vikhle 28.12.2020 mt 16638 ---
КонецПроцедуры


#КонецОбласти




