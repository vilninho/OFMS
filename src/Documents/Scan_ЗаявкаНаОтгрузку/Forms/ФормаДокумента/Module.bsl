#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//rarus vikhle 15.04.2021 mt 17651 +++
	Если НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ВызватьИсключение "Создание заявок на отгрузку копированием запрещено.";
	КонецЕсли;	
	//rarus vikhle 15.04.2021 mt 17651 ---
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Вызываем общий обработчик события
	Если Не Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	//rarus bonmak 25.01.2021 17090 ++
	Если НЕ ДоступностьЗаявкиДилеруНаСервере() Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//rarus bonmak 25.01.2021 17090 --
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПараметрыДокумента();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ПроектЗаявкиНаОтгрузку");
	КонецЕсли;
	
	//rarus vikhle 16.09.2020 mt 16526
	Если Параметры.Свойство("СписокПродуктов") И Параметры.Свойство("СкладОтгрузки") Тогда
		Для Каждого Продукт Из Параметры.СписокПродуктов Цикл
			нСтрокаТЧ = Объект.Продукты.Добавить();
			нСтрокаТЧ.Продукт = Продукт;
		КонецЦикла;	
		Объект.СкладОтгрузки = Параметры.СкладОтгрузки;
	КонецЕсли;	
	//rarus vikhle 16.09.2020 mt 16526

	ОбновитьКолонкиПродуктов();
	
	ЗаполнитьПолеКонтрагент();
	//ЗаполнитьМестоОтгрузкиСоглашения(); //rarus vikhle 18.09.2020 mt 16526
	ЗаполнитьПараметрыВидимости();
	ЗаполнитьЧат();
	
	УстановитьЦветФонаКомандСтатусов();
	УправлениеДиалогомНаСервере();
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	
	
КонецПроцедуры

&НаСервере
Функция ДоступностьЗаявкиДилеруНаСервере() //rarus bonmak 25.01.2021 17090 ++
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументЗаявка = Объект.Ссылка;
		
	Если Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь") 
		ИЛИ РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	КомпанииПользователя = КомпанииПользователя();
	фДилер = ДокументЗаявка.Дилер;
	Индекс = КомпанииПользователя.Найти(фДилер);
	Если Индекс = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции //rarus bonmak 25.01.2021 17090 --

&НаСервере
Функция КомпанииПользователя() //rarus bonmak 25.01.2021 17090 ++
	КомпанииСКонтрагентами = РегистрыСведений.Scan_КомпанииПользователей.ПолучитьКомпаниюДилераПользователя(ПараметрыСеанса.ТекущийПользователь);
	КомпанииПользователя = КомпанииСКонтрагентами.ВыгрузитьКолонку("Компания");
	Возврат КомпанииПользователя;
КонецФункции //rarus bonmak 25.01.2021 17090 --

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьКолонкиПродуктов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьКолонкиПродуктов();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

//rarus agar 21.01.2021 16981 ++
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена") 
		Или   Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отказ") 
		Тогда
		//rarus vikhle 27.05.2021 mt 17653 +++ перенес в модуль объекта
		//ТаблицаСкладов = ПолучитьСкладыДоИзменений();//rarus vikhle 08.02.2021 mt 16981
		//Для Каждого СтрокаПродукта Из Объект.Продукты Цикл
		//	ПродуктОбъект = СтрокаПродукта.Продукт.ПолучитьОбъект();
		//	//rarus vikhle 08.02.2021 mt 16981 +++ Для записи источника и статуса в регистре история продуктов
		//	ПродуктОбъект.ДополнительныеСвойства.Вставить("Источник",Объект.Ссылка);
		//	ПродуктОбъект.ДополнительныеСвойства.Вставить("Статус",Объект.Статус);
		//	
		//	СтрокаТаблицыСкладов = ТаблицаСкладов.Найти(ПродуктОбъект.Ссылка);
		//	Если СтрокаТаблицыСкладов <> Неопределено Тогда
		//		Если СтрокаПродукта.Продукт.СкладПродажи <> СтрокаТаблицыСкладов.СкладПродажи Тогда
		//			ПродуктОбъект.СкладПродажи = СтрокаТаблицыСкладов.СкладПродажи; 	
		//		КонецЕсли;	
		//		Если СтрокаПродукта.Продукт.МестоПередачи <> СтрокаТаблицыСкладов.МестоПередачи Тогда
		//			ПродуктОбъект.МестоПередачи = СтрокаТаблицыСкладов.МестоПередачи; 	
		//		КонецЕсли;
		//	КонецЕсли;	
		//	//rarus vikhle 08.02.2021 mt 16981 ---
		//	СтрокаЗаявкиНаСоп = Объект.СоглашениеОПоставке.СписокПродуктов.Найти(СтрокаПродукта.Продукт);
		//	Если СтрокаЗаявкиНаСоп <> Неопределено Тогда
		//		Если СтрокаПродукта.Продукт.ЗапрашиваемоеМестоПередачи <> СтрокаЗаявкиНаСоп.СкладОтгрузки Тогда
		//			ПродуктОбъект.ЗапрашиваемоеМестоПередачи = СтрокаЗаявкиНаСоп.СкладОтгрузки;
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//	Если ПродуктОбъект.Модифицированность() Тогда
		//		Попытка
		//			ПродуктОбъект.Записать();
		//		Исключение 
		//			ТекстОшибки = "Произошла ошибка при записи продукта: " + ОписаниеОшибки(); 
		//			Сообщить(ТекстОшибки);
		//			ЗаписьЖурналаРегистрации("Запись продукта",
		//			                         УровеньЖурналаРегистрации.Ошибка,,СтрокаПродукта.Продукт,
		//			                         ТекстОшибки);
		//		КонецПопытки;
		//	КонецЕсли;
		//КонецЦикла;
		//rarus vikhle 27.05.2021 mt 17653 ---
	Иначе //rarus vikhle 08.02.2021 mt 16981
		Для Каждого СтрокаПродукта Из Объект.Продукты Цикл
			ПродуктОбъект = СтрокаПродукта.Продукт.ПолучитьОбъект();
			//rarus vikhle 08.02.2021 mt 16981 +++ Для записи источника и статуса в регистре история продуктов
			ПродуктОбъект.ДополнительныеСвойства.Вставить("Источник",Объект.Ссылка);
			ПродуктОбъект.ДополнительныеСвойства.Вставить("Статус",Объект.Статус);
			//rarus vikhle 08.02.2021 mt 16981 ---
			Если Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Одобрена") Тогда //rarus vikhle 08.02.2021 mt 16981 
				Если Не Объект.СкладОтгрузки.Пустая()
					И   ПродуктОбъект.ЗапрашиваемоеМестоПередачи <> Объект.СкладОтгрузки 
					Тогда
					ПродуктОбъект.ЗапрашиваемоеМестоПередачи = Объект.СкладОтгрузки;
				КонецЕсли;
			КонецЕсли;	
				
			Если Не СтрокаПродукта.СкладПродажи.Пустая()
				И   ПродуктОбъект.СкладПродажи <> СтрокаПродукта.СкладПродажи 
				Тогда
				ПродуктОбъект.СкладПродажи =  СтрокаПродукта.СкладПродажи;
			КонецЕсли;
			
			Если Не СтрокаПродукта.МестоПередачи.Пустая()
				И   ПродуктОбъект.МестоПередачи <> СтрокаПродукта.МестоПередачи 
				Тогда
				ПродуктОбъект.МестоПередачи =  СтрокаПродукта.МестоПередачи;
			КонецЕсли;
			
			Если ПродуктОбъект.Модифицированность() Тогда
				Попытка
					ПродуктОбъект.Записать();
				Исключение 
					ТекстОшибки = "Произошла ошибка при записи продукта: " + ОписаниеОшибки(); 
					Сообщить(ТекстОшибки);
					ЗаписьЖурналаРегистрации("Запись продукта",
					                         УровеньЖурналаРегистрации.Ошибка,,СтрокаПродукта.Продукт,
					                         ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 21.01.2021 16981 --

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//rarus vikhle 15.04.2021 mt 17484 +++
&НаКлиенте
Процедура ДилерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДилерОбработкаВыбораПродолжение",ЭтотОбъект,ВыбранноеЗначение);
	Scan_ВспомогательныеФункцииКлиент.ПроверитьАктивностьВыбраннойКомпании(ВыбранноеЗначение,ОписаниеОповещения,СтандартнаяОбработка,Ложь);
	
КонецПроцедуры
//rarus vikhle 15.04.2021 mt 17484 ---

&НаКлиенте
Процедура ДилерПриИзменении(Элемент)
	
	ЗаполнитьПолеКонтрагент();
	
КонецПроцедуры

//rarus agar 21.01.2021 16981 ++
//&НаКлиенте
//Процедура СкладОтгрузкиПриИзменении(Элемент)
//	
//	//УправлениеДиалогомНаСервере();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура СкладОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//	ПараметрыОтбора = Новый Структура;
//	//ПараметрыОтбора.Вставить("Контрагент",       Контрагент);
//	ПараметрыОтбора.Вставить("Маршрут",          Ложь);
//	ПараметрыОтбора.Вставить("Недействительный", Ложь);
//	
//	ПараметрыФормы = Новый Структура;
//	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
//	
//	ОткрытьФорму("Справочник.Scan_МестаХранения.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура МестоДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//	ПараметрыОтбора = Новый Структура;
//	ПараметрыОтбора.Вставить("Контрагент",       Контрагент);
//	ПараметрыОтбора.Вставить("Маршрут",          Ложь);
//	ПараметрыОтбора.Вставить("Недействительный", Ложь);
//	
//	ПараметрыФормы = Новый Структура;
//	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
//	
//	ОткрытьФорму("Справочник.Scan_МестаХранения.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ТребуетсяПерегонПриИзменении(Элемент)
//	
//	Если Объект.ТребуетсяПерегон Тогда
//		Объект.ТребуетсяХранение = Ложь;
//	Иначе
//		Объект.МестоДоставки     = Неопределено;
//	КонецЕсли;
//	
//	УправлениеДиалогомНаСервере();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ТребуетсяХранениеПриИзменении(Элемент)
//	
//	Если Объект.ТребуетсяХранение Тогда
//		Объект.ТребуетсяПерегон = Ложь;
//		Объект.МестоДоставки    = Неопределено;
//	КонецЕсли;
//	
//	УправлениеДиалогомНаСервере();
//	
//КонецПроцедуры
//rarus agar 21.01.2021 16981 --

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьВремяОтгрузкиНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
		Объект.ДатаОтгрузкиВыходной = ДатаОтгрузкиЯвляетсяВыходным(Объект.ДатаОтгрузки);
		Если Объект.ДатаОтгрузкиВыходной Тогда
			Сообщить(НСтр("ru = 'Выбранная дата отгрузки является выходным!'; en = 'The selected shipping date is a holiday!'"));
		КонецЕсли;
	Иначе
		Объект.ДатаОтгрузкиВыходной = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

//rarus agar 15.03.2021 17453 ++
&НаКлиенте
Процедура СкладОтгрузкиПриИзменении(Элемент)
	
	Объект.ТребуетсяХранение = Ложь;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры
//rarus agar 15.03.2021 17453 --

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ПродуктыПродуктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//rarus agar 28.08.2020 15696 ++
	фиксНастройки = Новый НастройкиКомпоновкиДанных;
	
	МассивПродуктов = ПолучитьПродуктыСоглашенияОПоставке(Объект.СоглашениеОПоставке);
	
	СписокПродуктов = Новый СписокЗначений;
	СписокПродуктов.ЗагрузитьЗначения(МассивПродуктов);
	
	эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	эОтбор.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	эОтбор.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	эОтбор.ПравоеЗначение   = СписокПродуктов;
	эОтбор.Использование    = Истина;
	эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//rarus agar 28.08.2020 15696 --

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
	
	ОткрытьФорму("Справочник.Scan_Изделия.ФормаВыбора", ПараметрыФормы, Элементы.ПродуктыПродукт);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыПродуктОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Не Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("Ключ,ФормаОткрытаИзРабочегоМестаДилера", Элементы.Продукты.ТекущиеДанные.Продукт, Истина);
		ОткрытьФорму("Справочник.Scan_Изделия.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыПродуктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//rarus agar 28.08.2020 15696 ++
	Если ПродуктЯвляетсяНадстройкойИлиУслугой(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить(НСтр("ru = 'Продукт является надстройкой или услугой - нельзя добавить в документ.';
		              |en = 'The product is a body or a service. Adding prohibited'"));
		Возврат;
	КонецЕсли;
	
	МассивПродуктов = ПолучитьПродуктыСоглашенияОПоставке(Объект.СоглашениеОПоставке);
	Если МассивПродуктов.Найти(ВыбранноеЗначение) = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		//rarus vikhle 05.11.2020 mt 16723 +++
		//Сообщить(НСтр("ru = 'Продукт не найден в списке продуктов соглашения о поставке - нельзя добавить в документ.';
		//              |en = 'The product was not found in the supply agreement list. Adding prohibited'"));
		Сообщить(НСтр("ru = 'Продукт не найден в списке продуктов заявки на СОП - нельзя добавить в документ.';
		              |en = 'The product was not found in the supply agreement list. Adding prohibited'"));
		//rarus vikhle 05.11.2020 mt 16723 ---
		Возврат;
	КонецЕсли;
	//rarus agar 28.08.2020 15696 --
	
	НайденныеСтроки = Объект.Продукты.НайтиСтроки(Новый Структура("Продукт",ВыбранноеЗначение));
	Если  НайденныеСтроки.Количество() > 0
		И НайденныеСтроки[0].НомерСтроки <> ТекущийЭлемент.ТекущаяСтрока + 1
		Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Объект ""%1"" уже подобран в табличную часть в строке ""%2"". Нельзя добавить два одинаковых продукта в заявку.';
		                                |en = 'The product ""1%"" is already picked up in the line ""2%"". You cannot add the same product twice.'"), 
		                                ВыбранноеЗначение, НайденныеСтроки[0].НомерСтроки);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Дилер) Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗначениеОтбора = Новый Структура("Владелец", Объект.Дилер);
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
		Результат = ОткрытьФорму("Справочник.Scan_КонтактныеЛица.ФормаВыбора", ПараметрыФормы, Элементы.КонтактныеЛицаКонтактноеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайденныеСтроки = Объект.КонтактныеЛица.НайтиСтроки(Новый Структура("КонтактноеЛицо", ВыбранноеЗначение));
	
	Если  НайденныеСтроки.Количество()> 0 
		И НайденныеСтроки[0].НомерСтроки <> ТекущийЭлемент.ТекущаяСтрока + 1 
		Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ИндексТекущейСтроки = Объект.КонтактныеЛица.Индекс(Элементы.КонтактныеЛица.ТекущиеДанные);
	Объект.КонтактныеЛица.Удалить(ИндексТекущейСтроки);  
	ЗаполнитьКонтактнуюинформацию(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) // rarus tenkam 26.08.2020 mantis 16181 +++
	ТекущиеДанные = Элементы.Продукты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументУстановкиЦен) 
		И Элемент.ТекущийЭлемент = Элементы.ПродуктыДокументУстановкиЦен Тогда 
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("Ключ",ТекущиеДанные.ДокументУстановкиЦен);
		ОткрытьФорму("Документ.Scan_УстановкаПлановыхЦенПродукта.Форма.ФормаОтображения",ПараметрыОткрытия,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиВМонитор(Команда)
	
	ПараметрыОткрытия = Новый Структура("ДатаОтгрузки", Объект.ДатаОтгрузки);
	
	ОткрытьФорму("Обработка.Scan_МониторБронированияОтгрузок.Форма", ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыОчистить(Команда)
	
	Если Объект.Продукты.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродуктыОчиститьЗавершение", ЭтотОбъект),
		Нстр("ru = 'Таблица продуктов будет очищена. Продолжить?'; en = 'Table will be clreared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Продукты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыПеренестиНепроданные(Команда)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЧастичноИсполнена") Тогда
		Сообщить(НСтр("ru = 'Перенос непроданных продуктов возможен только в статусе заявки ""Частично исполнена"".'; 
		              |en = 'The action is possible only in the ""Partially completed "" status.'"));
		Возврат;
	КонецЕсли;
	
	НепроданныеПродукты = ПолучитьНепроданныеПродуктыНаСервере();
	
	Если НепроданныеПродукты.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродуктыПеренестиНепроданныеЗавершение", ЭтотОбъект, Новый Структура("НепроданныеПродукты", НепроданныеПродукты)),
		Нстр("ru = 'Непроданные продукты будут перенесены в новый документ. 
		           |У данного документа будет установлен статус ""ИСПОЛНЕНА"".
		           |Продолжить?'; 
			 |en = 'The unsold products will be moved to a new document. 
				   |This document will have the status ""COMPLETED""
				   |Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Сообщить(НСтр("ru = 'Непроданные продукты отсутствуют.'; en = 'There are no unsold products.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыПеренестиНепроданныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ФормаНовойЗаявки = ПолучитьФорму("Документ.Scan_ЗаявкаНаОтгрузку.ФормаОбъекта");
		ДанныеФормы = ФормаНовойЗаявки.Объект;
		
		ПеренестиНепроданныеПродуктыНаСервере(ДанныеФормы, ДополнительныеПараметры.НепроданныеПродукты);
		КопироватьДанныеФормы(ДанныеФормы, ФормаНовойЗаявки.Объект);
		
		Если ФормаНовойЗаявки.Объект.Продукты.Количество() > 0 Тогда
			Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Исполнена");
			Записать();
			
			УправлениеДиалогомНаСервере();
			
			ФормаНовойЗаявки.Записать();
			ФормаНовойЗаявки.Открыть();
		Иначе
			Сообщить(НСтр("ru = 'Непроданные продукты отсутствуют.'; en = 'There are no unsold products.'"));
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыУдалитьНепроданные(Команда)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЧастичноИсполнена") Тогда
		Сообщить(НСтр("ru = 'Удаление непроданных продуктов возможен только в статусе заявки ""Частично исполнена"".'; 
		              |en = 'The action is possible only in the ""Partially completed ""status.'"));
		Возврат;
	КонецЕсли;
	
	НепроданныеПродукты = ПолучитьНепроданныеПродуктыНаСервере();
	
	Если НепроданныеПродукты.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродуктыУдалитьНепроданныеЗавершение", ЭтотОбъект, Новый Структура("НепроданныеПродукты", НепроданныеПродукты)),
		Нстр("ru = 'Непроданные продукты будут удалены из списка продуктов. 
		           |У данного документа будет установлен статус ""ИСПОЛНЕНА"".
		           |Продолжить?'; 
			 |en = 'The unsold products will be removed from the products list. 
				   |This document will have the status ""COMPLETED""
				   |Proceed?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Сообщить(НСтр("ru = 'Непроданные продукты отсутствуют.'; en = 'There are no unsold products.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыУдалитьНепроданныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдаляемыеСтрокиПродуктов = Новый Массив;
		НепроданныеПродукты      = ДополнительныеПараметры.НепроданныеПродукты;
		
		Для Каждого СтрокаПродукта Из Объект.Продукты Цикл
			Если НепроданныеПродукты.Найти(СтрокаПродукта.Продукт) <> Неопределено Тогда
				УдаляемыеСтрокиПродуктов.Добавить(СтрокаПродукта);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиПродуктов Цикл
			Объект.Продукты.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Исполнена");
		Записать();
		
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтменить(Команда)
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена");
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправитьДистрибьютору(Команда)
	
	СтарыйСтатус  = Объект.Статус;
	
	ДатаОтгрузкиВДиапазоне = Истина;
	СкладОтгрузкиСовпадает = Истина;
	
	Для Каждого СтрокаПродукта Из Объект.Продукты Цикл
		//Если Не (Объект.ДатаОтгрузки >= СтрокаПродукта.DDЗапрошенная ///rarus vikhle 30.09.2020 mt 16181
		DD2 = ?(ЗначениеЗаполнено(СтрокаПродукта.DD2),СтрокаПродукта.DD2,СтрокаПродукта.DD); // rarus kabany 23.07.2021 18036 ++
		Если Не ((Объект.ДатаОтгрузки >= СтрокаПродукта.DD ИЛИ Объект.ДатаОтгрузки >= DD2) ///rarus agar 05.03.2021 17387 // rarus kabany 23.07.2021 18036 ++ добавил DD2
			И    Объект.ДатаОтгрузки <= СтрокаПродукта.DDS)
			Тогда
			ДатаОтгрузкиВДиапазоне = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//rarus agar 21.01.2021 16981 ++
	СкладыОтгрузкиЗаявки = ПолучитьСкладыОтгрузкиЗаявки(Объект.СоглашениеОПоставке);
	Для Каждого СтрокаПродукта Из Объект.Продукты Цикл
		СкладОтгрузкиЗаявки = СкладыОтгрузкиЗаявки.Получить(СтрокаПродукта.Продукт);
		Если Объект.СкладОтгрузки <> СкладОтгрузкиЗаявки Тогда
			СкладОтгрузкиСовпадает = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//rarus agar 21.01.2021 16981 --
	
	Если     ДатаОтгрузкиВДиапазоне
		//И Не Объект.ТребуетсяПерегон //rarus agar 21.01.2021 16981 +-
		И СкладОтгрузкиСовпадает //rarus agar 21.01.2021 16981 +-
		И Не Объект.ДатаОтгрузкиВыходной
		Тогда
		Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Одобрена");
	Иначе
		Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЗаявкаНаОтгрузку");
	КонецЕсли;
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПересмотр(Команда)
	
	Подсказка = НСтр("ru = 'Укажите причину пересмотра!'; en = 'Enter the reason for revision!'");
	
	Оповещение = Новый ОписаниеОповещения("ПослеУказанияПричиныПересмотра", ЭтотОбъект);
	ПоказатьВводСтроки(Оповещение, "", Подсказка, 0, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУказанияПричиныПересмотра(ПричинаПересмотра, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(ПричинаПересмотра) Тогда
		Сообщить(НСтр("ru = 'Пересмотр заявки на отгрузку требует указания причины пересмотра!'; en = 'Revision of the shipment request requires an indication of the reason for revision!'"));
		Возврат;
	КонецЕсли;
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Пересмотр");
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	Иначе
		ЗаписатьПричинуПересмотраВСообщенияНаСервере(ПричинаПересмотра);
		ЗаполнитьЧат();
		
		// rarus kabany 24.06.2021 17821 +++
		Если Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Пересмотр") Тогда
			РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонПисьмаОСменеСтатусаЗаявкиНаОтгрузку", Объект.Ссылка);
		КонецЕсли;
		// rarus kabany 24.06.2021 17821 ---

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНаСогласование(Команда)
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Согласование");
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОдобрена(Команда)
	
	//rarus agar 21.01.2021 16981 ++
	//Если  Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЗаявкаНаОтгрузку") 
	//	И Объект.ТребуетсяПерегон 
	//	Тогда
	//	Сообщить(НСтр("ru = 'Заявка на отгрузку с перегоном требует согласования!'; en = 'Shipment request with a haul requires approval!'"));
	//	Возврат;
	//КонецЕсли;
	//rarus agar 21.01.2021 16981 --
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Одобрена");
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтказ(Команда)
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отказ");
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСообщение(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЧата", ЭтотОбъект,, "ОповещениеЧата", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.Scan_Сообщения.Форма.ФормаЗаписи", ПараметрыОткрытия, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЧата(ВидХарактеристики, Параметры) экспорт
	
	ЗаполнитьЧат();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	//ОбработкаПараметровВидимости();
	Scan_ПараметрыВидимостиОбъектовСервер.ОбработкаПараметровВидимости(ЭтотОбъект);
	УстановитьУсловноеОформление();//rarus vikhle 08.02.2021 mt 16981 ++
	
	ЦветТекстаСтатуса = Объект.Статус.ЦветТекста.Получить();
	Если ЦветТекстаСтатуса = Неопределено Тогда
		Элементы.Статус.ЦветТекста = Новый Цвет;
	Иначе
		Элементы.Статус.ЦветТекста = ЦветТекстаСтатуса;
	КонецЕсли;
	
	ЦветФонаСтатуса = Объект.Статус.ЦветФона.Получить();
	Если ЦветФонаСтатуса = Неопределено Тогда
		Элементы.Статус.ЦветФона = Новый Цвет;
	Иначе
		Элементы.Статус.ЦветФона = ЦветФонаСтатуса;
	КонецЕсли;
	
	//rarus agar 21.01.2021 16981 ++
	//Элементы.МестоДоставки.Видимость                 = Объект.ТребуетсяПерегон;
	//Элементы.МестоДоставки.АвтоОтметкаНезаполненного = Объект.ТребуетсяПерегон;
	//rarus agar 21.01.2021 16981 --
	
	//rarus agar 21.01.2021 16981 ++
	//Если Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Одобрена") Тогда
	//	Элементы.СтатусОтменить.Видимость = Не Объект.ТребуетсяПерегон;
	//КонецЕсли;
	//rarus agar 21.01.2021 16981 --
	
	Элементы.ДекорацияВыходной.Видимость   = Элементы.ДатаОтгрузки.Видимость И Объект.ДатаОтгрузкиВыходной;
	Элементы.ДобавитьСообщение.Доступность = Не Объект.Ссылка.Пустая();
	
	Элементы.ПараметрыДокумента.КнопкаОткрытия     = Не Элементы.ГруппаСлужебныеПоля.ТолькоПросмотр;
	Элементы.НастроитьПараметрыДокумента.Видимость = Не Элементы.ГруппаСлужебныеПоля.ТолькоПросмотр И Элементы.ГруппаСлужебныеПоля.Видимость;
	
	//rarus agar 15.03.2021 17453 ++
	МестаХраненияСканияРусь = ПолучитьМестаХраненияСканияРусь(Объект.СкладОтгрузки);
	Элементы.ТребуетсяХранение.ТолькоПросмотр = Объект.СкладОтгрузки.Пустая() Или МестаХраненияСканияРусь.Количество() = 0;
	//rarus agar 15.03.2021 17453 --
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВидимости()
	
	ОбъектНастройки = Метаданные.Документы.Scan_ЗаявкаНаОтгрузку.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РольИсполнителя = Выборка.РольИсполнителя;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(РольИсполнителя) Тогда
		Если Не ПараметрыСеанса.ТекущийПользователь.ПользовательСотрудник Тогда
			РольИсполнителя = Справочники.РолиИсполнителей.НайтиПоНаименованию("Дилер");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПараметровВидимости()
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТаблицаЗаписей",  Документы.Scan_ЗаявкаНаОтгрузку.ПолучитьСписокЭлементовДляНастройки());
	//Запрос.УстановитьПараметр("ОбъектНастройки", ОбъектНастройки);
	//Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	//Запрос.УстановитьПараметр("Статус",          Объект.Статус);
	//Запрос.Текст ="ВЫБРАТЬ
	//|	ТЗ.ИмяЭлемента КАК ИмяЭлемента
	//|ПОМЕСТИТЬ ВТ_ТЗ
	//|ИЗ
	//|	&ТаблицаЗаписей КАК ТЗ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Scan_ПараметрыВидимостиОбъектов.ИмяЭлемента КАК ИмяЭлемента,
	//|	Scan_ПараметрыВидимостиОбъектов.Видимость КАК Видимость,
	//|	Scan_ПараметрыВидимостиОбъектов.Доступность КАК Доступность
	//|ПОМЕСТИТЬ ВТ_СохраненныеНастройки
	//|ИЗ
	//|	РегистрСведений.Scan_ПараметрыВидимостиОбъектов КАК Scan_ПараметрыВидимостиОбъектов
	//|ГДЕ
	//|	Scan_ПараметрыВидимостиОбъектов.ОбъектНастройки = &ОбъектНастройки
	//|	И Scan_ПараметрыВидимостиОбъектов.РольИсполнителя = &РольИсполнителя
	//|	И Scan_ПараметрыВидимостиОбъектов.Статус = &Статус
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_ТЗ.ИмяЭлемента КАК ИмяЭлемента,
	//|	ЕСТЬNULL(ВТ_СохраненныеНастройки.Видимость, ИСТИНА) КАК Видимость,
	//|	ЕСТЬNULL(ВТ_СохраненныеНастройки.Доступность, ИСТИНА) КАК Доступность
	//|ИЗ
	//|	ВТ_ТЗ КАК ВТ_ТЗ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СохраненныеНастройки КАК ВТ_СохраненныеНастройки
	//|		ПО ВТ_ТЗ.ИмяЭлемента = ВТ_СохраненныеНастройки.ИмяЭлемента";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	НайденныйЭлемент = Элементы.Найти(Выборка.ИмяЭлемента);
	//	Если НайденныйЭлемент <> Неопределено Тогда
	//		Элементы[Выборка.ИмяЭлемента].Видимость = Выборка.Видимость;
	//		Если    ТипЗнч(Элементы[Выборка.ИмяЭлемента]) = Тип("КнопкаФормы")
	//			Или ТипЗнч(Элементы[Выборка.ИмяЭлемента]) = Тип("ГруппаФормы")
	//			Тогда
	//			Элементы[Выборка.ИмяЭлемента].Доступность = Выборка.Доступность;
	//		Иначе
	//			Элементы[Выборка.ИмяЭлемента].ТолькоПросмотр = Не Выборка.Доступность;
	//		КонецЕсли;
	//	Иначе
	//		ВывестиСообщениеПол("Не найден элемент формы с именем %1. Обратитесь к администратору",,,,,Выборка.ИмяЭлемента);
	//		Элементы.ГруппаФон.Видимость = Ложь;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыДокумента()
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Объект.Автор                 = ТекущийПользователь;
	Объект.ВалютаДокумента       = Справочники.Валюты.НайтиПоКоду("643");
	Объект.ДатаСоздания          = ТекущаяДата();
	Объект.Дата                  = ТекущаяДата();
	Объект.Менеджер              = ТекущийПользователь;
	Объект.Организация           = ТекущийПользователь.Организация;
	Объект.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура УстановитьЦветФонаКомандСтатусов()
	
	ЦветФонаСтатусОтменена = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена").ЦветФона.Получить();
	Если ЦветФонаСтатусОтменена <> Неопределено Тогда
		Элементы.СтатусОтменить.ЦветФона = ЦветФонаСтатусОтменена;
	КонецЕсли;
	
	ЦветФонаСтатусЗаявкаНаОтгрузку = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЗаявкаНаОтгрузку").ЦветФона.Получить();
	Если ЦветФонаСтатусЗаявкаНаОтгрузку <> Неопределено Тогда
		Элементы.СтатусОтправитьДистрибьютору.ЦветФона = ЦветФонаСтатусЗаявкаНаОтгрузку;
	КонецЕсли;
	
	ЦветФонаСтатусПересмотр = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Пересмотр").ЦветФона.Получить();
	Если ЦветФонаСтатусПересмотр <> Неопределено Тогда
		Элементы.СтатусПересмотр.ЦветФона = ЦветФонаСтатусПересмотр;
	КонецЕсли;
	
	ЦветФонаСтатусСогласование = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Согласование").ЦветФона.Получить();
	Если ЦветФонаСтатусСогласование <> Неопределено Тогда
		Элементы.СтатусНаСогласование.ЦветФона = ЦветФонаСтатусСогласование;
	КонецЕсли;
	
	ЦветФонаСтатусОдобрена = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Одобрена").ЦветФона.Получить();
	Если ЦветФонаСтатусОдобрена <> Неопределено Тогда
		Элементы.СтатусОдобрена.ЦветФона = ЦветФонаСтатусОдобрена;
	КонецЕсли;
	
	ЦветФонаСтатусОтказ = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отказ").ЦветФона.Получить();
	Если ЦветФонаСтатусОтказ <> Неопределено Тогда
		Элементы.СтатусОтказ.ЦветФона = ЦветФонаСтатусОтказ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформацию(КонтактноеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
	|	Scan_КонтактныеЛицаКонтактнаяИнформация.Вид КАК ВидКонтактнойИнформации,
	|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.Ссылка = &Ссылка
	|	И (Scan_КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ Scan_КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРезультата Из ТаблицаРезультатаЗапроса Цикл
		НоваяСтрока = Объект.КонтактныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.Дилер) Тогда
		Объект.Дилер = КонтактноеЛицо.Владелец;
		
		//rarus agar 21.01.2021 16981 ++
		////rarus bonmak 15.04.2020 14456 ++
		////Если КонтактноеЛицо.Владелец <> Объект.МестоДоставки.Контрагент Тогда
		//Если НЕ РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ЕстьСвязьКомпанияКонтрагент(Объект.МестоДоставки.СтанцияДилера, КонтактноеЛицо.Владелец) Тогда 
		////rarus bonmak 15.04.2020 14456 --
		//	Объект.МестоДоставки = Справочники.Scan_МестаХранения.ПустаяСсылка();
		//КонецЕсли;
		//rarus agar 21.01.2021 16981 --
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкиПродуктов()
	
	МассивПродуктов = Объект.Продукты.Выгрузить(, "Продукт");
	
	// rarus tenkam 05.08.2020 mantis 16181 +++
	СоответствиеДокументыУстановкиЦен = Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьДокументыУстановкиЦенПоМассивуПродуктов(МассивПродуктов);
	СоответствиеЦеныDealerNet = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЦеныПродуктов(МассивПродуктов, ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой"));
	// rarus tenkam 05.08.2020 mantis 16181 ---
	
	Для Каждого СтрокаПродукта Из Объект.Продукты Цикл
		СтрокаПродукта.НомерЗаказа = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(СтрокаПродукта.Продукт);
		// rarus tenkam 05.08.2020 mantis 16181 +++
		СтрокаПродукта.ДокументУстановкиЦен = СоответствиеДокументыУстановкиЦен.Получить(СтрокаПродукта.Продукт);
		СтрокаПродукта.ЦенаDealerNetПлан = СоответствиеЦеныDealerNet.Получить(СтрокаПродукта.Продукт);
		// rarus tenkam 05.08.2020 mantis 16181 ---
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Продукты", МассивПродуктов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СводнаяИнформацияПоПродукту.DD КАК DD,
	               |	Scan_СводнаяИнформацияПоПродукту.DD2 КАК DD2,
	               //rarus bonmak 09.08.2021 16834 |	Scan_СводнаяИнформацияПоПродукту.RFD КАК RFD,
	               |	ВЫБОР
	               |		КОГДА Scan_СводнаяИнформацияПоПродукту.Продукт.БУ
	               |			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУДилеру
	               |		ИНАЧЕ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
	               |	КОНЕЦ КАК ДатаПродажиИзделия,
	               |	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Продукт,
	               |	ВЫБОР
	               |		КОГДА Scan_СводнаяИнформацияПоПродукту.Продукт.БУ
	               |			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУКлиенту
	               |		ИНАЧЕ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту
	               |	КОНЕЦ КАК ДатаПродажиКлиенту
	               |ИЗ
	               |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
	               |ГДЕ
	               |	Scan_СводнаяИнформацияПоПродукту.Продукт В(&Продукты)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтрокиПродуктов = Объект.Продукты.НайтиСтроки(Новый Структура("Продукт", Выборка.Продукт));
		Для Каждого СтрокаПродукта Из НайденныеСтрокиПродуктов Цикл
			ЗаполнитьЗначенияСвойств(СтрокаПродукта, Выборка); //rarus vikhle 10.03.2021 mt 17324
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоглашениеОПоставке", Объект.СоглашениеОПоставке);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Продукт КАК Продукт,
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.DDЗапрошенная КАК DDЗапрошенная,
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.DDS КАК DDS
	               |ИЗ
	               |	Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
	               |ГДЕ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка = &СоглашениеОПоставке";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтрокиПродуктов = Объект.Продукты.НайтиСтроки(Новый Структура("Продукт", Выборка.Продукт));
		Для Каждого СтрокаПродукта Из НайденныеСтрокиПродуктов Цикл
			//ЗаполнитьЗначенияСвойств(СтрокаПродукта, Выборка, "DD,DDS");
			ЗаполнитьЗначенияСвойств(СтрокаПродукта, Выборка, "DDЗапрошенная,DDS"); //rarus vikhle 30.09.2020 mt 16181
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Продукты", МассивПродуктов);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_МестонахождениеИзделийОстатки.МестоХранения КАК Местонахождение,
	|	Scan_МестонахождениеИзделийОстатки.Изделие КАК Продукт
	|ИЗ
	|	РегистрНакопления.Scan_МестонахождениеИзделий.Остатки(, Изделие В (&Продукты)) КАК Scan_МестонахождениеИзделийОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтрокиПродуктов = Объект.Продукты.НайтиСтроки(Новый Структура("Продукт", Выборка.Продукт));
		Для Каждого СтрокаПродукта Из НайденныеСтрокиПродуктов Цикл
			ЗаполнитьЗначенияСвойств(СтрокаПродукта, Выборка, "Местонахождение");
		КонецЦикла;
	КонецЦикла;
	
	//rarus agar 21.01.2021 16981 ++
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Продукты", МассивПродуктов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_Изделия.Ссылка КАК Продукт,
	               |	Scan_Изделия.СкладПродажи КАК СкладПродажи,
	               |	Scan_Изделия.МестоПередачи КАК МестоПередачи,
	               |	Scan_Изделия.ЗапретИзмененияСкладаПродажи КАК ЗапретИзмененияСкладаПродажи
	               |ИЗ
	               |	Справочник.Scan_Изделия КАК Scan_Изделия
	               |ГДЕ
	               |	Scan_Изделия.Ссылка В(&Продукты)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтрокиПродуктов = Объект.Продукты.НайтиСтроки(Новый Структура("Продукт", Выборка.Продукт));
		Для Каждого СтрокаПродукта Из НайденныеСтрокиПродуктов Цикл
			ЗаполнитьЗначенияСвойств(СтрокаПродукта, Выборка, "СкладПродажи,МестоПередачи,ЗапретИзмененияСкладаПродажи");//rarus vikhle 04.02.2021 mt 16981 +ЗапретИзмененияСкладаПродажи 
		КонецЦикла;
	КонецЦикла;
	//rarus agar 21.01.2021 16981 --
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСкладОтгрузкиСоглашения(СоглашениеОПоставке)
	
	//rarus vikhle 18.09.2020 mt 16526 +++
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("СоглашениеОПоставке", СоглашениеОПоставке);
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Scan_СоглашенияОПоставке.СкладОтгрузки КАК СкладОтгрузки
	//|ИЗ
	//|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
	//|ГДЕ
	//|	Scan_СоглашенияОПоставке.Ссылка = &СоглашениеОПоставке";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат Неопределено;
	//Иначе
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Выборка.Следующий();
	//	
	//	Возврат Выборка.СкладОтгрузки;
	//КонецЕсли;
	//rarus vikhle 18.09.2020 mt 16526 ---
КонецФункции

//rarus agar 21.01.2021 16981 ++
&НаСервереБезКонтекста
Функция ПолучитьСкладыОтгрузкиЗаявки(СоглашениеОПоставке)
	
	СкладыОтгрузкиЗаявки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоглашениеОПоставке", СоглашениеОПоставке);
	// rarus kabany 23.07.2021 18036 ++ добавил в запрос место передачи из продукта
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Продукт КАК Продукт,
	               |	ВЫБОР
	               |		КОГДА ВЫРАЗИТЬ(Scan_СоглашенияОПоставкеСписокПродуктов.Продукт КАК Справочник.Scan_Изделия).МестоПередачи <> ЗНАЧЕНИЕ(Справочник.Scan_Склады.ПустаяСсылка)  
	               |			ТОГДА ВЫРАЗИТЬ(Scan_СоглашенияОПоставкеСписокПродуктов.Продукт КАК Справочник.Scan_Изделия).МестоПередачи
	               |		ИНАЧЕ Scan_СоглашенияОПоставкеСписокПродуктов.СкладОтгрузки
	               |	КОНЕЦ КАК СкладОтгрузки
	               |ИЗ
	               |	Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
	               |ГДЕ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка = &СоглашениеОПоставке";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СкладыОтгрузкиЗаявки.Вставить(Выборка.Продукт, Выборка.СкладОтгрузки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СкладыОтгрузкиЗаявки;
	
КонецФункции
//rarus agar 21.01.2021 16981 --

//rarus agar 15.03.2021 17453 ++
&НаСервереБезКонтекста
Функция ПолучитьМестаХраненияСканияРусь(СкладОтгрузки)
	
	МестаХраненияСканияРусь = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",      СкладОтгрузки);
	Запрос.УстановитьПараметр("СканияРусь", Справочники.Scan_Контрагенты.СканияРусь);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_СоответствиеСкладовИМестХранения.МестоХранения КАК МестоХранения
	|ИЗ
	|	РегистрСведений.Scan_СоответствиеСкладовИМестХранения КАК Scan_СоответствиеСкладовИМестХранения
	|ГДЕ
	|	Scan_СоответствиеСкладовИМестХранения.Склад = &Склад
	|	И Scan_СоответствиеСкладовИМестХранения.МестоХранения.Контрагент = &СканияРусь";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		МестаХраненияСканияРусь = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("МестоХранения");
	КонецЕсли;
	
	Возврат МестаХраненияСканияРусь;
	
КонецФункции
//rarus agar 15.03.2021 17453 --

&НаСервере
Процедура ЗаполнитьВремяОтгрузкиНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
		ПустаяДата = Дата(1,1,1);
		
		Объект.НачалоОтгрузки    = ПустаяДата;
		Объект.ОкончаниеОтгрузки = ПустаяДата;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОтгрузки",     Объект.ДатаОтгрузки);
		Запрос.УстановитьПараметр("ЗаявкаНаОтгрузку", Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДОБАВИТЬКДАТЕ(МАКСИМУМ(Scan_ЗаявкаНаОтгрузку.ОкончаниеОтгрузки), МИНУТА, 2) КАК НачалоОтгрузки,
		|	ДОБАВИТЬКДАТЕ(МАКСИМУМ(Scan_ЗаявкаНаОтгрузку.ОкончаниеОтгрузки), МИНУТА, 120) КАК ОкончаниеОтгрузки
		|ИЗ
		|	Документ.Scan_ЗаявкаНаОтгрузку КАК Scan_ЗаявкаНаОтгрузку
		|ГДЕ
		|	Scan_ЗаявкаНаОтгрузку.ДатаОтгрузки = &ДатаОтгрузки
		|	И Scan_ЗаявкаНаОтгрузку.Ссылка <> &ЗаявкаНаОтгрузку
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаОтгрузки, МИНУТА, 1),
		|	ДОБАВИТЬКДАТЕ(&ДатаОтгрузки, МИНУТА, 119)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоОтгрузки УБЫВ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.НачалоОтгрузки    = Выборка.НачалоОтгрузки;
			Объект.ОкончаниеОтгрузки = Выборка.ОкончаниеОтгрузки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолеКонтрагент()
	
	НаборЗаписей = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Компания.Установить(Объект.Дилер);
	НаборЗаписей.Отбор.ВидВзаимодействия.Установить(Scan_ПраваИНастройки.Scan_Право("ВидВзаимодействияДилер"));
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() <> 0 Тогда
		Контрагент = НаборЗаписей[0].Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМестоОтгрузкиСоглашения()
	
	//rarus vikhle 18.09.2020 mt 16526 +++
	//Если Не ЗначениеЗаполнено(Объект.СоглашениеОПоставке) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("СоглашениеОПоставке", Объект.СоглашениеОПоставке);
	//Запрос.УстановитьПараметр("Дилер",               Объект.Дилер);
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Scan_СоглашенияОПоставке.СкладОтгрузки КАК СкладОтгрузки
	//|ИЗ
	//|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
	//|ГДЕ
	//|	Scan_СоглашенияОПоставке.Ссылка = &СоглашениеОПоставке
	//|	И Scan_СоглашенияОПоставке.СкладОтгрузки <> ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Scan_Компании.ПриоритетныйСклад
	//|ИЗ
	//|	Справочник.Scan_Компании КАК Scan_Компании
	//|ГДЕ
	//|	Scan_Компании.Ссылка = &Дилер
	//|	И Scan_Компании.ПриоритетныйСклад <> ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//Если Выборка.Следующий() Тогда
	//	СкладОтгрузкиСоглашения = Выборка.СкладОтгрузки;
	//КонецЕсли;
	//rarus vikhle 18.09.2020 mt 16526 ---
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧат()
	
	СтрокаHTML = "<HTML><BODY style=""background-color:#f0f0f0"">";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	Сообщения.Объект КАК Объект,
	|	Сообщения.Пользователь КАК Пользователь,
	|	Сообщения.ДоступноДилеру КАК ДоступноДилеру,
	|	Сообщения.ТекстСообщения КАК ТекстСообщения,
	|	Сообщения.Период КАК Период
	|ИЗ
	|	РегистрСведений.Scan_Сообщения КАК Сообщения
	|ГДЕ
	|	Сообщения.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаHTML = Регистрысведений.Scan_Сообщения.ДобавитьСообщение(СтрокаHTML, ВыборкаДетальныеЗаписи.ТекстСообщения, ВыборкаДетальныеЗаписи.Пользователь, ВыборкаДетальныеЗаписи.Период);
	КонецЦикла;
	
	СтрокаHTML = СтрокаHTML + "</body></html>";
	СообщенияПользователей   = СтрокаHTML;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПродуктыСоглашенияОПоставке(СоглашениеОПоставке)
	
	//rarus agar 28.08.2020 15696 ++
	МассивТиповПродуктовНадстроекИУслуг = Справочники.Scan_ТипыПродуктов.ПолучитьТипыПродуктовНадстроекИУслуг();
	//rarus agar 28.08.2020 15696 --
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоглашениеОПоставке", СоглашениеОПоставке);
	Запрос.УстановитьПараметр("ЗаявкаНаОтгрузку",    Объект.Ссылка);
	Запрос.УстановитьПараметр("ПродуктыЗаявки",      Объект.Продукты.Выгрузить().ВыгрузитьКолонку("Продукт"));
	//rarus agar 28.08.2020 15696 ++
	Запрос.УстановитьПараметр("МассивТиповПродуктовНадстроекИУслуг", МассивТиповПродуктовНадстроекИУслуг);
	//rarus agar 28.08.2020 15696 --
	Запрос.УстановитьПараметр("СкладОтгрузки",Объект.СкладОтгрузки);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие КАК Продукт,
	//rarus vikhle 16.09.2020 mt 16526 +++
	|	Scan_СоглашенияОПоставкеСписокПродуктов.СкладОтгрузки КАК СкладОтгрузки
		|ИЗ
	|	РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних КАК Scan_СоставСоглашенийОПоставкеСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
	|		ПО Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке = Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка
	//rarus vikhle 16.09.2020 mt 16526 ---
	|ГДЕ
	|	Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке = &СоглашениеОПоставке
	|	И НЕ Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие В
	|				(ВЫБРАТЬ
	|					Scan_ЗаявкаНаОтгрузкуПродукты.Продукт
	|				ИЗ
	|					Документ.Scan_ЗаявкаНаОтгрузку.Продукты КАК Scan_ЗаявкаНаОтгрузкуПродукты
	|				ГДЕ
	|					Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.СоглашениеОПоставке = &СоглашениеОПоставке
	|					И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ПометкаУдаления
	|					И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка = &ЗаявкаНаОтгрузку
	|					И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отказ)
	|					И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена))
	|	И НЕ Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие В (&ПродуктыЗаявки)
	//rarus agar 28.08.2020 15696 ++
	|	И НЕ Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие.ТипПродукта В (&МассивТиповПродуктовНадстроекИУслуг)
	//rarus agar 28.08.2020 15696 --
	|	И Scan_СоглашенияОПоставкеСписокПродуктов.СкладОтгрузки = &СкладОтгрузки";//rarus vikhle 16.09.2020 mt 16526
	
	//rarus vikhle 16.09.2020 mt 16526 ---
	
	ПродуктыСоглашения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Продукт");
	
	Возврат ПродуктыСоглашения;
	
КонецФункции

//rarus agar 28.08.2020 15696 ++
&НаСервереБезКонтекста
Функция ПолучитьТипыПродуктовНадстроекИУслуг()
	
	МассивТиповПродуктов = Новый Массив;
	
	МассивТиповПродуктовНадстроек = Справочники.Scan_ТипыПродуктов.ПолучитьТипыПродуктовНадстроекИОборудования();
	Для Каждого ЭлементМассива Из МассивТиповПродуктовНадстроек Цикл
		МассивТиповПродуктов.Добавить(ЭлементМассива);
	КонецЦикла;
	
	МассивТиповПродуктовУслуг = Справочники.Scan_ТипыПродуктов.ПолучитьТипыПродуктовУслуг();
	Для Каждого ЭлементМассива Из МассивТиповПродуктовУслуг Цикл
		МассивТиповПродуктов.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Возврат МассивТиповПродуктов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПродуктЯвляетсяНадстройкойИлиУслугой(Продукт)
	
	Возврат Справочники.Scan_Изделия.ПродуктЯвляетсяНадстройкойИлиУслугой(Продукт);
	
КонецФункции
//rarus agar 28.08.2020 15696 --

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаОтгрузкиЯвляетсяВыходным(ДатаОтгрузки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год",         Год(ДатаОтгрузки));
	Запрос.УстановитьПараметр("ДатаГрафика", ДатаОтгрузки);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Не Выборка.ДеньВключенВГрафик;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПеренестиНепроданныеПродуктыНаСервере(ДанныеФормы, НепроданныеПродукты = Неопределено)
	
	УдаляемыеСтрокиПродуктов = Новый Массив;
	
	НоваяЗаявкаНаОтгрузку = Документы.Scan_ЗаявкаНаОтгрузку.СоздатьДокумент();
	НоваяЗаявкаНаОтгрузку.Дата         = ТекущаяДата();
	НоваяЗаявкаНаОтгрузку.ДатаОтгрузки = ТекущаяДата();
	НоваяЗаявкаНаОтгрузку.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ПроектЗаявкиНаОтгрузку");
	
	НоваяЗаявкаНаОтгрузку.СоглашениеОПоставке = Объект.СоглашениеОПоставке;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоглашениеОПоставке", Объект.СоглашениеОПоставке);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_СоглашенияОПоставке.Дилер КАК Дилер
	//|	Scan_СоглашенияОПоставке.СкладОтгрузки КАК СкладОтгрузки //rarus vikhle 18.09.2020 mt 16526
	|ИЗ
	|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
	|ГДЕ
	|	Scan_СоглашенияОПоставке.Ссылка = &СоглашениеОПоставке";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НоваяЗаявкаНаОтгрузку.Дилер = Выборка.Дилер;
		
		
		//rarus vikhle 18.09.2020 mt 16526 +++
		Если ЗначениеЗаполнено(Объект.СкладОтгрузки) Тогда
			//НоваяЗаявкаНаОтгрузку.СкладОтгрузки = Выборка.СкладОтгрузки;
			НоваяЗаявкаНаОтгрузку.СкладОтгрузки = Объект.СкладОтгрузки;
			//rarus vikhle 18.09.2020 mt 16526 ---
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дилер", Выборка.Дилер);
			Запрос.Текст = "ВЫБРАТЬ
			|	Scan_Компании.ПриоритетныйСклад КАК ПриоритетныйСклад
			|ИЗ
			|	Справочник.Scan_Компании КАК Scan_Компании
			|ГДЕ
			|	Scan_Компании.Ссылка = &Дилер";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяЗаявкаНаОтгрузку.СкладОтгрузки = Выборка.ПриоритетныйСклад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НепроданныеПродукты = Неопределено Тогда
		ПереносимыеПродукты = ПолучитьНепроданныеПродуктыНаСервере();
	Иначе
		ПереносимыеПродукты = НепроданныеПродукты;
	КонецЕсли;
	
	Для Каждого ПереносимыйПродукт Из ПереносимыеПродукты Цикл
		НоваяСтрокаПродукта = НоваяЗаявкаНаОтгрузку.Продукты.Добавить();
		НоваяСтрокаПродукта.Продукт = ПереносимыйПродукт;
	КонецЦикла;
	
	Для Каждого СтрокаПродукта Из Объект.Продукты Цикл
		Если ПереносимыеПродукты.Найти(СтрокаПродукта.Продукт) <> Неопределено Тогда
			УдаляемыеСтрокиПродуктов.Добавить(СтрокаПродукта);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиПродуктов Цикл
		Объект.Продукты.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ЗначениеВДанныеФормы(НоваяЗаявкаНаОтгрузку, ДанныеФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНепроданныеПродуктыНаСервере()
	
	Возврат Документы.Scan_ЗаявкаНаОтгрузку.ПолучитьНепроданныеПродукты(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ЗаписатьПричинуПересмотраВСообщенияНаСервере(ПричинаПересмотра)
	
	ТекстСообщения = "Причина пересмотра: "+ ПричинаПересмотра;
	РегистрыСведений.Scan_Сообщения.ЗаписатьСообщение(Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь, Истина, ТекстСообщения); 
	
	
КонецПроцедуры

//rarus vikhle 27.05.2021 mt 17653 +++ перенес в модуль менеджера
//&НаСервере
//Функция ПолучитьСкладыДоИзменений()
//	//rarus vikhle 08.02.2021 mt 16981 +++
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	Scan_Изделия.Ссылка КАК Ссылка
//	               |ПОМЕСТИТЬ ПродуктыЗаявки
//	               |ИЗ
//	               |	Справочник.Scan_Изделия КАК Scan_Изделия
//	               |ГДЕ
//	               |	Scan_Изделия.Ссылка В(&ПродуктыЗаявкиНаОтгрузку)
//	               |
//	               |ИНДЕКСИРОВАТЬ ПО
//	               |	Ссылка
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	МАКСИМУМ(Scan_ХарактеристикиИзделия.Период) КАК ПериодСкладПродажи,
//	               |	МАКСИМУМ(Scan_ХарактеристикиИзделия1.Период) КАК ПериодМестоПередачи,
//	               |	ПродуктыЗаявки.Ссылка КАК Продукт
//	               |ПОМЕСТИТЬ ВТ_Периодов
//	               |ИЗ
//	               |	ПродуктыЗаявки КАК ПродуктыЗаявки
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиИзделия КАК Scan_ХарактеристикиИзделия
//	               |		ПО ПродуктыЗаявки.Ссылка = Scan_ХарактеристикиИзделия.Изделие
//	               |			И (НЕ Scan_ХарактеристикиИзделия.Источник = &ЗаявкаНаОтгрузку)
//	               |			И (Scan_ХарактеристикиИзделия.ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.СкладПродажи))
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиИзделия КАК Scan_ХарактеристикиИзделия1
//	               |		ПО ПродуктыЗаявки.Ссылка = Scan_ХарактеристикиИзделия1.Изделие
//	               |			И (НЕ Scan_ХарактеристикиИзделия1.Источник = &ЗаявкаНаОтгрузку)
//	               |			И (Scan_ХарактеристикиИзделия1.ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.МестоПередачи))
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	ПродуктыЗаявки.Ссылка
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	Scan_ХарактеристикиИзделия.Значение КАК СкладПродажи,
//	               |	Scan_ХарактеристикиИзделия1.Значение КАК МестоПередачи,
//	               |	ВТ_Периодов.Продукт КАК Продукт
//	               |ИЗ
//	               |	ВТ_Периодов КАК ВТ_Периодов
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиИзделия КАК Scan_ХарактеристикиИзделия
//	               |		ПО ВТ_Периодов.ПериодСкладПродажи = Scan_ХарактеристикиИзделия.Период
//	               |			И (Scan_ХарактеристикиИзделия.ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.СкладПродажи))
//	               |			И ВТ_Периодов.Продукт = Scan_ХарактеристикиИзделия.Изделие //rarus agar 17.03.2021 17475 +-
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиИзделия КАК Scan_ХарактеристикиИзделия1
//	               |		ПО ВТ_Периодов.ПериодМестоПередачи = Scan_ХарактеристикиИзделия1.Период
//	               |			И (Scan_ХарактеристикиИзделия1.ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.МестоПередачи))
//	               |			И ВТ_Периодов.Продукт = Scan_ХарактеристикиИзделия1.Изделие";  //rarus agar 17.03.2021 17475 +-
//	Запрос.УстановитьПараметр("ЗаявкаНаОтгрузку", Объект.Ссылка);
//	Запрос.УстановитьПараметр("ПродуктыЗаявкиНаОтгрузку", Объект.Продукты.Выгрузить(,"Продукт"));
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	Возврат РезультатЗапроса;
//	//rarus vikhle 08.02.2021 mt 16981 ---
//КонецФункции
//rarus vikhle 27.05.2021 mt 17653 ---

Процедура УстановитьУсловноеОформление()
	//rarus vikhle 08.02.2021 mt 16981 +++
	УсловноеОформление.Элементы.Очистить();
	Если НЕ Элементы.ПродуктыСкладПродажи.ТолькоПросмотр Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродуктыСкладПродажи.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукты.ЗапретИзмененияСкладаПродажи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;
	//rarus vikhle 08.02.2021 mt 16981 ---
КонецПроцедуры	

//rarus vikhle 15.04.2021 mt 17484 +++
&НаКлиенте
Процедура ДилерОбработкаВыбораПродолжение(Результат, ВыбраннаяКомпания) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Дилер = ВыбраннаяКомпания;
	Иначе
		Объект.Дилер = Неопределено;	
	КонецЕсли;
	
	ДилерПриИзменении(Элементы.Дилер);
	
КонецПроцедуры
//rarus vikhle 15.04.2021 mt 17484 ---

#КонецОбласти
