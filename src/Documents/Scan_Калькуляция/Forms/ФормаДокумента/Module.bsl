
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ХозОперации ++
	Scan_ВспомогательныеФункцииСервер.ИнициализироватьМенюВыбораХозОперации(ЭтаФорма);
	
	// Вызываем общий обработчик события
	Если Не Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	// ХозОперации --
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПараметрыДокумента();
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	ЗаполнитьКалькуляциюНаСервере();
	УстановитьОтборПоРазделуКалькуляцииНаСервере();
	//rarus agar 05.06.2020  16123 ++
	УстановитьЦветФонаКомандСтатусов();
	ЗаполнитьПараметрыВидимости();
	//rarus agar 05.06.2020  16123 --
	УправлениеДиалогомНаСервере();
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСогласованиеНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
КонецПроцедуры

#КонецОбласти

#Область ХозОперации

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Хоз. операция" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Документы.Scan_Калькуляция.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ХозОперацияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	// Вызываем общий обработчик события выбора одного из пунктов меню доступных хоз. операций
	Scan_УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры // ХозОперацияПриИзменении()

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//rarus agar 14.05.2020  15466 Доп1 ++
&НаКлиенте
Процедура ДействуетСДатыПриИзменении(Элемент)
	
	ПриИзмененииДатыИлиPartPeriod();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействуетСPartPeriodПриИзменении(Элемент)
	
	ПриИзмененииДатыИлиPartPeriod();
	
КонецПроцедуры
//rarus agar 14.05.2020  15466 Доп1 --

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура РасчетПакетовУслугСтоимостьСоставляющейПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПакетовУслуг.ТекущиеДанные;
	ТекущиеДанные.ЦенаПакетаУслугDealerNet   = ТекущиеДанные.СтоимостьСоставляющей * ТекущиеДанные.ЗначениеКоэффициентаПакетаDealerNet;
	ТекущиеДанные.ЦенаПакетаУслугRetailPrice = ТекущиеДанные.СтоимостьСоставляющей * ТекущиеДанные.ЗначениеКоэффициентаПакетаRetailPrice;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимКалькуляцииПриИзменении(Элемент)
	
	Если Модифицированность И РежимКалькуляции = 0 Тогда
		ЗаполнитьТабличныйДокументКалькуляции();
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийРазделКалькуляцииПриИзменении(Элемент)
	
	ТекущийРазделКалькуляцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Элементы.КалькуляцияТабличныйДокумент.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = КалькуляцияАдресаЗначений.НайтиСтроки(Новый Структура("Адрес", Область.Имя));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияТабличныйДокументПриИзменении(Элемент)
	
	НайденныеСтроки = КалькуляцияАдресаЗначений.НайтиСтроки(Новый Структура("Адрес", Элемент.ТекущаяОбласть.Имя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Значение = Число(Элемент.ТекущаяОбласть.Текст);
	КонецЕсли;
	
	Элементы.ФормаЗаписать.Доступность        = Ложь;
	Элементы.КалькуляцияСохранить.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Область.ЦветФона   = Новый Цвет(217,217,217);
	Область.ЦветТекста = Новый Цвет(128,0,0);
	Область.Шрифт      = Новый Шрифт(,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХодСогласованияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Попытка
		ПоказатьЗначение(,Элементы.ХодИсполнения.ТекущиеДанные.Ссылка);
	Исключение КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//rarus agar 04.06.2020  16123 ++
&НаКлиенте
Процедура СтатусУтвердить(Команда)
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетУтвержден");
	
	Если Не Записать(Новый Структура) Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласовать(Команда)
	
	Если СоздатьСогласованиеНаСервере() Тогда
		СтарыйСтатус  = Объект.Статус;
		Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетНаСогласовании");
		
		Если Не Записать() Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
		ЗаполнитьСогласованиеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗавершить(Команда)
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетЗавершен");
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусАннулировать(Команда)
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетАннулирован");
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 04.06.2020  16123 --

//rarus agar 14.07.2020  15690 ++
&НаКлиенте
Процедура СтатусИзменить(Команда)
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.НовыйРасчет");
	
	Если Не Записать() Тогда
		Объект.Статус = СтарыйСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПрерватьСогласование(Команда)
	
	Если ПрерватьСогласованиеНаСервере() Тогда
		Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетЗавершен");
		Записать();
		
		ЗаполнитьСогласованиеНаСервере();
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 14.07.2020  15690 --

#КонецОбласти

#Область ОбработчикиКомандКалькуляции

&НаКлиенте
Процедура КалькуляцияНачальноеЗаполнение(Команда)
	
	КалькуляцияНачальноеЗаполнениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияПерезаполнить(Команда)
	
	Если    Объект.НерасчетныеСоставляющие.Количество() > 0 
		Или Объект.РасчетныеСоставляющие.Количество() > 0 
		Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КалькуляцияПерезаполнитьЗавершение", ЭтотОбъект),
		Нстр("ru = 'Параметры нерасчетных и расчетных составляющих будут перезаполнены. Продолжить?'; en = 'Parameters of components will be refilled. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияОчистить(Команда)
	
	Если Объект.СтандартныеСпецификации.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КалькуляцияОчиститьЗавершение", ЭтотОбъект),
		Нстр("ru = 'Калькуляция будет очищена полностью. Продолжить?'; en = 'The calculation will be cleared completely. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияОчиститьРаздел(Команда)
	
	Если Объект.СтандартныеСпецификации.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КалькуляцияОчиститьРазделЗавершение", ЭтотОбъект),
		Нстр("ru = 'Текущий раздел калькуляции будет очищен. Продолжить?'; en = 'The current section of calculation will be cleared. Proceed?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияПересчитать(Команда)
	
	КалькуляцияСохранитьНаСервере();
	
	Для Каждого ЭлементСпискаРазделов Из Элементы.ТекущийРазделКалькуляции.СписокВыбора Цикл
		КалькуляцияПересчитатьРазделНаСервере(ЭлементСпискаРазделов.Значение);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ЗаполнитьКалькуляциюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияПересчитатьРаздел(Команда)
	
	КалькуляцияСохранитьНаСервере();
	КалькуляцияПересчитатьРазделНаСервере();
	
	Модифицированность = Истина;
	
	ЗаполнитьКалькуляциюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияСохранить(Команда)
	
	КалькуляцияСохранитьНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияЗаполнитьЗначенияСправа(Команда)
	
	ТекущаяОбластьВерх  = Элементы.КалькуляцияТабличныйДокумент.ТекущаяОбласть.Верх;
	ТекущаяОбластьЛево  = Элементы.КалькуляцияТабличныйДокумент.ТекущаяОбласть.Лево;
	ТекущаяОбластьНиз   = Элементы.КалькуляцияТабличныйДокумент.ТекущаяОбласть.Низ;
	ТекущаяОбластьПраво = Элементы.КалькуляцияТабличныйДокумент.ТекущаяОбласть.Право;
	ТекущаяОбластьТекст = Элементы.КалькуляцияТабличныйДокумент.ТекущаяОбласть.Текст;
	
	Если    ТекущаяОбластьВерх <> ТекущаяОбластьНиз
		Или ТекущаяОбластьЛево <> ТекущаяОбластьПраво
		Тогда
		Сообщить(Нстр("ru = 'Необходимо указать только одну ячейку!'; en = 'Only one cell can be chosen!'"));
	КонецЕсли;
	
	НайденныеСтрокиСпецификаций = Объект.СтандартныеСпецификации.НайтиСтроки(Новый Структура("РазделКалькуляции", ТекущийРазделКалькуляции));
	
	КоличествоСпецификаций = НайденныеСтрокиСпецификаций.Количество();
	
	Если КоличествоСпецификаций > 0 Тогда
		Для Счетчик = ТекущаяОбластьЛево + 1 По КоличествоСпецификаций + 2 Цикл
			ОбластьДляЗаполнения = КалькуляцияТабличныйДокумент.Область(ТекущаяОбластьВерх, Счетчик, ТекущаяОбластьВерх, Счетчик);
			Если ОбластьДляЗаполнения.Значение <> Число(ТекущаяОбластьТекст) Тогда
				ОбластьДляЗаполнения.Значение = Число(ТекущаяОбластьТекст);
				
				ОбластьДляЗаполнения.ЦветФона   = Новый Цвет(217,217,217);
				ОбластьДляЗаполнения.ЦветТекста = Новый Цвет(128,0,0);
				ОбластьДляЗаполнения.Шрифт      = Новый Шрифт(,,Истина);
				
				НайденныеСтрокиАдресов = КалькуляцияАдресаЗначений.НайтиСтроки(Новый Структура("Адрес", ОбластьДляЗаполнения.Имя));
				Если НайденныеСтрокиАдресов.Количество() > 0 Тогда
					НайденныеСтрокиАдресов[0].Значение = Число(ТекущаяОбластьТекст);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияЗаполнитьСтоимостьСпецификаций(Команда)
	
	КалькуляцияЗаполнитьСтоимостьСпецификацийНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СоздатьСогласованиеНаСервере()
	
	НовыйБП = БизнесПроцессы.Scan_Согласование.СоздатьБизнесПроцесс();
	НовыйБП.Дата = ТекущаяДата();
	НовыйБП.УстановитьНовыйНомер();
	НовыйБП.Заполнить(Объект.Ссылка);
	
	Попытка
		НовыйБП.Записать();
		НовыйБП.Старт();
	
		Сообщить(НСтр("ru = 'Для документа было создано согласование ""'; en = '""Approval"" was created for this document ""'") + НовыйБП.Ссылка + """");
		Возврат Истина;
	Исключение
		Сообщить(НСтр("ru = 'Для документа не удалось создать согласование!'; en = 'Action failed!'"), СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

//rarus agar 14.07.2020  15690 ++
&НаСервере
Функция ПрерватьСогласованиеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);
	Запрос.УстановитьПараметр("Автор",   Пользователи.АвторизованныйПользователь());
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_Согласование.Ссылка КАК Согласование
	|ИЗ
	|	БизнесПроцесс.Scan_Согласование КАК Scan_Согласование
	|ГДЕ
	|	Scan_Согласование.Предмет = &Предмет
	|	И Scan_Согласование.Автор = &Автор
	|	И Scan_Согласование.Стартован
	|	И НЕ Scan_Согласование.Завершен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить(НСтр("ru = 'Не найден активный процесс согласования документа!'; en = 'Active document approval process not found!'"), СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	БизнесПроцессы.Scan_Согласование.ПрерватьСогласование(Выборка.Согласование);
	
	Возврат Истина;
	
КонецФункции
//rarus agar 14.07.2020  15690 --

&НаСервере
Процедура ЗаполнитьСогласованиеНаСервере()
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.РасчетОтПрайсЛиста") Тогда
		Возврат;
	КонецЕсли;
	
	ХодСогласования.Очистить();
	
	ТочкиМаршрута = Новый СписокЗначений;
	ТочкиМаршрута.Добавить(БизнесПроцессы.Scan_Согласование.ТочкиМаршрута.СогласоватьПоследовательно);
	ТочкиМаршрута.Добавить(БизнесПроцессы.Scan_Согласование.ТочкиМаршрута.СогласоватьПараллельно);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Калькуляция",   Объект.Ссылка);
	Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
	Запрос.УстановитьПараметр("НомерИтерации", 1);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_Согласование.Ссылка КАК Согласование
	|ПОМЕСТИТЬ ВТ_Согласование
	|ИЗ
	|	БизнесПроцесс.Scan_Согласование КАК Scan_Согласование
	|ГДЕ
	|	Scan_Согласование.Предмет = &Калькуляция
	|	И Scan_Согласование.Стартован
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_Согласование.ДатаНачала УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаЗадачаИсполнителя.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗадачаЗадачаИсполнителя.Номер КАК Номер,
	|	ЗадачаЗадачаИсполнителя.Дата КАК Дата,
	|	ЗадачаЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачаЗадачаИсполнителя.БизнесПроцесс.РезультатСогласования КАК БизнесПроцессРезультатСогласования,
	|	ЗадачаЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ЗадачаЗадачаИсполнителя.Наименование КАК Наименование,
	|	ЗадачаЗадачаИсполнителя.Выполнена КАК Выполнена,
	|	ЗадачаЗадачаИсполнителя.Важность КАК Важность,
	|	ЗадачаЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
	|	ЗадачаЗадачаИсполнителя.Автор КАК Автор,
	|	ЗадачаЗадачаИсполнителя.Описание КАК Описание,
	|	ЗадачаЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
	|	ЗадачаЗадачаИсполнителя.ДатаНачала КАК ДатаНачала,
	|	ЗадачаЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
	|	ЗадачаЗадачаИсполнителя.Предмет КАК Предмет,
	|	ЗадачаЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	|	РезультатыСогласования.РезультатСогласования КАК РезультатСогласования,
	|	РезультатыСогласования.НомерИтерации КАК НомерИтерации
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Scan_Согласование.РезультатыСогласования КАК РезультатыСогласования
	|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыСогласования.ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаЗадачаИсполнителя.БизнесПроцесс В
	|			(ВЫБРАТЬ
	|				ВТ_Согласование.Согласование
	|			ИЗ
	|				ВТ_Согласование)
	|	И РезультатыСогласования.НомерИтерации = &НомерИтерации
	|	И ЗадачаЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)";
	
	ТаблицаСогласования = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаСогласования Из ТаблицаСогласования Цикл
		НоваяСтрока = ХодСогласования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСогласования);
		РезультатСогласования = СтрокаСогласования.БизнесПроцессРезультатСогласования;
		Согласование          = СтрокаСогласования.БизнесПроцесс;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыДокумента()
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Объект.Автор                 = ТекущийПользователь;
	Объект.ВалютаДокумента       = Справочники.Валюты.НайтиПоКоду("643");
	Объект.ДатаСоздания          = ТекущаяДата();
	Объект.Дата                  = ТекущаяДата();
	Объект.Менеджер              = ТекущийПользователь;
	Объект.Организация           = ТекущийПользователь.Организация;
	Объект.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Если Объект.Статус.Пустая() Тогда
		Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.НовыйРасчет");
	КонецЕсли;
	
КонецПроцедуры

//rarus agar 04.06.2020  16123 ++
&НаСервере
Процедура УстановитьЦветФонаКомандСтатусов()
	
	ЦветФонаСтатусУтвердить = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетУтвержден").ЦветФона.Получить();
	Если ЦветФонаСтатусУтвердить <> Неопределено Тогда
		Элементы.СтатусУтвердить.ЦветФона = ЦветФонаСтатусУтвердить;
	КонецЕсли;
	
	ЦветФонаСтатусСогласовать = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетНаСогласовании").ЦветФона.Получить();
	Если ЦветФонаСтатусСогласовать <> Неопределено Тогда
		Элементы.СтатусСогласовать.ЦветФона = ЦветФонаСтатусСогласовать;
	КонецЕсли;
	
	ЦветФонаРасчетЗавершен = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетЗавершен").ЦветФона.Получить();
	Если ЦветФонаРасчетЗавершен <> Неопределено Тогда
		Элементы.СтатусЗавершить.ЦветФона = ЦветФонаРасчетЗавершен;
	КонецЕсли;
	
	ЦветФонаРасчетАннулирован = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетАннулирован").ЦветФона.Получить();
	Если ЦветФонаРасчетАннулирован <> Неопределено Тогда
		Элементы.СтатусАннулировать.ЦветФона = ЦветФонаРасчетАннулирован;
	КонецЕсли;
	
	//rarus agar 14.07.2020  15690 ++
	Если ЦветФонаСтатусСогласовать <> Неопределено Тогда
		Элементы.СтатусПрерватьСогласование.ЦветФона = ЦветФонаСтатусСогласовать;
	КонецЕсли;
	
	ЦветФонаСтатусНовыйРасчет = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.НовыйРасчет").ЦветФона.Получить();
	Если ЦветФонаСтатусНовыйРасчет <> Неопределено Тогда
		Элементы.СтатусИзменить.ЦветФона = ЦветФонаСтатусНовыйРасчет;
	КонецЕсли;
	//rarus agar 14.07.2020  15690 --
	
КонецПроцедуры
//rarus agar 04.06.2020  16123 --

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	ЦветТекстаСтатуса = Объект.Статус.ЦветТекста.Получить();
	Если ЦветТекстаСтатуса = Неопределено Тогда
		Элементы.Статус.ЦветТекста = Новый Цвет;
	Иначе
		Элементы.Статус.ЦветТекста = ЦветТекстаСтатуса;
	КонецЕсли;
	
	ЦветФонаСтатуса = Объект.Статус.ЦветФона.Получить();
	Если ЦветФонаСтатуса = Неопределено Тогда
		Элементы.Статус.ЦветФона = Новый Цвет;
	Иначе
		Элементы.Статус.ЦветФона = ЦветФонаСтатуса;
	КонецЕсли;
	
	//ОбработкаПараметровВидимости();
	Scan_ПараметрыВидимостиОбъектовСервер.ОбработкаПараметровВидимости(ЭтотОбъект);
	
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВидимости()
	
	ОбъектНастройки = Метаданные.Документы.Scan_Калькуляция.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РольИсполнителя = Выборка.РольИсполнителя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПараметровВидимости()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗаписей",  Документы.Scan_Калькуляция.ПолучитьСписокЭлементовДляНастройки());
	Запрос.УстановитьПараметр("ОбъектНастройки", ОбъектНастройки);
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("Статус",          Объект.Статус);
	Запрос.УстановитьПараметр("ХозОперация",     Объект.ХозОперация);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ.ИмяЭлемента КАК ИмяЭлемента
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТаблицаЗаписей КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Scan_ПараметрыВидимостиОбъектов.ИмяЭлемента КАК ИмяЭлемента,
	|	Scan_ПараметрыВидимостиОбъектов.Видимость КАК Видимость,
	|	Scan_ПараметрыВидимостиОбъектов.Доступность КАК Доступность
	|ПОМЕСТИТЬ ВТ_СохраненныеНастройки
	|ИЗ
	|	РегистрСведений.Scan_ПараметрыВидимостиОбъектов КАК Scan_ПараметрыВидимостиОбъектов
	|ГДЕ
	|	Scan_ПараметрыВидимостиОбъектов.ОбъектНастройки = &ОбъектНастройки
	|	И Scan_ПараметрыВидимостиОбъектов.РольИсполнителя = &РольИсполнителя
	|	И Scan_ПараметрыВидимостиОбъектов.Статус = &Статус
	|	И Scan_ПараметрыВидимостиОбъектов.ХозОперация = &ХозОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.ИмяЭлемента КАК ИмяЭлемента,
	|	ЕСТЬNULL(ВТ_СохраненныеНастройки.Видимость, ИСТИНА) КАК Видимость,
	|	ЕСТЬNULL(ВТ_СохраненныеНастройки.Доступность, ИСТИНА) КАК Доступность
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СохраненныеНастройки КАК ВТ_СохраненныеНастройки
	|		ПО ВТ_ТЗ.ИмяЭлемента = ВТ_СохраненныеНастройки.ИмяЭлемента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныйЭлемент = Элементы.Найти(Выборка.ИмяЭлемента);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы[Выборка.ИмяЭлемента].Видимость = Выборка.Видимость;
			Если    ТипЗнч(Элементы[Выборка.ИмяЭлемента]) = Тип("КнопкаФормы")
				Или ТипЗнч(Элементы[Выборка.ИмяЭлемента]) = Тип("ГруппаФормы")
				Тогда
				Элементы[Выборка.ИмяЭлемента].Доступность = Выборка.Доступность;
			Иначе
				Элементы[Выборка.ИмяЭлемента].ТолькоПросмотр = Не Выборка.Доступность;
			КонецЕсли;
		Иначе
			ВывестиСообщениеПол("Не найден элемент формы с именем %1. Обратитесь к администратору",,,,,Выборка.ИмяЭлемента);
			Элементы.ГруппаФон.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ЭтоИзменениеСтатейПрайсЛиста = Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ИзменениеСтатейПрайсЛиста");
	ЭтоРасчетОтПрайсЛиста        = Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.РасчетОтПрайсЛиста");
	
	ЭтоНовыйРасчет          = Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.НовыйРасчет");
	ЭтоРасчетНаСогласовании = Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетНаСогласовании");
	ЭтоРасчетУтвержден      = Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.РасчетУтвержден");
	
	ЭтоРежимТабличныйДокумент = РежимКалькуляции = 0;
	
	ЕстьСтрокиСпецификаций = Объект.СтандартныеСпецификации.Количество() <> 0;
	
	Если Элементы.ФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Найти("ФормаДокументScan_ПечатныйПрайсЛистСоздатьНаОсновании") <> Неопределено Тогда
		Элементы.ФормаСоздатьНаОсновании.ПодчиненныеЭлементы.ФормаДокументScan_ПечатныйПрайсЛистСоздатьНаОсновании.Видимость = ЭтоИзменениеСтатейПрайсЛиста И ЭтоРасчетУтвержден;
	КонецЕсли;
	
	Если Элементы.ФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Найти("ФормаБизнесПроцессScan_СогласованиеСоздатьНаОсновании") <> Неопределено Тогда
		Элементы.ФормаСоздатьНаОсновании.ПодчиненныеЭлементы.ФормаБизнесПроцессScan_СогласованиеСоздатьНаОсновании.Видимость = ЭтоИзменениеСтатейПрайсЛиста И Не ЭтоРасчетНаСогласовании;
	КонецЕсли;
	
	//rarus agar 26.10.2020 15690 ++
	Элементы.ГруппаПараметрыПрайсЛиста.Видимость = ЭтоИзменениеСтатейПрайсЛиста;
	//rarus agar 26.10.2020 15690 --

	Элементы.ГруппаКалькуляцияТабличныйДокумент.Видимость = ЭтоРежимТабличныйДокумент;
	Элементы.ГруппаКалькуляцияТаблицы.Видимость           = Не ЭтоРежимТабличныйДокумент;
	
	Элементы.КалькуляцияНачальноеЗаполнение.Видимость     = Не ЕстьСтрокиСпецификаций;
	Элементы.КалькуляцияСохранить.Видимость               = ЭтоРежимТабличныйДокумент И ЭтоНовыйРасчет;
	Элементы.КалькуляцияПерезаполнить.Видимость           = ЭтоНовыйРасчет;
	Элементы.ГруппаКалькуляцияПересчитать.Видимость       = ЭтоНовыйРасчет;
	Элементы.ГруппаКалькуляцияОчистить.Видимость          = ЭтоНовыйРасчет;
	Элементы.КалькуляцияЗаполнитьЗначенияСправа.Видимость = ЭтоНовыйРасчет;
	
	Элементы.СтандартныеСпецификацииЗаполнитьСтоимость.Видимость = ЭтоНовыйРасчет;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ЭтоИзменениеСтатейПрайсЛиста = Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ИзменениеСтатейПрайсЛиста");
	
	ЭтоНовыйРасчет = Объект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыКалькуляций.НовыйРасчет");
	
	ЕстьСтрокиСпецификаций = Объект.СтандартныеСпецификации.Количество() <> 0;
	
	Элементы.РежимКалькуляции.Доступность                   = ЕстьСтрокиСпецификаций;
	Элементы.КалькуляцияПерезаполнить.Доступность           = ЕстьСтрокиСпецификаций; 
	Элементы.ГруппаКалькуляцияПересчитать.Доступность       = ЕстьСтрокиСпецификаций И ЭтоНовыйРасчет;
	Элементы.ГруппаКалькуляцияОчистить.Доступность          = ЕстьСтрокиСпецификаций И ЭтоНовыйРасчет;
	Элементы.КалькуляцияЗаполнитьЗначенияСправа.Доступность = ЕстьСтрокиСпецификаций И ЭтоНовыйРасчет;
	
	//Элементы.КалькуляцияТабличныйДокумент.ТолькоПросмотр                 = Не ЭтоНовыйРасчет;
	Элементы.НерасчетныеСоставляющиеЗначение.ТолькоПросмотр              = Не ЭтоНовыйРасчет;
	Элементы.СтандартныеСпецификацииСтоимостьБазовыхОпций.ТолькоПросмотр = Не ЭтоНовыйРасчет;
	Элементы.СтандартныеСпецификацииСтоимостьНадстройки.ТолькоПросмотр   = Не ЭтоНовыйРасчет;
	Элементы.СтандартныеСпецификацииСтоимостьОборудования.ТолькоПросмотр = Не ЭтоНовыйРасчет;
	
	//Элементы.ДокументОснование.ТолькоПросмотр = ЭтоИзменениеСтатейПрайсЛиста;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРазделуКалькуляцииНаСервере()
	
	Элементы.НерасчетныеСоставляющие.ОтборСтрок = Новый ФиксированнаяСтруктура("РазделКалькуляции", ТекущийРазделКалькуляции);
	Элементы.РасчетныеСоставляющие.ОтборСтрок   = Новый ФиксированнаяСтруктура("РазделКалькуляции", ТекущийРазделКалькуляции);
	Элементы.СтандартныеСпецификации.ОтборСтрок = Новый ФиксированнаяСтруктура("РазделКалькуляции", ТекущийРазделКалькуляции);
	
КонецПроцедуры

&НаСервере
Процедура ТекущийРазделКалькуляцииПриИзмененииНаСервере()
	
	ОбновитьЗначенияСоставляющихПоАдресам();
	
	УстановитьОтборПоРазделуКалькуляцииНаСервере();
	ЗаполнитьТабличныйДокументКалькуляции();
	
КонецПроцедуры

&НаСервере
Процедура КалькуляцияНачальноеЗаполнениеНаСервере()
	
	ИсточникНерасчетныхСоставляющих = Новый ТаблицаЗначений;
	ИсточникРасчетныхСоставляющих   = Новый ТаблицаЗначений;
	ИсточникСтандартныхСпецификаций = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.РасчетОтПрайсЛиста") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
		Запрос.Текст = "ВЫБРАТЬ
		|	Scan_КалькуляцияНерасчетныеСоставляющие.РазделКалькуляции КАК РазделКалькуляции,
		|	Scan_КалькуляцияНерасчетныеСоставляющие.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
		|	Scan_КалькуляцияНерасчетныеСоставляющие.СоставляющаяРасчета КАК СоставляющаяРасчета,
		|	Scan_КалькуляцияНерасчетныеСоставляющие.Принадлежность КАК Принадлежность,
		|	Scan_КалькуляцияНерасчетныеСоставляющие.Идентификатор КАК Идентификатор,
		|	Scan_КалькуляцияНерасчетныеСоставляющие.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	Scan_КалькуляцияНерасчетныеСоставляющие.Значение КАК Значение
		|ИЗ
		|	Документ.Scan_Калькуляция.НерасчетныеСоставляющие КАК Scan_КалькуляцияНерасчетныеСоставляющие
		|ГДЕ
		|	Scan_КалькуляцияНерасчетныеСоставляющие.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КалькуляцияРасчетныеСоставляющие.РазделКалькуляции КАК РазделКалькуляции,
		|	Scan_КалькуляцияРасчетныеСоставляющие.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
		|	Scan_КалькуляцияРасчетныеСоставляющие.СоставляющаяРасчета КАК СоставляющаяРасчета,
		|	Scan_КалькуляцияРасчетныеСоставляющие.Принадлежность КАК Принадлежность,
		|	Scan_КалькуляцияРасчетныеСоставляющие.ФормулаРасчета КАК ФормулаРасчета,
		|	Scan_КалькуляцияРасчетныеСоставляющие.Идентификатор КАК Идентификатор,
		|	Scan_КалькуляцияРасчетныеСоставляющие.Значение КАК Значение
		|ИЗ
		|	Документ.Scan_Калькуляция.РасчетныеСоставляющие КАК Scan_КалькуляцияРасчетныеСоставляющие
		|ГДЕ
		|	Scan_КалькуляцияРасчетныеСоставляющие.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КалькуляцияСтандартныеСпецификации.РазделКалькуляции КАК РазделКалькуляции,
		|	Scan_КалькуляцияСтандартныеСпецификации.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
		|	Scan_КалькуляцияСтандартныеСпецификации.СтоимостьБазовыхОпций КАК СтоимостьБазовыхОпций,
		|	Scan_КалькуляцияСтандартныеСпецификации.СтоимостьНадстройки КАК СтоимостьНадстройки,
		|	Scan_КалькуляцияСтандартныеСпецификации.СтоимостьОборудования КАК СтоимостьОборудования
		|ИЗ
		|	Документ.Scan_Калькуляция.СтандартныеСпецификации КАК Scan_КалькуляцияСтандартныеСпецификации
		|ГДЕ
		|	Scan_КалькуляцияСтандартныеСпецификации.Ссылка = &ДокументОснование";
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ИсточникНерасчетныхСоставляющих = РезультатыЗапроса[0].Выгрузить();
		ИсточникРасчетныхСоставляющих   = РезультатыЗапроса[1].Выгрузить();
		ИсточникСтандартныхСпецификаций = РезультатыЗапроса[2].Выгрузить();
	Иначе
		Запрос.УстановитьПараметр("ИдПрайсЛиста", Объект.ИдентификаторПрайсЛиста);
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Scan_СпецификацияСтандартнойМодели.ИспользуетсяВРазделеКалькуляции КАК РазделКалькуляции,
		|	Scan_СпецификацияСтандартнойМодели.Ссылка КАК СтандартнаяСпецификация,
		|	Scan_СпецификацияСтандартнойМодели.НомерСпецификации КАК НомерСпецификации
		|ПОМЕСТИТЬ ВТ_РазделыИСпецификации
		|ИЗ
		|	Документ.Scan_СпецификацияСтандартнойМодели КАК Scan_СпецификацияСтандартнойМодели
		|ГДЕ
		|	Scan_СпецификацияСтандартнойМодели.Проведен
		|	И НЕ Scan_СпецификацияСтандартнойМодели.ПометкаУдаления
		|	И Scan_СпецификацияСтандартнойМодели.ИспользуетсяВКалькуляции
		|	И Scan_СпецификацияСтандартнойМодели.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазделыИСпецификации.РазделКалькуляции КАК РазделКалькуляции,
		|	РазделыИСпецификации.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
		|	РазделыИСпецификации.НомерСпецификации КАК НомерСпецификации,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК СоставляющаяРасчета,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.Принадлежность КАК Принадлежность,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор КАК Идентификатор,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.ЗначениеПоУмолчанию КАК Значение
		|ПОМЕСТИТЬ ВТ_НерасчетныеСоставляющие
		|ИЗ
		|	ВТ_РазделыИСпецификации КАК РазделыИСпецификации,
		|	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
		|ГДЕ
		|	НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ЭтоГруппа
		|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ПометкаУдаления
		|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.НеИспользуется
		|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор = """"
		|	И Scan_СоставляющиеРасчетаЦеныПродуктов.ТипСоставляющейЦены = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.НерасчетнаяСоставляющая)
		|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ЯвляетсяПакетомУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НерасчетныеСоставляющие.РазделКалькуляции КАК РазделКалькуляции,
		|	НерасчетныеСоставляющие.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
		|	НерасчетныеСоставляющие.СоставляющаяРасчета КАК СоставляющаяРасчета,
		|	НерасчетныеСоставляющие.Принадлежность КАК Принадлежность,
		|	НерасчетныеСоставляющие.Идентификатор КАК Идентификатор,
		|	НерасчетныеСоставляющие.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции,
		|	ВЫБОР
		|		КОГДА НЕ УточнениеИдентификаторРазделСпецификация.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеИдентификаторРазделСпецификация.Значение
		|		КОГДА НЕ УточнениеИдентификаторСпецификация.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеИдентификаторСпецификация.Значение
		|		КОГДА НЕ УточнениеИдентификаторРаздел.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеИдентификаторРаздел.Значение
		|		КОГДА НЕ УточнениеИдентификатор.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеИдентификатор.Значение
		|		КОГДА НЕ УточнениеРазделСпецификация.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеРазделСпецификация.Значение
		|		КОГДА НЕ УточнениеСпецификация.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеСпецификация.Значение
		|		КОГДА НЕ УточнениеРаздел.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеРаздел.Значение
		|		ИНАЧЕ НерасчетныеСоставляющие.Значение
		|	КОНЕЦ КАК ЗначениеПоУмолчанию,
		|	ВЫБОР
		|		КОГДА НЕ УточнениеИдентификаторРазделСпецификация.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеИдентификаторРазделСпецификация.Значение
		|		КОГДА НЕ УточнениеИдентификаторСпецификация.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеИдентификаторСпецификация.Значение
		|		КОГДА НЕ УточнениеИдентификаторРаздел.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеИдентификаторРаздел.Значение
		|		КОГДА НЕ УточнениеИдентификатор.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеИдентификатор.Значение
		|		КОГДА НЕ УточнениеРазделСпецификация.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеРазделСпецификация.Значение
		|		КОГДА НЕ УточнениеСпецификация.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеСпецификация.Значение
		|		КОГДА НЕ УточнениеРаздел.Значение ЕСТЬ NULL
		|			ТОГДА УточнениеРаздел.Значение
		|		ИНАЧЕ НерасчетныеСоставляющие.Значение
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	ВТ_НерасчетныеСоставляющие КАК НерасчетныеСоставляющие
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеИдентификаторРазделСпецификация
		|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеИдентификаторРазделСпецификация.Ссылка
		|			И (УточнениеИдентификаторРазделСпецификация.ИдентификаторПрайсЛиста = &ИдПрайсЛиста)
		|			И НерасчетныеСоставляющие.РазделКалькуляции = УточнениеИдентификаторРазделСпецификация.РазделКалькуляции
		|			И НерасчетныеСоставляющие.СтандартнаяСпецификация = УточнениеИдентификаторРазделСпецификация.СтандартнаяСпецификация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеИдентификаторСпецификация
		|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеИдентификаторСпецификация.Ссылка
		|			И (УточнениеИдентификаторСпецификация.ИдентификаторПрайсЛиста = &ИдПрайсЛиста)
		|			И (УточнениеИдентификаторСпецификация.РазделКалькуляции = ЗНАЧЕНИЕ(Справочник.Scan_РазделыКалькуляции.ПустаяСсылка))
		|			И НерасчетныеСоставляющие.СтандартнаяСпецификация = УточнениеИдентификаторСпецификация.СтандартнаяСпецификация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеИдентификаторРаздел
		|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеИдентификаторРаздел.Ссылка
		|			И (УточнениеИдентификаторРаздел.ИдентификаторПрайсЛиста = &ИдПрайсЛиста)
		|			И НерасчетныеСоставляющие.РазделКалькуляции = УточнениеИдентификаторРаздел.РазделКалькуляции
		|			И (УточнениеИдентификаторРаздел.СтандартнаяСпецификация = ЗНАЧЕНИЕ(Документ.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеИдентификатор
		|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеИдентификатор.Ссылка
		|			И (УточнениеИдентификатор.ИдентификаторПрайсЛиста = &ИдПрайсЛиста)
		|			И (УточнениеИдентификатор.РазделКалькуляции = ЗНАЧЕНИЕ(Справочник.Scan_РазделыКалькуляции.ПустаяСсылка))
		|			И (УточнениеИдентификатор.СтандартнаяСпецификация = ЗНАЧЕНИЕ(Документ.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеРазделСпецификация
		|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеРазделСпецификация.Ссылка
		|			И (УточнениеРазделСпецификация.ИдентификаторПрайсЛиста = 0)
		|			И НерасчетныеСоставляющие.РазделКалькуляции = УточнениеРазделСпецификация.РазделКалькуляции
		|			И НерасчетныеСоставляющие.СтандартнаяСпецификация = УточнениеРазделСпецификация.СтандартнаяСпецификация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеСпецификация
		|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеСпецификация.Ссылка
		|			И (УточнениеСпецификация.ИдентификаторПрайсЛиста = 0)
		|			И (УточнениеСпецификация.РазделКалькуляции = ЗНАЧЕНИЕ(Справочник.Scan_РазделыКалькуляции.ПустаяСсылка))
		|			И НерасчетныеСоставляющие.СтандартнаяСпецификация = УточнениеСпецификация.СтандартнаяСпецификация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеРаздел
		|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеРаздел.Ссылка
		|			И НерасчетныеСоставляющие.РазделКалькуляции = УточнениеРаздел.РазделКалькуляции
		|			И (УточнениеРаздел.СтандартнаяСпецификация = ЗНАЧЕНИЕ(Документ.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НерасчетныеСоставляющие.НомерСпецификации,
		|	НерасчетныеСоставляющие.НомерСтрокиКалькуляции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазделыИСпецификации.РазделКалькуляции КАК РазделКалькуляции,
		|	РазделыИСпецификации.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК СоставляющаяРасчета,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор КАК Идентификатор,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.Принадлежность КАК Принадлежность,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.ФормулаРасчета КАК ФормулаРасчета,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции
		|ИЗ
		|	ВТ_РазделыИСпецификации КАК РазделыИСпецификации,
		|	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
		|ГДЕ
		|	НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ЭтоГруппа
		|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ПометкаУдаления
		|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.НеИспользуется
		|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор = """"
		|	И Scan_СоставляющиеРасчетаЦеныПродуктов.ТипСоставляющейЦены = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая)
		|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ЯвляетсяПакетомУслуг
		|
		|УПОРЯДОЧИТЬ ПО
		|	РазделыИСпецификации.НомерСпецификации,
		|	Scan_СоставляющиеРасчетаЦеныПродуктов.НомерСтрокиКалькуляции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РазделыИСпецификации.РазделКалькуляции КАК РазделКалькуляции,
		|	ВТ_РазделыИСпецификации.СтандартнаяСпецификация КАК СтандартнаяСпецификация
		|ИЗ
		|	ВТ_РазделыИСпецификации КАК ВТ_РазделыИСпецификации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_РазделыИСпецификации.НомерСпецификации";
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ИсточникНерасчетныхСоставляющих = РезультатыЗапроса[2].Выгрузить();
		ИсточникРасчетныхСоставляющих   = РезультатыЗапроса[3].Выгрузить();
		ИсточникСтандартныхСпецификаций = РезультатыЗапроса[4].Выгрузить();
	КонецЕсли;
	
	Объект.НерасчетныеСоставляющие.Загрузить(ИсточникНерасчетныхСоставляющих);
	Объект.РасчетныеСоставляющие.Загрузить(ИсточникРасчетныхСоставляющих);
	Объект.СтандартныеСпецификации.Загрузить(ИсточникСтандартныхСпецификаций);

	ЗаполнитьРазделыКалькуляции();
	//КалькуляцияЗаполнитьСтоимостьСпецификацийНаСервере();
	
	Модифицированность = Истина;
	
	ЗаполнитьКалькуляциюНаСервере();
	УстановитьОтборПоРазделуКалькуляцииНаСервере();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КалькуляцияПерезаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдПрайсЛиста", Объект.ИдентификаторПрайсЛиста);
	Запрос.УстановитьПараметр("НерасчетныеСоставляющие", Объект.НерасчетныеСоставляющие.Выгрузить().ВыгрузитьКолонку("СоставляющаяРасчета"));
	Запрос.УстановитьПараметр("РасчетныеСоставляющие", Объект.РасчетныеСоставляющие.Выгрузить().ВыгрузитьКолонку("СоставляющаяРасчета"));
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Scan_СпецификацияСтандартнойМодели.ИспользуетсяВРазделеКалькуляции КАК РазделКалькуляции,
	|	Scan_СпецификацияСтандартнойМодели.Ссылка КАК СтандартнаяСпецификация,
	|	Scan_СпецификацияСтандартнойМодели.НомерСпецификации КАК НомерСпецификации
	|ПОМЕСТИТЬ ВТ_РазделыИСпецификации
	|ИЗ
	|	Документ.Scan_СпецификацияСтандартнойМодели КАК Scan_СпецификацияСтандартнойМодели
	|ГДЕ
	|	Scan_СпецификацияСтандартнойМодели.Проведен
	|	И НЕ Scan_СпецификацияСтандартнойМодели.ПометкаУдаления
	|	И Scan_СпецификацияСтандартнойМодели.ИспользуетсяВКалькуляции
	|	И Scan_СпецификацияСтандартнойМодели.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазделыИСпецификации.РазделКалькуляции КАК РазделКалькуляции,
	|	РазделыИСпецификации.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
	|	РазделыИСпецификации.НомерСпецификации КАК НомерСпецификации,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК СоставляющаяРасчета,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Принадлежность КАК Принадлежность,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор КАК Идентификатор,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ЗначениеПоУмолчанию КАК Значение
	|ПОМЕСТИТЬ ВТ_НерасчетныеСоставляющие
	|ИЗ
	|	ВТ_РазделыИСпецификации КАК РазделыИСпецификации,
	|	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
	|ГДЕ
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка В(&НерасчетныеСоставляющие)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НерасчетныеСоставляющие.РазделКалькуляции КАК РазделКалькуляции,
	|	НерасчетныеСоставляющие.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
	|	НерасчетныеСоставляющие.СоставляющаяРасчета КАК СоставляющаяРасчета,
	|	НерасчетныеСоставляющие.Принадлежность КАК Принадлежность,
	|	НерасчетныеСоставляющие.Идентификатор КАК Идентификатор,
	|	НерасчетныеСоставляющие.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции,
	|	ВЫБОР
	|		КОГДА НЕ УточнениеИдентификаторРазделСпецификация.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеИдентификаторРазделСпецификация.Значение
	|		КОГДА НЕ УточнениеИдентификаторСпецификация.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеИдентификаторСпецификация.Значение
	|		КОГДА НЕ УточнениеИдентификаторРаздел.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеИдентификаторРаздел.Значение
	|		КОГДА НЕ УточнениеИдентификатор.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеИдентификатор.Значение
	|		КОГДА НЕ УточнениеРазделСпецификация.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеРазделСпецификация.Значение
	|		КОГДА НЕ УточнениеСпецификация.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеСпецификация.Значение
	|		КОГДА НЕ УточнениеРаздел.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеРаздел.Значение
	|		ИНАЧЕ НерасчетныеСоставляющие.Значение
	|	КОНЕЦ КАК ЗначениеПоУмолчанию,
	|	ВЫБОР
	|		КОГДА НЕ УточнениеИдентификаторРазделСпецификация.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеИдентификаторРазделСпецификация.Значение
	|		КОГДА НЕ УточнениеИдентификаторСпецификация.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеИдентификаторСпецификация.Значение
	|		КОГДА НЕ УточнениеИдентификаторРаздел.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеИдентификаторРаздел.Значение
	|		КОГДА НЕ УточнениеИдентификатор.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеИдентификатор.Значение
	|		КОГДА НЕ УточнениеРазделСпецификация.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеРазделСпецификация.Значение
	|		КОГДА НЕ УточнениеСпецификация.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеСпецификация.Значение
	|		КОГДА НЕ УточнениеРаздел.Значение ЕСТЬ NULL
	|			ТОГДА УточнениеРаздел.Значение
	|		ИНАЧЕ НерасчетныеСоставляющие.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	ВТ_НерасчетныеСоставляющие КАК НерасчетныеСоставляющие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеИдентификаторРазделСпецификация
	|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеИдентификаторРазделСпецификация.Ссылка
	|			И (УточнениеИдентификаторРазделСпецификация.ИдентификаторПрайсЛиста = &ИдПрайсЛиста)
	|			И НерасчетныеСоставляющие.РазделКалькуляции = УточнениеИдентификаторРазделСпецификация.РазделКалькуляции
	|			И НерасчетныеСоставляющие.СтандартнаяСпецификация = УточнениеИдентификаторРазделСпецификация.СтандартнаяСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеИдентификаторСпецификация
	|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеИдентификаторСпецификация.Ссылка
	|			И (УточнениеИдентификаторСпецификация.ИдентификаторПрайсЛиста = &ИдПрайсЛиста)
	|			И (УточнениеИдентификаторСпецификация.РазделКалькуляции = ЗНАЧЕНИЕ(Справочник.Scan_РазделыКалькуляции.ПустаяСсылка))
	|			И НерасчетныеСоставляющие.СтандартнаяСпецификация = УточнениеИдентификаторСпецификация.СтандартнаяСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеИдентификаторРаздел
	|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеИдентификаторРаздел.Ссылка
	|			И (УточнениеИдентификаторРаздел.ИдентификаторПрайсЛиста = &ИдПрайсЛиста)
	|			И НерасчетныеСоставляющие.РазделКалькуляции = УточнениеИдентификаторРаздел.РазделКалькуляции
	|			И (УточнениеИдентификаторРаздел.СтандартнаяСпецификация = ЗНАЧЕНИЕ(Документ.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеИдентификатор
	|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеИдентификатор.Ссылка
	|			И (УточнениеИдентификатор.ИдентификаторПрайсЛиста = &ИдПрайсЛиста)
	|			И (УточнениеИдентификатор.РазделКалькуляции = ЗНАЧЕНИЕ(Справочник.Scan_РазделыКалькуляции.ПустаяСсылка))
	|			И (УточнениеИдентификатор.СтандартнаяСпецификация = ЗНАЧЕНИЕ(Документ.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеРазделСпецификация
	|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеРазделСпецификация.Ссылка
	|			И (УточнениеРазделСпецификация.ИдентификаторПрайсЛиста = 0)
	|			И НерасчетныеСоставляющие.РазделКалькуляции = УточнениеРазделСпецификация.РазделКалькуляции
	|			И НерасчетныеСоставляющие.СтандартнаяСпецификация = УточнениеРазделСпецификация.СтандартнаяСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеСпецификация
	|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеСпецификация.Ссылка
	|			И (УточнениеСпецификация.ИдентификаторПрайсЛиста = 0)
	|			И (УточнениеСпецификация.РазделКалькуляции = ЗНАЧЕНИЕ(Справочник.Scan_РазделыКалькуляции.ПустаяСсылка))
	|			И НерасчетныеСоставляющие.СтандартнаяСпецификация = УточнениеСпецификация.СтандартнаяСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.УточнениеЗначенийПоУмолчанию КАК УточнениеРаздел
	|		ПО НерасчетныеСоставляющие.СоставляющаяРасчета = УточнениеРаздел.Ссылка
	|			И НерасчетныеСоставляющие.РазделКалькуляции = УточнениеРаздел.РазделКалькуляции
	|			И (УточнениеРаздел.СтандартнаяСпецификация = ЗНАЧЕНИЕ(Документ.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазделыИСпецификации.РазделКалькуляции КАК РазделКалькуляции,
	|	РазделыИСпецификации.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК СоставляющаяРасчета,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор КАК Идентификатор,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Принадлежность КАК Принадлежность,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ФормулаРасчета КАК ФормулаРасчета
	|ИЗ
	|	ВТ_РазделыИСпецификации КАК РазделыИСпецификации,
	|	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
	|ГДЕ
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка В (&РасчетныеСоставляющие)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделыИСпецификации.НомерСпецификации,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.НомерСтрокиКалькуляции";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет(); 
	
	ВыборкаНерасчетные = РезультатыЗапроса[2].Выбрать();
	ВыборкаРасчетные   = РезультатыЗапроса[3].Выбрать();
	
	Для Каждого СтрокаНерасчетнойСоставляющей Из Объект.НерасчетныеСоставляющие Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("РазделКалькуляции",       СтрокаНерасчетнойСоставляющей.РазделКалькуляции);
		СтруктураПоиска.Вставить("СтандартнаяСпецификация", СтрокаНерасчетнойСоставляющей.СтандартнаяСпецификация);
		СтруктураПоиска.Вставить("СоставляющаяРасчета",     СтрокаНерасчетнойСоставляющей.СоставляющаяРасчета);
		
		ВыборкаНерасчетные.Сбросить();
		Если ВыборкаНерасчетные.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаНерасчетнойСоставляющей.Принадлежность         = ВыборкаНерасчетные.Принадлежность;
			СтрокаНерасчетнойСоставляющей.Идентификатор          = ВыборкаНерасчетные.Идентификатор;
			СтрокаНерасчетнойСоставляющей.НомерСтрокиКалькуляции = ВыборкаНерасчетные.НомерСтрокиКалькуляции;
			СтрокаНерасчетнойСоставляющей.ЗначениеПоУмолчанию    = ВыборкаНерасчетные.ЗначениеПоУмолчанию;
			СтрокаНерасчетнойСоставляющей.Значение               = ВыборкаНерасчетные.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаРасчетнойСоставляющей Из Объект.РасчетныеСоставляющие Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("РазделКалькуляции",       СтрокаРасчетнойСоставляющей.РазделКалькуляции);
		СтруктураПоиска.Вставить("СтандартнаяСпецификация", СтрокаРасчетнойСоставляющей.СтандартнаяСпецификация);
		СтруктураПоиска.Вставить("СоставляющаяРасчета",     СтрокаРасчетнойСоставляющей.СоставляющаяРасчета);
		
		ВыборкаРасчетные.Сбросить();
		Если ВыборкаРасчетные.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаРасчетнойСоставляющей.Принадлежность         = ВыборкаРасчетные.Принадлежность;
			СтрокаРасчетнойСоставляющей.Идентификатор          = ВыборкаРасчетные.Идентификатор;
			СтрокаРасчетнойСоставляющей.НомерСтрокиКалькуляции = ВыборкаРасчетные.НомерСтрокиКалькуляции;
			СтрокаРасчетнойСоставляющей.ФормулаРасчета         = ВыборкаРасчетные.ФормулаРасчета;
		КонецЕсли;
		
		СтрокаРасчетнойСоставляющей.Значение = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КалькуляцияСохранитьНаСервере()
	
	ОбновитьЗначенияСоставляющихПоАдресам();
	
	Элементы.ФормаЗаписать.Доступность        = Истина;
	Элементы.КалькуляцияСохранить.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура КалькуляцияПересчитатьРазделНаСервере(РазделКалькуляции = Неопределено)
	
	Если РазделКалькуляции = Неопределено Тогда
		РазделКалькуляции = ТекущийРазделКалькуляции;
	КонецЕсли;
	
	ТаблицаСтандартныхСпецификаций = Объект.СтандартныеСпецификации.Выгрузить(Новый Структура("РазделКалькуляции", РазделКалькуляции));
	ТаблицаСтандартныхСпецификаций.Свернуть("СтандартнаяСпецификация");
	
	Для Каждого СтрокаСтандартнойСпецификации Из ТаблицаСтандартныхСпецификаций Цикл
		ПересчитатьСоставляющиеСтандартнойСпецификации(СтрокаСтандартнойСпецификации.СтандартнаяСпецификация);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСоставляющиеСтандартнойСпецификации(СтандартнаяСпецификация)
	
	СоставляющаяСтоимостьБазовыхОпций = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СтоимостьБазовыхОпций");
	СоставляющаяСтоимостьНадстройки   = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СтоимостьНадстройки");
	
	СтоимостьБазовыхОпций = 0;
	СтоимостьНадстройки   = 0;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("СтандартнаяСпецификация", СтандартнаяСпецификация);
	
	НайденныеСтроки = Объект.СтандартныеСпецификации.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтоимостьБазовыхОпций = НайденныеСтроки[0].СтоимостьБазовыхОпций;
		СтоимостьНадстройки   = НайденныеСтроки[0].СтоимостьНадстройки;
	КонецЕсли;
	
	ТаблицаНерасчетныхСоставляющих = Объект.НерасчетныеСоставляющие.Выгрузить(Новый Структура("СтандартнаяСпецификация", СтандартнаяСпецификация),"СоставляющаяРасчета,Идентификатор,Значение");
	ТаблицаЗаданныхСоставляющих    = Scan_ЦенообразованиеСервер.ПолучитьПустуюТаблицуСоставляющих();
	
	НайденныеРасчетныеСоставляющие = Объект.РасчетныеСоставляющие.НайтиСтроки(Новый Структура("СтандартнаяСпецификация", СтандартнаяСпецификация));
	
	Для Каждого СтрокаРасчетнойСоставляющей Из НайденныеРасчетныеСоставляющие Цикл
		Если    (СтрокаРасчетнойСоставляющей.Принадлежность = ПредопределенноеЗначение("Перечисление.Scan_ПринадлежностьСоставляющихКалькуляции.Шасси")
			И СтоимостьБазовыхОпций = 0)
			Или (СтрокаРасчетнойСоставляющей.Принадлежность = ПредопределенноеЗначение("Перечисление.Scan_ПринадлежностьСоставляющихКалькуляции.Надстройка")
			И СтоимостьНадстройки = 0)
			Тогда
			РезультатРасчетаСоставляющей = 0;
		Иначе
			Если СтрокаРасчетнойСоставляющей.СоставляющаяРасчета = СоставляющаяСтоимостьБазовыхОпций Тогда
				РезультатРасчетаСоставляющей = СтоимостьБазовыхОпций;
			ИначеЕсли СтрокаРасчетнойСоставляющей.СоставляющаяРасчета = СоставляющаяСтоимостьНадстройки Тогда
				РезультатРасчетаСоставляющей = СтоимостьНадстройки;
			Иначе
				ПараметрыРасчета = Scan_ЦенообразованиеСервер.ПолучитьСтруктуруПараметровРасчета();
				ПараметрыРасчета.ФормулаРасчета          = СтрокаРасчетнойСоставляющей.ФормулаРасчета;
				ПараметрыРасчета.НерасчетныеСоставляющие = ТаблицаНерасчетныхСоставляющих;
				ПараметрыРасчета.ЗаданныеСоставляющие    = ТаблицаЗаданныхСоставляющих;
				
				РезультатРасчетаСоставляющей = Scan_ЦенообразованиеСервер.РассчитатьСоставляющую(СтрокаРасчетнойСоставляющей.СоставляющаяРасчета, ПараметрыРасчета);
				//РезультатРасчетаСоставляющей = РезультатРасчетаСоставляющей; Rarus bonmak АПК
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРасчетнойСоставляющей.Значение = РезультатРасчетаСоставляющей;
		
		НоваяСтрока = ТаблицаЗаданныхСоставляющих.Добавить();
		НоваяСтрока.СоставляющаяРасчета = СтрокаРасчетнойСоставляющей.СоставляющаяРасчета;
		НоваяСтрока.Идентификатор       = СтрокаРасчетнойСоставляющей.Идентификатор;
		НоваяСтрока.Значение            = РезультатРасчетаСоставляющей;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияПерезаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КалькуляцияПерезаполнитьНаСервере();
		ЗаполнитьКалькуляциюНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьКалькуляциюНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияОчиститьРазделЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьРазделКалькуляцииНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КалькуляцияЗаполнитьСтоимостьСпецификацийНаСервере()
	
	ТаблицаСтандартныхСпецификаций = Объект.СтандартныеСпецификации.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтандартныеСпецификации", ТаблицаСтандартныхСпецификаций.ВыгрузитьКолонку("СтандартнаяСпецификация"));
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_СпецификацияСтандартнойМоделиСпецификация.Ссылка КАК СтандартнаяСпецификация,
	|	Scan_СпецификацияСтандартнойМоделиСпецификация.Опция КАК Опция
	|ИЗ
	|	Документ.Scan_СпецификацияСтандартнойМодели.Спецификация КАК Scan_СпецификацияСтандартнойМоделиСпецификация
	|ГДЕ
	|	Scan_СпецификацияСтандартнойМоделиСпецификация.Ссылка В(&СтандартныеСпецификации)
	|ИТОГИ ПО
	|	СтандартнаяСпецификация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСпецификации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтандартнаяСпецификация");
	
	Для Каждого СтрокаСтандартнойСпецификации Из Объект.СтандартныеСпецификации Цикл
		СтоимостьБазовыхОпций = 0;
		
		СтрокаСтандартнойСпецификации.СтоимостьБазовыхОпций = СтоимостьБазовыхОпций;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРазделКалькуляцииНаСервере()
	
	НайденныеНерасчетныеСоставляющие = Объект.НерасчетныеСоставляющие.НайтиСтроки(Новый Структура("РазделКалькуляции", ТекущийРазделКалькуляции));	
	Для Каждого СтрокаНерасчетнойСоставляющей Из НайденныеНерасчетныеСоставляющие Цикл
		СтрокаНерасчетнойСоставляющей.Значение = СтрокаНерасчетнойСоставляющей.ЗначениеПоУмолчанию;
	КонецЦикла;
	
	НайденныеРасчетныеСоставляющие   = Объект.РасчетныеСоставляющие.НайтиСтроки(Новый Структура("РазделКалькуляции", ТекущийРазделКалькуляции));
	Для Каждого СтрокаРасчетнойСоставляющей Из НайденныеРасчетныеСоставляющие Цикл
		СтрокаРасчетнойСоставляющей.Значение = 0;
	КонецЦикла;
	
	ЗаполнитьТабличныйДокументКалькуляции();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКалькуляциюНаСервере()
	
	ЗаполнитьРазделыКалькуляции();
	ЗаполнитьТабличныйДокументКалькуляции();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделыКалькуляции()
	
	Элементы.ТекущийРазделКалькуляции.СписокВыбора.Очистить();
	
	ТаблицаРазделов = Объект.СтандартныеСпецификации.Выгрузить(,"РазделКалькуляции");
	ТаблицаРазделов.Свернуть("РазделКалькуляции");
	ТаблицаРазделов.Сортировать("РазделКалькуляции");
	
	МассивРазделов = ТаблицаРазделов.ВыгрузитьКолонку("РазделКалькуляции");
	
	Если МассивРазделов.Количество() > 0 Тогда
		Для Каждого РазделКалькуляции Из МассивРазделов Цикл
			Элементы.ТекущийРазделКалькуляции.СписокВыбора.Добавить(РазделКалькуляции, РазделКалькуляции);
		КонецЦикла;
		
		Если ТекущийРазделКалькуляции.Пустая() Тогда
			ТекущийРазделКалькуляции = МассивРазделов[0];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныйДокументКалькуляции()
	
	КалькуляцияАдресаЗначений.Очистить();
	КалькуляцияТабличныйДокумент.Очистить();
	
	Если Объект.СтандартныеСпецификации.Количество() = 0 Тогда
		МакетПриглашение = Документы.Scan_Калькуляция.ПолучитьМакет("КалькуляцияПриглашение");
		КалькуляцияТабличныйДокумент.Вывести(МакетПриглашение);
	Иначе
		КалькуляцияТабличныйДокумент.Вывести(СформироватьТабличныйДокументКалькуляции());
		КалькуляцияТабличныйДокумент.ФиксацияСверху = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТабличныйДокументКалькуляции()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МакетКалькуляция = Документы.Scan_Калькуляция.ПолучитьМакет("Калькуляция");
	
	СтандартныеСпецификацииСвернутая = Объект.СтандартныеСпецификации.Выгрузить(Новый Структура("РазделКалькуляции", ТекущийРазделКалькуляции));
	СтандартныеСпецификацииСвернутая.Свернуть("СтандартнаяСпецификация");
	
	#Область Шапка
	
	ОбластьШапкаОтступ = МакетКалькуляция.ПолучитьОбласть("СтрокаШапка|КолонкаОтступ");
	ТабличныйДокумент.Вывести(ОбластьШапкаОтступ);
	
	ОбластьШапкаСоставляющая = МакетКалькуляция.ПолучитьОбласть("СтрокаШапка|КолонкаСоставляющая");
	ТабличныйДокумент.Присоединить(ОбластьШапкаСоставляющая);
	
	ОбластьШапкаСпецификация = МакетКалькуляция.ПолучитьОбласть("СтрокаШапка|КолонкаСпецификация");
	Для Каждого СтрокаСпецификации Из Объект.СтандартныеСпецификации Цикл
		Если СтрокаСпецификации.РазделКалькуляции <> ТекущийРазделКалькуляции Тогда
			Продолжить;
		КонецЕсли;
		ОбластьШапкаСпецификация.Параметры.НомерСпецификации    = СтрокаСпецификации.СтандартнаяСпецификация.НомерСпецификации;
		ОбластьШапкаСпецификация.Параметры.ОписаниеСпецификации = СтрокаСпецификации.СтандартнаяСпецификация.ОписаниеСпецификации;
		ТабличныйДокумент.Присоединить(ОбластьШапкаСпецификация);
	КонецЦикла;
	
	#КонецОбласти
	
	#Область НерасчетныеСоставляющиеНеЗадана
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("РазделКалькуляции", ТекущийРазделКалькуляции);
	ПараметрыОтбора.Вставить("Принадлежность",    ПредопределенноеЗначение("Перечисление.Scan_ПринадлежностьСоставляющихКалькуляции.НеЗадана"));
	
	НерасчетныеСоставляющиеНеЗадана = Объект.НерасчетныеСоставляющие.Выгрузить(ПараметрыОтбора);
	
	ВывестиСекциюСоставляющихКалькуляции(ТабличныйДокумент, СтандартныеСпецификацииСвернутая, НерасчетныеСоставляющиеНеЗадана);
	
	#КонецОбласти
	
	ЕстьЦеныШасси     = Ложь;
	ЕстьЦеныНадстроек = Ложь;
	
	НайденныеСтрокиСпецификаций = Объект.СтандартныеСпецификации.НайтиСтроки(Новый Структура("РазделКалькуляции", ТекущийРазделКалькуляции));
	Для Каждого СтрокаСпецификации Из НайденныеСтрокиСпецификаций Цикл
		Если СтрокаСпецификации.СтоимостьБазовыхОпций <> 0 Тогда
			ЕстьЦеныШасси = Истина;
		КонецЕсли;	
		Если СтрокаСпецификации.СтоимостьНадстройки <> 0 Тогда
			ЕстьЦеныНадстроек = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	#Область НерасчетныеИРасчетныеСоставляющиеШасси
	
	Если ЕстьЦеныШасси Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РазделКалькуляции", ТекущийРазделКалькуляции);
		ПараметрыОтбора.Вставить("Принадлежность",    ПредопределенноеЗначение("Перечисление.Scan_ПринадлежностьСоставляющихКалькуляции.Шасси"));
		
		НерасчетныеИРасчетныеСоставляющиеШасси = Объект.НерасчетныеСоставляющие.Выгрузить(ПараметрыОтбора);
		РасчетныеСоставляющиеШасси             = Объект.РасчетныеСоставляющие.Выгрузить(ПараметрыОтбора);
		
		Для Каждого СтрокаРасчетныеСоставляющиеШасси Из РасчетныеСоставляющиеШасси Цикл
			НоваяСтрока = НерасчетныеИРасчетныеСоставляющиеШасси.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетныеСоставляющиеШасси);
		КонецЦикла;
		
		ВывестиСекциюСоставляющихКалькуляции(ТабличныйДокумент, СтандартныеСпецификацииСвернутая, НерасчетныеИРасчетныеСоставляющиеШасси, "ШАССИ");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НерасчетныеИРасчетныеСоставляющиеНадстройка
	
	Если ЕстьЦеныНадстроек Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РазделКалькуляции", ТекущийРазделКалькуляции);
		ПараметрыОтбора.Вставить("Принадлежность",    ПредопределенноеЗначение("Перечисление.Scan_ПринадлежностьСоставляющихКалькуляции.Надстройка"));
		
		НерасчетныеИРасчетныеСоставляющиеНадстройка = Объект.НерасчетныеСоставляющие.Выгрузить(ПараметрыОтбора);
		РасчетныеСоставляющиеНадстройка             = Объект.РасчетныеСоставляющие.Выгрузить(ПараметрыОтбора);
		
		Для Каждого СтрокаРасчетныеСоставляющиеНадстройка Из РасчетныеСоставляющиеНадстройка Цикл
			НоваяСтрока = НерасчетныеИРасчетныеСоставляющиеНадстройка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетныеСоставляющиеНадстройка);
		КонецЦикла;
		
		ВывестиСекциюСоставляющихКалькуляции(ТабличныйДокумент, СтандартныеСпецификацииСвернутая, НерасчетныеИРасчетныеСоставляющиеНадстройка, "НАДСТРОЙКА");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасчетныеСоставляющиеНеЗадана
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("РазделКалькуляции", ТекущийРазделКалькуляции);
	ПараметрыОтбора.Вставить("Принадлежность",    ПредопределенноеЗначение("Перечисление.Scan_ПринадлежностьСоставляющихКалькуляции.НеЗадана"));
	
	РасчетныеСоставляющиеНеЗадана = Объект.РасчетныеСоставляющие.Выгрузить(ПараметрыОтбора);
	
	ВывестиСекциюСоставляющихКалькуляции(ТабличныйДокумент, СтандартныеСпецификацииСвернутая, РасчетныеСоставляющиеНеЗадана, "ИТОГИ");
	
	#КонецОбласти
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Процедура ВывестиСекциюСоставляющихКалькуляции(ТабличныйДокумент, ТаблицаСпецификаций, ТаблицаСоставляющих, ТекстСекции = "")
	
	Если ТаблицаСоставляющих.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СерыйЦвет = Новый Цвет(217,217,217);
	
	МакетКалькуляция = Документы.Scan_Калькуляция.ПолучитьМакет("Калькуляция");
	
	ТаблицаСоставляющихСвернутая = ТаблицаСоставляющих.Скопировать(,"СоставляющаяРасчета,НомерСтрокиКалькуляции");
	ТаблицаСоставляющихСвернутая.Свернуть("СоставляющаяРасчета,НомерСтрокиКалькуляции");
	ТаблицаСоставляющихСвернутая.Сортировать("НомерСтрокиКалькуляции");
	
	ОбластьОтступ = МакетКалькуляция.ПолучитьОбласть("СтрокаОтступ");
	ТабличныйДокумент.Вывести(ОбластьОтступ);
	
	ТабличныйДокумент.НачатьГруппуСтрок();
	
	СекцияВерх = ТабличныйДокумент.ВысотаТаблицы+1;
	СекцияНиз  = ТабличныйДокумент.ВысотаТаблицы;
	
	Для Каждого СтрокаСоставляющей Из ТаблицаСоставляющихСвернутая Цикл
		ОбластьОтступ = МакетКалькуляция.ПолучитьОбласть("СтрокаСоставляющая|КолонкаОтступ");
		ПрисоединеннаяОбласть = ТабличныйДокумент.Вывести(ОбластьОтступ);
		ПрисоединеннаяОбласть.ЦветФона = СерыйЦвет;
		
		ОбластьСоставляющая = МакетКалькуляция.ПолучитьОбласть("СтрокаСоставляющая|КолонкаСоставляющая");
		ОбластьСоставляющая.Параметры.Составляющая = СтрокаСоставляющей.СоставляющаяРасчета.НаименованиеРус;
		ПрисоединеннаяОбласть = ТабличныйДокумент.Присоединить(ОбластьСоставляющая);
		
		СтруктураОформления = Новый Структура;
		СтруктураОформления.Вставить("ЦветФона",   СтрокаСоставляющей.СоставляющаяРасчета.ЦветСтрокиКалькуляции.Получить());
		СтруктураОформления.Вставить("ЦветТекста", СтрокаСоставляющей.СоставляющаяРасчета.ЦветТекстаСтрокиКалькуляции.Получить());
		СтруктураОформления.Вставить("Шрифт",      СтрокаСоставляющей.СоставляющаяРасчета.ШрифтСтрокиКалькуляции.Получить());
		
		ОформитьОбластьЯчеекПоСоставляющей(ПрисоединеннаяОбласть, СтруктураОформления);
		
		ОбластьСоставляющаяСпецификация = МакетКалькуляция.ПолучитьОбласть("СтрокаСоставляющая|КолонкаСпецификация");
		
		Для Каждого СтрокаСпецификации Из ТаблицаСпецификаций Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("РазделКалькуляции",       ТекущийРазделКалькуляции);
			ПараметрыОтбора.Вставить("СтандартнаяСпецификация", СтрокаСпецификации.СтандартнаяСпецификация);
			ПараметрыОтбора.Вставить("СоставляющаяРасчета",     СтрокаСоставляющей.СоставляющаяРасчета);
			
			НайденныеСтроки = ТаблицаСоставляющих.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ОбластьСоставляющаяСпецификация.Параметры.Значение = Окр(НайденныеСтроки[0].Значение, СтрокаСоставляющей.СоставляющаяРасчета.РазрядностьОкругления);
			Иначе
				ОбластьСоставляющаяСпецификация.Параметры.Значение = 0;
			КонецЕсли;
			
			ПрисоединеннаяОбласть = ТабличныйДокумент.Присоединить(ОбластьСоставляющаяСпецификация);
			
			ОформитьОбластьЯчеекПоСоставляющей(ПрисоединеннаяОбласть, СтруктураОформления);
			
			ДобавитьАдресЗначения(ПрисоединеннаяОбласть, ПараметрыОтбора);
		КонецЦикла;
		
		СекцияНиз = СекцияНиз + 1;
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	Если ТекстСекции <> "" Тогда
		ОбластьСекцияОтступ = ТабличныйДокумент.Область(СекцияВерх, 1, СекцияНиз, 1);
		ОбластьСекцияОтступ.Объединить();
		ОбластьСекцияОтступ.ОриентацияТекста = 90;
		ОбластьСекцияОтступ.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьСекцияОтступ.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
		ОбластьСекцияОтступ.Текст = ТекстСекции;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОформитьОбластьЯчеекПоСоставляющей(ОбластьЯчеек, Оформление)
	
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	Если  Оформление.ЦветФона <> Неопределено 
		И Оформление.ЦветФона <> ЧерныйЦвет
		Тогда
		ОбластьЯчеек.ЦветФона = Оформление.ЦветФона;
	КонецЕсли;
	
	Если  Оформление.ЦветТекста <> Неопределено Тогда
		ОбластьЯчеек.ЦветТекста = Оформление.ЦветТекста;
	КонецЕсли;
	
	Если  Оформление.Шрифт <> Неопределено Тогда
		ОбластьЯчеек.Шрифт = Оформление.Шрифт;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресЗначения(ОбластьЯчеек, СтруктураАдреса)
	
	НоваяСтрокаАдреса = КалькуляцияАдресаЗначений.Добавить();
	НоваяСтрокаАдреса.РазделКалькуляции       = СтруктураАдреса.РазделКалькуляции;
	НоваяСтрокаАдреса.СтандартнаяСпецификация = СтруктураАдреса.СтандартнаяСпецификация;
	НоваяСтрокаАдреса.СоставляющаяРасчета     = СтруктураАдреса.СоставляющаяРасчета;
	НоваяСтрокаАдреса.Адрес                   = "R"+ ОбластьЯчеек.Верх +"C"+ ОбластьЯчеек.Лево;
	НоваяСтрокаАдреса.Значение                = ОбластьЯчеек.Текст;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияСоставляющихПоАдресам()
	
	Для Каждого СтрокаНерасчетнойСоставляющей Из Объект.НерасчетныеСоставляющие Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РазделКалькуляции",       СтрокаНерасчетнойСоставляющей.РазделКалькуляции);
		ПараметрыОтбора.Вставить("СтандартнаяСпецификация", СтрокаНерасчетнойСоставляющей.СтандартнаяСпецификация);
		ПараметрыОтбора.Вставить("СоставляющаяРасчета",     СтрокаНерасчетнойСоставляющей.СоставляющаяРасчета);
		
		НайденныеСтрокиАдресов = КалькуляцияАдресаЗначений.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтрокиАдресов.Количество() > 0 Тогда
			СтрокаНерасчетнойСоставляющей.Значение = НайденныеСтрокиАдресов[0].Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКалькуляциюНаСервере()
	
	ОчиститьТаблицыКалькуляции();
	ОчиститьРазделыКалькуляции();
	
	ЗаполнитьТабличныйДокументКалькуляции();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ОчиститьТаблицыКалькуляции()
	
	Объект.НерасчетныеСоставляющие.Очистить();
	Объект.РасчетныеСоставляющие.Очистить();
	Объект.СтандартныеСпецификации.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРазделыКалькуляции()
	
	Элементы.ТекущийРазделКалькуляции.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСправочникОпцийИз1ДБ()
	
	ДопПараметры = Новый Структура;
	Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetListOfOptions(ДопПараметры);
	
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеДляВыгрузки()
	
	#Область ЗапросДанных
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_КалькуляцияПрайсЛист.Опция.Родитель.Код КАК FamilyName,
	|	Scan_КалькуляцияПрайсЛист.Опция.Код КАК Execution,
	|	Scan_КалькуляцияПрайсЛист.Опция.Наименование КАК Description,
	|	Scan_КалькуляцияПрайсЛист.ДействуетСДаты КАК _FromDate,
	|	Scan_КалькуляцияПрайсЛист.ДействуетСPartPeriod КАК FromPP,
	|	Scan_КалькуляцияПрайсЛист.ДействуетДоДаты КАК _ToDate,
	|	Scan_КалькуляцияПрайсЛист.ДействуетПоPartPeriod КАК ToPP,
	|	Scan_КалькуляцияПрайсЛист.Скидка КАК Discount,
	|	Scan_КалькуляцияПрайсЛист.ЦенаDistrNet КАК Distributor,
	|	Scan_КалькуляцияПрайсЛист.ЦенаDealerNet КАК Dealer,
	|	Scan_КалькуляцияПрайсЛист.ЦенаRetailPrice КАК Customer
	|ИЗ
	|	Документ.Scan_Калькуляция.ПрайсЛист КАК Scan_КалькуляцияПрайсЛист
	|ГДЕ
	|	Scan_КалькуляцияПрайсЛист.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	FamilyName,
	|	Execution";
	
	ДанныеДляФайла = Запрос.Выполнить().Выгрузить();
	
	#КонецОбласти
	
	#Область ПостОбработкаДанных
	
	ДанныеДляФайла.Колонки.Вставить(4, "FromDate", Новый ОписаниеТипов("Строка")); 
	ДанныеДляФайла.Колонки.Вставить(6, "ToDate", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаДанных Из ДанныеДляФайла Цикл
		СтрокаДанных.Execution = СтрЗаменить(СтрокаДанных.Execution, СтрокаДанных.FamilyName, "");
		Если ЗначениеЗаполнено(СтрокаДанных._FromDate) Тогда
			СтрокаДанных.FromDate  = Лев(Строка(СтрокаДанных._FromDate), 10);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных._ToDate) Тогда
			СтрокаДанных.ToDate    = Лев(Строка(СтрокаДанных._ToDate), 10);
		КонецЕсли;
		Если Не ПустаяСтрока(СтрокаДанных.FromPP) Тогда
			СтрокаДанных.FromPP    = "20"+ СтрокаДанных.FromPP;
		КонецЕсли;
		Если Не ПустаяСтрока(СтрокаДанных.ToPP) Тогда
			СтрокаДанных.ToPP    = "20"+ СтрокаДанных.ToPP;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляФайла.Колонки.Удалить("_FromDate"); 
	ДанныеДляФайла.Колонки.Удалить("_ToDate");
	
	#КонецОбласти
	
	#Область ТабличныйДокумент
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
	ПостроительОтчета.ВыводитьПодвалТаблицы   = Ложь;
	ПостроительОтчета.ВыводитьПодвалОтчета    = Ложь;
	ПостроительОтчета.ВыводитьОбщиеИтоги      = Ложь;
	ПостроительОтчета.Макет                   = ПолучитьОбщийМакет("Scan_ПрайсЛистETBO");
	ПостроительОтчета.МакетШапкиТаблицы       = "ШапкаТаблицы";
	ПостроительОтчета.МакетДетальныхЗаписей   = "СтрокаТаблицы";
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ДанныеДляФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПостроительОтчета.Вывести(ТабличныйДокумент);
		
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("R2"), ТабличныйДокумент.Область("R2"), ТипСмещенияТабличногоДокумента.ПоГоризонтали, Ложь);
	Для Счетчик = 1 По 11 Цикл
		ТабличныйДокумент.Область(2, Счетчик, 2, Счетчик).Текст = "";
	КонецЦикла;
	ТабличныйДокумент.Область(2, 10, 2, 10).Текст = РезультатРасчетаКоэффициентаНаДилера;
	ТабличныйДокумент.Область(2, 11, 2, 11).Текст = РезультатРасчетаКоэффициентаНаКлиента;
	
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("R2"), ТабличныйДокумент.Область("R1"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	Для Счетчик = 1 По 11 Цикл
		ТабличныйДокумент.Область(1, Счетчик, 1, Счетчик).Текст = "";		
	КонецЦикла;
	ТабличныйДокумент.Область(1, 4, 1, 4).Текст = Лев(Строка(Объект.ДействуетСДаты), 10);
	ТабличныйДокумент.Область(1, 5, 1, 5).Текст = "20"+ СтрЗаменить(Объект.ДействуетСPartPeriod, " ", "");
	
	#КонецОбласти
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//rarus agar 14.05.2020  15466 Доп1 ++
&НаСервере
Процедура ПриИзмененииДатыИлиPartPeriod()
	
	Если  ЗначениеЗаполнено(Объект.ДействуетСДаты)
		И ЗначениеЗаполнено(Объект.ДействуетСPartPeriod)
		И Не Scan_ЦенообразованиеСервер.ДатаСоответствуетPartPeriod(Объект.ДействуетСДаты, Объект.ДействуетСPartPeriod) 
		Тогда
		Сообщить(НСтр("ru = 'Указанный Part Period не соответствует дате начала действия'; en = 'The Part Period does not match the From Date'"));
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти



