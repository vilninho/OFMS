//rarus tenkam 30.11.2017 mantis 11952 ++
#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ХозОперации ++
	Scan_ВспомогательныеФункцииСервер.ИнициализироватьМенюВыбораХозОперации(ЭтаФорма);
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	// ХозОперации --
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Параметры.Свойство("МассивСтрок") Тогда
		Объект.ХозОперация = Параметры.ХозОперация;
		Для Каждого ТекСтр Из Параметры.МассивСтрок Цикл
			Если ТекСтр.Комплектующие Тогда
				НоваяСтрока = Объект.СоставЗаявки.Добавить();
				НоваяСтрока.КодНеисправнойДетали = ТекСтр.КодНеисправнойДетали;
				НоваяСтрока.Изделие = ТекСтр.Изделие;
				НоваяСтрока.КоличествоТребуемое = ТекСтр.Количество;
				НоваяСтрока.Комплектующие = ПолучитьЕдинственнуюКомплектующую(ТекСтр.КодНеисправнойДетали);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;

	УправлениеДиалогомНаСервере();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Параметры документа ++
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь() ;
		Объект.Организация = ТекущийПользователь.Организация;
		Объект.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
		Объект.Автор = ТекущийПользователь;
		Объект.Менеджер = ТекущийПользователь;
		Объект.Дата = ТекущаяДата();
		Объект.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		//rarus vikhle 22.04.2020 mt 15695 +++	
		Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекущийПользователь,Объект.Компания,Объект.Контрагент);
		//rarus vikhle 22.04.2020 mt 15695 ---
		// Параметры документа --      
		
		Объект.Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Новая;    		
	КонецЕсли;  	

	//Если ЗначениеЗаполнено(Параметры.Основание) Тогда
	//	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Scan_ЗаявкаНаКомплектующие") И
	//		Параметры.Основание.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СписаниеСЦС Тогда
	//		Сообщить("Нельзя создать заявку на комплектующие на основании документа с хозяйственной операцией: "+Параметры.Основание.ХозОперация);
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	Scan_СборСтатистики.Scan_ПриОткрытии("Документы", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьЗаголовокФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ДеревоРаспределение.ПолучитьЭлементы().Количество() <> 0 Тогда
		ПеренестиДанныеРаспределения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УправлениеДиалогомНаСервере();	
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// Параметры документа ++
	Scan_УправлениеДиалогомДокументаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	// Параметры документа --
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	// Параметры документа ++
	Scan_УправлениеДиалогомДокументаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	// Параметры документа --
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюДокумента(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
КонецПроцедуры

#КонецОбласти

// ХозОперации ++
#Область ХозОперации
// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	Scan_УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Хоз. операция" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Документы.Scan_ЗаявкаНаКомплектующие.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();	
КонецПроцедуры // ХозОперацияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)                                                                                         
	// Вызываем общий обработчик события выбора одного из пунктов меню доступных хоз. операций
	Scan_УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;                     
	
	// Обработаем событие в контексте сервера
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбновитьЗаголовокФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ХозОперацияПриИзменении()

#КонецОбласти
// ХозОперации --

// Параметры документа ++
#Область ПараметрыДокумента
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы   - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - Список возможных значений для выбора, которые будет показан.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);	
КонецПроцедуры // ПараметрыДокументаНачалоВыбора()

// Обработчик события возникающего на клиенте при открытии параметров документа.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Открываем форму расширенного редактирования параметров документа
	Scan_УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
КонецПроцедуры

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	Если НЕ Scan_УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли	
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()
#КонецОбласти
// Параметры документа --
#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.СписаниеСЦС") И
		НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = Scan_ПраваИНастройки.Scan_Право("ОсновнойСкладДляЗаказаКомплектующих");
	КонецЕсли;
	Если Объект.Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Исполнена Тогда
		Элементы.ГруппаФон.ТолькоПросмотр = Истина;
		Элементы.ВыборХозОперации.Доступность = Ложь;
		Элементы.СоставЗаявкиОткрытьФормуРаспределения.Доступность = Ложь;
	КонецЕсли;
	Элементы.ГруппаРаспределение.Видимость = Ложь;
	Если Объект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СписаниеСЦС Тогда
		Элементы.СоставЗаявкиОткрытьФормуРаспределения.Видимость = Истина;
	Иначе
		Элементы.СоставЗаявкиОткрытьФормуРаспределения.Видимость = Ложь;	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
////// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = Строка(Объект.Ссылка) + ". " + Строка(Объект.ХозОперация);
	Иначе
		Заголовок = "Заявка на комплектующие. " + Строка(Объект.ХозОперация) + " (создание)";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаИсполнена(Команда)
	ТекстПредупреждения = "";
	Если Не Объект.Проведен Тогда
		ТекстПредупреждения = "Документ не проведен! Провести документ?";
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		ТекстПредупреждения = "Данные документа были изменены! Записать документ?";	
	КонецЕсли;         	
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЦС") Тогда
		Сообщить("Нельзя создать поступление комлектующих на основании документа с ХО ""Заказ на ЦС""!");
		Возврат;
	КонецЕсли;
	
	//12.02.2018 +++
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.Scan_СтатусыЗаявокНаКомплектующие.Исполнена") Тогда
		Сообщить("Заявка уже исполнена!");
		Возврат;
	КонецЕсли;
	//12.02.2018 ---
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ДопПараметры = Новый Структура("ИсполненаПолностью", Истина);
		Оповещение = Новый ОписаниеОповещения("ВводНакладнойПредупреждениеЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстПредупреждения, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК, "Ввод данных накладной");
	Иначе       
		ПараметрыОткрытия = Новый Структура("ДокументОснование", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ИсполненаПолностью", Истина);
		Оповещение = Новый ОписаниеОповещения("ВводНакладнойСоздание", ЭтотОбъект);
		ОткрытьФорму("Документ.Scan_ЗаявкаНаКомплектующие.Форма.ФормаВводНакладной",ПараметрыОткрытия,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаявкаИсполненаНеПолностью(Команда)
	ТекстПредупреждения = "";
	Если Не Объект.Проведен Тогда
		ТекстПредупреждения = "Документ не проведен! Провести документ?";
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		ТекстПредупреждения = "Данные документа были изменены! Записать документ?";	
	КонецЕсли;
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ЗаказНаЦС") Тогда
		Сообщить("Нельзя создать поступление комлектующих на основании документа с ХО ""Заказ на ЦС""!");
		Возврат;
	КонецЕсли;  
	
	//12.02.2018 +++
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.Scan_СтатусыЗаявокНаКомплектующие.Исполнена") Тогда
		Сообщить("Заявка уже исполнена!");
		Возврат;
	КонецЕсли;
	//12.02.2018 ---  
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ДопПараметры = Новый Структура("ИсполненаПолностью", Ложь);
		Оповещение = Новый ОписаниеОповещения("ВводНакладнойПредупреждениеЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстПредупреждения, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК, "Ввод данных накладной");
	Иначе       
		ПараметрыОткрытия = Новый Структура("ДокументОснование", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ИсполненаПолностью", Ложь);
		Оповещение = Новый ОписаниеОповещения("ВводНакладнойСоздание", ЭтотОбъект);
		ОткрытьФорму("Документ.Scan_ЗаявкаНаКомплектующие.Форма.ФормаВводНакладной",ПараметрыОткрытия,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 

КонецПроцедуры   

&НаКлиенте
Процедура ВводНакладнойПредупреждениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение);
		ЭтотОбъект.Записать(ПараметрыЗаписи);
		Если Объект.Проведен Тогда
			ПараметрыОткрытия = Новый Структура("ДокументОснование", Объект.Ссылка);
			ПараметрыОткрытия.Вставить("ИсполненаПолностью", ДополнительныеПараметры.ИсполненаПолностью);
			Оповещение = Новый ОписаниеОповещения("ВводНакладнойСоздание", ЭтотОбъект);
			ОткрытьФорму("Документ.Scan_ЗаявкаНаКомплектующие.Форма.ФормаВводНакладной",ПараметрыОткрытия,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ВводНакладнойСоздание(ВозвращаемыеЗначения, ДополнительныеПараметры) Экспорт
	Если ВозвращаемыеЗначения <> Неопределено Тогда
		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
		//Сообщить("Создан и проведен документ " + ВозвращаемыеЗначения);
		Сообщить(НСтр("ru = 'Создан и проведен документ '; en = 'Document saved '") + ВозвращаемыеЗначения);
		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
	КонецЕсли;
КонецПроцедуры   

&НаСервереБезКонтекста
Функция ПолучитьЕдинственнуюКомплектующую(ТекКодНеисправнойДетали)
	Возврат Справочники.Scan_КодыНеисправныхДеталей.ПолучитьЕдинственнуюКомплектующую(ТекКодНеисправнойДетали);
КонецФункции

&НаКлиенте
Процедура СоставЗаявкиКодНеисправнойДеталиПриИзменении(Элемент)
	ТекКодНеисправнойДетали = Элементы.СоставЗаявки.ТекущиеДанные.КодНеисправнойДетали;
	Если ЗначениеЗаполнено(ТекКодНеисправнойДетали) Тогда
		Комплектующие =	ПолучитьЕдинственнуюКомплектующую(ТекКодНеисправнойДетали);
		Если ЗначениеЗаполнено(Комплектующие) Тогда
			Элементы.СоставЗаявки.ТекущиеДанные.Комплектующие = Комплектующие;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасхождение()

	Для Каждого ТекСтрока Из Объект.СоставЗаявки Цикл
		ТекСтрока.КоличествоРасхождение = ТекСтрока.Количество - ТекСтрока.КоличествоПоступления;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СоставЗаявкиКоличествоПриИзменении(Элемент)
	ОбновитьРасхождение();
КонецПроцедуры

//////////////////// РАСПРЕДЕЛЕНИЕ ///////////////////////

&НаКлиенте
Процедура ОткрытьФормуРаспределения(Команда)
	Элементы.ГруппаРаспределение.Видимость = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаспределение;
	ЗаполнитьДеревоРаспределения();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаСоставЗаявки И Элементы.ГруппаРаспределение.Видимость Тогда
		Элементы.ГруппаРаспределение.Видимость = Ложь;
		ПеренестиДанныеРаспределения();
		ДеревоРаспределение.ПолучитьЭлементы().Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеНаЦСНаСервере()

	ЭлементыДерева = ДеревоРаспределение.ПолучитьЭлементы();
	МассивКаталожныхНомеров = Новый Массив;
	Для Каждого ТекВерхняяСтрока Из ЭлементыДерева Цикл
		// Отправить Запрос в 1БД
	    ИмяМетода = "StoreInfo";
		СообщениеОбОшибке = "";
		Отказ = Ложь;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
		СтруктураПараметров.Вставить("pCatNumber", ТекВерхняяСтрока.НомерПоКаталогу);
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		Если НЕ Отказ Тогда	
			ТекСтруктура = Новый Структура("Комплектующие", ТекВерхняяСтрока.Комплектующие);
			ОбщееКоличество = Scan_ВебСервисыРазборОтветов.РазборОтветаНаличиеНаСкладе(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода, ТекСтруктура);
		КонецЕсли;

		//Заполним из регистра
		Если ЗначениеЗаполнено(ТекВерхняяСтрока.НомерПоКаталогу) И ЗначениеЗаполнено(ТекВерхняяСтрока.Комплектующие) Тогда
			ТекВерхняяСтрока.КоличествоНаЦС = РегистрыСведений.Scan_НаличиеКомплектующихНаСкладе.ПолучитьКоличество(ТекВерхняяСтрока.Комплектующие);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеНаЦС(Команда)
	ПроверитьНаличиеНаЦСНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)
	ЭлементыДерева = ДеревоРаспределение.ПолучитьЭлементы();
	Для Каждого ТекВерхСтрока Из ЭлементыДерева Цикл
		ОставшеесяКоличество = ТекВерхСтрока.КоличествоНаЦС;
		ЭлементыИзделия = ТекВерхСтрока.ПолучитьЭлементы(); 
		Для Каждого ТекСтрока Из ЭлементыИзделия Цикл  
			Если ЗначениеЗаполнено(ОставшеесяКоличество) И ОставшеесяКоличество >= ТекСтрока.КоличествоТребуемое Тогда
				ТекСтрока.КоличествоРаспределено = ТекСтрока.КоличествоТребуемое;
				ОставшеесяКоличество = ОставшеесяКоличество - ТекСтрока.КоличествоТребуемое;
			Иначе
				ТекСтрока.КоличествоРаспределено = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	РассчитатьОбщееКоличествоТребуемое();
	РассчитатьОбщееКоличествоРаспределено();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределениеКоличествоРаспределеноПриИзменении(Элемент)
	РассчитатьОбщееКоличествоРаспределено();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределениеКоличествоРаспределеноОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекСтрока = Элементы.ДеревоРаспределение.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка 
			ТекЗначение = Число(Текст);
		Исключение
			ТекЗначение = 0;
		КонецПопытки;
		
		Если ТекЗначение > ТекСтрока.КоличествоТребуемое Тогда
			СтандартнаяОбработка = Ложь;
			Элементы.ДеревоРаспределение.ТекущиеДанные.КоличествоРаспределено = ТекСтрока.КоличествоТребуемое;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбщееКоличествоРаспределено()
	ЭлементыДерева = ДеревоРаспределение.ПолучитьЭлементы();
	Для Каждого ТекВерхСтрока Из ЭлементыДерева Цикл
		ТекВерхСтрока.КоличествоРаспределено = 0;
		ЭлементыИзделия = ТекВерхСтрока.ПолучитьЭлементы(); 
		Для Каждого ТекСтрока Из ЭлементыИзделия Цикл  
			Если ЗначениеЗаполнено(ТекСтрока.КоличествоРаспределено) Тогда
				ТекВерхСтрока.КоличествоРаспределено = ТекВерхСтрока.КоличествоРаспределено + ТекСтрока.КоличествоРаспределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбщееКоличествоТребуемое()
	ЭлементыДерева = ДеревоРаспределение.ПолучитьЭлементы();
	Для Каждого ТекВерхСтрока Из ЭлементыДерева Цикл
		ТекВерхСтрока.КоличествоТребуемое = 0;
		ЭлементыИзделия = ТекВерхСтрока.ПолучитьЭлементы(); 
		Для Каждого ТекСтрока Из ЭлементыИзделия Цикл  
			Если ЗначениеЗаполнено(ТекСтрока.КоличествоТребуемое) Тогда
				ТекВерхСтрока.КоличествоТребуемое = ТекВерхСтрока.КоличествоТребуемое + ТекСтрока.КоличествоТребуемое;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРаспределения()
	ТаблицаСостав = Объект.СоставЗаявки.Выгрузить();
	ТаблицаСостав.Колонки.Добавить("НомерПоКаталогу");
	Для Каждого ТекСтрока Из ТаблицаСостав Цикл
		ТекСтрока.НомерПоКаталогу = ТекСтрока.Комплектующие.НомерПоКаталогу;
	КонецЦикла;
	ТаблицаСостав.Сортировать("НомерПоКаталогу,Изделие");
	
	ДеревоРаспределение.ПолучитьЭлементы().Очистить();
	ТекДерево = РеквизитФормыВЗначение("ДеревоРаспределение");
	
	ПерваяСтрока = Неопределено;
	ПорядковыйНомерИзделия = 1;
	Для Каждого ТекСтрока Из ТаблицаСостав Цикл
		
		Если НЕ ЗначениеЗаполнено(ПерваяСтрока) ИЛИ ПерваяСтрока.НомерПоКаталогу <> ТекСтрока.НомерПоКаталогу Тогда			
			
			ПерваяСтрока = ТекДерево.Строки.Добавить();			
			ЗаполнитьЗначенияСвойств(ПерваяСтрока, ТекСтрока);
			ПерваяСтрока.Изделие = Неопределено;
			ПерваяСтрока.КоличествоТребуемое = 0;
			ПерваяСтрока.НомерСтроки = 99;
			ПерваяСтрока.Отображение = ТекСтрока.НомерПоКаталогу + " / " + ТекСтрока.Комплектующие + " / " + ТекСтрока.КодНеисправнойДетали;
			ПерваяСтрока.ПорядковыйНомерИзделия = 0;
			ПорядковыйНомерИзделия = 1;
			
		КонецЕсли;
		
		НоваяСтрока = ПерваяСтрока.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
		НоваяСтрока.Отображение = "";
		НоваяСтрока.ПорядковыйНомерИзделия = ПорядковыйНомерИзделия;
		ПорядковыйНомерИзделия = ПорядковыйНомерИзделия + 1;
		
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТекДерево, "ДеревоРаспределение");
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеРаспределения()	
	ЭлементыДерева = ДеревоРаспределение.ПолучитьЭлементы();
	Для Каждого ТекВерхСтрока Из ЭлементыДерева Цикл
		ЭлементыИзделия = ТекВерхСтрока.ПолучитьЭлементы(); 
		Для Каждого ТекСтрока Из ЭлементыИзделия Цикл  
			НайденныеСтроки = Объект.СоставЗаявки.НайтиСтроки(Новый Структура("НомерСтроки",ТекСтрока.НомерСтроки));
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденныеСтроки[0].Количество = ТекСтрока.КоличествоРаспределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры



//rarus tenkam 30.11.2017 mantis 11952 ---

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


#КонецОбласти
