//rarus tenkam 18.11.2017 9427 11952 +++

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() Тогда
		ДатаСоздания = ТекущаяДата();
		Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	ЭтотОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтотОбъект.ЭтоНовый());
	                 	
	ОбновитьРасхождение();
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда	
		УстановитьСтатус();  
		Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.СписаниеСЦС Тогда
			УстановитьПризнакиУстранено();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если НЕ Отказ И Проведен И Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Исполнена И
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СписаниеСЦС И ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Если ДокументОснование.Статус <> Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Исполнена Тогда
			ДокОснОбъект = ДокументОснование.ПолучитьОбъект();
			ДокОснОбъект.Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Исполнена;
			Попытка
				ДокОснОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// rarus tenkam 25.04.2018 mantis 11952 +++ bug
	Если НЕ Отказ И ЗначениеЗаполнено(ДокументОснование) Тогда
		ОбновитьКоличествоВЗаявке();		
	КонецЕсли;
	// rarus tenkam 25.04.2018 mantis 11952 ---
КонецПроцедуры




Процедура ОбработкаПроведения(Отказ, Режим)

	Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.СписаниеСЦС Тогда
		
		// регистр Scan_ДвиженияКомплектующих Приход
		Движения.Scan_ДвиженияКомплектующих.Записывать = Истина;
		Для Каждого ТекСтрокаСоставЗаявки Из СоставЗаявки Цикл
			Движение = Движения.Scan_ДвиженияКомплектующих.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Склад = Склад;
			Движение.Изделие = ТекСтрокаСоставЗаявки.Изделие;
			Движение.Комплектующие = ТекСтрокаСоставЗаявки.Комплектующие;
			Движение.ЗаявкаНаКомплектующие = Ссылка;
			Движение.Количество = ТекСтрокаСоставЗаявки.Количество;
			Движение.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Для Индекс = 0 по СоставЗаявки.Количество()-1 Цикл
		СтрокаТЧ = СоставЗаявки.Получить(Индекс);
		Если Не (СтрокаТЧ.КодНеисправнойДетали.Комплектующие) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "В строке " + Индекс + " указан код неисправной детали, у которого не установлен флаг Комплектующие";
			Сообщение.Поле = "СоставЗаявки[" + Индекс + "].КодНеисправнойДетали";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
		Если СтрокаТЧ.Количество = 0 Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "В строке " + Индекс + " не указано количество";
			Сообщение.Поле = "СоставЗаявки[" + Индекс + "].Количество";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;	
		КонецЕсли; 		
	КонецЦикла;     	
КонецПроцедуры      

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Scan_ЗаявкаНаКомплектующие") Тогда
		// Заполнение шапки
		ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();  
		Автор = ТекПользователь;  
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		ДатаСоздания = ТекущаяДатаСеанса();
		Комментарий = "Документ создан на основании " +  ДанныеЗаполнения;
		Менеджер = ТекПользователь; 
		Организация = ТекПользователь.Организация;
		ПодразделениеКомпании = ТекПользователь.Подразделение;
		ШтрихКод = ДанныеЗаполнения.ШтрихКод; 
		Склад = ДанныеЗаполнения.Склад; 		
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Новая;
		
		Если ДанныеЗаполнения.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СписаниеСЦС Тогда
			ХозОперация = Справочники.Scan_ХозяйственныеОперации.ЗаказНаЦС;
			Для Каждого ТекСтрокаСоставЗаявки Из ДанныеЗаполнения.СоставЗаявки Цикл
				Если ТекСтрокаСоставЗаявки.Количество = 0 Тогда
					НоваяСтрока = СоставЗаявки.Добавить();
					НоваяСтрока.Изделие = ТекСтрокаСоставЗаявки.Изделие;
					НоваяСтрока.КодНеисправнойДетали = ТекСтрокаСоставЗаявки.КодНеисправнойДетали;
					НоваяСтрока.Количество = ТекСтрокаСоставЗаявки.Количество;
					НоваяСтрока.КоличествоТребуемое = ТекСтрокаСоставЗаявки.КоличествоТребуемое; 
					НоваяСтрока.КоличествоПоступления = ТекСтрокаСоставЗаявки.КоличествоПоступления;
					НоваяСтрока.КоличествоРасхождение = ТекСтрокаСоставЗаявки.КоличествоРасхождение;
					НоваяСтрока.Комплектующие = ТекСтрокаСоставЗаявки.Комплектующие;
				КонецЕсли;
			КонецЦикла;	
		ИначеЕсли ДанныеЗаполнения.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ЗаказНаЦС Тогда 
			
			ХозОперация = Справочники.Scan_ХозяйственныеОперации.СписаниеСЦС;
			Для Каждого ТекСтрокаСоставЗаявки Из ДанныеЗаполнения.СоставЗаявки Цикл
				НоваяСтрока = СоставЗаявки.Добавить();
				НоваяСтрока.Изделие = ТекСтрокаСоставЗаявки.Изделие;
				НоваяСтрока.КодНеисправнойДетали = ТекСтрокаСоставЗаявки.КодНеисправнойДетали;
				НоваяСтрока.Количество = ТекСтрокаСоставЗаявки.Количество;
				НоваяСтрока.КоличествоТребуемое = ТекСтрокаСоставЗаявки.КоличествоТребуемое;
				НоваяСтрока.КоличествоПоступления = ТекСтрокаСоставЗаявки.КоличествоПоступления;
				НоваяСтрока.КоличествоРасхождение = ТекСтрокаСоставЗаявки.КоличествоРасхождение;
				НоваяСтрока.Комплектующие = ТекСтрокаСоставЗаявки.Комплектующие;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьРасхождение()

	Для Каждого ТекСтрока Из СоставЗаявки Цикл
		ТекСтрока.КоличествоРасхождение = ТекСтрока.Количество - ТекСтрока.КоличествоПоступления;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьСтатус()
	//Если Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Исполнена Тогда
	//	Возврат;
	//КонецЕсли;

	Если Не ЗначениеЗаполнено(Статус) Тогда   	
		Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Новая;	
	КонецЕсли;
	
	Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.СписаниеСЦС Тогда
		СтруктураКоличества = ПолучитьКоличества();
		
		Если СтруктураКоличества.Количество <> 0 И СтруктураКоличества.Количество = СтруктураКоличества.КоличествоПоступления 
			И СтруктураКоличества.КоличествоРасхождение = 0 Тогда
			
			Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Исполнена;
		ИначеЕсли СтруктураКоличества.Количество <> 0 И СтруктураКоличества.КоличествоПоступления = 0 Тогда
			Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Новая;
		Иначе
			Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.ЧастичноИсполнена;
		КонецЕсли;
		
	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ЗаказНаЦС Тогда
		
		СписаниеДок = Документы.Scan_ЗаявкаНаКомплектующие.ПолучитьСписаниеПоЗаказу(Ссылка);
		Если СписаниеДок.Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Исполнена Тогда
			Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Исполнена;
		Иначе
			Статус = Перечисления.Scan_СтатусыЗаявокНаКомплектующие.Новая;
		КонецЕсли;
	КонецЕсли;   	
КонецПроцедуры

Функция ПолучитьКоличества()
	ТекКоличество = 0;
	ТекКоличествоПоступления = 0;
	ТекКоличествоРасхождение = 0;

	Для Каждого ТекСтрока Из СоставЗаявки Цикл 
		ТекКоличество = ТекКоличество + ТекСтрока.Количество;
		ТекКоличествоПоступления = ТекКоличествоПоступления + ТекСтрока.КоличествоПоступления;
		ТекКоличествоРасхождение = ТекКоличествоРасхождение + ТекСтрока.КоличествоРасхождение;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура("Количество", ТекКоличество);
	СтруктураВозврата.Вставить("КоличествоПоступления",ТекКоличествоПоступления);
	СтруктураВозврата.Вставить("КоличествоРасхождение",ТекКоличествоРасхождение);
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура УстановитьПризнакиУстранено()
	Для Каждого ТекСтрока Из СоставЗаявки Цикл
		Если ТекСтрока.КоличествоРасхождение = 0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.Период КАК Период,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.Изделие КАК Изделие,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.Замечание КАК Замечание,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.КодНеисправнойДетали КАК КодНеисправнойДетали,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.КодДефекта КАК КодДефекта,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.МестоОбнаружения КАК МестоОбнаружения,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.Контрагент КАК Контрагент,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.Устранено КАК Устранено,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.Количество КАК Количество,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.ДатаУстранения КАК ДатаУстранения,
			|	Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних.ПорядковыйНомер КАК ПорядковыйНомер
			|ИЗ
			|	РегистрСведений.Scan_ЗамечанияПоАктамПриемоПередачи.СрезПоследних(
			|			,
			|			Изделие = &Изделие
			|				И КодНеисправнойДетали = &КодНеисправнойДетали
			|				И Устранено = ЛОЖЬ) КАК Scan_ЗамечанияПоАктамПриемоПередачиСрезПоследних";
			
			Запрос.УстановитьПараметр("Изделие", ТекСтрока.Изделие);
			Запрос.УстановитьПараметр("КодНеисправнойДетали", ТекСтрока.КодНеисправнойДетали);
			//Запрос.УстановитьПараметр("Склад", Склад);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
				НаборЗаписей = РегистрыСведений.Scan_ЗамечанияПоАктамПриемоПередачи.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
				НаборЗаписей.Отбор.Изделие.Установить(ВыборкаДетальныеЗаписи.Изделие);
				НаборЗаписей.Отбор.Замечание.Установить(ВыборкаДетальныеЗаписи.Замечание);
				НаборЗаписей.Отбор.КодНеисправнойДетали.Установить(ВыборкаДетальныеЗаписи.КодНеисправнойДетали);
				НаборЗаписей.Отбор.КодДефекта.Установить(ВыборкаДетальныеЗаписи.КодДефекта);
				НаборЗаписей.Отбор.МестоОбнаружения.Установить(ВыборкаДетальныеЗаписи.МестоОбнаружения);
				НаборЗаписей.Отбор.Контрагент.Установить(ВыборкаДетальныеЗаписи.Контрагент);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПерваяЗапись = НаборЗаписей[0]; 				
				ПерваяЗапись.Период = ВыборкаДетальныеЗаписи.Период;
				ПерваяЗапись.Изделие = ВыборкаДетальныеЗаписи.Изделие;
				ПерваяЗапись.Замечание = ВыборкаДетальныеЗаписи.Замечание; 					
				ПерваяЗапись.ПорядковыйНомер = ВыборкаДетальныеЗаписи.ПорядковыйНомер;
				ПерваяЗапись.МестоОбнаружения = ВыборкаДетальныеЗаписи.МестоОбнаружения;
				ПерваяЗапись.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
				ПерваяЗапись.КодНеисправнойДетали = ВыборкаДетальныеЗаписи.КодНеисправнойДетали;
				ПерваяЗапись.КодДефекта = ВыборкаДетальныеЗаписи.КодДефекта;
				ПерваяЗапись.Количество = ВыборкаДетальныеЗаписи.Количество;
				
				ПерваяЗапись.Устранено = Истина;
				ПерваяЗапись.ДатаУстранения = Дата;
				ПерваяЗапись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
				
				НаборЗаписей.Записать();  				
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;   	
КонецПроцедуры
//rarus tenkam 18.11.2017 9427 11952 ---

// rarus tenkam 25.04.2018 mantis 11952 +++ bug
Процедура ОбновитьКоличествоВЗаявке()
	
	ДокОбъект = ДокументОснование.ПолучитьОбъект();
	НужноПерезаписать = Ложь;
	Для Каждого ТекСтрока Из СоставЗаявки Цикл
		
		ПараметрыОтбора = Новый Структура("Комплектующие", ТекСтрока.Комплектующие);
		ПараметрыОтбора.Вставить("Изделие", ТекСтрока.Изделие);
		НайденныеСтроки = ДокОбъект.СоставЗаявки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			СтрокаЗаявки = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		КоличествоВЗаявкеОсновании = СтрокаЗаявки.КоличествоПоступления;
		Если КоличествоВЗаявкеОсновании <> ТекСтрока.КоличествоПоступления Тогда
			НужноПерезаписать = Истина;
			СтрокаЗаявки.КоличествоПоступления = ТекСтрока.КоличествоПоступления;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноПерезаписать Тогда
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЕсли; 	
КонецПроцедуры
// rarus tenkam 25.04.2018 mantis 11952 ---