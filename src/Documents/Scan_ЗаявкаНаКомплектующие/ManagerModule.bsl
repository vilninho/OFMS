//rarus tenkam 18.11.2017 mantis 9427 +++
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ИЗМЕНЕНИЯ ДАННЫХ ОБЪЕКТА
//rarus tenkam 01.12.2017 mantis 11952 +++

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.СоставЗаявки.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ИЗМЕНЕНИЯ ДАННЫХ РЕКВИЗИТОВ ШАПКИ

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//// Счет на оплату
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Не Пользователи.РолиДоступны("_ДемоПечатьНепроведенныхДокументов");
	
	//// Демо-пример ограничения доступности команд печати.
	//Если Пользователи.РолиДоступны("_ДемоПечатьСчетаНаОплатуНаПринтер") Тогда
	//	// Счет на оплату (на принтер).
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "СчетЗаказ";
	//	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (на принтер)'");
	//	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	//	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//	КомандаПечати.СразуНаПринтер = Истина;
	//КонецЕсли;
	//
	//// Комплект документов
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
	//КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ФиксированныйКомплект = Истина;
	//КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	//КомандаПечати.Порядок = 75;
	//
	//// Комплект документов (на принтер).
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
	//КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ФиксированныйКомплект = Истина;
	//КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	//КомандаПечати.СразуНаПринтер = Истина;
	//КомандаПечати.Порядок = 75;
	//
	//// Настраиваемый комплект документов.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
	//КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	//КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	//КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	//КомандаПечати.Порядок = 75;
	//
	//// Счет на оплату в документ Adobe PDF.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетЗаказ";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в документ Adobe PDF'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.PDF;
	//
	//// Счет на оплату в Microsoft Word.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетНаОплату(MSWord)";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в Microsoft Word'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord2007;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	//КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	//
	//// Счет на оплату в OpenOffice.org Writer.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетНаОплату(ODT)";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в OpenOffice.org Writer'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	//КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	
	//// Квитанция на оплату с QR кодом.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ПФ_MXL_Тест";
	//КомандаПечати.Представление = НСтр("ru = 'Заявка на действие (тест)'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	//КомандаПечати.Порядок = 85;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	//rarus sergei 29.09.2016 mantis 7162 ++	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СервисныеОперацииПриКТС") Тогда
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	//	"ПФ_MXL_СервисныеОперацииПриКТС",
	//	"Сервисные операции при КТС",
	//	ПечатьПФ_MXL_СервисныеОперацииПриКТС(МассивОбъектов, ОбъектыПечати,, ПараметрыПечати));
	//КонецЕсли;          	
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	//ДанныеПоВсемОбъектам = Новый Соответствие;
	//
	//Для Каждого ОбъектСсылка Из МассивДокументов Цикл
	//	ДанныеОбъектаПоМакетам = Новый Соответствие;
	//	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
	//		ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка));
	//	КонецЦикла;
	//	ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	//КонецЦикла;
	//
	//ОписаниеОбластей = Новый Соответствие;
	//ДвоичныеДанныеМакетов = Новый Соответствие;
	//ТипыМакетов = Новый Соответствие;
	//
	//Для Каждого ИмяМакета Из МассивИменМакетов Цикл
	//	Если ИмяМакета = "СчетНаОплату(MSWord)" Тогда
	//		ДвоичныеДанныеМакетов.Вставить(ИмяМакета, 
	//			УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплату"));
	//		ТипыМакетов.Вставить(ИмяМакета, "DOC");
	//	ИначеЕсли ИмяМакета = "СчетНаОплату(ODT)" Тогда
	//		ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет._ДемоПФ_ODT_СчетНаОплату"));
	//		ТипыМакетов.Вставить(ИмяМакета, "ODT");
	//	КонецЕсли;
	//	ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	//КонецЦикла;
	//
	//Возврат Новый Структура("Данные, Макеты",
	//	ДанныеПоВсемОбъектам,
	//	Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
	//		ОписаниеОбластей,
	//		ТипыМакетов,
	//		ДвоичныеДанныеМакетов));
	
КонецФункции

#КонецОбласти
#КонецЕсли

Функция ПолучитьПоступлениеКомплектующих(ЗаявкаНаКомплектующиеСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ПоступлениеКомплектующих.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Scan_ПоступлениеКомплектующих КАК Scan_ПоступлениеКомплектующих
		|ГДЕ
		|	Scan_ПоступлениеКомплектующих.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ПоступлениеКомплектующих.ДокументОснование = &ЗаявкаНаКомплектующиеСсылка";
	
	Запрос.УстановитьПараметр("ЗаявкаНаКомплектующиеСсылка", ЗаявкаНаКомплектующиеСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Документы.Scan_ЗаявкаНаКомплектующие.ПустаяСсылка();
КонецФункции

Функция ПолучитьСписаниеПоЗаказу(ЗаявкаНаКомплектующиеСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаявкаНаКомплектующие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Scan_ЗаявкаНаКомплектующие КАК Scan_ЗаявкаНаКомплектующие
		|ГДЕ
		|	Scan_ЗаявкаНаКомплектующие.ДокументОснование = &ЗаявкаНаКомплектующиеСсылка
		|	И Scan_ЗаявкаНаКомплектующие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаКомплектующие.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ЗаявкаНаКомплектующиеСсылка", ЗаявкаНаКомплектующиеСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Документы.Scan_ЗаявкаНаКомплектующие.ПустаяСсылка();
КонецФункции



//rarus tenkam 01.12.2017 mantis 11952 ---
