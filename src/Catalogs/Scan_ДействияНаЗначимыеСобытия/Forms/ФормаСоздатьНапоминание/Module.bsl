// Модуль формы элемента справочника "Действия на значимые события"


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует даиалог для настройки расписания.
//
&НаКлиенте
Процедура ОткрытьДиалогНастройкиРасписания()
	
	Если Расписание = Неопределено Тогда 
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораДней = 1;
	КонецЕсли;
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДиалогНастройкиРасписанияЗавершение", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры //ОткрытьДиалогНастройкиРасписания()

// Продолжает даиалог для настройки расписания.
//
&НаКлиенте
Процедура ОткрытьДиалогНастройкиРасписанияЗавершение(ВыбранноеРасписание, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеРасписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Расписание = ВыбранноеРасписание;
	Если Не РасписаниеСоответствуетТребованиям(Расписание) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Периодичность в течение дня не поддерживается, соответствующие настройки очищены.'"));
	КонецЕсли;
	НормализоватьРасписание(Расписание);
	ОпределитьВыбранныйВариантПериодичности();
	
КонецПроцедуры //ОткрытьДиалогНастройкиРасписанияЗавершение()

// Производит настройку выбранного расписания.
//
&НаКлиенте
Функция РасписаниеСоответствуетТребованиям(ПроверяемоеРасписание)
	
	Если ПроверяемоеРасписание.ПериодПовтораВТечениеДня > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого РасписаниеДня Из ПроверяемоеРасписание.ДетальныеРасписанияДня Цикл
		Если РасписаниеДня.ПериодПовтораВТечениеДня > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции //РасписаниеСоответствуетТребованиям()

// Производит настройку выбранного согласно выбранного варианта периодичности.
//
&НаСервере
Процедура ОпределитьВыбранныйВариантПериодичности()
	
	СтандартныеРасписания = НапоминанияПользователяСлужебный.ПолучитьСтандартныеРасписанияДляНапоминания();
	
	Если Расписание = Неопределено Тогда
		ВариантПериодичности = Элементы.ВариантПериодичности.СписокВыбора.Получить(0).Значение;
		Расписание = СтандартныеРасписания[ВариантПериодичности];
	Иначе
		ВариантПериодичности = ПолучитьКлючПоЗначениюВСоответствии(СтандартныеРасписания, Расписание);
	КонецЕсли;
	
	Элементы.ВариантПериодичности.КнопкаОткрытия = ПустаяСтрока(ВариантПериодичности);
	Элементы.ВариантПериодичности.Подсказка = Расписание;
	
КонецПроцедуры //ОпределитьВыбранныйВариантПериодичности()

// Формирует стандартные варианты расписания.
//
&НаСервере
Процедура ПолучитьСтандартныеРасписания(СтандартныеРасписания)
	
	СтандартныеРасписания = НапоминанияПользователяСлужебный.ПолучитьСтандартныеРасписанияДляНапоминания();
	
КонецПроцедуры //ПолучитьСтандартныеРасписания()

// Производит получение ключа по переданному значению.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючПоЗначениюВСоответствии(Соответствие, Значение)
	
	Результат = Неопределено;
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если ТипЗнч(Значение) = Тип("РасписаниеРегламентногоЗадания") Тогда
			Если ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(КлючИЗначение.Значение, Значение) Тогда
		    	Возврат КлючИЗначение.Ключ;
			КонецЕсли;
		Иначе
			Если КлючИЗначение.Значение = Значение Тогда
				Возврат КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции //ПолучитьКлючПоЗначениюВСоответствии()

// Содержит возможные варианты для выбора способоа оповещения.
//
&НаСервере
Функция ПолучитьПредопределенныеСпособыОповещения()
	
	Результат = Новый Соответствие;
	Результат.Вставить(НСтр("ru = '<в указанное время>'"), ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя"));
	Результат.Вставить(НСтр("ru = '<произвольное выражение>'"), ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	Если СсылочныйТипИсточника Тогда
		Результат.Вставить(НСтр("ru = '<реквизит источника>'"), ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника"));
	КонецЕсли;
	Результат.Вставить(НСтр("ru = '<периодически>'"), ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически"));
	Возврат Результат;
	
КонецФункции //ПолучитьПредопределенныеСпособыОповещения()

// Производит настройку выбранного расписания.
//
&НаКлиенте
Процедура НормализоватьРасписание(НормализуемоеРасписание);
	
	НормализуемоеРасписание.ВремяКонца = '000101010000';
	НормализуемоеРасписание.ВремяЗавершения =  НормализуемоеРасписание.ВремяКонца;
	НормализуемоеРасписание.ПериодПовтораВТечениеДня = 0;
	НормализуемоеРасписание.ПаузаПовтора = 0;
	НормализуемоеРасписание.ИнтервалЗавершения = 0;
	Для Каждого РасписаниеДня Из НормализуемоеРасписание.ДетальныеРасписанияДня Цикл
		РасписаниеДня.ВремяКонца = '000101010000';
		РасписаниеДня.ВремяЗавершения =  РасписаниеДня.ВремяКонца;
		РасписаниеДня.ПериодПовтораВТечениеДня = 0;
		РасписаниеДня.ПаузаПовтора = 0;
		РасписаниеДня.ИнтервалЗавершения = 0;
	КонецЦикла;
	
КонецПроцедуры //НормализоватьРасписание()

// Производит настройку возможных способов установки времени напоминания.
//
&НаКлиенте
Процедура ЗаполнитьСпособыОповещения()
	
	СпособыОповещения = Элементы.СпособУстановкиВремениНапоминания.СписокВыбора;
	СпособыОповещения.Очистить();
	Для Каждого Способ Из ПолучитьПредопределенныеСпособыОповещения() Цикл
		СпособыОповещения.Добавить(Способ.Ключ);
	КонецЦикла;	
	
	//rarus bonmak 12.12.2019 15505 ++	
	//ИнтервалыВремени = НапоминанияПользователяКлиентСервер.ПолучитьСтандартныеИнтервалыОповещения();
	//Для Каждого Интервал Из ИнтервалыВремени Цикл
	//	СпособыОповещения.Добавить(НСтр("ru = 'через'") + " " + Интервал);
	//КонецЦикла;
	
	ИнтервалыВремени = НастройкиПодсистемы.СтандартныеИнтервалы;
	Для Каждого Интервал Из ИнтервалыВремени Цикл
		СпособыОповещения.Добавить(НСтр("ru = 'через'") + " " + Интервал);
		//Элементы.ИнтервалВремениОтносительноИсточника.СписокВыбора.Добавить(Интервал);
	КонецЦикла;
	//rarus bonmak 12.12.2019 15505 --
	
КонецПроцедуры //ЗаполнитьСпособыОповещения()

// Производит настройку списка выбора для реквизита "Время".
//
&НаКлиенте
Процедура ЗаполнитьСписокВремени()
	
	Элементы.Время.СписокВыбора.Очистить();
	Для Час = 0 по 23 Цикл 
		Для Период = 0 По 1 Цикл
			Время = Час*60*60 + Период*30*60;
			Элементы.Время.СписокВыбора.Добавить(НачалоДня(Объект.ВремяСобытия) + Время, "" + Час + ":" + Формат(Период*30,"ЧЦ=2; ЧН=00"));		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСписокВремени()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСформироватьНаименование(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияСформироватьНаименование()


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	//УправлениеДиалогомСправочникаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	//УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ПредопределенныеСпособыОповещения = ПолучитьПредопределенныеСпособыОповещения();
	ВыбранныйСпособ = ПредопределенныеСпособыОповещения.Получить(СпособУстановкиВремениНапоминания);
	
	Если ВыбранныйСпособ <> Неопределено Тогда
		Если ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.ДатаВремя;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.НастройкаПериодичности;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.ПроизвольныйКод;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.ПоРеквизитуОбъекта;
		КонецЕсли;
	Иначе
		Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.БезДетализации;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СодержаниеПроизвольныйКод) Тогда;
		Элементы.РедакторВыражений.Видимость = Ложь;
		Элементы.ГруппаВидТекста.Заголовок = "Точное значение";
		Элементы.ПроизвольнаяТемаПисьма.Пометка = Ложь;
		Элементы.ТочнаяТемаПисьма.Пометка = Истина;
	Иначе
		Элементы.РедакторВыражений.Видимость = Истина;
		Элементы.ГруппаВидТекста.Заголовок = "Произвольный код";
		Элементы.ПроизвольнаяТемаПисьма.Пометка = Истина;
		Элементы.ТочнаяТемаПисьма.Пометка = Ложь;
	КонецЕсли;

КонецПроцедуры // УправлениеДиалогомНаСервере()

// Производит настройку блокировки элементов формы.
//
&НаСервере
Процедура БлокироватьЭлементыФормы()
	
	// Составим список элементов для блокировки
	СписокРеквизитов = Новый СписокЗначений();
	
	// Заблокируем элементы формы
	//УправлениеДиалогомСервер.БлокироватьЭлементыФормы(ЭтотОбъект,СписокРеквизитов);
	
КонецПроцедуры // БлокироватьЭлементыФормы()

// Обработчик события возникающего при нажатии программно добавленной кнопки в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаКомандыФормыНаСервере(ИмяКоманды, ПараметрыДействия = Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаКомандыФормы(ЭтотОбъект, ИмяКоманды, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаКомандыФормыНаСервере()

// Подключаемый обработчик, вызывающий общую процедуру для обработки команды панели действий.
// 
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаКомандыФормыНаСервере(Команда.Имя, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

// Обработчик события возникающего при оповещении данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	//УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Обработчик события возникающего на сервере при выполнении команды "Произвольная тема".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура ПроизвольнаяТемаПисьмаНаСервере()
	
	Объект.Содержание = Справочники.Scan_ДействияНаЗначимыеСобытия.ОчиститьСодержимоеРедактора("Содержание");
	
КонецПроцедуры //ПроизвольнаяТемаПисьмаНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Произвольная тема".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПроизвольнаяТемаПисьма(Команда)
	
	Если ПустаяСтрока(Объект.Содержание) Тогда
		ПроизвольнаяТемаПисьмаНаСервере();
	Конецесли;
	Элементы.РедакторВыражений.Видимость = Истина;
	Элементы.ГруппаВидТекста.Заголовок = "Произвольный код";
	Элементы.ПроизвольнаяТемаПисьма.Пометка = Истина;
	Элементы.ТочнаяТемаПисьма.Пометка = Ложь;
	//Объект.СодержаниеПроизвольныйКод = Объект.СодержаниеПроизвольныйКод; Rarus bonmak АПК
	Объект.Содержание = "";
	
КонецПроцедуры //ПроизвольнаяТемаПисьма()

// Обработчик события возникающего на клиенте при выполнении команды "Точная тема".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТочнаяТемаПисьма(Команда)
	
	
	//rarus sergei 23.11.2016 mantis 7120 ++	
	Элементы.РедакторВыражений.Видимость = Ложь;
	Элементы.ГруппаВидТекста.Заголовок = "Точное значение";
	Элементы.ПроизвольнаяТемаПисьма.Пометка = Ложь;
	Элементы.ТочнаяТемаПисьма.Пометка = Истина;
	//Объект.Содержание = Объект.Содержание; Rarus bonmak АПК
	Объект.СодержаниеПроизвольныйКод = "";
	//rarus sergei 23.11.2016 mantis 7120 --
КонецПроцедуры //ТочнаяТемаПисьма()

// Обработчик события возникающего на клиенте при выполнении команды "Редактор выражений".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура РедакторВыражений(Команда)
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Текст", ?(ЗначениеЗаполнено(Объект.СодержаниеПроизвольныйКод),Объект.СодержаниеПроизвольныйКод,"Содержание"));
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияРедакторВыражения", ЭтотОбъект);	 //rarus sergei 23.11.2016 mantis 7120 +
	// Получаем форму, производим ее настройку и открытие
	ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия,Элементы.Содержание,,,,ОписаниеПродолжениеВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //РедакторВыражений()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НаименованиеНачалоВыбораНаСервере(ПараметрыДействия=Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Справочники.Scan_ДействияНаЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект,ПараметрыДействия);
	
КонецПроцедуры // НаименованиеНачалоВыбораНаСервере()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСформироватьНаименование", ЭтотОбъект, "СформироватьНаименование");
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Сформировать новое наименование?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		//Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // НаименованиеНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вид привила".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПолучателиНапоминанияВидПравилаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолучателиНапоминания.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПравила=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.Значение));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов); 
		ТекущиеДанные.Значение = Неопределено;
		ТекущиеДанные.Значение = ОписаниеТипа.ПривестиЗначение();
	Иначе
		ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ТекущиеДанные.ПутьКДанным   = "";
	ТекущиеДанные.ПроизвольныйКод = "";
	
КонецПроцедуры //ПолучателиНапоминанияВидПравилаПриИзменении()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Значение".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ПолучателиНапоминанияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолучателиНапоминания.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение") Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов); 
		ТекущиеДанные.Значение = Неопределено;
		ТекущиеДанные.Значение = ОписаниеТипа.ПривестиЗначение();
		
	ИначеЕсли ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Сформируем параметры открытия
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("Текст", ?(ЗначениеЗаполнено(ТекущиеДанные.ПроизвольныйКод),ТекущиеДанные.ПроизвольныйКод,"Получатели"));
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Сформируем параметры открытия
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Источник", Источник);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.ВыборРеквизитаОбъекта", ПараметрыОткрытия,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры //ПолучателиНапоминанияЗначениеНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Значение".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПолучателиНапоминанияЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолучателиНапоминания.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПравила=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод") Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ПроизвольныйКод = ВыбранноеЗначение;
		ТекущиеДанные.Значение = "<Произвольное выражение>";
		ТекущиеДанные.ПутьКДанным = "";
		
	ИначеЕсли ТекущиеДанные.ВидПравила=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника") Тогда
			
		СтандартнаяОбработка = Ложь;
		
		// проверим соответствие типов
		Если НЕ ВыбранноеЗначение.ТипМетаданного.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
			ВывестиСообщениеПол(НСтр("ru='Выбранный реквизит не является ссылкой на элемент справочника ""Пользователи""!'"));
			Возврат;
		КонецЕсли;
				
		ТекущиеДанные.Значение = ВыбранноеЗначение.Поле + " (Владелец)";
		ТекущиеДанные.ПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
		ТекущиеДанные.ПроизвольныйКод = "";
		
	КонецЕсли;
	
КонецПроцедуры //ПолучателиНапоминанияЗначениеОбработкаВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вариант периодичности".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВариантПериодичностиПриИзменении(Элемент)
	
	ПриИзмененииРасписания();
	
КонецПроцедуры //ВариантПериодичностиПриИзменении()

// Обработчик события возникающего на клиенте при нажатии на кнопку открытия данных реквизита "Вариант периодичности".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВариантПериодичностиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриИзмененииРасписания();
	
КонецПроцедуры //ВариантПериодичностиОткрытие()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Способ установки времени напоминания".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СпособУстановкиВремениНапоминанияПриИзменении(Элемент)
	
	// rarus agar 04.08.2021 АПК ++
	//ИнтервалВремени = НапоминанияПользователяКлиентСервер.ПолучитьИнтервалВремениИзСтроки(СпособУстановкиВремениНапоминания);
	ИнтервалВремени = НапоминанияПользователяКлиент.ПолучитьИнтервалВремениИзСтроки(СпособУстановкиВремениНапоминания);
	// rarus agar 04.08.2021 АПК --
	
	Если ИнтервалВремени > 0 Тогда
		// rarus agar 04.08.2021 АПК ++
		//ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремени(ИнтервалВремени);
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиент.ПредставлениеВремени(ИнтервалВремени);
		// rarus agar 04.08.2021 АПК --
		СпособУстановкиВремениНапоминания = НСтр("ru = 'через'") + " " + ИнтервалВремениСтрокой;
	Иначе
		Если Элементы.СпособУстановкиВремениНапоминания.СписокВыбора.НайтиПоЗначению(СпособУстановкиВремениНапоминания) = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Интервал времени не определен.'"), , "СпособУстановкиВремениНапоминания");
		КонецЕсли;
	КонецЕсли;
	
	ПредопределенныеСпособыОповещения = ПолучитьПредопределенныеСпособыОповещения();
	ВыбранныйСпособ = ПредопределенныеСпособыОповещения.Получить(СпособУстановкиВремениНапоминания);
	
	Если ВыбранныйСпособ = Неопределено Тогда
		Объект.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени");
	Иначе
		Объект.СпособУстановкиВремениНапоминания = ВыбранныйСпособ;
	КонецЕсли;
	
	Если ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника") Тогда
		Объект.ДатаНапоминания = "";
	КонецЕсли;
	
	Объект.ИнтервалВремениНапоминания = ИнтервалВремени;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры //СпособУстановкиВремениНапоминанияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Дата
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьСписокВремени();
	
КонецПроцедуры //ДатаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Время".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВремяПриИзменении(Элемент)
	
	Объект.ВремяСобытия = НачалоМинуты(Объект.ВремяСобытия);
	
КонецПроцедуры //ВремяПриИзменении()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Дата напоминания произвольный код".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ДатаНапоминанияПроизвольныйКодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Текст", ?(ЗначениеЗаполнено(Объект.ДатаНапоминанияПроизвольныйКод),Объект.ДатаНапоминанияПроизвольныйКод,"ДатаНапоминания"));
	
	// Получаем форму, производим ее настройку и открытие
	ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ДатаНапоминанияПроизвольныйКодНачалоВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Дата напоминания".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ДатаНапоминанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Источник", Источник);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	// Получаем форму, производим ее настройку и открытие
	ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.ВыборРеквизитаОбъекта", ПараметрыОткрытия,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ДатаНапоминанияНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Дата напоминания".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ДатаНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// проверим соответствие типов
	Если НЕ ВыбранноеЗначение.ТипМетаданного.СодержитТип(Тип("Дата")) Тогда
		ВывестиСообщениеПол(НСтр("ru='Выбранный реквизит не является датой!'"));
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНапоминания = ВыбранноеЗначение.Поле + " (Владелец)";
	Объект.ДатаНапоминанияПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
	Объект.ДатаНапоминанияПроизвольныйКод = "";
	
КонецПроцедуры //ДатаНапоминанияОбработкаВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Дата напоминания произвольный код".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ДатаНапоминанияПроизвольныйКодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.ДатаНапоминанияПроизвольныйКод = ВыбранноеЗначение;
	ВыбранноеЗначение = "<Произвольное выражение>";
	
КонецПроцедуры //ДатаНапоминанияПроизвольныйКодОбработкаВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Расписания".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПриИзмененииРасписания()
	
	ПользовательскаяНастройка = ПустаяСтрока(ВариантПериодичности);
	Если ПользовательскаяНастройка Тогда
		ОткрытьДиалогНастройкиРасписания();
	Иначе
		СтандартныеРасписания = Неопределено;
		ПолучитьСтандартныеРасписания(СтандартныеРасписания);
		Расписание = СтандартныеРасписания[ВариантПериодичности];
	КонецЕсли;
	ОпределитьВыбранныйВариантПериодичности();
	
КонецПроцедуры //ПриИзмененииРасписания()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Интервал времени".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПриИзмененииИнтервалаВремени(Элемент)
	
	// rarus agar 04.08.2021 АПК ++
	//Объект.ИнтервалВремениНапоминания = НапоминанияПользователяКлиентСервер.ПолучитьИнтервалВремениИзСтроки(ИнтервалВремениСтрокой);
	Объект.ИнтервалВремениНапоминания = НапоминанияПользователяКлиент.ПолучитьИнтервалВремениИзСтроки(ИнтервалВремениСтрокой);
	// rarus agar 04.08.2021 АПК --
	Если Объект.ИнтервалВремениНапоминания > 0 Тогда
		// rarus agar 04.08.2021 АПК ++
		//ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Объект.ИнтервалВремениНапоминания);
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиент.ПредставлениеВремени(Объект.ИнтервалВремениНапоминания);
		// rarus agar 04.08.2021 АПК --
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Интервал времени не определен'"), , "ИнтервалВремениСтрокой");
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииРасписания()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если Параметры.ДополнительныеПараметры.Свойство("Источник") Тогда
		Источник = Параметры.ДополнительныеПараметры.Источник;
		СсылочныйТипИсточника = НЕ (Источник.ЗначениеПустойСсылки = Неопределено);
	КонецЕсли;
	
	Если Параметры.Свойство("ВидДействия") Тогда
		Объект.ВидДействия = Параметры.ВидДействия;
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Справочники.Scan_ДействияНаЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект);
		КонецЕсли;
	КонецЕсли;
	НастройкиПодсистемы = НапоминанияПользователяСлужебный.НастройкиПодсистемы(); //rarus bonmak 12.12.2019 15505	
	ТипОбъектаУст = Объект.ТипОбъекта;
		
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.ПолучателиНапоминанияВидПравила.СписокВыбора.Очистить();
	Элементы.ПолучателиНапоминанияВидПравила.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	Если СсылочныйТипИсточника Тогда
		Элементы.ПолучателиНапоминанияВидПравила.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника"));	
	КонецЕсли;
	Элементы.ПолучателиНапоминанияВидПравила.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	Если Объект.ИнтервалВремениНапоминания > 0 Тогда
		// rarus agar 04.08.2021 АПК ++
		//ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Объект.ИнтервалВремениНапоминания);
		ИнтервалВремениСтрокой = ПредставлениеВремени(Объект.ИнтервалВремениНапоминания);
		// rarus agar 04.08.2021 АПК --
	КонецЕсли;
	
	Элементы.ВариантПериодичности.СписокВыбора.Очистить();
	СписокРасписаний = НапоминанияПользователяСлужебный.ПолучитьСтандартныеРасписанияДляНапоминания();
	Для Каждого СтандартноеРасписание Из СписокРасписаний Цикл
		Элементы.ВариантПериодичности.СписокВыбора.Добавить(СтандартноеРасписание.Ключ, СтандартноеРасписание.Ключ);
	КонецЦикла;
	Элементы.ВариантПериодичности.СписокВыбора.Добавить("", НСтр("ru = 'по заданному расписанию...'"));
	
	ОпределитьВыбранныйВариантПериодичности();
	
	ПредопределенныеСпособыОповещения = ПолучитьПредопределенныеСпособыОповещения();
	ВыбранныйСпособ = ПолучитьКлючПоЗначениюВСоответствии(ПредопределенныеСпособыОповещения, Объект.СпособУстановкиВремениНапоминания);
	
	Если Объект.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени") Тогда
		// rarus agar 04.08.2021 АПК ++
		//СпособУстановкиВремениНапоминания = НСтр("ru = 'через'") + " " + НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Объект.ИнтервалВремениНапоминания);
		СпособУстановкиВремениНапоминания = НСтр("ru = 'через'") + " " + ПредставлениеВремени(Объект.ИнтервалВремениНапоминания);
		// rarus agar 04.08.2021 АПК --
	Иначе
		СпособУстановкиВремениНапоминания = ВыбранныйСпособ;
	КонецЕсли;
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	// Дальнейшие операции выпольняются только для новых объектов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриОткрытии(ЭтотОбъект, Отказ) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ЗаполнитьСпособыОповещения();
	ЗаполнитьСписокВремени();
	
	// Настроим командную панель формы
	//ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект,"ПолучателиНапоминания");
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события возникающего на клиенте при закрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриЗакрытии(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы в контексте сервера.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  ИмяСобытия        - Строка    - Имя, идентифицирующее событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия = Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Если оповещение сводиться к выбору значения, то переходим в обработчик другого события
	Если ПараметрыДействия.Свойство("ВыбранноеЗначение") Тогда
		ОбработкаВыбораНаСервере(ПараметрыДействия.ВыбранноеЗначение, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаОповещенияНаСервере()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Производим подготовку параметров события для обработки в контексте сервера
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект - Объект, который будет прочитан.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
		
	Расписание = ТекущийОбъект.Расписание.Получить();
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Обработчик события возникающего на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Отказ           - Булево         - Признак отказа от записи.
//  ПараметрыЗаписи - Структура      - Структура, содержащая параметры записи.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПередЗаписью(ЭтотОбъект, Отказ ,ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()

// Обработчик события возникающего на сервере перед записью объекта.
//
// Параметры:
//  Отказ           - Булево           - Признак отказа от создания формы.
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Если ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени Тогда
	//	ТекущийОбъект.ВремяСобытия = ТекущаяДатаСеанса() + Объект.ИнтервалВремениНапоминания;
	//	ТекущийОбъект.ДатаНапоминания = ТекущийОбъект.ВремяСобытия;
	//	ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
	//ИначеЕсли ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
	//	ТекущийОбъект.ДатаНапоминания = Объект.ВремяСобытия;
	//ИначеЕсли ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.Периодически Тогда
	//	БлижайшееВремяНапоминания = НапоминанияПользователяСлужебный.ПолучитьБлижайшуюДатуСобытияПоРасписанию(Расписание);
	//	Если БлижайшееВремяНапоминания = Неопределено Тогда
	//		БлижайшееВремяНапоминания = ТекущаяДатаСеанса();         
	//	КонецЕсли;
	//	ТекущийОбъект.ВремяСобытия = БлижайшееВремяНапоминания;
	//	ТекущийОбъект.ДатаНапоминания = ТекущийОбъект.ВремяСобытия;
	//КонецЕсли;
	
	Если ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
		ТекущийОбъект.ДатаНапоминания = Объект.ВремяСобытия;
	ИначеЕсли ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.Периодически Тогда
		БлижайшееВремяНапоминания = НапоминанияПользователяСлужебный.ПолучитьБлижайшуюДатуСобытияПоРасписанию(Расписание);
		Если БлижайшееВремяНапоминания = Неопределено Тогда
			БлижайшееВремяНапоминания = ТекущаяДатаСеанса();         
		КонецЕсли;
		ТекущийОбъект.ВремяСобытия = БлижайшееВремяНапоминания;
		ТекущийОбъект.ДатаНапоминания = ТекущийОбъект.ВремяСобытия;
	КонецЕсли;
	
	Если ТекущийОбъект.СпособУстановкиВремениНапоминания <> Перечисления.СпособыУстановкиВремениНапоминания.Периодически Тогда
		Расписание = Неопределено;
	КонецЕсли;
	
	ТекущийОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
	
	Если Элементы.ПроизвольнаяТемаПисьма.Пометка Тогда
		Объект.СодержаниеПроизвольныйКод = Объект.Содержание;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Обработчик события возникающего на сервере после записи объекта и после завершения транзакции.
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	 	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

// Обработчик события возникающего на клиенте после записи объекта и после завершения транзакции.
//
// Параметры:
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик события возникающего на сервере при необходимости проверки заполнения реквизитов при записи в форме.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	//УправлениеДиалогомСправочникаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	//УправлениеДиалогомСправочникаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()


//rarus sergei 23.11.2016 mantis 7120 ++
// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияРедакторВыражения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаВидТекста.Заголовок = "Произвольный код";
	Элементы.ПроизвольнаяТемаПисьма.Пометка = Истина;
	Элементы.ТочнаяТемаПисьма.Пометка = Ложь;
	
	Объект.СодержаниеПроизвольныйКод = РезультатОповещения;
	Объект.Содержание ="";
	Объект.ПроизвольныйКод = Истина;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияРедакторВыражения()
//rarus sergei 23.11.2016 mantis 7120 --

// rarus agar 04.08.2021 АПК ++

// Возвращает текстовое представление интервала времени, заданного в секундах.
//
// Параметры:
//
//  Время - Число - интервал времени в секундах.
//
//  ПолноеПредставление	- Булево - кратное или полное представление времени.
//		Например, интервал 1 000 000 секунд:
//		- полное представление:  11 дней 13 часов 46 минут 40 секунд;
//		- краткое представление: 11 дней 13 часов.
//  
//  ВыводитьСекунды - Булево - Ложь, если секунды не требуются.
//  
// Возвращаемое значение:
//   Строка - представление интервала времени.
//
Функция ПредставлениеВремени(Знач Время, ПолноеПредставление = Истина, ВыводитьСекунды = Истина) Экспорт
	Результат = "";
	
	// Представление единиц измерения времени в винительном падеже для количеств: 1, 2-4, 5-20.
	ПредставлениеНедель = НСтр("ru = ';%1 неделю;;%1 недели;%1 недель;%1 недели'");
	ПредставлениеДней   = НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'");
	ПредставлениеЧасов  = НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа'");
	ПредставлениеМинут  = НСтр("ru = ';%1 минуту;;%1 минуты;%1 минут;%1 минуты'");
	ПредставлениеСекунд = НСтр("ru = ';%1 секунду;;%1 секунды;%1 секунд;%1 секунды'");
	
	Время = Число(Время);
	
	Если Время < 0 Тогда
		Время = -Время;
	КонецЕсли;
	
	КоличествоНедель = Цел(Время / 60/60/24/7);
	КоличествоДней   = Цел(Время / 60/60/24);
	КоличествоЧасов  = Цел(Время / 60/60);
	КоличествоМинут  = Цел(Время / 60);
	КоличествоСекунд = Цел(Время);
	
	КоличествоСекунд = КоличествоСекунд - КоличествоМинут * 60;
	КоличествоМинут  = КоличествоМинут - КоличествоЧасов * 60;
	КоличествоЧасов  = КоличествоЧасов - КоличествоДней * 24;
	КоличествоДней   = КоличествоДней - КоличествоНедель * 7;
	
	Если Не ВыводитьСекунды Тогда
		КоличествоСекунд = 0;
	КонецЕсли;
	
	Если КоличествоНедель > 0 И КоличествоДней+КоличествоЧасов+КоличествоМинут+КоличествоСекунд=0 Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеНедель, КоличествоНедель);
	Иначе
		КоличествоДней = КоличествоДней + КоличествоНедель * 7;
		
		Счетчик = 0;
		Если КоличествоДней > 0 Тогда
			Результат = Результат + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, КоличествоДней) + " ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если КоличествоЧасов > 0 Тогда
			Результат = Результат + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеЧасов, КоличествоЧасов) + " ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если (ПолноеПредставление Или Счетчик < 2) И КоличествоМинут > 0 Тогда
			Результат = Результат + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеМинут, КоличествоМинут) + " ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если (ПолноеПредставление Или Счетчик < 2) И (КоличествоСекунд > 0 Или КоличествоНедель+КоличествоДней+КоличествоЧасов+КоличествоМинут = 0) Тогда
			Результат = Результат + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеСекунд, КоличествоСекунд);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СокрП(Результат);
	
КонецФункции
// rarus agar 04.08.2021 АПК --

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ


