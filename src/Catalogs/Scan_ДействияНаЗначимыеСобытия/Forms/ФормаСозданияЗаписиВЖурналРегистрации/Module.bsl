// Модуль формы элемента справочника "Действия на значимые события"


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСформироватьНаименование(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияСформироватьНаименование()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияВыборРеквизита(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Обработаем в зависимости от выбранного варианта
	Если РезультатОповещения.Значение=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение") Тогда
		
		Если ДополнительныеПараметры.Свойство("ИмяТипа") И ДополнительныеПараметры.ИмяТипа = "СтрокаКомментарий" Тогда
			
			Объект.Комментарий = "";
			Объект.КомментарийПроизвольныйКод = "";
			
		ИначеЕсли ДополнительныеПараметры.Свойство("ИмяТипа") И ДополнительныеПараметры.ИмяТипа = "СтрокаСобытие" Тогда
			
			Объект.жрСобытие = "";
			Объект.жрСобытиеПроизвольныйКод = "";
			
		ИначеЕсли ДополнительныеПараметры.Свойство("ИмяФормы")Тогда
			
			// Сформируем параметры открытия
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("РежимВыбора",Истина);
			ПараметрыОткрытия.Вставить("Отбор",ДополнительныеПараметры.Отбор);
			
			ОткрытьФорму(""+ДополнительныеПараметры.ИмяФормы+".ФормаВыбора",ПараметрыОткрытия,ДополнительныеПараметры.ПродолжитьВыборРеквизита,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли РезультатОповещения.Значение=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника") Тогда
		
		// Сформируем параметры открытия
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Источник", Источник);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.ВыборРеквизитаОбъекта", ПараметрыОткрытия,ДополнительныеПараметры.ПродолжитьВыборРеквизита,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли РезультатОповещения.Значение=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод") Тогда
		
		// Сформируем параметры открытия
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("Текст", ДополнительныеПараметры.ИмяРеквизита);
		Если ДополнительныеПараметры.Свойство("Отобор") Тогда
			ПараметрыОткрытия.Вставить("Отбор", ДополнительныеПараметры.Отбор);
		КонецЕсли;
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, ДополнительныеПараметры.ПродолжитьВыборРеквизита,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияВыборРеквизита()


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	//УправлениеДиалогомСправочникаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	//УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

// Производит настройку блокировки элементов формы.
//
&НаСервере
Процедура БлокироватьЭлементыФормы()
	
	// Составим список элементов для блокировки
	СписокРеквизитов = Новый СписокЗначений();
	
	// Заблокируем элементы формы
	//УправлениеДиалогомСервер.БлокироватьЭлементыФормы(ЭтотОбъект,СписокРеквизитов);
	
КонецПроцедуры // БлокироватьЭлементыФормы()

// Обработчик события возникающего при нажатии программно добавленной кнопки в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаКомандыФормыНаСервере(ИмяКоманды, ПараметрыДействия = Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаКомандыФормы(ЭтотОбъект, ИмяКоманды, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаКомандыФормыНаСервере()

// Подключаемый обработчик, вызывающий общую процедуру для обработки команды панели действий.
// 
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаКомандыФормыНаСервере(Команда.Имя, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

// Обработчик события возникающего при оповещении данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	//УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НаименованиеНачалоВыбораНаСервере(ПараметрыДействия=Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Справочники.Scan_ДействияНаЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект,ПараметрыДействия);
	
КонецПроцедуры // НаименованиеНачалоВыбораНаСервере()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСформироватьНаименование", ЭтотОбъект, "СформироватьНаименование");
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Сформировать новое наименование?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		//Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // НаименованиеНачалоВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Комментарий".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.Комментарий.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.Комментарий);
	ПараметрыОбработки.Вставить("ИмяТипа","СтрокаКомментарий");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.КомментарийПроизвольныйКод),Объект.КомментарийПроизвольныйКод,"жрКомментарий"));
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //КомментарийНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Комментарий".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура КомментарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.КомментарийПроизвольныйКод = ВыбранноеЗначение;
		Объект.Комментарий = "<Произвольное выражение>";
		
	КонецЕсли;
	
КонецПроцедуры //КомментарийОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Событие".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура жрСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.жрСобытие.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.жрСобытие);
	ПараметрыОбработки.Вставить("ИмяТипа","СтрокаСобытие");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.жрСобытиеПроизвольныйКод),Объект.жрСобытиеПроизвольныйКод,"Событие"));
	
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //жрСобытиеНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Событие".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура жрСобытиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.жрСобытиеПроизвольныйКод = ВыбранноеЗначение;
		Объект.жрСобытие = "<Произвольное выражение>";
		
	КонецЕсли;

КонецПроцедуры //жрСобытиеОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Объект метаданных".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура жрОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.жрОбъектМетаданных.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.жрОбъектМетаданных);
	ПараметрыОбработки.Вставить("ИмяФормы","Справочник.ИдентификаторыОбъектовМетаданных");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.жрОбъектМетаданныхПроизвольныйКод),Объект.жрОбъектМетаданныхПроизвольныйКод,"ОбъектМетаданных"));
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("БезДанных",Ложь);
	ПараметрыОтбора.Вставить("ВыбиратьГруппыОбъектовМетаданных",Ложь);
	МассивПорядков = Новый Массив;
	МассивПорядков.Добавить(0);
	МассивПорядков.Добавить(3);
	МассивПорядков.Добавить(4);
	МассивПорядков.Добавить(5);
	МассивПорядков.Добавить(9);
	МассивПорядков.Добавить(10);
	МассивПорядков.Добавить(12);
	МассивПорядков.Добавить(13);
	ПараметрыОтбора.Вставить("ПорядокКоллекции",Новый ФиксированныйМассив(МассивПорядков));
	ПараметрыОбработки.Вставить("Отбор",ПараметрыОтбора);
	
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //жрОбъектМетаданныхНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Объект метаданных".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура жрОбъектМетаданныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.жрОбъектМетаданныхПроизвольныйКод = ВыбранноеЗначение;
		Объект.жрОбъектМетаданныхИмяОбъекта = "<Произвольное выражение>";
		Объект.жрОбъектМетаданных = ПредопределенноеЗначение("Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка");
		
	Иначе
		
		Объект.жрОбъектМетаданных = ВыбранноеЗначение;
		Объект.жрОбъектМетаданныхПроизвольныйКод = "";
		Объект.жрОбъектМетаданныхИмяОбъекта = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры //жрОбъектМетаданныхОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Данные".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура жрДанныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.жрДанные.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	Если СсылочныйТипИсточника Тогда
		СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника"));
	КонецЕсли;
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.жрДанные);
	ПараметрыОбработки.Вставить("ИмяФормы","Справочник.ИдентификаторыОбъектовМетаданных");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.жрДанныеПроизвольныйКод),Объект.жрДанныеПроизвольныйКод,"Данные"));
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("БезДанных",Ложь);
	ПараметрыОтбора.Вставить("ВыбиратьГруппыОбъектовМетаданных",Ложь);
	МассивПорядков = Новый Массив;
	МассивПорядков.Добавить(3);
	МассивПорядков.Добавить(4);
	МассивПорядков.Добавить(5);
	МассивПорядков.Добавить(9);
	МассивПорядков.Добавить(10);
	ПараметрыОтбора.Вставить("ПорядокКоллекции",Новый ФиксированныйМассив(МассивПорядков));
	ПараметрыОбработки.Вставить("Отбор",ПараметрыОтбора);
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //жрДанныеНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Данные".
//
// Параметры:
//  ВыбранноеЗначение    - Выбранное значение.
//  ПолноеИмя - Строка - Полное имя объекта метаданных.
//
&НаСервере
Функция жрДанныеОбработкаВыбораНаСервере(ВыбранноеЗначение,ПолноеИмя = "")
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ОписаниеТипов") Тогда
		
		ВсеСсылки = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
		Если НЕ ВсеСсылки.СодержитТип(ВыбранноеЗначение.ОписаниеТипа.Типы()[0]) Тогда
			ВывестиСообщениеПол(НСтр("ru='Реквизит не является ссылкой на объект!'"));
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ПолноеИмя = ВыбранноеЗначение.ПолноеИмя;
		
	КонецЕсли;
	
	Возврат Истина;
	
Конецфункции //жрДанныеОбработкаВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Данные".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура жрДанныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.жрДанныеПроизвольныйКод = ВыбранноеЗначение;
		Объект.жрДанные = "<Произвольное выражение>";
		Объект.жрДанныеПутьКДанным = "";
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыЭлементДерева") Тогда
		
		// проверим соответствие типов
		Если жрДанныеОбработкаВыбораНаСервере(ВыбранноеЗначение.ТипМетаданного) Тогда
		
			Объект.жрДанные = ВыбранноеЗначение.Поле + " (Владелец)";
			Объект.жрДанныеПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
			Объект.жрДанныеПроизвольныйКод = "";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")  Тогда
		
		// Получим полное имя объекта
		Имя = "";
		жрДанныеОбработкаВыбораНаСервере(ВыбранноеЗначение,Имя);
		
		// Сформируем параметры открытия
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму(""+Имя +".ФормаСписка", ПараметрыОткрытия, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Объект.жрДанные = ВыбранноеЗначение;
		Объект.жрДанныеПутьКДанным = "";
		Объект.жрДанныеПроизвольныйКод = "";
		
	КонецЕсли;
	
КонецПроцедуры //жрДанныеОбработкаВыбора()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если Параметры.ДополнительныеПараметры.Свойство("Источник") Тогда
		Источник = Параметры.ДополнительныеПараметры.Источник;
		СсылочныйТипИсточника = НЕ (Источник.ЗначениеПустойСсылки = Неопределено);
	КонецЕсли;
	
	Если Параметры.Свойство("ВидДействия") Тогда
		Объект.ВидДействия = Параметры.ВидДействия;
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Справочники.Scan_ДействияНаЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект);
		КонецЕсли;
	КонецЕсли;
	
	ТипОбъектаУст = Объект.ТипОбъекта;
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Дальнейшие операции выпольняются только для новых объектов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриОткрытии(ЭтотОбъект, Отказ) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Настроим командную панель формы
	//ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект,"Соответствия");
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события возникающего на клиенте при закрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриЗакрытии(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы в контексте сервера.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  ИмяСобытия        - Строка    - Имя, идентифицирующее событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия = Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	// Если оповещение сводиться к выбору значения, то переходим в обработчик другого события
	Если ПараметрыДействия.Свойство("ВыбранноеЗначение") Тогда
		ОбработкаВыбораНаСервере(ПараметрыДействия.ВыбранноеЗначение, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаОповещенияНаСервере()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Производим подготовку параметров события для обработки в контексте сервера
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект - Объект, который будет прочитан.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
		
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Обработчик события возникающего на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Отказ           - Булево         - Признак отказа от записи.
//  ПараметрыЗаписи - Структура      - Структура, содержащая параметры записи.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПередЗаписью(ЭтотОбъект, Отказ ,ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()

// Обработчик события возникающего на сервере перед записью объекта.
//
// Параметры:
//  Отказ           - Булево           - Признак отказа от создания формы.
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Обработчик события возникающего на сервере после записи объекта и после завершения транзакции.
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	 	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

// Обработчик события возникающего на клиенте после записи объекта и после завершения транзакции.
//
// Параметры:
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик события возникающего на сервере при необходимости проверки заполнения реквизитов при записи в форме.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
	//	Возврат;
	//КонецЕсли;
	//
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	//УправлениеДиалогомСправочникаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	//УправлениеДиалогомСправочникаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ


