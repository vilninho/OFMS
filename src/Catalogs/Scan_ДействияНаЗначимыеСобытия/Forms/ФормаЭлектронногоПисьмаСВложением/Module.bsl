// Модуль формы элемента справочника "Действия на значимые события"


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ВопросПриИзмененииФорматаПриЗакрытии(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
		Возврат;
	КонецЕсли;
		
	ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст");
	ТекстПисьмаФорматированныйДокумент.Удалить();
	Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
	Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
	
КонецПроцедуры //ВопросПриИзмененииФорматаПриЗакрытии()

// Обработчик события открывающий форму адресной книги.
//
&НаКлиенте
Процедура РедактироватьСписокПолучателей()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", Объект.эпУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",НСтр("ru = 'Кому'"));
	
	// Откроем форму для редактирования списка адресатов
	ИмяОбщейФормы = "ОбщаяФорма.Scan_АдреснаяКнига";
	
	ОткрытьФорму(ИмяОбщейФормы, ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры //РедактироватьСписокПолучателей()

// Заполнение табличной части получателися электронного писмо подобранными пользователями.
//
&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(Результат)

	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	ПерваяСтрока = Истина;
	
	Для Каждого Элемент Из Результат Цикл
		
		Если ПерваяСтрока Тогда
			ТекущиеДанные.АдресЭлектроннойПочты = Элемент.Адрес;
			ТекущиеДанные.Представление = Элемент.Представление + " <" +Элемент.Адрес + ">";
			ТекущиеДанные.КодГруппыАдреса = Элемент.Группа;
			ТекущиеДанные.Контакт = Элемент.Контакт;
			ПерваяСтрока = Ложь;
		Иначе
			НоваяСтрока = объект.ПолучателиПисьма.Добавить();
			НоваяСтрока.АдресЭлектроннойПочты = Элемент.Адрес;
			НоваяСтрока.Представление = Элемент.Представление + " <" +Элемент.Адрес + ">";
			НоваяСтрока.Контакт = Элемент.Контакт;
			НоваяСтрока.КодГруппыАдреса = Элемент.Группа;
			НоваяСтрока.ВидПравила = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьПодобранныхПолучателей()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСформироватьНаименование(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияСформироватьНаименование()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияРедакторВыражения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаВидТекста.Заголовок = "Произвольный код";
	Элементы.ТекстПисьмаКонтекстноеМенюПроизвольнаяТемаПисьма.Пометка = Истина;
	Элементы.ТочнаяТемаПисьма.Пометка = Ложь;
	Если Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") Тогда
		ТекстПисьма = РезультатОповещения;
	Иначе
		ТекстПисьмаФорматированныйДокумент.Удалить();
		ТекстПисьмаФорматированныйДокумент.Добавить(РезультатОповещения);
		ТекстПисьма = "";
	КонецЕсли;
	ПроизвольныйКод = Истина;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияРедакторВыражения()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияВыборРеквизита(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ПродолжитьВыборВажности" Тогда
		
		Объект.Важность = РезультатОповещения.Значение;
		Объект.ВажностьПроизвольныйКод = "";
		
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ПродолжитьВыборРеквизита") Тогда
		
		//Обработаем в зависимости от выбранного варианта
		Если РезультатОповещения.Значение=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение") Тогда
			
			Если ДополнительныеПараметры.Свойство("ИмяТипа") И ДополнительныеПараметры.ИмяТипа = "Scan_Важность" Тогда
				
				СписокВажностей = Новый СписокЗначений;
				Элементы.Важность.СписокВыбора.Очистить();
				СписокВажностей.Добавить(ПредопределенноеЗначение("Перечисление.Scan_Важность.Низкая"));
				СписокВажностей.Добавить(ПредопределенноеЗначение("Перечисление.Scan_Важность.Средняя"));
				СписокВажностей.Добавить(ПредопределенноеЗначение("Перечисление.Scan_Важность.Высокая"));
				ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, "ПродолжитьВыборВажности"),СписокВажностей,ДополнительныеПараметры.ПродолжитьВыборРеквизита);
				
			ИначеЕсли ДополнительныеПараметры.Свойство("ИмяТипа") И ДополнительныеПараметры.ИмяТипа = "СтрокаТема" Тогда
				
				Объект.Тема = "";
				Объект.ТемаПроизвольныйКод = "";
				
			ИначеЕсли ДополнительныеПараметры.Свойство("ИмяТипа") И ДополнительныеПараметры.ИмяТипа = "СтрокаКомментарий" Тогда
				
				Объект.Комментарий = "";
				Объект.КомментарийПроизвольныйКод = "";
				
			ИначеЕсли ДополнительныеПараметры.Свойство("ИмяФормы")Тогда
				
				// Сформируем параметры открытия
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("РежимВыбора",Истина);
				ОткрытьФорму(""+ДополнительныеПараметры.ИмяФормы+".ФормаВыбора",ПараметрыОткрытия,ДополнительныеПараметры.ПродолжитьВыборРеквизита,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
		
		ИначеЕсли РезультатОповещения.Значение=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника") Тогда
			
			// Сформируем параметры открытия
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Источник", Источник);
			ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
			
			// Получаем форму, производим ее настройку и открытие
			ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.ВыборРеквизитаОбъекта", ПараметрыОткрытия,ДополнительныеПараметры.ПродолжитьВыборРеквизита,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли РезультатОповещения.Значение=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод") Тогда
			
			// Сформируем параметры открытия
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
			ПараметрыОткрытия.Вставить("Текст", ДополнительныеПараметры.ИмяРеквизита);
			
			// Получаем форму, производим ее настройку и открытие
			ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, ДополнительныеПараметры.ПродолжитьВыборРеквизита,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияВыборРеквизита()

&НаКлиенте
Процедура Подключаемый_ОбработчикЗакрытияФормы(РезультатЗакрытия, Параметры = Неопределено) Экспорт
	Если РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		
		ПреобразоватьФорматыСохраненияВСтроку(РезультатЗакрытия.ФорматыСохранения);	
		ЭтотОбъект.ТекущийЭлемент.ТекущиеДанные.УпаковатьВАрхив = РезультатЗакрытия.УпаковатьВАрхив;
	КонецЕсли; 
КонецПроцедуры
 
&НаКлиенте
Процедура ПреобразоватьФорматыСохраненияВСтроку(МассивФорматов)
	Если МассивФорматов.КОличество()>0 Тогда
		ЭтотОбъект.ТекущийЭлемент.ТекущиеДанные.ФорматПФ = "";
		Для каждого Формат Из МассивФорматов Цикл
			Если ЭтотОбъект.ТекущийЭлемент.ТекущиеДанные.ФорматПФ = "" Тогда
				ЭтотОбъект.ТекущийЭлемент.ТекущиеДанные.ФорматПФ = строка(Формат);	
			Иначе	
				ЭтотОбъект.ТекущийЭлемент.ТекущиеДанные.ФорматПФ = ЭтотОбъект.ТекущийЭлемент.ТекущиеДанные.ФорматПФ+","+ строка(Формат);
			КонецЕсли; 
			
		КонецЦикла;                                	
		
	
	КонецЕсли; 		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СЛУЖЕБНОГО ПРОГРАММНОГО ИНТЕРФЕЙСА

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	//УправлениеДиалогомСправочникаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	//УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") Тогда
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
	Иначе
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
	КонецЕсли;
	
	ПроизвольныйКод = ЗначениеЗаполнено(Объект.эпТекстПисьмаПроизвольныйКод);
	Если ПроизвольныйКод Тогда
		Элементы.РедакторВыражений.Видимость = Истина;
		Элементы.ГруппаВидТекста.Заголовок = "Произвольный код";
		Элементы.ТекстПисьмаКонтекстноеМенюПроизвольнаяТемаПисьма.Пометка = Истина;
		Элементы.ТочнаяТемаПисьма.Пометка = Ложь;
	Иначе
		Элементы.РедакторВыражений.Видимость = Ложь;
		Элементы.ГруппаВидТекста.Заголовок = "Точное значение";
		Элементы.ТекстПисьмаКонтекстноеМенюПроизвольнаяТемаПисьма.Пометка = Ложь;
		Элементы.ТочнаяТемаПисьма.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

// Производит настройку блокировки элементов формы.
//
&НаСервере
Процедура БлокироватьЭлементыФормы()
	
	// Составим список элементов для блокировки
	СписокРеквизитов = Новый СписокЗначений();
	
	// Заблокируем элементы формы
	//УправлениеДиалогомСервер.БлокироватьЭлементыФормы(ЭтотОбъект,СписокРеквизитов);
	
КонецПроцедуры // БлокироватьЭлементыФормы()

// Обработчик события возникающего при нажатии программно добавленной кнопки в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаКомандыФормыНаСервере(ИмяКоманды, ПараметрыДействия = Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаКомандыФормы(ЭтотОбъект, ИмяКоманды, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаКомандыФормыНаСервере()

// Подключаемый обработчик, вызывающий общую процедуру для обработки команды панели действий.
// 
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаКомандыФормыНаСервере(Команда.Имя, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

// Обработчик события возникающего при оповещении данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	//УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()


&НаСервере
Функция ТипМакета(ИмяОбъектаМетаданныхМакета)
	
	ТипыМакетов = Новый Массив;
	ТипыМакетов.Добавить("MXL");
	ТипыМакетов.Добавить("DOC");
	ТипыМакетов.Добавить("ODT");
	
	Для Каждого ТипМакета Из ТипыМакетов Цикл
		Позиция = СтрНайти(ИмяОбъектаМетаданныхМакета, "ПФ_" + ТипМакета);
		Если Позиция > 0 Тогда
			Возврат ТипМакета;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//Заполняет страницу Вложения в зависимости от типа документа
&НаСервере
Процедура ЗаполнитьСтраницуВложений(ДокументПустаяСсылка)
	Если ТипЗнч(ДокументПустаяСсылка) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		ОбъектМетаданных = Метаданные.Документы.Scan_ЗаявкаНаДействие;
		Для каждого ОбъектМетаданныхМакет Из ОбъектМетаданных.Макеты Цикл
			ТипМакета = ТипМакета(ОбъектМетаданныхМакет.Имя);
			Если ТипМакета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
				ДобавитьОписаниеМакета(ОбъектМетаданных.ПолноеИмя() + "." + ОбъектМетаданныхМакет.Имя, ОбъектМетаданныхМакет.Имя, ОбъектМетаданныхМакет.Синоним, ОбъектМетаданныхМакет.Синоним, ТипМакета);
			КонецЕсли;
		КонецЦикла;
				
		//МакетыПечатныхФорм.Сортировать("ПредставлениеМакета Возр");

		
	ИначеЕсли ТипЗнч(ДокументПустаяСсылка) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		ОбъектМетаданных = Метаданные.Документы.Scan_ЗаявкаПеревозчику;
		Для каждого ОбъектМетаданныхМакет Из ОбъектМетаданных.Макеты Цикл
			ТипМакета = ТипМакета(ОбъектМетаданныхМакет.Имя);
			Если ТипМакета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
				ДобавитьОписаниеМакета(ОбъектМетаданных.ПолноеИмя() + "." + ОбъектМетаданныхМакет.Имя,ОбъектМетаданныхМакет.Имя, ОбъектМетаданныхМакет.Синоним, ОбъектМетаданныхМакет.Синоним, ТипМакета);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИндексКартинки(Знач ТипМакета)
	
	ТипыМакетов = Новый Массив;
	ТипыМакетов.Добавить("DOC");
	ТипыМакетов.Добавить("ODT");
	ТипыМакетов.Добавить("MXL");
	
	Результат = ТипыМакетов.Найти(ВРег(ТипМакета));
	Возврат ?(Результат = Неопределено, -1, Результат);
	
КонецФункции 


&НаСервере
Функция ДобавитьОписаниеМакета(ИмяОбъектаМетаданныхМакета,НаименованиеПечатнойФормы, ПредставлениеМакета, ПредставлениеВладельца, ТипМакета)
	ОписаниеМакета = Объект.Вложения.Добавить();
	//ОписаниеМакета.ТипМакета = ТипМакета;
	ОписаниеМакета.ИмяОбъектовМетаданныхМакета = ИмяОбъектаМетаданныхМакета;
	ОписаниеМакета.НаименованиеПечатнойФормы = НаименованиеПечатнойФормы;
	ОписаниеМакета.ПредставлениеПечатнойФормы = ПредставлениеМакета;
	ОписаниеМакета.Картинка = ИндексКартинки(ТипМакета);
	//ОписаниеМакета.СтрокаПоиска = ИмяОбъектаМетаданныхМакета + " "
								//+ ПредставлениеВладельца + " "
								//+ ПредставлениеМакета + " "
								//+ ТипМакета;
	Возврат ОписаниеМакета;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Обработчик события возникающего на сервере при выполнении команды "Произвольная тема".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура ПроизвольнаяТемаПисьмаНаСервере()
	
	ТекстПисьма = Справочники.Scan_ДействияНаЗначимыеСобытия.ОчиститьСодержимоеРедактора("ТекстПисьма");
	
КонецПроцедуры //ПроизвольнаяТемаПисьмаНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Произвольная тема".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПроизвольнаяТемаПисьма(Команда)
	
	Если Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML") И НЕ ПроизвольныйКод Тогда
		ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	КонецЕсли;
	Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст");
	ТекстПисьмаФорматированныйДокумент.Удалить();
	Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
	Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
	Если ПустаяСтрока(ТекстПисьма) Тогда
		ПроизвольнаяТемаПисьмаНаСервере();
	Конецесли;
	Элементы.РедакторВыражений.Видимость = Истина;
	Элементы.ГруппаВидТекста.Заголовок = "Произвольный код";
	Элементы.ТекстПисьмаКонтекстноеМенюПроизвольнаяТемаПисьма.Пометка = Истина;
	Элементы.ТочнаяТемаПисьма.Пометка = Ложь;
	ПроизвольныйКод = Истина;
	
КонецПроцедуры //ПроизвольнаяТемаПисьма()

// Обработчик события возникающего на клиенте при выполнении команды "Точная тема".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТочнаяТемаПисьма(Команда)
	
	Если Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML") И НЕ ПроизвольныйКод Тогда
		ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		ТекстПисьмаФорматированныйДокумент.Удалить();
	КонецЕсли;
	Элементы.РедакторВыражений.Видимость = Ложь;
	Элементы.ГруппаВидТекста.Заголовок = "Точное значение";
	Элементы.ТекстПисьмаКонтекстноеМенюПроизвольнаяТемаПисьма.Пометка = Ложь;
	Элементы.ТочнаяТемаПисьма.Пометка = Истина;
	ПроизвольныйКод = Ложь;
	
КонецПроцедуры //ТочнаяТемаПисьма()

// Обработчик события возникающего на клиенте при выполнении команды "Редактор выражений".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура РедакторВыражений(Команда)
	
	//Сформируем начальный текст 
	Если Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML") Тогда
		Текст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	Иначе
		Текст = ТекстПисьма;
	КонецЕсли;
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Текст", ?(ЗначениеЗаполнено(Текст),Текст,"ТекстПисьма"));
	
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияРедакторВыражения", ЭтотОбъект);
	
	// Получаем форму, производим ее настройку и открытие
	ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия,,,,,ОписаниеПродолжениеВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //РедакторВыражений()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Автор".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.Автор.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	Если СсылочныйТипИсточника Тогда
		СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника"));
	КонецЕсли;
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.Автор);
	ПараметрыОбработки.Вставить("ИмяФормы","Справочник.Пользователи");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.АвторПроизвольныйКод),Объект.АвторПроизвольныйКод,"Автор"));
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //АвторНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Автор".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.АвторПроизвольныйКод = ВыбранноеЗначение;
		Объект.Автор = "<Произвольное выражение>";
		Объект.АвторПутьКДанным = "";
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Объект.Автор = ВыбранноеЗначение;
		Объект.АвторПутьКДанным = "";
		Объект.АвторПроизвольныйКод = "";
		
	Иначе
		
		// проверим соответствие типов
		Если НЕ ВыбранноеЗначение.ТипМетаданного.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
			ВывестиСообщениеПол(НСтр("ru='Выбранный реквизит не является ссылкой на элемент справочника ""Пользователи""!'"));
			Возврат;
		КонецЕсли;
				
		Объект.Автор = ВыбранноеЗначение.Поле + " (Владелец)";
		Объект.АвторПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
		Объект.АвторПроизвольныйКод = "";
		
	КонецЕсли;
	
КонецПроцедуры //АвторОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Автор".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ВажностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.Важность.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.Важность);
	ПараметрыОбработки.Вставить("ИмяТипа","Scan_Важность");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.ВажностьПроизвольныйКод),Объект.ВажностьПроизвольныйКод,"Важность"));
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //ВажностьНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Важность".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ВажностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		Объект.ВажностьПроизвольныйКод = ВыбранноеЗначение;
		Объект.Важность = "<Произвольное выражение>";
		
	КонецЕсли;
	
КонецПроцедуры //ВажностьОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Учетная запись".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура эпУчетнаяЗаписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.эпУчетнаяЗапись.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	Если СсылочныйТипИсточника Тогда
		СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.РеквизитОбъектаИсточника"));
	КонецЕсли;
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.эпУчетнаяЗапись);
	ПараметрыОбработки.Вставить("ИмяФормы","Справочник.УчетныеЗаписиЭлектроннойПочты");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.эпУчетнаяЗаписьПроизвольныйКод),Объект.эпУчетнаяЗаписьПроизвольныйКод,"УчетнаяЗапись"));
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //эпУчетнаяЗаписьНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Учетная запись".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура эпУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		Объект.эпУчетнаяЗаписьПроизвольныйКод = ВыбранноеЗначение;
		Объект.эпУчетнаяЗапись = "<Произвольное выражение>";
		Объект.эпУчетнаяЗаписьПутьКДанным = "";
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Объект.эпУчетнаяЗапись = ВыбранноеЗначение;
		Объект.эпУчетнаяЗаписьПутьКДанным = "";
		Объект.эпУчетнаяЗаписьПроизвольныйКод = "";
		
	Иначе
		
		// проверим соответствие типов
		Если НЕ ВыбранноеЗначение.ТипМетаданного.СодержитТип(Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")) Тогда
			ВывестиСообщениеПол(НСтр("ru='Выбранный реквизит не является ссылкой на элемент справочника ""Пользователи""!'"));
			Возврат;
		КонецЕсли;
				
		Объект.эпУчетнаяЗапись = ВыбранноеЗначение.Поле + " (Владелец)";
		Объект.эпУчетнаяЗаписьПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
		Объект.эпУчетнаяЗаписьПроизвольныйКод = "";
		
	КонецЕсли;
	
КонецПроцедуры //эпУчетнаяЗаписьОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Учетная запись".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.Тема.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.Тема);
	ПараметрыОбработки.Вставить("ИмяТипа","СтрокаТема");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.ТемаПроизвольныйКод),Объект.ТемаПроизвольныйКод,"Тема"));
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //ТемаНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Учетная запись".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		Объект.ТемаПроизвольныйКод = ВыбранноеЗначение;
		Объект.Тема = "<Произвольное выражение>";
		
	КонецЕсли;
	
КонецПроцедуры //ТемаОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Комментарий".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.Комментарий.СписокВыбора.Очистить();
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение"));
	СписокВидовПравил.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод"));
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПродолжитьВыборРеквизита",Элементы.Комментарий);
	ПараметрыОбработки.Вставить("ИмяТипа","СтрокаКомментарий");
	ПараметрыОбработки.Вставить("ИмяРеквизита",?(ЗначениеЗаполнено(Объект.КомментарийПроизвольныйКод),Объект.КомментарийПроизвольныйКод,"Комментарий"));
	ОписаниеПродолжениеВыбора = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборРеквизита", ЭтотОбъект, ПараметрыОбработки);
	
	ПоказатьВыборИзСписка(ОписаниеПродолжениеВыбора,СписокВидовПравил, Элемент);
	
КонецПроцедуры //КомментарийНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Комментарий".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура КомментарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		Объект.КомментарийПроизвольныйКод = ВыбранноеЗначение;
		Объект.Комментарий = "<Произвольное выражение>";
		
	КонецЕсли;
	
КонецПроцедуры //КомментарийОбработкаВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Формат текста".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура эпФорматТекстаПриИзменении(Элемент)
	
	Если Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") И НЕ ПустаяСтрока(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст()) Тогда
		
		//ВзаимодействияКлиент.ВопросПриИзмененииФорматаСообщенияНаОбычныйТекст(ЭтотОбъект);
		
	ИначеЕсли Объект.эпФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") Тогда
		
		ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		ТекстПисьмаФорматированныйДокумент.Удалить();
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
		
	Иначе
		
		ТекстПисьмаФорматированныйДокумент.Добавить(ТекстПисьма);
		ТекстПисьма = "";
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		Если ПроизвольныйКод Тогда
			Элементы.ГруппаВидТекста.Заголовок = "Точное значение"; 
			Элементы.ТекстПисьмаФорматированныйДокументПроизвольнаяТемаПисьма.Пометка = Ложь;
			Элементы.ТекстПисьмаКонтекстноеМенюПроизвольнаяТемаПисьма.Пометка = Ложь;
			Элементы.ТочнаяТемаПисьма.Пометка = Истина;
			ПроизвольныйКод = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //эпФорматТекстаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вид привила".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПолучателиПисьмаВидПравилаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные; 
	
	Если ТекущиеДанные.ВидПравила=ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение") Тогда
		ТекущиеДанные.АдресЭлектроннойПочты = ""; 
	Иначе
		ТекущиеДанные.АдресЭлектроннойПочты = Неопределено;
	КонецЕсли;
	
	ТекущиеДанные.Представление   = "";
	ТекущиеДанные.ПроизвольныйКод = "";

КонецПроцедуры //ПолучателиПисьмаВидПравилаПриИзменении()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Адрес электронной почты".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ПолучателиПисьмаАдресЭлектроннойПочтыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ТочноеЗначение") Тогда
		
		РедактироватьСписокПолучателей();
		
	ИначеЕсли ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.Scan_ВидыПравил.ПроизвольныйКод") Тогда
		
		// Сформируем параметры открытия
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("Текст", ?(ЗначениеЗаполнено(ТекущиеДанные.ПроизвольныйКод),ТекущиеДанные.ПроизвольныйКод,"АдресЭлектроннойПочты"));
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры //ПолучателиПисьмаАдресЭлектроннойПочтыНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Адрес электронной почты".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПолучателиПисьмаАдресЭлектроннойПочтыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
		ТекущиеДанные.ПроизвольныйКод = ВыбранноеЗначение;
		ТекущиеДанные.АдресЭлектроннойПочты = "<Произвольное выражение>";
		ТекущиеДанные.Представление         = "";
	
	КонецЕсли;
	
КонецПроцедуры //ПолучателиПисьмаАдресЭлектроннойПочтыОбработкаВыбора(0

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НаименованиеНачалоВыбораНаСервере(ПараметрыДействия=Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Справочники.Scan_ДействияНаЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект,ПараметрыДействия);
	
КонецПроцедуры // НаименованиеНачалоВыбораНаСервере()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСформироватьНаименование", ЭтотОбъект);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Сформировать новое наименование?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		//Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // НаименованиеНачалоВыбора()

&НаКлиенте
Процедура ВложенияФорматПФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработчикЗакрытияФормы", ЭтотОбъект, ПараметрыФормы);
	ОткрытьФорму("ОбщаяФорма.ВыборФорматаВложений",ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если Параметры.ДополнительныеПараметры.Свойство("Источник") Тогда
		Источник = Параметры.ДополнительныеПараметры.Источник;
		СсылочныйТипИсточника = НЕ (Источник.ЗначениеПустойСсылки = Неопределено);
	КонецЕсли;
	Если СсылочныйТипИсточника Тогда
		ЗаполнитьСтраницуВложений(Источник.ЗначениеПустойСсылки);	
	КонецЕсли;
	Если Параметры.Свойство("ВидДействия") Тогда
		Объект.ВидДействия = Параметры.ВидДействия;
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Справочники.Scan_ДействияНаЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект);
		КонецЕсли;
	КонецЕсли;
	
	ВидДействияУст = Объект.ВидДействия;
	
	Текст = ?(ЗначениеЗаполнено(Объект.эпТекстПисьмаПроизвольныйКод),Объект.эпТекстПисьмаПроизвольныйКод,Объект.эпТекстПисьма);
	Если Объект.эпФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		СтруктураВложенийСодержание = Новый Структура;
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Текст, СтруктураВложенийСодержание);
	Иначе
		ТекстПисьма = Текст;
	КонецЕсли;
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Дальнейшие операции выпольняются только для новых объектов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриОткрытии(ЭтотОбъект, Отказ) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Настроим командную панель формы
	//ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект,"ПолучателиПисьма");
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события возникающего на клиенте при закрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриЗакрытии(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы в контексте сервера.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.Scan_АдреснаяКнига") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") И ТипЗнч(ВыбранноеЗначение) <> Тип("Соответствие") Тогда
			Возврат;
		КонецЕсли;
		
		// Получим список адресатов
		ЗаполнитьПодобранныхПолучателей(ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  ИмяСобытия        - Строка    - Имя, идентифицирующее событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия = Неопределено)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Если оповещение сводиться к выбору значения, то переходим в обработчик другого события
	Если ПараметрыДействия.Свойство("ВыбранноеЗначение") Тогда
		ОбработкаВыбораНаСервере(ПараметрыДействия.ВыбранноеЗначение, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаОповещенияНаСервере()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Производим подготовку параметров события для обработки в контексте сервера
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект - Объект, который будет прочитан.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	 	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Обработчик события возникающего на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Отказ           - Булево         - Признак отказа от записи.
//  ПараметрыЗаписи - Структура      - Структура, содержащая параметры записи.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПередЗаписью(ЭтотОбъект, Отказ ,ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()

// Обработчик события возникающего на сервере перед записью объекта.
//
// Параметры:
//  Отказ           - Булево           - Признак отказа от создания формы.
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Подготовим документ HTML из содержимого форматированного документа
	Если Объект.эпФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		
		//Содержание
		СтруктураВложений = Новый Структура;
		ТекстHTML = "";
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, СтруктураВложений);
		ТекущийОбъект.эпТекстПисьма = ТекстHTML; 
		ТекущийОбъект.эпТекстПисьмаПроизвольныйКод  = "";
		
	Иначе
		
		Если ПроизвольныйКод Тогда
			ТекущийОбъект.эпТекстПисьмаПроизвольныйКод = ТекстПисьма;
			ТекущийОбъект.эпТекстПисьма = "";
		Иначе
			ТекущийОбъект.эпТекстПисьма = ТекстПисьма;
			ТекущийОбъект.эпТекстПисьмаПроизвольныйКод = "";
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ПередЗаписьюНаСервере()

// Обработчик события возникающего на сервере после записи объекта и после завершения транзакции.
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	 	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

// Обработчик события возникающего на клиенте после записи объекта и после завершения транзакции.
//
// Параметры:
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик события возникающего на сервере при необходимости проверки заполнения реквизитов при записи в форме.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	//УправлениеДиалогомСправочникаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Вызываем общий обработчик события
	//УправлениеДиалогомСправочникаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()



////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ


