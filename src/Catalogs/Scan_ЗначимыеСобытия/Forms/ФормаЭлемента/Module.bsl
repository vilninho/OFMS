// Модуль формы элемента справочника "Значимые события"


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция формирует значение нового ключа строки табличной части.
//
&НаСервере
Функция ПолучитьНовыйКлючСтроки() Экспорт
	
	ТаблицаУсловий = Объект.Условия.Выгрузить();
	СписокКлючей = Новый СписокЗначений;
	СписокКлючей.ЗагрузитьЗначения(ТаблицаУсловий.ВыгрузитьКолонку("КлючСтроки"));
	СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	МаксКлюч = СписокКлючей[0].Значение + 1;
	
	Возврат МаксКлюч;
	
КонецФункции // ПолучитьНовыйКлючСтроки(

// Процедура производит формирование списка доступных видов сравнения для выбранного реквизита
//
&НаКлиенте
Процедура УстановитьВидыСравнения(ТипЗначения, ВидСравнения, ЭлементУправления)
	
	// Производим начальную инициализацию списка доступных видов сравнений
	ЭлементУправления.СписокВыбора.Очистить();
	ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Равно"));
	ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.НеРавно"));
	
	// Добавляем виды сравнения на больше/меньше
	Если ТипЗначения.СодержитТип(Тип("Строка")) ИЛИ ТипЗначения.СодержитТип(Тип("Число")) ИЛИ ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Меньше"));
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.МеньшеИлиРавно"));
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Больше"));
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.БольшеИлиРавно"));
	КонецЕсли;
	
	// Добавляем вид сравнения на содержит
	Если ТипЗначения.СодержитТип(Тип("Строка")) Тогда
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Содержит"));
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.НеСодержит"));
	КонецЕсли;
	
	// Добавляем обязательный вид сравнения на вхождение в список
	ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.ВСписке"));
	ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.НеВСписке"));
	
	// Для ссылок добавляем проверку на вхождение в иерархию
	Если ТипЗначения.СодержитТип(Тип("Строка")) ИЛИ ТипЗначения.СодержитТип(Тип("Число")) ИЛИ ТипЗначения.СодержитТип(Тип("Дата")) ИЛИ ТипЗначения.СодержитТип(Тип("Булево")) Тогда
		// Не ссылочный тип данных
	Иначе
		Если ИерархическийОбъектМетаданных(ТипЗначения) Тогда
			ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.ВГруппе"));
			ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.НеВГруппе"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Производим поиск текущего установленного вида сравнения
	ЭлементСпискаЗначений = ЭлементУправления.СписокВыбора.НайтиПоЗначению(ВидСравнения);
	
	// Проверяем соответствие текущему списку доступных видов
	Если ЭлементСпискаЗначений=Неопределено Тогда
		ВидСравнения = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Равно");
		УсловияВидСравненияПриИзменении(Элементы.УсловияВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидыСравнения()

// Процедура выполняет приведение типа поля "Значение" в соответствие с выбранным реквизитом и видом сравнения
//
&НаКлиенте
Процедура УстановитьЗначениеПоля(ТипЗначения, ВидСравнения, Значение, ЭлементУправления, СтрокаТабличнойЧасти)
	
	// Устанавливаем выбор только групп для выда сравнения "В группе"
	Если ВидСравнения=ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.ВГруппе") ИЛИ ВидСравнения=ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.НеВГруппе") Тогда
		ЭлементУправления.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		ЭлементУправления.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	КонецЕсли;
	
	ЭлементУправления.ОграничениеТипа = ТипЗначения;
	СтрокаТабличнойЧасти.ЗначениеСравнения = ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Значение);
	
	Если ВидСравнения=ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.ВСписке") ИЛИ ВидСравнения=ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.НеВСписке") Тогда
		ТипЗначения = Новый ОписаниеТипов("СписокЗначений");
		ЭлементУправления.ОграничениеТипа = ТипЗначения;
		Если НЕ ТипЗнч(СтрокаТабличнойЧасти.ПредставлениеЗначения) = Тип("СписокЗначений") Тогда
			СтрокаТабличнойЧасти.ПредставлениеЗначения =  ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Новый СписокЗначений);
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ПредставлениеЗначения = ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Значение);
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеПоля()

// Функция осуществляет проверку метаданных на использование иерархии по заданному типу значения
//
&НаСервере
Функция ИерархическийОбъектМетаданных(ТипЗначения)
	
	Для Каждого ЭлементСпискаТипов Из ТипЗначения.Типы() Цикл
		
		// Получим метаданные для текущего типа
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ЭлементСпискаТипов);
		
		// Добавляем вид отбора для иерархических справочников и планов видов характеристик
		Если (Метаданные.Справочники.Содержит(ОбъектМетаданных) ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)) И ОбъектМетаданных.Иерархический Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ИерархическийОбъектМетаданных()

// Процедура осуществляет удаление строк таблицы "Значения списков" 
// по заданному ключу
//
&НаКлиенте
Процедура ОчиститьЗначенияСписков(КлючСтроки)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	СтрокиДляУдаления = Объект.ЗначенияСписков.НайтиСтроки(Отбор);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ЗначенияСписков.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры // ОчиститьЗначенияСписков()

// Функция формирует список значений по заданному ключу.
//
&НаКлиенте
Функция ПолучитьСписокЗначенийПоКлючу(КлючСтроки)
	
	СписокЗначенийПоКлючу = Новый СписокЗначений;
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	МассивЗначений = Объект.ЗначенияСписков.НайтиСтроки(Отбор);
	Для Каждого ЭлементМассива Из МассивЗначений Цикл
		СписокЗначенийПоКлючу.Добавить(ЭлементМассива.Значение);
	КонецЦикла;
	
	Возврат СписокЗначенийПоКлючу;
	
КонецФункции // ПолучитьСписокЗначенийПоКлючу()

// Процедура осуществляет добавление строк таблицы "Значения списков" 
// из переданного списка значений
//
&НаКлиенте
Процедура ЗаписатьЗначенияСписков(СтрокаТабличнойЧасти, СписокЗначений)
	
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		Если Объект.ЗначенияСписков.НайтиСтроки(Новый Структура("Значение",ЭлементСписка.Значение)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ЗначенияСписков.Добавить();
		НоваяСтрока.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
		НоваяСтрока.Значение   = ЭлементСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьЗначенияСписков()

// Процедура обновление значений реквизита "Представление значения"
//
&НаСервере
Процедура ОбновитьПредставленияСписков()
	
	Для Каждого СтрокаУсловий Из Объект.Условия Цикл
		Если СтрокаУсловий.ВидСравнения = Перечисления.Scan_ВидСравнения.ВСписке
			Или СтрокаУсловий.ВидСравнения = Перечисления.Scan_ВидСравнения.НеВСписке Тогда
			
			Отбор = Новый Структура("КлючСтроки", СтрокаУсловий.КлючСтроки);
			МассивЗначений = Объект.ЗначенияСписков.НайтиСтроки(Отбор);
			ПредставлениеСписка = Новый СписокЗначений;
			Для Каждого ЭлементМассива Из МассивЗначений Цикл
				ПредставлениеСписка.Добавить(ЭлементМассива.Значение);
			КонецЦикла;
			
			СтрокаУсловий.ПредставлениеЗначения = ПредставлениеСписка;
			
		Иначе
			СтрокаУсловий.ПредставлениеЗначения = СтрокаУсловий.ЗначениеСравнения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПредставленияСписков()

// Функция возвращает текст произвольного условия по умолчанию
&НаКлиенте
Функция ПолучитьТекстПроизвольногоУсловияПоУмолчанию()
	
	ТекстУсловия = "/////////////////////////////////////////////////////////////////////////////////////////////////////////////";
	ТекстУсловия = ТекстУсловия + Символы.ПС + "// В тексте условия обязательно должна присутствовать предопределенная переменная <Результат>.";
	ТекстУсловия = ТекстУсловия + Символы.ПС + "// По значению этой переменной будет определяется истинность условия."; 
	ТекстУсловия = ТекстУсловия + Символы.ПС + "//"; 
	ТекстУсловия = ТекстУсловия + Символы.ПС + "// Для доступа к объекту-источнику необходимо использовать предопределенную переменную <Объект>"; 
	ТекстУсловия = ТекстУсловия + Символы.ПС + "/////////////////////////////////////////////////////////////////////////////////////////////////////////////";
	ТекстУсловия = ТекстУсловия + Символы.ПС;
	ТекстУсловия = ТекстУсловия + Символы.ПС; 
	ТекстУсловия = ТекстУсловия + "Результат = Ложь;"; 
	ТекстУсловия = ТекстУсловия + Символы.ПС;  
	
	Возврат ТекстУсловия;
	
КонецФункции // ПолучитьТекстПроизвольногоУсловияПоУмолчанию() 

&НаСервереБезКонтекста
Функция ПолучитьВидДействия(Действи)
	
	Возврат Действи.ВидДействия;
	
КонецФункции //ПолучитьКлючПоЗначениюВСоответствии()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСформироватьНаименование(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияСформироватьНаименование()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияЗаполнение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Очистим табличную часть "Условия"
		Объект.Условия.Очистить();
		
		Если ДополнительныеПараметры = "ОчиститьУсловияИЗаполнить" Тогда
			
			ЗаполнитьРеквизитамиНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияЗаполнение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСменитьИсточник(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		
		Объект.Источник = ИсточникУст;
		
	Иначе
		
		// Очистим табличную часть "Условия"
		Объект.Условия.Очистить();
		Объект.Действия.Очистить();
		Объект.ЗначенияСписков.Очистить();
		ИсточникПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияСменитьИсточник()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияДействия(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Индекс = Объект.Действия.Индекс(Элементы.Действия.ТекущиеДанные);
		Объект.Действия.Удалить(Индекс);
	Иначе
		ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
		ТекущиеДанные.Действие = РезультатОповещения;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияДействия()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПредставлениеЗначения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОповещения) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийСписокЗначений = ПолучитьСписокЗначенийПоКлючу(ТекущиеДанные.КлючСтроки);
		Если НЕ РезультатОповещения = Неопределено Тогда
			ОчиститьЗначенияСписков(ТекущиеДанные.КлючСтроки);
			ЗаписатьЗначенияСписков(ТекущиеДанные, РезультатОповещения);
			ОбновитьПредставленияСписков();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Условия.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры // ОбработкаРезультатаОповещенияПредставлениеЗначения()





////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СЛУЖЕБНОГО ПРОГРАММНОГО ИНТЕРФЕЙСА

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	//УправлениеДиалогомСправочникаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	//УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Источник) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект.Источник.ЗначениеПустойСсылки)) Тогда
		Элементы.ТолькоНовыйОбъект.Видимость = Истина;
	Иначе
		Элементы.ТолькоНовыйОбъект.Видимость = Ложь;
		Объект.ТолькоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
		Элементы.Условия.ТолькоПросмотр = Ложь;
		Элементы.Событие.ТолькоПросмотр = Ложь;
		Элементы.УсловияПодменюЗаполнения.Доступность= Истина;
		Элементы.ПроизвольноеУсловие.Доступность= Истина;
	Иначе
		Элементы.Условия.ТолькоПросмотр = Истина;
		Элементы.Событие.ТолькоПросмотр = Истина;
		Элементы.УсловияПодменюЗаполнения.Доступность= Ложь;
		Элементы.ПроизвольноеУсловие.Доступность= Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
		
		ИмяБазовогоТипа = "";
		Позиция = Найти(Объект.Источник.ПолноеИмя, ".");
		Если Позиция > 0 Тогда 
			ИмяБазовогоТипа = Лев(Объект.Источник.ПолноеИмя, Позиция - 1);
		Иначе
			ИмяБазовогоТипа = Объект.Источник.ПолноеИмя;
		КонецЕсли;
		
		// Ограничим возможные виды событий
		Элементы.Событие.СписокВыбора.Очистить();
		Если ИмяБазовогоТипа = "Справочник" ИЛИ ИмяБазовогоТипа = "Справочники" ИЛИ ИмяБазовогоТипа = "ПланВидовХарактеристик" ИЛИ ИмяБазовогоТипа = "ПланыВидовХарактеристик" Или ИмяБазовогоТипа = "ПланСчетов" ИЛИ ИмяБазовогоТипа = "ПланыСчетов" Тогда
			Элементы.Событие.СписокВыбора.Добавить("ПриЗаписи","При записи");
			Элементы.Событие.СписокВыбора.Добавить("ПередУдалением", "Перед удалением");
		ИначеЕсли ИмяБазовогоТипа = "Документ" ИЛИ ИмяБазовогоТипа = "Документы" Тогда
			Элементы.Событие.СписокВыбора.Добавить("ПриЗаписи", "При записи");
			Элементы.Событие.СписокВыбора.Добавить("ПередУдалением", "Перед удалением");
			Элементы.Событие.СписокВыбора.Добавить("ОбработкаПроведения", "Обработка проведения");
			Элементы.Событие.СписокВыбора.Добавить("ОбработкаУдаленияПроведения", "Обработка удаления проведения");
		ИначеЕсли ИмяБазовогоТипа = "ПланОбмена" ИЛИ ИмяБазовогоТипа = "ПланыОбмена" Тогда
			Элементы.Событие.СписокВыбора.Добавить("ПриЗаписи","При записи");
			Элементы.Событие.СписокВыбора.Добавить("ПередУдалением", "Перед удалением");
			Элементы.Событие.СписокВыбора.Добавить("ПриОтправкеДанныхГлавному","При отправке данных главному");
			Элементы.Событие.СписокВыбора.Добавить("ПриОтправкеДанныхПодчиненному","При отправке данных подчиненному");
			Элементы.Событие.СписокВыбора.Добавить("ПриОтправкеДанныхУзлаПодчиненному", "При отправке данных узла подчиненному");
			Элементы.Событие.СписокВыбора.Добавить("ПриПолученииДанныхОтГлавного", "При получении данных от главного");
			Элементы.Событие.СписокВыбора.Добавить("ПриПолученииДанныхОтПодчиненного", "При получении данных от подчиненного");
			Элементы.Событие.СписокВыбора.Добавить("ПриПолученииДанныхУзлаОтГлавного","При получении данных узла от главного");
		Иначе
			Элементы.Событие.СписокВыбора.Добавить("ПриЗаписи", "При записи");
		КонецЕсли;
		
		ПолноеИмяИсточника = Объект.Источник.ПолноеИмя;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

// Производит настройку блокировки элементов формы.
//
&НаСервере
Процедура БлокироватьЭлементыФормы()
	//
	//// Составим список элементов для блокировки
	//СписокРеквизитов = Новый СписокЗначений();
	//
	//// Заблокируем элементы формы
	//УправлениеДиалогомСервер.БлокироватьЭлементыФормы(ЭтотОбъект,СписокРеквизитов);
	
КонецПроцедуры // БлокироватьЭлементыФормы()

// Обработчик события возникающего при нажатии программно добавленной кнопки в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаКомандыФормыНаСервере(ИмяКоманды, ПараметрыДействия = Неопределено)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаКомандыФормы(ЭтотОбъект, ИмяКоманды, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаКомандыФормыНаСервере()

// Подключаемый обработчик, вызывающий общую процедуру для обработки команды панели действий.
// 
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	//
	//// Определим структуру параметров обработки текущего события
	//ПараметрыДействия = Новый Структура;
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Обработаем событие в контексте сервера
	//ОбработкаКомандыФормыНаСервере(Команда.Имя, ПараметрыДействия);
	//
	//// Вызываем обработчик результата выполнения
	//ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	//
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

// Обработчик события возникающего при оповещении данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	//
	//// Вызываем общий обработчик результата выполнения действия
	//УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Обработчик события возникающего на клиенте при выполнении команды "Произвольное условие".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПроизвольноеУсловие(Команда)
	
	// Получаем строку и устанавливаем ее атрибуты
	НоваяСтрока = Объект.Условия.Добавить();
	НоваяСтрока.Использование = Истина;
	НоваяСтрока.ВидУсловия    = Истина;
	НоваяСтрока.ТекстПроизвольногоУсловия  = ПолучитьТекстПроизвольногоУсловияПоУмолчанию();
	НоваяСтрока.Представление = "<Произвольное выражение>";
	Элементы.Условия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры // ПроизвольноеУсловие()

// Обработчик события возникающего на клиенте при выполнении команды "Очистить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Очистить(Команда)
	
	Если Объект.Условия.Количество()>0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияЗаполнение", ЭтотОбъект);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Очистить табличную часть ""Условия""?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры //Очистить()

// Обработчик события возникающего на клиенте при выполнении команды "ЗаполнитьРеквизитами".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура ЗаполнитьРеквизитамиНаСервере()
	
	ДеревоРеквизитов = Scan_ЗначимыеСобытия.ПолучитьДеревоМетаданныхОбъекта(Объект.Источник);
	Корень = ДеревоРеквизитов.Строки[0];
	Для каждого Строка ИЗ Корень.Строки Цикл
		Если Строка.ВидМетаданного  = "ТабличнаяЧасть" Тогда
			Для каждого СтрокаТЧ ИЗ Строка.Строки Цикл
				
				НовоеУсловие = Объект.Условия.Добавить();
				НовоеУсловие.Представление = СтрокаТЧ.Поле;
				НовоеУсловие.ПутьКДанным = СтрокаТЧ.ИмяМетаданного;
				
				// Сохраняем тип выбранного значения
				ОписаниеТипа = Новый ОписаниеТипов(СтрокаТЧ.ТипМетаданного); 
				НовоеУсловие.ЗначениеСравнения = ОписаниеТипа.ПривестиЗначение(); 
				НовоеУсловие.ПредставлениеЗначения = ОписаниеТипа.ПривестиЗначение();
				НовоеУсловие.ВидСравнения = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Равно");
				
			КонецЦикла;
		Иначе
			
			НовоеУсловие = Объект.Условия.Добавить();
			НовоеУсловие.Представление = Строка.Поле;
			НовоеУсловие.ПутьКДанным = Строка.ИмяМетаданного;
			
			// Сохраняем тип выбранного значения
			ОписаниеТипа = Новый ОписаниеТипов(Строка.ТипМетаданного); 
			НовоеУсловие.ЗначениеСравнения = ОписаниеТипа.ПривестиЗначение(); 
			НовоеУсловие.ПредставлениеЗначения = ОписаниеТипа.ПривестиЗначение();
			НовоеУсловие.ВидСравнения = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Равно");
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим возможно в качестве источника передана константа
	Если Корень.ВидМетаданного = "Константа" Тогда
		
		НовоеУсловие = Объект.Условия.Добавить();
		НовоеУсловие.Представление = Корень.Поле;
		НовоеУсловие.ПутьКДанным = Корень.ИмяМетаданного;
		
		// Сохраняем тип выбранного значения
		ОписаниеТипа = Новый ОписаниеТипов(Корень.ТипМетаданного); 
		НовоеУсловие.ЗначениеСравнения = ОписаниеТипа.ПривестиЗначение(); 
		НовоеУсловие.ПредставлениеЗначения = ОписаниеТипа.ПривестиЗначение();
		НовоеУсловие.ВидСравнения = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Равно");
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьРеквизитамиНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "ЗаполнитьРеквизитами".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитами(Команда)
	
	Если ПолноеИмяИсточника = "Константы" ИЛИ ПолноеИмяИсточника = "РегистрыСведений" Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Условия.Количество()>0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияЗаполнение", ЭтотОбъект, "ОчиститьУсловияИЗаполнить");
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Табличная часть ""Условия"" будет очищена. Продолжить?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьРеквизитамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьРеквизитами()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НаименованиеНачалоВыбораНаСервере(ПараметрыДействия=Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Справочники.Scan_ЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект,ПараметрыДействия);
	
КонецПроцедуры // НаименованиеНачалоВыбораНаСервере()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСформироватьНаименование", ЭтотОбъект);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Сформировать новое наименование?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		//Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // НаименованиеНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Источник" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ИсточникПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Справочники.Scan_ЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект,ПараметрыДействия);
	КонецЕсли;
	
	ИсточникУст = Объект.Источник;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	Если Элементы.Событие.СписокВыбора.НайтиПоЗначению(Объект.Событие) = Неопределено И НЕ Объект.Событие = ""Тогда
		Объект.Событие = "";
	КонецЕсли;
	
КонецПроцедуры // ИсточникПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Объект".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ИсточникУст) И НЕ ИсточникУст = Объект.Источник Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСменитьИсточник", ЭтотОбъект);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Смена источника события приведет к очистке таблицы <Условия> и <Действия>. Продолжить?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		// Обработаем событие в контексте сервера
		ИсточникПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры //ИсточникПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Событие" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура СобытиеПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Справочники.Scan_ЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект,ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // СобытиеПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Событие".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СобытиеПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	СобытиеПриИзмененииНаСервере();
	
КонецПроцедуры //СобытиеПриИзменении()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ФОРМЫ "УСЛОВИЯ"

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Представление".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура УсловияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	ТекущаяДанные = Элементы.Условия.ТекущиеДанные;
	
	Если ТекущаяДанные.ВидУсловия Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Источник", Объект.Источник);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("Текст", ТекущаяДанные.ТекстПроизвольногоУсловия);
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.Scan_ЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Источник", Объект.Источник);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.Scan_ЗначимыеСобытия.Форма.ВыборРеквизитаОбъекта", ПараметрыОткрытия, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // УсловияВыражениеНачалоВыбора()

// Процедура-обработчик события "ПриНачалеРедактирования" таблицы "Условия"
//
&НаКлиенте
Процедура УсловияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если ПолноеИмяИсточника = "Константы" ИЛИ ПолноеИмяИсточника = "РегистрыСведений" Тогда
		СтрокаТабличнойЧасти.ВидУсловия = Истина;
		СтрокаТабличнойЧасти.ТекстПроизвольногоУсловия  = ПолучитьТекстПроизвольногоУсловияПоУмолчанию();
	КонецЕсли;
	
	// Производим первоначальное заполнение строки таблицы условий
	Если НоваяСтрока И (НЕ Копирование) Тогда
		СтрокаТабличнойЧасти.ВидСравнения        = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.Равно");
		СтрокаТабличнойЧасти.КлючСтроки          = ПолучитьНовыйКлючСтроки();
	КонецЕсли;
	
	Если Копирование Тогда
		СтрокаТабличнойЧасти.КлючСтроки          = ПолучитьНовыйКлючСтроки();
	КонецЕсли;
	
	// Производим получение дополнительных реквизитов условия
	Если НЕ СтрокаТабличнойЧасти.ВидУсловия Тогда
		
		// Формируем структуру переменной
		РеквизитыУсловия = Новый Структура("ТипЗначения, Значение");
		
		// Заполняем значение реквизитов
		Если ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения) = Тип("Неопределено") Тогда
			РеквизитыУсловия.ТипЗначения = Новый ОписаниеТипов("Неопределено");
			РеквизитыУсловия.Значение = Неопределено;
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения));
			РеквизитыУсловия.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			РеквизитыУсловия.Значение = СтрокаТабличнойЧасти.ЗначениеСравнения;
		КонецЕсли;
		
		// Формируем список доступных видов условий
		УстановитьВидыСравнения(РеквизитыУсловия.ТипЗначения, СтрокаТабличнойЧасти.ВидСравнения, Элементы.УсловияВидСравнения);
		
		// Приводим поле выбора значения к соответствующему виду
		УстановитьЗначениеПоля(РеквизитыУсловия.ТипЗначения, СтрокаТабличнойЧасти.ВидСравнения, РеквизитыУсловия.Значение, Элементы.УсловияПредставлениеЗначения, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры // УсловияПриНачалеРедактирования()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вид сравнения".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура УсловияПредставлениеЗначенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
	ТекущиеДанные.ЗначениеСравнения = ТекущиеДанные.ПредставлениеЗначения;
	ТекущиеДанные.Использование = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры //УсловияПредставлениеЗначенияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "яПредставление".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура УсловияПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
	ТекущиеДанные.Использование = Истина;
	
КонецПроцедуры //УсловияПредставлениеПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вид сравнения".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура УсловияВидСравненияПриИзменении(Элемент)
	
	// Получаем строку табличной части
	СтрокаТабличнойЧасти = Элементы.Условия.ТекущиеДанные;
	СтрокаТабличнойЧасти.Использование = Истина;
	
	// Формируем структуру переменной
	РеквизитыУсловия = Новый Структура("ТипЗначения, Значение");
	
	// Заполняем значение реквизитов
	Если ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения) = Тип("Неопределено") Тогда
		РеквизитыУсловия.ТипЗначения = Новый ОписаниеТипов("Неопределено");
		РеквизитыУсловия.Значение = Неопределено;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения));
		РеквизитыУсловия.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		РеквизитыУсловия.Значение = СтрокаТабличнойЧасти.ЗначениеСравнения;
	КонецЕсли;
	
	// Приводим поле выбора значения к соответствующему виду
	УстановитьЗначениеПоля(РеквизитыУсловия.ТипЗначения, СтрокаТабличнойЧасти.ВидСравнения, РеквизитыУсловия.Значение, Элементы.УсловияПредставлениеЗначения, СтрокаТабличнойЧасти);
	
	Если НЕ (СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.ВСписке") 
		ИЛИ СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.НеВСписке")) Тогда
		
		ОчиститьЗначенияСписков(СтрокаТабличнойЧасти.КлючСтроки);
		
	КонецЕсли;
	
КонецПроцедуры // УсловияВидСравненияПриИзменении()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Представление".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура УсловияПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидУсловия Тогда
		ТекущиеДанные.ТекстПроизвольногоУсловия = ВыбранноеЗначение;
		ВыбранноеЗначение = "<Произвольное выражение>";
	Иначе
		
		// Сохраняем тип выбранного значения
		ОписаниеТипа = Новый ОписаниеТипов(ВыбранноеЗначение.ТипМетаданного); 
		
		ТекущиеДанные.ЗначениеСравнения = ОписаниеТипа.ПривестиЗначение(); 
		ТекущиеДанные.ПредставлениеЗначения = ОписаниеТипа.ПривестиЗначение();
		ТекущиеДанные.Использование = Истина;
		ТекущиеДанные.ПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
		Элементы.УсловияПредставлениеЗначения.ВыбиратьТип = Ложь;
		
		// Производим коррекцию выбранного значения
		Если ВыбранноеЗначение.ВидМетаданного = "РеквизитТЧ" Тогда
			ВыбранноеЗначение = ВыбранноеЗначение.Поле + " (" + ВыбранноеЗначение.ИмяТЧ + ")";
		Иначе
			ВыбранноеЗначение = ВыбранноеЗначение.Поле;
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.ЗначениеСравнения));
		
		// Формируем список доступных видов условий
		УстановитьВидыСравнения(Новый ОписаниеТипов(МассивТипов), ТекущиеДанные.ВидСравнения, Элементы.УсловияВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // УсловияПредставлениеОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Представление значения".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура УсловияПредставлениеЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Условия.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.ВСписке") 
		ИЛИ СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.Scan_ВидСравнения.НеВСписке") Тогда
		
		СтандартнаяОбработка = Ложь;
		ТолькоГруппы = Ложь;
		СписокВыбора =  СтрокаТабличнойЧасти.ПредставлениеЗначения;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения));
		СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов(МассивТипов), Неопределено, ТолькоГруппы);
			
		// Формируем описание обработчика перехвата закрытия формы
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПредставлениеЗначения", ЭтотОбъект);
		
		ОткрытьФорму("ОбщаяФорма.Scan_ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры //УсловияПредставлениеЗначенияНачалоВыбора()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Условия".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - Выбранное значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура УсловияПредставлениеЗначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
	ТекущиеДанные.ЗначениеСравнения =ВыбранноеЗначение;
	ТекущиеДанные.Использование = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры // УсловияПредставлениеЗначенияОбработкаВыбора()

// Процедура-обработчик события "ПередУдалением" таблицы "Условия"
//
&НаКлиенте
Процедура УсловияПередУдалением(Элемент, Отказ)
	
	СтрокаТабличнойЧасти = Элементы.Условия.ТекущиеДанные;
	ОчиститьЗначенияСписков(СтрокаТабличнойЧасти.КлючСтроки);
	
КонецПроцедуры // УсловияПередУдалением()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ФОРМЫ "ДЕЙСТВИЯ"


// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Представление".
//
// Параметры:
//  Элемент     - ПолеФормы    - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от добавления объекта.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Неопределено; СправочникСсылка.<Имя справочника>;
//                ПланСчетовСсылка.<Имя плана счетов> - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  ЭтоГруппа   - Булево       - Признак добавления группы. 
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура ДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора",Истина);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник",Объект.Источник);
	ПараметрыОткрытия.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	
	// Формируем описание обработчика перехвата закрытия формы
	ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияДействия", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.ФормаВыбора",ПараметрыОткрытия,Элемент,,,,ОписаниеОповещенияВыбораЗначения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ДействияПередНачаломДобавления()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Представление".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока      - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник",Объект.Источник);
	ПараметрыОткрытия.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	ПараметрыОткрытия.Вставить("Ключ",ТекущиеДанные.Действие);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Действие) Тогда
		ВидДействия = ПолучитьВидДействия(ТекущиеДанные.Действие);
		ВыбраннаяФорма = "ФормаЭлемента";
		Если ВидДействия = ПредопределенноеЗначение("Перечисление.Scan_ВидДействияНаЗначимоеСобытие.НаписатьЭлектронноеПисьмо") Тогда
			ВыбраннаяФорма = "ФормаЭлектронногоПисьма";
		ИначеЕсли ВидДействия = ПредопределенноеЗначение("Перечисление.Scan_ВидДействияНаЗначимоеСобытие.НаписатьЭлектронноеПисьмоСВложением") Тогда
			ВыбраннаяФорма = "ФормаЭлектронногоПисьмаСВложением";
		ИначеЕсли ВидДействия = ПредопределенноеЗначение("Перечисление.Scan_ВидДействияНаЗначимоеСобытие.СоздатьИЗаписатьОбъект") Тогда
			ВыбраннаяФорма = "ФормаСозданияОбъекта";
		ИначеЕсли ВидДействия = ПредопределенноеЗначение("Перечисление.Scan_ВидДействияНаЗначимоеСобытие.СоздатьЗаписьЖурналаРегистрации") Тогда
			ВыбраннаяФорма = "ФормаСозданияЗаписиВЖурналРегистрации";
		ИначеЕсли ВидДействия = ПредопределенноеЗначение("Перечисление.Scan_ВидДействияНаЗначимоеСобытие.СоздатьНапоминание") Тогда
			ВыбраннаяФорма = "ФормаСоздатьНапоминание";
		ИначеЕсли ВидДействия = ПредопределенноеЗначение("Перечисление.Scan_ВидДействияНаЗначимоеСобытие.Прочее") Тогда
			ВыбраннаяФорма = "ФормаПроизвольноеВыражение";
		КонецЕсли;
		ОткрытьФорму("Справочник.Scan_ДействияНаЗначимыеСобытия.Форма."+ВыбраннаяФорма+"",ПараметрыОткрытия,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры //ДействияВыбор()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ИсточникУст = Объект.Источник;
	ОбновитьПредставленияСписков();
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Дальнейшие операции выпольняются только для новых объектов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	Scan_СборСтатистики.Scan_ПриОткрытии("Справочники", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриОткрытии(ЭтотОбъект, Отказ) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Настройка кнопок командной панели табличной части
	//ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Действия");
	//ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Условия");
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события возникающего на клиенте при закрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии()
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриЗакрытии(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	//
КонецПроцедуры // ПриЗакрытии()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы в контексте сервера.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	//
	//// Определим структуру параметров обработки текущего события
	//ПараметрыДействия = Новый Структура;
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Обработаем событие в контексте сервера
	//ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	//
	//// Вызываем обработчик результата выполнения
	//ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	//
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  ИмяСобытия        - Строка    - Имя, идентифицирующее событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия=Неопределено)
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Если оповещение сводиться к выбору значения, то переходим в обработчик другого события
	Если ПараметрыДействия.Свойство("ВыбранноеЗначение") Тогда
		ОбработкаВыбораНаСервере(ПараметрыДействия.ВыбранноеЗначение, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаОповещенияНаСервере()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//
	//// Определим структуру параметров обработки текущего события
	//ПараметрыДействия = Новый Структура;
	//
	//// Производим подготовку параметров события для обработки в контексте сервера
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Обработаем событие в контексте сервера
	//ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия);
	//
	//// Вызываем обработчик результата выполнения
	//ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект - Объект, который будет прочитан.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	 	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Обработчик события возникающего на сервере перед записью объекта.
//
// Параметры:
//  Отказ           - Булево           - Признак отказа от создания формы.
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюСправочника(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
  
КонецПроцедуры // ПередЗаписьюНаСервере()

// Обработчик события возникающего на сервере после записи объекта и после завершения транзакции.
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ОбновитьПредставленияСписков();
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

// Обработчик события возникающего на клиенте после записи объекта и после завершения транзакции.
//
// Параметры:
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик события возникающего на сервере при необходимости проверки заполнения реквизитов при записи в форме.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
	//	Возврат;
	//КонецЕсли;
	//
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	//
	//// Вызываем общий обработчик события
	//УправлениеДиалогомСправочникаСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	//
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	//
	//// Вызываем общий обработчик события
	//УправлениеДиалогомСправочникаСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ


