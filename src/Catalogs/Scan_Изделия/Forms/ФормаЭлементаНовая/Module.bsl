
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("Доступность") Тогда
		Элементы.ГруппаФон.ТолькоПросмотр = Истина;
	КонецЕсли; 
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.IDExternalSystemProduct) Тогда
		// Это новый объект не из 1БД
		Объект.СозданВручную = Истина;
	КонецЕсли;
		
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	УправлениеДиалогомНаСервере();   
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.Свойство("МодельПродукта") Тогда
			Если ЗначениеЗаполнено(Параметры.МодельПродукта) Тогда
				Объект.МодельПродукта = Параметры.МодельПродукта;	
			КонецЕсли; 
		КонецЕсли;
		Если Параметры.Свойство("СпецификацияПродукта") Тогда
			Если ЗначениеЗаполнено(Параметры.СпецификацияПродукта) Тогда
				Объект.СпецификацияПродукта = Параметры.СпецификацияПродукта;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ВесПродукта                       = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Вес);
		ДлинаПродукта                     = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Длина);
		ВысотаПродукта                    = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Высота);
		ШиринаПродукта                    = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Ширина);
		ГосударственныйНомер              = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ГосударственныйНомер);
		ГосударственныйНомерДатаПолучения = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ГосударственныйНомерДатаПолучения);
		ГодВыпускаПродукта                = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ГодВыпускаПродукта);
		ДатаВводаДанныхОПробеге           = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ДатаВводаДанныхОПробеге);
		Пробег                            = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Пробег);
		
		Если Не  ЗначениеЗаполнено(ГодВыпускаПродукта) 
			И    Объект.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania 
			И Не Объект.БУ 
			Тогда
			ОбъектКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.FinishDate);
			ГодВыпускаПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(Объект.ЗаказНаЗавод, ОбъектКлючевойДаты, Перечисления.Scan_КлючевыеДаты.FinishDate);		
		КонецЕсли;
		
		НомерБортовогоУстройстваПлатон  = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.НомерБортовогоУстройстваПлатон);
		Объект.МодельПродукта           = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.МодельПродукта);
		//Объект.СпецификацияПродукта     = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.СпецификацияПродукта); //rarus bonmak 19.05.2021 17615
		
		СпецификацияПродукта = Справочники.Scan_СпецификацииПродуктов.ПолучитьСпецификациюПоИзделию(Объект.Ссылка);
		КлиентЗаказаНаЗавод  = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.ЗаказНаЗавод, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент);
		
		Если НЕ Объект.СоглашениеОПоставке.Пустая() Тогда
			СтрокаТЧСоглашения = Объект.СоглашениеОПоставке.СписокПродуктов.Найти(Объект.Ссылка,"Продукт");
			Если НЕ СтрокаТЧСоглашения = Неопределено Тогда
				Драйв = СтрокаТЧСоглашения.ПроцентДрайв;
				СпециальныеУсловия = СтрокаТЧСоглашения.СпециальныеУсловия;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//??
	//Если Параметры.Свойство("ОткрытьЗамечания") Тогда
	//	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗамечания;
	//КонецЕсли;
	
	//rarus agar 01.12.2020 16691 ++
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьКарточкуПродукта();
	КонецЕсли;
	//rarus agar 01.12.2020 16691 --
	
	//rarus vikhle 11.11.2021 m 18471 +++
	//ОграничитьДоступностьФормыПриОткрытииИзРабочегоМестаДилера();
	ОграничитьДоступностьФормыДляДилеров();
	//rarus vikhle 11.11.2021 m 18471 ---
	
	Scan_СборСтатистики.ВыполнитьРегистрациюСтатистики("Справочники", "Продукты (scania)", "Открытие элемента");	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Scan_ВспомогательныеФункцииКлиент.ПроверитьПользователяПортала();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//rarus agar 01.12.2020 16691 ++
	ОбновитьКарточкуПродукта();
	//rarus agar 01.12.2020 16691 --
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// rarus agar 02.09.2021 17205 ++
	Если ИмяСобытия = "ЗаписьЭПТС"
		И Параметр = Объект.Ссылка
		Тогда
		ЭтотОбъект.Прочитать();
		УправлениеДиалогомНаСервере();
		ОбновитьКарточкуПродукта();
	КонецЕсли;
	// rarus agar 02.09.2021 17205 --
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// rarus agar 12.08.2021 17205 ++
	Если Не Объект.ЭПТС.Пустая() Тогда
		// rarus agar 17.12.2021 18240 ++
		//РеквизитыЭПТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЭПТС, "НомерЭПТС,СтатусЭПТС");
		//
		//НомерЭПТС  = РеквизитыЭПТС.НомерЭПТС;
		//СтатусЭПТС = РеквизитыЭПТС.СтатусЭПТС;
		
		РеквизитыЭПТС = Новый Массив;
		РеквизитыЭПТС.Добавить("НомерЭПТС");
		РеквизитыЭПТС.Добавить("СтатусЭПТС");
		РеквизитыЭПТС.Добавить("НаименованиеТСОпределяемоеЕгоНазначением");
		РеквизитыЭПТС.Добавить("МаркаПоЭПТС");
		РеквизитыЭПТС.Добавить("КоммерческоеНаименование");
		РеквизитыЭПТС.Добавить("ИдентификационныйНомер");
		РеквизитыЭПТС.Добавить("НомерШассиРамы");
		// rarus agar 17.01.2022 18240 ++
		РеквизитыЭПТС.Добавить("ИноеНаименованиеТСПоЭПТС");
		// rarus agar 17.01.2022 18240 --
		
		ЗначенияРеквизитовЭПТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЭПТС, РеквизитыЭПТС);
		
		НомерЭПТС  = ЗначенияРеквизитовЭПТС.НомерЭПТС;
		СтатусЭПТС = ЗначенияРеквизитовЭПТС.СтатусЭПТС;
		
		НаименованиеТСОпределяемоеЕгоНазначением = ЗначенияРеквизитовЭПТС.НаименованиеТСОпределяемоеЕгоНазначением;
		МаркаПоЭПТС                              = ЗначенияРеквизитовЭПТС.МаркаПоЭПТС;
		КоммерческоеНаименование                 = ЗначенияРеквизитовЭПТС.КоммерческоеНаименование;
		ИдентификационныйНомер                   = ЗначенияРеквизитовЭПТС.ИдентификационныйНомер;
		НомерШассиРамы                           = ЗначенияРеквизитовЭПТС.НомерШассиРамы;
		// rarus agar 17.12.2021 18240 --
		// rarus agar 17.01.2022 18240 ++
		ИноеНаименованиеТСПоЭПТС                 = ЗначенияРеквизитовЭПТС.ИноеНаименованиеТСПоЭПТС;
		// rarus agar 17.01.2022 18240 --
	КонецЕсли;
	// rarus agar 12.08.2021 17205 --
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// rarus tenkam 23.06.2021 mantis 17922 ++
	//Если     Объект.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства 
	//	И Не ЗначениеЗаполнено(Объект.НомерИзделия) 
	//	Тогда
	//	Сообщить(НСтр("ru = 'Поле ""Номер продукта"" не заполнено!'; en = 'Product number is not filled!'"));
	//	Отказ = Истина;
	//КонецЕсли;
	// rarus tenkam 23.06.2021 mantis 17922 --
	
	//проверим номер полиса на уникальность
	Если ЗначениеЗаполнено(Объект.НомерПолисаОСАГО) И ЭтоНомерПолисаДругогоИзделия() Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru = 'Номер полиса соответствует другому продукту!'; en = 'Insurance policy number fits to another product!'"));
	КонецЕсли;
	
	Если  Не ЗначениеЗаполнено(Объект.Ссылка) 
		И Не ЗначениеЗаполнено(Объект.IDExternalSystemProduct) 
		Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтправитьРеквизитБУВ1БД", ИСТИНА); 
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюСправочника(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
  
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	НаДату = ТекущаяДата();
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ВесПродукта,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Вес, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ДлинаПродукта,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Длина, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ВысотаПродукта,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Высота, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ШиринаПродукта,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Ширина, НаДату);	//rarus tenkam 03.06.2016 mantis 7009 +
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ГосударственныйНомер,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ГосударственныйНомер, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ГосударственныйНомерДатаПолучения,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ГосударственныйНомерДатаПолучения, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ГодВыпускаПродукта ,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ГодВыпускаПродукта, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ДатаВводаДанныхОПробеге,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ДатаВводаДанныхОПробеге, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, Пробег ,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Пробег, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, НомерБортовогоУстройстваПлатон,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.НомерБортовогоУстройстваПлатон, НаДату);
	
	//??
	ЗаписатьДанныеПолисаОСАГОВРегистр();
	//--
	
	ПродуктВАрхиве = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
		Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве),
		Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве,ТекущаяДата());
	Если ЗначениеЗаполнено(ПродуктВАрхиве) Тогда
	
		Элементы.ГруппаФон.ЦветФона = Новый Цвет(255, 227, 227);
	ИначеЕсли Объект.БУ Тогда
		Элементы.ГруппаФон.ЦветФона = WebЦвета.СветлоЖелтыйЗолотистый;
	Иначе
		Элементы.ГруппаФон.ЦветФона = Новый Цвет(240,240,240);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтотОбъект.Прочитать();
	ОбновитьОтображениеДанных(Элементы.ЛокальныйСтатусПродукта);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МодельПродуктаПриИзменении(Элемент)
	
	// очистим спецификацию
	ОчиститьСпецификацию();
	СформироватьНаименованиеПоНастройке("МодельПродукта");
	ЗаполнитьВГХПоМоделиПродукта();
	Объект.МаркаПродукта = Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МодельПродукта,"МаркаПродукта");
	
КонецПроцедуры

&НаКлиенте
Процедура НомерШассиПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("НомерИзделия");
КонецПроцедуры

&НаКлиенте
Процедура VINПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("VIN");
КонецПроцедуры

&НаКлиенте
Процедура ТипПродуктаПриИзменении(Элемент)
	УправлениеДиалогомНаСервере();
	СформироватьНаименованиеПоНастройке("ТипПродукта");
КонецПроцедуры

&НаКлиенте
Процедура ТипПродуктаЛогистическийПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("ТипПродуктаЛогистический");
КонецПроцедуры

&НаКлиенте
Процедура МаркаПродуктаПриИзменении(Элемент)
	
	СформироватьНаименованиеПоНастройке("МаркаПродукта");
	
	МаркаМодели = Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МодельПродукта,"МаркаПродукта"); 
	Если  Не МаркаМодели = Объект.МаркаПродукта 
		И Не Объект.МаркаПродукта.Пустая() 
		Тогда
		Объект.МодельПродукта = ПредопределенноеЗначение("Справочник.Scan_МоделиПродуктов.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПТСПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("МодельПТС");
КонецПроцедуры

&НаКлиенте
Процедура ТипПоПТСПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("ТипТСПоПТС");
КонецПроцедуры

&НаКлиенте
Процедура НомерПТСПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("НомерПТС");
КонецПроцедуры

&НаКлиенте
Процедура VIN2ПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("VIN2");
КонецПроцедуры

&НаКлиенте
Процедура МодельДвигателяТСПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("МодельДвигателяТС");
КонецПроцедуры

&НаКлиенте
Процедура НомерДвигателяТСПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("НомерДвигателяТС");
КонецПроцедуры

&НаКлиенте
Процедура ДатаИстеченияПолисаПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("ДатаИстеченияПолиса");
КонецПроцедуры

&НаКлиенте
Процедура НомерПолисаОСАГОПриИзменении(Элемент)
	СформироватьНаименованиеПоНастройке("НомерПолисаОСАГО");
КонецПроцедуры

&НаКлиенте
Процедура НомерБортовогоУстройстваПлатонПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныйСтатусПродуктаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораЛокальногоСтатусаПродукта(СтандартнаяОбработка, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ТахографСЗаводаСканияПриИзменении(Элемент)
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПортОтправкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("Маршрут,ЭтоГруппа", Ложь, Ложь);
	ПараметрыВыбораПорта = Новый Структура("Отбор", ЗначениеОтбора);
	ДополнительныеПараметры = Новый Структура ("Элемент", Элемент.Имя);
	Описание = Новый ОписаниеОповещения("ЗаполнениеПолейПортов",ЭтотОбъект,ДополнительныеПараметры);
	ОткрытьФорму("Справочник.Scan_МестаХранения.ФормаВыбора", ПараметрыВыбораПорта,ЭтаФорма,,,,Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПолейПортов(Результат,Параметры) Экспорт
	Объект[Параметры.Элемент] = Результат;
	ЭтаФорма.Модифицированность = Истина; //rarus agar 01.12.2020 16691 +-
КонецПроцедуры

&НаКлиенте
Процедура АрендаПриИзменении(Элемент)
	Если Объект.Аренда Тогда
		//Rarus bonmak 16.05.2022 19158 ++
		//было Объект.ДемоИТест = Ложь;
		Объект.Демо = Ложь;
		Объект.Тест = Ложь;
		//Rarus bonmak 16.05.2022 19158 --
		Элементы.ДатаУстановки.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ДатаУстановки.ТолькоПросмотр = Истина;
		Объект.ДатаУстановки = Дата('00010101');
	КонецЕсли;	
КонецПроцедуры

//&НаКлиенте
//Процедура ДемоИТестПриИзменении(Элемент) //Rarus bonmak 16.05.2022 19158 закомментировал ++
//	Если Объект.ДемоИТест Тогда
//		Объект.Аренда = Ложь;
//		Элементы.ДатаУстановки.ТолькоПросмотр = Ложь;
//	Иначе
//		Элементы.ДатаУстановки.ТолькоПросмотр = Истина;
//		Объект.ДатаУстановки = Дата('00010101');
//	КонецЕсли;
//КонецПроцедуры //Rarus bonmak 16.05.2022 19158 --

&НаКлиенте
Процедура ДемоПриИзменении(Элемент) //Rarus bonmak 16.05.2022 19158 ++
	Если Объект.Демо Тогда
		Объект.Аренда = Ложь;
		Объект.Тест = Ложь;
		Элементы.ДатаУстановки.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ДатаУстановки.ТолькоПросмотр = Истина;
		Объект.ДатаУстановки = Дата('00010101');
	КонецЕсли;
КонецПроцедуры //Rarus bonmak 16.05.2022 19158 --

&НаКлиенте
Процедура ТестПриИзменении(Элемент) //Rarus bonmak 16.05.2022 19158 ++
	Если Объект.Тест Тогда
		Объект.Аренда = Ложь;
		Объект.Демо = Ложь;
		Элементы.ДатаУстановки.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ДатаУстановки.ТолькоПросмотр = Истина;
		Объект.ДатаУстановки = Дата('00010101');
	КонецЕсли;
КонецПроцедуры //Rarus bonmak 16.05.2022 19158 --

&НаКлиенте
Процедура ПробегПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГодВыпускаПродуктаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаВводаДанныхОПробегеПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйНомерПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйНомерДатаПолученияПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПродуктаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаказНаЗаводПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ЗаказНаЗавод) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие
		|ИЗ
		|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(
		|			,
		|			ЗаказНаЗавод = &ЗаказНаЗавод
		|				И Изделие <> &Изделие) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних";
		
		Запрос.УстановитьПараметр("ЗаказНаЗавод", Объект.ЗаказНаЗавод);
		Запрос.УстановитьПараметр("Изделие", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Объект.ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка();
			Сообщить(НСтр("ru = 'Данный заказ на завод имеет связь с другим продуктом, укажите правильный заказ на завод'; en = 'This factory order has a relationship with another product, indicate the correct factory order'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаЗаводПриИзменении(Элемент)
	ЗаказНаЗаводПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МодельПродуктаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не Объект.МаркаПродукта.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОтбора = Новый Структура("МаркаПродукта",Объект.МаркаПродукта);
		ПараметрыФормы = Новый Структура("Отбор",ПараметрыОтбора);
		ОткрытьФорму("Справочник.Scan_МоделиПродуктов.ФормаВыбора",ПараметрыФормы,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

//rarus agar 01.12.2020 16691 ++
&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница <> Элементы.СтраницаРеквизиты Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка)
			Или Модифицированность 
			Тогда
			ТекстВопроса = Нстр("ru = 'Продукт еще не записан.
			|Информация, отображаемая в карточке, обновится после записи.
			|Записать?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ГруппаСтраницыПриСменеСтраницыЗавершение", ЭтотОбъект),ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		ОбновитьКарточкуПродукта();
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 01.12.2020 16691 --

//rarus agar 01.03.2021 17123 ++
&НаКлиенте
Процедура СтоимостьПродажиБУПриИзменении(Элемент)
	
	СтоимостьПродажиБУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтоимостьПродажиБУПриИзмененииНаСервере()
	
	Если Объект.СтоимостьПродажиБУ = 0 Тогда
		Объект.СтоимостьПродажиБУБезНДС    = 0;
		Объект.СтоимостьПродажиБУСтавкаНДС = Неопределено;
	Иначе
		Если Объект.СтоимостьПродажиБУСтавкаНДС.Пустая() Тогда
			Объект.СтоимостьПродажиБУСтавкаНДС = ПредопределенноеЗначение("Справочник.Scan_СтавкиНДС.ОсновнаяСтавкаНДС");
		КонецЕсли;
		
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтоимостьПродажиБУСтавкаНДС, "Ставка");
		Если  СтавкаНДС <> Неопределено 
			И СтавкаНДС <> 0 
			Тогда
			Объект.СтоимостьПродажиБУБезНДС = Объект.СтоимостьПродажиБУ/(1 + СтавкаНДС / 100);
		Иначе
			Объект.СтоимостьПродажиБУБезНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПродажиБУСтавкаНДСПриИзменении(Элемент)
	
	СтоимостьПродажиБУСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтоимостьПродажиБУСтавкаНДСПриИзмененииНаСервере()
	
	Если Объект.СтоимостьПродажиБУ <> 0 Тогда
		Если Объект.СтоимостьПродажиБУСтавкаНДС.Пустая() Тогда
			Объект.СтоимостьПродажиБУБезНДС = 0;
			Возврат;
		КонецЕсли;
		
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтоимостьПродажиБУСтавкаНДС, "Ставка");
		Если  СтавкаНДС <> Неопределено 
			И СтавкаНДС <> 0 
			Тогда
			Объект.СтоимостьПродажиБУБезНДС = Объект.СтоимостьПродажиБУ/(1 + СтавкаНДС / 100);
		Иначе
			Объект.СтоимостьПродажиБУБезНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 01.03.2021 17123 --

//rarus agar 05.04.2021 17394 ++
&НаКлиенте
Процедура ТипСпецификацииПриИзменении(Элемент)
	
	Если Объект.ТипСпецификации <> ПредопределенноеЗначение("Перечисление.Scan_ТипыСпецификации.Std") Тогда
		Объект.СтандартнаяСпецификация = Неопределено;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяСпецификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("ПометкаУдаления", Ложь);
	ЗначениеОтбора.Вставить("Статус",          ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе"));
	
	ПараметрыВыбораСТД = Новый Структура("Отбор", ЗначениеОтбора);
	
	Если Не Объект.МодельПродукта.Пустая() Тогда
		ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФиксированныеНастройки.Отбор,
																"Модель.Наименование",
																ВидСравненияКомпоновкиДанных.НачинаетсяС,
																Лев(СокрЛП(Строка(Объект.МодельПродукта)),10),,Истина);
		ПараметрыВыбораСТД.Вставить("ФиксированныеНастройки",ФиксированныеНастройки);
	КонецЕсли;
	
	ОткрытьФорму("Документ.Scan_СпецификацияСтандартнойМодели.ФормаВыбора", 
					ПараметрыВыбораСТД, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры
//rarus agar 05.04.2021 17394 --

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьЭлемент(Команда)
	
	ОбновитьЭлементНаСервере();
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФото(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить(НСтр("ru = 'Запишите продукт!'; en = 'Record the product!'"));
	КонецЕсли;
	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ЭтаФорма.УникальныйИдентификатор, , );
	
КонецПроцедуры

&НаКлиенте
Процедура СравнениеСпецификаций(Команда)
	
	Форма = ПолучитьФорму("Отчет.Scan_СравнениеСпецификаций.Форма.ФормаОтчета",, ЭтаФорма);
	Форма.Открыть();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры

//??
//Процедура ОграничитьДоступностьФормыПриОткрытииИзРабочегоМестаДилера()
&НаСервере
Процедура ОграничитьДоступностьФормыДляДилеров() //rarus vikhle 11.11.2021 m 18471 переименовал процедуру	
	
	//rarus vikhle 11.11.2021 m 18471 +++
	//Если НЕ Параметры.ФормаОткрытаИзРабочегоМестаДилера Тогда
	//	Возврат;
	//КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ПользовательСотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ПользовательСотрудник");
		
		Если ПользовательСотрудник Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	//rarus vikhle 11.11.2021 m 18471 ---
	
	Для Каждого Элемент Из Элементы Цикл
		Если (ТипЗнч(Элемент) = Тип("ГруппаФормы") И (Элемент.Вид = ВидГруппыФормы.Страницы ИЛИ Элемент.Вид = ВидГруппыФормы.Страница))
		ИЛИ ТипЗнч(Элемент) = Тип("ДекорацияФормы") ИЛИ Элемент = Элементы.ФормаПеречитать ИЛИ Элемент = Элементы.ГруппаФон
		ИЛИ Элемент = Элементы.ФормаОбновитьЭлемент ИЛИ Элемент = Элементы.ФормаСравнениеСпецификаций //rarus vikhle 16.02.2021 mt 17252
		ИЛИ Элемент = Элементы.ФормаГруппаИнтеграция ИЛИ Элемент = Элементы.ФормаГруппаОтчеты Тогда //rarus vikhle 16.02.2021 mt 17252
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элемент.Имя, "Доступность", Ложь);
	КонецЦикла;
	
	//??
	//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаКлючевыеДаты", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СебестоимостьЛогистическая", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажи", "Видимость", Ложь);
	
	//rarus agar 04.02.2021 17123 ++
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУ",          "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУБезНДС",    "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУСтавкаНДС", "Видимость", Ложь);
	//rarus agar 04.02.2021 17123 --
	
	КоманднаяПанель.Доступность = Истина;
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	Если Объект.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства Тогда
		Элементы.VIN.Видимость = Истина;
	Иначе
		Элементы.VIN.Видимость = Ложь;
		Объект.VIN             = "";
	КонецЕсли;
	
	Элементы.ФормаОбновитьЭлемент.Доступность = (ЗначениеЗаполнено(Объект.IDExternalSystem) Или ЗначениеЗаполнено(Объект.IDExternalSystemProduct));
	
	Элементы.ФормаГруппаИнтеграция.Видимость        = Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством");
	Элементы.ЛокальныйСтатусПродукта.ТолькоПросмотр = НЕ РольДоступна("ПолныеПрава"); //rarus bonmak 19.03.2021 17493 Не Scan_ПраваИНастройки.Scan_Право("РазрешатьИзменениеСтатусовПродуктов");
	//rarus agar 05.04.2021 17394 ++
	РазрешатьРедактироватьТипСпецификацииПродукта = Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьТипСпецификацииПродукта");
	ЭтоSTD = Объект.ТипСпецификации = ПредопределенноеЗначение("Перечисление.Scan_ТипыСпецификации.Std");
	
	Элементы.ТипСпецификации.ТолькоПросмотр         = Не РазрешатьРедактироватьТипСпецификацииПродукта;
	Элементы.СтандартнаяСпецификация.ТолькоПросмотр = Не РазрешатьРедактироватьТипСпецификацииПродукта Или Не ЭтоSTD;
	//rarus agar 05.04.2021 17394 --
	Элементы.СОП.ТолькоПросмотр 					= НЕ Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьСОП"); //rarus bonmak 25.03.2021 17443

	Если ЗначениеЗаполнено(Объект.ДатаОбновления) Тогда
		Элементы.ФормаОбновитьЭлемент.Заголовок = Объект.ДатаОбновления;
		Элементы.НомерИзделия.ТолькоПросмотр = Истина;
		Элементы.VIN.ТолькоПросмотр          = Истина;
	Иначе
		Элементы.НомерИзделия.ТолькоПросмотр = Ложь;
		Элементы.VIN.ТолькоПросмотр          = Ложь;
	КонецЕсли;
	
	ПродуктВАрхиве = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
		Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве),
		Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве,ТекущаяДата());
		
	Если ЗначениеЗаполнено(ПродуктВАрхиве) Тогда
		Элементы.ГруппаФон.ЦветФона = Новый Цвет(255, 227, 227);
	ИначеЕсли Объект.БУ Тогда
		Элементы.ГруппаФон.ЦветФона = WebЦвета.СветлоЖелтыйЗолотистый;
	Иначе
		Элементы.ГруппаФон.ЦветФона = Новый Цвет(240,240,240);
	КонецЕсли;
	
	Если Объект.ТипПродукта.ВидПродукта = Scan_ПраваИНастройки.Scan_Право("ВидПродуктаГрузовыеАвтомобили") Тогда
		ТягачШасси = Объект.МодельПродукта.ТягачШасси;
	Иначе
		ТягачШасси = ПредопределенноеЗначение("Перечисление.Scan_ПризнакТягачШасси.ПустаяСсылка");
	КонецЕсли;
	
	//rarus agar 21.01.2021 16981 ++
	ТипСНадстройкой = Справочники.Scan_ТипыПродуктов.ПолучитьПризнакНаличияНастройки(Объект.ТипПродукта);
	Если ТипСНадстройкой = Неопределено Тогда
		Элементы.СкладПродажи.ТолькоПросмотр = Истина;
	ИначеЕсли ТипСНадстройкой Тогда
		Элементы.СкладПродажи.ТолькоПросмотр = Не Scan_ПраваИНастройки.Scan_Право("РазрешитьИзменятьСкладПродажиДляПродуктовСНадстройкой");
	ИначеЕсли Не ТипСНадстройкой Тогда
		Элементы.СкладПродажи.ТолькоПросмотр = Не Scan_ПраваИНастройки.Scan_Право("РазрешитьИзменятьСкладПродажиДляПродуктовБезНадстройки");
	КонецЕсли;
	
	Элементы.ЗапретИзмененияСкладаПродажи.ТолькоПросмотр = Не Scan_ПраваИНастройки.Scan_Право("РазрешатьУстанавливатьЗапретНаИзменениеСкладаПродажи");
	//rarus agar 21.01.2021 16981 --
	
	//rarus agar 04.02.2021 17123 ++
	ПользовательЯвляетсяСотрудникомСканияРусь = Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУ",          "Видимость", ПользовательЯвляетсяСотрудникомСканияРусь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУБезНДС",    "Видимость", ПользовательЯвляетсяСотрудникомСканияРусь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУСтавкаНДС", "Видимость", ПользовательЯвляетсяСотрудникомСканияРусь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкладПродажи", "Видимость", ПользовательЯвляетсяСотрудникомСканияРусь); //rarus vikhle 16.02.2021 mt 16981
	
	РазрешитьРедактироватьСтоимостьПродажиПродуктаБУ = Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьСтоимостьПродажиПродуктаБУ");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУ",          "ТолькоПросмотр", Не РазрешитьРедактироватьСтоимостьПродажиПродуктаБУ);
	//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУБезНДС",    "ТолькоПросмотр", Не РазрешитьРедактироватьСтоимостьПродажиПродуктаБУ); //rarus vikhle 13.05.2021 mt 17733 всегда недоступно
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьПродажиБУСтавкаНДС", "ТолькоПросмотр", Не РазрешитьРедактироватьСтоимостьПродажиПродуктаБУ);
	//rarus agar 04.02.2021 17123 --
	
	// rarus tenkam 18.02.2021 mantis 17190 +++
	РазрешитьРедактироватьDLV = Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьDLV");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "DLV", "ТолькоПросмотр", Не РазрешитьРедактироватьDLV);
	// rarus tenkam 18.02.2021 mantis 17190 ---
	
	//rarus ozhnik 17366 17.03.2021 + 
	РазрешитьРедактироватьКлиентПродавецПродукта = ОграничитьДоступностьИзмененияКлиентПродавецПродукта();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КлиентПродукта", "ТолькоПросмотр", Не РазрешитьРедактироватьКлиентПродавецПродукта);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродавецПродукта", "ТолькоПросмотр", Не РазрешитьРедактироватьКлиентПродавецПродукта);
	//rarus ozhnik 17366 17.03.2021 -
	
	//rarus vikhle 09.11.2021 m 18485 +++
	Если ЗначениеЗаполнено(Объект.КомментарийДилера) Тогда
		Элементы.КомментарийДилера.РежимПароля = НЕ Справочники.Scan_Изделия.КомментарийДилераДоступен(Объект.СоглашениеОПоставке);
	КонецЕсли;	
	//rarus vikhle 09.11.2021 m 18485 ---
	
КонецПроцедуры 

&НаСервере
Процедура ОчиститьСпецификацию()
	
	Объект.СпецификацияПродукта = Справочники.Scan_СпецификацииПродуктов.ПустаяСсылка();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаименованиеПоНастройке(ИмяРеквизита)
	
	Наим = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(Объект,ИмяРеквизита);
	Если Наим <> Неопределено Тогда
		Объект.Наименование = Наим;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВГХПоМоделиПродукта()
	
	ДанныеВГХ = Справочники.Scan_Изделия.ЧтениеЗначенияРCВГХ(Объект.МодельПродукта);
	Если ДанныеВГХ <> Неопределено Тогда
		ВесПродукта    = ДанныеВГХ.ВесПродукта;
		ДлинаПродукта  = ДанныеВГХ.ДлинаПродукта;
		ВысотаПродукта = ДанныеВГХ.ВысотаПродукта;
		ШиринаПродукта = ДанныеВГХ.ШиринаПродукта;
	Иначе
		ВесПродукта    = 0;
		ДлинаПродукта  = 0;
		ВысотаПродукта = 0;
		ШиринаПродукта = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПроверитьНаличиеЗакрытыхЗаявок(СсылкаМаршрут)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка,
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.ДатаДоставкиФакт
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Исполнена = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие = &СсылкаИзделие
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Маршрут = &СсылкаМаршрут
		|
		|УПОРЯДОЧИТЬ ПО
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Дата УБЫВ";
		Запрос.УстановитьПараметр("СсылкаМаршрут",СсылкаМаршрут);
		Запрос.УстановитьПараметр("СсылкаИзделие",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		ВозращаемыеДанные = Новый Структура;
		Если Выборка.Следующий() Тогда
			ЗаявкаПеревозчику = Выборка.Ссылка;	
			ДатаДоставкиФакт = Выборка.ДатаДоставкиФакт;
			ВозращаемыеДанные.Вставить("Перевозчик",ЗаявкаПеревозчику.Перевозчик);
			ВозращаемыеДанные.Вставить("ДатаДоставкиФакт",ДатаДоставкиФакт);
			Возврат ВозращаемыеДанные;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПОЛИС ОСАГО

&НаСервере
Процедура ЗаписатьДанныеПолисаОСАГОВРегистр()
	
	Если ЗначениеЗаполнено(Объект.НомерПолисаОСАГО) ИЛИ ЗначениеЗаполнено(Объект.ДатаИстеченияПолиса) Тогда
		Справочники.Scan_Изделия.ЗаписьЗначенияРСПолисыОСАГО(Объект.Ссылка, Объект.НомерПолисаОСАГО,Объект.ДатаИстеченияПолиса);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоНомерПолисаДругогоИзделия()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ПолисыОСАГОИзделий.Изделие,
	|	Scan_ПолисыОСАГОИзделий.НомерПолиса,
	|	Scan_ПолисыОСАГОИзделий.ДатаИстеченияСрока
	|ИЗ
	|	РегистрСведений.Scan_ПолисыОСАГОИзделий КАК Scan_ПолисыОСАГОИзделий
	|ГДЕ
	|	Scan_ПолисыОСАГОИзделий.Изделие <> &Изделие 
	|	И Scan_ПолисыОСАГОИзделий.НомерПолиса = &НомерПолиса";
	Запрос.УстановитьПараметр("Изделие", Объект.Ссылка);
	Запрос.УстановитьПараметр("НомерПолиса", Объект.НомерПолисаОСАГО);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат (НЕ Результат.Количество() = 0);
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементНаСервере()
	
	Если  Не ЗначениеЗаполнено(Объект.IDExternalSystem)
		И Не ЗначениеЗаполнено(Объект.IDExternalSystemProduct) 
		Тогда
		//Создан вручную
	Иначе
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(, Ложь);
		
		Если ЗначениеЗаполнено(Объект.ЗаказНаЗавод) Тогда
			Если ЗначениеЗаполнено(Объект.ЗаказНаЗавод.IDExternalSystem) Тогда 
				СтруктураПараметров.GUID = Объект.ЗаказНаЗавод.IDExternalSystem;
				Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetOrderToDelivery(СтруктураПараметров, Ложь, "");
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.IDExternalSystemProduct) Тогда
			СтруктураПараметров.GUID = Объект.IDExternalSystemProduct;
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetProduct(СтруктураПараметров, Ложь, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.IDExternalSystem) Тогда
			СтруктураПараметров.GUID = Объект.IDExternalSystem;
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetChassis(СтруктураПараметров, Ложь, "");
		КонецЕсли;
		ЭтаФорма.Прочитать();
		
		УправлениеДиалогомНаСервере();
		ОбновитьКарточкуПродукта(); //rarus agar 01.12.2020 16691 +-
	КонецЕсли
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораЛокальногоСтатусаПродукта(СтандартнаяОбработка, ДанныеВыбора)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДанныеВыбора = Новый СписокЗначений;
	СписокДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.Scan_ЛокальныеСтатусыПродуктов.NEW"));
	СписокДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.Scan_ЛокальныеСтатусыПродуктов.OPEN"));
	
	ТипЗаказа = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.ЗаказНаЗавод, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод);
	Если ТипЗаказа = ПредопределенноеЗначение("Перечисление.Scan_ТипыЗаказовНаЗавод.OpenOrder") И Объект.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania Тогда
		СписокДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.Scan_ЛокальныеСтатусыПродуктов.DELETED"));
	КонецЕсли;
	
	ДанныеВыбора = СписокДанныеВыбора;
	
КонецПроцедуры

//rarus agar 01.12.2020 16691 ++
&НаСервере
Процедура ОбновитьКарточкуПродукта()
	
	НастройкиКарточкиПродукта = Справочники.Scan_Изделия.НастройкиКарточкиПродукта(Объект, ЭтотОбъект);
	КарточкаПродукта = Справочники.Scan_Изделия.ТабличныйДокументКарточкиПродукта(Объект, ЭтотОбъект, НастройкиКарточкиПродукта);
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаПродуктаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если Не ЗначениеЗаполнено(Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Строка")
		Или ТипЗнч(Расшифровка) = ТипЗнч(Расшифровка) = Тип("ФорматированнаяСтрока") Тогда
		ИмяЭлемента = Расшифровка;
		Гиперссылка = "";
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ИмяЭлемента = Расшифровка.ИмяЭлемента;
		Гиперссылка = Расшифровка.Гиперссылка;
	Иначе
		ТекстИсключения = НСтр("ru = 'Неподдерживаемый тип параметры расшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	Если СтрНайти(ИмяЭлемента, "Гиперссылки") <> 0 Тогда
		ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка);
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	ИначеЕсли Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		//Если     Элементы[ИмяЭлемента].Видимость
		//	И    Элементы[ИмяЭлемента].Доступность
		//	И Не Элементы[ИмяЭлемента].ТолькоПросмотр
		//	Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРеквизиты;
			ТекущийЭлементВыбор = ИмяЭлемента;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		//КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru = 'Необрабатываемый тип параметр расшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка = "")
	
	Если ИмяЭлемента = "ГиперссылкиЗамечания" Тогда
		ПараметрыФормы = Новый Структура("Продукт", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_ЗамечанияПоАктамПриемоПередачи.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиЗамечанияИзменить" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Продукт",                                    Объект.Ссылка);
		ПараметрыФормы.Вставить("Замечание",                                  Объект.Замечание);
		ПараметрыФормы.Вставить("КрайняяДатаУстраненияНедостатков",           Объект.КрайняяДатаУстраненияНедостатков);
		ПараметрыФормы.Вставить("НеРазрешеноМенятьСрокУстраненияНедостатков", Объект.НеРазрешеноМенятьСрокУстраненияНедостатков);
		ПараметрыФормы.Вставить("СрокУстраненияНедостатковДоп",               Объект.СрокУстраненияНедостатковДоп);
		ПараметрыФормы.Вставить("ИдентификаторФормы",                         ЭтаФорма.УникальныйИдентификатор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Scan_Изделия.Форма.ФормаВводаЗамечаний");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПараметрыПереходаПоГиперссылке.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПослеИзмененияЗамечаний", ЭтотОбъект));
	ИначеЕсли ИмяЭлемента = "ГиперссылкиМестоположение" Тогда
		ПараметрыФормы = Новый Структура("Продукт", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрНакопления.Scan_МестонахождениеИзделий.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиХарактеристикиАКБ" Тогда
		ПараметрыФормы = Новый Структура("Продукт", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_ДанныеПоАКБИзделий.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиКлючевыеДаты" Тогда
		ПараметрыФормы = Новый Структура("Продукт,ЗаказНаЗавод", Объект.Ссылка, Объект.ЗаказНаЗавод);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_КлючевыеДатыПроцессов.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиКлючевыеДатыИзменить" Тогда
		ПараметрыФормы = Новый Структура("Продукт", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Scan_Изделия.Форма.ФормаВводаКлючевыхДат");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПараметрыПереходаПоГиперссылке.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПослеИзмененияКлючевыхДат", ЭтотОбъект));
	ИначеЕсли ИмяЭлемента = "ГиперссылкиСоставИзделия" Тогда
		ПараметрыФормы = Новый Структура("Продукт", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_ВзаимосвязьИзделий.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиСоставИзделияИзменить" Тогда
		ПараметрыФормы = Новый Структура("ИзделиеТС", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_ВзаимосвязьИзделий.Форма.УказаниеВзаимосвязиМеждуИзделиями");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиДокументы" Тогда
		ПараметрыФормы = Новый Структура("Продукт", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "КритерийОтбора.Изделия.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыПереходаПоГиперссылке.Вставить("Гиперссылка", Гиперссылка);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность 
		Тогда
		ТекстВопроса = Нстр("ru = 'Продукт еще не записан.
		|Переход возможен только после записи.
		|Записать?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента, ДополнительныеПараметры.Гиперссылка);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("ИмяФормы") Тогда
		Если ПараметрыПереходаПоГиперссылке.Свойство("ОписаниеОповещения") Тогда
			ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы,, ЭтаФорма.УникальныйИдентификатор,,,
			ПараметрыПереходаПоГиперссылке.ОписаниеОповещения,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
		Иначе
			ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы,, ЭтаФорма.УникальныйИдентификатор,,,,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
		КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru = 'Не определено действие по гиперссылке.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияЗамечаний(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.Замечание                                  = Результат.Замечание;
		Объект.КрайняяДатаУстраненияНедостатков           = Результат.КрайняяДатаУстраненияНедостатков;
		Объект.НеРазрешеноМенятьСрокУстраненияНедостатков = Результат.НеРазрешеноМенятьСрокУстраненияНедостатков;
		Объект.СрокУстраненияНедостатковДоп               = Результат.СрокУстраненияНедостатковДоп;
		ЭтаФорма.Модифицированность = Истина; //rarus tenkam 03.02.2021 не работал пеерсчет при изменении срока	
	КонецЕсли;
	
	ОбновитьКарточкуПродукта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияКлючевыхДат(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКарточкуПродукта();
	
КонецПроцедуры
//rarus agar 01.12.2020 16691 --

//rarus ozhnik 17366 17.03.2021 + 
&НаСервере
Функция ОграничитьДоступностьИзмененияКлиентПродавецПродукта();
	ОграничитьДоступность = ложь;
	// Условия редактирования:
	// 1. Право РазрешатьРедактироватьТипСпецификацииПродукта - истина
	// 2. ПользовательСотрудник = истина
	// 3. Если ПользовательСотрудник = ложь, то дополнительно - Клиент заявки заполнен и доступен пользователю
	Если Scan_ПраваИНастройки.Scan_Право("РазрешитьИзменятьКлиентаИПродавцаПродукта") Тогда
		Если не Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользователиКлиентСервер.ТекущийПользователь(),"ПользовательСотрудник") Тогда
			Если не Объект.КлиентСоглашенияОПоставке.Пустая() Тогда
				ТаблицаКомпаний = РегистрыСведений.Scan_КомпанииПользователей.ПолучитьКомпаниюДилераПользователя(ПользователиКлиентСервер.ТекущийПользователь());
				КомпанияНайдена = ТаблицаКомпаний.Найти(Объект.КлиентСоглашенияОПоставке, "Контрагент");
				Если КомпанияНайдена = неопределено Тогда
					//Компания недоступна пользователю 
					ОграничитьДоступность = истина;		
				КонецЕсли; 	
			Иначе
				//Клиент незаполнен, редактировать нельзя
				ОграничитьДоступность = истина;
			КонецЕсли; 		
		Иначе
			//Условия 1 и 2 выполнены, редактировать можно
		КонецЕсли;
	Иначе 
		ОграничитьДоступность = истина;
	КонецЕсли; 
	
	возврат не ОграничитьДоступность	
	
КонецФункции


&НаКлиенте
Процедура ПродавецПродуктаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Отбор = Новый Структура;

	Если не Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользователиКлиентСервер.ТекущийПользователь(),"ПользовательСотрудник") Тогда
		
		Отбор.Вставить("Владелец", ПолучитьМассивКомпаний());
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.Scan_КонтактныеЛица.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивКомпаний()
	возврат РегистрыСведений.Scan_КомпанииПользователей.ПолучитьКомпаниюДилераПользователя(ПользователиКлиентСервер.ТекущийПользователь()).ВыгрузитьКолонку("Компания");	
КонецФункции
//rarus ozhnik 17366 17.03.2021 -