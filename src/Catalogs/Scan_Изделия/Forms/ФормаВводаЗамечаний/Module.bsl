&НаСервереБезКонтекста
Процедура ПолучитьСписокКодовНеисправностей(СписокКодов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_КодыНеисправныхДеталей.КодДетали КАК КодДетали
	|ИЗ
	|	Справочник.Scan_КодыНеисправныхДеталей КАК Scan_КодыНеисправныхДеталей
	|
	|СГРУППИРОВАТЬ ПО
	|	Scan_КодыНеисправныхДеталей.КодДетали
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодДетали";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТабКодов = РезультатЗапроса.Выгрузить();
	Если ТабКодов.Количество() <> 0 Тогда
		Для Каждого ТекКод Из ТабКодов Цикл
			СписокКодов.Добавить(ТекКод.КодДетали, ТекКод.КодДетали);
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьСписокКодовДефектов(СписокКодов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_КодыДефектов.КодДефекта КАК КодДефекта
	|ИЗ
	|	Справочник.Scan_КодыДефектов КАК Scan_КодыДефектов
	|
	|СГРУППИРОВАТЬ ПО
	|	Scan_КодыДефектов.КодДефекта
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодДефекта";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТабКодов = РезультатЗапроса.Выгрузить();
	Если ТабКодов.Количество() <> 0 Тогда
		Для Каждого ТекКод Из ТабКодов Цикл
			СписокКодов.Добавить(ТекКод.КодДефекта, ТекКод.КодДефекта);
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗамечаниеНовое()
	
	ВремЗамечание = "";
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Устранено",Ложь);
	НайденныеСтроки = ТабЗамечанияПоАктам.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗамечания Из НайденныеСтроки Цикл
		Если ВремЗамечание = "" Тогда
			ВремЗамечание = СокрЛП(СтрокаЗамечания.Замечание) + ?(ЗначениеЗаполнено(СтрокаЗамечания.Количество)," (" + СтрокаЗамечания.Количество + ")", "");
		Иначе
			ВремЗамечание = ВремЗамечание + ", " + СокрЛП(СтрокаЗамечания.Замечание) + ?(ЗначениеЗаполнено(СтрокаЗамечания.Количество)," (" + СтрокаЗамечания.Количество + ")", "");
		КонецЕсли;
	КонецЦикла;
	
	Если ВремЗамечание = "" Тогда
		ВремЗамечание = "НОРМА";
	КонецЕсли;
	Замечание = ВремЗамечание;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗамечаниеСтроки(ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.КодНеисправнойДетали) И ЗначениеЗаполнено(ТекСтрока.КодДефекта) Тогда
		Элементы.ТабЗамечанияПоАктамЗамечание.ТолькоПросмотр = Истина;
		Если ТекСтрока.КодНеисправнойДетали = ПредопределенноеЗначение("Справочник.Scan_КодыНеисправныхДеталей.Прочее") И
			ТекСтрока.КодДефекта = ПредопределенноеЗначение("Справочник.Scan_КодыДефектов.Прочее") Тогда
			
			Элементы.ТабЗамечанияПоАктамЗамечание.ТолькоПросмотр = Ложь;
			ТекСтрока.Замечание = ""; 
			Элементы.ТабЗамечанияПоАктамЗамечание.ПодсказкаВвода = "Текст произвольного замечания";
		Иначе
			ТекСтрока.Замечание = Строка(ТекСтрока.КодНеисправнойДетали) + " - " + ТекСтрока.КодДефекта;
			Элементы.ТабЗамечанияПоАктамЗамечание.ПодсказкаВвода = "";
		КонецЕсли;
	Иначе
		Элементы.ТабЗамечанияПоАктамЗамечание.ТолькоПросмотр = Истина;
		ТекСтрока.Замечание = "";	
		Элементы.ТабЗамечанияПоАктамЗамечание.ПодсказкаВвода = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНеисправностьПоКоду(Код)
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Справочники.Scan_КодыНеисправныхДеталей.ПустаяСсылка();
	Иначе
		Возврат Справочники.Scan_КодыНеисправныхДеталей.НайтиПоРеквизиту("КодДетали", Код);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКодПоНеисправности(Неисправность)
	
	Если Не ЗначениеЗаполнено(Неисправность) Тогда
		Возврат "";
	Иначе
		Возврат Неисправность.КодДетали;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьДефектПоКоду(Код)
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Справочники.Scan_КодыДефектов.ПустаяСсылка();
	Иначе
		Возврат Справочники.Scan_КодыДефектов.НайтиПоРеквизиту("КодДефекта", Код);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКодПоДефекту(Дефект)
	
	Если Не ЗначениеЗаполнено(Дефект) Тогда
		Возврат "";
	Иначе
		Возврат Дефект.КодДефекта;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТабЗамечанияПоАктамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования
		И   Элемент.ТекущиеДанные <> Неопределено
		Тогда
		СформироватьЗамечаниеНовое();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗамечанияПоАктамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока 
		И СокрЛП(ТекСтрока.МестоОбнаружения) = "" 
		И СокрЛП(ТекСтрока.Замечание) = "" 
		Тогда
		ТабЗамечанияПоАктам.Удалить(ТекСтрока);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗамечанияПоАктамПослеУдаления(Элемент)
	
	Если ТабЗамечанияПоАктам.Количество() <> 0 Тогда
		СформироватьЗамечаниеНовое();
	Иначе
		Замечание = "";
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабЗамечанияПоАктамКодНеисправностиКодПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабЗамечанияПоАктам.ТекущиеДанные;
	
	ТекДанные.КодНеисправнойДетали = ПолучитьНеисправностьПоКоду(ТекДанные.КодНеисправностиКод);
	СформироватьЗамечаниеСтроки(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗамечанияПоАктамКодНеисправнойДеталиПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабЗамечанияПоАктам.ТекущиеДанные;
	
	ТекДанные.КодНеисправностиКод = ПолучитьКодПоНеисправности(ТекДанные.КодНеисправнойДетали);
	СформироватьЗамечаниеСтроки(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗамечанияПоАктамКодДефектаКодПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабЗамечанияПоАктам.ТекущиеДанные;
	
	ТекДанные.КодДефекта = ПолучитьДефектПоКоду(ТекДанные.КодДефектаКод);
	СформироватьЗамечаниеСтроки(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗамечанияПоАктамКодДефектаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабЗамечанияПоАктам.ТекущиеДанные;
	
	ТекДанные.КодДефектаКод = ПолучитьКодПоДефекту(ТекДанные.КодДефекта);
	СформироватьЗамечаниеСтроки(ТекДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторФормы = Параметры.ИдентификаторФормы;
	
	Продукт = Параметры.Продукт;
	
	Замечание                                  = Параметры.Замечание;
	КрайняяДатаУстраненияНедостатков           = Параметры.КрайняяДатаУстраненияНедостатков;
	НеРазрешеноМенятьСрокУстраненияНедостатков = Параметры.НеРазрешеноМенятьСрокУстраненияНедостатков;
	СрокУстраненияНедостатковДоп               = Параметры.СрокУстраненияНедостатковДоп;
	
	ТабЗамечанияПоАктам.Очистить();
	
	ДанныеИзРегистра = РегистрыСведений.Scan_ЗамечанияПоАктамПриемоПередачи.ПолучитьЗамечанияПоИзделиюИзРегистра(Продукт);
	Для Каждого СтрокаРегистра Из ДанныеИзРегистра Цикл
		НоваяСтрока = ТабЗамечанияПоАктам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРегистра);
	КонецЦикла;
	
	СписокКодовНеисправностей = Элементы.ТабЗамечанияПоАктамКодНеисправностиКод.СписокВыбора;
	ПолучитьСписокКодовНеисправностей(СписокКодовНеисправностей);
	СписокКодовДефектов = Элементы.ТабЗамечанияПоАктамКодДефектаКод.СписокВыбора;
	ПолучитьСписокКодовДефектов(СписокКодовДефектов);
	
	Элементы.НеРазрешеноМенятьСрокУстраненияНедостатков.Доступность = Scan_ПраваИНастройки.Scan_ПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.ТекущийПользователь(),
	                                                                  ПланыВидовХарактеристик.Scan_ПраваИНастройки.РазрешитьИзменятьСрокУстраненияНедостатков);
																	  
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФото(Команда)
	
	Если Не ЗначениеЗаполнено(Продукт) Тогда
		Сообщить(НСтр("ru = 'Запишите продукт!'; en = 'Record the product!'"));
	КонецЕсли;
		
	РаботаСФайламиКлиент.ДобавитьФайлы(Продукт, ИдентификаторФормы, ,);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если ЗаписатьЗамечанияВРегистр() Тогда
		ПараметрыЗакрытия = Новый Структура;
		ПараметрыЗакрытия.Вставить("Замечание", Замечание);
		ПараметрыЗакрытия.Вставить("КрайняяДатаУстраненияНедостатков", КрайняяДатаУстраненияНедостатков);
		ПараметрыЗакрытия.Вставить("НеРазрешеноМенятьСрокУстраненияНедостатков", НеРазрешеноМенятьСрокУстраненияНедостатков);
		ПараметрыЗакрытия.Вставить("СрокУстраненияНедостатковДоп", СрокУстраненияНедостатковДоп);
		
		Закрыть(ПараметрыЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЗамечанияВРегистр()
	
	ЕстьОшибки = Ложь;
	
	Для Индекс = 0 по ТабЗамечанияПоАктам.Количество()-1 Цикл
		ТекСтрокаЗамечания = ТабЗамечанияПоАктам.Получить(Индекс);
		Если Не ЗначениеЗаполнено(ТекСтрокаЗамечания.ДатаОбнаружения) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В строке '; en = 'In line '") + (Индекс + 1) + НСтр("ru = ' не заполнена дата обнаружения.'; en = ' detection date is not filled.'");
			Сообщение.Поле = "ТабЗамечанияПоАктам[" + Индекс + "].ДатаОбнаружения";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрокаЗамечания.Замечание) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В строке '; en = 'In line '") + (Индекс + 1) + НСтр("ru = ' не заполнено замечание. Проверьте корректность кода/наименования неисправности и дефекта.'; en = ' comment is not filled.'");
			Сообщение.Поле = "ТабЗамечанияПоАктам[" + Индекс + "].Замечание";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		РегистрыСведений.Scan_ЗамечанияПоАктамПриемоПередачи.ЗаписатьЗамечанияПоИзделиюВРегистр(Продукт, ТабЗамечанияПоАктам);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура НеРазрешеноМенятьСрокУстраненияНедостатковПриИзменении(Элемент)
	
	НастроитьДопСрокУстраненияНедостатков();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДопСрокУстраненияНедостатков()
	
	Если НеРазрешеноМенятьСрокУстраненияНедостатков = Ложь Тогда
		Элементы.ГруппаСрокУстраненияНедостатковИПодсказка.Видимость = Истина;
	Иначе
		Элементы.ГруппаСрокУстраненияНедостатковИПодсказка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокУстраненияНедостатковДопПриИзменении(Элемент)
	
	СрокУстраненияНедостатковДопПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СрокУстраненияНедостатковДопПриИзмененииНаСервере()
	
	//Если ЗначениеЗаполнено(СрокУстраненияНедостатковДоп) Тогда	// rarus tenkam 03.02.2021 не работало для срока =0 
		КрайняяДата = Справочники.Scan_Изделия.ПересчитатьКрайнююДатуУстраненияНедостатков(Продукт, СрокУстраненияНедостатковДоп);
		Если КрайняяДата <> КрайняяДатаУстраненияНедостатков Тогда
			КрайняяДатаУстраненияНедостатков = КрайняяДата;
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьДопСрокУстраненияНедостатков();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	Если ЗначениеЗаполнено(Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	НеРазрешеноМенятьСрокУстраненияНедостатков                   = Истина;
	Элементы.ГруппаСрокУстраненияНедостатковИПодсказка.Видимость = Ложь;
	
КонецПроцедуры