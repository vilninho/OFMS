
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.IDExternalSystem) Тогда
		// Это новый объект не из 1БД
		Объект.СозданВручную = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРеквизиты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		MarketChange = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.MarketChange);
		Клиент = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент);
		ТипЗаказа = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод); 
		PartPeriod = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.PartPeriod);
		КомплектностьПоставки = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.КомплектностьПоставки);
		
		SOrder 	= РегистрыСведений.Scan_КвотыSOrderFFUФакт.ПолучитьОпцию(Объект.Ссылка, Справочники.Scan_ТипыОпций.SOrderОпции); 
		FFU 	= РегистрыСведений.Scan_КвотыSOrderFFUФакт.ПолучитьОпцию(Объект.Ссылка, Справочники.Scan_ТипыОпций.FFUОпции);
		
		ЛичныйКомментарий = РегистрыСведений.Scan_ЛичныеКомментарииПользователей.ПолучитьКомментарий(ПараметрыСеанса.ТекущийПользователь, Объект.Ссылка);
	
		Изделие = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(Объект.Ссылка);
		ЗамечанияПоИзделию.Параметры.УстановитьЗначениеПараметра("Изделие", Изделие);
		
		Если НЕ Изделие.Пустая() Тогда
			//ЗаявкаНаСОП = РегистрыСведений.Scan_СоставСоглашенийОПоставке.ПолучитьСоглашениеОПоставке(Изделие);
			ЗаявкаНаСОП = Изделие.СоглашениеОПоставке;//rarus vikhle 18.12.2020 mt 16955
			Если НЕ ЗаявкаНаСОП.Пустая() Тогда
				СтрокаТЧСоглашения = ЗаявкаНаСОП.СписокПродуктов.Найти(Изделие,"Продукт");
				Если НЕ СтрокаТЧСоглашения = Неопределено Тогда
					Драйв = СтрокаТЧСоглашения.ПроцентДрайв <> 0;
					СУ    = СтрокаТЧСоглашения.СпециальныеУсловия;
				КонецЕсли;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Изделие.ТипПродукта) И ЗначениеЗаполнено(Изделие.МодельПродукта) И 
				Изделие.ТипПродукта.ВидПродукта = Scan_ПраваИНастройки.Scan_Право("ВидПродуктаГрузовыеАвтомобили") Тогда
				ТягачШасси = Изделие.МодельПродукта.ТягачШасси;
			Иначе
				ТягачШасси = ПредопределенноеЗначение("Перечисление.Scan_ПризнакТягачШасси.ПустаяСсылка");
			КонецЕсли;			
		КонецЕсли;
		
		ВывестиОтветственногоМенеджера();
	КонецЕсли;
	
	//rarus agar 12.05.2021 17753 ++
	СтарыйКомментарий = Объект.Комментарий;
	//rarus agar 12.05.2021 17753 --
	
	УправлениеДиалогомНаСервере();
	
	ОбновитьКлючевыеДаты();   	
	// rarus tenkam 03.12.2020 mantis 16697 +++
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьКарточкуЗаказа();
	КонецЕсли;
	// rarus tenkam 03.12.2020 mantis 16697 ---
	
	УстановитьУсловноеОформление(); //rarus vikhle 18.10.2021 m 18435
	Scan_СборСтатистики.Scan_ПриОткрытии("Справочники", РеквизитФормыВЗначение("Объект").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Scan_ВспомогательныеФункцииКлиент.ПроверитьПользователяПортала();     	
	ОбновитьКарточкуЗаказа();	// rarus tenkam 03.12.2020 mantis 16697 +-
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НайденнаяКЗ = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(СокрЛП(Объект.Наименование),Истина);
	Если НЕ (НайденнаяКЗ = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка()) Тогда
		// нашли с таким же наименованием
		Если НайденнаяКЗ <> Объект.Ссылка Тогда
			Отказ = Истина;
			Сообщить(НСтр("ru = 'Карточка заказа с таким наименованием уже есть!'; en = 'Order card with the same name already exists'"));
		КонецЕсли;
	КонецЕсли;
		
	КлючевыеДатыОбъекта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.КлючевыеДатыОбъекта(Объект.Ссылка);
	// rarus tenkam 03.12.2020 mantis 16697 +++
	Для Каждого ТекДата Из КлючевыеДатыВсе Цикл
		КлючевыеДатыОбъекта.Вставить(XMLСтрока(ТекДата.КлючеваяДата), ТекДата.Значение);
	КонецЦикла;
	// rarus tenkam 03.12.2020 mantis 16697 ---
	
	Если ЗначениеЗаполнено(КлючевыеДатыОбъекта.ДатаПродажиИзделия) тогда 
		ТекущеЗначение_ДатаПродажиИзделия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.КлючеваяДата(Объект.Ссылка, "ДатаПродажиИзделия");
		УстановленаДатаПродажи = НЕ ЗначениеЗаполнено(ТекущеЗначение_ДатаПродажиИзделия);
		Если УстановленаДатаПродажи тогда
			ТекущеЗначение_ДатаПередачиИзделияДилеру = РегистрыСведений.Scan_КлючевыеДатыПроцессов.КлючеваяДата(Объект.Ссылка, "ДатаПередачиИзделияДилеру");
			КлючевыеДатыОбъекта.ДатаПередачиИзделияДилеру = ТекущеЗначение_ДатаПередачиИзделияДилеру;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("КлючевыеДатыОбъекта", КлючевыеДатыОбъекта);
	
	//rarus agar 12.05.2021 17753 ++
	Если Не ПустаяСтрока(ТекущийОбъект.Комментарий)
		И   СокрЛП(ТекущийОбъект.Комментарий) <> СокрЛП(СтарыйКомментарий) 
		Тогда
		ТекущийОбъект.Комментарий = ТекущийОбъект.Комментарий + " ("+СокрЛП(Пользователи.АвторизованныйПользователь())+")";
		СтарыйКомментарий = ТекущийОбъект.Комментарий;
	КонецЕсли;
	//rarus agar 12.05.2021 17753 --
	
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюСправочника(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НаДату = ТекущаяДата();
	Справочники.Scan_ЗаказыНаЗавод.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, MarketChange, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.MarketChange, НаДату);
	Справочники.Scan_ЗаказыНаЗавод.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, Клиент, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент, НаДату);
	Справочники.Scan_ЗаказыНаЗавод.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, КомплектностьПоставки, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.КомплектностьПоставки, НаДату); 
	Справочники.Scan_ЗаказыНаЗавод.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ТипЗаказа, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод, НаДату);
	Справочники.Scan_ЗаказыНаЗавод.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, ?(СокрЛП(PartPeriod) = "", 0, Число(СокрЛП(СтрЗаменить(PartPeriod," ","")))), Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.PartPeriod, НаДату);
	
	Если Объект.Заказчик = Справочники.Scan_Контрагенты.СканияРусь и ЗначениеЗаполнено(ЗакрепленныйМенеджер) Тогда
			// Нужно проверить что данный менеджер установлен как ответственный за заказ на завод
			НужноЗаписатьМенеджера = истина;
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Scan_ЗакреплениеМенеджеровЗаЗаказамиНаЗаводСрезПоследних.Менеджер КАК Менеджер
				|ИЗ
				|	РегистрСведений.Scan_ЗакреплениеМенеджеровЗаЗаказамиНаЗавод.СрезПоследних(, ЗаказНаЗавод = &Ссылка) КАК Scan_ЗакреплениеМенеджеровЗаЗаказамиНаЗаводСрезПоследних";
			
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Если ВыборкаДетальныеЗаписи.Менеджер = ЗакрепленныйМенеджер Тогда
					НужноЗаписатьМенеджера = ложь;	
				КонецЕсли;
			Иначе
				// Закрепленного менеджера нет, и текущий менеджер "Скания Русь", закрепеление не нужно
				Если ЗакрепленныйМенеджер.МенеджерСканияРусь Тогда
					НужноЗаписатьМенеджера = ложь;		
				КонецЕсли;
			КонецЕсли;
			Если НужноЗаписатьМенеджера Тогда
				ЗаписьРегСведений = РегистрыСведений.Scan_ЗакреплениеМенеджеровЗаЗаказамиНаЗавод.СоздатьМенеджерЗаписи();
				ЗаписьРегСведений.ЗаказНаЗавод	  	= Объект.Ссылка;
				ЗаписьРегСведений.Менеджер 			= ЗакрепленныйМенеджер;
				ЗаписьРегСведений.Период      		= ТекущаяДатаСеанса();
				ЗаписьРегСведений.Пользователь 		= ПользователиКлиентСервер.ТекущийПользователь();
				
				Попытка
					ЗаписьРегСведений.Записать();
				Исключение
					ВывестиСообщениеПол(НСтр("ru = 'Ошибка закрепления менеджера за заказом'; en = 'Error assigning manager to order'"));  				              				
				КонецПопытки; 

			КонецЕсли; 
		КонецЕсли;  		
	
	ОбновитьКлючевыеДаты();	// rarus tenkam 13.08.2019 mantis 14427 +
	
	Если ЗначениеЗаполнено(ЛичныйКомментарий) Тогда
		РегистрыСведений.Scan_ЛичныеКомментарииПользователей.ЗаписьЗначенияРегистраСведения(ПараметрыСеанса.ТекущийПользователь, Объект.Ссылка, ЛичныйКомментарий);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	ЭтаФорма.Прочитать();
	Оповестить("ИзмененияКлючевыхДатВФорме",Истина); 
	ОбновитьОтображениеДанных(Элементы.ГотовностьТС);
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	// rarus tenkam 03.12.2020 mantis 16697 +-
	
	ОбновитьКолонкиЗаказовНаЗакупку();//rarus vikhle 12.02.2021 mt 17197
	ОбновитьКарточкуЗаказа();
	
КонецПроцедуры	// rarus tenkam 03.12.2020 mantis 16697 ---

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЕстьБукингЛистПриИзменении(Элемент)
	Если Объект.ЕстьБукингЛист Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаБукингЛиста) Тогда
			Объект.ДатаБукингЛиста = ТекущаяДата();
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Объект.ДатаБукингЛиста) Тогда
			Объект.ДатаБукингЛиста = Дата('00010101');
			Объект.НомерБукингЛиста = "";
		КонецЕсли;
	КонецЕсли;
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТекЗаводскойСтатусЗаказаОткрытие(Элемент, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.ЗаводскойСтатусЗаказа);
КонецПроцедуры	
	
&НаКлиенте
Процедура КлиентПриИзменении(Элемент)	
	Модифицированность = Истина;
КонецПроцедуры	
 
&НаКлиенте
Процедура ТипЗаказаПриИзменении(Элемент)	
	УправлениеДиалогомНаСервере();
КонецПроцедуры	

//rarus vikhle 18.10.2021 m 18435 +++ Заменил на условное оформление
//&НаКлиенте
//Процедура КлючевыеДатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	// rarus tenkam 10.12.2020 mantis 16697 +-  	
//	
//	//rarus vikhle 18.10.2021 m 18435 +++ Заменил на условное оформление
//	//Если СтрНайти(Поле.Имя, "Значение") <> 0 Тогда
//	//	
//	//	ТекущиеДанные = Элементы[Элемент.Имя].ТекущиеДанные;
//	//	Элементы[Элемент.Имя + "Значение"].ТолькоПросмотр = Истина;		
//	//	
//	//	МассивДоступныхДат = ПолучитьДоступныеДляРедактированияКлючевыеДаты();
//	//	
//	//	НайденнаяДата = МассивДоступныхДат.Найти(ТекущиеДанные.КлючеваяДата);
//	//	Если НайденнаяДата <> Неопределено Тогда
//	//		Элементы[Элемент.Имя + "Значение"].ТолькоПросмотр = Ложь;			
//	//	КонецЕсли;
//	//КонецЕсли;
//	//rarus vikhle 18.10.2021 m 18435 ---
//	
//КонецПроцедуры	
//rarus vikhle 18.10.2021 m 18435 ---

&НаКлиенте
Процедура КлючевыеДатыПриИзменении(Элемент)
	ТекущиеДанные = Элементы[Элемент.Имя].ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КлючеваяДата",ТекущиеДанные.КлючеваяДата);
	
	НайденныеСтроки = КлючевыеДатыВсе.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаТЗ = НайденныеСтроки[0];
		СтрокаТЗ.Значение = ТекущиеДанные.Значение;
		
		ОбновитьКлючевыеДатыВТЗ(ТекущиеДанные.КлючеваяДата, ТекущиеДанные.Значение); 
	КонецЕсли;
	
	ПриИзменииКлючевыхДат();
КонецПроцедуры

&НаКлиенте
Процедура ГотовностьТСПриИзменении(Элемент)	 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КлючеваяДата",ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.RFT"));
	
	НайденныеСтроки = КлючевыеДатыВсе.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаТЗ = НайденныеСтроки[0];
		Если Объект.ГотовностьТС Тогда
			СтрокаТЗ.Значение = ТекущаяДата();
		Иначе
			СтрокаТЗ.Значение = Дата(1,1,1);
		КонецЕсли;
		
		ОбновитьКлючевыеДатыВТЗ(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.RFT"), СтрокаТЗ.Значение); 
	КонецЕсли;
	
	ПриИзменииКлючевыхДат();
КонецПроцедуры

&НаКлиенте
Процедура КомплектностьПоставкиПриИзменении(Элемент) 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)	 
	УправлениеДиалогомНаСервере();	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаказыНаЗакупкуОсновнойПриИзменении(Элемент)	

	ПараметрыОтбора = Новый Структура("Основной",Истина);
	МассивОсновныхСтрок = Объект.ЗаказыНаЗакупку.НайтиСтроки(ПараметрыОтбора);
	Если МассивОсновныхСтрок.Количество() > 1 Тогда
		ТекущиеДанные = Элементы.ЗаказыНаЗакупку.ТекущиеДанные;
		ТекущиеДанные.Основной = Ложь;
		ВывестиСообщениеПол(Нстр("ru = 'В таблице уже есть строка с признаком ""Основной""'"));
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура КарточкаЗаказаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)	// rarus tenkam 03.12.2020 mantis 16697 +-
	
	Если Не ЗначениеЗаполнено(Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Строка")
		Или ТипЗнч(Расшифровка) = ТипЗнч(Расшифровка) = Тип("ФорматированнаяСтрока") Тогда
		ИмяЭлемента = Расшифровка;
		Гиперссылка = "";
		ИдентификаторСтроки = Неопределено;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ИмяЭлемента = Расшифровка.ИмяЭлемента;
		ИдентификаторСтроки = Расшифровка.ИдентификаторСтроки;
		//Гиперссылка = Расшифровка.Гиперссылка;
		Гиперссылка = "";
	Иначе
		ТекстИсключения = НСтр("ru = 'Неподдерживаемый тип параметры расшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	Если СтрНайти(ИмяЭлемента, "Гиперссылки") <> 0 Тогда
		ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка);
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	ИначеЕсли Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Если ЕстьПравоРедактирования(ИмяЭлемента, ИдентификаторСтроки) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРеквизиты;
			
			ТекущийЭлементВыбор = ИмяЭлемента;
			ТекущийЭлементВыборИдентификатор = ИдентификаторСтроки;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru = 'Необрабатываемый тип параметр расшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)	//rarus tenkam 07.12.2020 mantis 16697 +-
	
	Если ТекущаяСтраница <> Элементы.СтраницаРеквизиты Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка)
			Или Модифицированность 
			Тогда
			ТекстВопроса = Нстр("ru = 'Заказ еще не записан.
			|Информация, отображаемая в карточке, обновится после записи.
			|Записать?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ГруппаСтраницыПриСменеСтраницыЗавершение", ЭтотОбъект),ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	//rarus tenkam 07.12.2020 mantis 16697 +-
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		ОбновитьКарточкуЗаказа();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ОбновитьЭлементНаСервере()	
	Если НЕ ЗначениеЗаполнено(Объект.IDExternalSystem) Тогда
		//Создан вручную
	Иначе
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(,Ложь);
		СтруктураПараметров.Вставить("GUID", Объект.IDExternalSystem);
		СсылкаЗаказ = Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetOrderToDelivery(СтруктураПараметров, Ложь, "");
		
		MarketChange = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.MarketChange);
		Клиент = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент);
		ТипЗаказа = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод); 
		PartPeriod = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.PartPeriod); 
		КомплектностьПоставки = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.КомплектностьПоставки); //rarus bonmak 04.07.2019 14301
		
		ОбновитьКлючевыеДаты();
		
		SOrder 	= РегистрыСведений.Scan_КвотыSOrderFFUФакт.ПолучитьОпцию(Объект.Ссылка, Справочники.Scan_ТипыОпций.SOrderОпции); 
		FFU 	= РегистрыСведений.Scan_КвотыSOrderFFUФакт.ПолучитьОпцию(Объект.Ссылка, Справочники.Scan_ТипыОпций.FFUОпции);
		
		УправлениеДиалогомНаСервере();
		ЭтаФорма.Прочитать();
		
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлемент(Команда)	
	ОбновитьЭлементНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Избранное(Команда)	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеНастройкиКлючевыхДатПоПользователям", ЭтаФорма);
	ОткрытьФорму("РегистрСведений.Scan_НастройкиКлючевыхДатПоПользователям.Форма.НастройкиОтображенияКлючевыхДат", , ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказыНаЗакупку(Команда)	
	
	ЗаполнитьЗаказыНаЗакупкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиКлючевыхДатПоПользователям(Результат, ДополнительнеПараметры) Экспорт 
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ПеречитатьСписокКлючевыхДат Тогда
		ОбновитьКлючевыеДаты();
		ЭтаФорма.Прочитать();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеДиалогомНаСервере()	
	
	// Букинг-лист
	Элементы.ДатаБукингЛиста.Доступность = Объект.ЕстьБукингЛист;
	Элементы.НомерБукингЛиста.Доступность = Объект.ЕстьБукингЛист;
	
	// Элементы интеграции с 1БД
	Элементы.ФормаГруппаИнтеграция.Видимость = Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством");
	Элементы.ФормаОбновитьЭлемент.Доступность = (ЗначениеЗаполнено(Объект.IDExternalSystem));
	
	Если ЗначениеЗаполнено(Объект.ДатаОбновления) Тогда
		Элементы.ФормаОбновитьЭлемент.Заголовок = Объект.ДатаОбновления;
	КонецЕсли;
	
	РазрешатьРедактироватьПараметрыЗаказаНаЗавод = Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьПараметрыЗаказаНаЗавод");
	Элементы.СтраницаРеквизиты.ТолькоПросмотр = НЕ РазрешатьРедактироватьПараметрыЗаказаНаЗавод;
	Элементы.ГруппаКомментарии.ТолькоПросмотр = НЕ РазрешатьРедактироватьПараметрыЗаказаНаЗавод; 
	
	ТекЗаводскойСтатусЗаказа = Строка(Объект.ЗаводскойСтатусЗаказа.СтатусCOW) + "," + Объект.ЗаводскойСтатусЗаказа.Наименование;
	
	ПользовательЯвляетсяСотрудникомСканияРусь = Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь");
	
	Элементы.ФормаИзбранное.Видимость = ПользовательЯвляетсяСотрудникомСканияРусь; 
	Элементы.СтраницаРеквизиты.Видимость = ПользовательЯвляетсяСотрудникомСканияРусь;
	
	Элементы.ГруппаРеквизитыДилерКлючевыеДаты.Видимость = НЕ ПользовательЯвляетсяСотрудникомСканияРусь;
	
	Если ПользовательЯвляетсяСотрудникомСканияРусь Тогда
		Элементы.СтраницаСистемныеПоля.Видимость = Scan_ПраваИНастройки.Scan_Право("ОтображатьЗакладкуСистемныеПоляВЗаказеНаЗавод");
		Элементы.ГруппаРеквизитыПроизводствоКлючевыеДаты.Видимость = Scan_ПраваИНастройки.Scan_Право("ОтображатьКлючевыеДатыГруппыПроизводствоВЗаказеНаЗавод");
		Элементы.ГруппаРеквизитыНадстройкаКлючевыеДаты.Видимость	= Scan_ПраваИНастройки.Scan_Право("ОтображатьКлючевыеДатыГруппыНадстройкаВЗаказеНаЗавод");
		Элементы.ГруппаРеквизитыЛогистикаКлючевыеДаты.Видимость = Scan_ПраваИНастройки.Scan_Право("ОтображатьКлючевыеДатыГруппыЛогистикаВЗаказеНаЗавод");
		Элементы.ГруппаРеквизитыОтгрузкаКлючевыеДаты.Видимость = Scan_ПраваИНастройки.Scan_Право("ОтображатьКлючевыеДатыГруппыОтгрузкаВЗаказеНаЗавод");
	Иначе
		Элементы.СтраницаСистемныеПоля.Видимость = Ложь;
		
		Элементы.ГруппаРеквизитыПроизводствоКлючевыеДаты.Видимость = Ложь;
		Элементы.ГруппаРеквизитыНадстройкаКлючевыеДаты.Видимость	= Ложь;
		Элементы.ГруппаРеквизитыЛогистикаКлючевыеДаты.Видимость = Ложь;
		Элементы.ГруппаРеквизитыОтгрузкаКлючевыеДаты.Видимость = Ложь; 
		
		Элементы.ГруппаРеквизитыПроизводство.Видимость = Ложь;
		Элементы.ГруппаРеквизитыНадстройка.Видимость = Ложь;
		Элементы.ГруппаРеквизитыЛогистика.Видимость = Ложь;
		Элементы.ГруппаРеквизитыОтгрузка.Видимость = Ложь;	
		
		Элементы.ГруппаРеквизитыНадстройкаЗаказыНаЗакупку.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Объект.Заказчик = ПредопределенноеЗначение("Справочник.Scan_Контрагенты.СканияРусь") Тогда
		Элементы.ЗакрепленныйМенеджер.КнопкаВыпадающегоСписка = Истина;
		Элементы.ЗакрепленныйМенеджер.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ЗакрепленныйМенеджер.КнопкаВыпадающегоСписка = ложь;
		Элементы.ЗакрепленныйМенеджер.ТолькоПросмотр = истина;
	КонецЕсли; 	
	
	РазрешеноРедактированиеДатПоНадстройкам = Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьДатыПоНадстройкам"); 
	Элементы.ГотовностьТС.ТолькоПросмотр = НЕ РазрешеноРедактированиеДатПоНадстройкам;  
	Элементы.ЗаказыНаЗакупкуОсновной.ТолькоПросмотр = НЕ РазрешеноРедактированиеДатПоНадстройкам; 
	
	//rarus agar 19.01.2021 16981 ++
	//ТипСНадстройкой = Справочники.Scan_ТипыПродуктов.ПолучитьПризнакНаличияНастройки(Изделие.ТипПродукта);
	//Если ТипСНадстройкой = Неопределено Тогда
	//	Элементы.СкладОтгрузки.ТолькоПросмотр = Истина;
	//ИначеЕсли ТипСНадстройкой Тогда
	//	Элементы.СкладОтгрузки.ТолькоПросмотр = НЕ Scan_ПраваИНастройки.Scan_Право("РазрешитьИзменятьСкладОтгрузкиДляПродуктовСНадстройкой");
	//ИначеЕсли НЕ ТипСНадстройкой Тогда
	//	Элементы.СкладОтгрузки.ТолькоПросмотр = НЕ Scan_ПраваИНастройки.Scan_Право("РазрешитьИзменятьСкладОтгрузкиДляПродуктовБезНадстройки");	
	//КонецЕсли;
	//rarus agar 19.01.2021 16981 --
	
	Элементы.DDPriority.ТолькоПросмотр	= НЕ Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьDDPriorityВЗаказеНаЗавод");  
	Элементы.DDDeviation.ТолькоПросмотр = НЕ Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьDDDeviationВЗаказеНаЗавод");
	
	//rarus agar 19.01.2021 16981 ++
	//Элементы.ЗапретНаИзменениеСкладаОтгрузки.ТолькоПросмотр = Не Scan_ПраваИНастройки.Scan_Право("РазрешатьУстанавливатьЗапретНаИзменениеСкладаОтгрузки");
	//rarus agar 19.01.2021 16981 --

КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитьДоступныеДляРедактированияКлючевыеДаты()	// rarus tenkam 07.12.2020 mantis 16697 +-
	ДоступныеДляРедактированияКолонки = Новый Массив;
	
	//rarus bonmak 09.08.2021 16834 ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.RFD"));
	//rarus vikhle 20.10.2021 18435 +++ закомментировал
	//ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия"));
	//ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру"));
	//ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве"));
	//rarus vikhle 20.10.2021 18435 ---
	//ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера")); //rarus bonmak 29.03.2021 17400  
	
	Если Scan_ПраваИНастройки.Scan_Право("РазрешатьИзменениеДатыОтгрузкиСЗаводаПриEXW") Тогда
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаОтгрузкиСЗаводаПриEXW"));
	КонецЕсли;
	
	Если Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьEDDиRDB") Тогда
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.EDD")); 
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.RDB")); 
	КонецЕсли;
	
	Если Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьДатыПоНадстройкам") Тогда 
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.AN")); 
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.PAD"));
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.AAD"));
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.PTSD"));
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ADDLBB"));
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.PODOD"));
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.RFT"));
	КонецЕсли;	
	
	// rarus vikhle 08.12.2021 m 18500 +++
	Если Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьКвоту") Тогда 
		ДоступныеДляРедактированияКолонки.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.Квота"));
	КонецЕсли;	
	// rarus vikhle 08.12.2021 m 18500 ---
	
	Возврат ДоступныеДляРедактированияКолонки; 	
КонецФункции

&НаСервере
Процедура ОбновитьКлючевыеДаты()	// rarus tenkam 07.12.2020 mantis 16697 +-
	
	КлючевыеДатыВсе.Очистить();
	
	КлючевыеДатыДилер.Очистить();
	КлючевыеДатыЛогистика.Очистить();
	КлючевыеДатыНадстройка.Очистить();
	КлючевыеДатыОтгрузка.Очистить();
	КлючевыеДатыПроизводство.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	Если ЗначениеЗаполнено(Изделие) Тогда
		МассивОбъектов.Добавить(Изделие);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КлючевыеДаты.Ссылка КАК ВидКлючевойДаты
		|ПОМЕСТИТЬ ВсеКлючевыеДатыОбъекта
		|ИЗ
		|	Перечисление.Scan_КлючевыеДаты КАК Scan_КлючевыеДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КлючевыеДаты.Ссылка КАК КлючеваяДата,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследних.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК Значение
		|ИЗ
		|	Перечисление.Scan_КлючевыеДаты КАК Scan_КлючевыеДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(, Объект В (&МассивОбъектов)) КАК Scan_КлючевыеДатыПроцессовСрезПоследних
		|		ПО Scan_КлючевыеДаты.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследних.ВидКлючевойДаты";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = КлючевыеДатыВсе.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	КонецЦикла;

	// Заполним таблицы с ключевыми датами по настройкам
	ОбъектКлючевыхДат = Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод;
	ИменаНастроеек = СтрРазделить("ДоступностьДилеру, Производство, Надстройка, Логистика, Отгрузка", ", ", Ложь);
	             	
	НастройкиПользователя = РегистрыСведений.Scan_НастройкиКлючевыхДатПоПользователям.ПолучитьНастройки(ОбъектКлючевыхДат);
	
	НастройкиПоГруппамДат = РегистрыСведений.Scan_НастройкиКлючевыхДатЗаказаНаЗаводПоГруппамДат.ПолучитьНастройки(ОбъектКлючевыхДат);
	Для каждого Строка Из НастройкиПоГруппамДат Цикл
		Если НастройкиПользователя.Найти(Строка.КлючеваяДата).Использование <> Неопределено тогда
			Для Каждого ИмяНастройки из ИменаНастроеек цикл
				Строка[ИмяНастройки] = НастройкиПользователя.Найти(Строка.КлючеваяДата).Использование;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого ТекКД Из КлючевыеДатыВсе Цикл
		НастройкиВидимостиДаты = НастройкиПоГруппамДат.Найти(ТекКД.КлючеваяДата, "КлючеваяДата");
		
		Если НастройкиВидимостиДаты.ДоступностьДилеру Тогда
			нСтрока = КлючевыеДатыДилер.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока, ТекКД);
		КонецЕсли;
		
		Если НастройкиВидимостиДаты.Производство Тогда
			нСтрока = КлючевыеДатыПроизводство.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока, ТекКД);
		КонецЕсли;
		
		Если НастройкиВидимостиДаты.Надстройка Тогда
			нСтрока = КлючевыеДатыНадстройка.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока, ТекКД);
		КонецЕсли;
		
		Если НастройкиВидимостиДаты.Логистика Тогда
			нСтрока = КлючевыеДатыЛогистика.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока, ТекКД);
		КонецЕсли;
		
		Если НастройкиВидимостиДаты.Отгрузка Тогда
			нСтрока = КлючевыеДатыОтгрузка.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока, ТекКД);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры             

&НаКлиенте
Процедура ОбновитьКлючевыеДатыВТЗ(ТекКлючеваяДата, ТекЗначение)	// rarus tenkam 07.12.2020 mantis 16697 +-
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КлючеваяДата", ТекКлючеваяДата);
	
	НайденныеСтроки = КлючевыеДатыДилер.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаТЗ = НайденныеСтроки[0];
		СтрокаТЗ.Значение = ТекЗначение;
	КонецЕсли;
	
	НайденныеСтроки = 	КлючевыеДатыЛогистика.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаТЗ = НайденныеСтроки[0];
		СтрокаТЗ.Значение = ТекЗначение;
	КонецЕсли;
	
	НайденныеСтроки = КлючевыеДатыНадстройка.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаТЗ = НайденныеСтроки[0];
		СтрокаТЗ.Значение = ТекЗначение;
	КонецЕсли;
	
	НайденныеСтроки = КлючевыеДатыОтгрузка.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаТЗ = НайденныеСтроки[0];
		СтрокаТЗ.Значение = ТекЗначение;
	КонецЕсли;	
	
	НайденныеСтроки = КлючевыеДатыПроизводство.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаТЗ = НайденныеСтроки[0];
		СтрокаТЗ.Значение = ТекЗначение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменииКлючевыхДат() 
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ВывестиОтветственногоМенеджера()	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗакреплениеМенеджеровЗаЗаказамиНаЗаводСрезПоследних.Менеджер КАК Менеджер
		|ИЗ
		|	РегистрСведений.Scan_ЗакреплениеМенеджеровЗаЗаказамиНаЗавод.СрезПоследних(, ЗаказНаЗавод = &Ссылка) КАК Scan_ЗакреплениеМенеджеровЗаЗаказамиНаЗаводСрезПоследних";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗакрепленныйМенеджер = ВыборкаДетальныеЗаписи.Менеджер; 		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания КАК Компания
			|ПОМЕСТИТЬ ВТ_Дилер
			|ИЗ
			|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
			|		ПО Scan_ЗаказыНаЗавод.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
			|ГДЕ
			|	Scan_ЗаказыНаЗавод.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Scan_ЗакреплениеМенеджеровЗаДилерамиСрезПоследних.Менеджер КАК Менеджер
			|ИЗ
			|	ВТ_Дилер КАК ВТ_Дилер
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ЗакреплениеМенеджеровЗаДилерами.СрезПоследних КАК Scan_ЗакреплениеМенеджеровЗаДилерамиСрезПоследних
			|		ПО ВТ_Дилер.Компания = Scan_ЗакреплениеМенеджеровЗаДилерамиСрезПоследних.Дилер";
		запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() тогда
			ЗакрепленныйМенеджер = ВыборкаДетальныеЗаписи.Менеджер;
		Иначе
			Элементы.ЗакрепленныйМенеджер.ПодсказкаВвода = НСТР("ru = 'Менеджер не закреплен'; en = 'Manager not assigned'");  
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьЗаказыНаЗакупкуНаСервере()	
	
	Если Объект.ЗаказыНаЗакупку.Количество() > 0 Тогда
		//Объект.ЗаказыНаЗакупку.Очистить();
		//rarus vikhle 11.02.2021 mt 17197 +++
		МассивСсылочныхСтрок = Новый Массив;
		Для Каждого СтрокаТЧ Из Объект.ЗаказыНаЗакупку Цикл
			Если НЕ ТипЗнч(СтрокаТЧ.ЗаказНаЗакупку) = Тип("Строка") Тогда
				МассивСсылочныхСтрок.Добавить(СтрокаТЧ);
			КонецЕсли;	
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивСсылочныхСтрок Цикл
			Объект.ЗаказыНаЗакупку.Удалить(ЭлементМассива);
		КонецЦикла;	
		//rarus vikhle 11.02.2021 mt 17197 ---
		Объект.КузовщикиПредставление       = "";
		Объект.ЗаказыНаЗакупкуПредставление = "";
		Модифицированность = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаЗавод", Объект.Наименование);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Scan_ЗаказНаЗакупкуПродуктыКЗаказу.Ссылка КАК ЗаказНаЗакупку,
	|	Scan_ЗаказНаЗакупкуПродуктыКЗаказу.Ссылка.Поставщик КАК Кузовщик,
	//rarus vikhle 12.02.2021 mt 17197 +++
	|	Scan_ЗаказНаЗакупкуПродуктыКЗаказу.Ссылка.ДОНомерЗаказаНаЗакупку КАК ДОНомерЗаказаНаЗакупку,
	|	Scan_ЗаказНаЗакупкуПродуктыКЗаказу.Ссылка.BBНомерЗаказаНаЗакупку КАК BBНомерЗаказаНаЗакупку
	//rarus vikhle 12.02.2021 mt 17197 ---
	|ИЗ
	|	Документ.Scan_ЗаказНаЗакупку.ПродуктыКЗаказу КАК Scan_ЗаказНаЗакупкуПродуктыКЗаказу
	|ГДЕ
	|	Scan_ЗаказНаЗакупкуПродуктыКЗаказу.НомераЗаказов ПОДОБНО ""%"" + &ЗаказНаЗавод + ""%""
	|	И НЕ Scan_ЗаказНаЗакупкуПродуктыКЗаказу.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		//rarus vikhle 11.02.2021 mt 17197 +++
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			нСтрокаТЧ = Объект.ЗаказыНаЗакупку.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрокаТЧ,Выборка);
		КонецЦикла;	
		//rarus vikhle 11.02.2021 mt 17197 ---
		//Объект.ЗаказыНаЗакупку.Загрузить(РезультатЗапроса.Выгрузить());
		ОбновитьПредставленияКузовщикаИЗаказовНаЗакупку();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьПредставленияКузовщикаИЗаказовНаЗакупку()	
	
	ТаблицаЗаказыНаЗакупку = Объект.ЗаказыНаЗакупку.Выгрузить();
	
	ТаблицаКузовщиков = ТаблицаЗаказыНаЗакупку.Скопировать(,"Кузовщик");
	ТаблицаКузовщиков.Свернуть("Кузовщик");
	Объект.КузовщикиПредставление = СтрСоединить(ТаблицаКузовщиков.ВыгрузитьКолонку("Кузовщик"), ",");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказыНаЗакупку", ТаблицаЗаказыНаЗакупку.ВыгрузитьКолонку("ЗаказНаЗакупку"));
	//rarus vikhle 11.02.2021 mt 17197 +++
	Запрос.УстановитьПараметр("ТаблицаЗаказыНаЗакупку",ТаблицаЗаказыНаЗакупку);
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку КАК Номер
	//|ИЗ
	//|	Документ.Scan_ЗаказНаЗакупку КАК Scan_ЗаказНаЗакупку
	//|ГДЕ
	//|	Scan_ЗаказНаЗакупку.Ссылка В(&ЗаказыНаЗакупку)
	//|	И Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку <> """"
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Номер";
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаказыНаЗакупку.ЗаказНаЗакупку КАК ЗаказНаЗакупку
	               |ПОМЕСТИТЬ СтроковыеЗаказы
	               |ИЗ
	               |	&ТаблицаЗаказыНаЗакупку КАК ТаблицаЗаказыНаЗакупку
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ТаблицаЗаказыНаЗакупку.ЗаказНаЗакупку) = ТИП(СТРОКА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫБОР
	               |		КОГДА Scan_ЗаказНаЗакупку.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный)
	               |			ТОГДА Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку
	               |		КОГДА Scan_ЗаказНаЗакупку.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро)
	               |			ТОГДА Scan_ЗаказНаЗакупку.BBНомерЗаказаНаЗакупку
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК Номер
	               |ИЗ
	               |	Документ.Scan_ЗаказНаЗакупку КАК Scan_ЗаказНаЗакупку
	               |ГДЕ
	               |	Scan_ЗаказНаЗакупку.Ссылка В(&ЗаказыНаЗакупку)
	               |	И ВЫБОР
	               |			КОГДА Scan_ЗаказНаЗакупку.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный)
	               |				ТОГДА Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку
	               |			КОГДА Scan_ЗаказНаЗакупку.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро)
	               |				ТОГДА Scan_ЗаказНаЗакупку.BBНомерЗаказаНаЗакупку
	               |			ИНАЧЕ """"
	               |		КОНЕЦ <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СтроковыеЗаказы.ЗаказНаЗакупку
	               |ИЗ
	               |	СтроковыеЗаказы КАК СтроковыеЗаказы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номер";
	//rarus vikhle 11.02.2021 mt 17197 ---
	РезультатЗапроса = Запрос.Выполнить();
	Объект.ЗаказыНаЗакупкуПредставление = СтрСоединить(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номер"), ",");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКарточкуЗаказа()	// rarus tenkam 03.12.2020 mantis 16697 +-
	
	НастройкиКарточкиЗаказа = Справочники.Scan_ЗаказыНаЗавод.НастройкиКарточкиЗаказа(Объект, ЭтотОбъект);
	КарточкаЗаказа = Справочники.Scan_ЗаказыНаЗавод.ТабличныйДокументКарточкиЗаказа(Объект, ЭтотОбъект, НастройкиКарточкиЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()	// rarus tenkam 03.12.2020 mantis 16697 +-
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
	ИмяТаблицыКД = СтрЗаменить(СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя, "Значение", ""),"Основной","");
	
	Если ЗначениеЗаполнено(ТекущийЭлементВыборИдентификатор) И 
		(ИмяТаблицыКД = "КлючевыеДатыПроизводство" ИЛИ
		ИмяТаблицыКД = "КлючевыеДатыНадстройка" ИЛИ
		ИмяТаблицыКД = "КлючевыеДатыЛогистика" ИЛИ
		ИмяТаблицыКД = "КлючевыеДатыОтгрузка" ИЛИ
		ИмяТаблицыКД = "ЗаказыНаЗакупку") Тогда
		
		Элементы[ИмяТаблицыКД].ТекущаяСтрока = ТекущийЭлементВыборИдентификатор;
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка = "")	// rarus tenkam 03.12.2020 mantis 16697 +-
	
	Если ИмяЭлемента = "ГиперссылкиЗамечания" Тогда
		ПараметрыФормы = Новый Структура("Продукт", Изделие);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_ЗамечанияПоАктамПриемоПередачи.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкиЗамечанияИзменить" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Продукт",                                    Изделие);
		ПараметрыФормы.Вставить("Замечание",                                  Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Изделие,"Замечание"));
		ПараметрыФормы.Вставить("КрайняяДатаУстраненияНедостатков",           Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Изделие,"КрайняяДатаУстраненияНедостатков"));
		ПараметрыФормы.Вставить("НеРазрешеноМенятьСрокУстраненияНедостатков", Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Изделие,"НеРазрешеноМенятьСрокУстраненияНедостатков"));
		ПараметрыФормы.Вставить("СрокУстраненияНедостатковДоп",               Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Изделие,"СрокУстраненияНедостатковДоп"));
		ПараметрыФормы.Вставить("ИдентификаторФормы",                         ЭтаФорма.УникальныйИдентификатор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Scan_Изделия.Форма.ФормаВводаЗамечаний");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПараметрыПереходаПоГиперссылке.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПослеИзмененияОбновитьКарточку", ЭтотОбъект));
	ИначеЕсли ИмяЭлемента = "ГиперссылкиИсторияЗаказовНаЗавод" Тогда
		ПараметрыФормы = Новый Структура("Заказ", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		//ПараметрыПереходаПоГиперссылке.Вставить("ВкладкаПерейти",Истина);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиФайлы" Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		//ПараметрыПереходаПоГиперссылке.Вставить("ВкладкаПерейти",Истина);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиКлючевыеДаты" Тогда
		ПараметрыФормы = Новый Структура("Продукт,ЗаказНаЗавод", Изделие, Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_КлючевыеДатыПроцессов.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		//ПараметрыПереходаПоГиперссылке.Вставить("ВкладкаПерейти",Истина);
	ИначеЕсли ИмяЭлемента = "ГиперссылкиСводнаяИнформация" Тогда
		ПараметрыФормы = Новый Структура("ЗаказНаЗавод", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.Scan_СводнаяИнформацияПоПродукту.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		//ПараметрыПереходаПоГиперссылке.Вставить("ВкладкаПерейти",Истина);
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыПереходаПоГиперссылке.Вставить("Гиперссылка", Гиперссылка);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)	// rarus tenkam 03.12.2020 mantis 16697 +-
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность 
		Тогда
		ТекстВопроса = Нстр("ru = 'Заказ еще не записан.
		|Переход возможен только после записи.
		|Записать?'");
		
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	// rarus tenkam 03.12.2020 mantis 16697 +-
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента, ДополнительныеПараметры.Гиперссылка);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)	// rarus tenkam 03.12.2020 mantis 16697 +-
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("ИмяФормы") Тогда
		Если ПараметрыПереходаПоГиперссылке.Свойство("ОписаниеОповещения") Тогда
			ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы,, ЭтаФорма.УникальныйИдентификатор,,,
			ПараметрыПереходаПоГиперссылке.ОписаниеОповещения,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
		ИначеЕсли ПараметрыПереходаПоГиперссылке.Свойство("ВкладкаПерейти") Тогда
			//ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
			ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы, 
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы, 
			ЭтаФорма, Истина, ЭтаФорма.Окно); 		
		Иначе
			ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы,, ЭтаФорма.УникальныйИдентификатор,,,,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
		
		КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru = 'Не определено действие по гиперссылке.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияОбновитьКарточку(Результат, ДополнительныеПараметры) Экспорт	// rarus tenkam 03.12.2020 mantis 16697 +-
	
	ОбновитьКарточкуЗаказа();
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПравоРедактирования(ИмяЭлемента, ИдентификаторСтроки)	// rarus tenkam 03.12.2020 mantis 16697 +-
	ЕстьПравоРедактирования = Истина;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		// Проверим, можем ли редактировать строку таблицы
		ИмяТаблицыКД = Элементы[СтрЗаменить(ИмяЭлемента,"Значение","")].Имя;
		
		Если ИмяТаблицыКД = "КлючевыеДатыПроизводство" ИЛИ
			ИмяТаблицыКД = "КлючевыеДатыНадстройка" ИЛИ
			ИмяТаблицыКД = "КлючевыеДатыЛогистика" ИЛИ
			ИмяТаблицыКД = "КлючевыеДатыОтгрузка" Тогда
			
			СтрокаКД = ЭтотОбъект[ИмяТаблицыКД][ИдентификаторСтроки];
			
			МассивДоступныхДат = ПолучитьДоступныеДляРедактированияКлючевыеДаты();				
			НайденнаяДата = МассивДоступныхДат.Найти(СтрокаКД.КлючеваяДата);
			Если НайденнаяДата = Неопределено Тогда
				ЕстьПравоРедактирования = Ложь;			
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЕстьПравоРедактирования = ((НЕ Элементы[ИмяЭлемента].ТолькоПросмотр) И Элементы[ИмяЭлемента].Доступность);
	КонецЕсли;
	Возврат ЕстьПравоРедактирования;
КонецФункции

//rarus vikhle 12.02.2021 mt 17197 +++
&НаСервере
Процедура ОбновитьКолонкиЗаказовНаЗакупку()
	
	Если Объект.ЗаказыНаЗакупку.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаказОбъект = РеквизитФормыВЗначение("Объект");
	МассивСсылок = ЗаказОбъект.ЗаказыНаЗакупку.ВыгрузитьКолонку("ЗаказНаЗакупку");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ЗаказНаЗакупку.Ссылка КАК ЗаказНаЗакупку,
	               |	Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку КАК ДОНомерЗаказаНаЗакупку,
	               |	Scan_ЗаказНаЗакупку.BBНомерЗаказаНаЗакупку КАК BBНомерЗаказаНаЗакупку
	               |ИЗ
	               |	Документ.Scan_ЗаказНаЗакупку КАК Scan_ЗаказНаЗакупку
	               |ГДЕ
	               |	Scan_ЗаказНаЗакупку.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок",МассивСсылок);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора = Новый Структура("ЗаказНаЗакупку",Выборка.ЗаказНаЗакупку);
		мСтрокТЧ = Объект.ЗаказыНаЗакупку.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТЧ Из мСтрокТЧ Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,Выборка); 	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	
//rarus vikhle 12.02.2021 mt 17197 ---

&НаСервере
Процедура УстановитьУсловноеОформление(); //rarus vikhle 18.10.2021 m 18435 +++
	
	УсловноеОформление.Элементы.Очистить();
	
	// Доступность изменения значений в таблицах ключевых дат
	МассивДоступныхДат = ПолучитьДоступныеДляРедактированияКлючевыеДаты();
	СписокДоступныхДат = Новый СписокЗначений;
	СписокДоступныхДат.ЗагрузитьЗначения(МассивДоступныхДат);
	
	//КлючевыеДатыПроизводство
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КлючевыеДатыПроизводствоЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КлючевыеДатыПроизводство.КлючеваяДата");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение 	= СписокДоступныхДат;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//КлючевыеДатыНадстройка
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КлючевыеДатыНадстройкаЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КлючевыеДатыНадстройка.КлючеваяДата");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение 	= СписокДоступныхДат;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//КлючевыеДатыЛогистика
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КлючевыеДатыЛогистикаЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КлючевыеДатыЛогистика.КлючеваяДата");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение 	= СписокДоступныхДат;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// КлючевыеДатыОтгрузка
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КлючевыеДатыОтгрузкаЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КлючевыеДатыОтгрузка.КлючеваяДата");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение 	= СписокДоступныхДат;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// КлючевыеДатыДилер
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КлючевыеДатыДилерЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КлючевыеДатыДилер.КлючеваяДата");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение 	= СписокДоступныхДат;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
КонецПроцедуры //rarus vikhle 18.10.2021 m 18435 ---

#КонецОбласти
