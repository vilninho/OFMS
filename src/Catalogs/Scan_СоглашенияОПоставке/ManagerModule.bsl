
// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    Результат = Новый Массив;
    Результат.Добавить("НеОбновлятьМоделиИз1БД");
    Результат.Добавить("НеОбновлятьЛогистическиеТипыИз1БД");

    Возврат Результат;
КонецФункции

Функция ПолучитьСписокЭлементовДляНастройки(ТипЗаявки = Неопределено) Экспорт //rarus vikhle 12.08.2021 mt 17834
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблицаЭлементов.Колонки.Добавить("ИмяЭлемента",ОписаниеТиповС,,); 
	
	Если НЕ ТипЗаявки = Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU Тогда //rarus vikhle 12.08.2021 mt 17834
		// добавление реквизитов /ТЧ
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "СтатусСОП";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "НомерСОП";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "Дилер";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "ПродавецДилера";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "РегиональныйМенеджер";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "СтатусЗаказа";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "Модель";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "STDUO";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "НомерКПSPORT";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "КПSPORTДляРазмещенияЗаказаНАЗавод";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "СтандартнаяСпецификация";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "ЗагрузитьКПИз1ДБ";
		//rarus vikhle 11.09.2020 mt 16526 +++
		//СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		//СтрокаТЗ.ИмяЭлемента  = "Склад";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовСкладОтгрузки";
		//rarus vikhle 11.09.2020 mt 16526 ---
		//СтрокаТЗ = ТаблицаЭлементов.Добавить(); //rarus vikhle 04.08.2020 mt 16181 
		//СтрокаТЗ.ИмяЭлемента  = "DeliveryDate"; //rarus vikhle 04.08.2020 mt 16181
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "ЦветКабины";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "ЦветФальшрадиаторнойРешетки";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "Кузовостроитель";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "ТребованияПоКП";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "SORDER";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "FFU";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "КонечныйКлиент";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "Количество";
		//СтрокаТЗ = ТаблицаЭлементов.Добавить();//rarus vikhle 08.09.2020 mt 16181 
		//СтрокаТЗ.ИмяЭлемента  = "Цена"; //rarus vikhle 08.09.2020 mt 16181
		//СтрокаТЗ = ТаблицаЭлементов.Добавить(); //rarus vikhle 04.08.2020 mt 16181  
		//СтрокаТЗ.ИмяЭлемента  = "DDS"; //rarus vikhle 04.08.2020 mt 16181
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "УсловияОплаты";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктов"; //rarus vikhle 20.08.2020 mt 16181
		//rarus agar 03.08.2020 16055 ++
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовДатаОтгрузки";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовСтатусОтгрузки";
		//rarus agar 03.08.2020 16055 --
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Подразделение"; 
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "Сотрудник";

		//СтрокаТЗ = ТаблицаЭлементов.Добавить(); //rarus vikhle 04.08.2020 mt 16181
		//СтрокаТЗ.ИмяЭлемента  = "СпециальныеУсловия";//rarus vikhle 04.08.2020 mt 16181
		//СтрокаТЗ = ТаблицаЭлементов.Добавить();//rarus bonmak 13.01.2021 17041 
		//СтрокаТЗ.ИмяЭлемента  = "ОтсрочкаПлатежа"; //rarus bonmak 13.01.2021 17041 
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "КонечныйКлиентКомпания";	
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "ТипСоглашенияОПоставке";
		
		//rarus vikhle 25.06.2020 mt 15888 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "МенеджерПоПродукту";
		//rarus vikhle 25.06.2020 mt 15888 ---
		
		//rarus vikhle 04.08.2020 mt 16181 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Основание";
		//СтрокаТЗ = ТаблицаЭлементов.Добавить(); //rarus vikhle 08.09.2020 mt 16181
		//СтрокаТЗ.ИмяЭлемента  = "ЦенаБезНДС"; //rarus vikhle 08.09.2020 mt 16181
		//СтрокаТЗ = ТаблицаЭлементов.Добавить();//rarus vikhle 15.09.2020 mt 16181
		//СтрокаТЗ.ИмяЭлемента  = "СтавкаНДС";////rarus vikhle 15.09.2020 mt 16181
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "НомерСоглашенияОПоставке";
			
		//rarus vikhle 08.09.2020 mt 16181 +++ 
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЦенаСНДС";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЦенаБезНДС";
		//rarus vikhle 08.09.2020 mt 16181 --- 
		
		//rarus vikhle 25.11.2020 mt 16846 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовТипЗаказа";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаводскойСтатусЗаказа";
		//rarus vikhle 25.11.2020 mt 16846
		
		//rarus vikhle 03.12.2020 mt 16892 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнениеDDЗапрошенной";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнениеDDS";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнениеСебестоимости";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовДрайв";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовDDS";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ГрафикПлатежей";
		//rarus vikhle 03.12.2020 mt 16892 ---
		
		//rarus vikhle 21.12.2020 mt 16846 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовПроцентДрайв";
		//rarus vikhle 21.12.2020 mt 16846 ---
		
		
		//rarus agar 09.12.2020 16892 ++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовDDЗапрошенная";
		//rarus agar 09.12.2020 16892 --
		
		//rarus vikhle 20.01.2021 mt 16981 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовСкладПродажи";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовМестоПередачи";
		//rarus vikhle 20.01.2021 mt 16981 ---
		
		//rarus vikhle 04.08.2020 mt 16181 +++	
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Код";        	
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СистемныеПоля";
		//rarus ozhnik 16453 14.09.2020 + 
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ДекорацияСпецификация";
		//rarus ozhnik 16453 14.09.2020 -
		//rarus vikhle 29.09.2020 m 16344 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ПереносИзSOWA";
		//rarus vikhle 29.09.2020 m 16344 ---	
		
		//rarus ozhnik 17458 01.04.2021 + 
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ЗакрепленныйМенеджерОКП";
		//rarus ozhnik 17458 01.04.2021 -
			
		// добавление команд
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "Одобрено";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "Отказ";                                 
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); 
		СтрокаТЗ.ИмяЭлемента  = "ОтправитьДистрибьютору";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "КРазмещению";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();                
		СтрокаТЗ.ИмяЭлемента  = "РасторгнутьСОП";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Пересмотр";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "НачатьОформлениеСОП";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ОтменитьСОП";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ОтправитьВБухгалтерию";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "НаСогласование";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		//rarus vikhle 04.08.2020 mt 16181 +++
		//СтрокаТЗ.ИмяЭлемента  = "Подобрать";
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовКоманды";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Скорректировать";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ЗапроситьИзменения";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ОдобритьИзменения";
		СтрокаТЗ = ТаблицаЭлементов.Добавить(); //rarus vikhle 08.09.2020 mt 16181 +++
		СтрокаТЗ.ИмяЭлемента  = "ЗаполнитьЦены"; //rarus vikhle 08.09.2020 mt 16181 +++
		//rarus vikhle 04.08.2020 mt 16181 ---
		//rarus vikhle 21.12.2020 mt 16328 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ОткрытьDDИнформер";
		//rarus vikhle 21.12.2020 mt 16328 ---
		
		//rarus vikhle 05.11.2020 mt 16723 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ОбработкаЗавершена";
		//rarus vikhle 05.11.2020 mt 16723 ---
		
		//rarus vikhle 12.04.2021 mt 17595 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента = "ОтклонитьЗапросИзменений";
		//rarus vikhle 12.04.2021 mt 17595 ---
		
		//rarus vikhle 05.11.2020 mt 16181 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовСебестоимость";
		//rarus vikhle 05.11.2020 mt 16181 ---
		
		//rarus ozhnik 16453 14.09.2020 + 
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СравнитьСпецификации";
		//rarus ozhnik 16453 14.09.2020 -
		
		//rarus agar 08.12.2020 16892 ++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "КПЗагружено";
		//rarus agar 08.12.2020 16892 --
		//rarus vikhle 21.01.2021 mt 16891 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнитьЗапрашиваемоеМестоПередачи";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнитьСкладПродажи";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнитьМестоПередачи";
		//rarus vikhle 21.01.2021 mt 16891 ---
		
		//rarus agar 10.12.2020 16930 ++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовМестонахождение";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗапретНаИзменениеСкладаОтгрузки";
		//rarus agar 10.12.2020 16930 --
		
		//rarus agar 03.02.2020 17123 ++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ЗаявкаНаБУПродукты";
		//rarus agar 03.02.2020 17123 --
		
		// rarus tenkam 02.04.2021 mantis 17419 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ВалютнаяОговорка";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЦенаПоВалютнойОговорке";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовДатаПерерасчета";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнитьЦенаПоВалютнойОговорке";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнитьДатаПерерасчета";	
		// rarus tenkam 02.04.2021 mantis 17419 ---
		// rarus tenkam 15.04.2021 mantis 17519 +++  	
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "РасторгнутьСУстановкойСтатусаDELETED";	
		// rarus tenkam 15.04.2021 mantis 17519 ---  	
		// rarus tenkam 18.06.2021 mantis 17742 +++  	
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ЗаявкаНаАвтобусы";	
		// rarus tenkam 18.06.2021 mantis 17742 ---  	
		
		// rarus agar 24.06.2021 17921 ++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовLeadTime";
		// rarus agar 24.06.2021 17921 --
		
		//rarus vikhle 28.07.2021 mt 17637 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовЗаполнениеСУ";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "УсловияОплатыРазделитьПоПродуктам";
		//rarus vikhle 28.07.2021 mt 17637 --
		
		//rarus vikhle 12.10.2021 mt 18076 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ИсходнаяЗаявка";
		//rarus vikhle 12.10.2021 mt 18076 ---
		
		//rarus vikhle 31.01.2022 m 18813 +++
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктовСпециальныеУсловия";
		//rarus vikhle 31.01.2022 m 18813 ---
		
	//rarus vikhle 13.08.2021 mt 17834 +++	
	Иначе
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ТипСоглашенияОПоставке";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Статус";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "НомерСоглашенияОПоставке";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ОтветственныйЗаРезерв";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Дилер";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Количество";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ЗаявкаНаБУПродукты";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "СписокПродуктов";
		
		// Команды
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ФормаКоманднаяПанель";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "Одобрено";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "ОтменитьСОП";
		СтрокаТЗ = ТаблицаЭлементов.Добавить();
		СтрокаТЗ.ИмяЭлемента  = "РасторгнутьСОП";
		
	//rarus vikhle 13.08.2021 mt 17834 ---	
	КонецЕсли;	
		
	возврат ТаблицаЭлементов;
КонецФункции
 
Функция НайтиСоглашениеОПоставкеПоДоговору (Договор) Экспорт
	
	СоглашениеОПоставке = Справочники.Scan_СоглашенияОПоставке.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_СоглашенияОПоставке.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
		|ГДЕ
		|	Scan_СоглашенияОПоставке.Договор = &Договор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Scan_СоглашенияОПоставке.Код УБЫВ";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоглашениеОПоставке = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	возврат СоглашениеОПоставке;	
КонецФункции
 
// Функция записи параметров в регистр сведений
Функция ЗаписьЗначенияРегистраСведения(Знач ОбъектСтатуса, Знач Статус, НаДату = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если НаДату = Неопределено Тогда
		ДатаЗаписи = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
	Иначе
		ДатаЗаписи = НаДату;
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		//Чтение старого значения регистра
		СтруктураОтбора   = Новый Структура("ОбъектСтатуса", ОбъектСтатуса);
		СтруктураСведений = РегистрыСведений.Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловий.ПолучитьПоследнее(ДатаЗаписи, СтруктураОтбора);
		СтатусСтарый     = СтруктураСведений.Статус;
		Записывать        = Ложь;
		//Введен статус, а старый статус отсутствует
		Если ЗначениеЗаполнено(Статус) И СтатусСтарый = Неопределено Тогда 
			Записывать = Истина; 
		КонецЕсли; 
		//Статус стерт, а старый был введен
		Если НЕ ЗначениеЗаполнено(Статус) И СтатусСтарый <> Неопределено Тогда 
			Записывать = Истина; 
		КонецЕсли; 
		//Введен статус и был старый
		Если ЗначениеЗаполнено(Статус) И СтатусСтарый <> Неопределено Тогда
			//Значение изменилось
			Если Статус <> СтатусСтарый Тогда 
				Записывать = Истина; 
			КонецЕсли; 
		КонецЕсли; 
		Если Записывать Тогда
			//Значение параметра изменилось
			ЗаписьРегСведений = РегистрыСведений.Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловий.СоздатьМенеджерЗаписи();
			ЗаписьРегСведений.ОбъектСтатуса	  = ОбъектСтатуса;
			ЗаписьРегСведений.Статус = Статус;
			ЗаписьРегСведений.Период      = ДатаЗаписи;
			ЗаписьРегСведений.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			
			Попытка
				ЗаписьРегСведений.Записать();
			Исключение

				ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи статуса в регистр сведений'; en = 'Status save error'"));

				Отказ = Истина;
			КонецПопытки; 
		КонецЕсли; 
	КонецЕсли; 
		
	Возврат Отказ;
КонецФункции // ЗаписьЗначенияРегистраСведения()

Процедура ЗапросСпискаКП(НомерКП, ЛогинНаПортале) Экспорт
	
	ИмяМетода = "GetListOfQuotation";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
	СтруктураПараметров.ЛогинПорталаПользователя = ЛогинНаПортале;
	СтруктураПараметров.QuotationNumber = НомерКП;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ОтветМетода = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		СписокКП = Scan_ВебСервисыРазборОтветов.РазборОтветаСписокКоммерческихПредложений(ОтветМетода,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗапросКП(GUID) Экспорт
	
	ИмяМетода = "GetQuotation";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
	СтруктураПараметров.GUID = GUID;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ОтветМетода = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		СписокКП = Scan_ВебСервисыРазборОтветов.РазборОтветаКоммерческоеПредложение(ОтветМетода,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
	КонецЕсли;  	
КонецПроцедуры

//rarus vikhle 01.09.2020 mt 16181 +++

// Возвращает признак наличия драфтов в ТЧ Список продуктов соглашения
Функция СоглашениеСодержитДрафты(СписокПродуктов) Экспорт 
	СодержитДрафты = Ложь;
	Для Каждого СтрокаТЧ Из СписокПродуктов Цикл
		Если ТипЗнч(СтрокаТЧ.Продукт) = Тип("СправочникСсылка.Scan_ДрафтыПродуктов") Тогда
			СодержитДрафты = Истина;
			Прервать;			
		КонецЕсли;	
	КонецЦикла;
	Возврат СодержитДрафты;
КонецФункции	
//rarus vikhle 01.09.2020 mt 16181 +++

//rarus ozhnik 15888 04.09.2020 + 
Процедура УстановитьИсполнениеПоПродукту(ИзделиеСсылка, ДатаПродажи, ВидКлючевойДаты) Экспорт //rarus vikhle 22.03.2021 mt 17324 добавил ВидКлючевойДаты
	СоглашениеОПоставке = РегистрыСведений.Scan_СоставСоглашенийОПоставке.ПолучитьСоглашениеОПоставке(ИзделиеСсылка);
	//rarus vikhle 13.08.2021 mt 17834 +++
	Если ЗначениеЗаполнено(СоглашениеОПоставке) 
		И СоглашениеОПоставке.ТипСоглашенияОПоставке = Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU Тогда
		Возврат;
	КонецЕсли;	
	//rarus vikhle 13.08.2021 mt 17834 ---
	
	КоличествоПроданныхПродуктов = 0;
	
	Если соглашениеОПоставке <> неопределено Тогда
		ТипДилера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеОПоставке,"Дилер.ВидДилера");//rarus vikhle 10.03.2021 mt 17324
		
		//rarus vikhle 22.03.2021 mt 17324 +++
		Если ТипДилера = Перечисления.Scan_ВидыДилеров.Собственный 
			И (ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия ИЛИ ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру) Тогда
			Возврат;
		ИначеЕсли (ТипДилера = Перечисления.Scan_ВидыДилеров.Независимый ИЛИ ТипДилера.Пустая())
			И (ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту ИЛИ ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту) Тогда
			Возврат;	
		//rarus vikhle 23.03.2021 mt 17497 +++	
		ИначеЕсли ТипДилера = Перечисления.Scan_ВидыДилеров.Собственный 
			И ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту 
			И ИзделиеСсылка.БУ Тогда
			Возврат;
		ИначеЕсли ТипДилера = Перечисления.Scan_ВидыДилеров.Собственный 
			И ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту 
			И НЕ ИзделиеСсылка.БУ Тогда 	
			Возврат;
		ИначеЕсли (ТипДилера = Перечисления.Scan_ВидыДилеров.Независимый ИЛИ ТипДилера.Пустая())  
			И ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия 
			И ИзделиеСсылка.БУ Тогда 	
			Возврат;
		ИначеЕсли (ТипДилера = Перечисления.Scan_ВидыДилеров.Независимый ИЛИ ТипДилера.Пустая())  
			И ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру 
			И НЕ ИзделиеСсылка.БУ Тогда 	
			Возврат;	
		//rarus vikhle 23.03.2021 mt 17497 ---	
		КонецЕсли;	
		//rarus vikhle 22.03.2021 mt 17324 ---
		
		//определить все ли изделия из соглашения о поставке уже проданы.
		СписокИзделийДляПроверки = РегистрыСведений.Scan_СоставСоглашенийОПоставке.ПолучитьСписокИзделий(СоглашениеОПоставке);
		ЕстьНеПроданныеИзделия = ложь;
		Для каждого Строка Из СписокИзделийДляПроверки Цикл
			Если строка.Продукт = ИзделиеСсылка Тогда
				ДатаПродажиПродукта = ДатаПродажи;
			Иначе								
				Если Строка.Продукт.БУ 
					И НЕ ТипДилера = Перечисления.Scan_ВидыДилеров.Собственный Тогда //rarus vikhle 10.03.2021 mt 17324 
					ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(строка.Продукт,
					Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру, ТекущаяДатаСеанса()); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
				//rarus vikhle 10.03.2021 mt 17324 +++	
				ИначеЕсли Строка.Продукт.БУ И ТипДилера = Перечисления.Scan_ВидыДилеров.Собственный Тогда
					//Для собственных дилеров для БУ ориентируемся на ДатуПродажиБУКлиенту
					ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(Строка.Продукт,
					Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту, ТекущаяДатаСеанса()); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата() 	
				ИначеЕсли НЕ Строка.Продукт.БУ И ТипДилера = Перечисления.Scan_ВидыДилеров.Собственный Тогда
					//Для собственных дилеров для новых ориентируемся на ДатуПродажиКлиенту
					ЗаказНаЗавод = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(строка.Продукт);
					ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ЗаказНаЗавод,
					Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту, ТекущаяДатаСеанса()); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата() 	 
				//rarus vikhle 10.03.2021 mt 17324 ---	
				Иначе
					ЗаказНаЗавод = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(строка.Продукт);
					
					ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ЗаказНаЗавод,
					Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, ТекущаяДатаСеанса()); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
				КонецЕсли;
			КонецЕсли;
			Если  ЗначениеЗаполнено(ДатаПродажиПродукта) 
				И ТипЗнч(ДатаПродажиПродукта) = Тип("Дата")
				И ДатаПродажиПродукта <> Дата(1,1,1) 
				Тогда
				КоличествоПроданныхПродуктов = КоличествоПроданныхПродуктов + 1;
			КонецЕсли;
		КонецЦикла; 
		// Либо есть непроданные изделия - тогда статус соглашения "исполнен частично" либо все проданы тогда статус "исполнено"
		Если КоличествоПроданныхПродуктов > 0 Тогда
			СоглашениеОПоставкеОбъект = СоглашениеОПоставке.ПолучитьОбъект();
			
			Если СписокИзделийДляПроверки.Количество() = КоличествоПроданныхПродуктов Тогда 
				СоглашениеОПоставкеОбъект.Статус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Исполнен;			
			Иначе
				СоглашениеОПоставкеОбъект.Статус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_ИсполненЧастично;
			КонецЕсли;
			Попытка	
				СоглашениеОПоставкеОбъект.Записать();
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли; 					

КонецПроцедуры         
//rarus ozhnik 15888 04.09.2020 -

Функция УстановитьСтатусСоглашенияОПоставке(СоглашениеОПоставкеСсылка, Статус) Экспорт		// rarus tenkam 22.10.2020 mantis 16181 +++
	СоглашениеОбъект = СоглашениеОПоставкеСсылка.ПолучитьОбъект();
	СоглашениеОбъект.Статус = Статус;
	Попытка
		СоглашениеОбъект.Записать();
		Возврат Истина;
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка установки статуса <%1> в соглашении <%2>: %3'"),,,,, Статус, СоглашениеОбъект, ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;    	
КонецФункции	// rarus tenkam 22.10.2020 mantis 16181 ---

Функция УстановитьСтатусСОПОформлен(СОПДоговорСсылка, СообщениеОбОшибке = "") Экспорт		// rarus tenkam 22.10.2020 mantis 16181 +++
	СоглашениеОПоставкеСсылка = Справочники.Scan_СоглашенияОПоставке.НайтиСоглашениеОПоставкеПоДоговору(СОПДоговорСсылка);
	Если НЕ ЗначениеЗаполнено(СоглашениеОПоставкеСсылка) Тогда
		СообщениеОбОшибке = "Не удалось найти соглашение о поставке по договору " + СОПДоговорСсылка;
		Возврат Ложь;
	КонецЕсли;
	
	ВсеОК = Ложь;
	Если СоглашениеОПоставкеСсылка.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НачатоОформлениеСОП") И
		ЗначениеЗаполнено(СОПДоговорСсылка.IDExternalSystem) Тогда
		
		ВсеОК = УстановитьСтатусСоглашенияОПоставке(СоглашениеОПоставкеСсылка, ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен"));
	КонецЕсли;
	Если НЕ ВсеОК Тогда
		СообщениеОбОшибке = "Не удалось  установить статус СОП оформлен для соглашения " + СоглашениеОПоставкеСсылка;
	КонецЕсли;
	Возврат ВсеОК;
КонецФункции

// Возвращает статус, который был до статуса "Запрос на изменение СОП", учитываются все версии заявки
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Scan_СоглашенияОПоставке	-  ссылка на заявку
// 
// Возвращаемое значение:
//  Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий - статус, который был до статуса "Запрос на изменение СОП", учитываются все версии заявки
//
Функция ПолучитьСтатусДоЗапросаИзменений(Ссылка) Экспорт 
	//rarus vikhle 28.02.2021 mt 17186 +++
	//Получим список родительских заявок из структуры подчиненности + текущая заявка
	СписокЗаявок = Scan_ВспомогательныеФункцииСервер.ПолучитьРодительскиеОбъекты(Ссылка, "Основание",, Истина); //rarus vikhle 06.10.2021 mt 18076 + 2й параметр
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловийСрезПоследних.Статус КАК Статус,
	               |	Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловийСрезПоследних.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловий КАК Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловийСрезПоследних
	               |ГДЕ
	               |	НЕ Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловийСрезПоследних.Статус В (&Статусы)
	               |	И Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловийСрезПоследних.ОбъектСтатуса В(&СписокЗаявок)
				   //rarus vikhle 31.08.2021 17834 +++
				   |	И Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловийСрезПоследних.ОбъектСтатуса.ТипСоглашенияОПоставке = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОП)
				    //rarus vikhle 31.08.2021 17834 ---
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	
	Статусы = Новый Массив;
	Статусы.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС);
	Статусы.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.ЗапросНаИзменениеСОП);
	
	Запрос.УстановитьПараметр("Статусы",Статусы);
	Запрос.УстановитьПараметр("СписокЗаявок", СписокЗаявок);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Статус;
	
	//rarus vikhle 28.02.2021 mt 17186 ---
КонецФункции	

// rarus kabany 14.07.2021 17897 ++

// Создает новую версию «Заявки на СОП» и «СОП» с видом договора «Доп. соглашение к СОП» не изменяя реквизиты.
Функция СоздатьНовуюВерсиюЗаявкиНаСОП(ТекущееСоглашениеОПоставке) Экспорт

	СтарыйСтатус = ТекущееСоглашениеОПоставке.Статус;
//Создание доп. соглашения
	НачатьТранзакцию();
	Попытка
		//ДопСоглашениеОПоставке = Справочники.Scan_СоглашенияОПоставке.СоздатьЭлемент();
		ДопСоглашениеОПоставке = ТекущееСоглашениеОПоставке.Скопировать();
		ДопСоглашениеОПоставке.Заполнить(ТекущееСоглашениеОПоставке);
		ДопСоглашениеОПоставке.Автор = Пользователи.ТекущийПользователь().КонтактноеЛицоКомпании;			
		//Корректировка текущего соглашения о поставке
		ТекущееСоглашениеОбъект = ТекущееСоглашениеОПоставке.ПолучитьОбъект();
		ТекущееСоглашениеОбъект.Заблокировать(); // rarus kabany 19.07.2021 // АПК добавлена блокировка
		ТекущееСоглашениеОбъект.Статус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС;
		ТекущееСоглашениеОбъект.IDПродуктаКП = "";
		ТекущееСоглашениеОбъект.НомерКоммерческогоПредложенияSPORT = "";
		НачатьТранзакцию();
		Попытка
			ТекущееСоглашениеОбъект.Записать();
			ВывестиСообщениеПол(НСтр("ru = 'В текущей заявке установлен статус ""Неактуально. Есть ДС"".'"),ТекущееСоглашениеОПоставке); // rarus kabany 14.07.2021 17992 ++
			ЗафиксироватьТранзакцию();								
		Исключение
			ОтменитьТранзакцию();
			ВывестиСообщениеПол(НСтр("ru = 'Произошла ошибка при записи текущей заявки.'"),ТекущееСоглашениеОПоставке);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Корректировка текущей заявки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Произошла ошибка при записи текущей заявки.'") +  ОписаниеОшибки()); // Rarus tenkam 28.06.2022 mantis 18726 АПК + (Код основного языка)		
			ВызватьИсключение;							
		КонецПопытки;
		
		//Корректировка СОП
		
		Если ЗначениеЗаполнено(ТекущееСоглашениеОПоставке.Договор) Тогда 
			Если СтарыйСтатус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен
				ИЛИ СтарыйСтатус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НачатоОформлениеСОП
				ИЛИ СтарыйСтатус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_ИсполненЧастично Тогда //rarus vikhle 12.08.2021 18147
				
				ТекущийСОПОбъект = ТекущееСоглашениеОПоставке.Договор.ПолучитьОбъект();
				ТекущийСОПОбъект.ДатаОкончания = ТекущаяДатаСеанса();
				НачатьТранзакцию();
				Попытка
					ТекущийСОПОбъект.Записать();
					Сообщить(НСтр("ru='В текущем СОП установлена дата окончания.'")); // Rarus tenkam 29.06.2022 mantis 18726 АПК + (НСтр)
					ЗафиксироватьТранзакцию();						
				Исключение
					ОтменитьТранзакцию();
					Сообщить(НСтр("ru='Произошла ошибка при записи текущего СОП'"));  // Rarus tenkam 29.06.2022 mantis 18726 АПК + (НСтр)
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Корректировка текущего СОП'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					НСтр("ru = 'Произошла ошибка при записи текущего СОП.'") +  ОписаниеОшибки()); // Rarus tenkam 28.06.2022 mantis 18726 АПК + (Код основного языка)
					ВызватьИсключение;						
				КонецПопытки;
				
				ДопСоглашениеКСОП = Справочники.Scan_ДоговорыВзаиморасчетов.СоздатьЭлемент();
				ДопСоглашениеКСОП.Заполнить(ТекущийСОПОбъект.Ссылка);
				ДопСоглашениеКСОП.ДатаНачала = ТекущаяДатаСеанса(); // АПК было: ТекущаяДата() 	
				ДопСоглашениеКСОП.ВидДоговора = Перечисления.Scan_ВидыДоговоров.ДопСоглашениеКСОП;
				ДопСоглашениеКСОП.Компания = ТекущийСОПОбъект.Компания; 
				ИндексРазделителяНомераСоглашения = СтрНайти(ТекущийСОПОбъект.НомерДоговора,"-",,6); 
				Если НЕ ИндексРазделителяНомераСоглашения = 0 Тогда
					//имеются доп соглашения, прибавляем 1
					СтарыйНомерДопСоглашения = Число(Прав(ТекущийСОПОбъект.НомерДоговора,СтрДлина(ТекущийСОПОбъект.НомерДоговора)- ИндексРазделителяНомераСоглашения));
					ДопСоглашениеКСОП.НомерДоговора = Лев(ТекущийСОПОбъект.НомерДоговора,СтрДлина(ТекущийСОПОбъект.НомерДоговора)
					- СтрДлина(СтарыйНомерДопСоглашения)) + (СтарыйНомерДопСоглашения + 1); 	
				Иначе
					//первое доп соглашение
					ДопСоглашениеКСОП.НомерДоговора = ТекущийСОПОбъект.НомерДоговора + "-1";	
				КонецЕсли;
				ДопСоглашениеКСОП.Наименование = "№ " + СокрЛП(ДопСоглашениеКСОП.НомерДоговора) + " от " + Формат(ДопСоглашениеКСОП.ДатаНачала,НСтр("ru='ДФ=дд.ММ.гггг; ДЛФ=Д'"));
				//rarus vikhle 27.08.2020 mt 16181 ---
				
				ДопСоглашениеКСОП.IDExternalSystem = ""; 
				НачатьТранзакцию();
				Попытка
					ДопСоглашениеКСОП.Записать();
					ВывестиСообщениеПол(НСтр("ru = 'Успешно создана новая версия СОП.'"),ДопСоглашениеКСОП); // rarus kabany 14.07.2021 17992 ++
					НеобходимоСоздатьСОПВ1БД = Истина;						
					ЗафиксироватьТранзакцию();						
				Исключение
					ОтменитьТранзакцию();
					ВывестиСообщениеПол(НСтр("ru = 'Произошла ошибка при записи новой версии СОП'"),ТекущийСОПОбъект); // rarus kabany 14.07.2021 17992 ++
					ЗаписьЖурналаРегистрации(НСтр("ru='Создание новой версии СОП'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					"Произошла ошибка при записи новой версии СОП." + (ОписаниеОшибки())); 
					ВызватьИсключение;						
				КонецПопытки;	
				
				ДопСоглашениеОПоставке.Договор = ДопСоглашениеКСОП.Ссылка;
			КонецЕсли;	
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			ДопСоглашениеОПоставке.Записать();
			//Сообщить("Успешно создано дополнительное соглашение о поставке.");
			ВывестиСообщениеПол(НСтр("ru = 'Успешно создана дополнительная заявка.'"),ДопСоглашениеОПоставке); // rarus kabany 14.07.2021 17992 ++
			ЗафиксироватьТранзакцию();						
		Исключение
			ОтменитьТранзакцию();
			//rarus vikhle 05.11.2020 mt 16723 +++
			//Сообщить("Произошла ошибка при записи дополнительного соглашения о поставке.");
			ВывестиСообщениеПол(НСтр("ru = 'Произошла ошибка при записи дополнительной заявки.'"));
			ЗаписьЖурналаРегистрации(НСтр("ru='Создание дополнительной заявки'",ОбщегоНазначения.КодОсновногоЯзыка()),
									УровеньЖурналаРегистрации.Ошибка,,,
									"Произошла ошибка при записи дополнительной заявки." + ОписаниеОшибки()); // Rarus tenkam 28.06.2022 mantis 18726 АПК + (Код основного языка)
			//rarus vikhle 05.11.2020 mt 16723 ---						
			ВызватьИсключение;						
		КонецПопытки;
		
		НовоеСоглашениеОПоставке = ДопСоглашениеОПоставке.Ссылка;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();	
		ВывестиСообщениеПол(НСтр("ru = 'Во время записи данных произошли ошибки, все изменения отменены. Подробности в журнале регистрации'"),ТекущееСоглашениеОПоставке); // rarus kabany 14.07.2021 17992 ++
		ВызватьИсключение;
	КонецПопытки;
	
	Если НеобходимоСоздатьСОПВ1БД И НЕ НовоеСоглашениеОПоставке.Пустая() Тогда
		Справочники.Scan_ДоговорыВзаиморасчетов.СоздатьДоговорВ1БД(НовоеСоглашениеОПоставке.Договор, НовоеСоглашениеОПоставке);		
	КонецЕсли;
	
	//rarus vikhle 25.11.2021 m 18591 +++
	МассивПродуктов = НовоеСоглашениеОПоставке.СписокПродуктов.ВыгрузитьКолонку("Продукт");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивПродуктов, Тип("СправочникСсылка.Scan_ДрафтыПродуктов"));
	
	ДокументыПродуктов = Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьДокументыУстановкиЦенПоМассивуПродуктов(МассивПродуктов);
	Для Каждого Строка Из ДокументыПродуктов Цикл
		НовыйДокумент = Документы.Scan_УстановкаПлановыхЦенПродукта.СкопироватьДокумент(Строка.Значение,  НовоеСоглашениеОПоставке);
		
		Если НовыйДокумент = Неопределено Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка при создании документа установки плановых цен продукта %1: %2'"),,,,,
								Строка.Значение.Продукт, ОписаниеОшибки());				
		Иначе
			ВывестиСообщениеПол(НСтр("ru = 'Успешно создан документ установки плановых цен для продукта %1.'"),,,,,
								Строка.Значение.Продукт);						
		КонецЕсли;
							
	КонецЦикла;	
	//rarus vikhle 25.11.2021 m 18591 ---
	
	// Обновление реквизита "СоглашениеОПоставке" в заявках на отгрузку
	//rarus vikhle 01.09.2021 mt 18228 +++
	//МассивПродуктов = НовоеСоглашениеОПоставке.СписокПродуктов.ВыгрузитьКолонку("Продукт"); //rarus vikhle 25.11.2021 m 18591
	Документы.Scan_ЗаявкаНаОтгрузку.ОбновитьЗаявкуВЗаявкахНаОтгрузкуПродуктов(МассивПродуктов, НовоеСоглашениеОПоставке);
	//rarus vikhle 01.09.2021 mt 18228 ---
	
	Возврат НовоеСоглашениеОПоставке; 
КонецФункции
// rarus kabany 14.07.2021 17897 --

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	//rarus vikhle 23.07.2021 mt 17834 +++
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("Ключ") И НЕ Параметры.Ключ.Пустая() Тогда 
			ТипЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ТипСоглашенияОПоставке");
			Если ТипЗаявки = Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлементаЗаявкаНаСОПSRU"; 
			КонецЕсли;
		ИначеЕсли Параметры.Свойство("Основание") 
			И ТипЗнч(Параметры.Основание) = Тип("Структура") 
			И Параметры.Основание.Свойство("ТипЗаявки")
			И Параметры.Основание.ТипЗаявки = Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU Тогда	
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма		 = "ФормаЭлементаЗаявкаНаСОПSRU"; 	
		КонецЕсли;	
	КонецЕсли;	
	//rarus vikhle 23.07.2021 mt 17834 ---
	
КонецПроцедуры

// Возвращает сгруппированную таблицу значений условий оплаты  
//
// Параметры:
//  ТаблицаУсловийОплаты - ТаблицаЗначений: 
//		* ВидОплаты 
//      * ПроцентОплаты
//      * СрокОплатыАванса
//      * РасчетДатыОплаты
//		* КрайняяДатаОплаты
//		* Сумма
//
// Возвращаемое значение:
//  ТаблицаЗначений:  
//		* ВидОплаты 
//      * ПроцентОплаты
//      * СрокОплатыАванса
//      * РасчетДатыОплаты
//		* КрайняяДатаОплаты
//		* Сумма
Функция СгруппированныеУсловияОплаты(ТаблицаУсловийОплаты) Экспорт //rarus vikhle 04.08.2021 mt 17637 +++
	
	СгруппированныеУсловия = Новый ТаблицаЗначений;
	СгруппированныеУсловия.Колонки.Добавить("ВидОплаты"); 
	СгруппированныеУсловия.Колонки.Добавить("ПроцентОплаты");
	СгруппированныеУсловия.Колонки.Добавить("СрокОплатыАванса");
	СгруппированныеУсловия.Колонки.Добавить("РасчетДатыОплаты");
	СгруппированныеУсловия.Колонки.Добавить("КрайняяДатаОплаты");
	СгруппированныеУсловия.Колонки.Добавить("Сумма");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияОплаты.ВидОплаты КАК ВидОплаты,
	               |	УсловияОплаты.ПроцентОплаты КАК ПроцентОплаты,
	               |	УсловияОплаты.СрокОплатыАванса КАК СрокОплатыАванса,
	               |	УсловияОплаты.РасчетДатыОплаты КАК РасчетДатыОплаты,
	               |	УсловияОплаты.КрайняяДатаОплаты КАК КрайняяДатаОплаты,
	               |	УсловияОплаты.Сумма КАК Сумма
	               |ПОМЕСТИТЬ УсловияОплаты
	               |ИЗ
	               |	&УсловияОплаты КАК УсловияОплаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УсловияОплаты.ВидОплаты КАК ВидОплаты,
	               |	УсловияОплаты.ПроцентОплаты КАК ПроцентОплаты,
	               |	УсловияОплаты.СрокОплатыАванса КАК СрокОплатыАванса,
	               |	УсловияОплаты.РасчетДатыОплаты КАК РасчетДатыОплаты,
	               |	ВЫБОР
	               |		КОГДА УсловияОплаты.РасчетДатыОплаты = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыДоговора)
	               |			ТОГДА УсловияОплаты.КрайняяДатаОплаты
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |	КОНЕЦ КАК КрайняяДатаОплаты,
	               |	СУММА(УсловияОплаты.Сумма) КАК Сумма
	               |ИЗ
	               |	УсловияОплаты КАК УсловияОплаты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УсловияОплаты.ВидОплаты,
	               |	УсловияОплаты.ПроцентОплаты,
	               |	УсловияОплаты.СрокОплатыАванса,
	               |	УсловияОплаты.РасчетДатыОплаты,
	               |	ВЫБОР
	               |		КОГДА УсловияОплаты.РасчетДатыОплаты = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыДоговора)
	               |			ТОГДА УсловияОплаты.КрайняяДатаОплаты
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |	КОНЕЦ";
	Запрос.УстановитьПараметр("УсловияОплаты", ТаблицаУсловийОплаты);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СгруппированныеУсловия = Результат.Выгрузить();
	КонецЕсли;
	
	Возврат СгруппированныеУсловия;
КонецФункции //rarus vikhle 04.08.2021 mt 17637 ---	

// Возвращает сгруппированную таблицу значений графика платежей
//
// Параметры:
//  ТаблицаГрафикаПлатежей	 - ТаблицаЗначений:
//		* ВидОплаты
//      * ДатаПлатежа
//      * Сумма
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//		* ВидОплаты
//      * ДатаПлатежа
//      * Сумма
//
Функция СгруппированныйГрафикПлатежей(ТаблицаГрафикаПлатежей) Экспорт //rarus vikhle 04.08.2021 mt 17637 +++
	
	СгруппированныйГрафик = Новый ТаблицаЗначений;
	СгруппированныйГрафик.Колонки.Добавить("ВидОплаты"); 
	СгруппированныйГрафик.Колонки.Добавить("ДатаПлатежа");
	СгруппированныйГрафик.Колонки.Добавить("Сумма");
		
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикПлатежей.ВидОплаты КАК ВидОплаты,
	               |	ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	               |	ГрафикПлатежей.Сумма КАК Сумма
	               |ПОМЕСТИТЬ ГрафикПлатежей
	               |ИЗ
	               |	&ГрафикПлатежей КАК ГрафикПлатежей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГрафикПлатежей.ВидОплаты КАК ВидОплаты,
	               |	ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	               |	СУММА(ГрафикПлатежей.Сумма) КАК Сумма
	               |ИЗ
	               |	ГрафикПлатежей КАК ГрафикПлатежей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикПлатежей.ВидОплаты,
	               |	ГрафикПлатежей.ДатаПлатежа";
	Запрос.УстановитьПараметр("ГрафикПлатежей", ТаблицаГрафикаПлатежей);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СгруппированныйГрафик = Результат.Выгрузить();	
	КонецЕсли;	
		
	Возврат СгруппированныйГрафик;
КонецФункции //rarus vikhle 04.08.2021 mt 17637 ---

// Возвращает признак необходимости проверки лимитов при записи заявки и при создании корректировок
//
// Параметры:
//  Дилер	 - СправочникСсылка.Scan_Компании	 - Диле заявки
//  Договор	 - СправочникСсылка.Scan_ДоговорыВзаиморасчетов	 - Договор заявки
// 
// Возвращаемое значение:
// Булево  -  признак необходимости проверки лимитов при записи заявки и при создании корректировок
//
Функция НужноПроверятьЛимиты(Дилер, Договор) Экспорт //rarus vikhle 21.10.2021 m 18076 +++ 
	
	НужноПроверятьЛимиты = Ложь;
	
	ВидДилера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Дилер, "ВидДилера");
	
	Если НЕ ВидДилера = Перечисления.Scan_ВидыДилеров.Собственный Тогда			
		
		// Лимиты проверются, если дата 1го договора с видом "Соглашение о поставке" больше или равна значению из настройки
		МинимальнаяДатаСОП	= Scan_ПраваИНастройки.Scan_Право("МинимальнаяДатаСОПДляКонтроляЛимитов");
		ДоговорыЗаявки		= Scan_ВспомогательныеФункцииСервер.ПолучитьРодительскиеОбъекты(Договор, "ДоговорОснование",, Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Scan_ДоговорыВзаиморасчетов.ДатаНачала КАК ДатаНачала
		               |ИЗ
		               |	Справочник.Scan_ДоговорыВзаиморасчетов КАК Scan_ДоговорыВзаиморасчетов
		               |ГДЕ
		               |	Scan_ДоговорыВзаиморасчетов.Ссылка В(&ДоговорыЗаявки)
		               |	И Scan_ДоговорыВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДоговоров.Соглашение)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаНачала";
		Запрос.УстановитьПараметр("ДоговорыЗаявки", ДоговорыЗаявки);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаОсновногоДоговора = Выборка.ДатаНачала;
		Иначе
			ДатаОсновногоДоговора = Дата(1,1,1);	
		КонецЕсли;	
		
		НужноПроверятьЛимиты = ДатаОсновногоДоговора >= МинимальнаяДатаСОП;
			
	КонецЕсли;	
	
	Возврат НужноПроверятьЛимиты;
	
КонецФункции //rarus vikhle 21.10.2021 m 18076 ---	

// Обновляет дату DDS и строки табличных частей Условия оплаты и График платежей, зависящие от даты DDS, в неактульных версиях заявки. 
//
// Параметры:
//  Заявка	 - Справочник.Scan_СоглашенияОПоставке	 - актуальная версия заявки
//
Процедура ОбновитьДанныеDDSВЗаявках(Заявка) Экспорт //rarus vikhle 26.10.2021 m 18426 +++
	
	НеактуальныеЗаявки = Scan_ВспомогательныеФункцииСервер.ПолучитьРодительскиеОбъекты(Заявка, "Основание",, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка КАК Заявка,
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Продукт КАК Продукт,
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.DDS КАК DDSАктуальный
	               |ПОМЕСТИТЬ ТЧАктуальнойЗаявки
	               |ИЗ
	               |	Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
	               |ГДЕ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка = &АктуальнаяЗаявка
	               |	И Scan_СоглашенияОПоставкеСписокПродуктов.Продукт ССЫЛКА Справочник.Scan_Изделия
				   // rarus vikhle 06.12.2021 m 18426 +++
				   |	И НЕ Scan_СоглашенияОПоставкеСписокПродуктов.DDS = ДАТАВРЕМЯ(1, 1, 1)
				    // rarus vikhle 06.12.2021 m 18426 ---
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка КАК Заявка,
	               |	ТЧАктуальнойЗаявки.Продукт КАК Продукт,
	               |	ТЧАктуальнойЗаявки.DDSАктуальный КАК DDSАктуальный,
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка.НомерСоглашенияОПоставке КАК НомерЗаявки
	               |ИЗ
	               |	ТЧАктуальнойЗаявки КАК ТЧАктуальнойЗаявки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
	               |		ПО ТЧАктуальнойЗаявки.Продукт = Scan_СоглашенияОПоставкеСписокПродуктов.Продукт
	               |			И ТЧАктуальнойЗаявки.DDSАктуальный <> Scan_СоглашенияОПоставкеСписокПродуктов.DDS
				    // rarus vikhle 06.12.2021 m 18426 +++
				   |			И (Scan_СоглашенияОПоставкеСписокПродуктов.DDS = ДАТАВРЕМЯ(1, 1, 1))
				    // rarus vikhle 06.12.2021 m 18426 ---
	               |ГДЕ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка В(&НеактуальныеЗаявки)
	               |	И Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС)
	               |ИТОГИ ПО
	               |	Заявка";
	Запрос.УстановитьПараметр("АктуальнаяЗаявка", 	Заявка);
	Запрос.УстановитьПараметр("НеактуальныеЗаявки", НеактуальныеЗаявки);
		
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		ЗаявкаОбъект = Выборка.Заявка.ПолучитьОбъект();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаПродукта = ЗаявкаОбъект.СписокПродуктов.Найти(ВыборкаДетальныеЗаписи.Продукт, "Продукт");
			Если СтрокаПродукта <> Неопределено Тогда
				СтрокаПродукта.DDS = ВыборкаДетальныеЗаписи.DDSАктуальный;
				
				//Обновление строк графика платежей, в которых вид расчета даты оплаты = "ДоДатыОтгрузкиDDS" или "ДоДатыОтгрузкиDDS" 
				Отбор = Новый Структура("Продукт", ВыборкаДетальныеЗаписи.Продукт);
				СтрокиУсловийПродукта = ЗаявкаОбъект.УсловияОплаты.НайтиСтроки(Отбор);
				Для Каждого СтрокаУсловий Из СтрокиУсловийПродукта Цикл
					
					Если СтрокаУсловий.РасчетДатыОплаты = Перечисления.Scan_ВидыРасчетаДатыОплаты.ДоДатыОтгрузкиDDS Тогда
						
						Если СтрокаПродукта.DDS <> Дата(1,1,1) Тогда 
							СтрокаУсловий.КрайняяДатаОплаты = Scan_ОбщегоНазначенияСервер.ВычестьРабочиеДни(НачалоДня(СтрокаПродукта.DDS), СтрокаУсловий.СрокОплатыАванса);	
						Иначе
							СтрокаУсловий.КрайняяДатаОплаты = Дата(1,1,1);	
						КонецЕсли;	
						
					ИначеЕсли СтрокаУсловий.РасчетДатыОплаты = Перечисления.Scan_ВидыРасчетаДатыОплаты.ОтДатыОтгрузкиDDS Тогда 
						
						Если СтрокаПродукта.DDS <> Дата(1,1,1) Тогда
							СтрокаУсловий.КрайняяДатаОплаты = Scan_ОбщегоНазначенияСервер.ДобавитьРабочиеДни(НачалоДня(СтрокаПродукта.DDS), СтрокаУсловий.СрокОплатыАванса);	
						Иначе 
							СтрокаУсловий.КрайняяДатаОплаты = Дата(1,1,1);		
						КонецЕсли;	
						
					КонецЕсли;	
					
				КонецЦикла;	
				
				// Обновление строк по продукту в графике платежей
				Если СтрокиУсловийПродукта.Количество() > 0 Тогда
					ОбновитьГрафикПлатежей(ЗаявкаОбъект.ГрафикПлатежей, ЗаявкаОбъект.УсловияОплаты, ВыборкаДетальныеЗаписи.Продукт); 	
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если ЗаявкаОбъект.Модифицированность() Тогда
			
			ИмяСобытия = НСтр("ru = 'Обновление данных по DDS в неактуальных заявках'", ОбщегоНазначения.КодОсновногоЯзыка()); 
			
			Попытка
				ЗаявкаОбъект.Записать();	
				ЗаписьЖурналаРегистрации(ИмяСобытия,
										УровеньЖурналаРегистрации.Примечание,,
										Выборка.Заявка,
										СтрШаблон(НСтр("ru = 'В заявке № %1 были обновлены данные по DDS'"), Выборка.НомерЗаявки));
			Исключение
				ЗаписьЖурналаРегистрации(ИмяСобытия,
										УровеньЖурналаРегистрации.Ошибка,,
										Выборка.Заявка,
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;	
				
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры //rarus vikhle 26.10.2021 m 18426 ---	 

// Обновляет график платежей на основе таблицы условий оплаты
//
// Параметры:
//  ГрафикПлатежей	 - ТаблицаЗначений, ТабличнаяЧасть	 - 
//  УсловияОплаты	 - ТаблицаЗначений, ТабличнаяЧасть, ДанныеФормыКоллекция	 - 
//  Продукт			 - СправочникСсылка.Scan_Изделия	 - 
//
Процедура ОбновитьГрафикПлатежей(ГрафикПлатежей, УсловияОплаты, Знач Продукт = Неопределено) Экспорт //rarus vikhle 26.10.2021 m 18426 +++
	
	// Если не передан продукт, полностью перезаполняем график
	Если Продукт = Неопределено Тогда
		
		ГрафикПлатежей.Очистить();
		Для Каждого СтрокаУсловий Из УсловияОплаты Цикл
			нСтрокаГрафика 				= ГрафикПлатежей.Добавить();
			нСтрокаГрафика.ВидОплаты 	= СтрокаУсловий.ВидОплаты;
			нСтрокаГрафика.ДатаПлатежа	= СтрокаУсловий.КрайняяДатаОплаты;
			нСтрокаГрафика.Продукт		= СтрокаУсловий.Продукт;
			нСтрокаГрафика.Сумма		= СтрокаУсловий.Сумма;
		КонецЦикла;	
		
	Иначе 
		// Передан продукт, добавляем строки по нему
		СтруктураОтбора = Новый Структура("Продукт", Продукт);
		
		// Удаляем имеющиеся строки графика по продукту
		СтрокиГрафикаПродукта = ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаГрафикаПродукта Из СтрокиГрафикаПродукта Цикл
			ГрафикПлатежей.Удалить(СтрокаГрафикаПродукта);
		КонецЦикла;	
		
		// Копируем строки условий по продукту в график
		СтрокиУсловийПродукта = УсловияОплаты.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаУсловийПродукта Из СтрокиУсловийПродукта Цикл
			нСтрокаГрафика 				= ГрафикПлатежей.Добавить();
			нСтрокаГрафика.ВидОплаты 	= СтрокаУсловийПродукта.ВидОплаты;
			нСтрокаГрафика.ДатаПлатежа	= СтрокаУсловийПродукта.КрайняяДатаОплаты;
			нСтрокаГрафика.Продукт		= СтрокаУсловийПродукта.Продукт;
			нСтрокаГрафика.Сумма		= СтрокаУсловийПродукта.Сумма;
		КонецЦикла;
	КонецЕсли;	
	
	ГрафикПлатежей.Свернуть("ВидОплаты,ДатаПлатежа,Продукт","Сумма");
	ГрафикПлатежей.Сортировать("ВидОплаты Убыв,ДатаПлатежа");
		
КонецПроцедуры //rarus vikhle 26.10.2021 m 18426 ---

Функция СебестоимостьПродукта(Продукт, Заявка = Неопределено) Экспорт  // rarus vikhle 27.12.2021 m 18269 +++
	
	Себестоимость = 0;
	
	Если Заявка = Неопределено Тогда
		Заявка = РегистрыСведений.Scan_СоставСоглашенийОПоставке.ПолучитьСоглашениеОПоставке(Продукт);	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Себестоимость КАК Себестоимость
	               |ИЗ
	               |	Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
	               |ГДЕ
	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка = &Заявка
	               |	И Scan_СоглашенияОПоставкеСписокПродуктов.Продукт = &Продукт";
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Продукт", Продукт);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Себестоимость = Выборка.Себестоимость;
	КонецЕсли;	
	
	Возврат Себестоимость;
	
КонецФункции // rarus vikhle 27.12.2021 m 18269 ---	

Функция ПродуктыСИзмененнойСебестоимостью(Знач ТаблицаДоИзменений, Знач ТаблицаПослеИзменений) Экспорт //rarus vikhle 17.01.2022 m 18269 +++
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(СписокПродуктов.Продукт КАК Справочник.Scan_Изделия) КАК Продукт,
	               |	СписокПродуктов.Себестоимость КАК Себестоимость
	               |ПОМЕСТИТЬ ТаблицаДоИзменений
	               |ИЗ
	               |	&ТаблицаДоИзменений КАК СписокПродуктов
	               |ГДЕ
	               |	СписокПродуктов.Продукт ССЫЛКА Справочник.Scan_Изделия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(СписокПродуктов.Продукт КАК Справочник.Scan_Изделия) КАК Продукт,
	               |	СписокПродуктов.Себестоимость КАК Себестоимость
	               |ПОМЕСТИТЬ ТаблицаПослеИзменений
	               |ИЗ
	               |	&ТаблицаПослеИзменений КАК СписокПродуктов
	               |ГДЕ
	               |	СписокПродуктов.Продукт ССЫЛКА Справочник.Scan_Изделия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПослеИзменений.Продукт КАК Продукт,
	               |	ТаблицаПослеИзменений.Себестоимость КАК Себестоимость
	               |ИЗ
	               |	ТаблицаПослеИзменений КАК ТаблицаПослеИзменений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДоИзменений КАК ТаблицаДоИзменений
	               |		ПО ТаблицаПослеИзменений.Продукт = ТаблицаДоИзменений.Продукт
	               |			И (НЕ ТаблицаПослеИзменений.Себестоимость = ТаблицаДоИзменений.Себестоимость)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаПослеИзменений.Продукт,
	               |	ТаблицаПослеИзменений.Себестоимость
	               |ИЗ
	               |	ТаблицаПослеИзменений КАК ТаблицаПослеИзменений
	               |ГДЕ
	               |	НЕ ТаблицаПослеИзменений.Продукт В
	               |				(ВЫБРАТЬ
	               |					ТаблицаДоИзменений.Продукт КАК Продукт
	               |				ИЗ
	               |					ТаблицаДоИзменений КАК ТаблицаДоИзменений)";
	Запрос.УстановитьПараметр("ТаблицаДоИзменений", ТаблицаДоИзменений);
	Запрос.УстановитьПараметр("ТаблицаПослеИзменений", ТаблицаПослеИзменений);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции //rarus vikhle 17.01.2022 m 18269 ---	

Функция СоздатьЗаявкуНаСОПSRU(ЗаявкаОснование, ТаблицаПродуктов, ЧастичныйПеренос = Ложь) Экспорт //rarus vikhle 04.03.2022 m 18956 +++
	
	ЗаявкаОбъект = Справочники.Scan_СоглашенияОПоставке.СоздатьЭлемент();
	ЗаявкаОбъект.ТипСоглашенияОПоставке		= Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU;
	ЗаявкаОбъект.Статус						= Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.Одобрено;
	ЗаявкаОбъект.УстановитьНовыйКод();
	ЗаявкаОбъект.НомерСоглашенияОПоставке	= ЗаявкаОбъект.Код;
	ЗаявкаОбъект.Наименование				= СокрЛП(Строка(Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU) 
											  + " / " + ЗаявкаОбъект.Дилер 
											  + " (" + ЗаявкаОбъект.НомерСоглашенияОПоставке + ")");
	ЗаявкаОбъект.ОтветственныйЗаРезерв		= Пользователи.ТекущийПользователь();
	ЗаявкаОбъект.ЗаявкаНаБУПродукты			= ЗаявкаОснование.ЗаявкаНаБУПродукты;
	
	Для Каждого СтрокаТЗ Из ТаблицаПродуктов Цикл
		Если ТипЗнч(СтрокаТЗ.Продукт) = Тип("СправочникСсылка.Scan_Изделия") Тогда
			НоваяСтрока = ЗаявкаОбъект.СписокПродуктов.Добавить();
			НоваяСтрока.Продукт = СтрокаТЗ.Продукт;
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаявкаОбъект.Количество = ЗаявкаОбъект.СписокПродуктов.Количество();
	
	ЗаявкаОбъект.ДополнительныеСвойства.Вставить("ЗаявкаНаСОППродуктовДляРезерва", ЗаявкаОснование);// rarus vikhle 21.03.2022 m 18979
	
	Попытка
		ЗаявкаОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru='Произошла ошибка при записи заявки: %1'"),,,,, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;	
	
	//Rarus bonmak 09.03.2022 18956 ++
	ТекстНомерДоговора = "";
	Если ЗначениеЗаполнено(ЗаявкаОснование.Договор.НомерДоговора) Тогда
		ТекстНомерДоговора = ", СОП №" + ЗаявкаОснование.Договор.НомерДоговора;
	КонецЕсли;
	//Rarus bonmak 09.03.2022 18956 --
	Если ЧастичныйПеренос Тогда
		ВывестиСообщениеПол(НСтр("ru = 'Удаленные из заявки продукты перенесены в заявку на СОП (SRU) ""%1""'"),,,,, ЗаявкаОбъект.Наименование);
		ТекстСообщенияПеренос = СтрШаблон(НСтр("ru = 'Удаленные из заявки продукты перенесены в заявку на СОП № %1%2.'"), ЗаявкаОснование.НомерСоглашенияОПоставке, ТекстНомерДоговора); //Rarus bonmak 09.03.2022 18956
	Иначе
		ВывестиСообщениеПол(НСтр("ru = 'Продукты заявки перенесены в заявку на СОП (SRU) ""%1""'"),,,,, ЗаявкаОбъект.Наименование);
		ТекстСообщенияПеренос = СтрШаблон(НСтр("ru = 'В заявку перенесены продукты из заявки на СОП № %1%2.'"), ЗаявкаОснование.НомерСоглашенияОПоставке, ТекстНомерДоговора); //Rarus bonmak 09.03.2022 18956
	КонецЕсли;
	
	//Rarus bonmak 09.03.2022 18956 ++
	//РегистрыСведений.Scan_Сообщения.ЗаписатьСообщение(ЗаявкаОбъект.Ссылка,
	// Пользователи.ТекущийПользователь(),,
	// СтрШаблон(Нстр("ru = 'В заявку перенесены продукты из заявки на СОП № %1%2.'"),
	// ЗаявкаОснование.НомерСоглашенияОПоставке, ТекстНомерДоговора));
	РегистрыСведений.Scan_Сообщения.ЗаписатьСообщение(ЗаявкаОбъект.Ссылка,
	Пользователи.ТекущийПользователь(),,
	ТекстСообщенияПеренос);
	//Rarus bonmak 09.03.2022 18956 --
	
	Возврат ЗаявкаОбъект.Ссылка;
	
КонецФункции //rarus vikhle 04.03.2022 m 18956 ---
