//rarus vikhle 14.09.2020 mt 16526 +++

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ТекущееСоглашениеОПоставке") Тогда
		ТекущееСоглашениеОПоставке = Параметры.ТекущееСоглашениеОПоставке;
		УстановитьУсловноеОформление(); //rarus vikhle 30.09.2020 mt 16526
		ЗаполнитьТаблицы();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНаОсновании(Команда)
	
	ПараметрыОтбора = Новый Структура("Флаг",Истина);
	МассивВыделенныхСтрок = СписокПродуктов.НайтиСтроки(ПараметрыОтбора);
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		ВывестиСообщениеПол("Не выбраны продукты!");
		Возврат;
	КонецЕсли;	
	
	МассивВыделенныхПродуктов = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	СкладыОтличаются = Ложь;
	ПредыдущийСклад  = Ложь;
	Для Каждого ЭлементМассива Из МассивВыделенныхСтрок Цикл
		Если ЭлементМассива.СкладОтгрузки.Пустая() Тогда
			//ВывестиСообщениеПол("У продукта %1 не заполнен склад.",,,,,ЭлементМассива.Продукт);
			ВывестиСообщениеПол("У продукта %1 не заполнено запрашиваемое место передачи.",,,,,ЭлементМассива.Продукт); //rarus vikhle 20.01.2021 mt 16981
			Возврат;		
		КонецЕсли;	
		Если НЕ ЭтоПервыйЭлемент Тогда
			Если НЕ ПредыдущийСклад = ЭлементМассива.СкладОтгрузки Тогда  
				СкладыОтличаются = Истина;
				//ВывестиСообщениеПол("У выбранных продуктов различаются склады, создание заявки на отгрузку невозможно.");
				ВывестиСообщениеПол("У выбранных продуктов различаются запрашиваемые места передачи, создание заявки на отгрузку невозможно."); //rarus vikhle 20.01.2021 mt 16981
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПредыдущийСклад = ЭлементМассива.СкладОтгрузки; 
		ЭтоПервыйЭлемент = Ложь;
		МассивВыделенныхПродуктов.Добавить(ЭлементМассива.Продукт);
	КонецЦикла;	
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Основание", ТекущееСоглашениеОПоставке);
	ПараметрыОткрытия.Вставить("СкладОтгрузки", ПредыдущийСклад);
	ПараметрыОткрытия.Вставить("СписокПродуктов",МассивВыделенныхПродуктов);
	ФормаЗаявки = ОткрытьФорму("Документ.Scan_ЗаявкаНаОтгрузку.ФормаОбъекта", ПараметрыОткрытия,ЭтотОбъект);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляВыбранных(Команда)
	Если НЕ СкладОтгрузки.Пустая() Тогда
		Для Каждого СтрокаСписка Из СписокПродуктов Цикл
			Если СтрокаСписка.Флаг Тогда
				СтрокаСписка.СкладОтгрузки = СкладОтгрузки;
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		//ВывестиСообщениеПол("Не заполнен склад!",ЭтотОбъект,"СкладОтгрузки");
		ВывестиСообщениеПол("Не заполнено запрашиваемое место передачи!",ЭтотОбъект,"СкладОтгрузки"); //rarus vikhle 20.01.2021 mt 16981
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСклады(Команда)
	Для Каждого СтрокаСписка Из СписокПродуктов Цикл
		СтрокаСписка.СкладОтгрузки = СтрокаСписка.СкладОтгрузкиСоглашения;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого СтрокаСписка Из СписокПродуктов Цикл
		СтрокаСписка.Флаг = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого СтрокаСписка Из СписокПродуктов Цикл
		СтрокаСписка.Флаг = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицы()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.Scan_ЗаявкаНаОтгрузку) КАК ЗаявкаНаОтгрузку,
	               |	СвязанныеДокументы.Ссылка.СкладОтгрузки КАК СсылкаСкладОтгрузки,
	               |	Scan_ЗаявкаНаОтгрузкуПродукты.Продукт КАК Продукт,
	               |	СвязанныеДокументы.Ссылка.Статус КАК СтатусЗаявки
	               |ПОМЕСТИТЬ ДанныеЗаявок
	               |ИЗ
	               |	КритерийОтбора.СвязанныеДокументы(&ТекущееСоглашениеОПоставке) КАК СвязанныеДокументы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Scan_ЗаявкаНаОтгрузку.Продукты КАК Scan_ЗаявкаНаОтгрузкуПродукты
	               |		ПО СвязанныеДокументы.Ссылка = Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка
	               |ГДЕ
	               |	НЕ СвязанныеДокументы.Ссылка ЕСТЬ NULL
	               |	И СвязанныеДокументы.Ссылка ССЫЛКА Документ.Scan_ЗаявкаНаОтгрузку
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеЗаявок.ЗаявкаНаОтгрузку КАК ЗаявкаНаОтгрузку,
	               |	ДанныеЗаявок.СсылкаСкладОтгрузки КАК СкладОтгрузки,
	               |	ДанныеЗаявок.Продукт КАК Продукт,
	               |	ДанныеЗаявок.СтатусЗаявки КАК СтатусЗаявки
	               |ИЗ
	               |	ДанныеЗаявок КАК ДанныеЗаявок
	               |ИТОГИ ПО
	               |	СтатусЗаявки,
	               |	ЗаявкаНаОтгрузку";	
	Запрос.УстановитьПараметр("ТекущееСоглашениеОПоставке",ТекущееСоглашениеОПоставке);
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗаявок");
	Элементы.ДеревоЗаявок.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Scan_СоглашенияОПоставкеСписокПродуктов.Продукт КАК Справочник.Scan_Изделия) КАК Продукт,
	|	Scan_СоглашенияОПоставкеСписокПродуктов.СкладОтгрузки КАК СкладОтгрузки
	// rarus agar 29.04.2021 17665 ++
	//|ПОМЕСТИТЬ ДоступныеПродукты
	|ПОМЕСТИТЬ ВТ_ДоступныеПродукты
	// rarus agar 29.04.2021 17665 --
	|ИЗ
	|	Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
	|ГДЕ
	|	Scan_СоглашенияОПоставкеСписокПродуктов.Продукт ССЫЛКА Справочник.Scan_Изделия
	|	И Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка = &ТекущееСоглашениеОПоставке
	|	И НЕ Scan_СоглашенияОПоставкеСписокПродуктов.Продукт В
	|				(ВЫБРАТЬ
	|					ДанныеЗаявок.Продукт
	|				ИЗ
	|					ДанныеЗаявок КАК ДанныеЗаявок
	|				ГДЕ
	|					НЕ ДанныеЗаявок.ЗаявкаНаОтгрузку.Статус В (ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отказ), ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена))
	|					И НЕ ДанныеЗаявок.ЗаявкаНаОтгрузку.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеПродукты.Продукт КАК Продукт,
	|	ДоступныеПродукты.СкладОтгрузки КАК СкладОтгрузки,
	|	ДоступныеПродукты.СкладОтгрузки КАК СкладОтгрузкиСоглашения,
	|	Scan_СводнаяИнформацияПоПродукту.DD КАК DD,
	|	Scan_СводнаяИнформацияПоПродукту.DDS КАК DDS,
	// rarus agar 29.04.2021 17665 ++
	|	Scan_СводнаяИнформацияПоПродукту.DD2 КАК DD2,
	|	Scan_МестонахождениеИзделийОстатки.МестоХранения КАК Местонахождение
	// rarus agar 29.04.2021 17665 --
	|ИЗ
	|	ВТ_ДоступныеПродукты КАК ДоступныеПродукты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
	|		ПО ДоступныеПродукты.Продукт = Scan_СводнаяИнформацияПоПродукту.Продукт
	// rarus agar 29.04.2021 17665 ++
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Scan_МестонахождениеИзделий.Остатки(
	|				,
	|				Изделие В
	|					(ВЫБРАТЬ
	|						ВТ_ДоступныеПродукты.Продукт
	|					ИЗ
	|						ВТ_ДоступныеПродукты)) КАК Scan_МестонахождениеИзделийОстатки
	|		ПО ДоступныеПродукты.Продукт = Scan_МестонахождениеИзделийОстатки.Изделие
	// rarus agar 29.04.2021 17665 --
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоступныеПродукты.СкладОтгрузки.Наименование";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СписокПродуктов.Загрузить(РезультатЗапроса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДоступныеПродукты.СкладОтгрузки КАК СкладОтгрузки
	               |ИЗ
	               |	ВТ_ДоступныеПродукты КАК ДоступныеПродукты  // rarus agar 29.04.2021 17665 +-
	               |ГДЕ
	               |	НЕ ДоступныеПродукты.СкладОтгрузки = ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Для Каждого СтрокаСписка Из СписокПродуктов Цикл 
			СтрокаСписка.Флаг = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//rarus vikhle 30.09.2020 mt 16526 +++
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СтатусыЗаявокНаОтгрузку.Ссылка КАК Статус,
	               |	Scan_СтатусыЗаявокНаОтгрузку.ЦветФона КАК ЦветФона,
	               |	Scan_СтатусыЗаявокНаОтгрузку.ЦветТекста КАК ЦветТекста
	               |ИЗ
	               |	Справочник.Scan_СтатусыЗаявокНаОтгрузку КАК Scan_СтатусыЗаявокНаОтгрузку";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаявокСтатусЗаявки.Имя);
		ПолеЭлемента.Использование = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗаявок.СтатусЗаявки");
	    ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Выборка.Статус;
		ОтборЭлемента.Использование = Истина;
		
		ЦветФонаСтатуса = Выборка.ЦветФона.Получить();
		Если НЕ ЦветФонаСтатуса = Неопределено Тогда
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаСтатуса);
		КонецЕсли;
		
		ЦветТекстаСтатуса = Выборка.ЦветТекста.Получить();
		Если НЕ ЦветТекстаСтатуса = Неопределено Тогда
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаСтатуса);
		КонецЕсли;
	КонецЦикла;	
	///rarus vikhle 30.09.2020 mt 16526 ---
КонецПроцедуры	

#КонецОбласти

//rarus vikhle 14.09.2020 mt 16526 ---
