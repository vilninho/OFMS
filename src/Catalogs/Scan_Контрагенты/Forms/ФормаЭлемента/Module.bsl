
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//rarus tenkam 21.10.2016 mantis 6897 ++
	Если  Параметры.Ключ.Пустая() Тогда
		Если Параметры.Свойство("ИНН") И Параметры.Свойство("Родитель") Тогда
			Объект.ИНН = Параметры.ИНН;
			Объект.Родитель = Параметры.Родитель;
			Если Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством") Тогда
				ВсеОк = Справочники.Scan_Контрагенты.ЗаполнитьКонтрагентаИз1БД(Объект, Параметры.ИНН);
				//rarus tenkam 26.12.2016 mantis 8207 ++
				Если Параметры.Свойство("Резидент") Тогда		
					ЭтоРезидент = Параметры.Резидент; 
					Объект.Резидент = ЭтоРезидент;
					Если НЕ ЭтоРезидент И НЕ ВсеОк Тогда
						//rarus FominskiyAS 19.04.2019  mantis 14191 +++
						//Сообщить("Такого контрагента нет в 1БД!");
						Сообщить(НСтр("ru = 'Такого контрагента нет в 1БД!'; en = 'Counteragent not found in 1DB!'"));
						//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
				//rarus tenkam 26.12.2016 mantis 8207 --
			КонецЕсли;
		Иначе 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	//rarus tenkam 21.10.2016 mantis 6897 --
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	НастроитьПараметрыВыбораЭлементовФормы();
	
	УправлениеДиалогомНаСервере(); 	//rarus tenkam 24.10.2016 mantis 6897 +
	Scan_СборСтатистики.Scan_ПриОткрытии("Справочники", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры

//rarus vikhle 07.05.2020 mt 15695 +++
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Scan_ВспомогательныеФункцииКлиент.ПроверитьПользователяПортала();
КонецПроцедуры
//rarus vikhle 07.05.2020 mt 15695 ---

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если КонтактныеЛица.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество() = 0 Тогда
			ЭлементОтбора = КонтактныеЛица.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Владелец");
			ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование    = Истина;
			//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
		Иначе
			ЭлементОтбора = КонтактныеЛица.Отбор.Элементы.Получить(0);
			Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;	
			КонецЕсли;
		КонецЕсли;
	
		Если Договоры.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество() = 0 Тогда
			ЭлементОтбора = Договоры.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
		Иначе
			ЭлементОтбора = Договоры.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Получить(0);
			Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;	
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		ЭлементОтбора = КонтактныеЛица.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.ПравоеЗначение   = Справочники.Scan_Контрагенты.ПустаяСсылка();
		
		
		ЭлементОтбора = Договоры.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Scan_Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		ТекущееКонтактноеЛицо = Элементы.КонтактныеЛица.ТекущиеДанные.Ссылка;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюСправочника(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 
  
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтотОбъект, Элемент.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецФункции

&НаСервере
Функция УстановитьОсновнойДоговорНаСервере()
	
	ТекСтрока = Элементы.Договоры.ТекущаяСтрока;
	
	//Проверим а нет ли уже основного договра с такими же аналитиками
	ОсновнойДоговор = Справочники.Scan_ДоговорыВзаиморасчетов.ПроверитьОсновнойДоговор(ТекСтрока);
	Если ОсновнойДоговор = Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка() Тогда
		Договор = ТекСтрока.ПолучитьОбъект();
		Договор.Основной = Истина;
		Договор.Записать();
	КонецЕсли;
	Возврат ОсновнойДоговор;

КонецФункции

&НаКлиенте
Процедура УстановитьОсновнойДоговор(Команда)
	
	ТекСтрока = Элементы.Договоры.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ Элементы.Договоры.ТекущиеДанные.Основной Тогда
		
		// Обработаем событие в контексте сервера
		ОсновнойДоговор = УстановитьОсновнойДоговорНаСервере();
		Если НЕ ОсновнойДоговор = ПредопределенноеЗначение("Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка") Тогда
			
			// Формируем описание обработчика перехвата закрытия формы
			ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияОсновнойДоговор", ЭтотОбъект,Новый Структура("Договор",ОсновнойДоговор));
			
			// Формируем текст вопроса
			ТекстВопроса = НСтр("ru = 'Для выбранных аналитик(организация, подразделение, вид договора) основной договор уже назначен """+ ОсновнойДоговор + """. Продолжить?'");
			
			// Получаем подтверждение операции от пользователя
			ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		Элементы.Договоры.Обновить();
		
	КонецЕсли;

КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация
// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияОсновнойДоговор(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ОбработкаРезультатаОповещенияОсновнойДоговорНаСервере(ДополнительныеПараметры.Договор);
	КонецЕсли;
	Элементы.Договоры.Обновить();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияОсновнойДоговор()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияОсновнойДоговорНаСервере(Договор) Экспорт
	
	ДоговорОбъектСтарый = Договор.ПолучитьОбъект();
	ДоговорОбъектСтарый.Основной = Ложь;
	ДоговорОбъектСтарый.Записать();
	ДоговорОбъектНовый = Элементы.Договоры.ТекущаяСтрока.ПолучитьОбъект();
	ДоговорОбъектНовый.Основной = Истина;
	ДоговорОбъектНовый.Записать();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияОсновнойДоговорНаСервере()

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Объект.НаименованиеПолное = Объект.Наименование;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	НастроитьПараметрыВыбораЭлементовФормы();
КонецПроцедуры

//rarus sergei 25.08.2016 mantis 7163 ++ 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// rarus tenkam 05.04.2019 mantis 14316 +++
	//ПрисоединенныеФайлы.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	// rarus tenkam 05.04.2019 mantis 14316 ---
КонецПроцедуры

//rarus sergei 25.08.2016 mantis 7163 --

//rarus tenkam 24.10.2016 mantis 6897 ++
&НаСервере
Процедура ОбновитьЭлементНаСервере()
	Если НЕ ЗначениеЗаполнено(Объект.IDExternalSystem) Тогда
		//Создан вручную
	Иначе
		ИмяМетода = "GetContragents";
		СообщениеОбОшибке = "";
		Отказ = Ложь;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", Объект.IDExternalSystem);
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		Если НЕ Отказ Тогда
			СсылкаПродукта = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникКонтрагенты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
		КонецЕсли;	
		ЭтаФорма.Прочитать();
		УправлениеДиалогомНаСервере();
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлемент(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
		//Сообщить("Контрагент не записан! Не удалось обновить элемент!");
		Сообщить(НСтр("ru = 'Контрагент не записан! Не удалось обновить элемент!'; en = 'Counteragent not saved!'"));
		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
	Иначе
		ОбновитьЭлементНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
		
	Элементы.ФормаГруппаИнтеграция.Видимость = Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством");
	Элементы.ФормаОбновитьЭлемент.Доступность = (ЗначениеЗаполнено(Объект.IDExternalSystem));
	
	Если ЗначениеЗаполнено(Объект.ДатаОбновления) Тогда
		Элементы.ФормаОбновитьЭлемент.Заголовок = Объект.ДатаОбновления;
	КонецЕсли;
	
	Элементы.Наименование.Доступность = Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьНаименованиеКонтрагентов"); //rarus bonmak 03.06.2020 16165
	//rarus vikhle 26.02.2021 +++
	ПользовательЯвляетсяСотрудникомСканияРусь = Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь");
	Элементы.ДоговорыУстановитьОсновнойДоговор.Доступность = ПользовательЯвляетсяСотрудникомСканияРусь; 
	//rarus vikhle 26.02.2021 ---
	
	Элементы.ДатаОкончанияДействия.ТолькоПросмотр = НЕ Объект.Недействителен;	// rarus tenkam 24.03.2021 mantis 17101 +
КонецПроцедуры
//rarus tenkam 22.12.2016 mantis 6897 --

//rarus tenkam 22.12.2016 mantis 8207 ++
&НаКлиенте
Процедура РезидентПриИзменении(Элемент)
	УправлениеДиалогомНаСервере();
	
	//rarus tenkam 09.03.2017 (update) +++
	//Если НЕ Объект.Резидент И ЗначениеЗаполнено(Объект.ИНН) Тогда
	//	Объект.ИНН = "";
	//КонецЕсли;
	//rarus tenkam 09.03.2017 ---
	
КонецПроцедуры
//rarus tenkam 22.12.2016 mantis 8207 --


////////////////////////////////////////////////////////////////////////////////
// Поддержка контактной информации.

&НаСервере
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)  Экспорт	// rarus tenkam 29.06.2021 mantis 17939 + (добавлен Экспорт) 
	
	МодульУправлениеКонтактнойИнформацией =
		ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	Возврат МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(
		ЭтотОбъект, Объект, Результат);
	
КонецФункции


&НаКлиенте
Процедура Подключаемый_EMailОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не Элемент.РедактированиеТекста Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	
	МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)	// rarus tenkam 24.03.2021 mantis 17101 +
	Если Объект.Недействителен И НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияДействия) Тогда
		Объект.ДатаОкончанияДействия = ТекущаяДата();
	ИначеЕсли НЕ Объект.Недействителен Тогда
		Объект.ДатаОкончанияДействия = Дата(1,1,1);
	КонецЕсли;		
	УправлениеДиалогомНаСервере();
КонецПроцедуры
