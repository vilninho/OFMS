Перем ИзмРекв; //rarus bonmak 03.06.2020 16165
Перем НужноПересчитатьТарифы;	// rarus tenkam 24.03.2021 mantis 17101 +

//rarus sergei 09.11.2016 mantis 7163 ++
Процедура ПередЗаписью(Отказ)
	ЭтотОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", ?(ЭтотОбъект.ЭтоНовый(), ИСТИНА, ЛОЖЬ));
	
	//rarus bonmak 03.06.2020 16165 ++
	ИзмРекв = Новый Массив;
	//Если новый - запишем заполненные реквизиты
	Если ЭтотОбъект.ЭтоНовый() тогда
		Для каждого Рекв из ЭтотОбъект.Метаданные().Реквизиты Цикл
			Если ТипЗнч(ЭтотОбъект[Рекв.Имя]) = Тип("Булево") и ЭтотОбъект[Рекв.Имя] = Ложь Тогда
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(ЭтотОбъект[Рекв.Имя]) Тогда
				Продолжить;
			КонецЕсли;
			ИзмРекв.Добавить(Рекв.Имя);
		КонецЦикла;
		ИзмРекв.Добавить("Наименование");
	Иначе  //если не новый - то измененные
			Для каждого Рекв из ЭтотОбъект.Метаданные().Реквизиты Цикл
				Если (ЭтотОбъект[Рекв.Имя] <> ссылка[Рекв.Имя]) Тогда
					ИзмРекв.Добавить(Рекв.Имя);
				КонецЕсли;
			КонецЦикла;
			Если ЭтотОбъект.Наименование <> Ссылка.Наименование Тогда
				ИзмРекв.Добавить("Наименование");
			КонецЕсли;
	КонецЕсли;
	
	//для старых объектов, у которых нет данных в регистре - запишем заполненные
	Если ИзмРекв.Количество() = 0 И НетИсторииВРегистре(Ссылка) Тогда
		Для каждого Рекв из ЭтотОбъект.Метаданные().Реквизиты Цикл
			Если ТипЗнч(ЭтотОбъект[Рекв.Имя]) = Тип("Булево") и ЭтотОбъект[Рекв.Имя] = Ложь Тогда
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(ЭтотОбъект[Рекв.Имя]) Тогда
				Продолжить;
			КонецЕсли;
			ИзмРекв.Добавить(Рекв.Имя);
		КонецЦикла;
		ИзмРекв.Добавить("Наименование");
	КонецЕсли;
	//rarus bonmak 03.06.2020 16165 --
	
	// rarus tenkam 24.03.2021 mantis 17101 +++
	НужноПересчитатьТарифы = Ложь;
	
	// Rarus tenkam 17.05.2022 mantis 17628 +++
	Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
		// Получим тарифы, действующие по договору после даты окончания	
		ТекДатаОкончания = ДатаОкончанияДействия;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_МатрицаТарифовПоДоставкеИзделий.Период КАК Период,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.Контрагент КАК Контрагент,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.НоменклатураУслуги КАК НоменклатураУслуги,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.ГруппаПродукта КАК ГруппаПродукта,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.СтавкаНДС КАК СтавкаНДС,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.СпособДоставки КАК СпособДоставки,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.АдресПолучения КАК АдресПолучения,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.АдресДоставки КАК АдресДоставки,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.ЛогистическийТип КАК ЛогистическийТип,
		|	Scan_МатрицаТарифовПоДоставкеИзделий.КолеснаяФормула КАК КолеснаяФормула
		|ИЗ
		|	РегистрСведений.Scan_МатрицаТарифовПоДоставкеИзделий КАК Scan_МатрицаТарифовПоДоставкеИзделий
		|ГДЕ
		|	Scan_МатрицаТарифовПоДоставкеИзделий.Период >= &ДатаОкончания
		|	И Scan_МатрицаТарифовПоДоставкеИзделий.Контрагент = &Контрагент";
		
		Запрос.УстановитьПараметр("ДатаОкончания", ТекДатаОкончания);
		Запрос.УстановитьПараметр("Контрагент", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Удалим записи
			НаборЗаписей = РегистрыСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
			НаборЗаписей.Отбор.Контрагент.Установить(ВыборкаДетальныеЗаписи.Контрагент);
			НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(ВыборкаДетальныеЗаписи.ДоговорКонтрагента);
			НаборЗаписей.Отбор.НоменклатураУслуги.Установить(ВыборкаДетальныеЗаписи.НоменклатураУслуги);
			НаборЗаписей.Отбор.ГруппаПродукта.Установить(ВыборкаДетальныеЗаписи.ГруппаПродукта);
			НаборЗаписей.Отбор.СтавкаНДС.Установить(ВыборкаДетальныеЗаписи.СтавкаНДС);
			НаборЗаписей.Отбор.СпособДоставки.Установить(ВыборкаДетальныеЗаписи.СпособДоставки);
			НаборЗаписей.Отбор.АдресПолучения.Установить(ВыборкаДетальныеЗаписи.АдресПолучения);
			НаборЗаписей.Отбор.АдресДоставки.Установить(ВыборкаДетальныеЗаписи.АдресДоставки);
			НаборЗаписей.Отбор.ЛогистическийТип.Установить(ВыборкаДетальныеЗаписи.ЛогистическийТип);
			НаборЗаписей.Отбор.КолеснаяФормула.Установить(ВыборкаДетальныеЗаписи.КолеснаяФормула);
			
			НаборЗаписей.Записать();
			НужноПересчитатьТарифы = Истина;
		КонецЦикла;
	КонецЕсли;
	// Rarus tenkam 17.05.2022 mantis 17628 ---
	
	// Изменилась дата окончания действия или контрагент стал недействителен
	Если (Ссылка.ДатаОкончанияДействия <> ДатаОкончанияДействия) ИЛИ
		(НЕ Ссылка.Недействителен И Недействителен) Тогда
		НужноПересчитатьТарифы = Истина;		
		
		// Rarus tenkam 17.05.2022 mantis 17628 +++
		//КрайняяДатаНачалаТарифов = Scan_Тарифы.ПолучитьКрайнююДатуНачалаТарифов(Ссылка);
		//Если ЗначениеЗаполнено(КрайняяДатаНачалаТарифов) И ЗначениеЗаполнено(ДатаОкончанияДействия) И 
		//	КрайняяДатаНачалаТарифов > ДатаОкончанияДействия Тогда
		//	Отказ = Истина;
		//	ВывестиСообщениеПол("По контрагенту есть тарифы, действующие с %1. Дата окончания действия не может быть раньше даты начала действия тарифов.",,,,,КрайняяДатаНачалаТарифов);
		//КонецЕсли;
		// Rarus tenkam 17.05.2022 mantis 17628 ---
	КонецЕсли;
	
	// rarus tenkam 24.03.2021 mantis 17101 ---
	
КонецПроцедуры
//rarus sergei 09.11.2016 mantis 7163 --

//rarus tenkam 22.12.2016 mantis 8207 ++
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ ЭтоГруппа И Резидент Тогда
	// Проверим заполненность реквизита "ИНН"
		Если Не ЗначениеЗаполнено(ИНН) Тогда
		    
		    Сообщение = Новый СообщениеПользователю();
		    //rarus FominskiyAS 24.04.2019  mantis 14191 +++
			//Сообщение.Текст = "Не указан ИНН контрагента!";
			Сообщение.Текст = НСтр("ru = 'Не указан ИНН контрагента!'; en = 'Counterparty INN (tax number) is empty!'");
			//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		    Сообщение.Поле = "ИНН";
		    Сообщение.УстановитьДанные(ЭтотОбъект);
		    Сообщение.Сообщить();
		    Отказ = Истина;  
		КонецЕсли;
	КонецЕсли;
	
	// rarus tenkam 24.03.2021 mantis 17101 +++
	Если НЕ ЭтоГруппа И НЕ Отказ Тогда
		Если Недействителен И НЕ ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не указана дата окончания действия контрагента!'; en = 'Expiration date is empty!'");
			Сообщение.Поле = "ДатаОкончанияДействия";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;     			
		КонецЕсли;
		
	КонецЕсли;
	// rarus tenkam 24.03.2021 mantis 17101 ---
	
КонецПроцедуры
//rarus tenkam 22.12.2016 mantis 8207 --

Функция НетИсторииВРегистре(Контрагент) //rarus bonmak 03.06.2020 16165 ++ 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ИсторияПоКонтрагентам.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.Scan_ИсторияПоКонтрагентам КАК Scan_ИсторияПоКонтрагентам
	               |ГДЕ
	               |	Scan_ИсторияПоКонтрагентам.Контрагент = &Контрагент";
	Возврат Запрос.Выполнить().Выбрать().Количество() = 0;				   				   
КонецФункции //rarus bonmak 03.06.2020 16165 --

Процедура ПриЗаписи(Отказ) //rarus bonmak 03.06.2020 16165 ++
	Для Каждого Реквизит из	ИзмРекв Цикл
		ВидЗначения = Перечисления.Scan_ДополнительнаяИнформацияПоКонтрагентам[Реквизит];
		РегистрыСведений.Scan_ИсторияПоКонтрагентам.ЗаписьЗначенияРегистраСведенияИсторияПоКонтрагентам(Ссылка, Ссылка[Реквизит], ВидЗначения);  
	КонецЦикла;
	
	// rarus tenkam 02.08.2020 mantis 16401 +++
	Если НЕ Отказ И Недействителен Тогда
		Справочники.Scan_Контрагенты.ОбработатьНедействительногоКонтрагента(Ссылка);	
	КонецЕсли;	
	// rarus tenkam 02.08.2020 mantis 16401 ---
	
		
	// rarus tenkam 24.03.2021 mantis 17101 +++
	Если НужноПересчитатьТарифы Тогда
		Сообщить(НСтр("ru = 'Запущен фоновый пересчет тарифов.'; en = 'Tariff recalculation'"));
		// rarus tenkam 31.08.2021 mantis 17628 +++
		//ФоновыеЗадания.Выполнить("Scan_Тарифы.ПересчитатьДоставкуПолнуюЛьготную", , Новый УникальныйИдентификатор,	"Пересчет полной и льготной доставки");	
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(Scan_Тарифы.ПолучитьСтруктуруПараметровПоКонтрагенту(Ссылка));
		ФоновыеЗадания.Выполнить("Scan_Тарифы.ПересчитатьДоставкуПолнуюЛьготную", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор,	"Пересчет полной и льготной доставки");	
		// rarus tenkam 31.08.2021 mantis 17628 ---
	КонецЕсли;
	// rarus tenkam 24.03.2021 mantis 17101 ---
КонецПроцедуры //rarus bonmak 03.06.2020 16165 ++


