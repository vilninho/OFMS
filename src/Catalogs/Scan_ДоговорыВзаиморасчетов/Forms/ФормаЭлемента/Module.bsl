&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	//rarus tenkam 09.03.2017 (update) +++
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
		// rarus tenkam 11.01.2021 mantis 16934 +++
		Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.Соглашение") ИЛИ
			 Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.ДопСоглашениеКСОП") Тогда
			 
			 Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.ПустаяСсылка");
		КонецЕсли;		
		// rarus tenkam 11.01.2021 mantis 16934 ---
	Иначе
		//rarus ozhnik 15888 06.05.2020 + 
		СоглашениеОПоставке = Справочники.Scan_СоглашенияОПоставке.НайтиСоглашениеОПоставкеПоДоговору(Объект.Ссылка);//rarus vikhle 13.08.2020 mt 16181 убрал опечатку
		Если Не СоглашениеОПоставке.Пустая() Тогда
			//Если ЗначениеЗаполнено(СоглашениеОПоставке.СпециальныеУсловия) Тогда//rarus vikhle 13.08.2020 mt 16181

			//КоличествоРабочихДней = СоглашениеОПоставке.СпециальныеУсловия.КоличествоРабочихДней;
			//УсловияОплаты.Загрузить(СоглашениеОПоставке.СпециальныеУсловия.УсловияОплаты.Выгрузить());//rarus vikhle 13.08.2020 mt 16181
			//Иначе//rarus vikhle 13.08.2020 mt 16181
				//КоличествоРабочихДней = СоглашениеОПоставке.КоличествоРабочихДней;
				
			//rarus vikhle 04.08.2021 mt 17637 +++	
			//УсловияОплаты.Загрузить(СоглашениеОПоставке.УсловияОплаты.Выгрузить());
			СгруппированныеУсловия = Справочники.Scan_СоглашенияОПоставке.СгруппированныеУсловияОплаты(СоглашениеОПоставке.УсловияОплаты.Выгрузить());
			УсловияОплаты.Загрузить(СгруппированныеУсловия);
			//rarus vikhle 04.08.2021 mt 17637 ---
			
			//КонецЕсли;//rarus vikhle 13.08.2020 mt 16181
			
			//rarus vikhle 13.08.2020 mt 16181 +++
			//ЦеныПродуктов.Загрузить(СоглашениеОПоставке.СписокПродуктов.Выгрузить()); //rarus vikhle 17.09.2020 mt 16526
			//Склад = СоглашениеОПоставке.СкладОтгрузки; //rarus vikhle 11.09.2020 mt 16526
			//ОтсрочкаПлатежа =  СоглашениеОПоставке.ОтсрочкаПлатежа; //rarus bonmak 13.01.2021 17041
			
			//rarus vikhle 16.03.2022 m 18981 +++
			ПродуктыЗаявки	= СоглашениеОПоставке.СписокПродуктов.ВыгрузитьКолонку("Продукт"); 
			ДокументыЦен	= Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьДокументыУстановкиЦенПоМассивуПродуктов(ПродуктыЗаявки, СоглашениеОПоставке, Истина);
			//rarus vikhle 16.03.2022 m 18981 ---
			
			//rarus vikhle 17.09.2020 mt 16526 +++
			Для Каждого СтрокаТЧ Из СоглашениеОПоставке.СписокПродуктов Цикл
				СтрокаТаблицы = ЦеныПродуктов.Добавить();
				СтрокаТаблицы.Продукт = СтрокаТЧ.Продукт;
				СтрокаТаблицы.Драйв = СтрокаТЧ.Драйв;//rarus vikhle 25.11.2020 mt 16846
				СтрокаТаблицы.ПроцентДрайв = СтрокаТЧ.ПроцентДрайв;
				СтрокаТаблицы.Количество = СтрокаТЧ.Количество;
				СтрокаТаблицы.СпециальныеУсловия = СтрокаТЧ.СпециальныеУсловия;
				// rarus agar 24.11.2020 16526 ++
				//СтрокаТаблицы.СкладОтгрузки = СтрокаТЧ.СкладОтгрузки; // rarus vikhle 20.01.2021 mt 16981
				ЗаказНаЗавод = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(СтрокаТЧ.Продукт);
				Если ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
					//СтрокаТаблицы.СкладОтгрузки = ЗаказНаЗавод.СкладОтгрузки; // rarus vikhle 20.01.2021 mt 16981
					//rarus vikhle 17.12.2020 mt 16977 +++
					СтрокаТаблицы.DD = РегистрыСведений.Scan_КлючевыеДатыПроцессов.КлючеваяДата(ЗаказНаЗавод, "DD");
					СтрокаТаблицы.DD2 = РегистрыСведений.Scan_КлючевыеДатыПроцессов.КлючеваяДата(ЗаказНаЗавод, "DD2");	
					//rarus vikhle 17.12.2020 mt 16977 ---
				КонецЕсли;
				// rarus agar 24.11.2020 16526 --
				СтрокаТаблицы.DDS = СтрокаТЧ.DDS;	// rarus tenkam 03.10.2020 mantis 16181 +
				Если ТипЗнч(СтрокаТаблицы.Продукт) = Тип("СправочникСсылка.Scan_Изделия") Тогда	
					СтрокаТаблицы.НомерШасси = СтрокаТаблицы.Продукт.НомерИзделия;
					СтрокаТаблицы.ЦенаПродажиСНДС = СтрокаТЧ.ЦенаСНДС;
					
					//rarus vikhle 16.03.2022 m 18981 +++
					//ДокументУстановкиПлановыхЦен = Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьДокументУстановкиЦенПоПродукту(СтрокаТаблицы.Продукт);
					ДокументУстановкиПлановыхЦен = ДокументыЦен[СтрокаТаблицы.Продукт];
					Если НЕ ДокументУстановкиПлановыхЦен = Неопределено Тогда
						СтрокаТаблицы.ДокументУстановкиПлановыхЦен = ДокументУстановкиПлановыхЦен; 
						СтрокаТаблицы.СуммаПродажиСНДС =  ДокументУстановкиПлановыхЦен.ЦенаDealerNetСоСкидкой;
						СтрокаТЧДокумента = ДокументУстановкиПлановыхЦен.СкидкиНаценки.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЛогистическиеЗатраты"),"СоставляющаяЦены");
						Если НЕ СтрокаТЧДокумента = Неопределено Тогда
							СтрокаТаблицы.ЛогистическиеЗатраты = СтрокаТЧДокумента.ЦенаСНДС;		
						КонецЕсли;
						СтрокаТЧДокумента = ДокументУстановкиПлановыхЦен.СкидкиНаценки.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.Компенсация"),"СоставляющаяЦены");
						Если НЕ СтрокаТЧДокумента = Неопределено Тогда
							СтрокаТаблицы.КомпенсацииСумма = СтрокаТЧДокумента.ЦенаСНДС;		
						КонецЕсли;
					КонецЕсли;	
					//rarus vikhle 16.03.2022 m 18981 ---
					
					//rarus vikhle 20.01.2021 mt 16981 +++
					СтрокаТаблицы.СкладОтгрузки	= СтрокаТаблицы.Продукт.ЗапрашиваемоеМестоПередачи;//rarus vikhle 26.01.2021 mt 16981
					СтрокаТаблицы.СкладПродажи  = СтрокаТаблицы.Продукт.СкладПродажи;
					СтрокаТаблицы.МестоПередачи = СтрокаТаблицы.Продукт.МестоПередачи;
					//rarus vikhle 20.01.2021 mt 16981 ---
				ИначеЕсли ТипЗнч(СтрокаТаблицы.Продукт) = Тип("СправочникСсылка.Scan_ДрафтыПродуктов") Тогда 	
					СтрокаТаблицы.СкладОтгрузки = СтрокаТЧ.СкладОтгрузки;//rarus vikhle 26.01.2021 mt 16981  	
				КонецЕсли;
			КонецЦикла;	
			Элементы.ЦеныПродуктовСуммаПродажиСНДС.ТекстПодвала = Формат(ЦеныПродуктов.Итог("СуммаПродажиСНДС"),"ЧДЦ=2"); //rarus vikhle 31.12.2020 mt 17056
					
			//Для Каждого СтрокаТаблицы Из ЦеныПродуктов Цикл
			//	Если ТипЗнч(СтрокаТаблицы.Продукт) = Тип("СправочникСсылка.Scan_Изделия") Тогда	
			//		СтрокаТаблицы.НомерШасси = СтрокаТаблицы.Продукт.НомерИзделия;
			//		СтрокаТаблицы.ЦенаПродажиСНДС = СоглашениеОПоставке.Цена;
			//		ДокументУстановкиПлановыхЦен = Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьДокументУстановкиЦенПоПродукту(СтрокаТаблицы.Продукт);
			//		СтрокаТаблицы.ДокументУстановкиПлановыхЦен = ДокументУстановкиПлановыхЦен; 
			//		СтрокаТаблицы.СуммаПродажиСНДС =  ДокументУстановкиПлановыхЦен.ЦенаDealerNetСоСкидкой;
			//		СтрокаТЧДокумента = ДокументУстановкиПлановыхЦен.СкидкиНаценки.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЛогистическиеЗатраты"),"СоставляющаяЦены");
			//		Если НЕ СтрокаТЧДокумента = Неопределено Тогда
			//			СтрокаТаблицы.ЛогистическиеЗатраты = СтрокаТЧДокумента.ЦенаСНДС;		
			//		КонецЕсли;
			//		СтрокаТЧДокумента = ДокументУстановкиПлановыхЦен.СкидкиНаценки.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.Компенсация"),"СоставляющаяЦены");
			//		Если НЕ СтрокаТЧДокумента = Неопределено Тогда
			//			СтрокаТаблицы.КомпенсацииСумма = СтрокаТЧДокумента.ЦенаСНДС;		
			//		КонецЕсли;
			//	КонецЕсли;	
			//КонецЦикла;	
		//rarus vikhle 13.08.2020 mt 16181 ---
		//rarus vikhle 17.09.2020 mt 16526 ---
		
		КонецЕсли;
	КонецЕсли;
	//rarus ozhnik 15888 06.05.2020 -
	//rarus tenkam 09.03.2017 ---
		
	УправлениеДиалогомНаСервере();
	Scan_СборСтатистики.Scan_ПриОткрытии("Справочники", РеквизитФормыВЗначение("Объект").Метаданные().Синоним);	

КонецПроцедуры

//rarus vikhle 07.05.2020 mt 15695 +++
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Scan_ВспомогательныеФункцииКлиент.ПроверитьПользователяПортала();
КонецПроцедуры
//rarus vikhle 07.05.2020 mt 15695 ---

&НаКлиенте
Процедура СформироватьНаименованиеДоговора()
	Наименование = "";
	//Наименование = "Договор ";
	//Если ЗначениеЗаполнено(Объект.ВидДоговора) Тогда
	//	Наименование = Наименование + СокрЛП(НРег(Объект.ВидДоговора));
	//КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НомерДоговора) Тогда
		Наименование = Наименование + "№ " + СокрЛП(Объект.НомерДоговора);
	КонецЕсли;
	//Если ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
	//	Наименование = Наименование + " в " + Объект.ВалютаВзаиморасчетов;
	//КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Наименование = Наименование + " от " + Формат(Объект.ДатаНачала,"ДЛФ=Д");
	КонецЕсли;
	Объект.Наименование = Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДоговораПриИзменении(Элемент)
	СформироватьНаименованиеДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоговораПриИзменении(Элемент)
	СформироватьНаименованиеДоговора();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Основной" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Функция УстановитьОсновнойДоговорНаСервере(ПараметрыДействия=Неопределено)
	
	//Проверим а нет ли уже основного договра с такими же аналитиками
	Возврат Справочники.Scan_ДоговорыВзаиморасчетов.ПроверитьОсновнойДоговор(Объект);
	
КонецФункции // ОсновнойПриИзмененииНаСервере()

&НаКлиенте
Процедура ОсновнойПриИзменении(Элемент)
	// Обработаем событие в контексте сервера
	Если Объект.Основной Тогда
		ОсновнойДоговор = УстановитьОсновнойДоговорНаСервере();
		Если НЕ ОсновнойДоговор = ПредопределенноеЗначение("Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка") Тогда
			
			// Формируем описание обработчика перехвата закрытия формы
			ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияОсновнойДоговор", ЭтотОбъект);
			
			// Формируем текст вопроса
			ТекстВопроса = НСтр("ru = 'Для выбранных аналитик(организация, подразделение, вид договора) основной договор уже назначен """ + ОсновнойДоговор + """. Продолжить?'");
			
			// Получаем подтверждение операции от пользователя
			ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияОсновнойДоговор(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		Объект.Основной = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияОсновнойДоговор()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ОсновнойДоговор = ПредопределенноеЗначение("Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка") Тогда
		ДоговорОбъект = ОсновнойДоговор.ПолучитьОбъект();
		ДоговорОбъект.Основной = Ложь;
		ДоговорОбъект.Записать();
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 +++
	Если Объект.Ссылка.Пустая() Тогда
		Scan_СборСтатистики.Scan_ПередЗаписьюСправочника(РеквизитФормыВЗначение("Объект").Метаданные().Синоним, Истина, "Создание нового элемента");
	КонецЕсли;
	// Rarus tenkam 11.04.2022 mantis 18433 --- 

КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	Если Объект.Бессрочный Тогда
		Объект.ДатаОкончания = Дата('00010101');
		Элементы.ДатаОкончания.Доступность = Ложь;
	Иначе
		Элементы.ДатаОкончания.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Подряда Тогда
		Элементы.ГруппаСрокХранения.Видимость = Истина;
	Иначе
		Элементы.ГруппаСрокХранения.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Подряда ИЛИ
		Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Хранения Тогда
		Элементы.МестаХранения.Видимость = Истина;
	Иначе
		Элементы.МестаХранения.Видимость = Ложь;
		Объект.МестаХранения.Очистить();
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.СрокБесплатногоХраненияПродукта) И Объект.ВидДоговора <> Перечисления.Scan_ВидыДоговоров.Подряда Тогда
		Объект.СрокБесплатногоХраненияПродукта = 0;
	КонецЕсли;
	
	//rarus sergei 08.08.2016 mantis 7092 ++
	Если Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение 
		ИЛИ Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.ДопСоглашениеКСОП Тогда //rarus vikhle 05.08.2020 mt 16181
		ПользовательЯвляетсяСотрудникомСканияРусь = Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь");
		//Элементы.ИнформацияПоСОП.Видимость = ПользовательЯвляетсяСотрудникомСканияРусь; //rarus vikhle 10.08.2021 mt 17637
		Элементы.ГруппаСоглашениеОПоставке.Видимость = Истина; //rarus ozhnik 15888 06.05.2020 +
		// rarus tenkam 22.10.2020 mantis 16181 +++
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьНовыйАлгоритмСозданияДоговоров") Тогда
			Элементы.НомерДоговора.ТолькоПросмотр = Истина;
			Элементы.ДатаНачала.ТолькоПросмотр = Истина;
			Элементы.ВидДоговора.ТолькоПросмотр = Истина;
			//rarus vikhle 15.01.2020 mt 17055 +++
			Элементы.ДатаОкончания.ТолькоПросмотр        = Истина;
			Элементы.Наименование.ТолькоПросмотр         = Истина;
			Элементы.СтавкаНДС.ТолькоПросмотр            = Истина;
			Элементы.ВалютаВзаиморасчетов.ТолькоПросмотр = Истина;
			//rarus vikhle 15.01.2020 mt 17055 ---
			
			// rarus tenkam 05.03.2021 mantis 17357 +++
			Элементы.Расторгнут.ТолькоПросмотр = Истина;
			Элементы.Владелец.ТолькоПросмотр = Истина;
			Элементы.Компания.ТолькоПросмотр = Истина;
			Элементы.СОП_СтатусОплаты.ТолькоПросмотр = Истина;
			Элементы.Недействителен.ТолькоПросмотр = Истина;
			Элементы.Основной.ТолькоПросмотр = Истина;
			Элементы.ВключаетНДС.ТолькоПросмотр = Истина;
			// rarus tenkam 05.03.2021 mantis 17357 ---
			
		КонецЕсли;
		// rarus tenkam 22.10.2020 mantis 16181 ---
		
		// rarus tenkam 03.10.2020 mantis 16759 +++
		Элементы.Расторгнут.Видимость = Истина;
		Элементы.ДатаРасторжения.Видимость = Истина;
		// rarus tenkam 03.10.2020 mantis 16759 ---
		
		//rarus vikhle 26.02.2021 mt 16981 +++
		Элементы.ЦеныПродуктовСкладПродажи.Видимость = ПользовательЯвляетсяСотрудникомСканияРусь;
		//rarus vikhle 26.02.2021 mt 16981 ---
	Иначе
		//Элементы.ИнформацияПоСОП.Видимость = Ложь; //rarus vikhle 10.08.2021 mt 17637
		Элементы.ГруппаСоглашениеОПоставке.Видимость = ложь; //rarus ozhnik 15888 06.05.2020 +
		// rarus tenkam 22.10.2020 mantis 16181 +++
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьНовыйАлгоритмСозданияДоговоров") Тогда
			//Rarus bonmak 19318 18.07.2022 ++
			//Элементы.НомерДоговора.ТолькоПросмотр = Ложь;
			//Элементы.ДатаНачала.ТолькоПросмотр = Ложь;
			Элементы.НомерДоговора.ТолькоПросмотр = ЗначениеЗаполнено(Объект.IDExternalSystem);
			Элементы.ДатаНачала.ТолькоПросмотр = ЗначениеЗаполнено(Объект.IDExternalSystem);
			//Rarus bonmak 19318 18.07.2022 --
		КонецЕсли;
		// rarus tenkam 22.10.2020 mantis 16181 ---
		
		// rarus tenkam 03.10.2020 mantis 16759 +++
		Элементы.Расторгнут.Видимость = Ложь;
		Элементы.ДатаРасторжения.Видимость = Ложь;
		// rarus tenkam 03.10.2020 mantis 16759 ---
	КонецЕсли; 
	//rarus sergei 08.08.2016 mantis 7092 --
	
	//rarus tenkam 02.11.2016 mantis 7092 ++
	Если Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение ИЛИ
		Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.ДопСоглашениеКСОП Тогда	// rarus tenkam 21.10.2020 mantis 16181 +
		
		Элементы.ФормаГруппаИнтеграция.Видимость = Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством");
		Элементы.ФормаОбновитьЭлемент.Доступность = (ЗначениеЗаполнено(Объект.IDExternalSystem));
		
		Если ЗначениеЗаполнено(Объект.ДатаОбновления)  Тогда
			Элементы.ФормаОбновитьЭлемент.Заголовок = Объект.ДатаОбновления;
		КонецЕсли;
	Иначе
		Элементы.ФормаГруппаИнтеграция.Видимость = Ложь;	
	КонецЕсли;
	//rarus tenkam 02.11.2016 mantis 7092 --
	
	// Rarus tenkam 11.01.2021 mantis 18672 +++
	////rarus agar 28.08.2020 15696 ++
	//ЭтотОбъект.ТолькоПросмотр = Объект.ДОДоговорПолученИз1СДО;
	////rarus agar 28.08.2020 15696 --
	Если Объект.ДОДоговорПолученИз1СДО Тогда
		Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
		Элементы.ГруппаНаименование.ТолькоПросмотр = Истина;
		Элементы.ГруппаКомпания.ТолькоПросмотр = Истина;
		Элементы.ГруппаПраво.ТолькоПросмотр = Истина;
		Элементы.НомерДоговора.ТолькоПросмотр = Истина;
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГруппаШапка.ТолькоПросмотр = Ложь;
		Элементы.ГруппаНаименование.ТолькоПросмотр = Ложь;
		Элементы.ГруппаКомпания.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПраво.ТолькоПросмотр = Ложь;
		//Rarus bonmak 19318 18.07.2022 ++
		//Элементы.НомерДоговора.ТолькоПросмотр = Ложь;
		//Элементы.ДатаНачала.ТолькоПросмотр = Ложь;
		//Rarus bonmak 19318 18.07.2022 --
	КонецЕсли;
	// Rarus tenkam 11.01.2021 mantis 18672 ---
	
	//rarus bonmak 09.08.2021 16834 Элементы.СпецификацияКСОП.ТолькоПросмотр 	  = Scan_ПраваИНастройки.Scan_Право("ИспользоватьНовыйАлгоритмСозданияДоговоров"); //rarus bonmak 25.03.2021 17443
	Элементы.ДатаОкончанияДействия.ТолькоПросмотр = НЕ Объект.Недействителен;	// rarus tenkam 24.03.2021 mantis 17101 +
	
КонецПроцедуры // УправлениеДиалогом()

&НаКлиенте
Процедура БессрочныйПриИзменении(Элемент)
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	//rarus tenkam 04.07.2017 mantis 10205 +++
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.Соглашение") Тогда
		Объект.Бессрочный = Истина;
	КонецЕсли;
	//rarus tenkam 04.07.2017 mantis 10205 ---
	УправлениеДиалогомНаСервере();
КонецПроцедуры

//rarus bonmak 15.04.2020 14456 ++
//rarus bonmak 03.06.2020 16165 ++
&НаСервере
Функция ПолучитьМестоХраненияКонтрагента(МестоХраненияОснование)
	//попробуем найти место хранения с таким же наименованием, но подходящим контргаентом
	НаименованиеМестаХранения = ПолучитьНаименованияМестаХранения(МестоХраненияОснование);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_МестаХранения.Ссылка,
	               |	Scan_МестаХранения.Наименование
	               |ИЗ
	               |	Справочник.Scan_МестаХранения КАК Scan_МестаХранения
	               |ГДЕ
	               |	Scan_МестаХранения.Маршрут = ЛОЖЬ
				   //rarus bonmak 03.06.2020 16165 ++
				   //|	И Scan_МестаХранения.СтанцияДилера = &СтанцияДилера";
	               |	И Scan_МестаХранения.Контрагент = &Контрагент";
				   //rarus bonmak 03.06.2020 16165 --
	//rarus bonmak 15.04.2020 14456 ++
	Запрос.УстановитьПараметр("Контрагент", Объект.Владелец);//rarus bonmak 03.06.2020 16165 
	//rarus bonmak 03.06.2020 16165 Запрос.УстановитьПараметр("СтанцияДилера", Объект.Компания);
	//rarus bonmak 15.04.2020 14456 --
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата из Результат Цикл
		Если СтрНайти(СтрокаРезультата.Наименование,НаименованиеМестаХранения) <> 0 Тогда
			//Нашли подходящее место хранения
			Возврат СтрокаРезультата.Ссылка;
		КонецЕсли;
	КонецЦикла;
	//rarus bonmak 03.06.2020 16165 ++
	//НовоеМестоХранения = Справочники.Scan_МестаХранения.СоздатьЭлемент();
	//НовоеМестоХранения.Родитель = Справочники.Scan_МестаХранения.МестаХранения;
	//НовоеМестоХранения.АдресСкладаФактический = МестоХраненияОснование.АдресСкладаФактический;
	//НовоеМестоХранения.АдресСкладаЛогистический = МестоХраненияОснование.АдресСкладаЛогистический;	//rarus tenkam 28.09.2016 mantis 7161 +
	////rarus bonmak 15.04.2020 14456 ++
	////НовоеМестоХранения.Контрагент = Объект.Владелец;
	//НовоеМестоХранения.СтанцияДилера = Объект.Компания;
	////rarus bonmak 15.04.2020 14456 --
	//НовоеМестоХранения.Наименование = НаименованиеМестаХранения + " (" + СокрЛП(Объект.Владелец.Наименование) + ")";
	//НовоеМестоХранения.Записать();
	//rarus bonmak 03.06.2020 16165 --
	Возврат Справочники.Scan_МестаХранения.ПустаяСсылка(); //rarus bonmak 03.06.2020 16165 НовоеМестоХранения.Ссылка;
КонецФункции
//rarus bonmak 03.06.2020 16165 --
//rarus bonmak 15.04.2020 14456 --

&НаСервере 
Функция ПолучитьНаименованияМестаХранения(МестоХраненияОснование)
	//rarus bonmak 15.04.2020 14456 ++
	//rarus bonmak 03.06.2020 16165 ++
	МестоХраненияБезКонтрагента = СтрЗаменить(МестоХраненияОснование,МестоХраненияОснование.Контрагент.Наименование,"");
	//фКонтрагент = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьДилераПоКомпании(МестоХраненияОснование.СтанцияДилера);	
	//Если фКонтрагент = Неопределено Тогда
	//	МестоХраненияБезКонтрагента = МестоХраненияОснование;
	//Иначе
	//	МестоХраненияБезКонтрагента = СтрЗаменить(МестоХраненияОснование,фКонтрагент.Наименование,"");
	//КонецЕсли;
	//rarus bonmak 03.06.2020 16165 --
	//rarus bonmak 15.04.2020 14456 --
	МестоХраненияБезКонтрагента = СтрЗаменить(МестоХраненияБезКонтрагента,"(","");
	МестоХраненияБезКонтрагента = СтрЗаменить(МестоХраненияБезКонтрагента,")","");
	Возврат СокрЛП(МестоХраненияБезКонтрагента);
КонецФункции

&НаКлиенте
Процедура МестаХраненияМестоХраненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//rarus bonmak 03.06.2020 16165 ++
	//rarus bonmak 15.04.2020 14456 ++
	Если ПолучитьКонтрагентаМестаХранения(ВыбранноеЗначение) <> Объект.Владелец Тогда 
	//Если ПолучитьКонтрагентаМестаХранения(ВыбранноеЗначение) <> Объект.Компания Тогда	
	//rarus bonmak 15.04.2020 14456 --
	//rarus bonmak 03.06.2020 16165 --
		//добавим другое место хранения
		СтандартнаяОбработка = Ложь;
		//rarus bonmak 03.06.2020 16165 ++
		//rarus bonmak 15.04.2020 14456 ++
		Элементы.МестаХранения.ТекущиеДанные.МестоХранения = ПолучитьМестоХраненияКонтрагента(ВыбранноеЗначение);
		ВыбранноеЗначение = Элементы.МестаХранения.ТекущиеДанные.МестоХранения;
		//Элементы.МестаХранения.ТекущиеДанные.МестоХранения = "";
		//Сообщить(НСтр("ru = 'Выбранное место хранения не принадлежит компании договора!'; en = 'The selected storage location does not belong to the contract company!'"));
		//rarus bonmak 15.04.2020 14456 --
		//rarus bonmak 03.06.2020 16165 --
	КонецЕсли;
	
	Если УжеЕстьВТаблице(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.МестаХранения.ТекущиеДанные.МестоХранения = "";
		
		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
		//Сообщить("Выбранное место хранения уже есть в табличной части!");
		Сообщить(НСтр("ru = 'Выбранное место хранения уже есть в табличной части!'; en = 'The selected storage location already in the table!'"));
		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтрагентаМестаХранения(МестоХранения)
	Возврат МестоХранения.Контрагент; //rarus bonmak 03.06.2020 16165 МестоХранения.СтанцияДилера; //rarus bonmak 15.04.2020 14456	
КонецФункции

//rarus tenkam 09.03.2017 (update) +++
&НаКлиенте
Процедура МестаХраненияМестоХраненияСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	//rarus bonmak 03.06.2020 16165 ++
	//rarus bonmak 15.04.2020 14456 ++
	СтруктураПараметров.Вставить("Контрагент", Объект.Владелец);
	//СтруктураПараметров.Вставить("СтанцияДилера", Объект.Компания);
	//rarus bonmak 15.04.2020 14456 --
	//rarus bonmak 03.06.2020 16165 --
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Scan_МестаХранения.ФормаОбъекта", СтруктураПараметров, Элемент);
КонецПроцедуры
//rarus tenkam 09.03.2017 ---
&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	ВладелецПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	Если Объект.МестаХранения.Количество() <> 0 Тогда
		//rarus bonmak 03.06.2020 16165 ++
		//rarus bonmak 15.04.2020 14456 ++
		Если Объект.Владелец <> Объект.МестаХранения[0].МестоХранения.Контрагент Тогда
		//Если НЕ РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ЕстьСвязьКомпанияКонтрагент(Объект.МестаХранения[0].МестоХранения.СтанцияДилера, Объект.Владелец) Тогда 
		//rarus bonmak 15.04.2020 14456 --
		//rarus bonmak 03.06.2020 16165 --
			Объект.МестаХранения.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	//rarus pechek 01.04.2020 15672 +++
	//закоментировано в рамках задачи 15672
	//Если Объект.КонтактныеЛицаПоДоговору.Количество() <> 0 Тогда
	//
	//	Если Объект.Владелец <> Объект.КонтактныеЛицаПоДоговору[0].КонтактноеЛицо.Владелец Тогда
	//	
	//		Объект.КонтактныеЛицаПоДоговору.Очистить();
	//	
	//	КонецЕсли; 	
	//
	//КонецЕсли; 
	//rarus pechek 01.04.2020 15672 ---
КонецПроцедуры

&НаСервере
Функция УжеЕстьВТаблице(Выбор)
    МассивНайденныхСтрок = Объект.МестаХранения.НайтиСтроки(Новый Структура("МестоХранения",Выбор));
    Возврат МассивНайденныхСтрок.Количество() > 1;
КонецФункции

//rarus tenkam 14.11.2016 TLMS 011 (перенесла в модуль объекта)
//&НаСервере
//Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
//	//rarus tenkam 20.06.2016 mantis 7104 ++
//	Если Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Подряда Тогда
//		НаДату = ТекущаяДата();
//		Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведения(Объект.Ссылка, Объект.СрокБесплатногоХраненияПродукта, НаДату);
//	КонецЕсли;
//	//rarus tenkam 20.06.2016 mantis 7104 --

//	//rarus sergei 10.08.2016 mantis 7092 ++
//	Если Объект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение Тогда
//		НаДату = ТекущаяДата();
//		Для каждого строка Из Объект.СпецификацияКСОП Цикл
//			
//			Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Объект.СОП_ОсновнойДоговор,Строка.СОП_Продукт,Объект.НомерДоговора,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.НомерДоговора, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.ВалютаВзаиморасчетов,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.Валюта, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.ДатаНачала,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.ДатаНачала, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.ДатаОкончания,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.ДатаОкончания, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.Бессрочный,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.Бессрочный, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.Наименование,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.Наименование, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.Основной,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.ОсновнойДоговор, НаДату);
//			Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Объект.СОП_ОсновнойДоговор,Строка.СОП_Продукт,Объект.СОП_СтатусОплаты,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.СтатусОплаты, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.СОП_Закрыт,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.Закрыт, НаДату);
//			Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Объект.СОП_ОсновнойДоговор,Строка.СОП_Продукт,Объект.СОП_ДатаОбновления,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.ДатаОбновления, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.СОП_СуммаПоСОПБезНДС,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.СуммаПоСОПБезНДС, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.СОП_СебестоимостьСуммаБезНДС,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.СебестоимостьСуммаБезНДС, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,Объект.СОП_СебестоимостьСумма,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.СебестоимостьСумма, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,строка.СОП_СрокПоставки,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.СрокПоставки, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,строка.СОП_МестоДоставки,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.МестоПоставки, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,строка.СОП_Количество,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.Количество, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,строка.СОП_ЦенаПродажиБезНДС,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.ЦенаПродажиБезНДС, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,строка.СОП_Себестоимость,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.Себестоимость, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,строка.СОП_СуммаПродажиБезНДС,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.СуммаПродажиБезНДС, НаДату);
//			//Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписьЗначенияРегистраСведенияИсторияПоСОП(Объект.Ссылка,Объект.Владелец,Строка.СОП_Продукт,строка.СОП_СебестоимостьБезНДС,Перечисления.Scan_ДополнительнаяИнформацияПоСОП.СебестоимостьБезНДС, НаДату);
//			Если Строка.СОП_Продукт.СОП <> Объект.Ссылка Тогда
//			
//				ЗаполнитьСОПВПродукте(Строка.СОП_Продукт);	
//			
//			КонецЕсли; 
//		
//			
//			
//		КонецЦикла; 
//	КонецЕсли;
//	//rarus sergei 10.08.2016 mantis 7092 --

//	КонецПроцедуры

////rarus sergei 10.08.2016 mantis 7092 ++
//&НаСервере
//Процедура ЗаполнитьСОПВПродукте(Продукт)
//	ПродуктОбъект = Продукт.ПолучитьОбъект();
//	ПродуктОбъект.СОП = Объект.Ссылка;
//	ПродуктОбъект.Записать();

//КонецПроцедуры
// 
//rarus sergei 10.08.2016 mantis 7092 --
//rarus tenkam 14.11.2016 TLMS 011 --

//rarus sergei 02.08.2016 mantis 6976 ++

//rarus pechek 01.04.2020 15672 +++
//закоментировано в рамках задачи 15672

//&НаКлиенте
//Процедура КонтактныеЛицаПоДоговоруКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
//	
//		СтандартнаяОбработка = Ложь;
//		ЗначениеОтбора = Новый Структура("Владелец", Объект.Владелец);
//		ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
//	    Результат = ОткрытьФорму("Справочник.Scan_КонтактныеЛица.ФормаВыбора",ПараметрыФормы,Элементы.КонтактныеЛицаПоДоговоруКонтактноеЛицо); 
//	
//	
//	КонецЕсли; 
//КонецПроцедуры

//rarus pechek 01.04.2020 15672 ---

//rarus pechek 01.04.2020 15672 +++
//закоментировано в рамках задачи 15672
//&НаКлиенте
//Процедура КонтактныеЛицаПоДоговоруКонтактноеЛицоПриИзменении(Элемент)
//	КонтактныеЛицаПоДоговоруКонтактноеЛицоПриИзмененииНаСервере();
//КонецПроцедуры
//rarus pechek 01.04.2020 15672 ---

//rarus pechek 01.04.2020 15672 +++
//закоментировано в рамках задачи 15672
//&НаСервере
//Процедура КонтактныеЛицаПоДоговоруКонтактноеЛицоПриИзмененииНаСервере()
//	Если Объект.КонтактныеЛицаПоДоговору.Количество() <> 0 и Объект.Владелец = Справочники.Scan_Контрагенты.ПустаяСсылка() Тогда
//	
//		Объект.Владелец = Объект.КонтактныеЛицаПоДоговору[0].КонтактноеЛицо.Владелец;		
//	
//	КонецЕсли; 
//КонецПроцедуры

//rarus pechek 01.04.2020 15672 ---

//rarus pechek 01.04.2020 15672 +++
//закоментировано в рамках задачи 15672

//&НаКлиенте
//Процедура КонтактныеЛицаПоДоговоруКонтактноеЛицоСоздание(Элемент, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	ПараметрыСоздания = Новый Структура;
//	ПараметрыСоздания.Вставить("Контрагент", Объект.Владелец);
//	ПараметрыСоздания.Вставить("Наименование",Элемент.ТекстРедактирования);  
//	ОткрытьФорму("Справочник.Scan_КонтактныеЛица.ФормаОбъекта", ПараметрыСоздания, Элемент);

//КонецПроцедуры
//rarus pechek 01.04.2020 15672 ---



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Для тестирования. Удалить после реализации загрузки из внешних систем /////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//rarus bonmak 09.08.2021 16834 ++
//&НаКлиенте
//Процедура СпецификацияКСОПСОП_СуммаПродажиБезНДСПриИзменении(Элемент)
//	СпецификацияКСОПСОП_СуммаПродажиБезНДСПриИзмененииНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура СпецификацияКСОПСОП_СуммаПродажиБезНДСПриИзмененииНаСервере()
//	Справочники.Scan_ДоговорыВзаиморасчетов.РассчитатьСуммыПоСОП(Объект);

//КонецПроцедуры

//&НаКлиенте
//Процедура СпецификацияКСОПСОП_СебестоимостьБезНДСПриИзменении(Элемент)
//	СпецификацияКСОПСОП_СебестоимостьБезНДСПриИзмененииНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура СпецификацияКСОПСОП_СебестоимостьБезНДСПриИзмененииНаСервере()
//	Справочники.Scan_ДоговорыВзаиморасчетов.РассчитатьСуммыПоСОП(Объект);
//КонецПроцедуры

//&НаКлиенте
//Процедура СпецификацияКСОПСОП_СебестоимостьПриИзменении(Элемент)
//	СпецификацияКСОПСОП_СебестоимостьПриИзмененииНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура СпецификацияКСОПСОП_СебестоимостьПриИзмененииНаСервере()
//	Справочники.Scan_ДоговорыВзаиморасчетов.РассчитатьСуммыПоСОП(Объект);
//КонецПроцедуры
//rarus bonmak 09.08.2021 16834 --

// rarus tenkam 28.06.2019 mantis 14427 +++ закомментировать по 14430 +
// 
//rarus bonmak 26.08.2019 14430 ++
//&НаКлиенте
//Процедура СпецификацияКСОПСОП_ПродуктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
//	Объект.СпецификацияКСОП[ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерСтроки-1].СОП_Количество = 1;
//	// rarus tenkam 17.07.2019 mantis 14657 +++
//	Объект.СпецификацияКСОП[ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерСтроки-1].СОП_Изделие = ПолучитьИзделие(ВыбранноеЗначение);
//	// rarus tenkam 17.07.2019 mantis 14657 ---
//		
//	МассивСтрок=Объект.СпецификацияКСОП.НайтиСтроки(Новый Структура("СОП_Продукт",ВыбранноеЗначение));
//	Если МассивСтрок.Количество()> 0 и МассивСтрок[0].НомерСтроки <>  ТекущийЭлемент.ТекущаяСтрока+1 Тогда
//		СтандартнаяОбработка=Ложь;              
//		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
//		//Сообщить("Объект ("+ВыбранноеЗначение+") уже подобран в табличную часть в строке "+МассивСтрок[0].НомерСтроки+". Нельзя добавить два одинаковых продукта в договор");
//		Если ТекущийЯзык()="en" тогда
//			Сообщить("Unable to add two objects into one line");
//		иначе
//			Сообщить("Объект ("+ВыбранноеЗначение+") уже подобран в табличную часть в строке "+МассивСтрок[0].НомерСтроки+". Нельзя добавить два одинаковых продукта в договор");
//		КонецЕсли;
//		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
//		Возврат;                                
//	КонецЕсли;
//	
//КонецПроцедуры
//rarus bonmak 26.08.2019 14430 --

// rarus tenkam 17.07.2019 mantis 14657 +++                   
// rarus tenkam 17.07.2019 mantis 14657 ---	

// закомментировать по 14430 - 
//rarus bonmak 09.08.2021 16834 ++
//&НаКлиенте
//Процедура СпецификацияКСОПСОП_ИзделиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
//	Объект.СпецификацияКСОП[ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерСтроки-1].СОП_Количество = 1;
//	МассивСтрок = Объект.СпецификацияКСОП.НайтиСтроки(Новый Структура("СОП_Изделие",ВыбранноеЗначение));
//	Если МассивСтрок.Количество()> 0 и МассивСтрок[0].НомерСтроки <>  ТекущийЭлемент.ТекущаяСтрока+1 Тогда
//		СтандартнаяОбработка = Ложь;              
//		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
//		//Сообщить("Объект ("+ВыбранноеЗначение+") уже подобран в табличную часть в строке "+МассивСтрок[0].НомерСтроки+". Нельзя добавить два одинаковых продукта в договор");
//		Если ТекущийЯзык()="en" тогда
//			Сообщить("Unable to add two objects into one line");
//		иначе
//			Сообщить("Объект ("+ВыбранноеЗначение+") уже подобран в табличную часть в строке "+МассивСтрок[0].НомерСтроки+". Нельзя добавить два одинаковых продукта в договор");
//		КонецЕсли;
//		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
//		Возврат;                                
//	КонецЕсли;

//КонецПроцедуры
// rarus tenkam 28.06.2019 mantis 14427 ---
//rarus bonmak 09.08.2021 16834 --	
//rarus bonmak 09.08.2021 16834 ++
//&НаКлиенте
//Процедура СпецификацияКСОПСОП_ЦенаПродажиБезНДСПриИзменении(Элемент)
//	НомерСтроки = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерСтроки;
//	РассчитатьСуммуПродажиПродукта(НомерСтроки);	
//КонецПроцедуры
//rarus bonmak 09.08.2021 16834 --

//rarus bonmak 09.08.2021 16834 ++
//&НаКлиенте
//Процедура СОП_ОсновнойДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	ПараметрыФормы = Новый Структура("ОсновнойДоговор", Истина);	
//	Если ЗначениеЗаполнено(Объект.Владелец) Тогда			
//		ЗначениеОтбора = Новый Структура("Владелец", Объект.Владелец);
//		ПараметрыФормы.Вставить("ОтборПоВладельцу", ЗначениеОтбора);
//	КонецЕсли;
//	Результат = ОткрытьФорму("Справочник.Scan_ДоговорыВзаиморасчетов.ФормаВыбора",ПараметрыФормы,Элементы.СОП_ОсновнойДоговор); 	
//КонецПроцедуры
//rarus bonmak 09.08.2021 16834 --
//rarus bonmak 09.08.2021 16834 ++
//&НаКлиенте
//Процедура СОП_ОсновнойДоговорПриИзменении(Элемент)
//	СОП_ОсновнойДоговорПриИзмененииНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура СОП_ОсновнойДоговорПриИзмененииНаСервере()
//	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
//	
//		Объект.Владелец = Объект.СОП_ОсновнойДоговор.Владелец;		
//	
//	КонецЕсли; 
//КонецПроцедуры
//rarus bonmak 09.08.2021 16834 --

//rarus sergei 25.08.2016 mantis 7163 ++
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// rarus tenkam 05.04.2019 mantis 14316 +++
	//ПрисоединенныеФайлы.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	// rarus tenkam 05.04.2019 mantis 14316 ---
КонецПроцедуры
//rarus sergei 25.08.2016 mantis 7163 --

//rarus sergei 02.08.2016 mantis 6976 ++

//rarus tenkam 02.11.2016 mantis 7092 ++
&НаСервере
Процедура ОбновитьЭлементНаСервере()
	Если НЕ ЗначениеЗаполнено(Объект.IDExternalSystem) Тогда
		//Создан вручную
	Иначе
		ИмяМетода = "GetSOP";
		СообщениеОбОшибке = "";
		Отказ = Ложь;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", Объект.IDExternalSystem);
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		Если НЕ Отказ Тогда
			СсылкаПродукта = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
		КонецЕсли;	
		ЭтаФорма.Прочитать();
		УправлениеДиалогомНаСервере();
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлемент(Команда)
	ОбновитьЭлементНаСервере();
КонецПроцедуры

//rarus tenkam 02.11.2016 mantis 7092 --

//rarus tenkam 16.02.2017 mantis 7177 +++
&НаКлиенте
Процедура УказатьТарифы(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
		//Сообщить("Необходимо записать элемент!");
		Сообщить(НСтр("ru = 'Необходимо записать элемент!'; en = 'Save the item!'"));
		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
		//Сообщить("Заполните ставку НДС!");
		Сообщить(НСтр("ru = 'Заполните ставку НДС!'; en = 'Fill in the VAT rate!'"));
		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
		Возврат;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Договор", Объект.Ссылка);
	ОткрытьФорму("Обработка.Scan_ВводИнформацииПоТарифам.Форма.ВводИнформацииПоТарифам",ПараметрыОткрытия,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
//rarus tenkam 16.02.2017 mantis 7177 ---
//rarus bonmak 09.08.2021 16834 ++
// rarus tenkam 25.07.2018 mantis 13340 +++
//&НаКлиенте
//Процедура ЗаполнитьИзБуфераОбмена(Команда)
//	ОткрытьФорму("ОбщаяФорма.Scan_ФормаИмпорта",,ЭтаФорма,,,,Новый ОписаниеОповещения("ЗаполнитьИзБуфераЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьИзБуфераЗавершение(ЗначениеВозвращаемыхДанных, ДополнительныеПараметры) Экспорт
//	Если ЗначениеВозвращаемыхДанных = Неопределено ИЛИ
//		ЗначениеВозвращаемыхДанных = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли;
//	Если ЗначениеВозвращаемыхДанных.ОчиститьИзделия Тогда
//		Объект.СпецификацияКСОП.Очистить();
//	КонецЕсли;
//	Если ЗначениеВозвращаемыхДанных.МассивИзделий.Количество() = 0 Тогда
//		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
//		//Сообщить("По данным номерам шасси не найдено ни одно изделие!");
//		Сообщить(НСтр("ru = 'По данным номерам шасси не найден ни один продукт!'; en = 'Products not found!'"));
//		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
//		Возврат;
//	КонецЕсли;
//	Для Каждого ТекИзделие Из ЗначениеВозвращаемыхДанных.МассивИзделий Цикл
//		// rarus tenkam 28.06.2019 mantis 14427 +++
//		//текПродукт = ПолучитьПродуктПоИзделию(ТекИзделие);
//		//ПараметрыОтбора = Новый Структура("СОП_Продукт", текПродукт);
//		ПараметрыОтбора = Новый Структура("СОП_Изделие", ТекИзделие);
//		// rarus tenkam 28.06.2019 mantis 14427 ---
//		
//		Если Объект.СпецификацияКСОП.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
//			НовоеИзделие = Объект.СпецификацияКСОП.Добавить();
//			// rarus tenkam 28.06.2019 mantis 14427 +++ 		
//			//НовоеИзделие.СОП_Продукт = текПродукт;
//			НовоеИзделие.СОП_Изделие = ТекИзделие;
//			// rarus tenkam 28.06.2019 mantis 14427 ---
//			//// rarus tenkam 10.07.2019 mantis 14634 удалить по 14430 +++ 
//			//НовоеИзделие.СОП_Продукт = ПолучитьПродуктПоИзделию(ТекИзделие);
//			//// rarus tenkam 10.07.2019 mantis 14634 удалить по 14430 -- 
//			НовоеИзделие.СОП_Количество = 1;
//		КонецЕсли;
//	КонецЦикла;
//	Если ЗначениеВозвращаемыхДанных.МассивНенайденных.Количество() <> 0 Тогда
//		СообщениеОбОшибке = "Не найдены изделия со следующими номерами шасси:" + Символы.ПС;
//		Для Каждого ТекНомерШасси Из ЗначениеВозвращаемыхДанных.МассивНенайденных Цикл
//			СообщениеОбОшибке = СообщениеОбОшибке + ТекНомерШасси + Символы.ПС;
//		КонецЦикла;
//		Сообщить(СообщениеОбОшибке);
//	КонецЕсли;

//	ЭтаФорма.Модифицированность	= Истина;
//КонецПроцедуры
//rarus bonmak 09.08.2021 16834 --
&НаКлиенте
Процедура МестаХраненияМестоХраненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //rarus bonmak 15.04.2020 14456 ++
	СтандартнаяОбработка = Ложь;
	//rarus bonmak 03.06.2020 16165 ++
	//ЗначениеОтбора = Новый Структура("СтанцияДилера", Объект.Компания);
	ЗначениеОтбора = Новый Структура("Контрагент", Объект.Владелец);
	//rarus bonmak 03.06.2020 16165 --
	ПараметрыВыбораМестаХранения = Новый Структура("Отбор", ЗначениеОтбора);
	ДополнительныеПараметры = Новый Структура ("Элемент", Элемент.Имя);
	Описание = Новый ОписаниеОповещения("ЗаполнениеМестаХранения",ЭтотОбъект,ДополнительныеПараметры);
	ОткрытьФорму("Справочник.Scan_МестаХранения.ФормаВыбора", ПараметрыВыбораМестаХранения,ЭтаФорма,,,,Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры //rarus bonmak 15.04.2020 14456 --

&НаКлиенте
Процедура ЗаполнениеМестаХранения(Результат,Параметры) Экспорт //rarus bonmak 15.04.2020 14456 ++
	Если Результат <> Неопределено Тогда
		Элементы.МестаХранения.ТекущиеДанные.МестоХранения = Результат;
		МестаХраненияМестоХраненияОбработкаВыбора(Неопределено, Результат, Истина);
	КонецЕсли;
КонецПроцедуры //rarus bonmak 15.04.2020 14456 --

//rarus vikhle 13.08.2020 mt 16181 +++
&НаКлиенте
Процедура ЦеныПродуктовДокументУстановкиПлановыхЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПродуктовДокументУстановкиПлановыхЦенОткрытие(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ЦеныПродуктов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументУстановкиПлановыхЦен) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ДокументУстановкиПлановыхЦен);
		ОткрытьФорму("Документ.Scan_УстановкаПлановыхЦенПродукта.Форма.ФормаОтображения",
					ПараметрыФормы,,,,,,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;			
КонецПроцедуры
//rarus vikhle 13.08.2020 mt 16181 ---

// rarus tenkam 03.10.2020 mantis 16759 +++
&НаКлиенте
Процедура РасторгнутПриИзменении(Элемент)
	Если Объект.Расторгнут Тогда
		Элементы.ДатаРасторжения.ТолькоПросмотр = Ложь;
	Иначе
		Объект.ДатаРасторжения = Дата('00010101');
		Элементы.ДатаРасторжения.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.Расторгнут Тогда
		СоглашениеОПоставке = Справочники.Scan_СоглашенияОПоставке.НайтиСоглашениеОПоставкеПоДоговору(ТекущийОбъект.Ссылка);
		Если Не СоглашениеОПоставке.Пустая() Тогда
			РегистрыСведений.Scan_OrderIntake.ЗаписатьДатуРасторженияПоЗаявкеНаСОП(СоглашениеОПоставке, ТекущийОбъект.ДатаРасторжения);
			
			// rarus agar 30.12.2021 17739 ++
			АльтернативныйРасчет = Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake");
			Если АльтернативныйРасчет Тогда
				Для Каждого СтрокаПродукта Из СоглашениеОПоставке.СписокПродуктов Цикл
					Scan_OrderIntake.ЗарегистрироватьРасторжение(ТекущийОбъект.ДатаРасторжения,, СтрокаПродукта.Продукт);
				КонецЦикла;
			КонецЕсли;
			// rarus agar 30.12.2021 17739 --
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// rarus tenkam 03.10.2020 mantis 16759 ---

&НаКлиенте
Процедура ВидДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	// rarus tenkam 30.12.2020 mantis 16934 +
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.Агентский"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.Аренды"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.Перевозки"));
	// Rarus tenkam 11.01.2022 mantis 18672 +++
	//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.Подряда"));
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.Подряда"));
	КонецЕсли;
	// Rarus tenkam 11.01.2022 mantis 18672 ---
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.СПокупателем"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.СПоставщиком"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ВидыДоговоров.Хранения"));
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)	// rarus tenkam 24.03.2021 mantis 17101 +
	Если Объект.Недействителен И НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияДействия) Тогда
		Объект.ДатаОкончанияДействия = ТекущаяДата();
	ИначеЕсли НЕ Объект.Недействителен Тогда
		Объект.ДатаОкончанияДействия = Дата(1,1,1);
	КонецЕсли;		
	УправлениеДиалогомНаСервере();
КонецПроцедуры

//rarus vikhle 06.04.2021 mt 17484 +++
&НаКлиенте
Процедура КомпанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомпанияОбработкаВыбораПродолжение",ЭтотОбъект,ВыбранноеЗначение);//rarus vikhle 15.04.2021 mt 17484
	Scan_ВспомогательныеФункцииКлиент.ПроверитьАктивностьВыбраннойКомпании(ВыбранноеЗначение,ОписаниеОповещения,СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КомпанияОбработкаВыбораПродолжение(Результат, ВыбраннаяКомпания) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Компания = ВыбраннаяКомпания;
	Иначе
		Объект.Компания = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры	
//rarus vikhle 06.04.2021 mt 17484 ---

// rarus agar 21.04.2021 17484 ++
&НаКлиенте
Процедура КомпанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Владелец.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	МассивКомпаний = ПолучитьКомпанииКонтрагента(Объект.Владелец);
	
	СписокКомпаний = Новый СписокЗначений;
	СписокКомпаний.ЗагрузитьЗначения(МассивКомпаний);
	
	Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	Отбор.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение   = СписокКомпаний;
	Отбор.Использование    = Истина;
	Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОткрытьФорму("Справочник.Scan_Компании.ФормаВыбора", ПараметрыФормы, Элементы.Компания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомпанииКонтрагента(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ВзаимосвязьКомпанийСКонтрагентами.Компания КАК Компания
	|ИЗ
	|	РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами КАК Scan_ВзаимосвязьКомпанийСКонтрагентами
	|ГДЕ
	|	Scan_ВзаимосвязьКомпанийСКонтрагентами.Контрагент = &Контрагент";
	РезультатЗапроса = Запрос.Выполнить();
	
	КомпанииКонтрагента = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Компания");
	
	Возврат КомпанииКонтрагента;
	
КонецФункции

&НаКлиенте
Процедура ВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Компания.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	МассивКонтрагентов = ПолучитьКонтрагентовКомпании(Объект.Компания);
	
	СписокКонтрагентов = Новый СписокЗначений;
	СписокКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
	
	Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	Отбор.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение   = СписокКонтрагентов;
	Отбор.Использование    = Истина;
	Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОткрытьФорму("Справочник.Scan_Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.Владелец);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентовКомпании(Компания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компания", Компания);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ВзаимосвязьКомпанийСКонтрагентами.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами КАК Scan_ВзаимосвязьКомпанийСКонтрагентами
	|ГДЕ
	|	Scan_ВзаимосвязьКомпанийСКонтрагентами.Компания = &Компания";
	РезультатЗапроса = Запрос.Выполнить();
	
	КонтрагентыКомпании = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат КонтрагентыКомпании;
	
КонецФункции

// rarus agar 21.04.2021 17484 --

//// rarus tenkam 10.07.2019 mantis 14634 удалить по 14430 +++ 
//Функция ПолучитьПродуктПоИзделию(Изделие)
//	Возврат РегистрыСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.ПолучитьПродуктПоИзделию(Изделие);	
//КонецФункции
//// rarus tenkam 10.07.2019 mantis 14634 удалить по 14430 ---

// rarus tenkam 25.07.2018 mantis 13340 ---
