////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы (TLMS)
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя	= "TLMS";
	Описание.Версия = "1.2.23.02";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	//rarus FominskiyAS 17.02.2019  mantis 13863 +++
	//ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
	//	"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления");
	//
	//Для каждого Обработчик Из ОбработчикиСобытия Цикл
	//	Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Обработчик.Модуль.ПриДобавленииОбработчиковОбновления(Обработчики);
	//КонецЦикла;
	//rarus FominskiyAS 28.02.2019  mantis 13863 ---

	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.16.3";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;	
	
	//rarus sergei 28.06.2016 mantis 6976 ++	
	
	Обработчик = Обработчики.Добавить();
	//rarus tenkam 06.10.2016 mantis 7183 ++
	//Обработчик.Версия = "1.0.16.9";
	Обработчик.Версия = "1.0.16.14";	
	//rarus tenkam 06.10.2016 mantis 7183 --
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеСтатусыЗаявокНаДействие";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;	
	//rarus sergei 28.06.2016 mantis 6976 --
	
	
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.16.3";
	//Обработчик.Процедура = "Справочники.Scan_ГруппыПродуктов.ЗаполнитьПредопределенныеГруппыПродуктов";
	//Обработчик.НачальноеЗаполнение = Истина;

	// rarus agar 21.05.2021 16927 ++
	//ВариантыОтчетов.ДобавитьОбработчикиПолногоОбновления(Обработчики, "1.0.16.10"); 	//rarus tenkam 21.07.2016 mantis 7162 +
	// rarus agar 21.05.2021 16927 --
	
	//rarus tenkam 26.07.2016 mantis 7162 ++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.16.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьДополнительныеОтчетыИОбработки";
	//rarus tenkam 26.07.2016 mantis 7162 --
	
	//rarus sergei 08.08.2016 mantis 7100 ++	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.16.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеВидыТахографов";
	//rarus sergei 08.08.2016 mantis 7100 --
	
	//rarus sergei 29.09.2016 mantis 7162 ++	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.16.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеГруппыПродуктов";
	//rarus sergei 29.09.2016 mantis 7162 --
	
	//rarus tenkam 16.02.2017 mantis 7177 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.17.06";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеСтавкиНДС";
	//rarus tenkam 16.02.2017 mantis 7177 ---
	
	//rarus tenkam 16.02.2017 mantis 7177 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.17.29";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьКодыАдресовДоставки";
	//rarus tenkam 16.02.2017 mantis 7177 ---
	
	//rarus tenkam 04.10.2017 mantis 9426 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.17.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеКодыНеисправныхДеталей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.17.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеКодыДефектов"; 	
	//rarus tenkam 04.10.2017 mantis 9426 ---   
	
	//rarus tenkam 15.12.2017 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.17.51";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьИспользованиеНаборовСвойствИзделия"; 	
	//rarus tenkam 15.12.2017 ---

	//rarus tenkam 02.02.2018 mantis 12751 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.18.04";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	//rarus tenkam 02.02.2018 mantis 12751 ---

	//rarus tenkam 07.02.2018 mantis 12721 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.18.04";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеСервисныеОперации";
	//rarus tenkam 07.02.2018 mantis 12721 ---
	
	//rarus tenkam 21.03.2018 mantis 9428 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.18.08";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеВидыТахографов";
	//rarus tenkam 21.03.2018 mantis 9428 ---     		
	
	// rarus tenkam 08.04.2019 mantis 14308 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.19.06";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьНастройкиПроверкиМетодовОбменаС1БД";
	// rarus tenkam 08.04.2019 mantis 14308 ---
	
	//rarus BProg_Gladkov 17.12.2019 0015117 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.20.08"; //rarus bonmak 15.12.2020 добавил версию релиза
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьScan_EmailПользователяДляСогласованияДокументовПоЭлектроннойПочте";
	//rarus BProg_Gladkov 17.12.2019 0015117 ---
	
	//rarus ozhnik 06.01.2020 14927 ++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.20.08"; //rarus bonmak 15.12.2020 добавил версию релиза
	Обработчик.Процедура = "Справочники.Scan_Компании.ПереопределитьПредопределенныйЭлементСканияРусь";
	//rarus ozhnik 06.01.2020 14927 --
	
	//rarus agar 17.03.2020 mantis 15467 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.20.08"; //rarus bonmak 15.12.2020 добавил версию релиза
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПредопределенныеСоставляющиеРасчетаЦеныПродуктов";
	//rarus agar 17.03.2020 mantis 15467 ---
	
	//rarus BProg_Dekin 31.03.2020 mantis 0014560 ++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.20.08"; //rarus bonmak 15.12.2020 добавил версию релиза
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ЗаполнитьСогласованиеЗаводамиВУстановкеЦенКомпонентов";
	//rarus BProg_Dekin 31.03.2020 mantis 0014560 --
	
	//rarus ozhnik 16055 19.08.2020 + 
	////rarus agar 16.07.2020 mantis 16055 ++
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "*";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ЗаполнитьПараметрыВидимостиОбъектов";
	////rarus agar 16.07.2020 mantis 16055 --
	//rarus ozhnik 16055 19.08.2020 + 
	
	// rarus tenkam 17.08.2020 mantis 16422 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.20.08"; //rarus bonmak 15.12.2020 добавил версию релиза
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ОбновитьПризнакТягачШассиМодели";
	// rarus tenkam 17.08.2020 mantis 16422 ---
	
	// rarus tenkam 31.03.2021 mantis 17419 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.21.09";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ВыполнитьПроцедурыДляНачалаРаботыВалютнойОговорки";
	// rarus tenkam 31.03.2021 mantis 17419 ---
	
	// rarus tenkam 26.04.2021 mantis 17468 +++
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.21.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыTLMS.ВыполнитьПроцедурыДляНачалаРаботыИзмененияСпецификацииПоИнициативеЗавода";
	// rarus tenkam 26.04.2021 mantis 17468 ---
	
КонецПроцедуры                                                        

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
	
КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
		
//для Контактных лиц

	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактногоЛица;
    ПараметрыВида.Подсказка  = НСтр("ru='Рабочий телефон контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 1;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.ТелефонРабочий2КонтактногоЛица;
    ПараметрыВида.Подсказка  = НСтр("ru='Рабочий телефон контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 2;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийКонтактногоЛица;
    ПараметрыВида.Подсказка  = НСтр("ru='Домашний телефон контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 3;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
    ПараметрыВида.Подсказка  = НСтр("ru='Электронный адрес контактного лица'");
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	//ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ПараметрыВида.Порядок    = 4;
    ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.Email2КонтактногоЛица;
    ПараметрыВида.Подсказка  = НСтр("ru='Электронный адрес контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 5;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактногоЛица;
    ПараметрыВида.Подсказка  = НСтр("ru='Другая информация контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 6;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

//для Контрагентов
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
    ПараметрыВида.Подсказка  = НСтр("ru='Юридический адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 1;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
    ПараметрыВида.Подсказка  = НСтр("ru='Фактический адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 2;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
    ПараметрыВида.Подсказка  = НСтр("ru='Телефон контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 3;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
    ПараметрыВида.Подсказка    = НСтр("ru='Электронная почта контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 4;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
    ПараметрыВида.Подсказка  = НСтр("ru='Факт контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок    = 5;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	//rarus tenkam 02.02.2018 mantis 12751 +++
//для Пользователей
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
    ПараметрыВида.Вид        = Справочники.ВидыКонтактнойИнформации.АдресРабочегоМестаПользователя;
    ПараметрыВида.Подсказка  = НСтр("ru='Адрес рабочего места пользователя для подстановки в подпись электронного письма'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Ложь;
	ПараметрыВида.Порядок    = 3;
	//ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	//rarus tenkam 02.02.2018 mantis 12751 ---

КонецПроцедуры

//rarus BProg_Gladkov 17.12.2019 0015117 +++ 

Процедура ОбновитьScan_EmailПользователяДляСогласованияДокументовПоЭлектроннойПочте(ПараметрыВыполнения = Неопределено) Экспорт
	//для Пользователей
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид       = Справочники.ВидыКонтактнойИнформации.Scan_EmailПользователяДляСогласованияДокументовПоЭлектроннойПочте;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	Возврат;
КонецПроцедуры
//rarus BProg_Gladkov 17.12.2019 0015117 ---

//rarus sergei 28.06.2016 mantis 6976 ++
Процедура ОбновитьПредопределенныеСтатусыЗаявокНаДействие() Экспорт
	
	Справочники.Scan_СтатусыЗаявокНаДействие.ВыполнитьНачальноеЗаполнение();
	
КонецПроцедуры
//rarus sergei 28.06.2016 mantis 6976 --

//rarus tenkam 26.07.2016 mantis 7162 ++
// Конвертация имен разделов на ссылки справочника ИОМ 
// для подсистемы "Дополнительные отчеты и обработки".
//
Процедура ОбновитьДополнительныеОтчетыИОбработки() Экспорт
	СоответствиеИменКомандРазделам = Новый Соответствие;
	
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОтчетыРабочийСтол", 
		ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола());
	
	//СоответствиеИменКомандРазделам.Вставить(
	//	"Scan_ДополнительныеОтчетыАдминистрирования", 
	//	Метаданные.Подсистемы.Администрирование);
	
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОтчетыНСИ", 
		Метаданные.Подсистемы.Scan_НСИ);
	
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОтчетыОтделаАдминистрирования", 
		Метаданные.Подсистемы.Scan_ОтделКлиентскойПоддержки);//rarus vikhle 18.06.2020 mt 15695 изменил имя подсистемы на актуальное
	
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОтчетыОтделаЛогистики", 
		Метаданные.Подсистемы.Scan_ОтделЛогистики);
	
	СоответствиеИменКомандРазделам.Вставить(
	"Scan_ДополнительныеОтчетыОтделаПланирования", 
	Метаданные.Подсистемы.Scan_ОтделПланирования);
	
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОбработкиНСИ", 
		Метаданные.Подсистемы.Scan_НСИ);
		
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОбработкиРабочийСтол", 
		ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола());
	
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОбработкиОтделаАдминистрирования", 
		Метаданные.Подсистемы.Scan_ОтделКлиентскойПоддержки);//rarus vikhle 18.06.2020 mt 15695 изменил имя подсистемы на актуальное
	
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОбработкиОтделаЛогистики", 
		Метаданные.Подсистемы.Scan_ОтделЛогистики);
	
	СоответствиеИменКомандРазделам.Вставить(
		"Scan_ДополнительныеОбработкиОтделаПланирования", 
		Метаданные.Подсистемы.Scan_ОтделПланирования);
	
	ДополнительныеОтчетыИОбработки.ЗаменитьИменаРазделовНаИдентификаторы(СоответствиеИменКомандРазделам);
КонецПроцедуры
//rarus tenkam 26.07.2016 mantis 7162 --

//rarus sergei 08.08.2016 mantis 7100 ++
Процедура ОбновитьПредопределенныеВидыТахографов() Экспорт
	
	Справочники.Scan_ВидыТахографов.ВыполнитьНачальноеЗаполнение();
	
КонецПроцедуры
//rarus sergei 08.08.2016 mantis 7100 --

////rarus sergei 29.09.2016 mantis 7162 ++
Процедура ОбновитьПредопределенныеГруппыПродуктов() Экспорт

	Справочники.Scan_ГруппыПродуктов.ВыполнитьНачальноеЗаполнение();

КонецПроцедуры
////rarus sergei 29.09.2016 mantis 7162 --

//rarus tenkam 16.02.2017 mantis 7177 +++
Процедура ОбновитьПредопределенныеСтавкиНДС() Экспорт
	ТекОбъект = Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС.ПолучитьОбъект();
	ТекОбъект.Ставка = 18;
	Попытка
		ТекОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	ТекОбъект = Справочники.Scan_СтавкиНДС.БезНДС.ПолучитьОбъект();
	ТекОбъект.Ставка = 0;
	Попытка
		ТекОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры
//rarus tenkam 16.02.2017 mantis 7177 ---

//rarus tenkam 28.07.2017 mantis 10271 +++
Процедура ОбновитьКодыАдресовДоставки() Экспорт
	// Получим все возможные коды адресов доставки	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаказыНаЗавод.КодАдресаДоставки
		|ИЗ
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаказыНаЗавод.КодАдресаДоставки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЗнч(ВыборкаДетальныеЗаписи.КодАдресаДоставки) = Тип("Строка") Тогда
			ТекКодАдресаДоставки = СокрЛП(ВыборкаДетальныеЗаписи.КодАдресаДоставки);
			Если ТекКодАдресаДоставки = "" Тогда
				Продолжить;
			КонецЕсли;
			НайденныйКод = Справочники.Scan_КодыАдресовДоставки.НайтиПоНаименованию(ТекКодАдресаДоставки);
			Если НЕ ЗначениеЗаполнено(НайденныйКод) Тогда
				// Добавим код в справочник
				НовыйЭлемент = Справочники.Scan_КодыАдресовДоставки.СоздатьЭлемент();
				НовыйЭлемент.Наименование = ТекКодАдресаДоставки;
				НовыйЭлемент.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Запрос2 = Новый Запрос;
	//Запрос2.Текст = 
	//	"ВЫБРАТЬ
	//	|	Scan_ЗаказыНаЗавод.Ссылка,
	//	|	Scan_ЗаказыНаЗавод.КодАдресаДоставки
	//	|ИЗ
	//	|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод";
	//
	//РезультатЗапроса2 = Запрос2.Выполнить();
	//
	//ВыборкаДетальныеЗаписи2 = РезультатЗапроса2.Выбрать();  	
	//Пока ВыборкаДетальныеЗаписи2.Следующий() Цикл
	//	Если ТипЗнч(ВыборкаДетальныеЗаписи2.КодАдресаДоставки) = Тип("Строка") И СокрЛП(ВыборкаДетальныеЗаписи2.КодАдресаДоставки) <> ""Тогда
	//		ТекКодАдресаДоставки = СокрЛП(ВыборкаДетальныеЗаписи2.КодАдресаДоставки);
	//		НайденныйКод = Справочники.Scan_КодыАдресовДоставки.НайтиПоНаименованию(ТекКодАдресаДоставки);
	//		Если ЗначениеЗаполнено(НайденныйКод) Тогда
	//			// Перезапишем на ссылку
	//			ТекОбъект = ВыборкаДетальныеЗаписи2.Ссылка.ПолучитьОбъект();
	//			ТекОбъект.КодАдресаДоставки = НайденныйКод;
	//			Попытка
	//				ТекОбъект.Записать();
	//			Исключение
	//			КонецПопытки;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;                                                                    
	
КонецПроцедуры
//rarus tenkam 28.07.2017 mantis 10271 ---

//rarus tenkam 04.10.2017 mantis 9426 +++
Процедура ОбновитьПредопределенныеКодыНеисправныхДеталей() Экспорт
	ТекОбъект = Справочники.Scan_КодыНеисправныхДеталей.Изделие.ПолучитьОбъект();
	ТекОбъект.КодДетали = "ZZ";
	Попытка
		ТекОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	ТекОбъект = Справочники.Scan_КодыНеисправныхДеталей.Прочее.ПолучитьОбъект();
	ТекОбъект.КодДетали = "XX";
	Попытка
		ТекОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура ОбновитьПредопределенныеКодыДефектов() Экспорт
	ТекОбъект = Справочники.Scan_КодыДефектов.НОРМА.ПолучитьОбъект();
	ТекОбъект.КодДефекта = "Z";
	Попытка
		ТекОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	ТекОбъект = Справочники.Scan_КодыДефектов.Прочее.ПолучитьОбъект();
	ТекОбъект.КодДефекта = "X";
	Попытка
		ТекОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры
//rarus tenkam 04.10.2017 mantis 9426 ---

//rarus tenkam 15.12.2017 +++
Процедура ОбновитьИспользованиеНаборовСвойствИзделия() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Истина;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Scan_Изделия", ПараметрыНабора);
	
КонецПроцедуры
//rarus tenkam 15.12.2017 ---

//rarus tenkam 07.02.2018 mantis 12721 +++
Процедура ОбновитьПредопределенныеСервисныеОперации() Экспорт
	
	// АКБ 1
	ТекОбъект = Справочники.Scan_СервисныеОперации.ПроверитьУровеньЗаряженностиАккумуляторныхБатареи1.ПолучитьОбъект();
	ТекОбъект.ИспользуетсяПриКонтролеТехническогоСостояния = Истина;
	ТекОбъект.ПорядокАКБ = 1;
	Попытка
		ТекОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
	КонецПопытки;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СоставляющиеСервисныхОпераций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_СоставляющиеСервисныхОпераций КАК Scan_СоставляющиеСервисныхОпераций
		|ГДЕ
		|	Scan_СоставляющиеСервисныхОпераций.Код = ""100000001""
		|	И Scan_СоставляющиеСервисныхОпераций.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ТекОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Емкость";
		ТекСоставляющая.Код = "100000001";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;
		
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Плотность";
		ТекСоставляющая.Код = "100000002";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;
		
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Пусковой ток";
		ТекСоставляющая.Код = "100000003";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;
		
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Напряжение без нагрузки";
		ТекСоставляющая.Код = "100000004";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;      		
		
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Напряжение под нагрузкой";
		ТекСоставляющая.Код = "100000005";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;

	КонецЕсли;
	
	// АКБ 2 
	ТекОбъект = Справочники.Scan_СервисныеОперации.ПроверитьУровеньЗаряженностиАккумуляторныхБатареи2.ПолучитьОбъект();
	ТекОбъект.ИспользуетсяПриКонтролеТехническогоСостояния = Истина;
	ТекОбъект.ПорядокАКБ = 2;
	Попытка
		ТекОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СоставляющиеСервисныхОпераций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_СоставляющиеСервисныхОпераций КАК Scan_СоставляющиеСервисныхОпераций
		|ГДЕ
		|	Scan_СоставляющиеСервисныхОпераций.Код = ""200000001""
		|	И Scan_СоставляющиеСервисныхОпераций.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ТекОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Емкость";
		ТекСоставляющая.Код = "200000001";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;
		
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Плотность";
		ТекСоставляющая.Код = "200000002";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;
		
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Пусковой ток";
		ТекСоставляющая.Код = "200000003";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;
		
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Напряжение без нагрузки";
		ТекСоставляющая.Код = "200000004";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;  		
		
		ТекСоставляющая = Справочники.Scan_СоставляющиеСервисныхОпераций.СоздатьЭлемент();
		ТекСоставляющая.Владелец = ТекОбъект.Ссылка;
		ТекСоставляющая.Наименование = "Напряжение под нагрузкой";
		ТекСоставляющая.Код = "200000005";
		Попытка
			ТекСоставляющая.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка создания подчиненного элемента <%1>: %2'"),,,,, ТекОбъект, ОписаниеОшибки());
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры
//rarus tenkam 07.02.2018 mantis 12721 ---

//rarus tenkam 08.04.2019 mantis 14308 +++
Процедура ОбновитьНастройкиПроверкиМетодовОбменаС1БД() Экспорт
	НаборЗаписей = РегистрыСведений.Scan_Обмен1БДНастройкиПроверкиМетодов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.ВидЗапроса.Установить(ДанныеСтроки.ВидЗапроса);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfProductMark; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	//НоваяЗапись.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetProductMark; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfProductGroup; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetProductGroup;//rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfProductType; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetProductType;  //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfProductSubType; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetProductSubType;//rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfProductModel; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetProductModel; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfSpecifications; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetSpecification;  //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetChassis;  //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfProduct; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetProduct;  //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfOrderToDelivery; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetOrderToDelivery;  //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfDealers; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetDealers; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfContragents;//rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetContragents; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfManufacturers; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetManufacturers;  //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetListOfSOP;  //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗапроса = Справочники.Scan_ВидыЗапроса.GetSOP; //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
	НоваяЗапись.Проверять = Истина;

	НаборЗаписей.Записать();	
	
КонецПроцедуры
//rarus tenkam 08.04.2019 mantis 14308 ---

//rarus agar 17.03.2020 mantis 15467 +++
Процедура ОбновитьПредопределенныеСоставляющиеРасчетаЦеныПродуктов(ПараметрыВыполнения = Неопределено) Экспорт //rarus bonmak 25.03.2020 15885 добавил параметр
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК Составляющая
	|ИЗ
	|	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
	|ГДЕ
	|	НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ЭтоГруппа
	|	И Scan_СоставляющиеРасчетаЦеныПродуктов.Предопределенный
	|	И Scan_СоставляющиеРасчетаЦеныПродуктов.ТипСоставляющейЦены = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоставляющаяОбъект = Выборка.Составляющая.ПолучитьОбъект();  			
			
			Если СоставляющаяОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.КоэффициентыДляЦеныНаДилера") Тогда
				СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.КоэффициентДляЦеныDealerNet");
			ИначеЕсли СоставляющаяОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.КоэффициентыДляЦеныНаКлиента") Тогда
				СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.КоэффициентДляЦеныRetailPrice"); 			
			ИначеЕсли СоставляющаяОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.РасчетныеСоставляющие") Тогда
				СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
			ИначеЕсли СоставляющаяОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.НерасчетныеСоставляющие") Тогда
				СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.НерасчетнаяСоставляющая");
			ИначеЕсли СоставляющаяОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ИтоговыеЦены") Тогда
				СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
			// rarus tenkam 03.08.2020 mantis 16181 +++
			ИначеЕсли СоставляющаяОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СкидкиНаценки") Тогда
				Если Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Цена Dealer net со скидкой";
					СоставляющаяОбъект.Идентификатор = "ЦенаDealerNetСоСкидкой";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле");
					// rarus tenkam 01.04.2021 mantis 17419 +++
					//СоставляющаяОбъект.ФормулаРасчета = "ЦенаНаДилераВклНДСПТС-СкидкаСУDealerNet-ДрайвDealerNet+ЛогистическиеЗатраты-Компенсация";	      
					СоставляющаяОбъект.ФормулаРасчета = "ЦенаНаДилераВклНДСПТС-СкидкаСУDealerNet-РазницаПоВалютнойОговорке-ДрайвDealerNet+ЛогистическиеЗатраты-Компенсация";	      
					// rarus tenkam 01.04.2021 mantis 17419 ---
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 999;	
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаRetailPriceСоСкидкой") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Цена Retail price со скидкой";
					СоставляющаяОбъект.Идентификатор = "ЦенаRetailPriceСоСкидкой";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле");
					СоставляющаяОбъект.ФормулаРасчета = "ЦенаНаКлиентаВклНДСПТС-СкидкаСУRetailPrice-ДрайвRetailPrice";
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 998;					
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet") Тогда
					СоставляющаяОбъект.НаименованиеРус = "СУ Dealer net";
					СоставляющаяОбъект.Идентификатор = "СУDealerNet";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную");
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУRetailPrice") Тогда
					СоставляющаяОбъект.НаименованиеРус = "СУ Retail price";
					СоставляющаяОбъект.Идентификатор = "СУRetailPrice";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную");
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СкидкаСУDealerNet") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Скидка СУ Dealer net";
					СоставляющаяОбъект.Идентификатор = "СкидкаСУDealerNet";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле");
					СоставляющаяОбъект.ФормулаРасчета = "ЦенаНаДилераВклНДСПТС-СУDealerNet";
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 990;							
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СкидкаСУRetailPrice") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Скидка СУ Retail price";
					СоставляющаяОбъект.Идентификатор = "СкидкаСУRetailPrice";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле");
					СоставляющаяОбъект.ФормулаРасчета = "ЦенаНаКлиентаВклНДСПТС-СУRetailPrice";
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 991;					
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ДрайвDealerNet") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Драйв Dealer net";
					СоставляющаяОбъект.Идентификатор = "ДрайвDealerNet";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле");
					// rarus tenkam 01.04.2021 mantis 17419 +++
					//СоставляющаяОбъект.ФормулаРасчета = "СУDealerNet*ПроцентДрайва/100";
					СоставляющаяОбъект.ФормулаРасчета = "ЦенаПоВалютнойОговорке*ПроцентДрайва/100";
					// rarus tenkam 01.04.2021 mantis 17419 ---
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 992;					
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ДрайвRetailPrice") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Драйв Retail price";
					СоставляющаяОбъект.Идентификатор = "ДрайвRetailPrice";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле");
					СоставляющаяОбъект.ФормулаРасчета = "СУRetailPrice*ПроцентДрайва/100";
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 993;					
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ПроцентДрайва") Тогда
					СоставляющаяОбъект.НаименованиеРус = "% драйва";
					СоставляющаяОбъект.Идентификатор = "ПроцентДрайва";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную");
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЛогистическиеЗатраты") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Логистические затраты";
					СоставляющаяОбъект.Идентификатор = "ЛогистическиеЗатраты";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную");
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.Компенсация") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Компенсация";
					СоставляющаяОбъект.Идентификатор = "Компенсация";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную");
				// rarus tenkam 01.04.2021 mantis 17419 +++
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаПоВалютнойОговорке") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Цена по валютной оговорке";
					СоставляющаяОбъект.Идентификатор = "ЦенаПоВалютнойОговорке";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 814;
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную");
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.РазницаПоВалютнойОговорке") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Разница по валютной оговорке";
					СоставляющаяОбъект.Идентификатор = "РазницаПоВалютнойОговорке";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле");
					СоставляющаяОбъект.ФормулаРасчета = "СУDealerNet-ЦенаПоВалютнойОговорке";
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 989;				
				// rarus tenkam 01.04.2021 mantis 17419 ---	
				КонецЕсли;
			// rarus tenkam 03.08.2020 mantis 16181 ---
			КонецЕсли; 
			
			Попытка
				СоставляющаяОбъект.Записать();
			Исключение
				ВывестиСообщениеПол(НСтр("ru = 'Ошибка заполнения типа составляющей расчета цены продуктов <%1>: %2'"),,,,, СоставляющаяОбъект, ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	
//rarus agar 17.03.2020 mantis 15467 ---

//rarus BProg_Dekin 31.03.2020 mantis 0014560 ++
Процедура ЗаполнитьСогласованиеЗаводамиВУстановкеЦенКомпонентов(ПараметрыВыполнения = Неопределено) Экспорт
	Реквизит_УдалитьЗавод_Существует = Метаданные.Документы.Scan_УстановкаЦенКомпонентов.Реквизиты.Найти("УдалитьЗавод") <> Неопределено;	
	Если НЕ Реквизит_УдалитьЗавод_Существует Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_УстановкаЦенКомпонентовСогласованиеЗаводами.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ втДокументыСЗаполненнымиСогласованиями
	               |ИЗ
	               |	Документ.Scan_УстановкаЦенКомпонентов.СогласованиеЗаводами КАК Scan_УстановкаЦенКомпонентовСогласованиеЗаводами
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_УстановкаЦенКомпонентов.Ссылка КАК Ссылка,
	               |	Scan_УстановкаЦенКомпонентов.УдалитьЗавод КАК УдалитьЗавод,
	               |	Scan_УстановкаЦенКомпонентов.ЗапросСогласованЗаводами КАК ЗапросСогласованЗаводами
	               |ИЗ
	               |	Документ.Scan_УстановкаЦенКомпонентов КАК Scan_УстановкаЦенКомпонентов
	               |ГДЕ
	               |	НЕ Scan_УстановкаЦенКомпонентов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					втДокументыСЗаполненнымиСогласованиями.Ссылка КАК Ссылка
	               |				ИЗ
	               |					втДокументыСЗаполненнымиСогласованиями КАК втДокументыСЗаполненнымиСогласованиями)
	               |	И Scan_УстановкаЦенКомпонентов.УдалитьЗавод <> ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ДокументОбъект.СогласованиеЗаводами.Добавить();
		НоваяСтрока.Согласовано = Выборка.ЗапросСогласованЗаводами;
		НоваяСтрока.Завод		= Выборка.УдалитьЗавод;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи документа <%1>: %2'; en = 'Error writing document <%1>: %2'"),,,,, ДокументОбъект, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры
//rarus BProg_Dekin 31.03.2020 mantis 0014560 --

//rarus agar 16.07.2020 mantis 16055 ++
Процедура ЗаполнитьПараметрыВидимостиОбъектов() Экспорт
	
	ДвоичныеДанныеМакета = РегистрыСведений.Scan_ПараметрыВидимостиОбъектов.ПолучитьМакет("ПоставляемыеПараметры");
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеМакета, Новый УникальныйИдентификатор);
	
	Scan_ПараметрыВидимостиОбъектовСервер.ЗагрузитьПараметрыИзФайлаВХранилище(АдресФайлаВХранилище);
	
КонецПроцедуры
//rarus agar 16.07.2020 mantis 16055 --

Процедура ОбновитьПризнакТягачШассиМодели(ПараметрыВыполнения = Неопределено) Экспорт //rarus tenkam 17.08.2020 mantis 16422 +++ 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_МоделиПродуктов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_МоделиПродуктов КАК Scan_МоделиПродуктов
		|ГДЕ
		|	Scan_МоделиПродуктов.ТягачШасси = ЗНАЧЕНИЕ(Перечисление.Scan_ПризнакТягачШасси.ПустаяСсылка)
		|	И Scan_МоделиПродуктов.МаркаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_МаркиПродуктов.Scania)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МодельОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			МодельОбъект.Записать();
		Исключение
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка заполнения признака Тягач/Шасси для модели <%1>: %2'"),,,,, МодельОбъект, ОписаниеОшибки());
		КонецПопытки;		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПроцедурыДляНачалаРаботыВалютнойОговорки(ПараметрыВыполнения = Неопределено) Экспорт	// rarus tenkam 01.04.2021 mantis 17419 +++
	                                                                              	
	// Обновим составляющие расчета	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК Составляющая
	               |ИЗ
	               |	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
	               |ГДЕ
	               |	НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ЭтоГруппа
	               |	И Scan_СоставляющиеРасчетаЦеныПродуктов.Предопределенный";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоставляющаяОбъект = Выборка.Составляющая.ПолучитьОбъект();  			
			
			Если  СоставляющаяОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СкидкиНаценки") Тогда
				Если Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой") Тогда
					СоставляющаяОбъект.ФормулаРасчета = "ЦенаНаДилераВклНДСПТС-СкидкаСУDealerNet-РазницаПоВалютнойОговорке-ДрайвDealerNet+ЛогистическиеЗатраты-Компенсация";	      
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ДрайвDealerNet") Тогда
					СоставляющаяОбъект.ФормулаРасчета = "ЦенаПоВалютнойОговорке*ПроцентДрайва/100";
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаПоВалютнойОговорке") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Цена по валютной оговорке";
					СоставляющаяОбъект.Идентификатор = "ЦенаПоВалютнойОговорке";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 814;
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную");
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.РазницаПоВалютнойОговорке") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Разница по валютной оговорке";
					СоставляющаяОбъект.Идентификатор = "РазницаПоВалютнойОговорке";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле");
					СоставляющаяОбъект.ФормулаРасчета = "СУDealerNet-ЦенаПоВалютнойОговорке";
					СоставляющаяОбъект.НомерСтрокиКалькуляции = 989;				
				КонецЕсли;
			КонецЕсли; 
			
			Попытка
				СоставляющаяОбъект.Записать();
			Исключение
				ВывестиСообщениеПол(НСтр("ru = 'Ошибка заполнения типа составляющей расчета цены продуктов <%1>: %2'"),,,,, СоставляющаяОбъект, ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;	
	
	// Исправим документы установки плановых цен, чтобы при их корректировке корректно велся учет
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки.Ссылка КАК ДокументУстановкиЦен,
		|	Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки.СоставляющаяЦены КАК СоставляющаяЦены,
		|	Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки.ЦенаСНДС КАК ЦенаСНДС,
		|	Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки.ЦенаБезНДС КАК ЦенаБезНДС,
		|	Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Документ.Scan_УстановкаПлановыхЦенПродукта.СкидкиНаценки КАК Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки
		|ГДЕ
		|	Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки.СоставляющаяЦены = &СоставляющаяЦены
		|	И Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки.Ссылка.Проведен = ИСТИНА
		|	И Scan_УстановкаПлановыхЦенПродуктаСкидкиНаценки.Ссылка.ДокументОтменен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СоставляющаяЦены", ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.ДокументУстановкиЦен.ПолучитьОбъект();
		
		СтрокаЦенаПоВалютнойОговорке = ДокументОбъект.СкидкиНаценки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаЦенаПоВалютнойОговорке, ВыборкаДетальныеЗаписи);
		СтрокаЦенаПоВалютнойОговорке.СоставляющаяЦены = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаПоВалютнойОговорке");
		СтрокаЦенаПоВалютнойОговорке.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗаписьЖурналаРегистрации("КорректировкаДокументовПоУстановкеЦен",,,,ОписаниеОшибки());	
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры // rarus tenkam 01.04.2021 mantis ---

Процедура ВыполнитьПроцедурыДляНачалаРаботыИзмененияСпецификацииПоИнициативеЗавода(ПараметрыВыполнения = Неопределено) Экспорт	// rarus tenkam 16.04.2021 mantis 17648 +++
	                                                                              	
	// Обновим составляющие расчета	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК Составляющая
	               |ИЗ
	               |	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
	               |ГДЕ
	               |	НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ЭтоГруппа
	               |	И Scan_СоставляющиеРасчетаЦеныПродуктов.Предопределенный";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоставляющаяОбъект = Выборка.Составляющая.ПолучитьОбъект();  			
			
			Если  СоставляющаяОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СкидкиНаценки") Тогда
				Если Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой") Тогда
					СоставляющаяОбъект.ФормулаРасчета = "ЦенаНаДилераВклНДСПТС-СкидкаСУDealerNet-РазницаПоВалютнойОговорке-ДрайвDealerNet+ЛогистическиеЗатраты-Компенсация+ИзменениеСпецификацииПоИнициативеЗавода";	      
				ИначеЕсли Выборка.Составляющая = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ИзменениеСпецификацииПоИнициативеЗавода") Тогда
					СоставляющаяОбъект.НаименованиеРус = "Изменение спецификации по инициативе завода";
					СоставляющаяОбъект.Идентификатор = "ИзменениеСпецификацииПоИнициативеЗавода";
					СоставляющаяОбъект.ТипСоставляющейЦены = ПредопределенноеЗначение("Перечисление.Scan_ТипыСоставляющихРасчетаСоставляющихЦены.РасчетнаяСоставляющая");
					СоставляющаяОбъект.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную");
				КонецЕсли;
			КонецЕсли; 
			
			Попытка
				СоставляющаяОбъект.Записать();
			Исключение
				ВывестиСообщениеПол(НСтр("ru = 'Ошибка заполнения типа составляющей расчета цены продуктов <%1>: %2'"),,,,, СоставляющаяОбъект, ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;	
		
КонецПроцедуры // rarus tenkam 01.04.2021 mantis 17648 ---

