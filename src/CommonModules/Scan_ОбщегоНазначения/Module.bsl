////////////////////////////////////////////////////////////////////////////////
// TLMS.
// 
// Процедуры и функции общего назначения.
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ СЕАНСА

// Серверный этап инициализации подсистемы Scan
//
&НаСервере
Процедура Scan_ИнициализацияСеансаСервер(ДопПараметры = Неопределено) ЭКСПОРТ
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	//ДопПараметры.Вставить("СостояниеСистемыЗащиты", Новый Структура("РезультатыЗапуска,Ошибка", Новый Массив, ЛОЖЬ));
	ДопПараметры.Вставить("ОшибкаСистемыЗащиты", Ложь);
	ДопПараметры.Вставить("РазрешитьРаботуСПрограммой", Истина);
	ДопПараметры.Вставить("НеобходимоВыполнитьОбновление", Ложь);
	ДопПараметры.Вставить("ОшибкаИнициализацииСервер", Ложь);
	ДопПараметры.Вставить("ПодсистемаScanИнициализирована", ПроверитьПодсистемаScanИнициализирована());
	
	Если НЕ ДопПараметры.ПодсистемаScanИнициализирована Тогда
	//	
	//	Если уатОбщегоНазначенияПовтИсп.ЭтоОбъединеннаяКонфигурация() И уатОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазыУАТ() Тогда 
	//		ДопПараметры.Вставить("НеобходимоВыполнитьОбновление", Истина);
	//		ДопПараметры.Вставить("ОшибкаИнициализацииСервер", Истина);
	//		Возврат;
	//	КонецЕсли;
		
		// Инициализация системы прав и настроек
		ИнициализироватьПраваИНастройки();
		
		//// Инициализация права "Разрешить работу с УАТ"
		//Если уатОбщегоНазначенияПовтИсп.ЭтоОбъединеннаяКонфигурация() Тогда
		//	ОбновитьПравоДоступРазрешитьРаботуСУАТ();
		//КонецЕсли;
		//
		//// Инициализация права "Разрешить работу с УЭ"
		//Если уатОбщегоНазначенияПовтИсп.ОбъединеннаяКонфигурацияМодульЛогистики() Тогда
		//	ОбновитьПравоДоступРазрешитьРаботуСУЭ();
		//КонецЕсли;
		//
		// Проверка разрешения работы с программой
		//Если уатОбщегоНазначенияПовтИсп.ЭтоОбъединеннаяКонфигурация() Тогда
		//	РазрешитьРаботуСПрограммой = уатПраваИНастройки.уатПраво("РазрешитьРаботуСУАТ");
		//Иначе
			РазрешитьРаботуСПрограммой = Scan_ПраваИНастройки.Scan_Право("РазрешитьРаботуСПрограммой");
		//КонецЕсли;
		РазрешитьРаботуСПрограммой = ?(РазрешитьРаботуСПрограммой = Неопределено, Ложь, РазрешитьРаботуСПрограммой);
		Если НЕ РазрешитьРаботуСПрограммой Тогда
			ДопПараметры.Вставить("РазрешитьРаботуСПрограммой", РазрешитьРаботуСПрограммой);
			ДопПараметры.Вставить("ОшибкаИнициализацииСервер", Истина);
			Возврат;
		КонецЕсли;
		
		//ЛицензированиеСлужебный.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(ДопПараметры);
		//Если ОшибкаСистемыЗащиты(ДопПараметры) Тогда
		//	ОписаниеОшибки = "";
		//	ЛицензированиеСервер.ЗавершениеРаботыСистемыЛицензирования(ОписаниеОшибки);
		//	ДопПараметры.Вставить("ОшибкаСистемыЗащиты", Истина);
		//	ДопПараметры.Вставить("ОшибкаИнициализацииСервер", Истина);
		//	Возврат;
		//КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Инициализация системы прав и настроек
//
&НаСервере
Функция ИнициализироватьПраваИНастройки() Экспорт
	Попытка
		Объект = ПланыВидовХарактеристик.Scan_ПраваИНастройки.СоздатьЭлемент();
		Объект.ИнициализироватьПраваИНастройки();
		Объект.ПроверитьПраваДоступа();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Обновление права "Разрешить работу с УАТ". 
// Нужно обновлять, когда право есть, но назначение его не указано
// Если назначение не будет указано, то значение по умолчанию не будет получено.
//
&НаСервере
Процедура ОбновитьПравоДоступРазрешитьРаботуСУАТ()
	
	//Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	//
	//Если РольДоступна("АдминистраторСистемы") ИЛИ ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "" Тогда
	//	ПВХ_Scan_ПраваИНастройки = ПланыВидовХарактеристик.Scan_ПраваИНастройки;
	//	РазрешитьРаботуСУАТ = ПВХ_Scan_ПраваИНастройки.НайтиПоНаименованию("Разрешить работу с УАТ");
	//	Если НЕ РазрешитьРаботуСУАТ.Пустая() И РазрешитьРаботуСУАТ.Назначение.Пустая() Тогда
	//		
	//		РазрешитьРаботуСУАТОбъект = РазрешитьРаботуСУАТ.ПолучитьОбъект();
	//		РазрешитьРаботуСУАТОбъект.Назначение = Перечисления.Scan_НазначениеПравИНастроек.Пользователь;
	//		РазрешитьРаботуСУАТОбъект.ЗначениеПоУмолчанию = Ложь;
	//		
	//		Попытка
	//			РазрешитьРаботуСУАТОбъект.Записать();
	//			ТекЗаписьПрава = РегистрыСведений.Scan_ПраваИНастройки.СоздатьМенеджерЗаписи();
	//			ТекЗаписьПрава.Объект = Пользователь;
	//			ТекЗаписьПрава.ПравоНастройка = РазрешитьРаботуСУАТ;
	//			ТекЗаписьПрава.Прочитать();
	//			Если НЕ ТекЗаписьПрава.Выбран() Тогда
	//				ТекЗаписьПрава.Объект = Пользователь;
	//				ТекЗаписьПрава.ПравоНастройка = РазрешитьРаботуСУАТ;
	//				ТекЗаписьПрава.Значение = Истина;
	//				ТекЗаписьПрава.Записать();
	//			КонецЕсли;
	//			Сообщить("Обновлено право <" + РазрешитьРаботуСУАТОбъект + ">", СтатусСообщения.Информация);
	//		Исключение
	//		КонецПопытки;
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

// Обновление права "Разрешить работу с УЭ"
// Нужно обновлять, когда право есть, но назначение его не указано
// Если назначение не будет указано, то значение по умолчанию не будет получено.
//
&НаСервере
Процедура ОбновитьПравоДоступРазрешитьРаботуСУЭ()
	
	//Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	//
	//Если РольДоступна("АдминистраторСистемы") ИЛИ ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "" Тогда
	//	ПВХ_Scan_ПраваИНастройки = ПланыВидовХарактеристик.Scan_ПраваИНастройки;
	//	РазрешитьРаботуСУАТ = ПВХ_Scan_ПраваИНастройки.НайтиПоНаименованию("Разрешить работу с УАТ");
	//	Если НЕ РазрешитьРаботуСУАТ.Пустая() И РазрешитьРаботуСУАТ.Назначение.Пустая() Тогда
	//		
	//		РазрешитьРаботуСУАТОбъект = РазрешитьРаботуСУАТ.ПолучитьОбъект();
	//		РазрешитьРаботуСУАТОбъект.Назначение = Перечисления.Scan_НазначениеПравИНастроек.Пользователь;
	//		РазрешитьРаботуСУАТОбъект.ЗначениеПоУмолчанию = Ложь;
	//		
	//		Попытка
	//			РазрешитьРаботуСУАТОбъект.Записать();
	//			ТекЗаписьПрава = РегистрыСведений.Scan_ПраваИНастройки.СоздатьМенеджерЗаписи();
	//			ТекЗаписьПрава.Объект = Пользователь;
	//			ТекЗаписьПрава.ПравоНастройка = РазрешитьРаботуСУАТ;
	//			ТекЗаписьПрава.Прочитать();
	//			Если НЕ ТекЗаписьПрава.Выбран() Тогда
	//				ТекЗаписьПрава.Объект = Пользователь;
	//				ТекЗаписьПрава.ПравоНастройка = РазрешитьРаботуСУАТ;
	//				ТекЗаписьПрава.Значение = Истина;
	//				ТекЗаписьПрава.Записать();
	//			КонецЕсли;
	//			Сообщить("Обновлено право <" + РазрешитьРаботуСУАТОбъект + ">", СтатусСообщения.Информация);
	//		Исключение
	//		КонецПопытки;
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

// Проверяет, что подсистема Scan инициализирована
//
&НаСервере
Функция ПроверитьПодсистемаScanИнициализирована() Экспорт
	Попытка
		ПодсистемаScanИнициализирована = ПараметрыСеанса.Scan_ПодсистемаИнициализирована;
		Возврат ПодсистемаScanИнициализирована;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Выполняет установку параметра сеанса "Подсистема Scan инициализирована"
//
&НаСервере
Процедура УстановитьПодсистемаScanИнициализирована() Экспорт
	ПараметрыСеанса.Scan_ПодсистемаИнициализирована = Истина;
КонецПроцедуры

// Проверяет наличие у пользователя минимально необходимого набора ролей для запуска системы
//
&НаСервере
Функция КонтрольМинимальногоНабораРолейДляЗапускаСистемы() Экспорт
	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("БазовыеПрава") И ПравоДоступа("Использование", Метаданные.Обработки.УправлениеЛицензированием);
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ

// Процедура выполняет проверку переданного значения на заполненность

// Параметры:
//  Значение     - проверяемое значение

// Возвращаемое значение:
//  Результат проверки
Функция Scan_ЗначениеНеЗаполнено(Значение) Экспорт
	Попытка
		Возврат НЕ ЗначениеЗаполнено(Значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Сравнивает строки версий конфигураций и возвращает вид сравнения: больше, меньше или равны
Функция уатСравнитьВерсииКонфигурации(Версия1, Версия2) Экспорт
	ВидСравненияВерсий = ВидСравнения.Равно;
	
	ВерсияВрем1 = Версия1;
	ВерсияВрем2 = Версия2;
	
	Пока ИСТИНА Цикл
		НомерПозицииТочки1 = Найти(ВерсияВрем1, ".");
		НомерПозицииТочки2 = Найти(ВерсияВрем2, ".");
		
		Если НомерПозицииТочки1 = 0 Тогда
			Число1 = Число(ВерсияВрем1);
		Иначе
			Число1 = Число(Лев(ВерсияВрем1, НомерПозицииТочки1-1));
		КонецЕсли;
		
		Если НомерПозицииТочки2 = 0 Тогда
			Число2 = Число(ВерсияВрем2);
		Иначе
			Число2 = Число(Лев(ВерсияВрем2, НомерПозицииТочки1-1));
		КонецЕсли;
		
		Если Число1 > Число2 Тогда
			ВидСравненияВерсий = ВидСравнения.Больше;
			Прервать;
		ИначеЕсли Число1 < Число2 Тогда
			ВидСравненияВерсий = ВидСравнения.Меньше;
			Прервать;
		КонецЕсли;
		
		Если НомерПозицииТочки1 = 0 ИЛИ НомерПозицииТочки2 = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ВерсияВрем1	= Сред(ВерсияВрем1, НомерПозицииТочки1+1);
		ВерсияВрем2	= Сред(ВерсияВрем2, НомерПозицииТочки2+1);
	КонецЦикла;
	
	Возврат ВидСравненияВерсий;
КонецФункции

// Позволяет определить, есть ли среди реквизитов объекта реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита;
//  МетаданныеОбъекта - ОбъектМетаданных - объект, в котором требуется проверить наличие реквизита.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция Scan_ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт
	
	ЕстьРеквизит = НЕ (МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	ЕстьСтандартныйРеквизит = Ложь;
	Для Каждого СтдРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если СтдРеквизит.Имя = ИмяРеквизита Тогда
			ЕстьСтандартныйРеквизит = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//ЕстьОбщийРеквизит = НЕ (МетаданныеОбъекта.ОбщиеРеквизиты.Найти(ИмяРеквизита) = Неопределено);
	
	Возврат (ЕстьРеквизит ИЛИ ЕстьСтандартныйРеквизит); 
	
КонецФункции

//rarus BProg_Gladkov 01.12.2019 0014560 ++ 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
КонецФункции
//rarus BProg_Gladkov 01.12.2019 0014560 -- 

 Функция УбратьЛидирующиеНули(НомерДокумента) Экспорт // Rarus tenkam 02.02.2022 mantis 18837 +++
    
    Попытка
        НомерДокумента = Формат(Число(НомерДокумента), "ЧГ=");
    Исключение
        НомерДокумента = СтрЗаменить(СокрЛ(СтрЗаменить(СокрП(НомерДокумента), "0", " ")), " ", "0");
        Префикс = "";
        Пока КодСимвола(НомерДокумента) < 48 Или КодСимвола(НомерДокумента) > 57 Цикл
            Префикс = Префикс + Лев(НомерДокумента, 1);
            НомерДокумента = Сред(НомерДокумента, 2);
        КонецЦикла;
        Если Не ПустаяСтрока(Префикс) Тогда
            НомерДокумента = Префикс + УбратьЛидирующиеНули(НомерДокумента);
        КонецЕсли;
    КонецПопытки;
    Возврат НомерДокумента;
    
КонецФункции // Rarus tenkam 02.02.2022 mantis 18837 ---
	