//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 


//Возвращает признак того что конфигурация УАТ объединена с какой-либо типовой 
//
Функция ЭтоОбъединеннаяКонфигурация() Экспорт
	//Возврат (Метаданные.Документы.Найти("ОперацияБух") <> Неопределено
	//	ИЛИ Метаданные.Документы.Найти("ЗакрытиеЗаказовПокупателей") <> Неопределено);
	Возврат (Найти(Метаданные.Имя, "УправлениеАвтотранспортом") = 0) И (Найти(Метаданные.Имя, "ТранспортнаяЛогистикаИЭкспедирование") = 0);
КонецФункции

// Возвращает признак того, что конфигурация является объединенной с БП
//
Функция ОбъединеннаяКонфигурацияБП() Экспорт
	Возврат (Найти(Метаданные.Имя, "БухгалтерияПредприятия") <> 0);
КонецФункции // ОбъединеннаяКонфигурацияБП()

// Возвращает признак того, что конфигурация является объединенной с УТ
//
Функция ОбъединеннаяКонфигурацияУТ() Экспорт
	Возврат (Найти(Метаданные.Имя, "УправлениеТорговлей") <> 0);
КонецФункции // ОбъединеннаяКонфигурацияУТ()

// Возвращает признак того, что конфигурация является объединенной с ERP
//
Функция ОбъединеннаяКонфигурацияERP() Экспорт
	Возврат (Найти(Метаданные.Имя, "УправлениеПредприятием") <> 0);
КонецФункции // ОбъединеннаяКонфигурацияERP()

// Возвращает признак того, что конфигурация является объединенной с модулем Логистики
//
Функция ОбъединеннаяКонфигурацияМодульЛогистики() Экспорт
	Возврат (Найти(Метаданные.Имя, "ТранспортнаяЛогистикаИЭкспедирование") <> 0);
КонецФункции // ОбъединеннаяКонфигурацияERP()


//////////////////////////////////////////////////////////////////////////////// 
// НАСТРОЙКИ ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка) Экспорт

	Попытка
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		ИмяПользователяИБ = ПользовательИБ.Имя;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ЗначПоУмолч = Неопределено;
	
	тблНастройки = ПолучитьСписокНастроекПользователяУАТ();
	СтрокаПоискаНастройки = тблНастройки.Найти(Настройка, "ИмяНастройки");
	Если СтрокаПоискаНастройки <> Неопределено Тогда
		ЗначПоУмолч = СтрокаПоискаНастройки.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	//закоментарено из-за проверки на право СохранениеДанныхПользователя при чтении настроек. Такого запрета не должно быть
	//поскольку сохранение настроек ограничивает запись, а чтение доступно всегда
	//Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег(Настройка),, ЗначПоУмолч,, ИмяПользователяИБ);
	
	Результат = ХранилищеОбщихНастроек.Загрузить(ВРег(Настройка), "", "", ИмяПользователяИБ);
	Если Результат = Неопределено Тогда
		Результат = ЗначПоУмолч;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Если УдалитьБитыеСсылки(Результат) Тогда
			Результат = ЗначПоУмолч;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Удаляет битые ссылки из переменной.
//
// Параметры:
//   СсылкаИлиКоллекция - ЛюбаяСсылка, Произвольный - Проверяемый объект или очищаемая коллекция.
//
// Возвращаемое значение: 
//   Булево - 
//       * Истина - СсылкаИлиКоллекция ссылочного типа и объект не найден в базе данных.
//       * Ложь - Когда СсылкаИлиКоллекция не ссылочного типа или объект найден в базе данных.
//
Функция УдалитьБитыеСсылки(СсылкаИлиКоллекция)
	
	Тип = ТипЗнч(СсылкаИлиКоллекция);
	
	Если Тип = Тип("Неопределено")
		Или Тип = Тип("Булево")
		Или Тип = Тип("Строка")
		Или Тип = Тип("Число")
		Или Тип = Тип("Дата") Тогда // Оптимизация - часто используемые примитивные типы.
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Тип = Тип("Массив") Тогда
		
		Количество = СсылкаИлиКоллекция.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			Значение = СсылкаИлиКоллекция[ОбратныйИндекс];
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Тип = Тип("Структура")
		Или Тип = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из СсылкаИлиКоллекция Цикл
			Значение = КлючИЗначение.Значение;
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Вставить(КлючИЗначение.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		// Ссылочный тип, исключая ТочкаМаршрутаБизнесПроцессаСсылка.
		
		Если СсылкаИлиКоллекция.Пустая() Тогда
			Возврат Ложь; // Ссылка пустая.
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаИлиКоллекция, "Ссылка") = Неопределено Тогда
			СсылкаИлиКоллекция = Неопределено;
			Возврат Истина; // "Битая" ссылка.
		Иначе
			Возврат Ложь; // Объект найден.
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь; // Не ссылка.
		
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает новое значение настройки пользователя
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь = Неопределено) Экспорт
	Попытка
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		ИмяПользователяИБ = ПользовательИБ.Имя;
	Исключение
		Возврат;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, ИмяПользователяИБ);
КонецПроцедуры

// Процедура устанавливает новое значение настройки пользователя, если оно не указано
//Если значение по умолчанию указано, то новое значение не устанавливается
Процедура ЗаполнитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь) Экспорт
	Попытка
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		ИмяПользователяИБ = ПользовательИБ.Имя;
	Исключение
		Возврат;
	КонецПопытки;
	
	ТекущаяНастройка = ХранилищеОбщихНастроек.Загрузить(Настройка,,,ИмяПользователяИБ);
	
	Если ТекущаяНастройка = Неопределено Тогда
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
			ИмяПользователяИБ = ПользовательИБ.Имя;
		Исключение
			Возврат;
		КонецПопытки;
		
		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, ИмяПользователяИБ);
	КонецЕсли;
КонецПроцедуры

//Возвращает набор настроек пользователя УАТ
//
Функция ПолучитьСписокНастроекПользователяУАТ() Экспорт
	тблНастройки = Новый ТаблицаЗначений;
	тблНастройки.Колонки.Добавить("ИмяНастройки");
	тблНастройки.Колонки.Добавить("Представление");
	тблНастройки.Колонки.Добавить("ЗначениеПоУмолчанию");
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем";
	НоваяСтрока.Представление = "Изменять список электронных писем при выборе папки писем";
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "КоманднаяСтрокаДляЗапускаВнешнегоХТМЛРедактора";
	НоваяСтрока.Представление = "Командная строка для запуска внешнего HTML-редактора";
	НоваяСтрока.ЗначениеПоУмолчанию = "";
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ПолучениеЭлектронныхПисемПриОткрытии";
	НоваяСтрока.Представление = "Получение электронных писем при открытии";
	НоваяСтрока.ЗначениеПоУмолчанию = Истина;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнаяУчетнаяЗапись";
	НоваяСтрока.Представление = "Основная учетная запись";
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнойВидОбъектаСобытия";
	НоваяСтрока.Представление = "Основной вид объекта события";
	НоваяСтрока.ЗначениеПоУмолчанию = Неопределено;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИнтервалНапоминанияДоНачалаСобытия";
	НоваяСтрока.Представление = "Интервал напоминания до начала события";
	НоваяСтрока.ЗначениеПоУмолчанию = 0;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИспользоватьНапоминания";
	НоваяСтрока.Представление = "Использовать напоминания";
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИспользоватьЗвуковыеОповещения";
	НоваяСтрока.Представление = "Использовать звуковые оповещения";
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ЗапрашиватьПодтверждениеПриЗакрытии";
	НоваяСтрока.Представление = "Запрашивать подтверждение при закрытии";
	НоваяСтрока.ЗначениеПоУмолчанию = Истина;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнойКаталогФайлов";
	НоваяСтрока.Представление = "Основной каталог файлов";
	НоваяСтрока.ЗначениеПоУмолчанию = "";
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ПечатьДокументовБезПредварительногоПросмотра";
	НоваяСтрока.Представление = "Печать документов без предварительного просмотра";
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ПриИзмененииСуммыПересчитыватьСкидку";
	НоваяСтрока.Представление = "При изменении суммы пересчитывать скидку";
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИзменениеПользователяВКалендареПользователя";
	НоваяСтрока.Представление = "Изменение пользователя в календаре пользователя";
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнаяВалютаВзаиморасчетов";
	НоваяСтрока.Представление = "Основная валюта взаиморасчетов";
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Валюты.ПустаяСсылка();               
	
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОсновнаяЕдиницаПоКлассификатору";
	//НоваяСтрока.Представление = "Основная единица по классификатору";
	//Если уатРаботаСМетаданными.ЕстьСправочник("КлассификаторЕдиницИзмерения") Тогда
	//	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	//ИначеЕсли уатРаботаСМетаданными.ЕстьСправочник("УпаковкиЕдиницыИзмерения") Тогда
	//	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	//Иначе
	//	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	//КонецЕсли;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнаяОрганизация";
	НоваяСтрока.Представление = "Основная организация";
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	                                                                                   
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОсновнаяСтавкаНДС";
	//НоваяСтрока.Представление = "Основная ставка НДС";
	//НоваяСтрока.ЗначениеПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	//
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОсновноеПодразделениеОрганизации";
	//НоваяСтрока.Представление = "Основное подразделение организации";
	//Если уатРаботаСМетаданными.ЕстьСправочник("ПодразделенияОрганизаций") Тогда
	//	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	//Иначе
	//	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.СтруктураПредприятия.ПустаяСсылка();
	//КонецЕсли;
	//
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОсновнойОтветственный";
	//НоваяСтрока.Представление = "Основной ответственный";
	//НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Пользователи.ПустаяСсылка();
	//
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОсновнойПокупатель";
	//НоваяСтрока.Представление = "Основной покупатель";
	//НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	//
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОсновнойПоставщик";
	//НоваяСтрока.Представление = "Основной поставщик";
	//НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	//
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОсновнойСклад";
	//НоваяСтрока.Представление = "Основной склад";
	//НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	//
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОтражатьДокументыВБухгалтерскомУчете";
	//НоваяСтрока.Представление = "Отражать документы в бухгалтерском учете";
	//НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	//
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОтражатьДокументыВНалоговомУчете";
	//НоваяСтрока.Представление = "Отражать документы в налоговом учете";
	//НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	//
	//НоваяСтрока = тблНастройки.Добавить();
	//НоваяСтрока.ИмяНастройки = "ОтражатьДокументыВУправленческомУчете";
	//НоваяСтрока.Представление = "Отражать документы в управленческом учете";
	//НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	тблНастройки.Сортировать("Представление");
	
	Возврат тблНастройки;
КонецФункции
