//rarus sergei 12.09.2016 mantis 7160 ++

Функция ПолучитьПредставлениеГруппыПродукта(Документ) Экспорт
	ЕстьТС = Ложь;
	ЕстьДВС = Ложь;
	//ЕстьДЭС = Ложь;	// rarus tenkam 14.10.2019 mantis 14442 +
	ПредставлениеГруппы = "";
	Если ТипЗнч(Документ)= Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда 
		Для каждого строка Из Документ.СоставЗаявки Цикл
			Если строка.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства Тогда
				ЕстьТС = Истина; 	
			ИначеЕсли строка.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.Двигатели Тогда
				ЕстьДВС = Истина;
			// rarus tenkam 14.10.2019 mantis 14442 +++
			//ИначеЕсли строка.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ДизельныеЭлектростанции Тогда
			//	ЕстьДЭС = Истина;
			// rarus tenkam 14.10.2019 mantis 14442 ---
			КонецЕсли; 		
		КонецЦикла;
	Иначе
		Для каждого строка Из Документ.ПродуктыПоЗаявке Цикл
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//Если строка.Продукт.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства Тогда
			//	ЕстьТС = Истина; 	
			//ИначеЕсли строка.Продукт.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.Двигатели Тогда
			//	ЕстьДВС = Истина;
			//ИначеЕсли строка.Продукт.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ДизельныеЭлектростанции Тогда
			//	ЕстьДЭС = Истина;	
			//КонецЕсли;
			
			Если строка.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства Тогда
				ЕстьТС = Истина; 	
			ИначеЕсли строка.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.Двигатели Тогда
				ЕстьДВС = Истина;
			// rarus tenkam 14.10.2019 mantis 14442 +++
			//ИначеЕсли строка.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = Справочники.Scan_ГруппыПродуктов.ДизельныеЭлектростанции Тогда
			//	ЕстьДЭС = Истина;	
			// rarus tenkam 14.10.2019 mantis 14442 ---
			КонецЕсли;
			// rarus tenkam 12.08.2019 mantis 14427 ---
		КонецЦикла;
	КонецЕсли;
	Если ЕстьТС = Истина Тогда
			ПредставлениеГруппы = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства.КраткоеНаименование;	
	КонецЕсли; 
	Если ЕстьДВС = Истина Тогда
		Если ПредставлениеГруппы <> "" Тогда
			ПредставлениеГруппы = ПредставлениеГруппы +"/"+Справочники.Scan_ГруппыПродуктов.Двигатели.КраткоеНаименование;
		Иначе
			ПредставлениеГруппы = Справочники.Scan_ГруппыПродуктов.Двигатели.КраткоеНаименование;
		КонецЕсли;
	КонецЕсли;
	// rarus tenkam 14.10.2019 mantis 14442 +++
	//Если ЕстьДЭС = Истина Тогда
	//	Если ПредставлениеГруппы <> "" Тогда
	//		ПредставлениеГруппы = ПредставлениеГруппы +"/"+Справочники.Scan_ГруппыПродуктов.ДизельныеЭлектростанции.КраткоеНаименование;
	//	Иначе
	//		ПредставлениеГруппы = Справочники.Scan_ГруппыПродуктов.ДизельныеЭлектростанции.КраткоеНаименование;
	//	КонецЕсли;
	//КонецЕсли;
	// rarus tenkam 14.10.2019 mantis 14442 ---
	Возврат ПредставлениеГруппы;
КонецФункции

// Процедура формирования наименования документа по ссылке
//
// Параметры:
//	Документ - Сслыка на документ для которого готовится представление
//	АльтернативноеНазвание - название документа которое будет использовано вместо синонима при формировании представления
//
//	Возвращаемое значение - Строка. Представление документа.
//
Функция ПолучитьПредставлениеДокумента(Документ, АльтернативноеНазвание="",ДробнаяЧасть =Неопределено) Экспорт
	
	Если НЕ ПустаяСтрока(АльтернативноеНазвание) Тогда
		ПредставлениеДокумента = АльтернативноеНазвание;
		
	ИначеЕсли Документ.ХозОперация <> Справочники.Scan_ХозяйственныеОперации.ПустаяСсылка() Тогда
		ПредставлениеДокумента = Строка(Документ.ХозОперация);
		
	Иначе
		ПредставлениеДокумента = Scan_УправлениеДиалогомСервер.ПредставлениеОбъект(Документ);
	КонецЕсли;
	Если ДробнаяЧасть = Неопределено Тогда
		Возврат СокрЛП(ПредставлениеДокумента) + " № " + ПолучитьНомерДляПечати(Документ) + " от " + Формат(Документ.Дата,"ДФ = dd.MM.yyyy");
	Иначе
		Возврат СокрЛП(ПредставлениеДокумента) + " № " + ПолучитьНомерДляПечати(Документ)+ "\" + ДробнаяЧасть + " от " + Формат(Документ.Дата,"ДФ = dd.MM.yyyy");
	КонецЕсли;	
КонецФункции

// Функция формирования номера для печати(убранны лидирующие нули).
//
// Параметры:
//	Документ - Ссылка на документ , номер которого ипользуется
//	СокращенныйНомер - признак сокращенного номера
//
// Возвращаемое значение - Строка. Номер для печати.
//
Функция ПолучитьНомерДляПечати(Документ, СокращенныйНомер=Неопределено) Экспорт
	
	НомерДокумента = Документ.Номер;
	
	Если СокращенныйНомер=ЛОЖЬ Тогда
		Возврат НомерДокумента;
	КонецЕсли;
	
	// удалим лидирующие нули
	Пока Лев(НомерДокумента, 1) = "0" Цикл
		НомерДокумента = Сред(НомерДокумента,2);
	КонецЦикла;
	
	Возврат НомерДокумента;
	
КонецФункции // ПолучитьНомерДляПечати()

// Формирование строкового представления справочника
Функция ПолучитьПредставлениеСправочника(Объект, Знач СтруктураПараметров=Неопределено, ДляПечати=Ложь, РасчетныйСчетДокумента=Неопределено) Экспорт
	// проверим подходит ли объект под тип
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта <> Тип("СправочникСсылка.Организации") И
		 //ТипОбъекта <> Тип("СправочникСсылка.ПодразделенияКомпании") И
		 //ТипОбъекта <> Тип("СправочникСсылка.СкладыКомпании") И
		 ТипОбъекта <> Тип("СправочникСсылка.Scan_Контрагенты") Тогда
		 
			Возврат "Неправильный тип объекта!";
		 
	КонецЕсли;
	
	Представление = "";
	// если не указана структура параметров работаем по умолчанию
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров=Новый Структура("Наименование,ИНН,КПП,АдресФактический,ТелефонРабочий,Факс","","ИНН ","КПП ","","тел.: ","Факс: ");
	КонецЕсли;
	
	// объявим часто используемые переменные
	ТипПодразделение = Тип("СправочникСсылка.Scan_Подразделения");
	Для Каждого Параметр Из СтруктураПараметров Цикл
		
		Если ВРЕГ(Параметр.Ключ)="НАИМЕНОВАНИЕ" Тогда
			
			Если ДляПечати И ТипОбъекта = ТипПодразделение Тогда
				ЗначениеПараметра = ПолучитьНаименованиеСправочника(Объект.Организация);
			Иначе
				ЗначениеПараметра = ПолучитьНаименованиеСправочника(Объект);
			КонецЕсли;
		ИначеЕсли ВРег(Параметр.Ключ)="ИНН" Тогда
			
			Если ТипОбъекта = ТипПодразделение Тогда
				ЗначениеПараметра = СокрЛП(Объект.Организация.ИНН);
			Иначе
				ЗначениеПараметра = СокрЛП(Объект.ИНН);
			КонецЕсли;
			
		ИначеЕсли ВРег(Параметр.Ключ)="КПП" Тогда
			
			Если ТипОбъекта = ТипПодразделение И НЕ ЗначениеЗаполнено(Объект.КПП) Тогда
				ЗначениеПараметра = СокрЛП(Объект.Организация.КПП);
			//ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") И Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			//	ЗначениеПараметра = СокрЛП(Объект.КПП);
			ИначеЕсли ТипОбъекта = ТипПодразделение ИЛИ ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
				ЗначениеПараметра = СокрЛП(Объект.КПП);
			КонецЕсли;
			
	
		ИначеЕсли ВРег(Параметр.Ключ)="АДРЕСЮРИДИЧЕСКИЙ" ИЛИ
			
			ВРег(Параметр.Ключ)="АДРЕСФАКТИЧЕСКИЙ" Тогда
			ВидКИ = ?(ВРег(Параметр.Ключ)="АДРЕСЮРИДИЧЕСКИЙ", "ЮрАдрес", "ФактАдрес");
			Если ТипОбъекта = ТипПодразделение Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,Справочники.ВидыКонтактнойИнформации[ВидКИ+"ПодразделенияКомпании"]);
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,Справочники.ВидыКонтактнойИнформации[ВидКИ+"Организации"]);
				КонецЕсли;
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,Справочники.ВидыКонтактнойИнформации[ВидКИ+"Организации"]);
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,Справочники.ВидыКонтактнойИнформации[ВидКИ+"Контрагента"]);
			КонецЕсли;
			
		ИначеЕсли ВРег(Параметр.Ключ)="ТЕЛЕФОНРАБОЧИЙ" Тогда
			
			Если ТипОбъекта = ТипПодразделение Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании);
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
				КонецЕсли;
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			КонецЕсли;
		ИначеЕсли ВРег(Параметр.Ключ)="ФАКС" Тогда
			Если ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);
			КонецЕсли;
		ИначеЕсли ВРег(Параметр.Ключ)="АДРЕСЭП" Тогда
			Если ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
			КонецЕсли;
	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ПустаяСтрока(Представление) Тогда
			Представление=Представление+", ";
		КонецЕсли;
		Если Параметр.Значение<>Неопределено Тогда
			Представление=Представление+Параметр.Значение;
		КонецЕсли; 
		Представление=Представление+ЗначениеПараметра;
		
	КонецЦикла;
	
	Возврат Представление;
КонецФункции

// Полное наименование справоника если есть.
Функция ПолучитьНаименованиеСправочника(Объект) Экспорт
	Если Объект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если ЕстьРеквизитОбъекта("НаименованиеПолное",Объект) Тогда
		
		Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			Возврат Объект.НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;	

	Возврат Объект.Наименование;
КонецФункции

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции 

// Приводит макет печ. формы в соответствие с данными документа
//
// Параметры:
// ЭтотОбъект - ДокументОбъект - документ, для которого производится действие
// Макет	 - макет печ. формы
//
// Возвращаемое значение:
// Область шапки таблицы с заполненными параметрами
//
Функция ПривестиМакетПечатнойФормы(Макет, Объект, ТабличныеЧасти=Неопределено,ПараметрыПечати) Экспорт
		// определим нужныли скидки
	ВыводитьСпецификацию = ПараметрыПечати.ВыводитьСпецификацииИзделий;
	//rarus sergei 30.09.2016 mantis 7162 ++
	Если ПараметрыПечати.Свойство("ВыводитьГХПродуктовИзделий") Тогда
		ВыводитьХарактеристики = ПараметрыПечати.ВыводитьГХПродуктовИзделий;
	Иначе
		ВыводитьХарактеристики = ИСТИНА;
	КонецЕсли;
	Если ПараметрыПечати.Свойство("ВыводитьГХПродуктовИзделий") Тогда	
		ВыводитьВес = ПараметрыПечати.ВыводитьВесИзделий;
	Иначе
		ВыводитьВес = ИСТИНА;
	КонецЕсли;
	//rarus sergei 30.09.2016 mantis 7162 --
	// получим нужные области
	//ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Если Макет.Области.Найти("ТипТС") <> Неопределено Тогда
		ОбластьТипТС = Макет.Область("ТипТС");
	КонецЕсли;
	Если Макет.Области.Найти("НомерШасси") <> Неопределено Тогда
		ОбластьНомерШасси = Макет.Область("НомерШасси");
	КонецЕсли;
	Если Макет.Области.Найти("МодельТС") <> Неопределено Тогда
		ОбластьМодельТС = Макет.Область("МодельТС");
	КонецЕсли;
	
	Если НЕ ВыводитьСпецификацию И  Макет.Области.Найти("Спецификация") <> Неопределено Тогда
		// удалим область
		ОбластьСпецификация = Макет.Область("Спецификация");
		ОбластьТипТС.ШиринаКолонки = ОбластьТипТС.ШиринаКолонки + ОбластьСпецификация.ШиринаКолонки;
		Макет.УдалитьОбласть(ОбластьСпецификация,ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	Если НЕ ВыводитьХарактеристики И  Макет.Области.Найти("Длина") <> Неопределено Тогда
		// удалим область
		ОбластьДлина = Макет.Область("Длина");
		ОбластьТипТС.ШиринаКолонки = ОбластьТипТС.ШиринаКолонки + ОбластьДлина.ШиринаКолонки;
		Макет.УдалитьОбласть(ОбластьДлина,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	Если НЕ ВыводитьХарактеристики И  Макет.Области.Найти("Ширина") <> Неопределено Тогда
		// удалим область
		ОбластьШирина = Макет.Область("Ширина");
		ОбластьНомерШасси.ШиринаКолонки = ОбластьНомерШасси.ШиринаКолонки + ОбластьШирина.ШиринаКолонки;
		Макет.УдалитьОбласть(ОбластьШирина,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;

	Если НЕ ВыводитьХарактеристики И  Макет.Области.Найти("Высота") <> Неопределено Тогда
		// удалим область
		ОбластьВысота = Макет.Область("Высота");
		ОбластьМодельТС.ШиринаКолонки = ОбластьМодельТС.ШиринаКолонки + ОбластьВысота.ШиринаКолонки;
		Макет.УдалитьОбласть(ОбластьВысота,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;

	Если НЕ ВыводитьВес И  Макет.Области.Найти("Вес") <> Неопределено Тогда
		// удалим область
		ОбластьВес = Макет.Область("Вес");
		ОбластьМодельТС.ШиринаКолонки = ОбластьМодельТС.ШиринаКолонки + ОбластьВес.ШиринаКолонки;
		Макет.УдалитьОбласть(ОбластьВес,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;

	//теперь запишем параметры шапки
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
		
		
	Возврат ОбластьМакета;
КонецФункции

Функция ПолучитьТипПродукта(Изделие)
	Если ЗначениеЗаполнено(Изделие.ТипПродуктаЛогистический) Тогда
		Возврат Изделие.ТипПродуктаЛогистический;
	Иначе
		Возврат Изделие.ТипПродукта;
	КонецЕсли; 	
КонецФункции


// Функция заполнения структуры печатной строки по строке табличной части
Функция ЗаполнитьПредставлениеДанныхТоварнойСтроки(Макет,СтрокаТЧ, Документ, ИмяТабличнойЧасти="СоставЗаявки") Экспорт
	СтруктураСтроки = Новый Структура;
	ТипЛогистический = ПолучитьТипПродукта(строкаТЧ.Изделие);
	СтруктураСтроки.Вставить("НомерСтроки",СтрокаТЧ.НомерСтроки);
	СтруктураСтроки.Вставить("ТипЛогистический",ТипЛогистический);
	МодельИзделия = СтрокаТЧ.Изделие.МодельПродукта; 
	//rarus vikhle 24.08.2020 mt 14916 +++
	КодТипаТоплива = СтрокаТЧ.Изделие.ТипТопливаДвигателя.Код; 
	СтруктураСтроки.Вставить("КодТипаТоплива",КодТипаТоплива);
	//rarus vikhle 24.08.2020 mt 14916 ---
	СтруктураСтроки.Вставить("МодельТС", МодельИзделия);             
	СтруктураСтроки.Вставить("НомерИзделия",СтрокаТЧ.Изделие.НомерИзделия);	
	// rarus anch 10054 15/.06.2017 +++
	//СтруктураСтроки.Вставить("VINНомер",СтрокаТЧ.Изделие.VIN);
    СтруктураСтроки.Вставить("VINНомер",СтрокаТЧ.Изделие.VIN2);	
	// rarus anch 10054 15/.06.2017 ---
	СтруктураСтроки.Вставить("СпецификацияИзделия",СтрокаТЧ.Изделие.СпецификацияПродукта);
	
	//rarus vikhle 15.09.2021 mt 18239 +++
	СтатусДействующийЭПТС	= Scan_ПраваИНастройки.Scan_Право("СтатусДействующийЭПТС");
	СтатусНезавершенныйЭПТС = Scan_ПраваИНастройки.Scan_Право("СтатусНезавершенныйЭПТС");
	СтатусЭПТСПродукта 		= СтрокаТЧ.Изделие.ЭПТС.СтатусЭПТС;
	
	Если СтатусЭПТСПродукта = СтатусДействующийЭПТС ИЛИ СтатусЭПТСПродукта = СтатусНезавершенныйЭПТС Тогда   
		СтруктураСтроки.Вставить("НомерЭПТС", СтрокаТЧ.Изделие.ЭПТС.НомерЭПТС); 
	Иначе
		СтруктураСтроки.Вставить("НомерЭПТС", "");	
	КонецЕсли;	
	//rarus vikhle 15.09.2021 mt 18239 ---
	
	Если Макет.Области.Найти("Длина") <> Неопределено Тогда	
		ДлинаПродукта   = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(строкаТЧ.Изделие, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Длина);
		СтруктураСтроки.Вставить("Длина",ДлинаПродукта);
	КонецЕсли;
	Если Макет.Области.Найти("Ширина") <> Неопределено Тогда
		ШиринаПродукта  = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(строкаТЧ.Изделие, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Ширина);
		СтруктураСтроки.Вставить("Ширина",ШиринаПродукта);
	КонецЕсли;
	Если Макет.Области.Найти("Высота") <> Неопределено Тогда
		ВысотаПродукта  = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(строкаТЧ.Изделие, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Высота);
		СтруктураСтроки.Вставить("Высота",ВысотаПродукта);
	КонецЕсли;
	Если Макет.Области.Найти("Вес") <> Неопределено Тогда
	ВесПродукта = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(строкаТЧ.Изделие, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Вес);
	СтруктураСтроки.Вставить("Вес",ВесПродукта);
	КонецЕсли;
	Возврат СтруктураСтроки;
КонецФункции


// проверка на возможность вывода области если не удадлось выводится горизонтальный разделитель
Функция ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, Область, ОбластьШапкаТаблицы=Неопределено, ОбластьПодвал=Неопределено, НомерСтраницы=1, СтруктураИтоговПоСтранице=Неопределено, Документ, мсвДопОбластиПодвала=Неопределено, ОбластьЛиния = Неопределено) Экспорт
	
	//запишем их в один массив
	МассивОбластейДляПроверки = Новый Массив;
	МассивОбластейДляПроверки.Добавить(Область);
	Если ОбластьЛиния<>Неопределено Тогда
			МассивОбластейДляПроверки.Добавить(ОбластьЛиния);
	КонецЕсли;

	//Если ОбластьПодвал <> Неопределено Тогда
	//	МассивОбластейДляПроверки.Добавить(ОбластьПодвал);
	//КонецЕсли;
	//Если мсвДопОбластиПодвала <> Неопределено Тогда
	//	Для Каждого ТекОбласть Из мсвДопОбластиПодвала Цикл
	//		МассивОбластейДляПроверки.Добавить(ТекОбласть);
	//	КонецЦикла;
	//КонецЕсли;
	
	
	//проверим, помещаются ли на странице
	РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки);
	
	//если не помещаются, то ...
	Если НЕ РезультатПроверки Тогда
		Если ОбластьЛиния<>Неопределено Тогда
			ТабличныйДокумент.Вывести(ОбластьЛиния);
		КонецЕсли;
		//ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьПодвал,СтруктураИтоговПоСтранице,Документ); //выводим итог по странице
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //переходим на следующую страницу
		НомерСтраницы = НомерСтраницы + 1;
		Если ОбластьШапкаТаблицы <> Неопределено Тогда
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы); //выводим шапку таблицы
		КонецЕсли;
	КонецЕсли;
	
	//выводим текущую область
	ТабличныйДокумент.Вывести(Область);
	
	Возврат НомерСтраницы;
	
КонецФункции
//rarus sergei 12.09.2016 mantis 7160 --

Функция СформироватьПФ(ДокументСсылка, ИмяПФ) Экспорт //rarus BProg_Gladkov 02.05.2020 0015962 +-
	
	ИмяМенеджераПечати = "Документ." + ДокументСсылка.Метаданные().Имя;

	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(ДокументСсылка);

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ЗаголовокФормы", 				 	"Печатная форма");                    	
	ПараметрыПечати.Вставить("ВыводитьСпецификацииИзделий",  	Ложь);
	ПараметрыПечати.Вставить("ПоказыватьДопУсловия",         	Ложь);
	ПараметрыПечати.Вставить("ДопУсловия",                   	Неопределено);
	ПараметрыПечати.Вставить("ВыводитьГруппировкиИзделий",		Ложь);
	ПараметрыПечати.Вставить("ВыводитьТаможенноеОформление",	Ложь);
	ПараметрыПечати.Вставить("ТОСтранаОтправления", 			Неопределено);
	ПараметрыПечати.Вставить("ТОСтранаПрибытия", 				Неопределено);
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		ПараметрыПечати.Вставить("ТаблицаПеревозчиков",			Документы.Scan_ЗаявкаНаДействие.ПолучитьТаблицуПеревозчиков(ДокументСсылка));
	КонецЕсли;
	// rarus agar 10.03.2022 15689 ++
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		ТаблицаПродуктов = Документы.Scan_ЗаявкаПеревозчику.ПолучитьТаблицуИзделий(ДокументСсылка);
		ПараметрыПечати.Вставить("МассивПродуктов",       ТаблицаПродуктов.ВыгрузитьКолонку("Изделие"));
		ПараметрыПечати.Вставить("ЗаполнятьКонтрагентов", Истина);
	КонецЕсли;
	// rarus agar 10.03.2022 15689 --
	
	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати, ИмяПФ, ОбъектыПечати, ПараметрыПечати);
	ТабличныйДокумент = ПечатныеФормы.КоллекцияПечатныхФорм[0].ТабличныйДокумент;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ИмяОсновнойПФ(Документ) Экспорт //rarus BProg_Gladkov 02.05.2020 0015962 +-
	ХозОперация = Документ.ХозОперация;
	
	СоответсвиеХозОперацийИИменПФ = Новый Соответствие;	
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение,						"ПФ_MXL_ПостановкаНаХранение");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство,						"ПФ_MXL_ПередачаВПроизводство");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство,								"ПФ_MXL_ПередачаВПроизводство");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу, 	"ПФ_MXL_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК,						"ПФ_MXL_ПокупкаУПоставщикаИПередачаТК");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу,				"ПФ_MXL_ПокупкаУПоставщикаИПродажаТретьемуЛицу");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение,				"ПФ_MXL_ПокупкаУПоставщикаСПостановкойНаХранение");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК,		"ПФ_MXL_ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение,									"ПФ_MXL_ПостановкаНаХранение");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство,				"ПФ_MXL_СнятиеСХраненияИПередачаВПроизводство");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу,		"ПФ_MXL_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК,							"ПФ_MXL_СнятиеСХраненияИПередачаТК");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу,					"ПФ_MXL_СнятиеСХраненияИПродажаТретьемуЛицу");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК,		"ПФ_MXL_СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК");
	СоответсвиеХозОперацийИИменПФ.Вставить(Справочники.Scan_ХозяйственныеОперации.ЗаявкаПеревозчику,									"ПФ_MXL_ЗаявкаПеревозчику");	
	
	ИмяПФ = СоответсвиеХозОперацийИИменПФ.Получить(ХозОперация);
	Возврат ИмяПФ;
	
КонецФункции

