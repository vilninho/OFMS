Процедура УстановитьОтборДинамическогоСпискаПоНомеруЗаказаНаЗавод(ДинамическийСписок, ЛевоеЗначение, НомерС, НомерПо, ОтборПоПользовательскимНастройкам = Ложь) Экспорт  //rarus BProg_Dekin 05.03.2020 mantis 0015725 +-
	ИспользоватьИзмененноеПолеС 	= Ложь;
	ИспользоватьИзмененноеПолеПо 	= Ложь;
	
	НовоеЧислоДляПоискаС 	= НомерС;
	НовоеЧислоДляПоискаПо 	= НомерПо;
	
	Если ОтборПоПользовательскимНастройкам Тогда
		ОбъектНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
		ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки).Элементы;
	Иначе
		ОбъектНастройки = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
	КонецЕсли;
	
	//rarus vikhle 10.06.2020 mt 15894 +++
	//Создаем общуу корневую группу отбора с типом "или", отбор сработает в обоих случаях, когда номер заказа числовой с нулями или без
	КорневаяГруппаИли = ОбъектНастройки.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	КорневаяГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	КорневаяГруппаИли.Использование = Истина;
	//В корневую группу добавляем подчиненную с типом "или", группа для случаев когда номер числовой, но без лидирующих нулей
	ГруппаНеИзменныеЗначения = КорневаяГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаНеИзменныеЗначения.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаНеИзменныеЗначения.Использование = Истина;
	//Заполняем отбор значениями без добавления нулей
	НовыйОтбор = ГруппаНеИзменныеЗначения.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	НовыйОтбор.ПравоеЗначение = НомерС;
	
	НовыйОтбор = ГруппаНеИзменныеЗначения.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	НовыйОтбор.ПравоеЗначение = НомерПо;
	
	//Создаем с типом "или" для отбора по значениям с добавленными нулями 
	ГруппаИзменныеЗначения = КорневаяГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаИзменныеЗначения.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаИзменныеЗначения.Использование = Истина;
	//rarus vikhle 10.06.2020 mt 15894
	
	Если НЕ Лев(НомерС,1) = "0" Тогда
			Попытка
				ЧислоСтроки = Число(НомерС);
				ИспользоватьИзмененноеПолеС = Истина;
			Исключение
			КонецПопытки;	
			Если ИспользоватьИзмененноеПолеС Тогда 
				КолВоЗнаковЧисло = СтрДлина(ЧислоСтроки);
				Для нПрефикса = 0 По (9 - КолВоЗнаковЧисло) Цикл  // 9-длина номера заказа  
					НовоеЧислоДляПоискаС = "0" + НовоеЧислоДляПоискаС;
				КонецЦикла;
			КонецЕсли;	
	КонецЕсли;	
	Если НЕ Лев(НомерПо,1) = "0" Тогда
		Попытка
			ЧислоСтроки = Число(НомерПо);
			ИспользоватьИзмененноеПолеПо = Истина;
		Исключение
		КонецПопытки;	
		Если ИспользоватьИзмененноеПолеПо Тогда
			КолВоЗнаковЧисло = СтрДлина(ЧислоСтроки);
			Для нПрефикса = 0 По (9 - КолВоЗнаковЧисло) Цикл  // 9-длина номера заказа  
				НовоеЧислоДляПоискаПо = "0" + НовоеЧислоДляПоискаПо;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
		
	НовыйОтбор = ГруппаИзменныеЗначения.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	НовыйОтбор.ПравоеЗначение = ?(ИспользоватьИзмененноеПолеС,НовоеЧислоДляПоискаС, НовоеЧислоДляПоискаС);
	
	НовыйОтбор = ГруппаИзменныеЗначения.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	НовыйОтбор.ПравоеЗначение = ?(ИспользоватьИзмененноеПолеПо,НовоеЧислоДляПоискаПо, НовоеЧислоДляПоискаПо);

		
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ЛевоеЗначение, НовоеЧислоДляПоискаС, ВидСравненияКомпоновкиДанных.Меж,, Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ЛевоеЗначение, НовоеЧислоДляПоискаПо, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,, Истина);		
КонецПроцедуры

// rarus tenkam 17.06.2020 mantis 16201 +++
Функция УстановитьОтборДинамическогоСпискаПоНомеруОбъекта(ДинамическийСписок, ЛевоеЗначение, НомерС, НомерПо, ОтборПоПользовательскимНастройкам = Ложь, СообщениеОбОшибке = "") Экспорт
	
	НомерОбъектаС = СокрЛП(НомерС);
	НомерОбъектаПо = СокрЛП(НомерПо);
		
	// Проверим, что у значения "с" и значения "по" одинаковая длина
	Если СтрДлина(НомерОбъектаС) <> СтрДлина(НомерОбъектаПо) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Длина значений поиска должна быть одинаковой!'; en = 'Different length of values'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтборПоПользовательскимНастройкам Тогда
		ОбъектНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
		ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки).Элементы;
	Иначе
		ОбъектНастройки = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
	КонецЕсли;

	Попытка
		// Если значения полностью числовые
	
		ЧислоНомерОбъектаС = Число(НомерОбъектаС);
		ЧислоНомерОбъектаПо = Число(НомерОбъектаПо);
		
		МассивДанныхДляПоиска = ПолучитьМассивДанныхДляПоискаПоКоридоруЗначений(ЧислоНомерОбъектаС, ЧислоНомерОбъектаПо);
		    
	Исключение
		// Обработаем лишь случай когда цифры в конце номера 
		
		СтруктураЧисловыеОкончания = ПолучитьСтруктуруЧисловыхОкончаний(НомерОбъектаС, НомерОбъектаПо);
		Если СтруктураЧисловыеОкончания.Успешно Тогда
			ЧислоНомерОбъектаС = СтруктураЧисловыеОкончания.ЧислоНомерОбъектаС;
			ЧислоНомерОбъектаПо = СтруктураЧисловыеОкончания.ЧислоНомерОбъектаПо;
			НачальныеСимволы = СтруктураЧисловыеОкончания.НачальныеСимволы;
			
			МассивДанныхДляПоиска = ПолучитьМассивДанныхДляПоискаПоКоридоруЗначений(ЧислоНомерОбъектаС, ЧислоНомерОбъектаПо, НачальныеСимволы);
			
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Неверный формат данных для поиска по коридору значений!'; en = 'Wrong format of values'");
			Возврат Ложь;
		КонецЕсли;
		
	КонецПопытки;
	
	// Установим отбор по списку		
	НовыйОтбор = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	НовыйОтбор.ПравоеЗначение = МассивДанныхДляПоиска;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьМассивДанныхДляПоискаПоКоридоруЗначений(ЧислоНомерОбъектаС, ЧислоНомерОбъектаПо, НачальныеСимволы = "")
	МассивДанных = Новый Массив;
	
	НомерОбъекта = ЧислоНомерОбъектаС;
	Пока НомерОбъекта <> ЧислоНомерОбъектаПо + 1 Цикл
		// Сначала добавим без лидирующих нулей
		НомерОбъектаСтрока = НачальныеСимволы + Формат(НомерОбъекта, "ЧГ=");
		МассивДанных.Добавить(НомерОбъектаСтрока);
		
		// Добавим номера с нулями, максимальная длина номера = 9
		КоличествоНулей  = 9 - СтрДлина(НомерОбъектаСтрока);
		
		Если КоличествоНулей = 0 Тогда
			НомерОбъекта = НомерОбъекта + 1;
			Продолжить;
		КонецЕсли;
		
		НовыеНачальныеСимволы = НачальныеСимволы;
		Для Итератор = 1 По КоличествоНулей Цикл
			НовыеНачальныеСимволы = НовыеНачальныеСимволы + "0";
			МассивДанных.Добавить(НовыеНачальныеСимволы + Формат(НомерОбъекта, "ЧГ="));			
		КонецЦикла;
		НомерОбъекта = НомерОбъекта + 1;
	КонецЦикла;

	Возврат МассивДанных;
КонецФункции

Функция ПолучитьСтруктуруЧисловыхОкончаний(НомерОбъектаС, НомерОбъектаПо)
	СтруктураЧисловыеОкончания = Новый Структура("Успешно", Ложь);
	
	// Получим числовое окончание "с" в виде строки
	ОкончаниеС = ПолучитьЧисловоеОкончаниеСтроки(НомерОбъектаС);
	КоличествоЧисел = СтрДлина(ОкончаниеС);
	
	// Если в конце чисел нет, то искать не будем
	Если ОкончаниеС = "" Тогда
		Возврат СтруктураЧисловыеОкончания;
	КонецЕсли;
	
	// Получим числовое окончание "по" в виде строки
	ОкончаниеПо = ПолучитьЧисловоеОкончаниеСтроки(НомерОбъектаПо);
	
	// Если в конце чисел нет, то искать не будем
	Если ОкончаниеПо = "" Тогда
		Возврат СтруктураЧисловыеОкончания;
	КонецЕсли;
	
	// Получим начальные символы "с" и "по"
	НачальныеСимволыС = Лев(НомерОбъектаС, СтрДлина(НомерОбъектаС) - КоличествоЧисел);
	НачальныеСимволыПо = Лев(НомерОбъектаПо, СтрДлина(НомерОбъектаПо) - КоличествоЧисел);
	
	// Сравним начальные символы
	Если НачальныеСимволыС <> НачальныеСимволыПо Тогда
		// Если символы разные, то искать не будем
		Возврат СтруктураЧисловыеОкончания;
	КонецЕсли;
	
	СтруктураЧисловыеОкончания.Успешно = Истина;
	СтруктураЧисловыеОкончания.Вставить("ЧислоНомерОбъектаС", Число(ОкончаниеС));
	СтруктураЧисловыеОкончания.Вставить("ЧислоНомерОбъектаПо", Число(ОкончаниеПо));
	СтруктураЧисловыеОкончания.Вставить("НачальныеСимволы", НачальныеСимволыС);
	
	Возврат СтруктураЧисловыеОкончания
КонецФункции

Функция ПолучитьЧисловоеОкончаниеСтроки(ТекСтрока)
	НоваяСтрока = ТекСтрока;
	ОкончаниеСтрока = "";
	Для Итератор = 1 По СтрДлина(ТекСтрока) Цикл
		ЗначениеПрав = Прав(НоваяСтрока,1);
		Попытка
			ЧислоПрав = Число(ЗначениеПрав);
			Если ЗначениеПрав = "-" Тогда
				Возврат ОкончаниеСтрока;
			КонецЕсли;
			
			ОкончаниеСтрока = ЗначениеПрав + ОкончаниеСтрока;
			
			НоваяСтрока = Лев(НоваяСтрока, СтрДлина(НоваяСтрока)-1);
		Исключение
			Возврат ОкончаниеСтрока;
		КонецПопытки;
	КонецЦикла;	
	Возврат ОкончаниеСтрока;
КонецФункции
// rarus tenkam 17.06.2020 mantis 16201 ---

// Конструктор параметра ПроверяемыеРеквизиты для процедуры Scan_ВспомогательныеФункцииСервер.МожноСоздатьЗаявку
// При передачи без изменений будут проверяться все реквизиты
Функция ПроверяемыеРеквизитыПродуктов() Экспорт //rarus vikhle 12.08.2021 mt 17834 +++
	
	ПроверяемыеРеквизитыПродуктов = Новый Структура;
	ПроверяемыеРеквизитыПродуктов.Вставить("МаркаПродукта",					Истина);
	ПроверяемыеРеквизитыПродуктов.Вставить("МодельПродукта",				Истина);
	ПроверяемыеРеквизитыПродуктов.Вставить("СпецификацияПродукта",			Истина);
	ПроверяемыеРеквизитыПродуктов.Вставить("ТипСпецификации",				Истина);
	ПроверяемыеРеквизитыПродуктов.Вставить("БУ", 							Истина);
	ПроверяемыеРеквизитыПродуктов.Вставить("СтоимостьПродажиБУСтавкаНДС", 	Истина);
	ПроверяемыеРеквизитыПродуктов.Вставить("ЛокальныйСтатусПродукта", 		Истина); //rarus vikhle 24.08.2021 mt 17834
	ПроверяемыеРеквизитыПродуктов.Вставить("СтандартнаяСпецификация",		Истина); //rarus vikhle 21.09.2021 m 18298
	
	Возврат ПроверяемыеРеквизитыПродуктов;
	
КонецФункции //rarus vikhle 12.08.2021 mt 17834 ---