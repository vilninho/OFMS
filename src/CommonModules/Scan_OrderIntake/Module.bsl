#Область ПрограммныйИнтерфейс

// Выполняет расчет дат Order Intake в регистре сведений Scan_РасчетOrderIntake.
// После выполнения расчета, полученные даты событий записываются в регистр Scan_OrderIntakeАльтернативный
//
// Параметры:
//  ДатаНачала - Дата - события с датой и временем более или равной участвуют в расчете
//  ДатаОкончания - Дата - события с датой и временем менее или равной участвуют в расчете
//
Процедура ВыполнитьРасчетOrderIntake(ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
		
	Если Не Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake") Тогда
		Возврат;
	КонецЕсли;
	
	МинимальныйОстатокOrderIntake = Scan_ПраваИНастройки.Scan_Право("МинимальныйОстатокВесовСобытийАльтернативногоOrderIntake");
	АвторизованныйПользователь    = Пользователи.АвторизованныйПользователь();
	НастройкиРасчета              = ПолучитьНастройкиРасчетаOrderIntake();
	
	ЗаказыДляРасчета = ПолучитьЗаказыДляРасчета(ДатаНачала, ДатаОкончания);
	
	// Если не задан период, данные выбираем по всем заказам в регистре
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказыДляРасчета);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_РасчетOrderIntake.Период КАК Период,
	|	Scan_РасчетOrderIntake.ЗаказНаЗавод КАК ЗаказНаЗавод,
	|	Scan_РасчетOrderIntake.Событие КАК Событие,
	|	Scan_РасчетOrderIntake.ДатаСобытия КАК ДатаСобытия,
	|	Scan_РасчетOrderIntake.Пользователь КАК Пользователь,
	|	Scan_РасчетOrderIntake.ВидСобытия КАК ВидСобытия
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	Scan_РасчетOrderIntake.ЗаказНаЗавод В(&П1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия
	|ИТОГИ ПО
	|	ЗаказНаЗавод";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказНаЗавод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЗаказНаЗавод");
	Пока ВыборкаЗаказНаЗавод.Следующий() Цикл
		// Признак прекращения расчета событием Локальный статус продукта DELETED
		РасчетПрекращен = Ложь;
		
		// Признак отмены Order Intake в момент прекращения расчета
		РасчетПрекращенOrderIntake = Ложь;
		
		// Массив с индексами строк таблицы расчета, в которых есть дата Order Intake
		ИндексыСтрокOrderIntake = Новый Массив;
		
		// Таблицу расчета получаем из набора записей регистра расчета
		НаборЗаписейРасчета = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьНаборЗаписей();
		ТаблицаРасчета      = НаборЗаписейРасчета.ВыгрузитьКолонки();
		
		#Область НовыйАлгоритм
		
		Выборка = ВыборкаЗаказНаЗавод.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Новая строка расчета
			НоваяСтрокаРасчета = ТаблицаРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчета, Выборка, "Период,ЗаказНаЗавод,Событие,ДатаСобытия,Пользователь,ВидСобытия");
			
			#Область ОпределениеВесаСобытия
			
			ВесСобытия = 0;
			
			// Вес события определяется по регистру Scan_НастройкиРасчетаOrderIntake
			НайденныеСтрокиВесов = НастройкиРасчета.НайтиСтроки(Новый Структура("Событие", Выборка.Событие));
			Если НайденныеСтрокиВесов.Количество() > 0 Тогда
				ВесСобытия = НайденныеСтрокиВесов[0].ВесСобытия;
			Иначе
				ВесСобытия = 0;
			КонецЕсли;
			
			НоваяСтрокаРасчета.ВесСобытия = ВесСобытия;
			НоваяСтрокаРасчета.Остаток    = ТаблицаРасчета.Итог("ВесСобытия");
			
			#КонецОбласти
			
			#Область РасчетДатыOrderIntake
			
			ОстатокOrderIntake = ТаблицаРасчета.Итог("OrderIntake");
			
			// Событие - Локальный статус продукта не DELETED
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаНеDELETED") Тогда
				Если РасчетПрекращен Тогда
					РасчетПрекращен = Ложь;
					
					// Возврат Order Intake, отмененного событием Локальный статус продукта DELETED
					Если РасчетПрекращенOrderIntake Тогда
						РасчетПрекращенOrderIntake = Ложь;
						
						ДатаПоследнегоOrderIntake = Дата(1, 1, 1);
						
						ДанныеПоследнегоOrderIntake = ПоследнийOrderIntake(ТаблицаРасчета);
						Если ДанныеПоследнегоOrderIntake <> Неопределено Тогда
							ДатаПоследнегоOrderIntake = ДанныеПоследнегоOrderIntake.ДатаOrderIntake;
						КонецЕсли;
						
						НоваяСтрокаРасчета.OrderIntake     = 1;
						НоваяСтрокаРасчета.ДатаOrderIntake = ДатаПоследнегоOrderIntake;
					КонецЕсли;
					
					НоваяСтрокаРасчета.Комментарий = "Расчет возобновлен";
				Иначе
					// Если событие Локальный статус продукта не DELETED и набрался минимальный остаток весов - Order Intake
					Если  ОстатокOrderIntake = 0 
						И НоваяСтрокаРасчета.Остаток = МинимальныйОстатокOrderIntake 
						Тогда
						НоваяСтрокаРасчета.OrderIntake     = 1;
						НоваяСтрокаРасчета.ДатаOrderIntake = ДатаOrderIntakeПоКалендарю(Выборка.ДатаСобытия);
						НоваяСтрокаРасчета.Комментарий     = "Регистрация Order Intake при установке локального статуса продукта не DELETED";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если РасчетПрекращен Тогда
					// Если расчет прекращен, все поля обнуляются и устанавливается флажок
					НоваяСтрокаРасчета.ВесСобытия      = 0;
					НоваяСтрокаРасчета.Остаток         = 0;
					НоваяСтрокаРасчета.OrderIntake     = 0;
					НоваяСтрокаРасчета.ДатаOrderIntake = Дата(1, 1, 1);
					НоваяСтрокаРасчета.РасчетПрекращен = Истина;
					Продолжить;
				ИначеЕсли ПовторСобытияВТаблицеРасчета(ТаблицаРасчета) Тогда
					// Повтор события в двух строках подряд
					НоваяСтрокаРасчета.OrderIntake     = 0;
					НоваяСтрокаРасчета.ДатаOrderIntake = Дата(1, 1, 1);
					НоваяСтрокаРасчета.Комментарий     = "Повтор события";
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Событие - Подтверждение завода
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода") Тогда
				// Если завод подтвердил заказ на завод и набрался минимальный остаток весов - Order Intake
				Если  ОстатокOrderIntake = 0 
					И НоваяСтрокаРасчета.Остаток = МинимальныйОстатокOrderIntake 
					Тогда
					НоваяСтрокаРасчета.OrderIntake     = 1;
					НоваяСтрокаРасчета.ДатаOrderIntake = ДатаOrderIntakeПоКалендарю(Выборка.ДатаСобытия);
					НоваяСтрокаРасчета.Комментарий     = "Регистрация Order Intake при подтверждении завода";
				КонецЕсли;
			КонецЕсли;
			
			// Событие - Тип заказа не Open
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ТипЗаказаНеOpen") Тогда
				// Если заказ на завод становится Firm и набрался минимальный остаток весов - Order Intake
				Если  ОстатокOrderIntake = 0 
					И НоваяСтрокаРасчета.Остаток = МинимальныйОстатокOrderIntake 
					Тогда
					НоваяСтрокаРасчета.OrderIntake     = 1;
					НоваяСтрокаРасчета.ДатаOrderIntake = ДатаOrderIntakeПоКалендарю(Выборка.ДатаСобытия);
					НоваяСтрокаРасчета.Комментарий     = "Регистрация Order Intake при установке типа заказа не Open";
				КонецЕсли;
			КонецЕсли;
			
			// Событие - Поступление оплаты
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты") Тогда
				// Если поступила оплата и набрался минимальный остаток весов - Order Intake
				Если  ОстатокOrderIntake = 0 
					И НоваяСтрокаРасчета.Остаток = МинимальныйОстатокOrderIntake 
					Тогда
					НоваяСтрокаРасчета.OrderIntake     = 1;
					НоваяСтрокаРасчета.ДатаOrderIntake = ДатаOrderIntakeПоКалендарю(Выборка.ДатаСобытия);
					НоваяСтрокаРасчета.Комментарий     = "Регистрация Order Intake при поступлении оплаты";
				КонецЕсли;
			КонецЕсли;
			
			// Событие - Отмена оплаты
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОплаты") Тогда
				// Отмена Order Intake, если есть остаток
				Если ОстатокOrderIntake = 1 Тогда
					НоваяСтрокаРасчета.OrderIntake     = -1;
					НоваяСтрокаРасчета.ДатаOrderIntake = Дата(1, 1, 1);
					НоваяСтрокаРасчета.Комментарий     = "Отмена Order Intake при отмене оплаты";
				КонецЕсли;
			КонецЕсли;
			
			// Событие - Отгрузка
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки") Тогда
				// В зависимости от наличия Order Intake на момент события ситуация разная
				Если ОстатокOrderIntake = 0 Тогда
					// Отгрузка без оплаты или без выполнения всех условий
					НоваяСтрокаРасчета.OrderIntake     = 1;
					НоваяСтрокаРасчета.ДатаOrderIntake = ДатаOrderIntakeПоКалендарю(Выборка.ДатаСобытия);
					НоваяСтрокаРасчета.Комментарий     = "Регистрация Order Intake при отгрузке без выполнения всех условий";
				ИначеЕсли ОстатокOrderIntake = 1 Тогда
					// Если на момент отгрузки есть Order Intake, он отменяется
					НоваяСтрокаРасчета.OrderIntake     = -1;
					НоваяСтрокаРасчета.ДатаOrderIntake = Дата(1, 1, 1);
					НоваяСтрокаРасчета.Комментарий     = "Отмена Order Intake при отгрузке";
				КонецЕсли;
			КонецЕсли;
			
			// Событие - Отмена отгрузки
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОтгрузки") Тогда
				ДатаПоследнегоOrderIntake    = Дата(1, 1, 1);
				СобытиеПоследнегоOrderIntake = Неопределено;
				
				// В зависимости от наличия Order Intake на момент события ситуация разная
				Если ОстатокOrderIntake = 0 Тогда
					ДанныеПоследнегоOrderIntake = ПоследнийOrderIntake(ТаблицаРасчета);
					Если ДанныеПоследнегоOrderIntake <> Неопределено Тогда
						СобытиеПоследнегоOrderIntake = ДанныеПоследнегоOrderIntake.Событие;
						ДатаПоследнегоOrderIntake    = ДанныеПоследнегоOrderIntake.ДатаOrderIntake;
					КонецЕсли;
					
					// На момент отмены отгрузки Order Intake отсутствует
					Если СобытиеПоследнегоOrderIntake <> ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки") Тогда
						// Если событие последнего Order Intake - Поступление оплаты
						// Дата Order Intake = Дата предыдущего Order Intake
						НоваяСтрокаРасчета.OrderIntake     = 1;
						НоваяСтрокаРасчета.ДатаOrderIntake = ДатаПоследнегоOrderIntake;
						НоваяСтрокаРасчета.Комментарий     = "Возврат предыдущего Order Intake при отмене отгрузки";
					КонецЕсли;
				ИначеЕсли ОстатокOrderIntake = 1 Тогда
					ИсключаяСобытия = Новый Массив;
					ИсключаяСобытия.Добавить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаНеDELETED"));
					
					ДанныеПоследнегоOrderIntake = ПоследнийOrderIntake(ТаблицаРасчета, ИсключаяСобытия);
					Если ДанныеПоследнегоOrderIntake <> Неопределено Тогда
						СобытиеПоследнегоOrderIntake = ДанныеПоследнегоOrderIntake.Событие;
						ДатаПоследнегоOrderIntake    = ДанныеПоследнегоOrderIntake.ДатаOrderIntake;
					КонецЕсли;
					
					// На момент отмены отгрузки есть Order Intake
					Если СобытиеПоследнегоOrderIntake = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки") Тогда
						Если НоваяСтрокаРасчета.Остаток < МинимальныйОстатокOrderIntake Тогда
							// Отмена Order Intake зарегистрированного отгрузкой в кредит
							НоваяСтрокаРасчета.OrderIntake     = -1;
							НоваяСтрокаРасчета.ДатаOrderIntake = Дата(1, 1, 1);
							НоваяСтрокаРасчета.Комментарий     = "Отмена Order Intake зарегистрированного отгрузкой";
						ИначеЕсли НоваяСтрокаРасчета.Остаток = МинимальныйОстатокOrderIntake Тогда
							// Отгрузка отменяется, но после отгрузки набрался минимальный остаток OI
							НоваяСтрокаРасчета.OrderIntake     = 0;
							НоваяСтрокаРасчета.ДатаOrderIntake = ДатаOrderIntakeПоКалендарю(Выборка.ДатаСобытия);
							НоваяСтрокаРасчета.Комментарий     = "Обновление даты Order Intake при отмене отгрузки";
						КонецЕсли;
					ИначеЕсли СобытиеПоследнегоOrderIntake = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты") Тогда
						// Логика по событию отсутствует
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Событие - Расторжение
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаРасторжения") Тогда
				// Отмена Order Intake если есть остаток
				Если ОстатокOrderIntake = 1 Тогда
					НоваяСтрокаРасчета.OrderIntake     = -1;
					НоваяСтрокаРасчета.ДатаOrderIntake = Дата(1, 1, 1);
					НоваяСтрокаРасчета.Комментарий     = "Отмена Order Intake при расторжении СОП";
				КонецЕсли;
			КонецЕсли;
			
			// Событие - Локальный cтатус продукта DELETED
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаDELETED") Тогда
				// Расчет прекращается независимо от наличия Order Intake
				РасчетПрекращен = Истина;
				
				// Отмена Order Intake если есть остаток
				Если ОстатокOrderIntake = 0 Тогда
					РасчетПрекращенOrderIntake     = Ложь;
					НоваяСтрокаРасчета.OrderIntake = 0;
				ИначеЕсли ОстатокOrderIntake = 1 Тогда
					РасчетПрекращенOrderIntake     = Истина;
					НоваяСтрокаРасчета.OrderIntake = -1;
				КонецЕсли;
				
				// Дата Order Intake обнуляется всегда
				НоваяСтрокаРасчета.ДатаOrderIntake = Дата(1, 1, 1);
				НоваяСтрокаРасчета.Комментарий     = "Расчет прекращен";
			КонецЕсли;
						
			#КонецОбласти
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ЗаписьВРегистры
		
		НаборЗаписейРасчета.Отбор.ЗаказНаЗавод.Установить(ВыборкаЗаказНаЗавод.ЗаказНаЗавод);
		НаборЗаписейРасчета.Загрузить(ТаблицаРасчета);
		НаборЗаписейРасчета.Записать(Истина);
		
		НаборЗаписейOrderIntake = РегистрыСведений.Scan_OrderIntakeАльтернативный.СоздатьНаборЗаписей();
		НаборЗаписейOrderIntake.Отбор.ЗаказНаЗавод.Установить(ВыборкаЗаказНаЗавод.ЗаказНаЗавод);
		НаборЗаписейOrderIntake.Прочитать();
		
		ТекущиеЗаписиOrderIntake = НаборЗаписейOrderIntake.Выгрузить();
		
		НаборЗаписейOrderIntake.Очистить();
		
		ТаблицаOrderIntakeАльтернативный = Новый ТаблицаЗначений;
		ТаблицаOrderIntakeАльтернативный.Колонки.Добавить("Событие");
		ТаблицаOrderIntakeАльтернативный.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		Для Каждого СтрокаРасчета Из ТаблицаРасчета Цикл
			НоваяСтрокаOrderIntakeАльтернативный = ТаблицаOrderIntakeАльтернативный.Добавить();
			НоваяСтрокаOrderIntakeАльтернативный.Событие     = СтрокаРасчета.Событие;
			НоваяСтрокаOrderIntakeАльтернативный.ДатаСобытия = СтрокаРасчета.ДатаСобытия;
			
			Если ЗначениеЗаполнено(СтрокаРасчета.ДатаOrderIntake) Тогда
				НоваяСтрокаOrderIntakeАльтернативный = ТаблицаOrderIntakeАльтернативный.Добавить();
				НоваяСтрокаOrderIntakeАльтернативный.Событие     = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake");
				НоваяСтрокаOrderIntakeАльтернативный.ДатаСобытия = СтрокаРасчета.ДатаOrderIntake;
			КонецЕсли;
		КонецЦикла;
		ТаблицаOrderIntakeАльтернативный.Свернуть("Событие,ДатаСобытия");
		
		Для Каждого СтрокаOrderIntakeАльтернативный Из ТаблицаOrderIntakeАльтернативный Цикл
			НоваяЗаписьOrderIntake = НаборЗаписейOrderIntake.Добавить();
			НоваяЗаписьOrderIntake.Период               = СтрокаOrderIntakeАльтернативный.ДатаСобытия;
			НоваяЗаписьOrderIntake.ЗаказНаЗавод         = ВыборкаЗаказНаЗавод.ЗаказНаЗавод;
			НоваяЗаписьOrderIntake.ВидДаты              = СтрокаOrderIntakeАльтернативный.Событие;
			НоваяЗаписьOrderIntake.ИспользоватьВОтчетах = Истина;
			НоваяЗаписьOrderIntake.ИдентификаторЗаписи  = Новый УникальныйИдентификатор;
			НоваяЗаписьOrderIntake.Пользователь         = АвторизованныйПользователь;
		КонецЦикла;
		
		Попытка
			НаборЗаписейOrderIntake.Записать(Истина);
		Исключение
			НаборЗаписейOrderIntake.Очистить();
			НаборЗаписейOrderIntake.Загрузить(ТекущиеЗаписиOrderIntake);
			ЗаписьЖурналаРегистрации(СтрШаблон(Нстр("ru = 'Не удалось обновить записи в регистре Order Intake (альтернативный) по заказу на завод %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ВыборкаЗаказНаЗавод.ЗаказНаЗавод),
									УровеньЖурналаРегистрации.Ошибка, 
									Метаданные.РегистрыСведений.Scan_OrderIntakeАльтернативный,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Попытка
				НаборЗаписейOrderIntake.Записать(Истина);
				ЗаписьЖурналаРегистрации(СтрШаблон(Нстр("ru = 'Записи регистра Order Intake (альтернативный) по заказу на завод %1 восстановлены'", ОбщегоНазначения.КодОсновногоЯзыка()), ВыборкаЗаказНаЗавод.ЗаказНаЗавод),
									УровеньЖурналаРегистрации.Ошибка, 
									Метаданные.РегистрыСведений.Scan_OrderIntakeАльтернативный,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Исключение 
				// Rarus tenkam 29.06.2022 mantis 18726 АПК +++
				ЗаписьЖурналаРегистрации(СтрШаблон(Нстр("ru = 'Не удалось обновить записи в регистре Order Intake (альтернативный) по заказу на завод %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ВыборкаЗаказНаЗавод.ЗаказНаЗавод),
									УровеньЖурналаРегистрации.Ошибка, 
									Метаданные.РегистрыСведений.Scan_OrderIntakeАльтернативный,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				// Rarus tenkam 29.06.2022 mantis 18726 АПК ---
			КонецПопытки;
		КонецПопытки;
		
		#КонецОбласти
		
	КонецЦикла;
		
КонецПроцедуры

// Возвращает вид события OI по переданному событию OI
//
// Параметры:
//  Событие - ПеречислениеСсылка.Scan_ДатыДляФормированияОтчетаOI - событие OI для получения вида
//
// Возвращаемое значение:
//  ПеречислениеСсылка.Scan_ВидыСобытийOrderIntake
//
Функция ВидСобытияOrderIntake(Событие) Экспорт
	
	СоответствиеВидов = Новый Соответствие;
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.СобытиеЗаказаНаЗавод"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.СобытиеЗаявкиНаСОП"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОплаты"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.СобытиеЗаявкиНаСОП"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.СобытиеOrderIntake"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОтгрузки"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.СобытиеOrderIntake"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаРасторжения"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.СобытиеOrderIntake"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ТипЗаказаНеOpen"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.СобытиеЗаказаНаЗавод"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаНеDELETED"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.ГлобальноеСобытие"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаDELETED"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.ГлобальноеСобытие"));
	СоответствиеВидов.Вставить(ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake"), ПредопределенноеЗначение("Перечисление.Scan_ВидыСобытийOrderIntake.СобытиеOrderIntake"));
	
	Возврат СоответствиеВидов.Получить(Событие);
	
КонецФункции

#Область РегистрацияСобытий

// Добавление записи с датой ПодтверждениеЗавода в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьПодтверждениеЗавода(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(Продукт);
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи подтверждения завода в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Подтверждение завода регистрируется только в том случае, если ранее не было зарегистрировано.
	// Записи с флажком РасчетПрекращен игнорируются.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказНаЗавод);
	Запрос.УстановитьПараметр("П2", ДатаСобытия);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_РасчетOrderIntake.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода)
	|	И Scan_РасчетOrderIntake.ЗаказНаЗавод = &П1
	|	И Scan_РасчетOrderIntake.ДатаСобытия <= &П2
	|	И НЕ Scan_РасчетOrderIntake.РасчетПрекращен";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода);
	КонецЕсли;
	
КонецПроцедуры

// Добавление записи с датой ВнесениеОплаты в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьПоступлениеОплаты(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи поступления оплаты в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Поступление оплаты регистрируется только в том случае, если ранее оплата
	// еще не поступала, или была отменена.
	// Записи с флажком РасчетПрекращен игнорируются.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказНаЗавод);
	Запрос.УстановитьПараметр("П2", ДатаСобытия);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_РасчетOrderIntake.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	(Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты)
	|			ИЛИ Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОплаты))
	|	И Scan_РасчетOrderIntake.ЗаказНаЗавод = &П1
	|	И Scan_РасчетOrderIntake.ДатаСобытия <= &П2
	|	И НЕ Scan_РасчетOrderIntake.РасчетПрекращен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_РасчетOrderIntake.ДатаСобытия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() // Поступлений оплат не было
		Или Выборка.Событие = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ОтменаОплаты // Была отмена оплаты
		Тогда
		ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты);
	КонецЕсли;
	
КонецПроцедуры

// Добавление записи с датой ОтменаОплаты в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьОтменуОплаты(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи отмены оплаты в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Отмена оплаты регистрируется только в том случае, если до этого было поступление оплаты.
	// Записи с флажком РасчетПрекращен игнорируются.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказНаЗавод);
	Запрос.УстановитьПараметр("П2", ДатаСобытия);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_РасчетOrderIntake.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	(Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты)
	|			ИЛИ Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОплаты))
	|	И Scan_РасчетOrderIntake.ЗаказНаЗавод = &П1
	|	И Scan_РасчетOrderIntake.ДатаСобытия <= &П2
	|	И НЕ Scan_РасчетOrderIntake.РасчетПрекращен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_РасчетOrderIntake.ДатаСобытия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если  Выборка.Следующий() // До события были записи
		И Выборка.Событие = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты // Предыдущее событие - поступление оплаты
		Тогда
		ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ОтменаОплаты);
	КонецЕсли;
	
КонецПроцедуры

// Добавление записи с датой ДатаОтгрузки в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьОтгрузку(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи отгрузки в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Отгрузка регистрируется только в том случае, если ранее её еще не было, или она была отменена.
	// Записи с флажком РасчетПрекращен игнорируются.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказНаЗавод);
	Запрос.УстановитьПараметр("П2", ДатаСобытия);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_РасчетOrderIntake.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	(Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки)
	|			ИЛИ Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОтгрузки))
	|	И Scan_РасчетOrderIntake.ЗаказНаЗавод = &П1
	|	И Scan_РасчетOrderIntake.ДатаСобытия <= &П2
	|	И НЕ Scan_РасчетOrderIntake.РасчетПрекращен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_РасчетOrderIntake.ДатаСобытия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() // Отгрузок не было
		Или Выборка.Событие = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ОтменаОтгрузки // Была отмена отгрузки
		Тогда
		ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки);
	КонецЕсли;
	
КонецПроцедуры

// Добавление записи с датой ОтменаОтгрузки в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьОтменуОтгрузки(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи отмены отгрузки в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Отмена отгрузки регистрируется только в том случае, если до этого была отгрузка.
	// Записи с флажком РасчетПрекращен игнорируются.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказНаЗавод);
	Запрос.УстановитьПараметр("П2", ДатаСобытия);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_РасчетOrderIntake.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	(Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки)
	|			ИЛИ Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОтгрузки))
	|	И Scan_РасчетOrderIntake.ЗаказНаЗавод = &П1
	|	И Scan_РасчетOrderIntake.ДатаСобытия <= &П2
	|	И НЕ Scan_РасчетOrderIntake.РасчетПрекращен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_РасчетOrderIntake.ДатаСобытия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если  Выборка.Следующий() // До события были записи
		И Выборка.Событие = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки // Предыдущиее событие - отгрузка
		Тогда
		ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ОтменаОтгрузки);
	КонецЕсли;
	
КонецПроцедуры

// Добавление записи с датой ДатаРасторжения в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьРасторжение(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи расторжения в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Расторжение регистрируется без условий
	ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаРасторжения);
	
КонецПроцедуры

// Добавление записи с датой ТипЗаказаНеOpen в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьТипЗаказаНеOpen(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи тип заказа не Open в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Тип заказа не Open регистрируется только в том случае, если ранее не было зарегистрировано.
	// Записи с флажком РасчетПрекращен игнорируются.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказНаЗавод);
	Запрос.УстановитьПараметр("П2", ДатаСобытия);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_РасчетOrderIntake.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ТипЗаказаНеOpen)
	|	И Scan_РасчетOrderIntake.ЗаказНаЗавод = &П1
	|	И Scan_РасчетOrderIntake.ДатаСобытия <= &П2
	|	И НЕ Scan_РасчетOrderIntake.РасчетПрекращен";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ТипЗаказаНеOpen);
	КонецЕсли;
	
КонецПроцедуры

// Добавление записи с датой ЛокальныйCтатусПродуктаНеDELETED в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьЛокальныйCтатусПродуктаНеDELETED(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи локального статуса не DELETED в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Локальный статус продукта не DELETED регистрируется только в том случае, 
	// если ранее его еще не было, или он был отменен.
	// Записи с флажком РасчетПрекращен игнорируются.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказНаЗавод);
	Запрос.УстановитьПараметр("П2", ДатаСобытия);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_РасчетOrderIntake.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	(Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаНеDELETED)
	|			ИЛИ Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаDELETED))
	|	И Scan_РасчетOrderIntake.ЗаказНаЗавод = &П1
	|	И Scan_РасчетOrderIntake.ДатаСобытия <= &П2
	|	И НЕ Scan_РасчетOrderIntake.РасчетПрекращен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_РасчетOrderIntake.ДатаСобытия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() // Событий не было
		Или Выборка.Событие = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаDELETED // Было событие Локальный статус продукта DELETED
		Тогда
		ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаНеDELETED);
	КонецЕсли;
	
КонецПроцедуры

// Добавление записи с датой ЛокальныйCтатусПродуктаDELETED в регистр расчета
//
// Параметры:
//  ДатаСобытия	 - Дата - дата регистрации
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - ссылка на заказ
//  Продукт		 - СправочникСсылка.Scan_Изделия - ссылка на продукт
//
Процедура ЗарегистрироватьЛокальныйCтатусПродуктаDELETED(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи локального статуса DELETED в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Событие Локальный статус продукта DELETED регистрируется только в том случае, 
	// если до этого было Локальный статус продукта не DELETED.
	// Записи с флажком РасчетПрекращен игнорируются.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ЗаказНаЗавод);
	Запрос.УстановитьПараметр("П2", ДатаСобытия);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_РасчетOrderIntake.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	(Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаНеDELETED)
	|			ИЛИ Scan_РасчетOrderIntake.Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаDELETED))
	|	И Scan_РасчетOrderIntake.ЗаказНаЗавод = &П1
	|	И Scan_РасчетOrderIntake.ДатаСобытия <= &П2
	|	И НЕ Scan_РасчетOrderIntake.РасчетПрекращен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_РасчетOrderIntake.ДатаСобытия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если  Выборка.Следующий() // До события были записи
		И Выборка.Событие = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаНеDELETED // Предыдущее событие - Локальный статус продукта не DELETED
		Тогда
		ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Перечисления.Scan_ДатыДляФормированияОтчетаOI.ЛокальныйCтатусПродуктаDELETED);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет, возможна ли регистрация события Order Intake
//
// Параметры:
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод
//  Продукт - СправочникСсылка.Scan_Изделия
//
// Возвращаемое значение:
//  Булево - регистрация события возможна
//
Функция РегистрацияСобытияВозможна(ЗаказНаЗавод, Продукт)
	
	Возврат Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake")
			И Не (Продукт = Неопределено И ЗаказНаЗавод = Неопределено);
	
КонецФункции

// Записывает событие Order Intake в регистр Scan_РасчетOrderIntake
//
// Параметры:
//  ДатаСобытия - Дата - дата события
//  ЗаказНаЗавод - СправочникСсылка.Scan_ЗаказыНаЗавод - заказ, по которому записывается событие
//  Событие - ПеречислениеСсылка.Scan_ДатыДляФормированияОтчетаOI - записываемое событие
//
Процедура ЗаписатьСобытиеВРегистрРасчета(ДатаСобытия, ЗаказНаЗавод, Событие)
	
	МенеджерЗаписи = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьМенеджерЗаписи();
	// Событие всегда записывается на текущую дату
	МенеджерЗаписи.Период       = ТекущаяДатаСеанса();
	МенеджерЗаписи.ЗаказНаЗавод = ЗаказНаЗавод;
	МенеджерЗаписи.Событие      = Событие;
	МенеджерЗаписи.ДатаСобытия  = ДатаСобытия;
	// Новое событие записывается всегда с признаком КРасчету
	// При выполнении расчета флажок будет снят
	МенеджерЗаписи.КРасчету     = Истина;
	// Пользователь - всегда текущий
	МенеджерЗаписи.Пользователь = Пользователи.АвторизованныйПользователь();
	// Укрупненная классификация событий Order Intake
	МенеджерЗаписи.ВидСобытия   = ВидСобытияOrderIntake(Событие);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Возвращает веса событий Order Intake
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Событие - ПеречислениеСсылка.Scan_ДатыДляФормированияОтчетаOI
//   * ВесСобытия - Число
//
Функция ПолучитьНастройкиРасчетаOrderIntake()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_НастройкиРасчетаOrderIntake.Событие КАК Событие,
	|	Scan_НастройкиРасчетаOrderIntake.ВесСобытия КАК ВесСобытия
	|ИЗ
	|	РегистрСведений.Scan_НастройкиРасчетаOrderIntake КАК Scan_НастройкиРасчетаOrderIntake";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Возвращает заказы на завод, по которым необходимо выполнить расчет Order Intake
//
// Параметры:
//  ДатаНачала - Дата - дата, начиная с которой отбираются события Order Intake
//  ДатаОкончания - Дата - дата, заканчивая которой отбираются события Order Intake
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Scan_ЗаказыНаЗавод
//
Функция ПолучитьЗаказыДляРасчета(ДатаНачала, ДатаОкончания)
	
	ТипыЗаказаFirm = Перечисления.Scan_ТипыЗаказовНаЗавод.ТипыЗаказаFirm();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ДатаНачала);
	Запрос.УстановитьПараметр("П2", ДатаОкончания);
	Запрос.УстановитьПараметр("П3", ТипыЗаказаFirm);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Scan_РасчетOrderIntake.ЗаказНаЗавод КАК ЗаказНаЗавод
	|ПОМЕСТИТЬ ВТ_ЗаказыНаЗавод
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	(&П1 = НЕОПРЕДЕЛЕНО
	|			ИЛИ Scan_РасчетOrderIntake.Период >= &П1)
	|	И (&П2 = НЕОПРЕДЕЛЕНО
	|			ИЛИ Scan_РасчетOrderIntake.Период <= &П2)
	|	И Scan_РасчетOrderIntake.КРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказыНаЗавод.ЗаказНаЗавод КАК ЗаказНаЗавод
	|ИЗ
	|	ВТ_ЗаказыНаЗавод КАК ВТ_ЗаказыНаЗавод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних(
	|				,
	|				Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_ЗаказыНаЗавод.ЗаказНаЗавод КАК ЗаказНаЗавод
	|						ИЗ
	|							ВТ_ЗаказыНаЗавод КАК ВТ_ЗаказыНаЗавод)
	|					И Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод)) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
	|		ПО ВТ_ЗаказыНаЗавод.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ
	|ГДЕ
	|	ВЫРАЗИТЬ(Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение КАК Перечисление.Scan_ТипыЗаказовНаЗавод) В (&П3)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЗаказНаЗавод");
	
КонецФункции

// Проверяет повтор события в таблице расчета - два одинаковых события подряд
//
// Параметры:
//  ТаблицаРасчета
//
// Возвращаемое значение:
//  Булево - событие повторяется
//
Функция ПовторСобытияВТаблицеРасчета(ТаблицаРасчета)
	
	КоличествоСтрокРасчета = ТаблицаРасчета.Количество();
	
	Если КоличествоСтрокРасчета < 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИндексПредпоследнейСтрокиРасчета = КоличествоСтрокРасчета - 2;
	ИндексПоследнейСтрокиРасчета     = КоличествоСтрокРасчета - 1;
	
	Возврат ТаблицаРасчета[ИндексПредпоследнейСтрокиРасчета].Событие = ТаблицаРасчета[ИндексПоследнейСтрокиРасчета].Событие;
	
КонецФункции

// Определяет дату Order Inatke с учетом календарного графика
//
// Параметры:
//  ДатаOrderIntake - Дата - дата Order Intake без учета календарного графика
//
// Возвращаемое значение:
//  Дата - дата Order Intake с учетом календарного графика
//
Функция ДатаOrderIntakeПоКалендарю(ДатаOrderIntake)
	
	ДатаПоКалендарю = ДатаOrderIntake;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", Год(ДатаOrderIntake));
	Запрос.УстановитьПараметр("П2", НачалоДня(ДатаOrderIntake));
	Запрос.Текст = "ВЫБРАТЬ
	|	МИНИМУМ(КалендарныеГрафики.ДатаГрафика) КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ДатаГрафика >= &П2
	|	И КалендарныеГрафики.Год = &П1
	|	И КалендарныеГрафики.ДеньВключенВГрафик";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПоКалендарю = Выборка.ДатаГрафика;
	КонецЕсли;
	
	Возврат ДатаПоКалендарю;
	
КонецФункции

// Возвращает дату последнего по датам событий Order Intake 
//
//
// Параметры:
//  ТаблицаРасчета
//
// Возвращаемое значение:
//  Структура:
//  * Событие - ПеречислениеСсылка.Scan_ДатыДляФормированияОтчетаOI
//  * ДатаOrderIntake - Дата
//
Функция ПоследнийOrderIntake(ТаблицаРасчета, ИсключаяСобытия = Неопределено)
	
	Если ИсключаяСобытия = Неопределено Тогда
		ИсключаяСобытия = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ТаблицаРасчета);
	Запрос.УстановитьПараметр("П2", ИсключаяСобытия);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаРасчета.Событие КАК Событие,
	|	ТаблицаРасчета.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаРасчета.ДатаOrderIntake КАК ДатаOrderIntake
	|ПОМЕСТИТЬ ВТ_СобытияOrderIntake
	|ИЗ
	|	&П1 КАК ТаблицаРасчета
	|ГДЕ
	|	ТаблицаРасчета.ДатаOrderIntake <> ДатаВремя(1, 1, 1) И НЕ ТаблицаРасчета.Событие В (&П2)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_СобытияOrderIntake.Событие КАК Событие,
	|	ВТ_СобытияOrderIntake.ДатаСобытия КАК ДатаСобытия,
	|	ВТ_СобытияOrderIntake.ДатаOrderIntake КАК ДатаOrderIntake
	|ИЗ
	|	ВТ_СобытияOrderIntake КАК ВТ_СобытияOrderIntake
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Новый Структура("Событие,ДатаOrderIntake", Выборка.Событие, Выборка.ДатаOrderIntake);
	КонецЕсли;
	
КонецФункции

#КонецОбласти