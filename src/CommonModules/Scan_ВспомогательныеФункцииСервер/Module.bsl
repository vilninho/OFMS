// Процедура производит инициализацию пунктов меню выбора хозяйственной операции в форме объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ИнициализироватьМенюВыбораХозОперации(Форма) Экспорт
	
	//Проверим ключ, лицензию и пр.
	//ПроверитьЗащиту();
	
	МенюВыбораХозОпераций = Форма.Элементы.Найти("ВыборХозОперации");
	
	Если МенюВыбораХозОпераций=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокХозОпераций = Справочники.Scan_ХозяйственныеОперации.ПолучитьСписокХозОпераций(Форма.Объект.Ссылка);    
	
	Если СписокХозОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейОперации = СписокХозОпераций.Получить(0).Значение;
	
	Если СписокХозОпераций.Количество() >= 1 Тогда
		
		Для каждого ЭлементСписка Из СписокХозОпераций Цикл
			
			ИмяОперации = "ХозОперация"+ЭлементСписка.Значение;
			
			КомандаОперации = Форма.Команды.Добавить(ИмяОперации);
			КомандаОперации.Заголовок                 = ЭлементСписка.Представление;
			КомандаОперации.Действие                  = "ХозОперацияПриИзменении";
			КомандаОперации.ИзменяетСохраняемыеДанные = ИСТИНА;
			
			КнопкаОперации = Форма.Элементы.Добавить(ИмяОперации, Тип("КнопкаФормы"), Форма.Элементы.ВыборХозОперации);
			КнопкаОперации.ИмяКоманды = ИмяОперации;
			КнопкаОперации.Пометка    = ЭлементСписка.Пометка;
			
			Если ЭлементСписка.Пометка Тогда
				ИмяТекущейОперации = ИмяОперации;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.ХозОперация) Тогда
		ИмяТекущейОперации = "ХозОперация"+ Форма.Объект.ХозОперация.ИмяПредопределенныхДанных;
	Иначе
		Форма.Объект.ХозОперация = ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации."+СтрЗаменить(ИмяТекущейОперации,"ХозОперация",""));
	КонецЕсли;
	
	Для каждого КнопкаОперации Из Форма.Элементы.ВыборХозОперации.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя=ИмяТекущейОперации);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьМенюВыбораХозОперации()

// Производит добавление команды с указанными параметрым в форму.
//
// Параметры:
//  Форма                 - УправляемаяФорма  - Форма, в которую производиться добавление команды.
//  ИмяКоманды            - Строка            - Имя добавляемой команды.
//  ИмяГруппы             - Строка            - Имя группы в которую следует поместить команду.
//  Картинка              - Картинка          - Содержит картинку команды.
//  Заголовок             - Строка            - Содержит отображаемый текст команды.
//  Подсказка             - Строка            - Содержит подсказку команды.
//  ТолькоВоВсехДействиях - Булево            - Указывает, следует ли скрывать кнопку в подменю "Все действия".
//  МестоРасположения     - Строка            - Имя элемента, перед которым нужно разместить команду.
//  Действие              - Строка            - Содержит имя процедуры обработчика команды.
//  Отображение           - ОтображениеКнопки - Указывает вид отображения связанной кнопки по умолчанию.
//  Суффикс               - Строка            - Суффикс будет добавлен к имени создаваемой кнопки.
//  ИзменяетСохраняемыеДанные - Булево        - Признак того, что выполнение команды может привести к изменению данных
//
Функция ДобавитьКоманду(Форма, ИмяКоманды, ИмяГруппы, Картинка, Заголовок=Неопределено, Подсказка=Неопределено, ТолькоВоВсехДействиях=ИСТИНА, МестоРасположения=Неопределено, Действие="Подключаемый_ОбработкаКомандыФормы", Отображение=Неопределено, Суффикс="", СочетаниеКлавиш = Неопределено, ИзменяетСохраняемыеДанные=ЛОЖЬ, Доступность=ИСТИНА) Экспорт
	
	//Проверим ключ, лицензию и пр.
	//ПроверитьЗащиту();
	
	// Производим добавление команды в форму
	КомандаФормы = Форма.Команды.Найти(ИмяКоманды);
	Если КомандаФормы=Неопределено Тогда
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок                 = ?(Заголовок=Неопределено, ИмяКоманды, Заголовок);
		КомандаФормы.Подсказка                 = ?(Подсказка=Неопределено, КомандаФормы.Заголовок, Подсказка);
		КомандаФормы.Отображение               = ?(Отображение=Неопределено, ОтображениеКнопки.Авто, Отображение);
		КомандаФормы.Действие                  = Действие;
		КомандаФормы.ИзменяетСохраняемыеДанные = ИзменяетСохраняемыеДанные;
		
		Если Картинка <> Неопределено Тогда
			КомандаФормы.Картинка = Картинка;
		КонецЕсли;
		Если СочетаниеКлавиш<>Неопределено Тогда
			КомандаФормы.СочетаниеКлавиш = СочетаниеКлавиш;
		КонецЕсли;
		
	КонецЕсли;
	
	// Производим добавление кнопки в форму и связываем ее с командой
	КнопкаФормы = Форма.Элементы.Найти(ИмяКоманды+Суффикс);
	Если КнопкаФормы=Неопределено Тогда
		КнопкаФормы = Форма.Элементы.Добавить(ИмяКоманды+Суффикс, Тип("КнопкаФормы"), Форма.Элементы[ИмяГруппы]);
		КнопкаФормы.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	// Производим настройку параметров добавленной кнопки
	КнопкаФормы.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
	КнопкаФормы.Доступность           = Доступность;
	
	// Произведем перемещение кнопки если это требуется
	Если ЗначениеЗаполнено(МестоРасположения) Тогда
		Форма.Элементы.Переместить(КнопкаФормы, Форма.Элементы[ИмяГруппы], Форма.Элементы[МестоРасположения]);
	КонецЕсли;
	
	// Возвращаем элемент формы связанный с добавленной командой
	Возврат КнопкаФормы;
	
КонецФункции // ДобавитьКоманду()

// Общий обработчик события настройки параметров выбора элементов управления диалога в зависимости от значений реквизитов.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура НастроитьПараметрыВыбораЭлементовФормыДокументы(Форма) Экспорт
	
	//rarus tenkam 29.09.2016 mantis 7183 ++ (закомментировала старое для универсальности)
	
	// rarus tenkam 27.06.2019 mantis 14427 +++
	//ЭтоФормаБыстрогоВвода = (Форма.ИмяФормы = "ОбщаяФорма.Scan_ФормаЗаполненияЗаявкиНаДействие");
	ЭтоФормаБыстрогоВвода = Ложь; 	// Нет больше такой формы
	// rarus tenkam 27.06.2019 mantis 14427 ---
	
	ХозОперация = ?(ЭтоФормаБыстрогоВвода, Форма.ХозяйственнаяОперация, Форма.Объект.ХозОперация);	//желательно переименовать реквизит на форме быстрого ввода!
	
	Если ЭтоФормаБыстрогоВвода ИЛИ ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		//rarus tenkam 26.10.2016 mantis 7750 (баги с отображением, все переделала) ++
		
		//rarus tenkam: теперь блоки не по ХО, а по реквизитам формы
		
		//// ГРУЗОПОЛУЧАТЕЛЬ											
		Форма.Элементы.Грузополучатель.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 		//rarus tenkam 14.08.2017 mantis 9319 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		
		//// ДОГОВОР											
		Форма.Элементы.Договор.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 		//rarus tenkam 14.08.2017 mantis 9319 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		
		//// ДАТА ДОСТАВКИ (ПЛАНОВАЯ)
		Форма.Элементы.ДатаДоставкиПлановая.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		
		//// ВРЕМЯ ДОСТАВКИ												
		Форма.Элементы.ВремяДоставки.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		
		//// МЕСТО ДОСТАВКИ												
		Форма.Элементы.МестоДоставки.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ	//tenkam 7750 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ	//tenkam 16.01.2017 mantis 8172 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ	//tenkam 7750 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ	//tenkam 16.01.2017 mantis 8172 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ	//tenkam 7750 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);	//tenkam 16.01.2017 mantis 8172 +
		                                		               		
		//// СПОСОБ ДОСТАВКИ и ПРИЕМ В ВЫХ. ДНИ
		Форма.Элементы.ГруппаСпособДоставки.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		
		//// ХРАНИТЕЛЬ И ДАТЫ												
		Форма.Элементы.ГруппаХранитель2ИДаты.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 		//rarus tenkam 14.08.2017 mantis 9319 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		
		////ДАТА ПРОДАЖИ
		Форма.Элементы.ДатаПродажи.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 		//rarus tenkam 14.08.2017 mantis 9319 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		
		////ВРЕМЯ ПРОДАЖИ
		Форма.Элементы.ВремяПродажи.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 		//rarus tenkam 14.08.2017 mantis 9319 +
												ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК); 		//rarus tenkam 26.09.2017 mantis 10742 +
		//// ДАТА ВЫКУПА
		//Видимость
		Форма.Элементы.ДатаВыкупа.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ		
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		//Заголовок
		Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение Тогда
			Форма.Элементы.ДатаВыкупа.Заголовок  = "Дата выкупа и постановки на хранение";
		Иначе
			Форма.Элементы.ДатаВыкупа.Заголовок  = "Дата выкупа";
		КонецЕсли;
		
		//// ПОДРЯДЧИК и ДОГОВОР С ПОДРЯДЧИКОМ
		Форма.Элементы.ГруппаПодрядчикИДоговорСПодрядчиком.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		
		//// ДАТА ПЕРЕДАЧИ В ПРОИЗВОДСТВО
		Форма.Элементы.ДатаПередачиВПроизводство.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство);
		
		//rarus tenkam 24.01.2017 mantis 8172 +++
		//// ВРЕМЯ ПЕРЕДАЧИ В ПРОИЗВОДСТВО
		Форма.Элементы.ВремяПередачиВПроизводство.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство);
		//rarus tenkam 24.01.2017 mantis 8172 ---
		
		//// ДАТА ПОРУЧЕНИЯ
		//Видимость
		Форма.Элементы.ДатаИВремяПоручения.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		// Заголовок
		Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение Тогда
			Форма.Элементы.ДатаИВремяПоручения.Заголовок = "Дата постановки на хранение";
		ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ 
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство Тогда
			Форма.Элементы.ДатаИВремяПоручения.Заголовок = "Дата снятия с хранения";
		ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу Тогда 
			Форма.Элементы.ДатаИВремяПоручения.Заголовок = "Дата снятия с хранения и передачи на хранение 3-му лицу";
		ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу Тогда 
			Форма.Элементы.ДатаИВремяПоручения.Заголовок = "Дата передачи на хранение 3-му лицу";
		Иначе
			Форма.Элементы.ДатаИВремяПоручения.Заголовок = "Дата поручения";
		КонецЕсли;
		// Только просмотр
		Форма.Элементы.ДатаИВремяПоручения.ТолькоПросмотр = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
		//ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ	//tenkam 7609 +	
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство);
		
		//// ВРЕМЯ ПОРУЧЕНИЯ
		// Видимость
		Форма.Элементы.ВремяПоручения.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		// Заголовок
		Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение Тогда
			Форма.Элементы.ВремяПоручения.Заголовок = "Время постановки на хранение";
		ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
			ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК Тогда
			Форма.Элементы.ВремяПоручения.Заголовок = "Время снятия с хранения";
		ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу Тогда 
			Форма.Элементы.ВремяПоручения.Заголовок = "Время снятия с хранения и передачи на хранение 3-му лицу";
		ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу Тогда 
			Форма.Элементы.ВремяПоручения.Заголовок = "Время передачи на хранение 3-му лицу";
		Иначе
			Форма.Элементы.ВремяПоручения.Заголовок = "Время поручения";
		КонецЕсли;
		
		//// ХРАНИТЕЛЬ
		Форма.Элементы.Хранитель.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		
		//// КОНТАКТНЫЕ ЛИЦА
		Форма.Элементы.КонтактныеЛица.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 		//rarus tenkam 14.08.2017 mantis 9319 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);	//rarus tenkam  01.11.2016 mantis 7609 + 
		// Заголовок группы "Информация по контактным лицам грузополучателей"
		Если (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу  ИЛИ
			ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу) Тогда		//rarus tenkam 01.11.2016 mantis 7609 +
			Форма.Элементы.ГруппаКонтактныеЛица.Заголовок = "Контактные лица хранителя 2";
		Иначе
			Форма.Элементы.ГруппаКонтактныеЛица.Заголовок = "Информация по контактным лицам грузополучателей";	
		КонецЕсли;
		
		//// КОЛОНКА "СТАТУС ИЗДЕЛИЯ"
		Форма.Элементы.ПродуктыПоЗаявкеСтатусИзделия.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		
		//// ДАТА ПОЛУЧЕНИЯ
		// Видимость
		Форма.Элементы.ДатаПолучения.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		// Заголовок
		Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК Тогда
			Форма.Элементы.ДатаПолучения.Заголовок = "Дата снятия с хранения";
		Иначе
			Форма.Элементы.ДатаПолучения.Заголовок = "Дата получения";	
		КонецЕсли;
		// Только просмотр
		Форма.Элементы.ДатаПолучения.ТолькоПросмотр = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство); 
		//rarus tenkam 08.02.2017 mantis 8331 ---
		
		//// ВРЕМЯ ПОЛУЧЕНИЯ
		// Видимость
		Форма.Элементы.ВремяПолучения.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		// Заголовок
		Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК Тогда
			Форма.Элементы.ВремяПолучения.Заголовок = "Время снятия с хранения";
		Иначе
			Форма.Элементы.ВремяПолучения.Заголовок = "Время получения";	
		КонецЕсли;
		// Только просмотр
		Форма.Элементы.ВремяПолучения.ТолькоПросмотр = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство);
		//rarus tenkam 08.02.2017 mantis 8331 ---
		               		
		//// МЕСТО ПОЛУЧЕНИЯ
		// Видимость
		Форма.Элементы.МестоПолучения.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ	//tenkam 16.01.2017 mantis 8172 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ	//tenkam 7750 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ	//tenkam 7750 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ	//tenkam 16.01.2017 mantis 8172 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ	//tenkam 7750 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 		//rarus tenkam 14.08.2017 mantis 9319 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);	//tenkam 16.01.2017 mantis 8172 +
				
		//Заголовок
		Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
			ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь Тогда 		//rarus tenkam 14.08.2017 mantis 9319 +
			Форма.Элементы.МестоПолучения.Заголовок = "Место продажи";	
		Иначе
			Форма.Элементы.МестоПолучения.Заголовок = "Место получения";	
		КонецЕсли;
		
		//// ГРУЗООТПРАВИТЕЛЬ
		Форма.Элементы.Грузоотправитель.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 		//rarus tenkam 14.08.2017 mantis 9319 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		
		
		// rarus tenkam 07.09.2018 mantis 13482 +++
		Форма.Элементы.ВыездСотрудникаОЛ.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);  		
		// rarus tenkam 07.09.2018 mantis 13482 ---
		
		//rarus tenkam 07.02.2017 mantis 8304 +++		
		//// КНОПКА ПРИКРЕПИТЬ МХ и М-15
		Форма.Элементы.ФормаПрикрепитьМХИМ15.ТолькоВоВсехДействиях = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК);
		//rarus tenkam 07.02.2017 mantis 8304 ---
		
		//rarus tenkam 14.08.2017 bug +++
		Форма.Элементы.МестоПолученияСтанцияДилера.Видимость = Форма.Элементы.МестоПолучения.Видимость;	
		Форма.Элементы.МестоДоставкиСтанцияДилера.Видимость = Форма.Элементы.МестоДоставки.Видимость;
		//rarus tenkam 14.08.2017 ---
		
		///////////////////////////////////
		//// КОМАНДЫ ПЕЧАТИ
		// rarus agar 26.05.2021 16927 ++
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_М15.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
		//																		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
		//																		ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство);	//rarus tenkam 08.02.2017 mantis 8331 +
		Scan_ЗаявкаНаДействиеПечать_М15Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
													ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
													ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_М15", "Видимость", Scan_ЗаявкаНаДействиеПечать_М15Видимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_ПередачаВПроизводство.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
		//																						ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство);	//rarus tenkam 08.02.2017 mantis 8331 +
		Scan_ЗаявкаНаДействиеПечать_ПередачаВПроизводствоВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
																	  ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_ПередачаВПроизводство", "Видимость", Scan_ЗаявкаНаДействиеПечать_ПередачаВПроизводствоВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицуВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу", "Видимость", Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицуВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПередачаТК.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК);
		Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПередачаТКВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПередачаТК", "Видимость", Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПередачаТКВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПродажаТретьемуЛицу.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу);
		Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПродажаТретьемуЛицуВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПродажаТретьемуЛицу", "Видимость", Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаИПродажаТретьемуЛицуВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК);
		Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТКВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК", "Видимость", Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТКВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаСПостановкойНаХранение.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение);
		Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаСПостановкойНаХранениеВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаСПостановкойНаХранение", "Видимость", Scan_ЗаявкаНаДействиеПечать_ПокупкаУПоставщикаСПостановкойНаХранениеВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_ПостановкаНаХранение.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
		//																						ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение);	//rarus tenkam 08.02.2017 mantis 8331 +
		Scan_ЗаявкаНаДействиеПечать_ПостановкаНаХранениеВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
																	ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_ПостановкаНаХранение", "Видимость", Scan_ЗаявкаНаДействиеПечать_ПостановкаНаХранениеВидимость); 
																										
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаВПроизводство.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство);
		Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаВПроизводствоВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаВПроизводство", "Видимость", Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаВПроизводствоВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу);
		Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицуВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу", "Видимость", Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицуВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаТК.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК);
		Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаТКВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаТК", "Видимость", Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПередачаТКВидимость); 
				
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПродажаТретьемуЛицу.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу);
		Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПродажаТретьемуЛицуВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПродажаТретьемуЛицу", "Видимость", Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияИПродажаТретьемуЛицуВидимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияПродажаТретьемуЛицуИПередачаТКВидимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК", "Видимость", Scan_ЗаявкаНаДействиеПечать_СнятиеСХраненияПродажаТретьемуЛицуИПередачаТКВидимость); 
		
		//rarus tenkam 26.10.2016 mantis 7750 (больше 50 багов с отображением) --
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_МХ3.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
		//																		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
		//																		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		//																		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
		//																		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК); //rarus sergei 06.12.2016 mantis 7164+
		Scan_ЗаявкаНаДействиеПечать_МХ3Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
										    		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
													 ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
													 ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
													 ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_МХ3", "Видимость", Scan_ЗаявкаНаДействиеПечать_МХ3Видимость); 
		
		//Форма.Элементы.ФормаДокументScan_ЗаявкаНаДействиеПечать_МХ1.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
		//																		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
		//																		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ		//rarus tenkam 08.02.2017 mantis 8331 +
		//																		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
		//																		 ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу); //rarus sergei 06.12.2016 mantis 7164+
		Scan_ЗаявкаНаДействиеПечать_МХ1Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
													 ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
													 ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
													 ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
													 ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументScan_ЗаявкаНаДействиеПечать_МХ1", "Видимость", Scan_ЗаявкаНаДействиеПечать_МХ1Видимость); 
		// rarus agar 26.05.2021 16927 --
		
		//rarus sergei 02.12.2016 mantis 8057++
		///////////////////////////////////
		//// КОМАНДА СОЗДАТЬНАОСНОВАНИИЗАЯВКУПЕРЕВОЗЧИКУ
		//ВИДИМОСТЬ
		//Форма.Элементы.ФормаСоздатьНаОсновании.ПодчиненныеЭлементы.ФормаДокументScan_ЗаявкаПеревозчикуСоздатьНаОсновании.Видимость = (ХозОперация <> Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение);
		Форма.Элементы.ФормаСоздатьНаОсновании.Видимость = (ХозОперация <> Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение);
		//rarus sergei 02.12.2016 mantis 8057--
		
		
		//	ИЛИ ХозОперация = Справочники.Scan_ХозяйственныеОперации.ЗаявкаНаВыкупИПередачуТК 
		//	ИЛИ ХозОперация = Справочники.Scan_ХозяйственныеОперации.ЗаявкаНаВыкупИПродажуТретьимЛицам 
		//	ИЛИ ХозОперация = Справочники.Scan_ХозяйственныеОперации.ЗаявкаНаВыкупПродажуТретьимЛицамИПередачуТК Тогда
		//	
		//	Форма.Элементы.ГруппаДатаВыкупаИПодрядчик.Видимость = Истина;
		//	Форма.Элементы.ДатаПередачиВПроизводство.Видимость = Ложь;
		//	Форма.Элементы.ДатаВыкупа.Видимость = Истина;                                   
		//	Форма.Элементы.ДатаПродажи.Видимость = Ложь;
		//ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство 
		//	ИЛИ ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство Тогда
		//	
		//	Форма.Элементы.ГруппаДатаВыкупаИПодрядчик.Видимость = Истина;
		//	Форма.Элементы.ДатаПередачиВПроизводство.Видимость = Истина;
		//	Форма.Элементы.ДатаВыкупа.Видимость = Ложь;
		//	Форма.Элементы.ДатаПродажи.Видимость = Ложь;
		//Иначе 
		//	Форма.Элементы.ГруппаДатаВыкупаИПодрядчик.Видимость = Ложь;
		//	Форма.Элементы.ДатаПродажи.Видимость = Ложь;
		//КонецЕсли;
		//rarus sergei 03.10.2016 mantis 7162 --
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.Scan_ДвижениеИзделий") Тогда
		Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.ВводНачальныхОстатков Тогда
			Форма.Элементы.ДатаПрихода.Заголовок = "Дата прихода";
			Форма.Элементы.ДатаПрихода.Доступность = Ложь;
			Форма.Элементы.СоставЗаявкиДатаПрихода.ТолькоПросмотр = Ложь;
			Форма.Элементы.СоставЗаявкиДатаПрихода.Заголовок = "Дата прихода";
		ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПоступлениеНаСклад Тогда
			Форма.Элементы.ДатаПрихода.Заголовок = "Дата прихода";
			Форма.Элементы.ДатаПрихода.Доступность = Истина;
			Форма.Элементы.СоставЗаявкиДатаПрихода.ТолькоПросмотр = Истина;
			Форма.Элементы.СоставЗаявкиДатаПрихода.Заголовок = "Дата прихода";
		ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.УбытиеИзУчета Тогда
			Форма.Элементы.ДатаПрихода.Заголовок = "Дата убытия";
			Форма.Элементы.ДатаПрихода.Доступность = Истина;
			Форма.Элементы.СоставЗаявкиДатаПрихода.ТолькоПросмотр = Истина;
			Форма.Элементы.СоставЗаявкиДатаПрихода.Заголовок = "Дата убытия";
		КонецЕсли;
	КонецЕсли;	
	//rarus tenkam 29.09.2016 mantis 7183 --

КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормыДокументы()

//////

Процедура TimeoutWScript(Секунды) Экспорт
	WScript = Новый COMОбъект("WScript.Shell");
	WScript.Run("ping 127.0.0.1 -n " + Секунды, 0, 1);
КонецПроцедуры 

//rarus sergei 08.09.2016 mantis 7167 ++
//Производит проверку и корректировку статуса документа ЗаявкаНаДействие по статусам входящих в заявку продуктов 
Процедура НастроитьСтатусДокументаЗаявкаНаДействие(Документ, ПрямаяПродажа = Ложь) Экспорт //rarus bonmak 03.11.2020 14375 добавил второй параметр
	УстановитьПривилегированныйРежим(ИСтина);
	Если Документ.Сторнирован <> Истина Тогда
	
		ФлагНовая = Ложь;
		ФлагСогласованиеДоставки = Ложь;
		ФлагДоставкаПодтверждена = Ложь;
		ФлагИсполнена = Ложь;
		НаборЗаписей = РегистрыСведений.Scan_КорректировкаИнформацииПоЗаявкам.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(Документ); 
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл 
			Если Запись.СтатусИзделия = Перечисления.Scan_СтатусыИзделий.Новая Тогда
				ФлагНовая = Истина;	
			ИначеЕсли Запись.СтатусИзделия = Перечисления.Scan_СтатусыИзделий.СогласованиеДоставки Тогда	
			   	ФлагСогласованиеДоставки = Истина;
			ИначеЕсли Запись.СтатусИзделия = Перечисления.Scan_СтатусыИзделий.ДоставкаПодтверждена Тогда
				ФлагДоставкаПодтверждена = Истина;
			//rarus tenkam 06.10.2016 mantis 7183 ++
			//КонецЕсли; 
			ИначеЕсли Запись.СтатусИзделия = Перечисления.Scan_СтатусыИзделий.Исполнена Тогда
				ФлагИсполнена = Истина;
			КонецЕсли;
			//rarus tenkam 06.10.2016 mantis 7183 --
		КонецЦикла;
		
		//rarus tenkam 06.10.2016 mantis 7183 ++
		//Если ФлагНовая И НЕ ФлагСогласованиеДоставки И НЕ ФлагДоставкаПодтверждена И НЕ ФлагИсполнена Тогда
		//	ДокОбъект = Документ.ПолучитьОбъект();
		//	ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Новая;  
		//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//ИначеЕсли ФлагИсполнена И НЕ ФлагСогласованиеДоставки И НЕ ФлагДоставкаПодтверждена И НЕ ФлагНовая Тогда
		//	ДокОбъект = Документ.ПолучитьОбъект();
		//	ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена;  
		//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//ИначеЕсли ФлагДоставкаПодтверждена И НЕ	ФлагНовая И НЕ ФлагСогласованиеДоставки И НЕ ФлагИсполнена Тогда
		//	ДокОбъект = Документ.ПолучитьОбъект();
		//	ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Подтверждена;  
		//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//Иначе
		//	ДокОбъект = Документ.ПолучитьОбъект();
		//	ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе;  
		//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//КонецЕсли; 		
		СтарыйСтатусЗаявки = Документ.СтатусЗаявки;		//rarus tenkam 08.02.2017 mantis 8331 + 
		ДокОбъект = Документ.ПолучитьОбъект();
		
		Если ФлагНовая И НЕ ФлагСогласованиеДоставки И НЕ ФлагДоставкаПодтверждена И НЕ ФлагИсполнена Тогда
			ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Новая;  
		ИначеЕсли ФлагИсполнена И НЕ ФлагСогласованиеДоставки И НЕ ФлагДоставкаПодтверждена И НЕ ФлагНовая Тогда
			//rarus tenkam 08.02.2017 mantis 8331 +++
			Если ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
				ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство Тогда
				// rarus tenkam 15.07.2020 mantis 16322 +++
				// Статус ДоставкаЗавершена устанавливать только из статуса ЗаявкаОтправлена
				Если СтарыйСтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ЗаявкаОтправлена Тогда
					ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена;
				Иначе 
					ДокОбъект.СтатусЗаявки = СтарыйСтатусЗаявки;
				КонецЕсли;
				
				// rarus tenkam 15.07.2020 mantis 16322 ---
				//rarus bonmak 11.12.2019 15082 ++
			ИначеЕсли ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК Тогда
				//rarus bonmak 11.12.2019 15082 --
				
				ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена;
			Иначе
			//rarus tenkam 08.02.2017 mantis 8331 ---
			
				//rarus tenkam 26.02.2017 mantis 7177 +++
				Если Документ.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ				
					Документ.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
					Документ.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК Тогда		//rarus tenkam 26.09.2017 mantis 10742 +
					//rarus bonmak 03.11.2020 14375 ++
					Если НЕ ПрямаяПродажа Тогда
						Если Документ.Ссылка.ПродуктыПоЗаявке.Количество() > 0 Тогда 
							ПрямаяПродажа = Scan_ВспомогательныеФункцииСервер.ПолучитьВидПродажи(Документ.Ссылка.ПродуктыПоЗаявке[0].Изделие);
						КонецЕсли;
					КонецЕсли;
					//rarus bonmak 03.11.2020 14375 --

					//все изделия в статусе "Исполнена", но нужно также проверить даты продажи
					Если ЕстьДатаПродажиПоВсемИзделиямЗаявки(Документ, ПрямаяПродажа) Тогда  //rarus bonmak 03.11.2020 14375 добавил второй параметр
						//rarus bonmak 11.12.2019 15082 ++
						//было ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена;
						Если Документ.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК Тогда	
							ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена;
						Иначе
							ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена;
						КонецЕсли;
						//rarus bonmak 11.12.2019 15082 --
					Иначе
						ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Подтверждена;
					КонецЕсли;
				Иначе
				//rarus tenkam 26.02.2017 mantis 7177 ---
					ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена;	 
				КонецЕсли;		//rarus tenkam 26.02.2017 mantis 7177 +
			КонецЕсли;
		ИначеЕсли ФлагДоставкаПодтверждена И НЕ	ФлагНовая И НЕ ФлагСогласованиеДоставки И НЕ ФлагИсполнена Тогда
			// rarus tenkam 15.07.2020 mantis 16322 +++
			Если (ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ
				ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство) И
				СтарыйСтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ЗаявкаОтправлена Тогда
				ДокОбъект.СтатусЗаявки = СтарыйСтатусЗаявки;
			Иначе
				// rarus tenkam 15.07.2020 mantis 16322 ---
			    ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Подтверждена;
			КонецЕсли;
		Иначе
			ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе;  
		КонецЕсли; 
		//rarus tenkam 06.10.2016 mantis 7183 ++
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//УстановитьДатуПередачиДилеру(Документ);	//rarus tenkam 27.02.2017 mantis 8415 + 	//rarus tenkam 08.11.2017 mantis 11774 + (закомментировала)

		//rarus tenkam 08.02.2017 mantis 8331 +++
		// При установке статуса "Подтверждена" должно отправляться напоминание
		Если (ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство) И 
			ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Подтверждена И СтарыйСтатусЗаявки <> ДокОбъект.СтатусЗаявки Тогда
			ТекстНапоминания = "Необходимо отправить контрагенту документ " + ДокОбъект.Ссылка;
			СформироватьНапоминаниеПользователямПоПраву("УведомлятьОНеобходимостиОтправитьЗаявку", ТекстНапоминания, ДокОбъект.Ссылка);
		ИначеЕсли (ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство
			//rarus bonmak 11.12.2019 15082 ++
			ИЛИ ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК
			ИЛИ ДокОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК)
			//rarus bonmak 11.12.2019 15082 --
			И ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена Тогда
			ОбновитьСтатусЗаявкиНаДействие(ДокОбъект.Ссылка);
		КонецЕсли;
		//rarus tenkam 08.02.2017 mantis 8331 ---
	КонецЕсли;
КонецПроцедуры
 
//Процедура производит сторнирование документа по ссылке
Процедура СторнироватьДокумент(Документ) Экспорт
	УстановитьПривилегированныйРежим(Истина);  //rarus sergei 30.09.2016 mantis 7122+
	
	//rarus tenkam 17.08.2017 mantis 10831 +++
	ОтправитьОтменуПлановыхДанных = Ложь;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		Если Документ.ПодтвержденаПеревозчиком И РегистрыСведений.Scan_Обмен1БДОтправленныеСобытия.ПлановыеДанныеОтправлены(Документ) Тогда
			ОтправитьОтменуПлановыхДанных = Истина;
		КонецЕсли;   		
	КонецЕсли;
	//rarus tenkam 17.08.2017 mantis 10831 ---
	                                       	
	СтарыйСтатус = Документ.СтатусЗаявки;		//rarus tenkam 18.10.2017 mantis 11858 +
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	ДокументОбъект.Сторнирован = Истина;
	ДокументОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Аннулирована;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	//rarus tenkam 17.08.2017 mantis 10831 +++
	Если ОтправитьОтменуПлановыхДанных Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(Документ);
		ФоновыеЗадания.Выполнить("Scan_ВебСервисы.ОтправитьОтменуПлановыхДанныех1БД", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, "Отправка отмены плановых данных в 1БД");	
	КонецЕсли;
	//rarus tenkam 17.08.2017 mantis 10831 ---
	
	//rarus tenkam 18.10.2017 mantis 11352 +++
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьАннулированнуюЗаявку(Документ);
	//rarus tenkam 18.10.2017 mantis 11352 ---
	//rarus tenkam 18.10.2017 mantis 11858 +++
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		//rarus BProg_Gladkov 06.05.2020 0015962 ++ ОтправитьПФ
		Если (СтарыйСтатус = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе ИЛИ СтарыйСтатус = Справочники.Scan_СтатусыЗаявокНаДействие.Подтверждена)
			И РегистрыСведений.Scan_ОтправленныеПисьма.ЕстьОтправленноеПисьмо(Документ)
			И Scan_ПраваИНастройки.Scan_Право("АвтоматическаяОтправкаПФАннулированнойЗаявкиНаДействие") 
		Тогда 
			РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПФ(ДокументОбъект.Ссылка);
		КонецЕсли;
		//rarus BProg_Gladkov 06.05.2020 0015962 -- 
		//rarus pechek 30.03.2020 mantis 15466 +++
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Scan_СпецификацияСтандартнойМодели") Тогда
		Документ.Сторнирован = Истина;
		//rarus pechek 30.03.2020 mantis 15466 ---	
	КонецЕсли;
	//rarus tenkam 18.10.2017 mantis 11858 ---
	
КонецПроцедуры
//rarus sergei 08.09.2016 mantis 7167 --

//rarus sergei 16.09.2016 mantis 7167 ++
Функция ЧтениеСтатусаИзделияИзРегистраСведений(Изделие,ЗаявкаНаДействие) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.СтатусИзделия
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.Изделие = &ИзделиеССылка
	               |	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие = &ДокументСсылка
	               |	И Scan_КорректировкаИнформацииПоЗаявкам.СтатусИзделия <> НЕОПРЕДЕЛЕНО";
	Запрос.УстановитьПараметр("ИзделиеССылка",Изделие);	
	Запрос.УстановитьПараметр("ДокументСсылка",ЗаявкаНаДействие);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТЗ = Результат.Выгрузить();
		Статус = ТЗ[0].СтатусИзделия;
		Возврат Статус;
		
		
	
	КонецЕсли; 
КонецФункции  

Процедура ЗаписьСтатусаИзделияВРегистрСведений(Изделие,Регистратор,Статус) Экспорт
	НаборЗаписей = РегистрыСведений.Scan_КорректировкаИнформацииПоЗаявкам.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор); 
	НаборЗаписей.Прочитать(); 
	Для Каждого Запись Из НаборЗаписей Цикл 
		Если Запись.Изделие = Изделие Тогда
			Запись.СтатусИзделия = Статус;
		КонецЕсли; 	
	КонецЦикла; 
	НаборЗаписей.Записать();

КонецПроцедуры

//rarus sergei 13.10.2016 mantis 7350 ++
Функция ПолучитьДатуОкончанияДоговоровИзНастойки() Экспорт
	КоличествоДней = Scan_ПраваИНастройки.Scan_Право("КоличествоДнейДоОкончанияДействияДоговоровСКонтрагентами");	
	ТекущаяДата = ТекущаяДата();
	ДатаОкончания = ТекущаяДата+ КоличествоДней*60*60*24;
	Возврат ДатаОкончания;
КонецФункции
//rarus sergei 13.10.2016 mantis 7350 --

// rarus tenkam 02.06.2020 mantis 15715 +++
#Область УДАЛЕНИЕ
//rarus sergei 22.11.2016 mantis 6965 ++
Процедура ПрочитатьТабличныйДокумент(Адрес,ЗначенияВыбранныхПараметров) Экспорт
	ФайлПриемник = ПолучитьИмяВременногоФайла("xlsx");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(Адрес);
	ДанныеХранилища.Записать(ФайлПриемник);
	ТабДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабДокумент.Прочитать(ФайлПриемник, СпособЧтенияЗначенийТабличногоДокумента.Значение); 
		//ТабДокумент.Прочитать(ЗначенияВыбранныхПараметров.ПутьКФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	Попытка
		УдалитьФайлы(ФайлПриемник);
	Исключение
	КонецПопытки;
	SR = "KD Stock refill";
	NSR = "KD Non Stock Refill";
	УстанавливаемыйПризнак = Ложь;
	МассивИзмененныхИзделий = Новый Массив;
	КолвоСтрокДокумента = ТабДокумент.ВысотаТаблицы; 
	НомерНачальнойСтроки = 2;
	Для нСтрока=НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
		СтрокаЗаказаНаЗавод = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C1").Текст ; 
		НомерЗаказаНаЗавод = СтрЗаменить(СтрокаЗаказаНаЗавод,Символы.НПП,""); 
		СтрокаШасси = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C3").Текст;
		НомерШасси = СтрЗаменить(СтрокаШасси,Символы.НПП,"");
		НаименованиеСпецификации = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C5").Текст;
		ПризнакSR = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C6").Текст;
		ПродуктГотовКПродаже = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C2").Значение;
		Если ТипЗнч(Дата('00010101'))<> ТипЗнч(ПродуктГотовКПродаже) Тогда
			Сообщить("Внимание! Для Шасси № "+НомерШасси+" некорректно заполнена дата статуса 120");
			Продолжить;
		КонецЕсли; 
		Если ПризнакSR = SR Тогда
			УстанавливаемыйПризнак = Истина;
		ИначеЕсли ПризнакSR = NSR Тогда
			УстанавливаемыйПризнак = ложь;
		Иначе	
			Сообщить("Не удалось распознать признак KD Stock Refill. Проверьте загружаемый файл");
			Продолжить;
		КонецЕсли;
		ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(НомерЗаказаНаЗавод);
		Если ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка() Тогда
			//rarus FominskiyAS 19.04.2019  mantis 14191 +++
			//Сообщить("Заказ на завод № "+ НомерЗаказаНаЗавод +" не найден в TLMS");
			Сообщить(Нстр("ru = 'Заказ на завод №  '; en = 'Order '")+ НомерЗаказаНаЗавод +Нстр("ru = 'не найден в TLMS'; en = 'not found'"));
			//rarus FominskiyAS 19.04.2019  mantis 14191 ---
			Продолжить;
		КонецЕсли;
		Изделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("НомерИзделия",НомерШасси);
		Если Изделие = Справочники.Scan_Изделия.ПустаяСсылка() Тогда
			
			//rarus FominskiyAS 19.04.2019  mantis 14191 +++
			//Сообщить("Шасси № "+ НомерШасси +" не найдено в TLMS");
			Сообщить(Нстр("ru = 'Шасси № '; en = 'Chassis '")+ НомерШасси +Нстр("ru = ' не найдено в TLMS'; en = ' not found'"));
			//rarus FominskiyAS 19.04.2019  mantis 14191 ---
						
			Продолжить;
		КонецЕсли; 
		//rarus bonmak 01.08.2019 14427 закомментировал ++
		//Продукт =  Справочники.Scan_Продукты.НайтиПоРеквизиту("Изделие",Изделие);
		//Если Продукт = Справочники.Scan_Продукты.ПустаяСсылка() Тогда
		//	Сообщить("Для Шасси № "+ НомерШасси +" не найден продукт в TLMS");
		//	Продолжить;
		//КонецЕсли; 
		//rarus bonmak 01.08.2019 14427 --
		Если Изделие.ЗаказНаЗавод <> ЗаказНаЗавод Тогда //rarus bonmak 01.08.2019 14427 изменил на изделие
			Сообщить("Указанный в файле Заказ на завод № "+НомерЗаказаНаЗавод + " не соответствует Шасси № "+НомерШасси);
			Продолжить;
		КонецЕсли;
		Спецификация = Справочники.Scan_СпецификацииПродуктов.НайтиПоНаименованию(НаименованиеСпецификации);
		Если Спецификация = Справочники.Scan_СпецификацииПродуктов.ПустаяСсылка() Тогда
			Сообщить("Спецификация № "+ НаименованиеСпецификации  +" не найдена в TLMS");
			Продолжить;
		КонецЕсли;
		Если Изделие.СпецификацияПродукта <> Спецификация Тогда
			Сообщить("Указанная в файле спецификация "+НаименованиеСпецификации+" не соответствует шасси № "+НомерШасси);
			Продолжить;
		КонецЕсли;
		Если Спецификация.SR<>УстанавливаемыйПризнак Тогда
			СпецификацияОб = Спецификация.ПолучитьОбъект();
			Спецификацияоб.SR = УстанавливаемыйПризнак;
			Попытка
				СпецификацияОб.Записать();
				Если УстанавливаемыйПризнак = Истина Тогда
					Сообщить("У спецификации "+ НаименованиеСпецификации + " установлен признак "+SR);
				Иначе
					Сообщить("У спецификации "+ НаименованиеСпецификации + " установлен признак "+NSR);
				КонецЕсли;
			Исключение
				Сообщить("У спецификации "+ НаименованиеСпецификации + " не удалось установить признак SR/NSR");
				Продолжить;
			КонецПопытки;
		КонецЕсли; 
		//rarus BProg_Dekin 12.11.2019 0014452 ++ Заменен "ПродуктДатаГотовности" на "FinishDate"
		FinishDate = ЗаказНаЗавод.ПродуктГотовКПродаже;
		FinishDate = РегистрыСведений.Scan_КлючевыеДатыПроцессов.КлючеваяДата(ЗаказНаЗавод, "FinishDate");
		Если FinishDate = ПродуктГотовКПродаже Тогда
			Продолжить;
		Иначе	
			//ЗаказОбъект = ЗаказНаЗавод.ПолучитьОбъект();
			//ЗаказОбъект.ПродуктГотовКПродаже = ПродуктГотовКПродаже;
			//Попытка
			//	ЗаказОбъект.Записать();
			//	Сообщить("У заказа на завод "+НомерЗаказаНаЗавод+ " установлена дата статуса 120");
			//	МассивИзмененныхИзделий.Добавить(НомерШасси);
			//Исключение
			//	Сообщить("Внимание! У заказа на завод "+НомерЗаказаНаЗавод+ " не удалось установить дату статуса 120");	
			//КонецПопытки;
			//
			Отказ = Ложь;
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписатьКлючевуюДатуОбъекта(ЗаказНаЗавод, "FinishDate", FinishDate, , Отказ);
			Если Отказ тогда
				Сообщить("Внимание! У заказа на завод "+НомерЗаказаНаЗавод+ " не удалось установить дату статуса 120");
				Продолжить;
			КонецЕсли;
			
			Сообщить("У заказа на завод "+НомерЗаказаНаЗавод+ " установлена дата статуса 120");
			МассивИзмененныхИзделий.Добавить(НомерШасси);
		КонецЕсли;
		//rarus BProg_Dekin 12.11.2019 0014452 --
	КонецЦикла;
	
	//rarus BProg_Dekin 11.11.2019 0014452 ++ Удалил формирование напоминания пользователям
	//Если МассивИзмененныхИзделий.Количество()>0 Тогда
	//	СформироватьНапоминаниеПользователям(МассивИзмененныхИзделий); 
	//КонецЕсли;
	//rarus BProg_Dekin 11.11.2019 0014452 --
КонецПроцедуры  
#КонецОбласти
// rarus tenkam 02.06.2020 mantis 15715 ---

//rarus BProg_Dekin 11.11.2019 0014452 ++ Удалил формирование напоминания пользователям
//Процедура СформироватьНапоминаниеПользователям(МассивНомеровШасси)
//	Содержание = СформироватьСодержание(МассивНомеровШасси);
//	ВремяСобытия = ТекущаяДатаСеанса()+5*60;
//	ТаблицаПользователейИЗначений = Scan_ПраваИНастройки.ПолучитьОбъектыПоПравамИНастройкам(Перечисления.Scan_НазначениеПравИНастроек.Пользователь,"УведомлятьОбИзмененииСтатуса120",Истина);	
//	Если ТаблицаПользователейИЗначений = Неопределено ИЛИ ТаблицаПользователейИЗначений.КОличество()= 0 Тогда
//		Возврат;	
//	КонецЕсли; 
//	МассивСтрокОбъектов = ТаблицаПользователейИЗначений.ВыгрузитьКолонку("Объект");
//	Для каждого строка Из МассивСтрокОбъектов Цикл
//	
//		ПараметрыНапоминания = Новый Структура;
//	    ПараметрыНапоминания.Вставить("Описание", Содержание);
//		ПараметрыНапоминания.Вставить("Пользователь", строка);
//		ПараметрыНапоминания.Вставить("ВремяСобытия", ВремяСобытия);
//	//	ПараметрыНапоминания.Вставить("Источник", Параметры.ОбъектИсточникСобытия);
//		ПараметрыНапоминания.Вставить("СрокНапоминания", ВремяСобытия);	
//		ПараметрыНапоминания.Вставить("СпособУстановкиВремениНапоминания", Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя);
//		ПараметрыНапоминания.Вставить("ИнтервалВремениНапоминания", 0);
//	//	ПараметрыНапоминания.Вставить("Расписание", Действие.Расписание);
//				
//		//rarus FominskiyAS 28.02.2019  mantis 13863 +++
//		//ПараметрыНапоминания.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
//		ПараметрыНапоминания.Вставить("Автор", ПользователиСлужебный.АвторизованныйПользователь());
//		//rarus FominskiyAS 28.02.2019  mantis 13863 ---

//		
//		НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыНапоминания.Пользователь);
//		//НаборЗаписей.Отбор.Источник.Установить(ПараметрыНапоминания.Источник);
//	//	//НаборЗаписей.Отбор.ВремяСобытия.Установить(ПараметрыНапоминания.ВремяСобытия)	;
//	//	
//		НаборЗаписей.Прочитать();
//	//	
//		Если НаборЗаписей.Количество() = 0 Тогда
//			НоваяЗапись = НаборЗаписей.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыНапоминания);
//		Иначе
//			ОбновитьСрокНапоминания = Истина;
//			Для Каждого Запись Из НаборЗаписей Цикл
//				ЗаполнитьЗначенияСвойств(Запись, ПараметрыНапоминания,,?(ОбновитьСрокНапоминания,"","СрокНапоминания"));
//			КонецЦикла;
//		КонецЕсли;
//	//	
//		Попытка
//			НаборЗаписей.Записать(Истина);
//	
//			
//		Исключение
//			//rarus FominskiyAS 19.04.2019  mantis 14191 +++
//			//Сообщить("Не удалось создать напоминание - ошибка при записи: "+ОписаниеОшибки());
//			Сообщить(Нстр("ru = 'Не удалось создать напоминание - ошибка при записи: '; en = 'Reminder failed - record error '")+ОписаниеОшибки());
//			//rarus FominskiyAS 19.04.2019  mantis 14191 ---
//			Возврат;
//		КонецПопытки;	
//		
//	
//	КонецЦикла; 
//КонецПроцедуры
//rarus BProg_Dekin 11.11.2019 0014452 --

Функция СформироватьСодержание(МассивНомеровШасси)
	Содержание = "Обратите внимание! Следующие продукты готовы к продаже Скании-Русь: "+Символы.ПС;
	//Содержание = "Обратите внимание! У указанных ниже продуктов изменился статус 120:"+Символы.ПС;
	Для каждого Номер Из МассивНомеровШасси Цикл
	
		Содержание = Содержание+"- "+Номер+Символы.ПС; 	
	
	КонецЦикла; 	
	Возврат Содержание;
КонецФункции // ()
//rarus sergei 22.11.2016 mantis 6965 --

//rarus sergei 15.12.2016 mantis 7120 ++
Функция ПроверитьСрокиИстеченияПолисаОсаго(Документ) Экспорт
	Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		Для каждого строка Из Документ.ПродуктыПоЗаявке Цикл
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//Если строка.Продукт.Изделие.ДатаИстеченияПолиса = Дата(1,1,1) ИЛИ строка.Продукт.Изделие.ДатаИстеченияПолиса <= Документ.ДатаДоставкиПлановая Тогда
			Если строка.Изделие.ДатаИстеченияПолиса = Дата(1,1,1) ИЛИ строка.Изделие.ДатаИстеченияПолиса <= Документ.ДатаДоставкиПлановая Тогда
			// rarus tenkam 12.08.2019 mantis 14427 ---
			Возврат Истина;
			КонецЕсли; 	
		КонецЦикла;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда	
		Для каждого строка Из Документ.СоставЗаявки Цикл
			Если строка.Изделие.ДатаИстеченияПолиса = Дата(1,1,1) ИЛИ строка.Изделие.ДатаИстеченияПолиса <= Документ.ДатаДоставки Тогда
				Возврат Истина;
			КонецЕсли; 	
		КонецЦикла;
	КонецЕсли; 
	Возврат Ложь;
КонецФункции

Функция СформироватьТекстНапоминанияПоИстекшимПолисамОсаго(Документ) Экспорт
	ТекстНапоминания = "Внимание! ";
	Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		Для каждого строка Из Документ.ПродуктыПоЗаявке Цикл
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//Если строка.Продукт.Изделие.ДатаИстеченияПолиса = Дата(1,1,1) Тогда 
			//	ТекстНапоминания = ТекстНапоминания+" У изделия № "+ строка(строка.Продукт.Изделие.НомерИзделия)+" не указана дата истечения полиса ОСАГО."+Символы.ПС;
			//ИначеЕсли строка.Продукт.Изделие.ДатаИстеченияПолиса <= Документ.ДатаДоставкиПлановая Тогда
			//	ТекстНапоминания = ТекстНапоминания+" У изделия № "+ строка(строка.Продукт.Изделие.НомерИзделия)+" истекает  срок полиса ОСАГО. Дата истечения: "+Строка(Формат(строка.Продукт.Изделие.ДатаИстеченияПолиса,"ДЛФ=Д"))+Символы.ПС; 
			//КонецЕсли;
			Если строка.Изделие.ДатаИстеченияПолиса = Дата(1,1,1) Тогда 
				ТекстНапоминания = ТекстНапоминания+" У изделия № "+ строка(строка.Изделие.НомерИзделия)+" не указана дата истечения полиса ОСАГО."+Символы.ПС;
			ИначеЕсли строка.Изделие.ДатаИстеченияПолиса <= Документ.ДатаДоставкиПлановая Тогда
				ТекстНапоминания = ТекстНапоминания+" У изделия № "+ строка(строка.Изделие.НомерИзделия)+" истекает  срок полиса ОСАГО. Дата истечения: "+Строка(Формат(строка.Изделие.ДатаИстеченияПолиса,"ДЛФ=Д"))+Символы.ПС; 
			КонецЕсли;
			// rarus tenkam 12.08.2019 mantis 14427 ---
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		Для каждого строка Из Документ.СоставЗаявки Цикл
			Если строка.Изделие.ДатаИстеченияПолиса = Дата(1,1,1) Тогда 
				ТекстНапоминания = ТекстНапоминания+" У изделия № "+ строка(строка.Изделие.НомерИзделия)+" не указана дата истечения полиса ОСАГО."+Символы.ПС;
			ИначеЕсли строка.Изделие.ДатаИстеченияПолиса <= Документ.ДатаДоставки Тогда
				ТекстНапоминания = ТекстНапоминания+" У изделия № "+ строка(строка.Изделие.НомерИзделия)+" истекает  срок полиса ОСАГО. Дата истечения: "+Строка(Формат(строка.Изделие.ДатаИстеченияПолиса,"ДЛФ=Д"))+Символы.ПС; 
			КонецЕсли; 	
		КонецЦикла;	
	КонецЕсли; 
	Возврат ТекстНапоминания;
КонецФункции
//rarus sergei 15.12.2016 mantis 7120 --

//////ПРОВЕРКА ПОЛЬЗОВАТЕЛЕЙ ПОРТАЛА

//rarus vikhle 29.04.2020 mt 15695 +++
Функция ПроверитьАктивностьПользователяПортала (Пользователь) Экспорт
	Возврат РегистрыСведений.Scan_ПараметрыСессийПользователейПортала.ПроверитьНаличиеЗаписейВРегистре(Пользователь);
КонецФункции	

Функция ЭтоПользовательПортала(Пользователь) Экспорт
	Возврат Пользователь.ПользовательПортала;	
КонецФункции	

Процедура ОчиститьПараметрыСессииПользователяПортала() Экспорт
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Scan_ВспомогательныеФункцииСервер.ЭтоПользовательПортала(ТекущийПользователь) Тогда
		Возврат;
	Иначе
		РегистрыСведений.Scan_ПараметрыСессийПользователейПортала.УдалитьЗаписьРегистра(ТекущийПользователь);
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаписатьПараметрыСессииПользователяПортала(Пользователь,ПользовательПортала,КодПользователяПортала,НомерСессииПортала) Экспорт
	РегистрыСведений.Scan_ПараметрыСессийПользователейПортала.ЗаписатьПараметрыСессийПользователейПортала(Пользователь,ПользовательПортала,КодПользователяПортала,НомерСессииПортала);	
КонецПроцедуры

//rarus vikhle 29.04.2020 mt 15695 ---

// rarus tenkam 18.01.2017 mantis 7185 ++

////// РАБОТА С ДОКУМЕНТАМИ

// Процедура - Сформировать напоминание пользователям, имеющим указанное право
// Параметры:
//  НаименованиеПрава	 - Строка	 - Наименования права из планов видов характеристик "Права и настройки"
//  ТекстНапоминания	 - Строка	 - Текст напоминания
//  Источник			 - Ссылка	 - Ссылка на источник данных
//
Процедура СформироватьНапоминаниеПользователямПоПраву(НаименованиеПрава, ТекстНапоминания, Источник = Неопределено) Экспорт
	МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению(НаименованиеПрава,Истина);
	Для Каждого ТекПользователь Из МассивПользователей Цикл	
		НапоминанияПользователяСлужебный.ОтправитьНапоминаниеПользователю(ТекПользователь, ТекстНапоминания, ТекущаяДата()+2, Источник);
	КонецЦикла;
КонецПроцедуры
//rarus tenkam 18.01.2017 mantis 7185 --

//rarus tenkam 26.02.2017 mantis 7177 +++
// rarus tenkam 13.08.2019 mantis 14427 +++
//Функция УстановитьИсполнениеЗаявокПродажиСПередачейТК(ПродуктСсылка = Неопределено) Экспорт
Функция УстановитьИсполнениеЗаявокПродажиСПередачейТК(ИзделиеСсылка = Неопределено, ПрямаяПродажа = Ложь) Экспорт //rarus bonmak 03.11.2020 14375 добавил второй параметр
// rarus tenkam 13.08.2019 mantis 14427 ---
	// rarus tenkam 13.08.2019 mantis 14427 +++
	//Если ЗначениеЗаполнено(ПродуктСсылка) Тогда
	Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда
	// rarus tenkam 13.08.2019 mantis 14427 ---
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействиеСсылка
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	(Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК))		//rarus tenkam 26.09.2017 mantis 10742 +
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена)
		// rarus tenkam 13.08.2019 mantis 14427 +++
		//|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт = &ПродуктСсылка
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие = &ИзделиеСсылка
		// rarus tenkam 13.08.2019 mantis 14427 ---
		//rarus abrant 18.04.2017 mantis 9275 +++
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Сторнирован = ЛОЖЬ
		//rarus abrant 18.04.2017 mantis 9275 ---
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка";
		
		// rarus tenkam 13.08.2019 mantis 14427 +++
		//Запрос.УстановитьПараметр("ПродуктСсылка", ПродуктСсылка);
		Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
		// rarus tenkam 13.08.2019 mantis 14427 ---
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастроитьСтатусДокументаЗаявкаНаДействие(ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеСсылка, ПрямаяПродажа); //rarus bonmak 03.11.2020 14375 добавил второй параметр
		КонецЦикла;
	КонецЕсли;
КонецФункции
//rarus tenkam 26.02.2017 mantis 7177 ---

//rarus tenkam 19.03.2017 mantis 8303 +++
Функция ПолучитьЭлПочтуПользователя(ТекПользователь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &ТекПользователь
		|	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)";
	
	Запрос.УстановитьПараметр("ТекПользователь", ТекПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Представление;
	КонецЕсли;
	Возврат "";
	
КонецФункции
//rarus tenkam 19.03.2017 mantis 8303 ---

//rarus tenkam 19.03.2017 mantis 9063 +++
Функция ЕстьЗаявкаПеревозчику(ЗаявкаНаДействиеСсылка) Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка КАК ЗаявкаПеревозчика
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.ДокументыОснования КАК Scan_ЗаявкаПеревозчикуДокументыОснования
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуДокументыОснования.Документ = &ЗаявкаНаДействиеСсылка
		|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ
		//   rarus anch 21.09.2017 mantis 11090 +++
		//|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка.Проведен = ИСТИНА
		//|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка.Сторнирован = ЛОЖЬ";
		|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка.Проведен = ИСТИНА";
		//   rarus anch 21.09.2017 mantis 11090 ---
		
	Запрос.УстановитьПараметр("ЗаявкаНаДействиеСсылка", ЗаявкаНаДействиеСсылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции
//rarus tenkam 19.03.2017 mantis 9063 ---

// rarus tenkam 15.07.2020 mantis 16322 +++
Функция ПолучитьЗаявкуПеревозчику(ЗаявкаНаДействиеСсылка) Экспорт
	ТекЗаявкаПеревозчику = Документы.Scan_ЗаявкаПеревозчику.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка КАК ЗаявкаПеревозчика
	|ИЗ
	|	Документ.Scan_ЗаявкаПеревозчику.ДокументыОснования КАК Scan_ЗаявкаПеревозчикуДокументыОснования
	|ГДЕ
	|	Scan_ЗаявкаПеревозчикуДокументыОснования.Документ = &ЗаявкаНаДействиеСсылка
	|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка.Проведен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаПеревозчика УБЫВ";
	
	Запрос.УстановитьПараметр("ЗаявкаНаДействиеСсылка", ЗаявкаНаДействиеСсылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборкадетзаписи = РезультатЗапроса.Выбрать();
	Если Выборкадетзаписи.Следующий() Тогда
		ТекЗаявкаПеревозчику = Выборкадетзаписи.ЗаявкаПеревозчика;
	КонецЕсли;
	
	Возврат ТекЗаявкаПеревозчику;
	
КонецФункции

Функция ПолучитьСтатусЗаявкиПеревозчику(ЗаявкаНаДействиеСсылка) Экспорт
	ТекЗаявкаПеревозчику = ПолучитьЗаявкуПеревозчику(ЗаявкаНаДействиеСсылка);
	Если ЗначениеЗаполнено(ТекЗаявкаПеревозчику) Тогда
		Возврат ТекЗаявкаПеревозчику.СтатусЗаявки;
	КонецЕсли;
	
	Возврат Справочники.Scan_СтатусыЗаявокНаДействие.ПустаяСсылка();
	
КонецФункции
// rarus tenkam 15.07.2020 mantis 16322 ---

//rarus vikhle 22.04.2020 mt 15695 +++
Процедура ЗаполнитьКомпаниюИКонтрагента(Пользователь,Компания,Контрагент) Экспорт
	Если НЕ Пользователь.ПользовательСотрудник Тогда
		СвязкаКомпанияКонтрагент =  РегистрыСведений.Scan_КомпанииПользователей.ПолучитьКомпаниюДилераПользователя(Пользователь,Истина);	
		Если НЕ СвязкаКомпанияКонтрагент.Количество() = 0 Тогда 
			Компания = СвязкаКомпанияКонтрагент[0].Компания;  
			Контрагент = СвязкаКомпанияКонтрагент[0].Контрагент;
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;	
КонецПроцедуры
//rarus vikhle 22.04.2020 mt 15695 ---


//rarus tenkam 23.11.2016 mantis 7750 ++

////// КОРРЕКТИРОВКА И АННУЛИРОВАНИЕ ЗАЯВОК ПЕРЕВОЗЧИКУ

// Функция - Получить состояние заявки
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.Scan_ЗаявкаНаДействие	 - Ссылка на заявку на действие, состояние которой необходимо получить
// 
// Возвращаемое значение:
//  Строка - "Исполнена" - если заявка полностью исполнена, "ПолученаПеревозчиком" - если изделия заявки ушли на маршрут, "Проверена" - если заявка проверена администратором продаж, "НеПроверена" - если заявка не проверена адм. продаж, "НеПроведена" - если заявка не проведена
//
Функция ПолучитьСостояниеЗаявки(ДокументСсылка, ДанныеПоИзделиям = Неопределено) Экспорт
	
	//rarus tenkam 30.03.2017 mantis 9171 +++
	Если НЕ ДокументСсылка.Проведен Тогда
		Возврат "НеПроведена";
	КонецЕсли;
	//rarus tenkam 30.03.2017 mantis 9171 ---
	
	Если ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена ИЛИ
		ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена Тогда	//rarus tenkam 09.02.2017 mantis 8331 +
		Возврат "Исполнена";
	КонецЕсли;
	
	Если НЕ ДокументСсылка.ПровереноАП Тогда
		Возврат "НеПроверена";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДанныеПоИзделиям) Тогда
		ДанныеПоИзделиям = ПолучитьДанныеПоИзделиям(ДокументСсылка);
	КонецЕсли;
	
	ПолученаПеревозчиком = Ложь;
	Для Каждого СтрокаИзделия Из ДанныеПоИзделиям Цикл
		Если ЗначениеЗаполнено(СтрокаИзделия.МестоХраненияПоЗаявкеПеревозчику) Тогда
			//Если по заявке на действие хотя бы одно изделие уже получено перевозчиком
			ПолученаПеревозчиком = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолученаПеревозчиком Тогда
		Возврат "ПолученаПеревозчиком";
	Иначе
		Возврат "Проверена";
	КонецЕсли;

КонецФункции

// Функция - Получить данные по изделиям
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.Scan_ЗаявкаНаДействие	- Заявка на действие, данные изделий которой получаются
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с четырьмя колонками "Изделие", "ЗаявкаПеревозчику", "МестоХраненияПоЗаявкеПеревозчику", "КоличествоЗаявокНаДействиеПоЗаявкеПеревозчику"
//
Функция ПолучитьДанныеПоИзделиям(ДокументСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие КАК Изделие,
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику КАК ЗаявкаПеревозчику
		|ПОМЕСТИТЬ ИзделияИЗаявкиПеревозчику
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаявкаПеревозчику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_МестонахождениеИзделий.Регистратор КАК Регистратор,
		|	Scan_МестонахождениеИзделий.МестоХранения
		|ПОМЕСТИТЬ Местонахождения
		|ИЗ
		|	РегистрНакопления.Scan_МестонахождениеИзделий КАК Scan_МестонахождениеИзделий
		|ГДЕ
		|	Scan_МестонахождениеИзделий.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Scan_МестонахождениеИзделий.МестоХранения.Маршрут = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_МестонахождениеИзделий.Регистратор,
		|	Scan_МестонахождениеИзделий.МестоХранения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику КАК ЗаявкаПеревозчику,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие) КАК КоличествоЗаявокНаДействие
		|ПОМЕСТИТЬ КоличествоРазныхЗаявокНаДействие
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаявкаПеревозчику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзделияИЗаявкиПеревозчику.Изделие,
		|	ЕСТЬNULL(ИзделияИЗаявкиПеревозчику.ЗаявкаПеревозчику, ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка)) КАК ЗаявкаПеревозчику,
		|	ЕСТЬNULL(Местонахождения.МестоХранения, ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)) КАК МестоХраненияПоЗаявкеПеревозчику,
		|	ВЫБОР
		|		КОГДА ИзделияИЗаявкиПеревозчику.ЗаявкаПеревозчику = ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ КоличествоРазныхЗаявокНаДействие.КоличествоЗаявокНаДействие
		|	КОНЕЦ КАК КоличествоЗаявокНаДействиеПоЗаявкеПеревозчику
		|ИЗ
		|	ИзделияИЗаявкиПеревозчику КАК ИзделияИЗаявкиПеревозчику
		|		ЛЕВОЕ СОЕДИНЕНИЕ Местонахождения КАК Местонахождения
		|		ПО ИзделияИЗаявкиПеревозчику.ЗаявкаПеревозчику = Местонахождения.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоРазныхЗаявокНаДействие КАК КоличествоРазныхЗаявокНаДействие
		|		ПО ИзделияИЗаявкиПеревозчику.ЗаявкаПеревозчику = КоличествоРазныхЗаявокНаДействие.ЗаявкаПеревозчику";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивЗначений = ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить());
	Возврат МассивЗначений;
КонецФункции

// Процедура - Исключить изделия заявки на действие из заявки перевозчику
//
// Параметры:
//  ЗаявкаПеревозчикуСсылка	 - 	 - 
//  ЗаявкаНаДействиеСсылка	 - 	 - 
//
Процедура ИсключитьИзделияЗаявкиНаДействиеИзЗаявкиПеревозчику(ЗаявкаПеревозчикуСсылка, ЗаявкаНаДействиеСсылка) Экспорт
	// Получим изделия, которые необходимо исключить
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие = &ЗаявкаНаДействиеСсылка
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику = &ЗаявкаПеревозчикуСсылка";
	
	Запрос.УстановитьПараметр("ЗаявкаНаДействиеСсылка", ЗаявкаНаДействиеСсылка);
	Запрос.УстановитьПараметр("ЗаявкаПеревозчикуСсылка", ЗаявкаПеревозчикуСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Нечего исключать
		Возврат;
	КонецЕсли;
	МассивИзделий = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Изделие");
	
	// Создадим корректировку
	НоваяЗаявкаПеревозчикуКор = ЗаявкаПеревозчикуСсылка.Скопировать();
	
	// Старую заявку перевозчику сторнируем
	СторнироватьДокумент(ЗаявкаПеревозчикуСсылка);
	СформироватьНапоминаниеОбАннулировании(ЗаявкаПеревозчикуСсылка);	//rarus tenkam 23.12.2016 mantis 8169 +
	
	// Заполним данные новой заявки перевозчику
	НоваяЗаявкаПеревозчикуКор.Дата = ТекущаяДата();
	НоваяЗаявкаПеревозчикуКор.УстановитьНовыйНомер();
	НоваяЗаявкаПеревозчикуКор.Корректировка = Истина;
	//rarus tenkam 06.02.2017 mantis 7750 +++
	НоваяЗаявкаПеревозчикуКор.ПодтвержденаПеревозчиком = Ложь;
	НоваяЗаявкаПеревозчикуКор.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе;
	
	//rarus tenkam 13.03.2017 TLMS 011 +++
	Для Каждого ТекИзделие Из НоваяЗаявкаПеревозчикуКор.СоставЗаявки Цикл
		ТекИзделие.ДатаУходаФакт = Дата('00010101');
	КонецЦикла;	
	//rarus tenkam 13.03.2017 TLMS 011 ---
	//rarus tenkam 06.02.2017 mantis 7750 ---
	
	// Исключим изделия
	Для Каждого ТекИзделие Из МассивИзделий Цикл
		УдаляемоеИзделие = НоваяЗаявкаПеревозчикуКор.СоставЗаявки.Найти(ТекИзделие,"Изделие");		
		НоваяЗаявкаПеревозчикуКор.СоставЗаявки.Удалить(УдаляемоеИзделие);
	КонецЦикла;
	
	// Удалим ссылку на док. основание - заявку на действие
	ТекСтрокаОснования = НоваяЗаявкаПеревозчикуКор.ДокументыОснования.Найти(ЗаявкаНаДействиеСсылка, "Документ");
	НоваяЗаявкаПеревозчикуКор.ДокументыОснования.Удалить(ТекСтрокаОснования);
	
	// Для заявки перевозчику нужно хранить старую сторнированную заявку mantis 8005 +
	НоваяЗаявкаПеревозчикуКор.ДокументОснованиеКорректировки = ЗаявкаПеревозчикуСсылка;
	
	// Запишем новую заявку перевозчику
	НоваяЗаявкаПеревозчикуКор.Записать(РежимЗаписиДокумента.Проведение);
	
	//rarus tenkam 08.02.2017 mantis 7750 +++
	// Обновим статусы "Заявок на действие", которые также были документами-основаниями
	Для Каждого ТекДокОснования Из НоваяЗаявкаПеревозчикуКор.ДокументыОснования Цикл
		Если ТипЗнч(ТекДокОснования.Документ) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
			НастроитьСтатусДокументаЗаявкаНаДействие(ТекДокОснования.Документ);
		КонецЕсли;
	КонецЦикла;
	//rarus tenkam 08.02.2017 mantis 7750 ---
	
	//rarus tenkam 26.01.2017 mantis 8305 +++
	//Отправим напоминание о том, что необходимо отправить перевозчику скорректированную заявку
	ТекстНапоминания = "Необходимо отправить перевозчику скорректированную заявку №" + НоваяЗаявкаПеревозчикуКор.Номер;
	СформироватьНапоминаниеПользователямПоПраву("УведомлятьОСозданииНовойЗаявкиПеревозчику", ТекстНапоминания, НоваяЗаявкаПеревозчикуКор.Ссылка);
	//rarus tenkam 26.01.2016 mantis 8305 ---
	
КонецПроцедуры

// Процедура - Аннулировать заявку
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.Scan_ЗаявкаНаДействие	 - Документ, который необходимо аннулировать
//
Процедура АннулироватьЗаявку(ДокументСсылка) Экспорт
	
	Если ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Аннулирована Тогда
		Возврат;
	КонецЕсли;
	
	//rarus tenkam 20.01.2017 mantis 8172 ++
	Если НЕ ЭтоЗаявкаCПеревозкой(ДокументСсылка) Тогда
		Если ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена Тогда
			Возврат;
		КонецЕсли;
		
		Если ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Новая Тогда
			//Аннулируем документ "Заявка на действие"
			СторнироватьДокумент(ДокументСсылка);
			СформироватьНапоминаниеОбАннулировании(ДокументСсылка);
		ИначеЕсли  ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе Тогда
			Если НетПеремещений(ДокументСсылка) Тогда
				//Аннулируем документ "Заявка на действие"
				СторнироватьДокумент(ДокументСсылка);
				СформироватьНапоминаниеОбАннулировании(ДокументСсылка);	
			Иначе
				//Пометим на удаление документ "Перемещение изделий"
				ПеремещениеСсылка = ПолучитьПеремещениеЗаявки(ДокументСсылка);
				
				ПеремещениеОбъект = ПеремещениеСсылка.ПолучитьОбъект();
				ПеремещениеОбъект.ПометкаУдаления = Истина;
				ПеремещениеОбъект.Проведен = Ложь;
				ПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
				//Аннулируем документ "Заявка на действие"
				СторнироватьДокумент(ДокументСсылка);
				СформироватьНапоминаниеОбАннулировании(ДокументСсылка);	
			КонецЕсли;
		КонецЕсли;  	
	Иначе
	//rarus tenkam 20.01.2017 mantis 8172 --
		ДанныеПоИзделиям = ПолучитьДанныеПоИзделиям(ДокументСсылка);
		СостояниеЗаявки = ПолучитьСостояниеЗаявки(ДокументСсылка, ДанныеПоИзделиям);
		
		Если СостояниеЗаявки = "НеПроверена" ИЛИ
			СостояниеЗаявки = "НеПроведена" Тогда	//rarus tenkam 30.03.2017 mantis 9171 +
			// Заявка на действие еще не проверена адм. продаж или не проведена - просто пометим на удаление
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Аннулирована;
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Проведен = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ИначеЕсли СостояниеЗаявки = "Проверена" Тогда
			// Заявка на действие проверена адм. продаж, но убытия на маршрут еще нет - сторнируем
			Если НЕ ЗначениеЗаполнено(ДанныеПоИзделиям) Тогда
				// Ошибка в программе	
				Возврат;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ДанныеПоИзделиям Цикл
				
				Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаПеревозчику) И НЕ ТекСтрока.ЗаявкаПеревозчику.Сторнирован Тогда
					Если ТекСтрока.КоличествоЗаявокНаДействиеПоЗаявкеПеревозчику = 1  Тогда
						// В заявке перевозчику изделия только исходного документа - сторнируем
						СторнироватьДокумент(ТекСтрока.ЗаявкаПеревозчику);	
						СформироватьНапоминаниеОбАннулировании(ТекСтрока.ЗаявкаПеревозчику);	//rarus tenkam 23.12.2016 mantis 8169 +
					Иначе
						// В заявке перевозчику изделия еще и других документов - корректируем
						ИсключитьИзделияЗаявкиНаДействиеИзЗаявкиПеревозчику(ТекСтрока.ЗаявкаПеревозчику, ДокументСсылка);
					КонецЕсли;				
				КонецЕсли;
			КонецЦикла;
			
			// Сторнирование заявки
			СторнироватьДокумент(ДокументСсылка);
			
			// Отправка напоминания
			//rarus tenkam 23.12.2016 mantis 8169 ++
			//МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ИнформироватьОКорректировкахЗаявокНаДействие",Истина);
			//ТекстНапоминания = "" + ДокументСсылка + " была аннулирована.";
			//Для Каждого ТекПользователь Из МассивПользователей Цикл	
			//	НапоминанияПользователяСлужебный.ОтправитьНапоминаниеПользователю(ТекПользователь, ТекстНапоминания, ТекущаяДата()+5*60, ДокументСсылка);
			//КонецЦикла;
		    СформироватьНапоминаниеОбАннулировании(ДокументСсылка);
			//rarus tenkam 23.12.2016 mantis 8169 --
			
		ИначеЕсли СостояниеЗаявки = "ПолученаПеревозчиком" Тогда
			// Заявка на действие проверана адм. продаж, и есть убытие на маршрут - нужно согласовывать	
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			//ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Аннулирована;
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСогласование", Истина);
			ДокументОбъект.ТребуетСогласования = Истина;       
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			// Создадим согласование
			Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.ЗаявкаНаДействиеШаблонСогласования");
			Scan_ОбщегоНазначения_проф.СоздатьБизнесПроцессСогласования(ДокументСсылка,Настройка);

		ИначеЕсли СостояниеЗаявки = "Исполнена" Тогда
			// Заявка на действие исполнена - 
		КонецЕсли;
		
	КонецЕсли;	//rarus tenkam 20.01.2017 mantis 8172 +
КонецПроцедуры


// Процедура - Сторнировать заявку после проведения ее корректировки
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.Scan_ЗаявкаНаДействие	 - Документ, который необходимо сторнировать
//
Процедура СторнироватьЗаявкуКорректировки(ДокументСсылка) Экспорт
	
	//rarus tenkam 20.01.2017 mantis 8172 ++
	Если НЕ ЭтоЗаявкаCПеревозкой(ДокументСсылка) Тогда
		Если  ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе ИЛИ 
			ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Новая Тогда
			//Пометим на удаление документ "Перемещение изделий"
			ПеремещениеСсылка = ПолучитьПеремещениеЗаявки(ДокументСсылка);
			Если ЗначениеЗаполнено(ПеремещениеСсылка) Тогда
				ПеремещениеОбъект = ПеремещениеСсылка.ПолучитьОбъект();
				ПеремещениеОбъект.ПометкаУдаления = Истина;
				ПеремещениеОбъект.Проведен = Ложь;
				ПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			//Аннулируем документ "Заявка на действие"
			СторнироватьДокумент(ДокументСсылка);
			СформироватьНапоминаниеОбАннулировании(ДокументСсылка);	
		КонецЕсли;  	
	Иначе
	//rarus tenkam 20.01.2017 mantis 8172 --

		ДанныеПоИзделиям = Scan_ВспомогательныеФункцииСервер.ПолучитьДанныеПоИзделиям(ДокументСсылка);
		СостояниеЗаявки = Scan_ВспомогательныеФункцииСервер.ПолучитьСостояниеЗаявки(ДокументСсылка, ДанныеПоИзделиям);
		
		Если СостояниеЗаявки = "Проверена" ИЛИ
			СостояниеЗаявки = "ПолученаПеревозчиком" Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеПоИзделиям) Тогда
				Возврат;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ДанныеПоИзделиям Цикл
				Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаПеревозчику) И НЕ ТекСтрока.ЗаявкаПеревозчику.Сторнирован Тогда
					Если ТекСтрока.КоличествоЗаявокНаДействиеПоЗаявкеПеревозчику = 1  Тогда
						// В заявке перевозчику изделия только исходного документа - сторнируем
						СторнироватьДокумент(ТекСтрока.ЗаявкаПеревозчику);
						СформироватьНапоминаниеОбАннулировании(ТекСтрока.ЗаявкаПеревозчику);	//rarus tenkam 23.12.2016 mantis 8169 +
					Иначе
						// В заявке перевозчику изделия еще и других документов - корректируем
						ИсключитьИзделияЗаявкиНаДействиеИзЗаявкиПеревозчику(ТекСтрока.ЗаявкаПеревозчику, ДокументСсылка);
					КонецЕсли;				
				КонецЕсли;
			КонецЦикла;
			
			// Сторнируем исходный документ
			СторнироватьДокумент(ДокументСсылка);
			
			// Отправка напоминания
			//rarus tenkam 23.12.2016 mantis 8169 ++
			//МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ИнформироватьОКорректировкахЗаявокНаДействие",Истина);
			//ТекстНапоминания = "" + ДокументСсылка + " была аннулирована.";
			//Для Каждого ТекПользователь Из МассивПользователей Цикл	
			//	НапоминанияПользователяСлужебный.ОтправитьНапоминаниеПользователю(ТекПользователь, ТекстНапоминания, ТекущаяДата()+5*60, ДокументСсылка);
			//КонецЦикла;
			СформироватьНапоминаниеОбАннулировании(ДокументСсылка);
			//rarus tenkam 23.12.2016 mantis 8169 --
			
		ИначеЕсли СостояниеЗаявки = "Исполнена" Тогда
			// Заявка на действие исполнена - 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - Обработать сторнирование заявки
//
// Параметры:
//  ДокументСсылка	 - 	 - 
//
Процедура ОбработатьСторнированиеЗаявки(ДокументСсылка) Экспорт
	
	ДанныеПоИзделиям = Scan_ВспомогательныеФункцииСервер.ПолучитьДанныеПоИзделиям(ДокументСсылка);
	СостояниеЗаявки = Scan_ВспомогательныеФункцииСервер.ПолучитьСостояниеЗаявки(ДокументСсылка, ДанныеПоИзделиям);
	
	Если СостояниеЗаявки = "Проверена" ИЛИ
		СостояниеЗаявки = "ПолученаПеревозчиком" Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеПоИзделиям) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ДанныеПоИзделиям Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаПеревозчику) И НЕ ТекСтрока.ЗаявкаПеревозчику.Сторнирован Тогда
				Если ТекСтрока.КоличествоЗаявокНаДействиеПоЗаявкеПеревозчику = 1  Тогда
					// В заявке перевозчику изделия только исходного документа - сторнируем
					СторнироватьДокумент(ТекСтрока.ЗаявкаПеревозчику);
					СформироватьНапоминаниеОбАннулировании(ТекСтрока.ЗаявкаПеревозчику);	//rarus tenkam 23.12.2016 mantis 8169 +
				Иначе
					// В заявке перевозчику изделия еще и других документов - корректируем
					ИсключитьИзделияЗаявкиНаДействиеИзЗаявкиПеревозчику(ТекСтрока.ЗаявкаПеревозчику, ДокументСсылка);
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
		
		// Отправка напоминания
		//rarus tenkam 23.12.2016 mantis 8169 ++
		//МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ИнформироватьОКорректировкахЗаявокНаДействие",Истина);
		//ТекстНапоминания = "" + ДокументСсылка + " была аннулирована.";
		//Для Каждого ТекПользователь Из МассивПользователей Цикл	
		//	НапоминанияПользователяСлужебный.ОтправитьНапоминаниеПользователю(ТекПользователь, ТекстНапоминания, ТекущаяДата()+5*60, ДокументСсылка);
		//КонецЦикла;
		СформироватьНапоминаниеОбАннулировании(ДокументСсылка);
		//rarus tenkam 23.12.2016 mantis 8169 --
		
	КонецЕсли;	
КонецПроцедуры

//rarus tenkam 23.12.2016 mantis 8169 ++

// Процедура - Сформировать напоминание об аннулировании
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.Scan_ЗаякаНаДействие, ДокументСсылка.Scan_ЗаявкаПеревозчику - Документ, об аннулировании которго нужно напомнить пользователям
//
Процедура СформироватьНапоминаниеОбАннулировании(ДокументСсылка) Экспорт
	//МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ИнформироватьОКорректировкахЗаявокНаДействие",Истина);
	ТекстНапоминания = "" + ДокументСсылка + " была аннулирована.";
	//Для Каждого ТекПользователь Из МассивПользователей Цикл	
	//	НапоминанияПользователяСлужебный.ОтправитьНапоминаниеПользователю(ТекПользователь, ТекстНапоминания, ТекущаяДата()+5, ДокументСсылка);
	//КонецЦикла;
	СформироватьНапоминаниеПользователямПоПраву("ИнформироватьОКорректировкахЗаявокНаДействие", ТекстНапоминания, ДокументСсылка);

КонецПроцедуры
//rarus tenkam 23.12.2016 mantis 8169 --

//rarus tenkam 06.02.2017 mantis 7750 ---

/////КОРРЕКТИРОВКА СТАНДАРТНОЙ СПЕЦИФИКАЦИИ МОДЕЛИ

//rarus pechek 12.03.2020 mantis 15466 +++
Процедура АннулироватьСпецификацию(ДокументСсылка, ПричинаАннулирования = Неопределено) Экспорт //rarus ozhnik 17813 09.06.2021 + 
	
	Если ДокументСсылка.Статус = Справочники.Scan_СтатусыЗаявокНаДействие.Аннулирована Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.Статус= Справочники.Scan_СтатусыЗаявокНаДействие.Аннулирована;  
	ДокументОбъект.ПричинаАннулирования = ПричинаАннулирования; //rarus ozhnik 17813 09.06.2021 + 
	//rarus pechek 30.03.2020 mantis 15466 +++
	ДокументОбъект.Сторнирован = Истина;
	//rarus pechek 30.03.2020 mantis 15466 ---
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры
//rarus pechek 12.03.2020 mantis 15466 ---

//rarus pechek 12.03.2020 mantis 15466 +++
Функция ПолучитьСтатусСтандартнойСпецификацииМодели(СпецификацияСтандартнойМоделиСсылка) Экспорт
	Возврат СпецификацияСтандартнойМоделиСсылка.Статус;
КонецФункции
//rarus pechek 12.03.2020 mantis 15466 ---

////// КОРРЕКТИРОВКА ЗАЯВОК НА ДЕЙСТВИЕ, НЕ ТРЕБУЮЩИХ ПЕРЕВОЗКИ

// Функция - Сформировать "Перемещение изделий" по "Заявке на действие"
// Параметры:
//  ДокументСсылка		 - ДокументСсылка.Scan_ЗаявкаНаДействие	 - Заявка на действие, при исполнении которой будет формироваться перемещение изделий 
//  СообщениеОбОшибке	 - Строка - Строка, в которую будет записано сообщение об ошибке в случае ошибки при формировании документа
// 
// Возвращаемое значение:
//  Булево - ИСТИНА - при удачном формировании перемещения изделий, ЛОЖЬ - при ошибках 
//
Функция СформироватьПеремещениеИзделийПоЗаявкеНаДействие(ДокументСсылка, СообщениеОбОшибке = "", Отказ = Ложь) Экспорт

	ДокументПеремещений = Документы.Scan_ПеремещениеИзделий.СоздатьДокумент();
	ДокументПеремещений.Дата = ТекущаяДата();
	ДокументПеремещений.УстановитьНовыйНомер();
	ДокументПеремещений.ДокументОснование = ДокументСсылка;
	ДокументПеремещений.МестоОтгрузки = ДокументСсылка.МестоПолучения;
	ДокументПеремещений.МестоДоставки = ДокументСсылка.МестоДоставки;
	//rarus tenkam 20.01.2017 mantis 8172 ++
	//ДокументПеремещений.ДатаОтгрузки = ДокументСсылка.ДатаИВремяПоручения;
	//ДокументПеремещений.ДатаДоставки = ДокументСсылка.ДатаИВремяПоручения + 10;
	//rarus tenkam 20.01.2017 mantis 8172 --
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь(); 
	ДокументПеремещений.ВалютаДокумента = ДокументСсылка.ВалютаДокумента;
	ДокументПеремещений.Организация = ТекущийПользователь.Организация;
	ДокументПеремещений.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
	ДокументПеремещений.Автор = ТекущийПользователь;
	ДокументПеремещений.Менеджер = ТекущийПользователь;
	//rarus vikhle 27.04.2020 mt 15695 +++
	Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекущийПользователь,ДокументПеремещений.Компания,ДокументПеремещений.Контрагент);
	//rarus vikhle 27.04.2020 mt 15695 ---
	ДокументПеремещений.ДатаСоздания = ТекущаяДата();
	ДокументПеремещений.Комментарий = "Документ создан автоматически на основании заявки на действие № " + ДокументСсылка.Номер;
	ДокументПеремещений.ДатаПроведения = ТекущаяДата();
	
	Для Каждого ТекПродукт Из ДокументСсылка.ПродуктыПоЗаявке Цикл
		НоваяСтрока = ДокументПеремещений.ИзделияДляПеремещения.Добавить();
		НоваяСтрока.Изделие = ТекПродукт.Изделие;
		//rarus tenkam 20.01.2017 mantis 8172 +++
		НоваяСтрока.ДатаПолучения = ДокументСсылка.ДатаИВремяПоручения;	
		// rarus tenkam 05.04.2019 mantis 14280 +++
		//Если ДокументСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
		//	ДокументСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство Тогда
		//	НоваяСтрока.ДатаДоставки = НоваяСтрока.ДатаПолучения + 10;
		//КонецЕсли;
		// rarus tenkam 05.04.2019 mantis 14280 ---
		//rarus tenkam 20.01.2017 mantis 8172 ---
	КонецЦикла;
	
	Попытка
		// rarus tenkam 21.02.2019 mantis 14105 +++
		//ДокументПеремещений.Записать(РежимЗаписиДокумента.Проведение);
		ДокументПеремещений.Записать(РежимЗаписиДокумента.Запись);
		// rarus tenkam 21.02.2019 mantis 14105 ---
	Исключение
		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
		//СообщениеОбОшибке = "Не удалось сформировать перемещение изделий: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = Нстр("ru = 'Не удалось сформировать перемещение изделий: '; en = 'Failed to generate the movement of goods: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//rarus FominskiyAS 19.04.2019  mantis 14191 ---
		Отказ = Истина;
		Возврат Неопределено;	
	КонецПопытки;
	Возврат ДокументПеремещений.Ссылка;
	
КонецФункции

// Процедура - Обработать смену статуса заявки
//
// Параметры:
//  ЗаявкаНаДействиеСсылка	 - ДокументСсылка.Scan_ЗаявкаНаДействие	 - Документ, из которго отправляется пф
//  ИмяПечатнойФормы		 - Строка - Имя печатной формы в конфигураторе
//
Процедура ОбработатьСменуСтатусаЗаявки(ЗаявкаНаДействиеСсылка, ИмяПечатнойФормы) Экспорт
	
	// rarus tenkam 10.04.2018 mantis 12969 +++
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаДействиеСсылка) Тогда
		Возврат;
	КонецЕсли;
	// rarus tenkam 10.04.2018 mantis 12969 ---
	
	//rarus tenkam 30.01.2017 mantis 8400 +++
	Если (ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство И ИмяПечатнойФормы = "ПФ_MXL_ПередачаВПроизводство") ИЛИ	
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство И ИмяПечатнойФормы = "ПФ_MXL_СнятиеСХраненияИПередачаВПроизводство") ИЛИ
		//Если (ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство И ИмяПечатнойФормы = "М15") ИЛИ 
		//(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство И ИмяПечатнойФормы = "М15") ИЛИ
	//rarus tenkam 30.01.2017 mntis 8400 ---	
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу И ИмяПечатнойФормы = "ПФ_MXL_ПокупкаУПоставщикаИПродажаТретьемуЛицу") ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение И ИмяПечатнойФормы = "ПФ_MXL_ПокупкаУПоставщикаСПостановкойНаХранение") ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение И ИмяПечатнойФормы = "ПФ_MXL_ПостановкаНаХранение") ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу И ИмяПечатнойФормы = "ПФ_MXL_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу") ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу И ИмяПечатнойФормы = "ПФ_MXL_СнятиеСХраненияИПродажаТретьемуЛицу") ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу И ИмяПечатнойФормы = "ПФ_MXL_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу") Тогда
		
		// rarus tenkam 10.04.2018 mantis 12969 +++
		Если ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Новая Тогда
		// rarus tenkam 10.04.2018 mantis 12969 ---
			УстановитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе);	
		КонецЕсли;	// rarus tenkam 10.04.2018 mantis 12969 +
		
	//rarus tenkam 08.02.2017 mantis 8331 +++
	ИначеЕсли (ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение И ИмяПечатнойФормы = "ПФ_MXL_ПостановкаНаХранение") ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство И ИмяПечатнойФормы = "ПФ_MXL_ПередачаВПроизводство") Тогда
		Если ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Подтверждена Тогда
			// rarus tenkam 15.07.2020 mantis 16322 +++
			СтатусЗаявкиПеревозчику = ПолучитьСтатусЗаявкиПеревозчику(ЗаявкаНаДействиеСсылка);
			Если СтатусЗаявкиПеревозчику = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена Тогда
				УстановитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена);
				// Проверим, возможно уже есть прикрепленный файл, тогда нужно установить статус Исполнена
				ОбновитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка);
			Иначе
			// rarus tenkam 15.07.2020 mantis 16322 ---
				УстановитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, Справочники.Scan_СтатусыЗаявокНаДействие.ЗаявкаОтправлена);
			КонецЕсли;	// rarus tenkam 15.07.2020 mantis 16322 +
		КонецЕсли;
	//rarus tenkam 08.02.2017 mantis 8331 ---
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Установить статус заявки на действие
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.Scan_ЗаявкаНаДействие	 - Документ, в котором необходимо установить статус
//  СтатусДокумента	 - 	СправочникСсылка.Scan_СтатусыЗаявокНаДействие - Устанавливаемый статус
//
Процедура УстановитьСтатусЗаявкиНаДействие(ДокументСсылка, СтатусДокумента) Экспорт
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.СтатусЗаявки = СтатусДокумента;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//УстановитьДатуПередачиДилеру(ДокументСсылка); 		//rarus tenkam 27.02.2017 mantis 8415 + 	//rarus tenkam 08.11.2017 mantis 11774 + (закомментировала)

	//rarus tenkam 20.01.2017 mantis 8172 ++
	//Если ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена Тогда
	//	Если (ДокументСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
	//	ДокументСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
	//	ДокументСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство) И НетПеремещений(ДокументСсылка) Тогда
	Если ДокументСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе Тогда
		Если ДокументСсылка.ХозОперация <> Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу И
			ДокументСсылка.ХозОперация <> Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу И
			ДокументСсылка.ХозОперация <> Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь И	//rarus tenkam 15.08.2017 mantis 9319 +
			
			(НЕ ЭтоЗаявкаCПеревозкой(ДокументСсылка)) И НетПеремещений(ДокументСсылка) Тогда
			//rarus tenkam 20.01.2017 mantis 8172 --
			СообщениеОбОшибке = "";
			ПеремещениеОтказ = Ложь;
			ПеремещениеСсылка = СформироватьПеремещениеИзделийПоЗаявкеНаДействие(ДокументСсылка, СообщениеОбОшибке, ПеремещениеОтказ);
			Если ПеремещениеОтказ Тогда
				Сообщить(СообщениеОбОшибке);
			Иначе
				//rarus FominskiyAS 08.07.2019  mantis 14191 +++
				//Сообщить("Сформировано " + ПеремещениеСсылка + ".");
				Сообщить(НСтр("ru = 'Сформировано '; en = 'Formed '") + ПеремещениеСсылка + ".");
				//rarus FominskiyAS 08.07.2019  mantis 14191 ---  
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабочик подписки на событие при записи присоединенного файла к заявке на действие
//
// Параметры:
//  Источник - СправочникСсылка.Scan_ЗаявкаНаДействиеПрисоединенныеФайлы - Карточка присоединенного файла 
//  Отказ	 - Булево - Отказ от записи элемента
//
Процедура ОбновитьСтатусЗаявкиНаДействиеОбработчик(Источник, Отказ) Экспорт
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаНаДействиеСсылка = Источник.ВладелецФайла;
	//rarus bonmak 03.11.2020 14375 ++
	ПрямаяПродажа = Ложь;
	Если ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу Тогда
		Если ЗаявкаНаДействиеСсылка.ПродуктыПоЗаявке.Количество() > 0 Тогда 
			ПрямаяПродажа = ПолучитьВидПродажи(ЗаявкаНаДействиеСсылка.ПродуктыПоЗаявке[0].Изделие);
		КонецЕсли;
	КонецЕсли;	
	//rarus bonmak 03.11.2020 14375 --
	ОбновитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, ПрямаяПродажа); //rarus bonmak 03.11.2020 14375 добавил второй параметр
КонецПроцедуры

// Процедура - Обновить статус заявки на действие
//
// Параметры:
//  ЗаявкаНаДействиеСсылка	 - ДокументСсылка.Scan_ЗаявкаНаДействие	 - Заявка на действие
//
Процедура ОбновитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, ПрямаяПродажа = Ложь) Экспорт //rarus bonmak 03.11.2020 14375 добавил второй параметр
	
	Если ЗаявкаНаДействиеСсылка.СтатусЗаявки <> Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе И
		ЗаявкаНаДействиеСсылка.СтатусЗаявки <> Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена Тогда		//rarus tenkam 08.02.2017 mantis 8331 +
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействиеПрисоединенныеФайлы.ВладелецФайла,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаявкаНаДействиеПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
		|ИЗ
		|	Справочник.Scan_ЗаявкаНаДействиеПрисоединенныеФайлы КАК Scan_ЗаявкаНаДействиеПрисоединенныеФайлы
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И Scan_ЗаявкаНаДействиеПрисоединенныеФайлы.Расширение В(&Расширение)
		|	И Scan_ЗаявкаНаДействиеПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаявкаНаДействиеПрисоединенныеФайлы.ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ЗаявкаНаДействиеСсылка);
	МассивРасширений = Новый Массив;
	МассивРасширений.Добавить("pdf");
	МассивРасширений.Добавить("jpg");
	Запрос.УстановитьПараметр("Расширение", МассивРасширений);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоФайлов = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Есть нужные прикрепленные файлы
		КоличествоФайлов = ВыборкаДетальныеЗаписи.КоличествоФайлов;
	КонецЕсли;

	// rarus tenkam 29.03.2019 mantis 14280 +++
	//Если (ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство И КоличествоФайлов = 1) ИЛИ 
	Если (ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство И КоличествоФайлов = 1 И ВсеИзделияПеремещены(ЗаявкаНаДействиеСсылка)) ИЛИ 
	// rarus tenkam 29.03.2019 mantis 14280 ---	
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство И КоличествоФайлов = 2 И ВсеИзделияПеремещены(ЗаявкаНаДействиеСсылка)) ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение И КоличествоФайлов = 1 И ВсеИзделияПеремещены(ЗаявкаНаДействиеСсылка)) ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение И КоличествоФайлов = 1 И ВсеИзделияПеремещены(ЗаявкаНаДействиеСсылка)) ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу И КоличествоФайлов = 1 И ВсеИзделияПеремещены(ЗаявкаНаДействиеСсылка)) ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу И КоличествоФайлов = 1 И ЕстьДатаПродажиПоВсемИзделиямЗаявки(ЗаявкаНаДействиеСсылка, ПрямаяПродажа)) ИЛИ //rarus bonmak 03.11.2020 14375 добавил второй параметр прямая продажа
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу И КоличествоФайлов = 2 И ВсеИзделияПеремещены(ЗаявкаНаДействиеСсылка)) ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение И КоличествоФайлов = 1 И ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена) ИЛИ
		(ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство И КоличествоФайлов = 1 И ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена) 
		//rarus tenkam 08.02.2017 mantis 8331 ---
		//rarus bonmak 11.12.2019 15082 ++
		ИЛИ (ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК И КоличествоФайлов = 1 И ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена) 
		ИЛИ (ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК И КоличествоФайлов = 1 И ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ДоставкаЗавершена) Тогда  
		//rarus bonmak 11.12.2019 15082 --

			УстановитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена);		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Установить исполнение заявки на "Покупку у поставщика и продажу третьему лицу"
//
// Параметры:
//  ПродуктСсылка	 - СправочникСсылка.Scan_Продукты - Продукт, после установки даты продажи которого нужно обработать заявки на действие 
// 
// Возвращаемое значение:
//   - 
//
// rarus tenkam 13.08.2019 mantis 14427 +++
//Функция УстановитьИсполнениеЗаявкиНаПокупкуУПоставщикаИПродажуТретьемуЛицу(ПродуктСсылка = Неопределено) Экспорт
Функция УстановитьИсполнениеЗаявкиНаПокупкуУПоставщикаИПродажуТретьемуЛицу(ИзделиеСсылка = Неопределено, ПрямаяПродажа = Ложь) Экспорт //rarus bonmak 03.11.2020 14375 добавил второй параметр
// rarus tenkam 13.08.2019 mantis 14427 ---
	// rarus tenkam 13.08.2019 mantis 14427 +++
	//Если ЗначениеЗаполнено(ПродуктСсылка) Тогда
	Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда
	// rarus tenkam 13.08.2019 mantis 14427 ---
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействиеСсылка
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Scan_ЗаявкаНаДействие КАК Scan_ЗаявкаНаДействие
		|		ПО Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка = Scan_ЗаявкаНаДействие.Ссылка
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)
		// rarus tenkam 13.08.2019 mantis 14427 +++
		//|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт = &ПродуктСсылка
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие = &ИзделиеСсылка
		// rarus tenkam 13.08.2019 mantis 14427 ---
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка";
		
		//Запрос.УстановитьПараметр("СтатусЗаявки", Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе);
		//Запрос.УстановитьПараметр("ХозОперация", Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу);
		// rarus tenkam 13.08.2019 mantis 14427 +++
		//Запрос.УстановитьПараметр("ПродуктСсылка", ПродуктСсылка);
		Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
		// rarus tenkam 13.08.2019 mantis 14427 ---
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЕстьДатаПродажиПоВсемИзделиямЗаявки(ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеСсылка, ПрямаяПродажа) Тогда //rarus bonmak 03.11.2020 14375 добавил второй параметр
				УстановитьСтатусЗаявкиНаДействие(ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеСсылка, Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции

// Функция - Установить исполнение заявки на "Снятие с хранения и продажу третьему лицу"
//
// Параметры:
//  ПродуктСсылка	 - СправочникСсылка.Scan_Продукты - Продукт, после установки даты продажи которого нужно обработать заявки на действие 
// 
// Возвращаемое значение:
//   - 
//
// rarus tenkam 13.08.2019 mantis 14427 +++
//Функция УстановитьИсполнениеЗаявкиНаСнятиеСХраненияИПродажуТретьимЛицам(ПродуктСсылка = Неопределено) Экспорт
Функция УстановитьИсполнениеЗаявкиНаСнятиеСХраненияИПродажуТретьимЛицам(ИзделиеСсылка = Неопределено, ПрямаяПродажа = Ложь) Экспорт //rarus bonmak 03.11.2020 14375 добавил второй параметр
// rarus tenkam 13.08.2019 mantis 14427 ---
	// rarus tenkam 13.08.2019 mantis 14427 +++
	//Если ЗначениеЗаполнено(ПродуктСсылка) Тогда	
	Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда	
	// rarus tenkam 13.08.2019 mantis 14427 ---
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействиеСсылка
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Scan_ЗаявкаНаДействие КАК Scan_ЗаявкаНаДействие
		|		ПО Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка = Scan_ЗаявкаНаДействие.Ссылка
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу)
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)
		// rarus tenkam 13.08.2019 mantis 14427 +++
		//|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт = &ПродуктСсылка
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие = &ИзделиеСсылка
		// rarus tenkam 13.08.2019 mantis 14427 ---
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка";
		
		// rarus tenkam 13.08.2019 mantis 14427 +++
		//Запрос.УстановитьПараметр("ПродуктСсылка", ПродуктСсылка);
		Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
		// rarus tenkam 13.08.2019 mantis 14427 ---
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбновитьСтатусЗаявкиНаДействие(ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеСсылка, ПрямаяПродажа); //rarus bonmak 03.11.2020 14375 добавил второй параметр
		КонецЦикла;
	КонецЕсли;
КонецФункции

//rraus tenkam 16.08.2017 mantis 9319 +++

// Функция - Установить исполнение заявки на "Продажу третьему лицу со склада Скания-Русь"
//
// Параметры:
//  ПродуктСсылка	 - СправочникСсылка.Scan_Продукты - Продукт, после установки даты продажи которого нужно обработать заявки на действие 
// 
// Возвращаемое значение:
//   - 
//
// rarus tenkam 13.08.2019 mantis 14427 +++
//Функция УстановитьИсполнениеЗаявкиНаПродажуТретьемуЛицуоСкладаСканияРусь(ПродуктСсылка = Неопределено) Экспорт
Функция УстановитьИсполнениеЗаявкиНаПродажуТретьемуЛицуоСкладаСканияРусь(ИзделиеСсылка = Неопределено, ПрямаяПродажа = Ложь) Экспорт //rarus bonmak 03.11.2020 14375 добавил второй параметр
// rarus tenkam 13.08.2019 mantis 14427 ---
	// rarus tenkam 13.08.2019 mantis 14427 +++
	//Если ЗначениеЗаполнено(ПродуктСсылка) Тогда
	Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда
	// rarus tenkam 13.08.2019 mantis 14427 ---
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействиеСсылка
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Scan_ЗаявкаНаДействие КАК Scan_ЗаявкаНаДействие
		|		ПО Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка = Scan_ЗаявкаНаДействие.Ссылка
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
		|			И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Новая)
		//rarus pechek 30.01.2020 mantis 15560  +++
		|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)) 
		//rarus pechek 30.01.2020 mantis 15560  ---
		
		// rarus tenkam 13.08.2019 mantis 14427 +++
		//|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт = &ПродуктСсылка
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие = &ИзделиеСсылка
		// rarus tenkam 13.08.2019 mantis 14427 +++
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА 	//rarus tenkam 12.10.2017 mantis 11368 +
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПровереноАП = ИСТИНА 	//rarus tenkam 12.10.2017 mantis 11368 +
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка";
		
		// rarus tenkam 13.08.2019 mantis 14427 +++
		//Запрос.УстановитьПараметр("ПродуктСсылка", ПродуктСсылка);
		Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
		// rarus tenkam 13.08.2019 mantis 14427 +++
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЕстьДатаПродажиПоВсемИзделиямЗаявки(ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеСсылка, ПрямаяПродажа) Тогда //rarus bonmak 03.11.2020 14375 добавил второй параметр
				УстановитьСтатусЗаявкиНаДействие(ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеСсылка, Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции
//rarus tenkam 16.08.2017 mantis 9319 ---

//rarus tenkam 23.11.2017 mantis 11774 +++
Процедура УстановитьИсполнениеЗаявкиСПродажей(ЗаявкаНаДействиеСсылка) Экспорт
	Если Не ЗначениеЗаполнено(ЗаявкаНаДействиеСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаявкаНаДействиеСсылка.Проведен ИЛИ НЕ ЗаявкаНаДействиеСсылка.ПровереноАП Тогда
		Возврат;
	КонецЕсли;
	//rarus bonmak 03.11.2020 14375 ++
	ПрямаяПродажа = Ложь;
	Если ЗаявкаНаДействиеСсылка.ПродуктыПоЗаявке.Количество() > 0 Тогда 
		ПрямаяПродажа = ПолучитьВидПродажи(ЗаявкаНаДействиеСсылка.ПродуктыПоЗаявке[0].Изделие);
	КонецЕсли;
	//rarus bonmak 03.11.2020 14375 --
	Если ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу И
		ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе Тогда
		
		ОбновитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, ПрямаяПродажа); //rarus bonmak 03.11.2020 14375 добавил второй параметр
		
	ИначеЕсли ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу И
		ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе Тогда
		
		Если ЕстьДатаПродажиПоВсемИзделиямЗаявки(ЗаявкаНаДействиеСсылка, ПрямаяПродажа) Тогда //rarus bonmak 03.11.2020 14375 добавил второй параметр
			УстановитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена);
		КонецЕсли;
		
	ИначеЕсли ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь И
		(ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Новая ИЛИ 
		ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе) Тогда //rarus pechek 30.01.2020 mantis 15560

		
		Если ЕстьДатаПродажиПоВсемИзделиямЗаявки(ЗаявкаНаДействиеСсылка, ПрямаяПродажа) Тогда //rarus bonmak 03.11.2020 14375 добавил второй параметр
			УстановитьСтатусЗаявкиНаДействие(ЗаявкаНаДействиеСсылка, Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
//rarus tenkam 23.11.2017 mantis 11774 ---

Функция ПолучитьВидПродажи(ЭлементСсылка) Экспорт //rarus bonmak 03.11.2020 14375 ++
	//Прямая продажа - продажа конечному клиенту без участия дилера, т.е. нет даты продажи дилеру
	ПрямаяПродажа = Ложь;
	Если Тип("СправочникСсылка.Scan_Изделия") = ТипЗнч(ЭлементСсылка) Тогда
		ИзделиеСсылка = ЭлементСсылка;
		ЗаказНаЗаводСсылка = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(ИзделиеСсылка);
	Иначе
		ЗаказНаЗаводСсылка = ЭлементСсылка;
		ИзделиеСсылка = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(ЗаказНаЗаводСсылка);
	КонецЕсли;
	
	Если ИзделиеСсылка.Пустая() Тогда
		Возврат ПрямаяПродажа;	
	КонецЕсли;
	ПризнакБУ = ИзделиеСсылка.БУ; 
		
	Если ПризнакБУ Тогда 
		//продажа БУ
		ЗначДатаПродажиИзделия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ИзделиеСсылка,
		Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру),
		Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру, ТекущаяДата());
	Иначе
		Если ЗаказНаЗаводСсылка.Пустая() Тогда
			Возврат ПрямаяПродажа;	
		КонецЕсли;
		ЗначДатаПродажиИзделия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ЗаказНаЗаводСсылка,
		Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия),
		Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, ТекущаяДата());
	КонецЕсли;
	
	Если ЗначДатаПродажиИзделия = Неопределено  
		ИЛИ ЗначДатаПродажиИзделия <> Дата(1,1,1)Тогда
		ПрямаяПродажа = Ложь;
	Иначе
		ПрямаяПродажа = Истина;
	КонецЕсли;

	Возврат ПрямаяПродажа;
КонецФункции //rarus bonmak 03.11.2020 14375 --

// Функция - Есть дата продажи по всем изделиям заявки
//
// Параметры:
//  ДокументСсылка	 - 	 - 
// 
// Возвращаемое значение:
//  Булево - 
//
Функция ЕстьДатаПродажиПоВсемИзделиямЗаявки(ДокументСсылка, ПрямаяПродажа = Ложь) Экспорт //rarus bonmak 03.11.2020 14375 добавил второй параметр
	// rarus tenkam 13.08.2019 mantis 14427 +++
	
	//Для Каждого ТекПродукт Из ДокументСсылка.ПродуктыПоЗаявке Цикл
	//	Если НЕ ЗначениеЗаполнено(ТекПродукт.Продукт.ДатаПродажиИзделия) Тогда
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЦикла; 
	
	Для Каждого ТекСтрока Из ДокументСсылка.ПродуктыПоЗаявке Цикл
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьЗадачиСНакладными") Тогда //rarus bonmak 03.09.2020 14375 добавил условие и отработку истина
			ПризнакБУ = ТекСтрока.Изделие.БУ;
			Если ПризнакБУ Тогда
				СсылкаОбъекта = ТекСтрока.Изделие;
				Если ПрямаяПродажа Тогда //rarus bonmak 03.11.2020 14375 добавил условие и отработку истина
					ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту;
				Иначе
					ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру; 
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Изделие.ЗаказНаЗавод) Тогда
					Возврат Ложь;
				КонецЕсли;
				СсылкаОбъекта = ТекСтрока.Изделие.ЗаказНаЗавод;
				Если ПрямаяПродажа Тогда //rarus bonmak 03.11.2020 14375 добавил условие и отработку истина
					ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту;
				Иначе
					ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия;
				КонецЕсли;
			КонецЕсли;
			
			ТекДатаПродажиИзделия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(СсылкаОбъекта,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(ВидКлючевойДаты), 
			ВидКлючевойДаты, ТекущаяДата());	
			
			Если НЕ ЗначениеЗаполнено(ТекДатаПродажиИзделия) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			//rarus bonmak 03.09.2020 14375 старый алгоритм
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Изделие.ЗаказНаЗавод) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекДатаПродажиИзделия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСтрока.Изделие.ЗаказНаЗавод,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия), 
			Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, ТекущаяДата());	
			
			Если НЕ ЗначениеЗаполнено(ТекДатаПродажиИзделия) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;                                    
	
	// rarus tenkam 13.08.2019 mantis 14427 ---
	Возврат Истина;
КонецФункции

// Функция - Нет перемещений по заявке на действие
//
// Параметры:
//  ДокументСсылка	 - 	 - 
// 
// Возвращаемое значение:
//  Булево - 
//
Функция НетПеремещений(ЗаявкаНаДействиеСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ПеремещениеИзделий.Ссылка
		|ИЗ
		|	Документ.Scan_ПеремещениеИзделий КАК Scan_ПеремещениеИзделий
		|ГДЕ
		|	Scan_ПеремещениеИзделий.ДокументОснование = &ДокументОснованиеСсылка
		|	И Scan_ПеремещениеИзделий.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ЗаявкаНаДействиеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//rarus tenkam 23.11.2016 mantis 7750 --
// rarus tenkam 16.01.2016 mantis 8172 ++

// Функция - Возвращает ИСТИНА, если все изделия доставлены 
// Параметры:
//  ЗаявкаНаДействиеСсылка	 - 	 - 
// 
// Возвращаемое значение:
//  Булево - 
//
Функция ВсеИзделияПеремещены(ЗаявкаНаДействиеСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ПеремещениеИзделий.Ссылка
		|ИЗ
		|	Документ.Scan_ПеремещениеИзделий КАК Scan_ПеремещениеИзделий
		|ГДЕ
		|	Scan_ПеремещениеИзделий.ДокументОснование = &ДокументОснованиеСсылка
		|	И Scan_ПеремещениеИзделий.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ПеремещениеИзделий.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ЗаявкаНаДействиеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПеремещениеСсылка = Выборка.Ссылка;
		Для Каждого ТекИзделие Из ПеремещениеСсылка.ИзделияДляПеремещения Цикл
			Если НЕ ЗначениеЗаполнено(ТекИзделие.ДатаДоставки) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;		
	КонецЕсли;	
КонецФункции

// Функция - Если это заявка на действие с передачей ТК или доставкой, то возвращает ИСТИНА, иначе ЛОЖЬ
//
// Параметры:
//  ЗаявкаНаДействиеСсылка	 - 	 - 
// 
// Возвращаемое значение:
//  Булево - 
//
Функция ЭтоЗаявкаCПеревозкой(ЗаявкаНаДействиеСсылка) Экспорт
	Если ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка ИЛИ
		//rarus tenkam 08.02.2017 mantis 8331 +++
		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ  
		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ   
		//rarus tenkam 08.02.2017 mantis 8331 ---
		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 		//rarus tenkam 26.09.2017 mantis 10742 +
		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Функция - Возвращает ссылку на документ "Перемещение изделий", введенные на основании заявки на действие
//
// Параметры:
//  ЗаявкаНаДействиеСсылка	 - 	 - 
// 
// Возвращаемое значение:
//  ДокументСсылка.Scan_ПеремещениеИзделий - 
//
Функция ПолучитьПеремещениеЗаявки(ЗаявкаНаДействиеСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ПеремещениеИзделий.Ссылка
		|ИЗ
		|	Документ.Scan_ПеремещениеИзделий КАК Scan_ПеремещениеИзделий
		|ГДЕ
		|	Scan_ПеремещениеИзделий.ДокументОснование = &ДокументОснованиеСсылка
		|	И Scan_ПеремещениеИзделий.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ЗаявкаНаДействиеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.Scan_ПеремещениеИзделий.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПеремещениеСсылка = Выборка.Ссылка;
		Возврат ПеремещениеСсылка;		
	КонецЕсли;	
	
КонецФункции

// Функция - Возвращает статус документа "Заявка на действие"
//
// Параметры:
//  ЗаявкаНаДействиеСсылка	 - 	 - 
// 
// Возвращаемое значение:
//  СправочникСсылка.Scan_СтатусыЗаявкиНаДействие - 
//
Функция ПолучитьСтатусЗаявкаНаДействие(ЗаявкаНаДействиеСсылка) Экспорт
	Возврат ЗаявкаНаДействиеСсылка.СтатусЗаявки;
КонецФункции

// Функция - Заявка на действие проверена администратором продаж
//
// Параметры:
//  ЗаявкаНаДействиеСсылка	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ЗаявкаНаДействиеПроверенаАдмПродаж(ЗаявкаНаДействиеСсылка) Экспорт
	Возврат ЗаявкаНаДействиеСсылка.ПровереноАП;
КонецФункции
//rarus tenkam 20.01.2016 mantis 8172 --

// rarus tenkam 12.08.2019 mantis 14427 +++
////rarus tenkam 15.02.2017 mantis 7119 ++

//// Функция - Получить текущую заявку надействие
////
//// Параметры:
////  ПродуктСсылка	 - СправочникСсылка.Scan_Продукты	 - 
//// 
//// Возвращаемое значение:
////  ДокументСсылка.Scan_ЗаявкаНаДействие - 
////
//Функция ПолучитьТекущуюЗаявкуНадействие(ПродуктСсылка) Экспорт
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК Ссылка
//		|ИЗ
//		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
//		|ГДЕ
//		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт = &ПродуктСсылка
//		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
//		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
//		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена)		//rarus tenkam 08.11.2017 mantis 11774 +
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Дата";
//	
//	Запрос.УстановитьПараметр("ПродуктСсылка", ПродуктСсылка);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//		Возврат ВыборкаДетальныеЗаписи.Ссылка;
//	КонецЕсли;;
//	Возврат Документы.Scan_ЗаявкаНаДействие.ПустаяСсылка();	
//			
//КонецФункции
////rarus tenkam 15.02.2017 mantis 7119 --
// rarus tenkam 12.08.2019 mantis 14427 ---

//rarus tenkam 08.11.2017 mantis 11774 +++
Процедура УстановитьДатуПередачиДилеру(ИзделиеСсылка, ДатаДоставкиФакт = Неопределено, ЗаявкаНаДействие = Неопределено) Экспорт 	// rarus tenkam 12.08.2019 mantis 14427 +++ заменила ПродуктСсылка на ИзделиеСсылка
	//rarus bonmak 17.08.2020 14375 ++
	ЭтоБУ = Ложь;
	ПрямаяПродажа = Ложь; //rarus bonmak 03.11.2020 14375
	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьЗадачиСНакладными") Тогда 
		ЭтоБУ = ИзделиеСсылка.БУ; 
		ПрямаяПродажа = ПолучитьВидПродажи(ИзделиеСсылка); //rarus bonmak 03.11.2020 14375	
	КонецЕсли;
	//rarus bonmak 17.08.2020 14375 --
	// Нельзя установить дату передачи дилеру, если нет даты продажи
	// rarus tenkam 12.08.2019 mantis 14427 +++
	//Если НЕ ЗначениеЗаполнено(ПродуктСсылка.ДатаПродажиИзделия) Тогда
	//	ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"У продукта " + ПродуктСсылка + " не установлена дата продажи");
	Если НЕ ЭтоБУ Тогда //rarus bonmak 17.08.2020 14375 добавил условие
		Если НЕ ЗначениеЗаполнено(ИзделиеСсылка.ЗаказНаЗавод) Тогда
			ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"У продукта " + ИзделиеСсылка + " нет заказа на завод");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	НаДату = ТекущаяДата() + 1; //rarus bonmak 27.08.2019 14811 
	Если ЭтоБУ Тогда //rarus bonmak 17.08.2020 14375 добавил условие и отработку истина
		//Даты по БУ
		Если ПрямаяПродажа Тогда //rarus bonmak 03.11.2020 14375 добавил условие и отработку истина
			ТекДатаПередачиИзделияДилеру = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ИзделиеСсылка,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту), 
			Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту, НаДату);
		Иначе
			ДатаПродажиИзделия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ИзделиеСсылка,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру), 
			Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру, НаДату); 
			
			ТекДатаПередачиИзделияДилеру = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ИзделиеСсылка,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПередачиБУИзделияДилеру), 
			Перечисления.Scan_КлючевыеДаты.ДатаПередачиБУИзделияДилеру, НаДату);
		КонецЕсли;
	Иначе
		Если ПрямаяПродажа Тогда //rarus bonmak 03.11.2020 14375 добавил условие и отработку истина
			ТекДатаПередачиИзделияДилеру = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ИзделиеСсылка.ЗаказНаЗавод,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту), 
			Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту, НаДату);
		Иначе
			ДатаПродажиИзделия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ИзделиеСсылка.ЗаказНаЗавод,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия), 
			Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, НаДату); //rarus bonmak 27.08.2019 14811 было ТекущаяДата() 
			
			ТекДатаПередачиИзделияДилеру = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ИзделиеСсылка.ЗаказНаЗавод,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру), 
			Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, НаДату); //rarus bonmak 27.08.2019 14811 было ТекущаяДата()
		КонецЕсли;
	КонецЕсли;
	Если ПрямаяПродажа Тогда //rarus bonmak 03.11.2020 14375 добавил условие и отработку истина
		Если НЕ ЗначениеЗаполнено(ТекДатаПередачиИзделияДилеру) Тогда			
			ЗаписьЖурналаРегистрации("Установка даты продажи клиенту", УровеньЖурналаРегистрации.Предупреждение,,,"У продукта " + ИзделиеСсылка + " не установлена дата продажи клиенту");
			// rarus tenkam 12.08.2019 mantis 14427 ---		
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ДатаПродажиИзделия) Тогда			
			ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"У продукта " + ИзделиеСсылка + " не установлена дата продажи");
			// rarus tenkam 12.08.2019 mantis 14427 ---		
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаНаДействие) Тогда
		
		// rarus tenkam 21.05.2018 mantis 13115 +++
		Если НЕ (ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
			ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ 
			ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 
			ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ 
			ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ 
			ЗаявкаНаДействие.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь) Тогда 	
			
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"Не найдена заявка с продажей для " + ПродуктСсылка);
			ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"Не найдена заявка с продажей для " + ИзделиеСсылка);
			// rarus tenkam 12.08.2019 mantis 14427 ---
			Возврат;
		КонецЕсли;
		// rarus tenkam 21.05.2018 mantis 13115 ---
		
		МассивЗаявок = Новый Массив;
		МассивЗаявок.Добавить(ЗаявкаНаДействие);
	Иначе
		// rarus tenkam 12.08.2019 mantis 14427 +++
		//МассивЗаявок = ПолучитьЗаявкиНаДействиеСПродажей(ПродуктСсылка);
		МассивЗаявок = ПолучитьЗаявкиНаДействиеСПродажей(ИзделиеСсылка);
		// rarus tenkam 12.08.2019 mantis 14427 ---
			
	КонецЕсли;	
		
	Для Каждого ЗаявкаНаДействиеСсылка Из МассивЗаявок Цикл
		
		// Дата передачи дилеру уже есть
		
		// rarus tenkam 12.08.2019 mantis 14427 +++
		//Если ЗначениеЗаполнено(ПродуктСсылка.ДатаПередачиИзделияДилеру) Тогда
		//	ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"У продукта " + ПродуктСсылка + " уже установлена дата передачи дилеру " + ПродуктСсылка.ДатаПередачиИзделияДилеру);
		Если ЗначениеЗаполнено(ТекДатаПередачиИзделияДилеру) Тогда
			ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"У продукта " + ИзделиеСсылка + " уже установлена дата передачи дилеру " + ТекДатаПередачиИзделияДилеру);
		// rarus tenkam 12.08.2019 mantis 14427 ---
			
			// rarus tenkam 10.04.2018 mantis 12988 +++  			
			МестоДоставки = Неопределено;
			ДатаПередачиИзделияДилеру = Неопределено;	// rarus tenkam 11.01.2019 mantis 13969 +	
			
			Если ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
				ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ 
				ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК Тогда 	
				
				МестоДоставки = ЗаявкаНаДействиеСсылка.МестоДоставки;
			// rarus tenkam 23.04.2018 mantis 12931 +++
				// rarus tenkam 11.01.2019 mantis 13969 +++
				Если ПрямаяПродажа Тогда //rarus bonmak 03.11.2020 14375 добавил условие и отработку истина
					ДатаПередачиИзделияДилеру = КонецДня(ТекДатаПередачиИзделияДилеру)-9;
				Иначе
					Если НЕ ЗначениеЗаполнено(ДатаДоставкиФакт) Тогда
						// rarus tenkam 12.08.2019 mantis 14427 +++
						//ДатаДоставкиФакт = ПолучитьДатуДоставкиФакт(ЗаявкаНаДействиеСсылка, ПродуктСсылка.Изделие);
						ДатаДоставкиФакт = ПолучитьДатуДоставкиФакт(ЗаявкаНаДействиеСсылка, ИзделиеСсылка);
						// rarus tenkam 12.08.2019 mantis 14427 ---
						
						Если НЕ ЗначениеЗаполнено(ДатаДоставкиФакт) Тогда
							// rarus tenkam 12.08.2019 mantis 14427 +++
							//ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"Для продукта " + ПродуктСсылка + " не удалось получить дату доставки (факт)");
							//ДатаПередачиИзделияДилеру = КонецДня(ПродуктСсылка.ДатаПередачиИзделияДилеру);
							ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"Для продукта " + ИзделиеСсылка + " не удалось получить дату доставки (факт)");
							// rarus tenkam 07.10.2020 mantis 16518 +++
							//ДатаПередачиИзделияДилеру = КонецДня(ТекДатаПередачиИзделияДилеру);
							ДатаПередачиИзделияДилеру = КонецДня(ТекДатаПередачиИзделияДилеру)-9;	// отнимем 9 сек, для 23:59:50
							// rarus tenkam 07.10.2020 mantis 16518 ---
							
							// rarus tenkam 12.08.2019 mantis 14427 --- 					
						КонецЕсли;
						ДатаПередачиИзделияДилеру = ДатаДоставкиФакт + 1;	
					Иначе 
						ДатаПередачиИзделияДилеру = ДатаДоставкиФакт + 1;
					КонецЕсли;
				КонецЕсли;
				// rarus tenkam 11.01.2019 mantis 13969 ---
			Иначе				
				МестоДоставки = ЗаявкаНаДействиеСсылка.МестоПолучения;	// место продажи
			// rarus tenkam 23.04.2018 mantis 12931 ---
				// rarus tenkam 11.01.2019 mantis 13969 +++
				// rarus tenkam 12.08.2019 mantis 14427 +++
				//ДатаПередачиИзделияДилеру = КонецДня(ПродуктСсылка.ДатаПередачиИзделияДилеру); 		
				// rarus tenkam 07.10.2020 mantis 16518 +++
				//ДатаПередачиИзделияДилеру = КонецДня(ТекДатаПередачиИзделияДилеру); 		
				ДатаПередачиИзделияДилеру = КонецДня(ТекДатаПередачиИзделияДилеру)-9; 		
				// rarus tenkam 07.10.2020 mantis 16518 ---
				// rarus tenkam 12.08.2019 mantis 14427 ---
				// rarus tenkam 11.01.2019 mantis 13969 ---
			КонецЕсли;
			
			ПараметрыФоновогоЗадания = Новый Массив;
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//ПараметрыФоновогоЗадания.Добавить(ПродуктСсылка.Изделие);
			ПараметрыФоновогоЗадания.Добавить(ИзделиеСсылка);
			// rarus tenkam 12.08.2019 mantis 14427 ---
			
			// rarus tenkam 11.01.2019 mantis 13969 +++
			//// rarus tenkam 24.08.2018 mantis 13475 +++
			////ПараметрыФоновогоЗадания.Добавить(ПродуктСсылка.ДатаПередачиИзделияДилеру);
			//ПараметрыФоновогоЗадания.Добавить(КонецДня(ПродуктСсылка.ДатаПередачиИзделияДилеру));
			//// rarus tenkam 24.08.2018 mantis 13475 ---
			ПараметрыФоновогоЗадания.Добавить(ДатаПередачиИзделияДилеру);
			// rarus tenkam 11.01.2019 mantis 13969 ---
			ПараметрыФоновогоЗадания.Добавить(МестоДоставки);
			ПараметрыФоновогоЗадания.Добавить(ЗаявкаНаДействиеСсылка);		// rarus tenkam 23.04.2018 mantis 12931 +	
			ПараметрыФоновогоЗадания.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаДействиеСсылка,"ХозОперация"));		// rarus tenkam 10.10.2019 mantis 15125 +
			ФоновыеЗадания.Выполнить("Scan_ВспомогательныеФункцииСервер.СформироватьУбытиеИзУчета", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, "Установка даты передачи дилеру");	
			// rarus tenkam 10.04.2018 mantis 12988 ---
			
			Возврат;
		КонецЕсли;
		
		// rarus tenkam 12.08.2019 mantis 14427 +++
		//ПродуктОбъект = ПродуктСсылка.ПолучитьОбъект(); 		
		// rarus tenkam 12.08.2019 mantis 14427 ---
		
		// ЕСЛИ РАНЕЕ ДАТЫ ПЕРЕДАЧИ ИЗДЕЛИЯ ДИЛЕРУ НЕ БЫЛО
		
		ДатаПередачиИзделияДилеру = Неопределено;
		МестоДоставки = Неопределено;
		
		Если ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
			ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ 
			ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК Тогда 	
			
			МестоДоставки = ЗаявкаНаДействиеСсылка.МестоДоставки;
			
			Если НЕ ЗначениеЗаполнено(ДатаДоставкиФакт) Тогда
				// rarus tenkam 12.08.2019 mantis 14427 +++
				//ДатаДоставкиФакт = ПолучитьДатуДоставкиФакт(ЗаявкаНаДействиеСсылка, ПродуктСсылка.Изделие);
			    ДатаДоставкиФакт = ПолучитьДатуДоставкиФакт(ЗаявкаНаДействиеСсылка, ИзделиеСсылка);
			    // rarus tenkam 12.08.2019 mantis 14427 ---
						
				Если НЕ ЗначениеЗаполнено(ДатаДоставкиФакт) Тогда
					// rarus tenkam 12.08.2019 mantis 14427 +++
					//ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"Для продукта " + ПродуктСсылка + " не удалось получить дату доставки (факт)");
					ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"Для продукта " + ИзделиеСсылка + " не удалось получить дату доставки (факт)");
					// rarus tenkam 12.08.2019 mantis 14427 ---
					Продолжить;	
				КонецЕсли;
				
				ДатаПередачиИзделияДилеру = ДатаДоставкиФакт + 1;
			Иначе 
				ДатаПередачиИзделияДилеру = ДатаДоставкиФакт + 1;
			КонецЕсли;

		Иначе
			
			// rarus tenkam 23.04.2018 mantis 12931 +++
			МестоДоставки = ЗаявкаНаДействиеСсылка.МестоПолучения;
			// rarus tenkam 23.04.2018 mantis 12931 ---
			
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//ДатаДоставкиФакт = ПродуктСсылка.ДатаПродажиИзделия;
			ДатаДоставкиФакт = ДатаПродажиИзделия;
			// rarus tenkam 12.08.2019 mantis 14427 ---
					
			Если НЕ ЗначениеЗаполнено(ДатаДоставкиФакт) Тогда	
				// rarus tenkam 12.08.2019 mantis 14427 +++
				//ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"Для продукта " + ПродуктСсылка + " не удалось получить дату продажи");
				ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖурналаРегистрации.Предупреждение,,,"Для продукта " + ИзделиеСсылка + " не удалось получить дату продажи");
				// rarus tenkam 12.08.2019 mantis 14427 ---
				Продолжить;
			КонецЕсли;
			// rarus tenkam 07.10.2020 mantis 16518 +++
			//ДатаПередачиИзделияДилеру = КонецДня(ДатаДоставкиФакт);
			ДатаПередачиИзделияДилеру = КонецДня(ДатаДоставкиФакт)-9;
			// rarus tenkam 07.10.2020 mantis 16518 ---
				
		КонецЕсли;
		
		// rarus tenkam 12.08.2019 mantis 14427 +++				
		//ПродуктОбъект.ДатаПередачиИзделияДилеру = ДатаПередачиИзделияДилеру;
		// rarus tenkam 12.08.2019 mantis 14427 ---
		
		ВсеОк = Ложь;
		Попытка
			// rarus tenkam 12.08.2019 mantis 14427 +++				
			//ПродуктОбъект.Записать();			
			//Комментарий = "Для продукта " + ПродуктСсылка + " установлена дата передачи дилеру " + ДатаПередачиИзделияДилеру; 
			Комментарий = "Для продукта " + ИзделиеСсылка + " установлена дата передачи дилеру " + ДатаПередачиИзделияДилеру; 
			// rarus tenkam 12.08.2019 mantis 14427 ---				
			УровеньЖР = УровеньЖурналаРегистрации.Информация;
			ВсеОк = Истина;
			
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//// rarus tenkam 31.05.2019 mantis 14224 +++
			//Если ЗначениеЗаполнено(ПродуктОбъект.ЗаказНаЗавод) Тогда					
			//	// Запишем ключевую дату
			//	РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ПродуктОбъект.ЗаказНаЗавод, 
			//							Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ДатаПередачиИзделияДилеру,
			//							Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, ТекущаяДата());
			//КонецЕсли;
			//// rarus tenkam 31.05.2019 mantis 14224 ---
			
			// Запишем ключевую дату
			Если ЭтоБУ Тогда //rarus bonmak 17.08.2020 14375 добавил условие и отработку истина
				РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ИзделиеСсылка, 
				Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПередачиИзделияДилеру,
				Перечисления.Scan_КлючевыеДаты.ДатаПередачиБУИзделияДилеру, НаДату); 
			Иначе
				РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ИзделиеСсылка.ЗаказНаЗавод, 
				Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ДатаПередачиИзделияДилеру,
				Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, НаДату); //rarus bonmak 27.08.2019 14811 было ТекущаяДата()
			КонецЕсли;
			// rarus tenkam 12.08.2019 mantis 14427 ---
			
		Исключение
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//Комментарий = "Для продукта " + ПродуктСсылка + " не удалось установить дату передачи дилеру " + ДатаПередачиИзделияДилеру;	
			Комментарий = "Для продукта " + ИзделиеСсылка + " не удалось установить дату передачи дилеру " + ДатаПередачиИзделияДилеру;	
			// rarus tenkam 12.08.2019 mantis 14427 ---
			УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
		КонецПопытки;
		ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖР,,,Комментарий);
		
		Если ВсеОк Тогда
			ПараметрыФоновогоЗадания = Новый Массив;
			// rarus tenkam 12.08.2019 mantis 14427 +++
			//ПараметрыФоновогоЗадания.Добавить(ПродуктСсылка.Изделие);
			ПараметрыФоновогоЗадания.Добавить(ИзделиеСсылка);
			// rarus tenkam 12.08.2019 mantis 14427 +++
			ПараметрыФоновогоЗадания.Добавить(ДатаПередачиИзделияДилеру);
			ПараметрыФоновогоЗадания.Добавить(МестоДоставки);
			ПараметрыФоновогоЗадания.Добавить(ЗаявкаНаДействиеСсылка);		// rarus tenkam 23.04.2018 mantis 12931 +
			ПараметрыФоновогоЗадания.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаДействиеСсылка,"ХозОперация"));		// rarus tenkam 10.10.2019 mantis 15125 +
			
			ФоновыеЗадания.Выполнить("Scan_ВспомогательныеФункцииСервер.СформироватьУбытиеИзУчета", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, "Установка даты передачи дилеру");	
		
			//Документы.Scan_ДвижениеИзделий.СформироватьУбытиеИзУчета(ПродуктСсылка.Изделие, ДатаДоставкиФакт + 1);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗаявкиНаДействиеСПродажей(ИзделиеСсылка) Экспорт	// rarus tenkam 12.08.2019 mantis 14427 +++ заменила ПродуктСсылка на ИзделиеСсылка
	МассивЗаявок = Новый Массив;
	
	Запрос = Новый Запрос;
	
	// rarus tenkam 14.12.2020 mantis 16938 +++
	
	//// rarus tenkam 14.01.2019 mantis 13969 +++
	//// rarus tenkam 12.08.2019 mantis 14427 +++
	////Если ПродуктСсылка.Изделие.БУ Тогда
	//Если ИзделиеСсылка.БУ Тогда
	//// rarus tenkam 12.08.2019 mantis 14427 ---
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействиеСсылка
	//	|ИЗ
	//	|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
	//	|ГДЕ
	//	|	((Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
	//	// rarus tenkam 02.04.2020 mantis 15925 +++
	//	|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
	//	// rarus tenkam 02.04.2020 mantis 15925 ---
	//	|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу))
	//	|				И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)
	//	|					ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена))
	//	// rarus tenkam 02.04.2020 mantis 15925 +++
	//	//|			ИЛИ (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Новая)
	//	//|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена))
	//	//|				И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
	//	// rarus tenkam 02.04.2020 mantis 15925 ---
	//	|			ИЛИ (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК)
	//	|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК)
	//	|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК)
	//	|					И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Подтверждена)
	//	|						ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена))))
	//	// rarus tenkam 12.08.2019 mantis 14427 +++
	//	//|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт = &ПродуктСсылка
	//	|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие = &ИзделиеСсылка
	//	// rarus tenkam 12.08.2019 mantis 14427 ---
	//	|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
	//	|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
	//	|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.МоментВремени УБЫВ";		
	//	
	//Иначе
	//	// rarus tenkam 14.01.2019 mantis 13969 ---
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействиеСсылка
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	((Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу))
		|				И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
		|				И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Новая)
		//rarus pechek 30.01.2020 mantis 15560 +++
		|					ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе))
		//rarus pechek 30.01.2020 mantis 15560 ---
		|			ИЛИ (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК)
		|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК)
		// rarus tenkam 22.04.2019 mantis 14375 +++
		// были неверно расставлены скобки
		//|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК)
		//|				И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Подтверждена)))
		// rarus tenkam 22.04.2019 mantis 14375 ---
		|				ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК))
		|				И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Подтверждена))
		// rarus tenkam 12.08.2019 mantis 14427 +++
		//|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт = &ПродуктСсылка
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие = &ИзделиеСсылка
		// rarus tenkam 12.08.2019 mantis 14427 ---
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка";
	//КонецЕсли;		// rarus tenkam 14.01.2019 mantis 13969 +	// rarus tenkam 14.12.2020 mantis 16938 +++
	
	// rarus tenkam 12.08.2019 mantis 14427 +++
	//Запрос.УстановитьПараметр("ПродуктСсылка", ПродуктСсылка);
	Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
	// rarus tenkam 12.08.2019 mantis 14427 ---
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// rarus tenkam 10.01.2019 mantis 13931 +++
		// будем получать всегда одну заявку на продажу
		//МассивЗаявок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЗаявкаНаДействиеСсылка");
		ТекВыборка = РезультатЗапроса.Выбрать();
		ТекВыборка.Следующий();
		МассивЗаявок.Добавить(ТекВыборка.ЗаявкаНаДействиеСсылка);
		// rarus tenkam 10.01.2019 mantis 13931 ---
	КонецЕсли;
	Возврат МассивЗаявок;
	
КонецФункции

Процедура СформироватьУбытиеИзУчета(Изделие, ДатаУбытия, МестоДоставки = Неопределено,ЗаявкаНаДействиеСсылка = Неопределено, ХозОперация = Неопределено) Экспорт 	// rarus tenkam 23.04.2018 mantis 12931 + (Заявку на действие) // rarus tenkam 10.10.2019 mantis 15125 + (ХозОперация)
	//TimeoutWScript(5);	// rarus tenkam 02.08.2018 mantis 13375 +	
	Документы.Scan_ДвижениеИзделий.СформироватьУбытиеИзУчета(Изделие, ДатаУбытия, МестоДоставки, ЗаявкаНаДействиеСсылка, ХозОперация);	// rarus tenkam 10.10.2019 mantis 15125 + (ХозОперация)	
КонецПроцедуры
//rarus tenkam 08.11.2017 mantis 11774 ---

//rarus tenkam 27.02.2017 mantis 8415 +++

//rarus tenkam 08.11.2017 mantis 11774 +++

//// Процедура - Установить дату передачи дилеру
////
//// Параметры:
////  ЗаявкаНаДействиеСсылка	 - ДокументСсылка.Scan_ЗаявкаНаДействие	 - 
////
//Процедура УстановитьДатуПередачиДилеру(ЗаявкаНаДействиеСсылка) Экспорт
//	Если (ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
//		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ
//		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
//		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь ИЛИ 	//rarus tenkam 15.08.2017 mantis 9319 +
//		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК ИЛИ 	//rarus tenkam 26.09.2017 mantis 10742 +
//		ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу) И
//		ЗаявкаНаДействиеСсылка.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена Тогда
//		
//		Для Каждого ТекСтрока Из ЗаявкаНаДействиеСсылка.ПродуктыПоЗаявке Цикл
//			ПродуктОбъект = ТекСтрока.Продукт.ПолучитьОбъект();
//			Если ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
//				ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК ИЛИ 
//				ЗаявкаНаДействиеСсылка.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК Тогда 	//rarus tenkam 26.09.2017 mantis 10742 +
//				
//				ДатаДоставкиФакт = ПолучитьДатуДоставкиФакт(ЗаявкаНаДействиеСсылка, ТекСтрока.Изделие);
//			Иначе
//				ДатаДоставкиФакт = ЗаявкаНаДействиеСсылка.ДатаПродажи;
//			КонецЕсли;
//			ПродуктОбъект.ДатаПередачиИзделияДилеру = ДатаДоставкиФакт;
//			Попытка
//				ПродуктОбъект.Записать();
//				Комментарий = "Для продукта " + ТекСтрока.Продукт + " установлена дата передачи дилеру " + ДатаДоставкиФакт; 
//				УровеньЖР = УровеньЖурналаРегистрации.Информация;
//			Исключение
//				Комментарий = "Для продукта " + ТекСтрока.Продукт + " не удалось установить дату передачи дилеру " + ДатаДоставкиФакт;	
//				УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
//			КонецПопытки;
//			ЗаписьЖурналаРегистрации("Установка даты передачи дилеру", УровеньЖР,,,Комментарий);
//		КонецЦикла;
//	КонецЕсли;
//КонецПроцедуры
//rarus tenkam 08.11.2017 mantis 11774 ---

// Функция - Получить дату доставки (факт)
//
// Параметры:
//  ЗаявкаНаДействие - ДокументСсылка.Scan_ЗаявкаНаДействие	 - 
//  Изделие			 - СправочникСсылка.Scan_Изделия	 - 
//  МестоДоставки	 - 	СправочникСсылка.Scan_МестаХранения - 
// 
// Возвращаемое значение:
//  Дата - 
//
Функция ПолучитьДатуДоставкиФакт(ЗаявкаНаДействие, Изделие)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуДокументыОснования.Документ КАК ЗаявкаНаДействие,
		|	Scan_ЗаявкаПеревозчикуДокументыОснования.Ссылка КАК ЗаявкаПеревозчику
		|ПОМЕСТИТЬ ЗаявкиПеревозчикуПоОснованию
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.ДокументыОснования КАК Scan_ЗаявкаПеревозчикуДокументыОснования
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуДокументыОснования.Документ = &ЗаявкаНаДействиеСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_МестонахождениеИзделий.ДатаПрихода КАК ДатаПрихода,
		|	Scan_МестонахождениеИзделий.Регистратор КАК Регистратор,
		|	ЗаявкиПеревозчикуПоОснованию.ЗаявкаНаДействие КАК ЗаявкаНаДействие
		|ИЗ
		|	РегистрНакопления.Scan_МестонахождениеИзделий КАК Scan_МестонахождениеИзделий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиПеревозчикуПоОснованию КАК ЗаявкиПеревозчикуПоОснованию
		|		ПО Scan_МестонахождениеИзделий.Регистратор = ЗаявкиПеревозчикуПоОснованию.ЗаявкаПеревозчику
		|ГДЕ
		|	Scan_МестонахождениеИзделий.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Scan_МестонахождениеИзделий.МестоХранения = &МестоДоставки
		|	И Scan_МестонахождениеИзделий.Изделие = &Изделие
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПрихода УБЫВ"; 		//rarus tenkam 26.09.2017 mantis 10742 +
	
	Запрос.УстановитьПараметр("ЗаявкаНаДействиеСсылка", ЗаявкаНаДействие);
	Запрос.УстановитьПараметр("Изделие", Изделие);
	Запрос.УстановитьПараметр("МестоДоставки", ЗаявкаНаДействие.МестоДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата('00010101');
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДатаПрихода;
	КонецЕсли;

КонецФункции

//rarus tenkam 27.02.2017 mantis 8415 ---

////// ОБМЕН с 1БД

//rarus tenkam 02.12.2016 mantis 6897 ++

// Функция - Установить признак TLMS в 1БД
//
// Параметры:
//  ПродуктIDExternalSystem	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция УстановитьПризнакTLMSВ1БД(ПродуктIDExternalSystem, ЗначениеПризнака = Ложь) Экспорт		//rarus tenkam 10.07.2018 mantis 13210 + ( новый параметр ЗначениеПризнака)	
	Если Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством") И Scan_ПраваИНастройки.Scan_Право("ОбратныйОбменС1БД") Тогда		//rarus tenkam 26.01.2017 mantis 7175 +
		ИмяМетода = "SetProduct";
		СообщениеОбОшибке = "";
		Отказ = Ложь;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", ПродуктIDExternalSystem);
		//rarus tenkam 10.07.2018 mantis 13210 +++
		//СтруктураПараметров.Вставить("TLMS", Ложь);		//rarus tenkam 26.01.2017 mantis 7175 +
		СтруктураПараметров.Вставить("TLMS", ЗначениеПризнака);	
		//rarus tenkam 10.07.2018 mantis 13210 ---
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
		//rarus bonmak 15.08.2019 14576 ++
		Если Отказ Тогда
			СсылкаИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", ПродуктIDExternalSystem);
			Если НЕ СсылкаИзделие.Пустая() Тогда //при удалении изделия, ссылка может в регистре оказаться битой, просто не записываем в регистр
				РегистрыСведений.Scan_Обмен1БДОчередьПоОтправкеРеквизитов.ЗаписьЗначенияРегистраСведения(СсылкаИзделие, Справочники.Scan_ВидыЗапроса.SetProduct, "TLMS", ЗначениеПризнака); //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник 	
			КонецЕсли;
		КонецЕсли;
		//rarus bonmak 15.08.2019 14576 --
	КонецЕсли;
КонецФункции
//rarus tenkam 02.12.2016 mantis 6897 --

//rarus bonmak 07.08.2020 14375 ++ закомментировал
//Функция УстановитьПризнакБУВ1БД(ПродуктIDExternalSystem, ЗначениеПризнака = Истина) Экспорт //rarus bonmak 18.05.2020 14375			
//	Если Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством") И Scan_ПраваИНастройки.Scan_Право("ОбратныйОбменС1БД") Тогда
//		ИмяМетода = "SetProduct";
//		СообщениеОбОшибке = "";
//		Отказ = Ложь;
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
//		СтруктураПараметров.Вставить("GUID", ПродуктIDExternalSystem);
//		СтруктураПараметров.Вставить("БУ", ЗначениеПризнака);	
//		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
//		
//		Если Отказ Тогда
//			СсылкаИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", ПродуктIDExternalSystem);
//			Если НЕ СсылкаИзделие.Пустая() Тогда
//				РегистрыСведений.Scan_Обмен1БДОчередьПоОтправкеРеквизитов.ЗаписьЗначенияРегистраСведения(СсылкаИзделие, Перечисления.Scan_ВидыЗапроса.SetProduct, "БУ", ЗначениеПризнака); 	
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//КонецФункции //rarus bonmak 18.05.2020 14375 --
//rarus bonmak 07.08.2020 14375 --

//rarus bonmak 02.12.2019 14375 ++
Функция ОтправитьДанныеПоМестамХраненияВ1БД(МестоХраненияСсылка) Экспорт	
	Если Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством") И Scan_ПраваИНастройки.Scan_Право("ОбратныйОбменС1БД") Тогда
		ИмяМетода = "SetLocation";
		СообщениеОбОшибке = "";
		Отказ = Ложь;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", МестоХраненияСсылка.IDExternalSystem);
		СтруктураПараметров.Вставить("DeletionMark",XMLСтрока(МестоХраненияСсылка.ПометкаУдаления));
		СтруктураПараметров.Вставить("КодИсточника",МестоХраненияСсылка.Код);
		СтруктураПараметров.Вставить("НаименованиеМестаХранения", МестоХраненияСсылка.Наименование);
		Адрес = Scan_ВспомогательныеФункцииСервер.ПолучитьАдресМестаХранения(МестоХраненияСсылка);
		СтруктураПараметров.Вставить("Адрес", Адрес);
		ТипМестаХранения = Scan_ВспомогательныеФункцииСервер.ПолучитьТипМестаХранения(МестоХраненияСсылка);
		СтруктураПараметров.Вставить("ТипМестаХранения", ТипМестаХранения);
		СтруктураПараметров.Вставить("GUIDИсточника", Строка(МестоХраненияСсылка.УникальныйИдентификатор()));
		//СтруктураПараметров.Вставить("Контрагент", МестоХраненияСсылка.Контрагент); //rarus bonmak 15.04.2020 14456
		СтруктураПараметров.Вставить("ИсходныйПункт", МестоХраненияСсылка.ИсходныйПункт);
		СтруктураПараметров.Вставить("КонечныйПункт", МестоХраненияСсылка.КонечныйПункт);
		СтруктураПараметров.Вставить("Недействительный",МестоХраненияСсылка.Недействительный);//rarus pechek 06.05.2020 mantis 15981
		
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);		
		Если Отказ Тогда
			СсылкаМестоХранения = Справочники.Scan_МестаХранения.НайтиПоКоду(МестоХраненияСсылка.Код);
			Если НЕ СсылкаМестоХранения.Пустая() Тогда //при удалении изделия, ссылка может в регистре оказаться битой, просто не записываем в регистр
				Для Каждого ИмяРеквизита Из СтруктураПараметров Цикл
					//Запишем в регистр
					Если ИмяРеквизита.Ключ = "GUID" ИЛИ ИмяРеквизита.Ключ = "ВидРеквизитов" ИЛИ ИмяРеквизита.Ключ = "Период" Тогда
						Продолжить;
					КонецЕсли;
					РегистрыСведений.Scan_Обмен1БДОчередьПоОтправкеРеквизитов.ЗаписьЗначенияРегистраСведения(СсылкаМестоХранения, Справочники.Scan_ВидыЗапроса.SetLocation, ИмяРеквизита.Ключ, ИмяРеквизита.Значение); //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник	
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции
//rarus bonmak 02.12.2019 14375 --

//rarus tenkam 05.03.2017 mantis 6897 +++
Функция ПолучитьТипМестаХранения(МестоХраенния) Экспорт
	Если МестоХраенния.Маршрут Тогда
		Возврат "Маршрут";
	ИначеЕсли МестоХраенния.СкладПроизводителя Тогда
		Возврат "СкладПроизводителя";
	ИначеЕсли МестоХраенния.ТипСклада = Перечисления.Scan_ТипыСклада.АдресДоставки Тогда
		Возврат "АдресДоставки";
	ИначеЕсли МестоХраенния.ТипСклада = Перечисления.Scan_ТипыСклада.Производство Тогда
		Возврат "Производство";
	ИначеЕсли МестоХраенния.ТипСклада = Перечисления.Scan_ТипыСклада.Хранение Тогда
		Возврат "Хранение";
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьАдресМестаХранения(МестоХранения) Экспорт
	Если МестоХранения.Маршрут Тогда
		//ТекМаршрут = СокрЛП(МестоХранения.ИсходныйПункт.АдресСкладаЛогистический) + " - " + СокрЛП(МестоХранения.КонечныйПункт.АдресСкладаЛогистический);
		Возврат "";
	Иначе
		Возврат СокрЛП(МестоХранения.АдресСкладаЛогистический);
	КонецЕсли;	
КонецФункции
//rarus tenkam 05.03.2017 mantis 6897 ---

//rarus tenkam 07.03.2017 mantis 7175 +++
Функция ПолучитьСписокРеквизитовДляОтправки() Экспорт
	СписокРеквизитов = Новый Массив();
	СписокРеквизитов.Добавить("Замечание");
	СписокРеквизитов.Добавить("НомерПолисаОСАГО");
	СписокРеквизитов.Добавить("ДатаИстеченияПолиса");
	СписокРеквизитов.Добавить("УстановленныйТахограф");
	СписокРеквизитов.Добавить("СрокУстраненияНедостатковДоп");
	СписокРеквизитов.Добавить("КрайняяДатаУстраненияНедостатков");
	СписокРеквизитов.Добавить("МодельПТС");
	
	Возврат СписокРеквизитов;
	
КонецФункции
//rarus tenkam 07.03.2017 mantis 7175 ---

////// РАБОТА СО СПРАВОЧНИКАМИ

//rarus tenkam 09.03.2017 (update) +++
Функция ПолучитьОсновнойДоговорКонграгента(Контрагент) Экспорт
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ДоговорыВзаиморасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_ДоговорыВзаиморасчетов КАК Scan_ДоговорыВзаиморасчетов
		|ГДЕ
		|	Scan_ДоговорыВзаиморасчетов.Основной = ИСТИНА
		|	И Scan_ДоговорыВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ДоговорыВзаиморасчетов.Владелец = &Контрагент
		|	И Scan_ДоговорыВзаиморасчетов.Недействителен = ЛОЖЬ";	// rarus tenkam 04.08.2020 mantis 16401 +
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
КонецФункции
//rarus tenkam 09.03.2017 ---

//rarus tenkam 13.03.2017 mantis 7177 +++
Функция ПолучитьКолеснуюФормулу(НаименованиеМодели) Экспорт
	
	ТекНаименование = СокрЛП(НаименованиеМодели);
	ТекНаименование = СтрЗаменить(ТекНаименование," ", "");		//rarus tenkam 17.10.2017 mantis 11351 +
	ТекНаименование = СтрЗаменить(ТекНаименование,"х", "x");
	ТекНаименование = СтрЗаменить(ТекНаименование,"Х", "X");
	ТекНаименование = СтрЗаменить(ТекНаименование,"X", "x");
	
	Если СтрНайти(ТекНаименование,"x") = 0 Тогда
		Возврат Справочники.Scan_КолесныеФормулыИзделий.ПустаяСсылка();
	КонецЕсли;
	Если СтрДлина(ТекНаименование) < 10 Тогда
		Возврат Справочники.Scan_КолесныеФормулыИзделий.ПустаяСсылка();
	КонецЕсли;
	
	//rarus tenkam 17.10.2017 mantis 11351 +++
	//КолеснаяФормула = Сред(СокрЛП(ТекНаименование),7,4);
	//ПорядокСимвола = СтрНайти(КолеснаяФормула, "x");
	//
	//Если ПорядокСимвола = 2 Тогда
	//	НаименованиеКолеснойФормулы = Лев(КолеснаяФормула,3);
	//ИначеЕсли ПорядокСимвола = 3 Тогда
	//	НаименованиеКолеснойФормулы = КолеснаяФормула;
	//Иначе
	//	Возврат Справочники.Scan_КолесныеФормулыИзделий.ПустаяСсылка();
	//КонецЕсли;
	
	ПорядокСимволаХ = СтрНайти(ТекНаименование, "x");
	
	НачальныйНомерПоиска = ПорядокСимволаХ - 2;
	Если НачальныйНомерПоиска < 0 Тогда
		Возврат Справочники.Scan_КолесныеФормулыИзделий.ПустаяСсылка();
	ИначеЕсли НачальныйНомерПоиска = 0 Тогда
		НачальныйНомерПоиска = 1;
	КонецЕсли;
	
	КонечныйНомерПоиска = ПорядокСимволаХ + 1;
	Если КонечныйНомерПоиска > СтрДлина(ТекНаименование) Тогда
		Возврат Справочники.Scan_КолесныеФормулыИзделий.ПустаяСсылка();	
	КонецЕсли;
		
	НаименованиеКолеснойФормулы = Лев(ТекНаименование,КонечныйНомерПоиска);
	НаименованиеКолеснойФормулы = Прав(НаименованиеКолеснойФормулы, СтрДлина(НаименованиеКолеснойФормулы) - НачальныйНомерПоиска + 1);
	
	ПервыйСимвол = Лев(НаименованиеКолеснойФормулы,1);
	
	Если СтрНайти("123456789", ПервыйСимвол) = 0 Тогда
		//Это не цифра - удалим
		НаименованиеКолеснойФормулы = Прав(НаименованиеКолеснойФормулы,СтрДлина(НаименованиеКолеснойФормулы) -1);			
	КонецЕсли;
	//rarus tenkam 17.10.2017 mantis 11351 ---
	
	НайденнаяФормула = Справочники.Scan_КолесныеФормулыИзделий.НайтиПоНаименованию(НаименованиеКолеснойФормулы, Истина);
	Если НЕ ЗначениеЗаполнено(НайденнаяФормула) Тогда
		НоваяФормула = Справочники.Scan_КолесныеФормулыИзделий.СоздатьЭлемент();
		НоваяФормула.Наименование = НаименованиеКолеснойФормулы;
		НоваяФормула.Записать();
		
		Возврат НоваяФормула.Ссылка;
	Иначе
		Возврат НайденнаяФормула;
	КонецЕсли;
КонецФункции
//rarus tenkam 13.03.2017 mantis 7177 ---

//rarus tenkam 14.03.2017 mantis 7623? +++
Функция ПроверитьВозможностьПеремещения(ИзделиеСсылка, ДатаПрихода, ДатаУбытия, СообщениеОбОшибке) Экспорт
	Отказ = Ложь;
	Если ДатаПрихода > ТекущаяДата() Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + "Дата прихода не может быть больше текущей даты!";
		Отказ = Истина;
	КонецЕсли;
	
КонецФункции
//rarus tenkam 14.03.2017 mantis 7623? ---

//rarus tenkam 20.03.2017 mantis 7617 ---
Функция ПолучитьКоличествоВПартии(НомерБукингЛиста) Экспорт 
	Если НЕ ЗначениеЗаполнено(НомерБукингЛиста) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаказыНаЗавод.Ссылка) КАК КоличествоЗаказов
		|ИЗ
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|ГДЕ
		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста = &НомерБукингЛиста
		|	И Scan_ЗаказыНаЗавод.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста";
	Запрос.УстановитьПараметр("НомерБукингЛиста", НомерБукингЛиста);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КоличествоЗаказов;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция ПолучитьНомерВПартии(НомерБукингЛиста, Изделие) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		// rarus tenkam 12.08.2019 mantis 14427  +++
		//"ВЫБРАТЬ
		//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие,
		////rarus tenkam 03.05.2017 mantis 7617 (bug) +++
		//|	ВЫБОР
		//|		КОГДА Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.CDD2 <> NULL
		//|				ИЛИ Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|			ТОГДА Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.CDD2
		//|		ИНАЧЕ Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.CDD
		//|	КОНЕЦ КАК CDD
		////rarus tenkam 03.05.2017 mantis 7617 ---
		//|ИЗ
		//|	РегистрСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних
		//|ГДЕ
		//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.НомерБукингЛиста = &НомерБукингЛиста
		//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.ПометкаУдаления = ЛОЖЬ
		//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие.ПометкаУдаления = ЛОЖЬ
		//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.CDD <> ДАТАВРЕМЯ(1, 1, 1)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	CDD,
		//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие.НомерИзделия";
		
		//rarus BProg_Dekin 15.11.2019 0014452 ++ Заменил реквизиты "CDD" и "CDD2" на данные из регистра 
		//"ВЫБРАТЬ
		//|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие,
		////rarus tenkam 03.05.2017 mantis 7617 (bug) +++
		//|	ВЫБОР
		//|		КОГДА Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDD2 <> NULL
		//|				ИЛИ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|			ТОГДА Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDD2
		//|		ИНАЧЕ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDD
		//|	КОНЕЦ КАК CDD
		////rarus tenkam 03.05.2017 mantis 7617 ---
		//|ИЗ
		//|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
		//|ГДЕ
		//|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.НомерБукингЛиста = &НомерБукингЛиста
		//|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ПометкаУдаления = ЛОЖЬ
		//|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ПометкаУдаления = ЛОЖЬ
		//|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDD <> ДАТАВРЕМЯ(1, 1, 1)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	CDD,
		//|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.НомерИзделия";
		
		"ВЫБРАТЬ
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение
		|		ИНАЧЕ Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Значение
		|	КОНЕЦ КАК CDD
		|ИЗ
		|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD
		|		ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Объект
		|			И (Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Значение <> ДАТАВРЕМЯ(1, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD2)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2
		|		ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Объект
		|ГДЕ
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.НомерБукингЛиста = &НомерБукингЛиста
		|	И НЕ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ПометкаУдаления
		|	И НЕ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	CDD,
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.НомерИзделия";
		//rarus BProg_Dekin 15.11.2019 0014452 --
	Запрос.УстановитьПараметр("НомерБукингЛиста", НомерБукингЛиста);	
	РезультатЗапроса = Запрос.Выполнить();
	МассивИзделий = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Изделие");
	
	Для Сч = 0 По МассивИзделий.Количество()-1 Цикл
		Если МассивИзделий[Сч] = Изделие Тогда
			Возврат Сч+1;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции
//rarus tenkam 20.03.2017 mantis 7617 ---

//rarus tenkam 27.07.2017 mantis 10591 +++
Функция ПолучитьРасстояние(АдресДоставки, АдресПолучения) Экспорт
	
	РасстояниеМеждуАдресами = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_РасстояниеМеждуАдресами.Расстояние
		|ИЗ
		|	РегистрСведений.Scan_РасстояниеМеждуАдресами КАК Scan_РасстояниеМеждуАдресами
		|ГДЕ
		|	(Scan_РасстояниеМеждуАдресами.АдресПолучения = &АдресПолучения
		|				И Scan_РасстояниеМеждуАдресами.АдресДоставки = &АдресДоставки
		|			ИЛИ Scan_РасстояниеМеждуАдресами.АдресДоставки = &АдресПолучения
		|				И Scan_РасстояниеМеждуАдресами.АдресПолучения = &АдресДоставки)";
	
	Запрос.УстановитьПараметр("АдресДоставки", АдресДоставки);
	Запрос.УстановитьПараметр("АдресПолучения", АдресПолучения);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		РасстояниеМеждуАдресами = Результат[0].Расстояние; 
	КонецЕсли;
	
	Возврат РасстояниеМеждуАдресами;
	
КонецФункции
//rarus tenkam 27.07.2017 mantis 10591 ---

////// ОТПРАВКА ПИСЕМ

//rarus tenkam 28.04.2017 mantis 9444 +++
Функция ПолучитьПолучателейДокумента(ДокументИсточник, ИмяПечатнойФормы) Экспорт
	ПочтовыйАдресПолучателя = "";
	Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда	
		ПоставщикУслуг = ДокументИсточник.Подрядчик;
		Если Не ЗначениеЗаполнено(ПоставщикУслуг) Тогда
			Возврат "";
		КонецЕсли;
		//rarus tenkam 24.10.2017 mantis 11439 +++
		//Контрагент = ?(ТипЗнч(ПоставщикУслуг) = Тип("СправочникСсылка.Scan_Дилеры"), ПоставщикУслуг.Контрагент, ПоставщикУслуг);
		Контрагент = ПоставщикУслуг;
		//rarus tenkam 24.10.2017 mantis 11439 ---
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
		               |	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление
		               |ИЗ
		               |	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
		               |ГДЕ
		               |	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Контрагент
		               |	И Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
		               |	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.ОтправлятьПФЗаявкиНаДействие = ИСТИНА
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление,
		               |	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
		ТабРезультат = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекКЛ Из ТабРезультат Цикл
			ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		Если    ИмяПечатнойФормы = "ПФ_MXL_ТранспортнаяНакладная" 
			Или ИмяПечатнойФормы = "ПФ_MXL_ТранспортнаяНакладная2200" //rarus agar 24.03.2021 17274 +-
			Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_ЗаявкаПеревозчикуКонтактыОтправителя.КонтактноеЛицо,
			|	Scan_ЗаявкаПеревозчикуКонтактыОтправителя.Представление
			|ИЗ
			|	Документ.Scan_ЗаявкаПеревозчику.КонтактыОтправителя КАК Scan_ЗаявкаПеревозчикуКонтактыОтправителя
			|ГДЕ
			|	Scan_ЗаявкаПеревозчикуКонтактыОтправителя.ВидКонтактнойИнформации = &ВидКИ
			|	И Scan_ЗаявкаПеревозчикуКонтактыОтправителя.Ссылка = &ЗаявкаПеревозчику";
			
			Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
			Запрос.УстановитьПараметр("ЗаявкаПеревозчику", ДокументИсточник);
			
			ТабРезультат = Запрос.Выполнить().Выгрузить();
			Для Каждого ТекКЛ Из ТабРезультат Цикл
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
			КонецЦикла;
		Иначе	
			Если Не ЗначениеЗаполнено(ДокументИсточник.Перевозчик) Тогда
				Возврат "";
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
			|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление
			|ИЗ
			|	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
			|ГДЕ
			|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Контрагент
			|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
			|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.ОтправлятьПФЗаявкиПеревозчику = ИСТИНА
			|
			|СГРУППИРОВАТЬ ПО
			|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление,
			|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка";
			Запрос.УстановитьПараметр("Контрагент", ДокументИсточник.Перевозчик);
			Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
			ТабРезультат = Запрос.Выполнить().Выгрузить();
			Для Каждого ТекКЛ Из ТабРезультат Цикл
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	Возврат ПочтовыйАдресПолучателя;
КонецФункции

Функция ПреобразоватьФорматыСохраненияВСтроку(МассивФорматов) Экспорт
	СтрокаФорматов = "";
	Если МассивФорматов.Количество() > 0 Тогда
		Для Каждого Формат Из МассивФорматов Цикл
			Если СтрокаФорматов = "" Тогда
				СтрокаФорматов = Строка(Формат);	
			Иначе	
				СтрокаФорматов = СтрокаФорматов + "," + Строка(Формат);
			КонецЕсли; 
		КонецЦикла;                                	
	КонецЕсли; 	
	Возврат СтрокаФорматов;
КонецФункции

Функция ПреобразоватьСтрокуВФорматыСохранения(СтрокаФорматов) Экспорт
	МассивФорматов = Новый Массив;
	ВремМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаФорматов,",");
	Для Каждого ТекСтрока Из ВремМассив Цикл
		Если ВРЕГ(ТекСтрока) = "PDF" Тогда
			ТекФормат = ТипФайлаТабличногоДокумента.PDF;
		ИначеЕсли ВРЕГ(ТекСтрока) = "XLSX" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.XLSX;
		ИначеЕсли ВРЕГ(ТекСтрока) = "XLS" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.XLS;
		ИначеЕсли ВРЕГ(ТекСтрока) = "ODS" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.ODS;
		ИначеЕсли ВРЕГ(ТекСтрока) = "MXL" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.MXL;
		ИначеЕсли ВРЕГ(ТекСтрока) = "DOCX" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.DOCX;
		ИначеЕсли ВРЕГ(ТекСтрока) = "HTML" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.HTML;
		ИначеЕсли ВРЕГ(ТекСтрока) = "TXT" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.TXT;
		ИначеЕсли ВРЕГ(ТекСтрока) = "ANSITXT" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.ANSITXT;
		Иначе
			Продолжить;
		КонецЕсли;
		МассивФорматов.Добавить(ТекФормат);
	КонецЦикла;
	Возврат МассивФорматов;
КонецФункции

//rarus tenkam 28.04.2017 mantis 9444 ---

//rarus abrant 02.05.2017 mantis 8698 +++
Функция ОтправитьПисьмоОЗагрузкеПоПраву(Право, Текст, Тема) Экспорт
	ПараметрыПисьма = Новый Структура;
	
	////Сформируем текст письма
	//ТекстПисьма = Scan_ПраваИНастройки.Scan_Право("ТекстПовторногоПисьмаНапоминанияДилерам") + Символы.ПС;
	//Для Каждого ЭлементМассива Из МассивСтрок Цикл
	//	НомерИзделия = ЭлементМассива.Изделие.НомерИзделия;
	//	ТекстПисьма = ТекстПисьма + НомерИзделия + Символы.ПС;	
	//КонецЦикла;
	
	////Сформируем тему письма
	//Если ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
	//	ТекКонтрагент = Заказчик;		
	//ИначеЕсли ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Дилеры") Тогда	
	//	ТекКонтрагент = Заказчик.Контрагент;
	//Иначе
	//	//Если это организация
	//	Возврат Неопределено;	//rarus tenkam 06.03.2017 mantis 7185 +
	//КонецЕсли;
	//ТемаПисьма = ТекКонтрагент.Наименование + ". " + Scan_ПраваИНастройки.Scan_Право("ТемаПовторногоПисьмаНапоминанияДилерам");
	
	//Заполним параметры письма
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Текст);
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	ПараметрыПисьма.Вставить("Важность",  ВажностьИнтернетПочтовогоСообщения.Обычная);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
	//ПараметрыПисьма.Вставить("Владелец", Заказчик);
	
	//Адресаты = ПолучитьАдресаКЛЗаказчика(Заказчик);
	//Если Адресаты.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//ПараметрыПисьма.Вставить("Кому", Адресаты);
	
	АдресатыПользователи = Scan_РегламентныеЗадания.ПолучитьАдресаПользователей(Право);
	Если АдресатыПользователи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыПисьма.Вставить("Кому", АдресатыПользователи);
	//rarus tenkam 31.10.2017 mantis 11695 +++
	ПараметрыПисьма.Вставить("Автоматически", Истина);
	ПараметрыПисьма.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
	//rarus tenkam 31.10.2017 mantis 11695 ---

	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	ПисьмоОтправлено = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);	
	
	Возврат ПисьмоОтправлено;	
КонецФункции
//rarus abrant 02.05.2017 mantis 8698 ---

// rarus tenkam 28.04.2018 mantis 11476 +++

// Обрабочик подписки на событие при записи присоединенного файла к изделию 
//
// Параметры:
//  Источник - СправочникСсылка.Scan_ИзделияПрисоединенныеФайлы - Карточка присоединенного файла 
//  Отказ	 - Булево - Отказ от записи элемента
//
Процедура ПриЗаписиИзделияПрисоединенныеФайлы(Источник, Отказ) Экспорт
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ИзделиеСсылка = Источник.ВладелецФайла;
	МассивЗаявокНаДействие = ПолучитьЗаписанныеЗаявкиСПокупкойУПоставщика(ИзделиеСсылка);
	
	Для Каждого ТекЗаявка Из МассивЗаявокНаДействие Цикл
		ПроверитьПрикрепленныеПТС(ТекЗаявка);
	КонецЦикла;
	
КонецПроцедуры  

Функция ПолучитьЗаписанныеЗаявкиСПокупкойУПоставщика(ИзделиеСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие = &ИзделиеСсылка
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК))
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)";
	
	Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивЗаявок = Новый Массив;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		МассивЗаявок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	Возврат МассивЗаявок;
КонецФункции

Функция ПроверитьПрикрепленныеПТС(ЗаявкаНаДействиеСсылка) Экспорт
	
	Для Каждого ТекСтрока Из ЗаявкаНаДействиеСсылка.ПродуктыПоЗаявке Цикл
		// Проверим прикреплен ли ПТС
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ИзделияПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_ИзделияПрисоединенныеФайлы КАК Scan_ИзделияПрисоединенныеФайлы
		|ГДЕ
		|	Scan_ИзделияПрисоединенныеФайлы.ВладелецФайла = &ИзделиеСсылка
		|	И (Scan_ИзделияПрисоединенныеФайлы.Расширение = ""pdf""
		|			ИЛИ Scan_ИзделияПрисоединенныеФайлы.Расширение = ""tif""
		|			ИЛИ Scan_ИзделияПрисоединенныеФайлы.Расширение = ""jpg""
		|			ИЛИ Scan_ИзделияПрисоединенныеФайлы.Расширение = ""jpeg"")
		|	И Scan_ИзделияПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ИзделиеСсылка", ТекСтрока.Изделие);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			// Нет прикрепленного ПТС
			Возврат Ложь;
		Иначе
			Продолжить;
		КонецЕсли;     		
	КонецЦикла;
	
	// Отправим письмо
	РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонОПрикрепленииПТС", ЗаявкаНаДействиеСсылка); //rarus BProg_Gladkov 02.05.2020 0015962 +-
	
	Возврат Истина;
	
КонецФункции

// rarus tenkam 28.04.2018 mantis 11476 ---

//rarus vikhle 27.11.2020 mt 16638 +++

// Добавляет новый или обновляет существующий файл в справочнике 
// присоединенных файлов для документов "Scan_СпецификацияСтандартнойМодели" или "Scan_УстановкаЦенКомпонентов"
// Параметры:
//  СтруктураПараметров - Структура - Структура с ключами:
//		* ФорматФайла		- Строка - формат файла;
//		* АдресХранилища	- Строка - адрес временного хранилища с файлом;
//		* ПутьКФайлу		- Строка - путь к файлу.
//  СсылкаНаДокумент - 	ДокументСсылка.Scan_СпецификацияСтандартнойМодели, ДокументСсылка.Scan_УстановкаЦенКомпонентов - 
//						ссылка на документ-владелец файла 
//
Процедура ОбновитьПрисоединенныйФайлНаСервере(СтруктураПараметров,СсылкаНаДокумент) Экспорт
	
	ИмяФайла = "";
	СтруктураПараметров.Свойство("ПутьКФайлу",ИмяФайла);
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// rarus agar 17.01.2022 17996 ++
	//Пока Не СтрНайти(ИмяФайла, "\") = 0 Цикл
	//	ИмяФайла = Сред(ИмяФайла, СтрНайти(ИмяФайла,"\") +1);
	//КонецЦикла;
	//
	//МассивИмениФайла = СтрРазделить(ИмяФайла, ".", Ложь);
	//
	//Если МассивИмениФайла.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ИмяФайлаБезРасширения = МассивИмениФайла[0];
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	
	ИмяФайлаБезРасширения = СтруктураИмениФайла.ИмяБезРасширения;
	РасширениеБезТочки    = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмениФайла.Расширение);
	// rarus agar 17.01.2022 17996 --
	
	Запрос = Новый Запрос;
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.Scan_СпецификацияСтандартнойМодели") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Scan_СпецификацияСтандартнойМоделиПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
		               |ИЗ
		               |	Справочник.Scan_СпецификацияСтандартнойМоделиПрисоединенныеФайлы КАК Scan_СпецификацияСтандартнойМоделиПрисоединенныеФайлы";
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.Scan_УстановкаЦенКомпонентов") Тогда 
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Scan_УстановкаЦенКомпонентовПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
		               |ИЗ
		               |	Справочник.Scan_УстановкаЦенКомпонентовПрисоединенныеФайлы КАК Scan_УстановкаЦенКомпонентовПрисоединенныеФайлы";
	
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.Scan_ПрайсЛистSCVНаДвигатели") Тогда 
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Scan_ПрайсЛистSCVНаДвигателиПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
		               |ИЗ
		               |	Справочник.Scan_ПрайсЛистSCVНаДвигателиПрисоединенныеФайлы КАК Scan_ПрайсЛистSCVНаДвигателиПрисоединенныеФайлы";
	Иначе
		Возврат;
	КонецЕсли;
	ИмяСправочника = СсылкаНаДокумент.Метаданные().Имя + "ПрисоединенныеФайлы";
	ТекстУсловия = " ГДЕ " + ИмяСправочника + ".ВладелецФайла  = &ВладелецФайла
					|	И " + ИмяСправочника + ".Наименование = &НаименованиеФайла"; 
	// rarus agar 17.01.2022 17996 ++
	ТекстУсловия = ТекстУсловия + " И НЕ " + ИмяСправочника + ".ПометкаУдаления";
	// rarus agar 17.01.2022 17996 --
	Запрос.Текст = Запрос.Текст + ТекстУсловия;
	Запрос.УстановитьПараметр("ВладелецФайла",     СсылкаНаДокумент);
	Запрос.УстановитьПараметр("НаименованиеФайла", ИмяФайлаБезРасширения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаДокумент);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайлаБезРасширения);
		// rarus agar 17.01.2022 17996 ++
		//ПараметрыФайла.Вставить("РасширениеБезТочки", СтруктураПараметров.ФорматФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
		// rarus agar 17.01.2022 17996 --
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", );
		
		ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, СтруктураПараметров.АдресХранилища);
		Если ДобавленныйФайл.Пустая() Тогда
			Сообщить(НСтр("ru = 'Не удалось прикрепить загружаемый файл к документу.'; 
			              |en = 'Failed to attach the file to the document.'"));
		Иначе
			Сообщить(НСтр("ru = 'Загружаемый файл прикреплен к документу.'; 
			              |en = 'The file has been attached to the document.'"));
		КонецЕсли;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ИнформацияОФайле = Новый Структура;
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", СтруктураПараметров.АдресХранилища);
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
		
		РаботаСФайлами.ОбновитьФайл(Выборка.ПрисоединенныйФайл, ИнформацияОФайле);
	КонецЕсли;
	
КонецПроцедуры

//rarus vikhle 27.11.2020 mt 16638 ---

//rarus vikhle 12.01.2021 mt 17055/17056 +++

////ПОЛУЧЕНИЕ СТРУКТУРЫ ПОДЧИНЕННОСТИ

// Возвращает список значений с ссылками элементов из структуры подчиненности (того же типа, что и параметр ТекущийОбъект) включая ТекущийОбъект
//
// Параметры:
//  ТекущийОбъект			 - ЛюбаяСсылка	 - объект, для которого нужно получить элементы структуры подчиненности
//  ВключатьТекущийОбъект	 - Булево		 - при значении Истина в возвращаемый список значений будет добавлено значение параметра ТекущийОбъект
//	ИмяРеквизита			 - Строка		 - имя реквизита, по которому определяется связь. Если не передан будут учитываться все реквизиты с совпадающим типом	
// 
// Возвращаемое значение:
//  СписокЗначений - содержит ссылки элементов из структуры подчиненности
//
Функция ПолучитьСтруктуруПодчиненности(ТекущийОбъект, ИмяРеквизита = "", ВключатьТекущийОбъект = Ложь) Экспорт //rarus vikhle 06.10.2021 mt 18076 + параметр ИмяРеквизита 
	
	СписокСвязанныхОбъектов	= ПолучитьРодительскиеОбъекты(ТекущийОбъект, ИмяРеквизита,, ВключатьТекущийОбъект); //rarus vikhle 06.10.2021 mt 18076 + параметр ИмяРеквизита
	СписокСвязанныхОбъектов	= ПолучитьПодчиненныеОбъекты(ТекущийОбъект, ИмяРеквизита, СписокСвязанныхОбъектов); //rarus vikhle 06.10.2021 mt 18076 + параметр ИмяРеквизита
		
	Возврат СписокСвязанныхОбъектов;
		
КонецФункции	
	
// Возвращает список значений с ссылками родительских элементов из структуры подчиненности (того же типа, что и параметр ТекущийОбъект)
//
// Параметры:
//  ТекущийОбъект			 - ЛюбаяСсылка	 	- объект, для которого нужно получить родительские элементы из структуры подчиненности
//	ИмяРеквизита			 - Строка			- имя реквизита, по которому определяется связь. Если не передан будут учитываться все реквизиты с совпадающим типом 
//  СписокСвязанныхОбъектов	 - СписокЗначений	- список значений, к которому будут добавлены родительские элементы параметра ТекущийОбъект
//  ВключатьТекущийОбъект	 - Булево			- при значении Истина в возвращаемый список значений будет добавлено значение параметра ТекущийОбъект
// 
// Возвращаемое значение:
//  СписокЗначений - содержит ссылки родительских элементов из структуры подчиненности (того же типа, что и параметр ТекущийОбъект)
//
Функция ПолучитьРодительскиеОбъекты(ТекущийОбъект, ИмяРеквизита = "", СписокСвязанныхОбъектов = Неопределено, ВключатьТекущийОбъект = Ложь) Экспорт //rarus vikhle 06.10.2021 mt 18076 + параметр ИмяРеквизита 
    
	Если СписокСвязанныхОбъектов = Неопределено Тогда 
		СписокСвязанныхОбъектов = Новый СписокЗначений;
	КонецЕсли;
	
	Если ТекущийОбъект.Пустая() Тогда
		Возврат СписокСвязанныхОбъектов;	
	КонецЕсли;	
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	СписокРеквизитов  = Новый СписокЗначений;
    
	Если НЕ ЗначениеЗаполнено(ИмяРеквизита) Тогда //rarus vikhle 06.10.2021 mt 18076
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			
			Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				Если МетаданныеРеквизита = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРеквизита) 
					Или Не ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				Если Не Метаданные.Документы.Содержит(МетаданныеРеквизита)
					И Не Метаданные.Справочники.Содержит(МетаданныеРеквизита)
					И Не Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеРеквизита) Тогда
					Продолжить;
				КонецЕсли;
					
				ЗначениеРеквизита = ТекущийОбъект[Реквизит.Имя];
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита)
					И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
					И ЗначениеРеквизита <> ТекущийОбъект
					И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
					
					СписокРеквизитов.Добавить(ЗначениеРеквизита);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе 
		//rarus vikhle 06.10.2021 mt 18076 +++	
		Реквизит = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
		
		Если Реквизит = Неопределено Тогда
			Возврат СписокСвязанныхОбъектов;
		КонецЕсли;	
		
		Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
			Возврат СписокСвязанныхОбъектов;
		КонецЕсли;
			
		Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
			
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			Если МетаданныеРеквизита = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРеквизита) 
				Или Не ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Если Не Метаданные.Документы.Содержит(МетаданныеРеквизита)
				И Не Метаданные.Справочники.Содержит(МетаданныеРеквизита)
				И Не Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
				
			ЗначениеРеквизита = ТекущийОбъект[Реквизит.Имя];
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
				И ЗначениеРеквизита <> ТекущийОбъект
				И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
				
				СписокРеквизитов.Добавить(ЗначениеРеквизита);
			КонецЕсли;
			
		КонецЦикла;	
		//rarus vikhle 06.10.2021 mt 18076 ---	
	КонецЕсли;	
    
    Для Каждого СтрСЗ Из СписокРеквизитов Цикл 
		СписокСвязанныхОбъектов.Добавить(СтрСЗ.Значение);
		СписокСвязанныхОбъектов = ПолучитьРодительскиеОбъекты(СтрСЗ.Значение, ИмяРеквизита, СписокСвязанныхОбъектов); //rarus vikhle 06.10.2021 mt 18076
    КонецЦикла;
	
	Если ВключатьТекущийОбъект Тогда
		Если СписокСвязанныхОбъектов.НайтиПоЗначению(ТекущийОбъект) = Неопределено Тогда
			СписокСвязанныхОбъектов.Добавить(ТекущийОбъект);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СписокСвязанныхОбъектов;
        
КонецФункции

// Возвращает список значений с ссылками подчиненных элементов из структуры подчиненности (того же типа, что и параметр ТекущийОбъект)
//
// Параметры:
//  ТекущийОбъект			 - ЛюбаяСсылка	 	- объект, для которого нужно получить подчиненные элементы из структуры подчиненности
//  ИмяРеквизита			 - Строка			- по которому определяется связь. Если не передан будут учитываться все реквизиты с совпадающим типом
//  СписокСвязанныхОбъектов	 - СписокЗначений	- список значений, к которому будут добавлены подчиненные элементы параметра ТекущийОбъект
//  ВключатьТекущийОбъект	 - Булево	 		- при значении Истина в возвращаемый список значений добавлено значение параметра ТекущийОбъект
// 
// Возвращаемое значение:
//  СписокЗначений - содержит ссылки подчиненных элементов из структуры подчиненности (того же типа, что и параметр ТекущийОбъект)
//
Функция ПолучитьПодчиненныеОбъекты(ТекущийОбъект, ИмяРеквизита = "", СписокСвязанныхОбъектов = Неопределено, ВключатьТекущийОбъект = Ложь) Экспорт //rarus vikhle 06.10.2021 mt 18076 + параметр ИмяРеквизита
	
	Если СписокСвязанныхОбъектов = Неопределено Тогда 
        СписокСвязанныхОбъектов = Новый СписокЗначений;
    КонецЕсли;
	
	Если ТекущийОбъект.Пустая() Тогда
		Возврат СписокСвязанныхОбъектов;	
	КонецЕсли;
	
	Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ТекущийОбъект))  Тогда
		Возврат СписокСвязанныхОбъектов;
	КонецЕсли;
	
	//rarus vikhle 06.10.2021 mt 18076 +++
	МетаданныеОбъекта = ТекущийОбъект.Метаданные(); 
	Если ЗначениеЗаполнено(ИмяРеквизита) И МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат СписокСвязанныхОбъектов;	
	КонецЕсли;	
	//rarus vikhle 06.10.2021 mt 18076 ---
	
	Запрос = Новый Запрос;
	//rarus vikhle 06.10.2021 mt 18076 +++
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СвязанныеДокументы.Ссылка КАК Ссылк
	//			   |ИЗ
	//               |	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы
	//               |ГДЕ
	//               |	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = &ТипТекущегоОбъекта";
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Поля 
				   |ИЗ
	               |	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = &ТипТекущегоОбъекта
				   |	И &УсловиеПоРеквизиту";
	//rarus vikhle 06.10.2021 mt 18076 ---			   
				   
	//rarus vikhle 06.10.2021 mt 18076 +++
	ИмяПоляРеквизита	= "Ссылка." + ИмяРеквизита;
	ПоляЗапроса			= "Ссылка" + ?(ЗначениеЗаполнено(ИмяРеквизита), ", " + ИмяПоляРеквизита, "");
	УсловиеПоРеквизиту	= ?(ЗначениеЗаполнено(ИмяРеквизита), ИмяПоляРеквизита + " = &ЗначениеКритерияОтбора", "Истина");
	Запрос.Текст		= СтрЗаменить(Запрос.Текст, "&Поля", ПоляЗапроса);
	Запрос.Текст		= СтрЗаменить(Запрос.Текст, "&УсловиеПоРеквизиту", УсловиеПоРеквизиту);
	//rarus vikhle 06.10.2021 mt 18076 ---
	
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ТекущийОбъект);
	Запрос.УстановитьПараметр("ТипТекущегоОбъекта", ТипЗнч(ТекущийОбъект));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если СписокСвязанныхОбъектов.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда 
			СписокСвязанныхОбъектов.Добавить(Выборка.Ссылка);
			ПолучитьПодчиненныеОбъекты(Выборка.Ссылка, ИмяРеквизита, СписокСвязанныхОбъектов); //rarus vikhle 06.10.2021 mt 18076 + параметр ИмяРеквизита	
		КонецЕсли;	
	КонецЦикла;
	
	Если ВключатьТекущийОбъект Тогда
		Если СписокСвязанныхОбъектов.НайтиПоЗначению(ТекущийОбъект) = Неопределено Тогда
			СписокСвязанныхОбъектов.Добавить(ТекущийОбъект);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат СписокСвязанныхОбъектов;
	
КонецФункции
//rarus vikhle 12.01.2021 mt 17055/17056 ---

//rarus vikhle 28.02.2021 mt 17186 +++

//Сравнение спецификаций

//Сравнивает спецификации SPORT продуктов/драфтов и СУ 
//
// Параметры:
//  Продукт	 - СправочникСсылка.Scan_Изделия,СправочникСсылка.Scan_ДрафтыПродуктов - 
//  СУ		 - СправочникСсылка.Scan_СпециальныеУсловия	 - 
//  Заявка	 - СправочникСсылка.Scan_СоглашенияОПоставке	 - 
// 
// Возвращаемое значение:
//  Булево - Признак совпадения состава опций спецификации продукта/драфта и СУ
//
Функция СпецификацииСовпадают(Продукт,СУ,Заявка) Экспорт
	
	Если ТипЗнч(Продукт) = Тип("СправочникСсылка.Scan_Изделия") Тогда
		Если ЗначениеЗаполнено(СУ) И НЕ Справочники.Scan_СпециальныеУсловия.ПродуктВходитВСУ(Продукт,СУ) Тогда
			//Продукта нет в тч СУ, сравниваем спецификации
			
			//Получаем спецификацию и версию спецификации продукта заявки
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Scan_СпецификацииПродуктов.Ссылка КАК Спецификация,
			               |	Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка КАК ВерсияСпецификации
			               |ИЗ
			               |	Справочник.Scan_СпецификацииПродуктов КАК Scan_СпецификацииПродуктов
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ВерсииБазовыхСпецификаций.Использование КАК Scan_ВерсииБазовыхСпецификацийИспользование
			               |		ПО Scan_СпецификацииПродуктов.Ссылка = Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка.Владелец
			               |			И (Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка.ВидСпецификации = ЗНАЧЕНИЕ(Справочник.Scan_ВидыСпецификацийПродуктов.SPORTСпецификация))
			               |			И (Scan_ВерсииБазовыхСпецификацийИспользование.ОбъектИспользования = &Заявка)
			               |ГДЕ
			               |	Scan_СпецификацииПродуктов.Изделие = &Продукт";
			Запрос.УстановитьПараметр("Продукт",Продукт);
			Запрос.УстановитьПараметр("Заявка",Заявка);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			ВерсияСпецификацииЗаявки = Справочники.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка();
			Если Выборка.Следующий() Тогда
				ВерсияСпецификацииЗаявки = Выборка.ВерсияСпецификации; 
			КонецЕсли;	
			
			//Получим спецификацию и версию спецификации КП СУ
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Scan_СпецификацииПродуктов.Ссылка КАК Спецификация,
			               |	Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка КАК ВерсияСпецификации
			               |ИЗ
			               |	Справочник.Scan_СпецификацииПродуктов КАК Scan_СпецификацииПродуктов
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ВерсииБазовыхСпецификаций.Использование КАК Scan_ВерсииБазовыхСпецификацийИспользование
			               |		ПО Scan_СпецификацииПродуктов.Ссылка = Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка.Владелец
			               |			И (Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка.ВидСпецификации = ЗНАЧЕНИЕ(Справочник.Scan_ВидыСпецификацийПродуктов.SPORTСпецификация))
			               |			И (Scan_ВерсииБазовыхСпецификацийИспользование.ОбъектИспользования = &СУ)
			               |ГДЕ
			               |	Scan_СпецификацииПродуктов.НомерКПSPORT = &НомерКП
			               |	И Scan_СпецификацииПродуктов.Изделие = ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)";
			Запрос.УстановитьПараметр("НомерКП",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СУ,"КоммерческоеПредложениеSPORT.НомерКП"));
			Запрос.УстановитьПараметр("СУ",СУ);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			ВерсияСпецификацииСУ = Справочники.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка();
			Если Выборка.Следующий() Тогда
				ВерсияСпецификацииСУ = Выборка.ВерсияСпецификации; 
			КонецЕсли;
			
			//При найденных версиях спецификациях сравниваем опции
			Если ВерсияСпецификацииЗаявки = ВерсияСпецификацииСУ Тогда
				Возврат Истина;
			ИначеЕсли ЗначениеЗаполнено(ВерсияСпецификацииЗаявки) И ЗначениеЗаполнено(ВерсияСпецификацииСУ) Тогда
				Возврат ОбщегоНазначения.КоллекцииИдентичны(ВерсияСпецификацииЗаявки.РасшифровкаОпций,ВерсияСпецификацииСУ.РасшифровкаОпций);
			Иначе
				Возврат Ложь;
			КонецЕсли;		
		Иначе
			//Продукта есть в тч СУ, спецификации одинаковые
			Возврат Истина;
		КонецЕсли;	
	Иначе	
		//Получаем спецификацию и версию спецификации КП заявки
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Scan_СпецификацииПродуктов.Ссылка КАК Спецификация,
		               |	Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка КАК ВерсияСпецификации
		               |ИЗ
		               |	Справочник.Scan_СпецификацииПродуктов КАК Scan_СпецификацииПродуктов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ВерсииБазовыхСпецификаций.Использование КАК Scan_ВерсииБазовыхСпецификацийИспользование
		               |		ПО Scan_СпецификацииПродуктов.Ссылка = Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка.Владелец
		               |			И (Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка.ВидСпецификации = ЗНАЧЕНИЕ(Справочник.Scan_ВидыСпецификацийПродуктов.SPORTСпецификация))
		               |			И (Scan_ВерсииБазовыхСпецификацийИспользование.ОбъектИспользования = &Заявка)
		               |ГДЕ
		               |	Scan_СпецификацииПродуктов.НомерКПSPORT = &НомерКП
		               |	И Scan_СпецификацииПродуктов.Изделие = ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)";
		Запрос.УстановитьПараметр("НомерКП",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка,"КоммерческоеПредложениеSPORT.НомерКП"));
		Запрос.УстановитьПараметр("Заявка",Заявка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ВерсияСпецификацииЗаявки = Справочники.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка();
		Если Выборка.Следующий() Тогда
			ВерсияСпецификацииЗаявки = Выборка.ВерсияСпецификации; 
		КонецЕсли;	
		
		//Получим спецификацию и версию спецификации КП СУ
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Scan_СпецификацииПродуктов.Ссылка КАК Спецификация,
		               |	Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка КАК ВерсияСпецификации
		               |ИЗ
		               |	Справочник.Scan_СпецификацииПродуктов КАК Scan_СпецификацииПродуктов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ВерсииБазовыхСпецификаций.Использование КАК Scan_ВерсииБазовыхСпецификацийИспользование
		               |		ПО Scan_СпецификацииПродуктов.Ссылка = Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка.Владелец
		               |			И (Scan_ВерсииБазовыхСпецификацийИспользование.Ссылка.ВидСпецификации = ЗНАЧЕНИЕ(Справочник.Scan_ВидыСпецификацийПродуктов.SPORTСпецификация))
		               |			И (Scan_ВерсииБазовыхСпецификацийИспользование.ОбъектИспользования = &СУ)
		               |ГДЕ
		               |	Scan_СпецификацииПродуктов.НомерКПSPORT = &НомерКП
		               |	И Scan_СпецификацииПродуктов.Изделие = ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)";
		Запрос.УстановитьПараметр("НомерКП",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СУ,"КоммерческоеПредложениеSPORT.НомерКП"));
		Запрос.УстановитьПараметр("СУ",СУ);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ВерсияСпецификацииСУ = Справочники.Scan_ВерсииБазовыхСпецификаций.ПустаяСсылка();
		Если Выборка.Следующий() Тогда
			ВерсияСпецификацииСУ = Выборка.ВерсияСпецификации; 
		КонецЕсли;
		
		//При найденных версиях спецификациях сравниваем опции
		Если ВерсияСпецификацииЗаявки = ВерсияСпецификацииСУ Тогда
			Возврат Истина;
		ИначеЕсли ЗначениеЗаполнено(ВерсияСпецификацииЗаявки) И ЗначениеЗаполнено(ВерсияСпецификацииСУ) Тогда
			Возврат ОбщегоНазначения.КоллекцииИдентичны(ВерсияСпецификацииЗаявки.РасшифровкаОпций,ВерсияСпецификацииСУ.РасшифровкаОпций);
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции	
//rarus vikhle 28.02.2021 mt 17186 ---

//rarus vikhle 06.04.2021 mt 17484 +++

//Используется для проверки выбранной компании в полях ввода
Функция ДилерАктивен(КомпанияСсылка,УчитыватьПризнакДилер = Истина) Экспорт
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КомпанияСсылка,"Дилер,ДилерАктивен");
	Если УчитыватьПризнакДилер Тогда
		Если СтруктураРеквизитов.Дилер Тогда
			Возврат СтруктураРеквизитов.ДилерАктивен;
		Иначе
			Возврат Истина;
		КонецЕсли;	
	Иначе
		Возврат СтруктураРеквизитов.ДилерАктивен;
	КонецЕсли;
	
КонецФункции	
//rarus vikhle 06.04.2021 mt 17484 ---

//rarus agar 13.04.2021 17622 ++

////ПРЕДСТАВЛЕНИЕ ОТБОРА НАСТРОЕК ДИНАМИЧЕСКОГО СПИСКА

// Возвращает текстовое представление отборов формы выбора в виде форматированной строки
Функция ПолучитьПредставлениеОтбораФормыВыбора(ФормаВыбора, ПредставлениеОбъекта) Экспорт
	
	//rarus vikhle 24.08.2021 mt 17834 +++
	//ФиксированныеНастройки = ФормаВыбора.Параметры.ФиксированныеНастройки;
	ФиксированныеНастройки = Неопределено;
	ФормаВыбора.Параметры.Свойство("ФиксированныеНастройки", ФиксированныеНастройки);
	//rarus vikhle 24.08.2021 mt 17834 ---
	Если  ФиксированныеНастройки <> Неопределено
		И ФиксированныеНастройки.Отбор.Элементы.Количество() > 0
		Тогда
		ПредставленияЭлементовОтбора = ПолучитьПредставленияЭлементовОтбора(ФиксированныеНастройки.Отбор, ПредставлениеОбъекта);
	Иначе
		ПредставленияЭлементовОтбора = Новый Массив;
	КонецЕсли;
	
	ОтборСписка = ФормаВыбора.Список.Отбор;
	Если ОтборСписка.Элементы.Количество() > 0 Тогда
		ПредставленияЭлементовОтбораСписка = Scan_ВспомогательныеФункцииСервер.ПолучитьПредставленияЭлементовОтбора(ОтборСписка, ПредставлениеОбъекта);
	Иначе
		ПредставленияЭлементовОтбораСписка = Новый Массив;
	КонецЕсли;
	
	ПредставленияЭлементовОтбораПараметров = Новый Массив;
	
	//rarus vikhle 24.08.2021 mt 17834 +++
	//ОтборПараметров = ФормаВыбора.Параметры.Отбор;
	ОтборПараметров = Неопределено;
	ФормаВыбора.Параметры.Свойство("Отбор", ОтборПараметров);
	//rarus vikhle 24.08.2021 mt 17834 ---
	Если ОтборПараметров <> Неопределено //rarus vikhle 24.08.2021 mt 17834 
		И ОтборПараметров.Количество() > 0 Тогда
		Для Каждого ОтборКлючИЗначение Из ОтборПараметров Цикл
			Если  ОтборКлючИЗначение.Ключ = "Ссылка" 
				И ЗначениеЗаполнено(ПредставлениеОбъекта)
				Тогда
				ЛевоеЗначениеПредставление = "- "+ПредставлениеОбъекта;
			ИначеЕсли ОтборКлючИЗначение.Ключ = "ПометкаУдаления" Тогда
				ЛевоеЗначениеПредставление = "- Пометка удаления";
			Иначе
				ЛевоеЗначениеПредставление = "- "+ОтборКлючИЗначение.Ключ;
			КонецЕсли;
			
			Если ТипЗнч(ОтборКлючИЗначение.Значение) = Тип("Массив")
				ИЛИ ТипЗнч(ОтборКлючИЗначение.Значение) = Тип("ФиксированныйМассив") Тогда // rarus vikhle 14.02.2023 m 19839
				ПредставлениеЭлементаОтбора = Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
															ЛевоеЗначениеПредставление, " В списке ", СтрСоединить(ОтборКлючИЗначение.Значение, "; "));
			Иначе
				ПредставлениеЭлементаОтбора = Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
															ЛевоеЗначениеПредставление, " Равно ", Строка(ОтборКлючИЗначение.Значение));
			КонецЕсли;
			ПредставленияЭлементовОтбораПараметров.Добавить(ПредставлениеЭлементаОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПредставленияЭлементовОтбора, ПредставленияЭлементовОтбораСписка);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПредставленияЭлементовОтбора, ПредставленияЭлементовОтбораПараметров);
	
	Возврат СформироватьПредставлениеЭлементовОтбора(ПредставленияЭлементовОтбора);
	
КонецФункции

// Возвращает массив структур с представлением элементов отбора фиксированных настроек
Функция ПолучитьПредставленияЭлементовОтбора(Отбор, ПредставлениеОбъекта) Экспорт

	ПредставленияЭлементовОтбора = Новый Массив;
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПредставленияЭлементовОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", Строка(ЭлементОтбора.ТипГруппы), "", ""));
			Для Каждого ПодчиненныйЭлементОтбора Из ЭлементОтбора.Элементы Цикл
				Если ТипЗнч(ПодчиненныйЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					ПредставленияЭлементовОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", Строка(ПодчиненныйЭлементОтбора.ТипГруппы), "", ""));
					Для Каждого ПодчиненныйПодчиненныйЭлементОтбора Из ПодчиненныйЭлементОтбора.Элементы Цикл
						ПредставлениеЭлементаОтбора = ПолучитьПредставлениеЭлементаОтбора(ПодчиненныйПодчиненныйЭлементОтбора, ПредставлениеОбъекта);
						ПредставленияЭлементовОтбора.Добавить(ПредставлениеЭлементаОтбора);
					КонецЦикла;
				Иначе
					ПредставлениеЭлементаОтбора = ПолучитьПредставлениеЭлементаОтбора(ПодчиненныйЭлементОтбора, ПредставлениеОбъекта);
					ПредставленияЭлементовОтбора.Добавить(ПредставлениеЭлементаОтбора);
				КонецЕсли;
			КонецЦикла;
			ПредставленияЭлементовОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "-----", "", ""));
		Иначе
			ПредставлениеЭлементаОтбора = ПолучитьПредставлениеЭлементаОтбора(ЭлементОтбора, ПредставлениеОбъекта);
			ПредставленияЭлементовОтбора.Добавить(ПредставлениеЭлементаОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредставленияЭлементовОтбора;
	
КонецФункции

Функция ПолучитьПредставлениеЭлементаОтбора(ЭлементОтбора, ПредставлениеОбъекта)
	
	// Левое значение элемента отбора
	Если ПустаяСтрока(ЭлементОтбора.Представление) Тогда
		ЛевоеЗначениеСтрока = Строка(ЭлементОтбора.ЛевоеЗначение);
	Иначе
		ЛевоеЗначениеСтрока = ЭлементОтбора.Представление;
	КонецЕсли;
	
	Если  ЛевоеЗначениеСтрока = "Ссылка" 
		И ЗначениеЗаполнено(ПредставлениеОбъекта)
		Тогда
		ЛевоеЗначениеПредставление = "- "+ПредставлениеОбъекта;
	ИначеЕсли ЛевоеЗначениеСтрока = "ПометкаУдаления" Тогда
		ЛевоеЗначениеПредставление = "- Пометка удаления";
	Иначе
		ЛевоеЗначениеПредставление = "- "+ЛевоеЗначениеСтрока;
	КонецЕсли;
	
	// Вид сравнения отбора
	ВидСравненияПредставление = " "+Строка(ЭлементОтбора.ВидСравнения)+" ";
	
	// Правое значение отбора
	Если  ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") 
		И ЭлементОтбора.ПравоеЗначение.Количество() > 0
		Тогда
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение[0].Значение) = Тип("Массив") Тогда
			ПравоеЗначениеПредставление = СтрСоединить(ЭлементОтбора.ПравоеЗначение[0].Значение, "; ");
		Иначе
			ПравоеЗначениеПредставление = Строка(ЭлементОтбора.ПравоеЗначение[0].Значение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") 
		И ЭлементОтбора.ПравоеЗначение.Количество() > 0
		Тогда
		ПравоеЗначениеПредставление = СтрСоединить(ЭлементОтбора.ПравоеЗначение, "; ");
	Иначе
		ПравоеЗначениеПредставление = Строка(ЭлементОтбора.ПравоеЗначение);
	КонецЕсли;
	
	Возврат Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
							ЛевоеЗначениеПредставление, ВидСравненияПредставление, ПравоеЗначениеПредставление);
	
КонецФункции

// Формирует форматированную строку с представлением элементов отбора
Функция СформироватьПредставлениеЭлементовОтбора(ПредставленияЭлементовОтбора) Экспорт
	
	// Константы оформления форматированной строки
	ЦветГиперссылка = Новый Цвет(28, 85, 174);
	ПолужирныйШрифт = Новый Шрифт(,,Истина);
	
	// Форматированную строку собираем из массива форматированных строк представлений элемементов отбора
	ЧастиПредставления = Новый Массив;
	Для Каждого ПредставлениеЭлементаОтбора Из ПредставленияЭлементовОтбора Цикл
		ЧастиПредставления.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЭлементаОтбора.ЛевоеЗначение, ПолужирныйШрифт, ЦветГиперссылка));
		ЧастиПредставления.Добавить(ПредставлениеЭлементаОтбора.ВидСравнения);
		ЧастиПредставления.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЭлементаОтбора.ПравоеЗначение, ПолужирныйШрифт, ЦветГиперссылка));
		ЧастиПредставления.Добавить(Символы.ПС);
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиПредставления);
	
КонецФункции
//rarus agar 13.04.2021 17622 --


//rarus kabany 15.04.2021 17614 +++
Функция ПолучитьКонтактноеЛицоКонтрагента(ДокументИсточник) Экспорт
	
	Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		//rarus kabany 15.04.2021 17614 +++
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_КонтактныеЛица.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.Scan_КонтактныеЛица КАК Scan_КонтактныеЛица
		|ГДЕ
		|	Scan_КонтактныеЛица.Владелец = &Владелец
		|	И Scan_КонтактныеЛица.Недействителен = ЛОЖЬ
		|	И Scan_КонтактныеЛица.ПометкаУдаления = ЛОЖЬ";
		Если ЗначениеЗаполнено(ДокументИсточник.Перевозчик) Тогда
			Запрос.УстановитьПараметр("Владелец", ДокументИсточник.Перевозчик);
		Иначе
			Запрос.УстановитьПараметр("Владелец", ДокументИсточник.КомпанияОтправитель);	
		КонецЕсли;
		//rarus kabany 15.04.2021 17614 ---
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат "";
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.КонтактноеЛицо;
			
		КонецЕсли;
	
КонецФункции
//rarus kabany 15.04.2021 17614 ---

// rarus kabany 14.05.2021 17657 +++

Функция ЗаявкаНаДействие_СписокИменКомандПечати() Экспорт
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_ПокупкаУПоставщикаИПередачаТК", "Покупка у поставщика и передача ТК"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_ПокупкаУПоставщикаИПродажаТретьемуЛицу", "Покупка у поставщика и продажа 3-му лицу"));
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК", "Покупка у поставщика, продажа 3-му лицу и передача ТК"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_ПокупкаУПоставщикаСПостановкойНаХранение", "Покупка у поставщика с постановкой на хранение"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_ПостановкаНаХранение", "Постановка на хранение"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_СнятиеСХраненияИПередачаТК", "Снятие с хранения и передача ТК"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_СнятиеСХраненияИПродажаТретьемуЛицу", "Снятие с хранения и продажа 3-му лицу"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК", "Снятие с хранения, продажа 3-му лицу и передача ТК"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_СнятиеСХраненияИПередачаВПроизводство", "Снятие с хранения и передача в производство"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_ПередачаВПроизводство", "Передача в производство"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу", "Снятие с хранения и передача на хранение 3-му лицу"));	
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу", "Покупка у поставщика и передача на хранение 3-му лицу"));
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_М15", "М-15"));
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_МХ3", "МХ-3"));
	МассивИмен.Добавить(Новый Структура("ИмяКоманды, Синоним", "Печать_МХ1", "МХ-1"));
	
	Возврат МассивИмен; 
	КонецФункции
// rarus kabany 14.05.2021 17657 ---	

// rarus kabany 17.05.2021 17657 +++

// Регулирует видимость команд печати в зависимости от Хоз. операции
Функция ЗаявкаНаДействиеОтображениеКомандПечатиОтХозОпераций(мКомандПечати, СсылкаДок) Экспорт 
	Если ЗначениеЗаполнено(СсылкаДок) Тогда
		мКомандПечатиОбнов = Новый Массив;
		ХозОперация = СсылкаДок.ХозОперация;
		
		Для каждого команда из мКомандПечати ЦИКЛ
			
			Если команда.ИмяКоманды = "Печать_М15" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_ПередачаВПроизводство" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу" ТОГДА	
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_ПокупкаУПоставщикаИПередачаТК" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК);
				 ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_ПокупкаУПоставщикаИПродажаТретьемуЛицу" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК);
				 ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_ПокупкаУПоставщикаСПостановкойНаХранение" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение);
				 ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_ПостановкаНаХранение" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_СнятиеСХраненияИПередачаВПроизводство" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_СнятиеСХраненияИПередачаТК" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_СнятиеСХраненияИПродажаТретьемуЛицу" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_МХ3" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК); 
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			ИначеЕсли команда.ИмяКоманды = "Печать_МХ1" ТОГДА
				команда.Видимость = (ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение ИЛИ		
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
				ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу);
				ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,команда.ИмяКоманды,команда.Видимость);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат мКомандПечатиОбнов; 

КонецФункции

Процедура ДобавитьОбновленнуюКомандуПечати(мКомандПечатиОбнов,ИмяКоманды,Видимость) 
мКомандПечатиОбнов.Добавить(Новый Структура("ИмяКоманды, Видимость", ИмяКоманды , Видимость));
КонецПроцедуры
// rarus kabany 17.05.2021 17657 ---

// rarus kabany 26.05.2021 17790 +++
// Получает дату начала первичного договора, если дата не найдена возвращает значение даты из переданного объекта.
Функция ПолучитьДатуНачалаПервогоДоговора(Договор) Экспорт
	
	Если Договор.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение Тогда
		Возврат Договор.ДатаНачала; 
	КонецЕсли;	
	
	ДоговорОснование = Договор.ДоговорОснование;
	
	// rarus kabany 28.05.2021 17790 +++
	Если НЕ ДоговорОснование.Пустая() И ДоговорОснование.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение Тогда
		Возврат ДоговорОснование.ДатаНачала;
	КонецЕсли;
	// rarus kabany 28.05.2021 17790 ---
	
	МассивСОП = Новый Массив;
    МассивСОП.Добавить(ДоговорОснование);
			
	Для Каждого СОП Из МассивСОП Цикл
		ДоговорОснование = СОП.ДоговорОснование; 
		Если НЕ ДоговорОснование.Пустая() И ДоговорОснование.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение Тогда
			Возврат ДоговорОснование.ДатаНачала;
		ИначеЕсли НЕ ДоговорОснование.Пустая() Тогда 
			МассивСОП.Добавить(ДоговорОснование);
        КонецЕсли;	
	КонецЦикла;
	
	Возврат Договор.ДатаНачала;
	
КонецФункции
// rarus kabany 26.05.2021 17790 ---

// Возвращает признак возможности создания заявки с переданными продуктами.
// Проверяется совпадение реквизитов из структуры параметры ПроверяемыеРеквизиты, учитываются реквизиты с установленным значением Истина 
// Для локального статуса проверяется соответствие значению OPEN 
//
// Параметры:
//  ВыбранныеПродукты	- Массив	- массив ссылок продуктов
// 	ПроверяемыеРеквизиты - Структура - конструктор в функции Scan_ОбщегоНазначенияКлиентСервер.ПроверяемыеРеквизитыПродуктов 
//  	* Ключ  - Строка - Реквизит продукта
//		* Значение - Булево - признак необходимости проверки по реквизиту-ключу
// Возвращаемое значение:
//  Булево - Истина, если возможно создать заявку с переданными продуктами 
//
Функция МожноСоздатьЗаявку(ВыбранныеПродукты, ПроверяемыеРеквизиты) Экспорт //rarus vikhle 23.07.2021 mt 17834 +++
	
	ЭтоПерваяСтрока			= Истина;
	ОсновнаяСтавкаНДС		= Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС;//rarus vikhle 13.05.2021 mt 17733 ставка НДС по умолчанию 20%
	ПроверкаУспешна 		= Истина; //rarus ozhnik 15893 08.09.2020 +
	
	//rarus vikhle 12.08.2021 mt 17834 +++
	ПроверятьМарку 						= ПроверяемыеРеквизиты.МаркаПродукта;
	ПроверятьМодель						= ПроверяемыеРеквизиты.МодельПродукта;
	ПроверятьСпецификацию				= ПроверяемыеРеквизиты.СпецификацияПродукта;
	ПроверятьТипСпецификации			= ПроверяемыеРеквизиты.ТипСпецификации;
	ПроверятьПризнакБУ 					= ПроверяемыеРеквизиты.БУ;
	ПроверятьСтавкуНДС 					= ПроверяемыеРеквизиты.СтоимостьПродажиБУСтавкаНДС;
	ПроверятьЛокальныйСтатус			= ПроверяемыеРеквизиты.ЛокальныйСтатусПродукта; //rarus vikhle 24.08.2021 mt 17834
	//rarus vikhle 12.08.2021 mt 17834 ---
	ПроверятьСтандартнуюСпецификацию	= ПроверяемыеРеквизиты.СтандартнаяСпецификация; //rarus vikhle 21.09.2021 mt 18298 
	
	ПредыдущаяМарка 					= "";
	ПредыдущаяМодель					= "";
	ПредыдущаяСтрокаОпций				= ""; //rarus ozhnik 15893 07.09.2020 изменил на строку опций + 
	ПредыдущийТипСпецификации			= ""; //rarus vikhle 12.11.2020 mt 16181
	//rarus vikhle 13.05.2021 mt 17733 +++
	ПредыдущийПризнакБУ					= "";
	ПредыдущаяСтавкаНДС					= ""; 
	//rarus vikhle 13.05.2021 mt 17733 ---
	ПредыдущаяСтандартнаяСпецификация	= ""; //rarus vikhle 21.09.2021 mt 18298
	
	МаркиОтличаются 					= Ложь;
	МоделиОтличаются 					= Ложь;
	СпецификацииОтличаются 				= Ложь;
	ТипыСпецификацииОтличаются			= Ложь;//rarus vikhle 12.11.2020 mt 16181
	//rarus vikhle 13.05.2021 mt 17733 +++
	ПризнакиБУОтличаются				= Ложь;
	СтавкиНДСОтличаются					= Ложь;
	ЛокальныйСтатусНеOpen				= Ложь; //rarus vikhle 24.08.2021 mt 17834
	//rarus vikhle 13.05.2021 mt 17733 ---
	СтандартныеСпецификацииОтличаются	= Ложь; //rarus vikhle 21.09.2021 mt 18298 
	
	//rarus vikhle 12.08.2021 mt 17834 +++
	ИменаРеквизитовПродукта = "";
	МассивИменРеквизитов = Новый Массив;
	Для Каждого Элемент Из ПроверяемыеРеквизиты Цикл
		Если Элемент.Ключ = "МодельПродукта" И Элемент.Значение = Истина Тогда
			МассивИменРеквизитов.Добавить("МодельПродукта.Наименование");
			МассивИменРеквизитов.Добавить("МаркаПродукта"); // используется при сравнении моделей
		ИначеЕсли Элемент.Значение = Истина Тогда
			МассивИменРеквизитов.Добавить(Элемент.Ключ);	
		КонецЕсли;	
	КонецЦикла;	
	ИменаРеквизитовПродукта = СтрСоединить(МассивИменРеквизитов, ",");
	
	Если ИменаРеквизитовПродукта = "" Тогда
		ВызватьИсключение 
			НСтр("ru = 'Отсутствуют проверяемые реквизиты'");
	КонецЕсли;	
	//rarus vikhle 12.08.2021 mt 17834 ---
	
	
	//ИменаРеквизитовПродукта = "МаркаПродукта,МодельПродукта.Наименование,СпецификацияПродукта,ТипСпецификации,БУ,СтоимостьПродажиБУСтавкаНДС";//rarus vikhle 01.02.2021 mt 17179
	Для Каждого Продукт Из ВыбранныеПродукты Цикл
		
		СтруктураРеквизитов		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Продукт,ИменаРеквизитовПродукта);
		Если ПроверятьМарку Тогда
			МаркаПродукта 			= СтруктураРеквизитов.МаркаПродукта;
		КонецЕсли;	
		Если ПроверятьМодель Тогда
			МодельПродукта 			= СтруктураРеквизитов.МодельПродуктаНаименование;
		КонецЕсли;	
		Если ПроверятьСпецификацию Тогда
			СпецификацияПродукта    = СтруктураРеквизитов.СпецификацияПродукта;
		КонецЕсли;	
		Если ПроверятьТипСпецификации Тогда
			ТипСпецификации			= СтруктураРеквизитов.ТипСпецификации;
		КонецЕсли;	
		//rarus vikhle 01.02.2021 mt 17179 ---
		//rarus vikhle 13.05.2021 mt 17733 +++
		Если ПроверятьПризнакБУ Тогда
			ПризнакБУ				= СтруктураРеквизитов.БУ; 
		КонецЕсли;	
		Если ПроверятьСтавкуНДС Тогда
			СтавкаНДС				= ?(СтруктураРеквизитов.СтоимостьПродажиБУСтавкаНДС.Пустая(),ОсновнаяСтавкаНДС,СтруктураРеквизитов.СтоимостьПродажиБУСтавкаНДС); //Незаполненную ставку НДС считаем как 20% 
		КонецЕсли;	
		//rarus vikhle 13.05.2021 mt 17733 ---
		
		Если ПроверятьСпецификацию Тогда
			//rarus ozhnik 15893 07.09.2020 +
			СпецификацияCOW = Справочники.Scan_ВерсииБазовыхСпецификаций.НайтиПоРеквизиту("ВидСпецификации",Справочники.Scan_ВидыСпецификацийПродуктов.COWСпецификацияПодтвержденнаяЗаводом,,СпецификацияПродукта);
			СтрокаОпций = СпецификацияCOW.Опции;
		//rarus ozhnik 15893 07.09.2020 -
		КонецЕсли;
		
		//rarus vikhle 24.08.2021 mt 17834 +++
		Если ПроверятьЛокальныйСтатус 
			И СтруктураРеквизитов.ЛокальныйСтатусПродукта <> Справочники.Scan_ЛокальныеСтатусыПродуктов.OPEN Тогда
			ЛокальныйСтатусНеOpen = Истина;
		КонецЕсли;	
		//rarus vikhle 24.08.2021 mt 17834 ---
		
		//rarus vikhle 21.09.2021 mt 18298 +++
		Если ПроверятьСтандартнуюСпецификацию Тогда
			СтандартнаяСпецификация = СтруктураРеквизитов.СтандартнаяСпецификация;
		КонецЕсли;	
		//rarus vikhle 21.09.2021 mt 18298 ---
		
		Если НЕ ЭтоПерваяСтрока Тогда
			Если ПроверятьМарку И МаркаПродукта <> ПредыдущаяМарка Тогда
				МаркиОтличаются = Истина;
			КонецЕсли;
			
			Если ПроверятьМодель 
				И ((МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania
				И Лев(СокрЛП(МодельПродукта),10) <> ПредыдущаяМодель) //rarus vikhle 01.02.2021 mt 17179 достаточно совпадения по первым 10 символам для марки скания				
				ИЛИ (МаркаПродукта <> Справочники.Scan_МаркиПродуктов.Scania И МодельПродукта <> ПредыдущаяМодель)) Тогда //rarus vikhle 18.02.2021 17123
				МоделиОтличаются = Истина;
			КонецЕсли;
			
			Если ПроверятьСпецификацию 
				И СтрокаОпций <> ПредыдущаяСтрокаОпций Тогда //rarus ozhnik 15893 07.09.2020 изменил на строку опций + 
				СпецификацииОтличаются = Истина;
			КонецЕсли;
			//rarus vikhle 12.11.2020 mt 16181 +++
			Если ПроверятьТипСпецификации 
				И (ЗначениеЗаполнено(ТипСпецификации) ИЛИ ЗначениеЗаполнено(ПредыдущийТипСпецификации)) И ТипСпецификации <> ПредыдущийТипСпецификации Тогда
				ТипыСпецификацииОтличаются = Истина;	
			КонецЕсли;
			//rarus vikhle 12.11.2020 mt 16181 ---
			
			//rarus vikhle 13.05.2021 mt 17733 +++
			Если ПроверятьПризнакБУ И ПризнакБУ <> ПредыдущийПризнакБУ Тогда
				ПризнакиБУОтличаются = Истина;
			КонецЕсли;	
			
			//Если НЕ ПризнакиБУОтличаются И ПризнакБУ Тогда
			Если ПроверятьСтавкуНДС И СтавкаНДС <> ПредыдущаяСтавкаНДС Тогда
				СтавкиНДСОтличаются = Истина;
			КонецЕсли;	
			//КонецЕсли;	
			//rarus vikhle 13.05.2021 mt 17733 ---
			
			//rarus vikhle 21.09.2021 mt 18298 +++
			Если ПроверятьСтандартнуюСпецификацию И СтандартнаяСпецификация <> ПредыдущаяСтандартнаяСпецификация Тогда
				СтандартныеСпецификацииОтличаются = Истина;
			КонецЕсли;	
			//rarus vikhle 21.09.2021 mt 18298 ---
			
		КонецЕсли; 
		
		Если ПроверятьМарку Тогда
			ПредыдущаяМарка	= МаркаПродукта;
		КонецЕсли;
		
		Если ПроверятьМодель Тогда
			Если МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania Тогда 
				ПредыдущаяМодель = Лев(СокрЛП(МодельПродукта),10); //rarus vikhle 01.02.2021 mt 17179
			Иначе
				ПредыдущаяМодель = МодельПродукта;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ПроверятьСпецификацию Тогда
			ПредыдущаяСтрокаОпций = СтрокаОпций;  //rarus ozhnik 15893 07.09.2020 изменил на строку опций + 
		КонецЕсли;	
		
		Если ПроверятьТипСпецификации Тогда
			ПредыдущийТипСпецификации = ТипСпецификации; //rarus vikhle 12.11.2020 mt 16181  
		КонецЕсли;	
		//rarus viklhe 13.05.2021 mt 17733 +++
		Если ПроверятьПризнакБУ Тогда
			ПредыдущийПризнакБУ	= ПризнакБУ;
		КонецЕсли;	
		
		Если ПроверятьСтавкуНДС Тогда
			ПредыдущаяСтавкаНДС	= СтавкаНДС;
		КонецЕсли;	
		//rarus viklhe 13.05.2021 mt 17733 ---
		
		//rarus vikhle 21.09.2021 mt 18298 +++
		Если ПроверятьСтандартнуюСпецификацию Тогда
			ПредыдущаяСтандартнаяСпецификация = СтандартнаяСпецификация;
		КонецЕсли;	
		//rarus vikhle 21.09.2021 mt 18298 ---
		
		ЭтоПерваяСтрока = Ложь;
	КонецЦикла; 
	
	ТекстОшибки = НСтр("ru = 'Заявку нельзя создать т.к. нельзя выбирать продукты с '; en = 'A delivery agreement cannot be created because You can not choose products with '"); //rarus vikhle 06.11.2020 mt 16723
	Ошибки = Новый Массив;
	Если ПроверятьМарку И МаркиОтличаются Тогда
		Ошибки.Добавить(НСтр("ru = 'разными марками'; en = 'different brands'"));	
	КонецЕсли;
	Если ПроверятьМодель И МоделиОтличаются Тогда
		Ошибки.Добавить(НСтр("ru = 'разными моделями'; en = 'different models'"));	
	КонецЕсли;
	Если ПроверятьСпецификацию И СпецификацииОтличаются Тогда
		Ошибки.Добавить(НСтр("ru = 'разными спецификациями'; en = 'different specifications'")); //rarus vikhle 12.11.2020 mt 16181
	КонецЕсли;
	//rarus vikhle 12.11.2020 mt 16181 +++
	Если ПроверятьТипСпецификации И ТипыСпецификацииОтличаются Тогда
		Ошибки.Добавить(НСтр("ru = 'разными типами спецификаций'; en = 'different types of specifications'"));	
	КонецЕсли;	
	//rarus vikhle 12.11.2020 mt 16181 ---
	//rarus viklhe 13.05.2021 mt 17733 +++
	Если ПроверятьПризнакБУ И ПризнакиБУОтличаются Тогда
		Ошибки.Добавить(НСтр("ru = 'разными признаками БУ'; en = 'different used flags'"));	
	КонецЕсли;	
	Если ПроверятьСтавкуНДС И СтавкиНДСОтличаются Тогда
		Ошибки.Добавить(НСтр("ru = 'разными ставками НДС'; en = 'different VAT rates'"));	
	КонецЕсли;	
	//rarus viklhe 13.05.2021 mt 17733 ---
	//rarus vikhle 24.08.2021 mt 17834 +++
	Если ПроверятьЛокальныйСтатус И ЛокальныйСтатусНеOpen Тогда
		Ошибки.Добавить(НСтр("ru = 'локальным статусом, отличным от OPEN '; en = 'local status that differs from OPEN'"));	
	КонецЕсли;
	//rarus vikhle 24.08.2021 mt 17834 ---
	
	//rarus vikhle 21.09.2021 mt 18298 +++
	Если ПроверятьСтандартнуюСпецификацию И СтандартныеСпецификацииОтличаются Тогда
		Ошибки.Добавить(НСтр("ru = 'разными стандартными спецификациями'; en = 'different standart specifications'"));
	КонецЕсли;	
	//rarus vikhle 21.09.2021 mt 18298 ---
	
	Если МаркиОтличаются 
		ИЛИ МоделиОтличаются 
		//ИЛИ СпецификацииОтличаются // rarus vikhle 08.12.2021 m 18646
		ИЛИ ТипыСпецификацииОтличаются 
		ИЛИ ПризнакиБУОтличаются //rarus vikhle 13.05.2021 mt 17733 + ПризнакиБУОтличаются
		ИЛИ СтавкиНДСОтличаются //rarus vikhle 13.05.2021 mt 17733 + СтавкиНДСОтличаются
		ИЛИ ЛокальныйСтатусНеOpen 
		ИЛИ СтандартныеСпецификацииОтличаются Тогда //rarus vikhle 21.09.2021 m 18298
		ТекстОшибки = ТекстОшибки + СтрСоединить(Ошибки, ", ") + ".";
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
	// rarus vikhle 08.12.2021 m 18646 +++	
	Если СпецификацииОтличаются Тогда
		ТекстОшибки = Нстр("ru = 'В заявку выбраны продукты с разными спецификациями.'; en = 'Products with different specifications are added to the delivery agreement'");
		ВывестиСообщениеПол(ТекстОшибки);	
	КонецЕсли;
	// rarus vikhle 08.12.2021 m 18646 ---
	
	//rarus ozhnik 15893 08.09.2020 + Для спецификаций просто предупреждать, но не запрещать.
	Если МаркиОтличаются 
		ИЛИ МоделиОтличаются 
		ИЛИ ТипыСпецификацииОтличаются 
		ИЛИ ПризнакиБУОтличаются //rarus vikhle 13.05.2021 mt 17733 + ПризнакиБУОтличаются
		ИЛИ СтавкиНДСОтличаются //rarus vikhle 13.05.2021 mt 17733 + СтавкиНДСОтличаются
		ИЛИ ЛокальныйСтатусНеOpen  
		ИЛИ СтандартныеСпецификацииОтличаются Тогда //rarus vikhle 21.09.2021 m 18298
		ПроверкаУспешна = Ложь;
	КонецЕсли;
	//rarus ozhnik 15893 08.09.2020 - 

	Возврат ПроверкаУспешна; //rarus ozhnik 15893 08.09.2020 + 
	
КонецФункции //rarus vikhle 23.07.2021 mt 17834 ---

Функция ПолучитьСписокХОСПродажей() Экспорт // rarus tenkam 19.08.2021 mantis 18062 +++
	МассивХО = Новый Массив;
	
	МассивХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу"));
	МассивХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК"));
	МассивХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь"));
	МассивХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК"));
	МассивХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу"));
	МассивХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК"));
	
	Возврат МассивХО;
	
КонецФункции // rarus tenkam 19.08.2021 mantis 18062 ---

// Возвращает признак изменения вида дилера, при пустом текущем или предыдущем дилере возвращается Истина
//
// Параметры:
//  ПредыдущийДилер	 - СправочникСсылка.Scan_Компании	 - Дилер до изменения 
//  ТекущийДилер	 - СправочникСсылка.Scan_Компании 	 - Текущий дилер
// 
// Возвращаемое значение:
// Булево 
//
Функция ИзменилсяВидДилера(Знач ПредыдущийДилер, Знач ТекущийДилер) Экспорт //rarus vikhle 16.09.2021 mt 18288 +++
	
	Если НЕ ЗначениеЗаполнено(ПредыдущийДилер) ИЛИ НЕ ЗначениеЗаполнено(ТекущийДилер) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	МассивДилеров = Новый Массив;
	МассивДилеров.Добавить(ПредыдущийДилер);
	МассивДилеров.Добавить(ТекущийДилер);
	
	СоответствиеВидовДилера = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДилеров, "ВидДилера");
	
	Если (СоответствиеВидовДилера[ПредыдущийДилер] = Перечисления.Scan_ВидыДилеров.Собственный 
		И (СоответствиеВидовДилера[ТекущийДилер] = Перечисления.Scan_ВидыДилеров.Независимый
		ИЛИ СоответствиеВидовДилера[ТекущийДилер].Пустая())) 
		ИЛИ (СоответствиеВидовДилера[ТекущийДилер] = Перечисления.Scan_ВидыДилеров.Собственный 
		И (СоответствиеВидовДилера[ПредыдущийДилер] = Перечисления.Scan_ВидыДилеров.Независимый
		ИЛИ СоответствиеВидовДилера[ПредыдущийДилер].Пустая())) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
			
КонецФункции //rarus vikhle 16.09.2021 mt 18288 ---

// Разбирает строку настроек очистки регистров из настройки 61009 
//
// Параметры:
//  СтрокаНастроек	 - Строка	 - Строка настроек
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками: 
//		* РегистрСведений - Строка - Имя регистра сведений
//		* КоличествоДней  - Число  - Количество дней для расчета крайней даты очистки записей
//
Функция РазобратьНастройкиОчисткиРегистров(СтрокаНастроек = Неопределено) Экспорт //rarus vikhle 22.09.2021 mt 17927
	
	Если СтрокаНастроек = Неопределено Тогда
		СтрокаНастроек = Scan_ПраваИНастройки.Scan_Право("СписокРегистровИПериодыОчисткиПредопределённыхРегистровСведений");
	КонецЕсли;	
	
	МассивСтрок	= СтрРазделить(СтрокаНастроек, ",");
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("РегистрСведений", Новый ОписаниеТипов("Строка"));
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(5,,ДопустимыйЗнак.Неотрицательный);
	ТаблицаНастроек.Колонки.Добавить("КоличествоДней", ОписаниеТипаЧисло);
		
	Для Каждого Строка Из МассивСтрок Цикл
		
		ИндексРазделителя = СтрНайти(Строка, "_",,,2); //2е вхождение после префикса "scan_"
		
		Если Не ИндексРазделителя = 0 Тогда
			нСтрокаТЗ = ТаблицаНастроек.Добавить();
			нСтрокаТЗ.РегистрСведений = Лев(Строка, ИндексРазделителя - 1); //получаем строку до разделителя "_" 
			нСтрокаТЗ.КоличествоДней  = Сред(Строка, ИндексРазделителя + 1); //получаем строку после разделителя "_"
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ТаблицаНастроек;
		
КонецФункции //rarus vikhle 22.09.2021 mt 17927 ---	

Функция НачатьФоновоеОбновлениеDDSНаСервере(ЗаявкаСсылка) Экспорт //rarus vikhle 27.10.2021 m 18426 +++
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
	//ПараметрыВыполнения.КлючФоновогоЗадания = XMLСтрока(ЗаявкаСсылка);
	ПараметрыВыполнения.ОжидатьЗавершение	= 0;
	ПараметрыВыполнения.ЗапуститьВФоне		= Истина;
		
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "Справочники.Scan_СоглашенияОПоставке.ОбновитьДанныеDDSВЗаявках", ЗаявкаСсылка);
	
КонецФункции //rarus vikhle 27.10.2021 m 18426 ---

#Область ДокументыЗакрепленияМенеджеров

Процедура ПроверитьМенеджеровДокументаЗакрепления(ДокументОбъект, Отказ) Экспорт //rarus vikhle 28.02.2022 m 18879 +++
		
	ИмяТЧМенеджеры		= ИмяТЧДокументаЗакрепления(ДокументОбъект);
	МенеджерыДокумента	= ДокументОбъект[ИмяТЧМенеджеры].ВыгрузитьКолонку("Менеджер");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(Пользователи.Ссылка) КАК Пользователь,
	               |	Пользователи.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ Пользователи
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Сотрудник В(&МенеджерыДокумента)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Пользователи.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_Сотрудники.Ссылка КАК МенеджерДокумента,
	               |	Пользователи.Пользователь КАК Пользователь,
	               |	Пользователи.Сотрудник КАК СотрудникПользователя,
	               |	Пользователи.Пользователь.ЛогинНаПортале КАК ЛогинНаПортале,
	               |	Пользователи.Пользователь.КодСотрудникаНаПортале КАК КодСотрудникаНаПортале
	               |ИЗ
	               |	Справочник.Scan_Сотрудники КАК Scan_Сотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Пользователи КАК Пользователи
	               |		ПО Scan_Сотрудники.Ссылка = Пользователи.Сотрудник
	               |ГДЕ
	               |	Scan_Сотрудники.Ссылка В(&МенеджерыДокумента)";
	Запрос.УстановитьПараметр("МенеджерыДокумента", МенеджерыДокумента);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Отказ = Истина;
			ВывестиСообщениеПол(Нстр("ru = 'Менеджер ""%1"" не указан ни у 1 пользователя. Документ не записан.'"),,,,, Выборка.МенеджерДокумента);
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Выборка.ЛогинНаПортале) И НЕ ЗначениеЗаполнено(Выборка.КодСотрудникаНаПортале) Тогда
				Отказ = Истина;
				ВывестиСообщениеПол(Нстр("ru = 'У пользователя ""%1"", у которого указан менеджер ""%2"", не заполнен логин на портале и код сотрудника на портале. Документ не записан.'"),,,,, 
									Выборка.Пользователь, Выборка.МенеджерДокумента);
			КонецЕсли;	
									
		КонецЕсли;
				
	КонецЦикла;
	
	
КонецПроцедуры //rarus vikhle 28.02.2022 m 18879 ---	

Функция ПолучитьДанныеSetAdditionalProperty(ДокументОбъект) Экспорт //rarus vikhle 03.03.2022 m 18879 +++ 
	
	ИмяТЧ = ИмяТЧДокументаЗакрепления(ДокументОбъект);
	
	Если НЕ ДокументОбъект.Ссылка.Проведен Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТЧДокумента.Дилер КАК Дилер,
		               |	ТЧДокумента.Менеджер КАК Менеджер
		               |ПОМЕСТИТЬ ТЧДокумента
		               |ИЗ
		               |	&ТЧДокумента КАК ТЧДокумента
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЧДокумента.Дилер КАК Дилер,
		               |	ТЧДокумента.Менеджер КАК Менеджер,
		               |	МАКСИМУМ(Пользователи.Ссылка) КАК ПользовательМенеджера
		               |ИЗ
		               |	ТЧДокумента КАК ТЧДокумента
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		               |		ПО ТЧДокумента.Менеджер = Пользователи.Сотрудник
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТЧДокумента.Дилер,
		               |	ТЧДокумента.Менеджер";
		Запрос.УстановитьПараметр("ТЧДокумента", ДокументОбъект[ИмяТЧ].Выгрузить()); 
		Результат = Запрос.Выполнить().Выгрузить();
		
		Возврат Результат;
						
	Иначе
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТЧДоЗаписи.Дилер КАК Дилер,
		               |	ТЧДоЗаписи.Менеджер КАК Менеджер
		               |ПОМЕСТИТЬ ТЧДоЗаписи
		               |ИЗ
		               |	&ТЧДоЗаписи КАК ТЧДоЗаписи
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЧПослеЗаписи.Дилер КАК Дилер,
		               |	ТЧПослеЗаписи.Менеджер КАК Менеджер
		               |ПОМЕСТИТЬ ТЧПослеЗаписи
		               |ИЗ
		               |	&ТЧПослеЗаписи КАК ТЧПослеЗаписи
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЧПослеЗаписи.Дилер КАК Дилер,
		               |	ТЧПослеЗаписи.Менеджер КАК Менеджер,
		               |	МАКСИМУМ(Пользователи.Ссылка) КАК ПользовательМенеджера
		               |ИЗ
		               |	ТЧПослеЗаписи КАК ТЧПослеЗаписи
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		               |		ПО ТЧПослеЗаписи.Менеджер = Пользователи.Сотрудник
		               |ГДЕ
		               |	НЕ (ТЧПослеЗаписи.Дилер, ТЧПослеЗаписи.Менеджер) В
		               |				(ВЫБРАТЬ
		               |					ТЧДоЗаписи.Дилер КАК Дилер,
		               |					ТЧДоЗаписи.Менеджер КАК Менеджер
		               |				ИЗ
		               |					ТЧДоЗаписи КАК ТЧДоЗаписи)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТЧПослеЗаписи.Дилер,
		               |	ТЧПослеЗаписи.Менеджер";
		Запрос.УстановитьПараметр("ТЧДоЗаписи", ДокументОбъект.Ссылка[ИмяТЧ].Выгрузить()); 
		Запрос.УстановитьПараметр("ТЧПослеЗаписи", ДокументОбъект[ИмяТЧ].Выгрузить());
		Результат = Запрос.Выполнить().Выгрузить();
		
		Возврат Результат;
								
	КонецЕсли;
	
КонецФункции //rarus vikhle 03.03.2022 m 18879 ---	

Функция ИмяТЧДокументаЗакрепления(ДокументОбъект) //rarus vikhle 03.03.2022 m 18879 +++
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Scan_ЗакреплениеМенеджеровЗаДилерами") Тогда
		Возврат Метаданные.Документы.Scan_ЗакреплениеМенеджеровЗаДилерами.ТабличныеЧасти.ОтветственныеМенеджеры.Имя;	
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Scan_ЗакреплениеМенеджеровДепартаментаПродажАвтобусовЗаДилерами") Тогда
		Возврат Метаданные.Документы.Scan_ЗакреплениеМенеджеровДепартаментаПродажАвтобусовЗаДилерами.ТабличныеЧасти.ОтветственныеМенеджеры.Имя;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Scan_ЗакреплениеМенеджеровОКПЗаДилерами") Тогда
		Возврат Метаданные.Документы.Scan_ЗакреплениеМенеджеровОКПЗаДилерами.ТабличныеЧасти.Менеджеры.Имя; 	
	Иначе
		ВызватьИсключение Нстр("ru = 'Неподдерживаемый тип документа в процедуре ""Scan_ВспомогательныеФункцииСервер.ИмяТЧДокументаЗакрепления""'");
	КонецЕсли;		
	
КонецФункции //rarus vikhle 03.03.2022 m 18879 ---	

Процедура ОтправитьЗакрепленныхМенеджеровВ1БД(ДанныеSetAdditionalProperty, ИмяДопРеквизита) Экспорт //rarus vikhle 03.03.2022 m 18879 +++
	
	Для Каждого СтрокаТЗ Из ДанныеSetAdditionalProperty Цикл
		
		ПараметрыОперации = ДлительныеОперации.ПараметрыВыполненияВФоне();
		ПараметрыОперации.ОжидатьЗавершение	= 0;
		ПараметрыОперации.ЗапуститьВФоне	= Истина;
		
		ПараметрыМетода = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода("SetAdditionalProperty", Ложь);
		ПараметрыМетода.Вставить(ИмяДопРеквизита,	СтрокаТЗ.ПользовательМенеджера);
		ПараметрыМетода.Вставить("ТипОбъекта", 		"Компания");
		ПараметрыМетода.Вставить("GUID", 			СтрокаТЗ.Дилер.IDExternalSystem);
		
		ОбъектИДопРеквизит = Новый Соответствие();
		ОбъектИДопРеквизит.Вставить(СтрокаТЗ.Дилер, ИмяДопРеквизита); 
		
		ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыОперации, 
											 "Scan_ВебСервисыРазборОтветов.ВызватьМетод_SetAdditionalProperty", 
											 ПараметрыМетода, 
											 "Компания", 
											 СтрокаТЗ.Дилер.IDExternalSystem,,,
											 ОбъектИДопРеквизит);
												 
	КонецЦикла;
	
КонецПроцедуры //rarus vikhle 03.03.2022 m 18879 ---	

#КонецОбласти