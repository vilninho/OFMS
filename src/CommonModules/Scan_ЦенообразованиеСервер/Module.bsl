#Область СоставляющиеРасчетаЦенПродуктов

#Область РасчетСоставляющих

Функция ПолучитьСтруктуруПараметровРасчета() Экспорт
	
	СтруктураПараметровРасчета = Новый Структура;
	СтруктураПараметровРасчета.Вставить("ФормулаРасчета");
	СтруктураПараметровРасчета.Вставить("НерасчетныеСоставляющие");
	СтруктураПараметровРасчета.Вставить("ЗаданныеСоставляющие");
	
	Возврат СтруктураПараметровРасчета;
	
КонецФункции

Функция РассчитатьСоставляющую(Составляющая, ПараметрыРасчета = Неопределено) Экспорт
	
	Если Составляющая.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную") Тогда
		Возврат Составляющая.ЗначениеПоУмолчанию;
	ИначеЕсли Составляющая.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле") Тогда
		ТаблицаСоставляющих = ПолучитьПустуюТаблицуСоставляющих();
		
		НерасчетныеСоставляющие  = ПолучитьНерасчетныеСоставляющиеИКоэффициенты(ПараметрыРасчета);
		Для Каждого НерасчетнаяСоставляющая Из НерасчетныеСоставляющие Цикл
			НоваяСтрока = ТаблицаСоставляющих.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НерасчетнаяСоставляющая);
		КонецЦикла;
		
		СоставляющиеСоставляющей = ПолучитьСоставляющиеСоставляющей(Составляющая, ПараметрыРасчета);
		Для Каждого СоставляющаяСоставляющей Из СоставляющиеСоставляющей Цикл
			НоваяСтрока = ТаблицаСоставляющих.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставляющаяСоставляющей);
		КонецЦикла;
		
		Если  ПараметрыРасчета <> Неопределено
			И ПараметрыРасчета.Свойство("ЗаданныеСоставляющие")
			Тогда
			ЗаданныеСоставляющие = ПараметрыРасчета.ЗаданныеСоставляющие;
		Иначе
			ЗаданныеСоставляющие = Неопределено;
		КонецЕсли;
			
		Если ЗаданныеСоставляющие <> Неопределено Тогда
			Для Каждого ЗаданнаяСоставляющая Из ЗаданныеСоставляющие Цикл
				НайденнаяСтрокаСоставляющей = ТаблицаСоставляющих.Найти(ЗаданнаяСоставляющая.Идентификатор, "Идентификатор");
				Если НайденнаяСтрокаСоставляющей <> Неопределено Тогда
					НайденнаяСтрокаСоставляющей.Значение = ЗаданнаяСоставляющая.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаСоставляющих.Сортировать("Порядок,НомерСтрокиКалькуляции");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВариантФормированияРасчета", ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле"));
		ПараметрыОтбора.Вставить("Значение", 0);
		
		НайденныеСтрокиСоставляющих = ТаблицаСоставляющих.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаСоставляющей Из НайденныеСтрокиСоставляющих Цикл
			СтрокаСоставляющей.Значение = РассчитатьСоставляющуюПоФормуле(ТаблицаСоставляющих, СтрокаСоставляющей.СоставляющаяРасчета, СтрокаСоставляющей.ФормулаРасчета);
		КонецЦикла;
		
		Если  ПараметрыРасчета <> Неопределено
			И ПараметрыРасчета.Свойство("ФормулаРасчета")
			Тогда
			ФормулаРасчета = ПараметрыРасчета.ФормулаРасчета;
		Иначе
			ФормулаРасчета = Составляющая.ФормулаРасчета;
		КонецЕсли;
		
		Возврат РассчитатьСоставляющуюПоФормуле(ТаблицаСоставляющих, Составляющая, ФормулаРасчета);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПустуюТаблицуСоставляющих() Экспорт
	
	ТаблицаСоставляющих = Новый ТаблицаЗначений;
	ТаблицаСоставляющих.Колонки.Добавить("СоставляющаяРасчета",        Новый ОписаниеТипов("СправочникСсылка.Scan_СоставляющиеРасчетаЦеныПродуктов"));
	ТаблицаСоставляющих.Колонки.Добавить("Идентификатор",              Новый ОписаниеТипов("Строка"));
	ТаблицаСоставляющих.Колонки.Добавить("ВариантФормированияРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.Scan_ВариантыФормированияРасчетаСоставляющихЦены"));
	ТаблицаСоставляющих.Колонки.Добавить("ФормулаРасчета",             Новый ОписаниеТипов("Строка"));
	ТаблицаСоставляющих.Колонки.Добавить("Значение",                   Новый ОписаниеТипов("Число"));
	ТаблицаСоставляющих.Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	ТаблицаСоставляющих.Колонки.Добавить("НомерСтрокиКалькуляции",     Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаСоставляющих;
	
КонецФункции

Функция ПолучитьНерасчетныеСоставляющиеИКоэффициенты(ПараметрыРасчета = Неопределено) Экспорт
	
	НерасчетныеСоставляющие = Неопределено;
	
	Если  ПараметрыРасчета <> Неопределено
		И ПараметрыРасчета.Свойство("НерасчетныеСоставляющие", НерасчетныеСоставляющие)
		И ТипЗнч(НерасчетныеСоставляющие) = Тип("ТаблицаЗначений")
		Тогда
		Возврат НерасчетныеСоставляющие;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК СоставляющаяРасчета,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор КАК Идентификатор,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ВариантФормированияРасчета КАК ВариантФормированияРасчета,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ФормулаРасчета КАК ФормулаРасчета,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ЗначениеПоУмолчанию КАК Значение,
	|	0 КАК Порядок,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции
	|ИЗ
	|	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
	|ГДЕ
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ВариантФормированияРасчета = ЗНАЧЕНИЕ(Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.ВводитсяВручную)
	|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.НеИспользуется
	|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ПометкаУдаления
	|	И НЕ Scan_СоставляющиеРасчетаЦеныПродуктов.ЭтоГруппа";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСоставляющиеСоставляющей(Составляющая, ПараметрыРасчета = Неопределено, Уровень = 9999) Экспорт
	
	Если  ПараметрыРасчета <> Неопределено
		И ПараметрыРасчета.Свойство("ФормулаРасчета")
		Тогда
		ФормулаРасчета = ПараметрыРасчета.ФормулаРасчета;
	Иначе
		ФормулаРасчета = Составляющая.ФормулаРасчета;
	КонецЕсли;
	
	ИдентификаторыСоставляющих = ИдентификаторыСоставляющихФормулы(ФормулаРасчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыСоставляющих", ИдентификаторыСоставляющих);
	Запрос.УстановитьПараметр("Уровень",                    Уровень);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Ссылка КАК СоставляющаяРасчета,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор КАК Идентификатор,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ВариантФормированияРасчета КАК ВариантФормированияРасчета,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ФормулаРасчета КАК ФормулаРасчета,
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.ЗначениеПоУмолчанию КАК Значение,
	|	&Уровень КАК Порядок,
	|   Scan_СоставляющиеРасчетаЦеныПродуктов.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции
	|ИЗ
	|	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК Scan_СоставляющиеРасчетаЦеныПродуктов
	|ГДЕ
	|	Scan_СоставляющиеРасчетаЦеныПродуктов.Идентификатор В(&ИдентификаторыСоставляющих)";
	
	СоставляющиеСоставляющей = Запрос.Выполнить().Выгрузить();
	
	Если  ПараметрыРасчета <> Неопределено
		И ПараметрыРасчета.Свойство("ЗаданныеСоставляющие")
		Тогда
		ЗаданныеСоставляющие = ПараметрыРасчета.ЗаданныеСоставляющие;
	Иначе
		ЗаданныеСоставляющие = Неопределено;
	КонецЕсли;
	
	Для Каждого СоставляющаяСоставляющей Из СоставляющиеСоставляющей Цикл
		Если ЗаданныеСоставляющие <> Неопределено Тогда
			НайденнаяСтрока = ЗаданныеСоставляющие.Найти(СоставляющаяСоставляющей.СоставляющаяРасчета, "СоставляющаяРасчета");
			Если НайденнаяСтрока <> Неопределено Тогда
				СоставляющаяСоставляющей.ФормулаРасчета = НайденнаяСтрока.ФормулаРасчета;
				СоставляющаяСоставляющей.Значение       = НайденнаяСтрока.Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если СоставляющаяСоставляющей.ВариантФормированияРасчета = ПредопределенноеЗначение("Перечисление.Scan_ВариантыФормированияРасчетаСоставляющихЦены.РассчитываетсяПоФормуле") Тогда
			Уровень = Уровень - 1;
			
			ИдентификаторыСоставляющих = ИдентификаторыСоставляющихФормулы(СоставляющаяСоставляющей.ФормулаРасчета);
			Запрос.УстановитьПараметр("ИдентификаторыСоставляющих" , ИдентификаторыСоставляющих);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СоставляющиеСоставляющей.Найти(Выборка.СоставляющаяРасчета) = Неопределено Тогда
					НоваяСтрока = СоставляющиеСоставляющей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Порядок = Уровень;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СоставляющиеСоставляющей.Найти(СоставляющаяСоставляющей.СоставляющаяРасчета) = Неопределено Тогда
				НоваяСтрока = СоставляющиеСоставляющей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставляющаяСоставляющей);
				НоваяСтрока.Порядок = Уровень;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоставляющиеСоставляющей;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормуламиСоставляющих

Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина, НедопустимыеСоставляющие = Неопределено) Экспорт
	
	Отказ = Ложь;	
	
	ПараметрыВыполнения = Неопределено;
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		Если Не ПроверятьФормулу Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Формула не заполнена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Получим  из формулы идентификаторы используемых составляющих.
	ИдентификаторыСоставляющихФормулы = ИдентификаторыСоставляющихФормулы(Формула);
	
	// Проверим существование составляющих.
	СоставляющиеФормулы = СоставляющиеПоИдентификаторам(ИдентификаторыСоставляющихФормулы);
	Если СоставляющиеФормулы = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
		
	ФормулаДляВыполнения = ФормулаДляВыполнения(Формула, ИдентификаторыСоставляющихФормулы);
	
	// Проверим правильность составления формулы.
	Если ПроверятьФормулу Тогда
		ПроверкаДопустимостиИспользованияСоставляющих(СоставляющиеФормулы, НедопустимыеСоставляющие, Отказ);	
		ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыСоставляющихФормулы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	Возврат Новый Структура("ФормулаДляВыполнения, СоставляющиеФормулы", ФормулаДляВыполнения, СоставляющиеФормулы) 
	
КонецФункции

Функция ИдентификаторыСоставляющихФормулы(Формула)
	
	ИдентификаторыСоставляющих = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>()," + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT");
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово.
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		// Это должна быть составляющая
		ИдентификаторыСоставляющих.Добавить(Слово);
	КонецЦикла;
	
	Возврат ИдентификаторыСоставляющих;
	
КонецФункции

Функция СоставляющиеПоИдентификаторам(ИдентификаторыСоставляющих)
	
	Отказ = Ложь;
	
	МассивСоставляющих = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыСоставляющих Цикл
		// Это должна быть составляющая
		ТекСоставляющая = СоставляющаяПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(ТекСоставляющая) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти составляющую расчета по идентификатору %1'"), Идентификатор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить;
		КонецЕсли;
		МассивСоставляющих.Добавить(ТекСоставляющая);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено
	Иначе	
		Возврат МассивСоставляющих
	КонецЕсли;
	
КонецФункции

Функция ФормулаДляВыполнения(Формула, ИдентификаторыСоставляющих)
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыСоставляющих);
			ФормулаДляВыполнения = ФормулаДляВыполнения + Сред(Формула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыСоставляющих);
	Возврат ФормулаДляВыполнения
КонецФункции

Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыСоставляющих)
	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		Если ИдентификаторыСоставляющих.Найти(Слово) <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + Слово;
		Иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаДопустимостиИспользованияСоставляющих(СоставляющиеФормулы, НедопустимыеСоставляющие, Отказ)
	
	Если НедопустимыеСоставляющие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СоставляющаяФормулы Из СоставляющиеФормулы Цикл
		Если НедопустимыеСоставляющие.Найти(СоставляющаяФормулы) <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Использование составляющей %1 в этой формуле расчета недопустимо.'"),
			ИдентификаторСоставляющей(СоставляющаяФормулы));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыСоставляющих, Отказ = Ложь)
	
	// Подготовим структуру для выполнения формулы.
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для каждого Составляющая Из ИдентификаторыСоставляющих Цикл
		ИсходныеДанные.Вставить(Составляющая, ГСЧ.СлучайноеЧисло(1));
	КонецЦикла;
	
	Попытка 
		Результат = Вычислить(ФормулаДляВыполнения);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru = 'При проверке вычисления по формуле возникла ошибка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецПопытки
	
КонецПроцедуры

Функция ИдентификаторСоставляющей(Составляющая) Экспорт
	
	Если Не ЗначениеЗаполнено(Составляющая) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Составляющая, "Идентификатор");
	
КонецФункции

Функция СоставляющаяПоИдентификатору(Идентификатор) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СоставляющиеРасчетаЦеныПродуктов.Ссылка
	|ИЗ
	|	Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов КАК СоставляющиеРасчетаЦеныПродуктов
	|ГДЕ
	|	СоставляющиеРасчетаЦеныПродуктов.Идентификатор = &Идентификатор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РассчитатьСоставляющуюПоФормуле(ТаблицаСоставляющих, Составляющая, Знач ФормулаРасчета) Экспорт
	
	ФормулаДляПредставления = ФормулаРасчета;
	
	ИдентификаторыСоставляющихФормулы = ИдентификаторыСоставляющихФормулы(ФормулаРасчета);
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор");
	ТаблицаИдентификаторов.Колонки.Добавить("Длина");
	
	Для Каждого Идентификатор Из ИдентификаторыСоставляющихФормулы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
		НоваяСтрока.Длина         = СтрДлина(Идентификатор);
	КонецЦикла;
	
	ТаблицаИдентификаторов.Сортировать("Длина Убыв");
	
	Для Каждого СтрокаИдентификатора Из ТаблицаИдентификаторов Цикл
		Идентификатор = СтрокаИдентификатора.Идентификатор;
		
		СтрокаСоставляющих = ТаблицаСоставляющих.Найти(Идентификатор, "Идентификатор");
		
		Если СтрокаСоставляющих = Неопределено Тогда
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, Идентификатор, 0); 
		Иначе
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, Идентификатор, Формат(СтрокаСоставляющих.Значение,"ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=0"));//rarus vikhle 15.12.2020 mt 16977 добавил формат
		КонецЕсли;
	КонецЦикла;
	
	ФормулаРасчета = СтрЗаменить(ФормулаРасчета, Символы.НПП, "");
	ФормулаРасчета = СтрЗаменить(ФормулаРасчета, ",", ".");
	
	Попытка 
		Возврат Вычислить(ФормулаРасчета);
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

Функция РазделыКалькуляцииВРаботе() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Scan_СпецификацияСтандартнойМодели.ИспользуетсяВРазделеКалькуляции КАК Раздел
	|ИЗ
	|	Документ.Scan_СпецификацияСтандартнойМодели КАК Scan_СпецификацияСтандартнойМодели
	|ГДЕ
	|	Scan_СпецификацияСтандартнойМодели.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Раздел");
	
КонецФункции

Функция ДатаСоответствуетPartPeriod(Дата, PartPeriod) Экспорт
	
	PartPeriodБезПробелов = СтрЗаменить(PartPeriod, " ", "");
	
	ПриведеннаяДата       = НачалоМесяца(Дата);
	Попытка
		ПриведенныйPartPeriod = Дата(2000 + Число(Лев(PartPeriodБезПробелов, 2)), Число(Сред(PartPeriodБезПробелов, 3, 2)), 1);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	ИнтервалPartPeriod = Константы.Scan_ИнтервалPartPeriod.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПриведеннаяДата",       ПриведеннаяДата);
	Запрос.УстановитьПараметр("ПриведенныйPartPeriod", ПриведенныйPartPeriod);
	Запрос.УстановитьПараметр("ИнтервалPartPeriod",    ИнтервалPartPeriod);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИСТИНА
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(&ПриведеннаяДата, &ПриведенныйPartPeriod, МЕСЯЦ) > 0
	|				ТОГДА РАЗНОСТЬДАТ(&ПриведеннаяДата, &ПриведенныйPartPeriod, МЕСЯЦ)
	|			КОГДА РАЗНОСТЬДАТ(&ПриведеннаяДата, &ПриведенныйPartPeriod, МЕСЯЦ) < 0
	|				ТОГДА -1 * РАЗНОСТЬДАТ(&ПриведеннаяДата, &ПриведенныйPartPeriod, МЕСЯЦ)
	|			ИНАЧЕ 0
	|		КОНЕЦ > &ИнтервалPartPeriod";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти