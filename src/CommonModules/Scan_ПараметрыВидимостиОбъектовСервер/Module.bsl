
Процедура ОбработкаПараметровВидимости(Форма) Экспорт
	
	ИмяФормыМассив      = СтрРазделить(Форма.ИмяФормы, ".", Ложь);
	ПолноеИмяМетаданных = ИмяФормыМассив[0] + "." + ИмяФормыМассив[1];
	
	ТаблицаЭлементов       = Неопределено;
	РолиИсполнителя        = Неопределено;
	ТипСоглашенияОПоставке = Неопределено;
	Статус                 = Неопределено;
	ХозОперация            = Неопределено;
	
	Форма.Объект.Свойство("ТипСоглашенияОПоставке", ТипСоглашенияОПоставке);
	Форма.Объект.Свойство("Статус",                 Статус);
	Форма.Объект.Свойство("ХозОперация",            ХозОперация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаЭлементов = ПолучитьТаблицуЭлементовОбъектаНастройки(ПолноеИмяМетаданных, ТипСоглашенияОПоставке); //rarus vikhle 12.08.2021 mt 17834 + ТипСоглашенияОПоставке
	РолиИсполнителя  = ПолучитьРолиИсполнителяПользователя();
	
	ПараметрыВидимостиОбъекта = ПолучитьПараметрыВидимостиОбъекта(ИмяФормыМассив[1], ТаблицаЭлементов, РолиИсполнителя, ТипСоглашенияОПоставке, Статус, ХозОперация);
	
	УстановитьВидимостьДоступностьЭлементовФормы(Форма, ПараметрыВидимостиОбъекта);
	
КонецПроцедуры

Функция ПолучитьТаблицуЭлементовОбъектаНастройки(ИмяМетаданных, ТипЗаявки) Экспорт //rarus vikhle 12.08.2021 mt 17834 + ТипЗаявки
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	
	//rarus vikhle 12.08.2021 mt 17834 +++
	Если ТипЗаявки = Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU Тогда
		СтрокаМетода = ".ПолучитьСписокЭлементовДляНастройки(ТипЗаявки)";
	Иначе	
		СтрокаМетода = ".ПолучитьСписокЭлементовДляНастройки()";
	КонецЕсли;	
	//СтрокаВыполнения = "ТаблицаЭлементов = "+ИмяМетаданных+".ПолучитьСписокЭлементовДляНастройки()";
	//rarus vikhle 12.08.2021 mt 17834 ---
	СтрокаВыполнения = "ТаблицаЭлементов = "+ИмяМетаданных+СтрокаМетода;
	СтрокаВыполнения = СтрЗаменить(СтрокаВыполнения, "Справочник", "Справочники");
	СтрокаВыполнения = СтрЗаменить(СтрокаВыполнения, "Документ",   "Документы");
	СтрокаВыполнения = СтрЗаменить(СтрокаВыполнения, "Обработка",  "Обработки");
	
	Выполнить(СтрокаВыполнения);
	
	Возврат ТаблицаЭлементов;
	
КонецФункции

Функция ПолучитьПараметрыВидимостиОбъекта(ОбъектНастройки, ТаблицаЭлементов, РолиИсполнителя = Неопределено, ТипСоглашенияОПоставке = Неопределено, Статус = Неопределено, ХозОперация = Неопределено) Экспорт
	
	Если РолиИсполнителя = Неопределено Тогда
		РолиИсполнителя = ПолучитьРолиИсполнителяПользователя();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЭлементов", ТаблицаЭлементов);
	Запрос.УстановитьПараметр("ОбъектНастройки",  ОбъектНастройки);
	Запрос.УстановитьПараметр("РолиИсполнителя",  РолиИсполнителя);
	Если ЗначениеЗаполнено(ТипСоглашенияОПоставке) Тогда
		Запрос.УстановитьПараметр("ТипСоглашенияОПоставке", ТипСоглашенияОПоставке);
	КонецЕсли;
	Если ЗначениеЗаполнено(Статус) Тогда
		Запрос.УстановитьПараметр("Статус", Статус);
	КонецЕсли;
	Если ЗначениеЗаполнено(ХозОперация) Тогда
		Запрос.УстановитьПараметр("ХозОперация", ХозОперация);
	КонецЕсли;
	Запрос.Текст ="ВЫБРАТЬ
	|	ТаблицаЭлементов.ИмяЭлемента КАК ИмяЭлемента
	|ПОМЕСТИТЬ ВТ_ТаблицаЭлементов
	|ИЗ
	|	&ТаблицаЭлементов КАК ТаблицаЭлементов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Scan_ПараметрыВидимостиОбъектов.ИмяЭлемента КАК ИмяЭлемента,
	|	Scan_ПараметрыВидимостиОбъектов.Видимость КАК Видимость,
	|	Scan_ПараметрыВидимостиОбъектов.Доступность КАК Доступность
	|ПОМЕСТИТЬ ВТ_СохраненныеНастройки
	|ИЗ
	|	РегистрСведений.Scan_ПараметрыВидимостиОбъектов КАК Scan_ПараметрыВидимостиОбъектов
	|ГДЕ
	|	Scan_ПараметрыВидимостиОбъектов.ОбъектНастройки = &ОбъектНастройки
	|	И Scan_ПараметрыВидимостиОбъектов.РольИсполнителя В (&РолиИсполнителя)
	|"+?(ЗначениеЗаполнено(ТипСоглашенияОПоставке)," И Scan_ПараметрыВидимостиОбъектов.ТипСоглашенияОПоставке = &ТипСоглашенияОПоставке", "")+"
	|"+?(ЗначениеЗаполнено(Статус),                " И Scan_ПараметрыВидимостиОбъектов.Статус = &Статус", "")+"
	|"+?(ЗначениеЗаполнено(ХозОперация),           " И Scan_ПараметрыВидимостиОбъектов.ХозОперация = &ХозОперация", "")+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЭлементов.ИмяЭлемента КАК ИмяЭлемента,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_СохраненныеНастройки.Видимость, ЛОЖЬ)) КАК Видимость,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_СохраненныеНастройки.Доступность, ЛОЖЬ)) КАК Доступность
	|ИЗ
	|	ВТ_ТаблицаЭлементов КАК ВТ_ТаблицаЭлементов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СохраненныеНастройки КАК ВТ_СохраненныеНастройки
	|		ПО ВТ_ТаблицаЭлементов.ИмяЭлемента = ВТ_СохраненныеНастройки.ИмяЭлемента
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаЭлементов.ИмяЭлемента";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьРолиИсполнителяПользователя(Пользователь = Неопределено) Экспорт
	
	РолиИсполнителя = Новый Массив;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Пользователь";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			РолиИсполнителя.Добавить(Выборка.РольИсполнителя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РолиИсполнителя;
	
КонецФункции

Процедура УстановитьВидимостьДоступностьЭлементовФормы(Форма, Параметры) Экспорт
	
	Выборка = Параметры.Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныйЭлемент = Форма.Элементы.Найти(Выборка.ИмяЭлемента);
		Если НайденныйЭлемент <> Неопределено Тогда
			Форма.Элементы[Выборка.ИмяЭлемента].Видимость = Выборка.Видимость;
			Если    ТипЗнч(Форма.Элементы[Выборка.ИмяЭлемента]) = Тип("КнопкаФормы")
				//Или ТипЗнч(Форма.Элементы[Выборка.ИмяЭлемента]) = Тип("ГруппаФормы") //rarus ozhnik 15888 27.08.2020 + для групп устанавливать "только просмотр"
				ИЛИ (ТипЗнч(Форма.Элементы[Выборка.ИмяЭлемента]) = Тип("ГруппаФормы") И Форма.Элементы[Выборка.ИмяЭлемента].Вид = ВидГруппыФормы.ГруппаКнопок) //rarus vikhle 31.08.2020 mt 16181  
				ИЛИ (ТипЗнч(Форма.Элементы[Выборка.ИмяЭлемента]) = Тип("ГруппаФормы") И Форма.Элементы[Выборка.ИмяЭлемента].Вид = ВидГруппыФормы.Подменю) //rarus vikhle 03.12.2020 mt 16892
				Или ТипЗнч(Форма.Элементы[Выборка.ИмяЭлемента]) = Тип("ДекорацияФормы")
				Тогда
				Форма.Элементы[Выборка.ИмяЭлемента].Доступность = Выборка.Доступность;
			Иначе
				Форма.Элементы[Выборка.ИмяЭлемента].ТолькоПросмотр = Не Выборка.Доступность;
			КонецЕсли;
		Иначе
			ВывестиСообщениеПол("Не найден элемент формы с именем %1. Обратитесь к администратору",,,,,Выборка.ИмяЭлемента);
			Форма.Элементы.ГруппаФон.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Функция ЗагрузитьПараметрыИзФайлаВХранилище(АдресФайлаВХранилище, ЗамещатьРучноеИзменение = Ложь) Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Scan_ПараметрыВидимостиОбъектов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ЕстьОшибки = Ложь;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	НаборЗаписейПараметрыВидимостиОбъектов = РегистрыСведений.Scan_ПараметрыВидимостиОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейПараметрыВидимостиОбъектов.Прочитать();
	
	УстановленныеПараметры = НаборЗаписейПараметрыВидимостиОбъектов.Выгрузить();
	
	НаборЗаписейПараметрыВидимостиОбъектов.Очистить();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ПостроительDOM = Новый ПостроительDOM;
	
	Попытка
		Документ = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Если Не ЕстьОшибки Тогда
		Для Каждого ДочернийУзел Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
			Если ДочернийУзел.ИмяУзла = "Запись" Тогда
				ЗаписьПараметров = ДочернийУзел;
				
				рОбъектНастройки        = Неопределено;
				рРольИсполнителя        = Неопределено;
				рТипСоглашенияОПоставке = Неопределено;
				рСтатус                 = Неопределено;
				рИмяЭлемента            = Неопределено;
				рХозОперация            = Неопределено;
				рВидимость              = Неопределено;
				рДоступность            = Неопределено;
				
				СтруктураИзмерений = Новый Структура;
				
				ОбъектНастройкиАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("ОбъектНастройки");
				Если ОбъектНастройкиАтрибут <> Неопределено Тогда
					рОбъектНастройки = ОбъектНастройкиАтрибут.Значение;
					СтруктураИзмерений.Вставить("ОбъектНастройки", рОбъектНастройки);
				КонецЕсли;
				
				РольИсполнителяАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("РольИсполнителя");
				Если РольИсполнителяАтрибут <> Неопределено Тогда
					РольИсполнителяСтрокой = РольИсполнителяАтрибут.Значение;
					Если ЗначениеЗаполнено(РольИсполнителяСтрокой) Тогда
						рРольИсполнителя = Справочники.РолиИсполнителей.НайтиПоНаименованию(СокрЛП(РольИсполнителяСтрокой), Истина);
						
						Если рРольИсполнителя.Пустая() Тогда
							РольИсполнителяОбъект = Справочники.РолиИсполнителей.СоздатьЭлемент();
							РольИсполнителяОбъект.Наименование = СокрЛП(РольИсполнителяСтрокой);
							РольИсполнителяОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
							РольИсполнителяОбъект.Записать();
							
							рРольИсполнителя = РольИсполнителяОбъект.Ссылка;
						КонецЕсли;
						СтруктураИзмерений.Вставить("РольИсполнителя", рРольИсполнителя);
					Иначе
						рРольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
				
				ТипСоглашенияОПоставкеАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("ТипСоглашенияОПоставке");
				Если ТипСоглашенияОПоставкеАтрибут <> Неопределено Тогда
					ТипСоглашенияОПоставкеСтрокой = ТипСоглашенияОПоставкеАтрибут.Значение;
					Если ЗначениеЗаполнено(ТипСоглашенияОПоставкеСтрокой) Тогда
						Попытка
							рТипСоглашенияОПоставке = Перечисления.Scan_ТипыСоглашенийОПоставке[СокрЛП(ТипСоглашенияОПоставкеСтрокой)];
							СтруктураИзмерений.Вставить("ТипСоглашенияОПоставке", рТипСоглашенияОПоставке);
						Исключение
							Перечисления.Scan_ТипыСоглашенийОПоставке.ПустаяСсылка();
						КонецПопытки;
					Иначе
						рТипСоглашенияОПоставке = Перечисления.Scan_ТипыСоглашенийОПоставке.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
				
				СтатусАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("Статус");
				Если СтатусАтрибут <> Неопределено Тогда
					СтатусСтрокой = СокрЛП(СтатусАтрибут.Значение);
					Если СтатусСтрокой <> "" Тогда
						Если    рОбъектНастройки = "Scan_СоглашенияОПоставке"
							Или рОбъектНастройки = "Scan_СпециальныеУсловия"
							Тогда
							Попытка
								рСтатус = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий."+СтатусСтрокой);
							Исключение
								ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Нстр("ru = 'Не найден статус соглашений о поставке и специальных условий %1.'"), СтатусСтрокой));
							КонецПопытки;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НайтиПоНаименованию(СтатусСтрокой, Истина);
							КонецЕсли;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.ПустаяСсылка();
							КонецЕсли;
							СтруктураИзмерений.Вставить("Статус", рСтатус);
						ИначеЕсли рОбъектНастройки = "Scan_Калькуляция" Тогда
							Попытка
								рСтатус = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Scan_СтатусыКалькуляций."+СтатусСтрокой);
							Исключение
								ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Нстр("ru = 'Не найден статус калькуляции %1.'"), СтатусСтрокой));
							КонецПопытки;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыКалькуляций.НайтиПоНаименованию(СтатусСтрокой, Истина);
							КонецЕсли;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыКалькуляций.ПустаяСсылка();
							КонецЕсли;
							СтруктураИзмерений.Вставить("Статус", рСтатус);
						ИначеЕсли рОбъектНастройки = "Scan_ЗаявкаНаОтгрузку" Тогда
							Попытка
								рСтатус = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Scan_СтатусыЗаявокНаОтгрузку."+СтатусСтрокой);
							Исключение
								ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Нстр("ru = 'Не найден статус заявки на отгрузку %1.'"), СтатусСтрокой));
							КонецПопытки;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыЗаявокНаОтгрузку.НайтиПоНаименованию(СтатусСтрокой, Истина);
							КонецЕсли;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыЗаявокНаОтгрузку.ПустаяСсылка();
							КонецЕсли;
							СтруктураИзмерений.Вставить("Статус", рСтатус);
						ИначеЕсли рОбъектНастройки = "Scan_МониторБронированияОтгрузок" Тогда
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ИмяЭлементаАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("ИмяЭлемента");
				Если ИмяЭлементаАтрибут <> Неопределено Тогда
					рИмяЭлемента = ИмяЭлементаАтрибут.Значение;
					СтруктураИзмерений.Вставить("ИмяЭлемента", рИмяЭлемента);
				КонецЕсли;
				
				ХозОперацияАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("ХозОперация");
				Если ХозОперацияАтрибут <> Неопределено Тогда
					ХозОперацияСтрокой = СокрЛП(ХозОперацияАтрибут.Значение);
					Если ХозОперацияСтрокой <> "" Тогда
						Попытка
							рХозОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Scan_ХозяйственныеОперации."+ХозОперацияСтрокой);
						Исключение 
							ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Нстр("ru = 'Не найдена хозяйственная операция %1.'"), ХозОперацияСтрокой));
						КонецПопытки;
						
						Если рХозОперация = Неопределено Тогда
							рХозОперация = Справочники.Scan_ХозяйственныеОперации.НайтиПоНаименованию(ХозОперацияСтрокой, Истина);
						КонецЕсли;
						
						Если рХозОперация = Неопределено Тогда
							рХозОперация = Справочники.Scan_ХозяйственныеОперации.ПустаяСсылка();
						КонецЕсли;
						
						СтруктураИзмерений.Вставить("ХозОперация", рХозОперация);
					КонецЕсли;
				КонецЕсли;
				
				ВидимостьАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("Видимость");
				Если ВидимостьАтрибут <> Неопределено Тогда
					рВидимость = Булево(ВидимостьАтрибут.Значение);
				КонецЕсли;
				
				ДоступностьАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("Доступность");
				Если ДоступностьАтрибут <> Неопределено Тогда
					рДоступность = Булево(ДоступностьАтрибут.Значение);
				КонецЕсли;
				
				НайденныеПараметры = УстановленныеПараметры.НайтиСтроки(СтруктураИзмерений);
				Если НайденныеПараметры.Количество() > 0 Тогда
					СтрокаПараметров = НайденныеПараметры[0];
					Если  СтрокаПараметров.РучноеИзменение
						И ЗамещатьРучноеИзменение 
						Тогда
						НоваяЗаписьПараметров = НаборЗаписейПараметрыВидимостиОбъектов.Добавить();
						НоваяЗаписьПараметров.ОбъектНастройки        = рОбъектНастройки;
						НоваяЗаписьПараметров.РольИсполнителя        = рРольИсполнителя;
						НоваяЗаписьПараметров.ТипСоглашенияОПоставке = рТипСоглашенияОПоставке;
						НоваяЗаписьПараметров.Статус                 = рСтатус;
						НоваяЗаписьПараметров.ИмяЭлемента            = рИмяЭлемента;
						НоваяЗаписьПараметров.ХозОперация            = рХозОперация;
						НоваяЗаписьПараметров.Видимость              = рВидимость;
						НоваяЗаписьПараметров.Доступность            = рДоступность;
					Иначе
						НоваяЗаписьПараметров = НаборЗаписейПараметрыВидимостиОбъектов.Добавить();
						НоваяЗаписьПараметров.ОбъектНастройки        = СтрокаПараметров.ОбъектНастройки;
						НоваяЗаписьПараметров.РольИсполнителя        = СтрокаПараметров.РольИсполнителя;
						НоваяЗаписьПараметров.ТипСоглашенияОПоставке = СтрокаПараметров.ТипСоглашенияОПоставке;
						НоваяЗаписьПараметров.Статус                 = СтрокаПараметров.Статус;
						НоваяЗаписьПараметров.ИмяЭлемента            = СтрокаПараметров.ИмяЭлемента;
						НоваяЗаписьПараметров.ХозОперация            = СтрокаПараметров.ХозОперация;
						НоваяЗаписьПараметров.Видимость              = СтрокаПараметров.Видимость;
						НоваяЗаписьПараметров.Доступность            = СтрокаПараметров.Доступность;
						НоваяЗаписьПараметров.РучноеИзменение        = СтрокаПараметров.РучноеИзменение;
					КонецЕсли;
				Иначе
					НоваяЗаписьПараметров = НаборЗаписейПараметрыВидимостиОбъектов.Добавить();
					НоваяЗаписьПараметров.ОбъектНастройки        = рОбъектНастройки;
					НоваяЗаписьПараметров.РольИсполнителя        = рРольИсполнителя;
					НоваяЗаписьПараметров.ТипСоглашенияОПоставке = рТипСоглашенияОПоставке;
					НоваяЗаписьПараметров.Статус                 = рСтатус;
					НоваяЗаписьПараметров.ИмяЭлемента            = рИмяЭлемента;
					НоваяЗаписьПараметров.ХозОперация            = рХозОперация;
					НоваяЗаписьПараметров.Видимость              = рВидимость;
					НоваяЗаписьПараметров.Доступность            = рДоступность;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		Попытка
			НаборЗаписейПараметрыВидимостиОбъектов.Записать();
		Исключение
			ЕстьОшибки = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
		
		НаборЗаписейПараметрыВидимостиОбъектов.Загрузить(УстановленныеПараметры);
		НаборЗаписейПараметрыВидимостиОбъектов.Записать();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция ПоместитьПараметрыВФайлВХранилище(СохранятьПоОтбору = Ложь, ПараметрыОтбора = Неопределено) Экспорт //rarus agar 25.08.2020  16181 ++
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Scan_ПараметрыВидимостиОбъектов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПараметрыВидимостиОбъектов");
	
	//rarus agar 25.08.2020  16181 ++
	Если  СохранятьПоОтбору
		И ПараметрыОтбора <> Неопределено
		Тогда
		НаборЗаписей = РегистрыСведений.Scan_ПараметрыВидимостиОбъектов.СоздатьНаборЗаписей();
		Если ПараметрыОтбора.Свойство("ОбъектНастройки") Тогда
			НаборЗаписей.Отбор.ОбъектНастройки.Установить(ПараметрыОтбора.ОбъектНастройки);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("РольИсполнителя") Тогда
			НаборЗаписей.Отбор.РольИсполнителя.Установить(ПараметрыОтбора.РольИсполнителя);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипСоглашенияОПоставке") Тогда
			НаборЗаписей.Отбор.ТипСоглашенияОПоставке.Установить(ПараметрыОтбора.ТипСоглашенияОПоставке);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Статус") Тогда
			НаборЗаписей.Отбор.Статус.Установить(ПараметрыОтбора.Статус);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ХозОперация") Тогда
			НаборЗаписей.Отбор.ХозОперация.Установить(ПараметрыОтбора.ХозОперация);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ИмяЭлемента") Тогда
			НаборЗаписей.Отбор.ИмяЭлемента.Установить(ПараметрыОтбора.ИмяЭлемента);
		КонецЕсли;
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Запись");
			
			ЗаписьXML.ЗаписатьАтрибут("ОбъектНастройки",        XMLСтрока(ЗаписьНабора.ОбъектНастройки));
			ЗаписьXML.ЗаписатьАтрибут("РольИсполнителя",        XMLСтрока(ЗаписьНабора.РольИсполнителя.Наименование));
			ЗаписьXML.ЗаписатьАтрибут("ТипСоглашенияОПоставке", XMLСтрока(ЗаписьНабора.ТипСоглашенияОПоставке));
			Если ЗначениеЗаполнено(ЗаписьНабора.Статус) Тогда
				Если ЗначениеЗаполнено(ЗаписьНабора.Статус.ИмяПредопределенныхДанных) Тогда
					ЗаписьXML.ЗаписатьАтрибут("Статус",         XMLСтрока(ЗаписьНабора.Статус.ИмяПредопределенныхДанных));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("Статус",         XMLСтрока(ЗаписьНабора.Статус.Наименование));
				КонецЕсли;
			Иначе
				ЗаписьXML.ЗаписатьАтрибут("Статус",             XMLСтрока(""));
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("ИмяЭлемента",            XMLСтрока(ЗаписьНабора.ИмяЭлемента));
			Если ЗначениеЗаполнено(ЗаписьНабора.ХозОперация) Тогда
				Если ЗначениеЗаполнено(ЗаписьНабора.ХозОперация.ИмяПредопределенныхДанных) Тогда
					ЗаписьXML.ЗаписатьАтрибут("ХозОперация",    XMLСтрока(ЗаписьНабора.ХозОперация.ИмяПредопределенныхДанных));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("ХозОперация",    XMLСтрока(ЗаписьНабора.ХозОперация.Наименование));
				КонецЕсли;
			Иначе
				ЗаписьXML.ЗаписатьАтрибут("ХозОперация",        XMLСтрока(""));
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("Видимость",              XMLСтрока(ЗаписьНабора.Видимость));
			ЗаписьXML.ЗаписатьАтрибут("Доступность",            XMLСтрока(ЗаписьНабора.Доступность));
			ЗаписьXML.ЗаписатьАтрибут("РучноеИзменение",        XMLСтрока(ЗаписьНабора.РучноеИзменение));
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Запись
		КонецЦикла;
	Иначе
		Выборка = РегистрыСведений.Scan_ПараметрыВидимостиОбъектов.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Запись");
			
			ЗаписьXML.ЗаписатьАтрибут("ОбъектНастройки",        XMLСтрока(Выборка.ОбъектНастройки));
			ЗаписьXML.ЗаписатьАтрибут("РольИсполнителя",        XMLСтрока(Выборка.РольИсполнителя.Наименование));
			ЗаписьXML.ЗаписатьАтрибут("ТипСоглашенияОПоставке", XMLСтрока(Выборка.ТипСоглашенияОПоставке));
			Если ЗначениеЗаполнено(Выборка.Статус) Тогда
				Если ЗначениеЗаполнено(Выборка.Статус.ИмяПредопределенныхДанных) Тогда
					ЗаписьXML.ЗаписатьАтрибут("Статус",         XMLСтрока(Выборка.Статус.ИмяПредопределенныхДанных));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("Статус",         XMLСтрока(Выборка.Статус.Наименование));
				КонецЕсли;
			Иначе
				ЗаписьXML.ЗаписатьАтрибут("Статус",             XMLСтрока(""));
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("ИмяЭлемента",            XMLСтрока(Выборка.ИмяЭлемента));
			Если ЗначениеЗаполнено(Выборка.ХозОперация) Тогда
				Если ЗначениеЗаполнено(Выборка.ХозОперация.ИмяПредопределенныхДанных) Тогда
					ЗаписьXML.ЗаписатьАтрибут("ХозОперация",        XMLСтрока(Выборка.ХозОперация.ИмяПредопределенныхДанных));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("ХозОперация",        XMLСтрока(Выборка.ХозОперация.Наименование));
				КонецЕсли;
			Иначе
				ЗаписьXML.ЗаписатьАтрибут("ХозОперация",             XMLСтрока(""));
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("Видимость",              XMLСтрока(Выборка.Видимость));
			ЗаписьXML.ЗаписатьАтрибут("Доступность",            XMLСтрока(Выборка.Доступность));
			ЗаписьXML.ЗаписатьАтрибут("РучноеИзменение",        XMLСтрока(Выборка.РучноеИзменение));
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Запись
		КонецЦикла;
	КонецЕсли;
	//rarus agar 25.08.2020  16181 --
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ПараметрыВидимостиОбъектов
	
	ЗаписьXML.Закрыть();
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ЗафиксироватьТранзакцию();
	
	Возврат АдресВХранилище;
	
КонецФункции

//rarus agar 25.08.2020  16181 ++
Функция ЗагрузитьПараметрыЧастичноИзФайлаВХранилище(АдресФайлаВХранилище, ЗамещатьРучноеИзменение = Ложь) Экспорт
	
	ЕстьОшибки = Ложь;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ПостроительDOM = Новый ПостроительDOM;
	
	Попытка
		Документ = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Если Не ЕстьОшибки Тогда
		Для Каждого ДочернийУзел Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
			Если ДочернийУзел.ИмяУзла = "Запись" Тогда
				ЗаписьПараметров = ДочернийУзел;
				
				рОбъектНастройки        = Неопределено;
				рРольИсполнителя        = Неопределено;
				рТипСоглашенияОПоставке = Неопределено;
				рСтатус                 = Неопределено;
				рИмяЭлемента            = Неопределено;
				рХозОперация            = Неопределено;
				рВидимость              = Неопределено;
				рДоступность            = Неопределено;
				
				ОбъектНастройкиАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("ОбъектНастройки");
				Если ОбъектНастройкиАтрибут <> Неопределено Тогда
					рОбъектНастройки = ОбъектНастройкиАтрибут.Значение;
				КонецЕсли;
				
				РольИсполнителяАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("РольИсполнителя");
				Если РольИсполнителяАтрибут <> Неопределено Тогда
					РольИсполнителяСтрокой = РольИсполнителяАтрибут.Значение;
					Если ЗначениеЗаполнено(РольИсполнителяСтрокой) Тогда
						рРольИсполнителя = Справочники.РолиИсполнителей.НайтиПоНаименованию(СокрЛП(РольИсполнителяСтрокой), Истина);
						
						Если рРольИсполнителя.Пустая() Тогда
							РольИсполнителяОбъект = Справочники.РолиИсполнителей.СоздатьЭлемент();
							РольИсполнителяОбъект.Наименование = СокрЛП(РольИсполнителяСтрокой);
							РольИсполнителяОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
							РольИсполнителяОбъект.Записать();
							
							рРольИсполнителя = РольИсполнителяОбъект.Ссылка;
						КонецЕсли;
					Иначе
						рРольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
				
				ТипСоглашенияОПоставкеАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("ТипСоглашенияОПоставке");
				Если ТипСоглашенияОПоставкеАтрибут <> Неопределено Тогда
					ТипСоглашенияОПоставкеСтрокой = ТипСоглашенияОПоставкеАтрибут.Значение;
					Если ЗначениеЗаполнено(ТипСоглашенияОПоставкеСтрокой) Тогда
						Попытка
							рТипСоглашенияОПоставке = Перечисления.Scan_ТипыСоглашенийОПоставке[СокрЛП(ТипСоглашенияОПоставкеСтрокой)];
						Исключение
							Перечисления.Scan_ТипыСоглашенийОПоставке.ПустаяСсылка();
						КонецПопытки;
					Иначе
						рТипСоглашенияОПоставке = Перечисления.Scan_ТипыСоглашенийОПоставке.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
				
				СтатусАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("Статус");
				Если СтатусАтрибут <> Неопределено Тогда
					СтатусСтрокой = СокрЛП(СтатусАтрибут.Значение);
					Если СтатусСтрокой <> "" Тогда
						Если    рОбъектНастройки = "Scan_СоглашенияОПоставке"
							Или рОбъектНастройки = "Scan_СпециальныеУсловия"
							Тогда
							Попытка
								рСтатус = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий."+СтатусСтрокой);
							Исключение
								ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Нстр("ru = 'Не найден статус соглашений о поставке и специальных условий %1.'"), СтатусСтрокой));
							КонецПопытки;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НайтиПоНаименованию(СтатусСтрокой, Истина);
							КонецЕсли;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.ПустаяСсылка();
							КонецЕсли;
						ИначеЕсли рОбъектНастройки = "Scan_Калькуляция" Тогда
							Попытка
								рСтатус = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Scan_СтатусыКалькуляций."+СтатусСтрокой);
							Исключение
								ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Нстр("ru = 'Не найден статус калькуляции %1.'"), СтатусСтрокой));
							КонецПопытки;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыКалькуляций.НайтиПоНаименованию(СтатусСтрокой, Истина);
							КонецЕсли;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыКалькуляций.ПустаяСсылка();
							КонецЕсли;
						ИначеЕсли рОбъектНастройки = "Scan_ЗаявкаНаОтгрузку" Тогда
							Попытка
								рСтатус = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Scan_СтатусыЗаявокНаОтгрузку."+СтатусСтрокой);
							Исключение
								ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Нстр("ru = 'Не найден статус заявки на отгрузку %1.'"), СтатусСтрокой));
							КонецПопытки;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыЗаявокНаОтгрузку.НайтиПоНаименованию(СтатусСтрокой, Истина);
							КонецЕсли;
							
							Если рСтатус = Неопределено Тогда
								рСтатус = Справочники.Scan_СтатусыЗаявокНаОтгрузку.ПустаяСсылка();
							КонецЕсли;
						ИначеЕсли рОбъектНастройки = "Scan_МониторБронированияОтгрузок" Тогда
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ИмяЭлементаАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("ИмяЭлемента");
				Если ИмяЭлементаАтрибут <> Неопределено Тогда
					рИмяЭлемента = ИмяЭлементаАтрибут.Значение;
				КонецЕсли;
				
				ХозОперацияАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("ХозОперация");
				Если ХозОперацияАтрибут <> Неопределено Тогда
					ХозОперацияСтрокой = СокрЛП(ХозОперацияАтрибут.Значение);
					Если ХозОперацияСтрокой <> "" Тогда
						Попытка
							рХозОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Scan_ХозяйственныеОперации."+ХозОперацияСтрокой);
						Исключение 
							ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Нстр("ru = 'Не найдена хозяйственная операция %1.'"), ХозОперацияСтрокой));
						КонецПопытки;
						
						Если рХозОперация = Неопределено Тогда
							рХозОперация = Справочники.Scan_ХозяйственныеОперации.НайтиПоНаименованию(ХозОперацияСтрокой, Истина);
						КонецЕсли;
						
						Если рХозОперация = Неопределено Тогда
							рХозОперация = Справочники.Scan_ХозяйственныеОперации.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ВидимостьАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("Видимость");
				Если ВидимостьАтрибут <> Неопределено Тогда
					рВидимость = Булево(ВидимостьАтрибут.Значение);
				КонецЕсли;
				
				ДоступностьАтрибут = ЗаписьПараметров.Атрибуты.ПолучитьИменованныйЭлемент("Доступность");
				Если ДоступностьАтрибут <> Неопределено Тогда
					рДоступность = Булево(ДоступностьАтрибут.Значение);
				КонецЕсли;
				
				НоваяЗаписьПараметров = РегистрыСведений.Scan_ПараметрыВидимостиОбъектов.СоздатьМенеджерЗаписи();
				НоваяЗаписьПараметров.ОбъектНастройки        = рОбъектНастройки;
				НоваяЗаписьПараметров.РольИсполнителя        = рРольИсполнителя;
				НоваяЗаписьПараметров.ТипСоглашенияОПоставке = рТипСоглашенияОПоставке;
				НоваяЗаписьПараметров.Статус                 = рСтатус;
				НоваяЗаписьПараметров.ИмяЭлемента            = рИмяЭлемента;
				НоваяЗаписьПараметров.ХозОперация            = рХозОперация;
				НоваяЗаписьПараметров.Прочитать();
				
				Если Не НоваяЗаписьПараметров.Выбран() Тогда
					НоваяЗаписьПараметров.ОбъектНастройки        = рОбъектНастройки;
					НоваяЗаписьПараметров.РольИсполнителя        = рРольИсполнителя;
					НоваяЗаписьПараметров.ТипСоглашенияОПоставке = рТипСоглашенияОПоставке;
					НоваяЗаписьПараметров.Статус                 = рСтатус;
					НоваяЗаписьПараметров.ИмяЭлемента            = рИмяЭлемента;
					НоваяЗаписьПараметров.ХозОперация            = рХозОперация;
					НоваяЗаписьПараметров.Видимость              = рВидимость;
					НоваяЗаписьПараметров.Доступность            = рДоступность;
					Попытка
						НоваяЗаписьПараметров.Записать();
					Исключение
						ЕстьОшибки = Истина;
					КонецПопытки;
				ИначеЕсли (НоваяЗаписьПараметров.РучноеИзменение И ЗамещатьРучноеИзменение)
					Или Не НоваяЗаписьПараметров.РучноеИзменение
					Тогда
					НоваяЗаписьПараметров.Видимость       = рВидимость;
					НоваяЗаписьПараметров.Доступность     = рДоступность;
					НоваяЗаписьПараметров.РучноеИзменение = Ложь;
					Попытка
						НоваяЗаписьПараметров.Записать();
					Исключение
						ЕстьОшибки = Истина;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция УдалитьПараметрыВидимостиОтсутствующихЭлементов() Экспорт
	
	ЕстьОшибки = Ложь;
	
	ЕстьОшибки = УдалитьПараметрыВидимостиОтсутствующихЭлементовПоОбъектуНастройки("Scan_СпециальныеУсловия");
	ЕстьОшибки = ЕстьОшибки И УдалитьПараметрыВидимостиОтсутствующихЭлементовПоОбъектуНастройки("Scan_СоглашенияОПоставке");
	ЕстьОшибки = ЕстьОшибки И УдалитьПараметрыВидимостиОтсутствующихЭлементовПоОбъектуНастройки("Scan_СоглашенияОПоставке", Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU); //rarus vikhle 12.08.2021 mt 17834
	ЕстьОшибки = ЕстьОшибки И УдалитьПараметрыВидимостиОтсутствующихЭлементовПоОбъектуНастройки("Scan_Калькуляция");
	ЕстьОшибки = ЕстьОшибки И УдалитьПараметрыВидимостиОтсутствующихЭлементовПоОбъектуНастройки("Scan_ЗаявкаНаОтгрузку");
	ЕстьОшибки = ЕстьОшибки И УдалитьПараметрыВидимостиОтсутствующихЭлементовПоОбъектуНастройки("Scan_МониторБронированияОтгрузок");
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция УдалитьПараметрыВидимостиОтсутствующихЭлементовПоОбъектуНастройки(ОбъектНастройки, ТипЗаявки = Неопределено) Экспорт //rarus vikhle 12.08.2021 mt 17834 + ТипЗаявки
	
	ЕстьОшибки = Ложь;
	
	//ТаблицаЭлементов = Справочники.Scan_СпециальныеУсловия.ПолучитьСписокЭлементовДляНастройки(); //rarus vikhle 12.08.2021 mt 17834 закомментировал, лишний вызов  
	
	Если ОбъектНастройки = "Scan_СоглашенияОПоставке" Тогда
		//rarus vikhle 12.08.2021 mt 17834 +++
		Если ТипЗаявки = Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU Тогда
			ТаблицаЭлементов = Справочники.Scan_СоглашенияОПоставке.ПолучитьСписокЭлементовДляНастройки(ТипЗаявки);
		Иначе	
			ТаблицаЭлементов = Справочники.Scan_СоглашенияОПоставке.ПолучитьСписокЭлементовДляНастройки();	
		КонецЕсли;	
		//rarus vikhle 12.08.2021 mt 17834 ---
	ИначеЕсли ОбъектНастройки = "Scan_Калькуляция" Тогда
		ТаблицаЭлементов = Документы.Scan_Калькуляция.ПолучитьСписокЭлементовДляНастройки();
	ИначеЕсли ОбъектНастройки = "Scan_ЗаявкаНаОтгрузку" Тогда
		ТаблицаЭлементов = Документы.Scan_ЗаявкаНаОтгрузку.ПолучитьСписокЭлементовДляНастройки();
	ИначеЕсли ОбъектНастройки = "Scan_МониторБронированияОтгрузок" Тогда
		ТаблицаЭлементов = Обработки.Scan_МониторБронированияОтгрузок.ПолучитьСписокЭлементовДляНастройки();
	ИначеЕсли ОбъектНастройки = "Scan_СпециальныеУсловия" Тогда 
		ТаблицаЭлементов = Справочники.Scan_СпециальныеУсловия.ПолучитьСписокЭлементовДляНастройки();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектНастройки", ОбъектНастройки);
	Запрос.УстановитьПараметр("ИменаЭлементов",  ТаблицаЭлементов.ВыгрузитьКолонку("ИмяЭлемента"));
	Запрос.УстановитьПараметр("ТипЗаявки",		 ТипЗаявки); //rarus vikhle 12.08.2021 mt 17834
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ПараметрыВидимостиОбъектов.ИмяЭлемента КАК ИмяЭлемента,
	|	Scan_ПараметрыВидимостиОбъектов.ТипСоглашенияОПоставке КАК ТипЗаявки //rarus vikhle 12.08.2021 mt 17834
	|ИЗ
	|	РегистрСведений.Scan_ПараметрыВидимостиОбъектов КАК Scan_ПараметрыВидимостиОбъектов
	|ГДЕ
	|	Scan_ПараметрыВидимостиОбъектов.ОбъектНастройки = &ОбъектНастройки
	|	И Scan_ПараметрыВидимостиОбъектов.ИмяЭлемента НЕ В(&ИменаЭлементов)
	//rarus vikhle 12.08.2021 mt 17834 +++
	|	И ВЫБОР
    |			КОГДА &ТипЗаявки = НЕОПРЕДЕЛЕНО
    |				ТОГДА НЕ Scan_ПараметрыВидимостиОбъектов.ТипСоглашенияОПоставке = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU) 
    |			ИНАЧЕ Scan_ПараметрыВидимостиОбъектов.ТипСоглашенияОПоставке = &ТипЗаявки
    |		КОНЕЦ";
	//rarus vikhle 12.08.2021 mt 17834 ---
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.Scan_ПараметрыВидимостиОбъектов.СоздатьНаборЗаписей();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.ОбъектНастройки.Установить(ОбъектНастройки);
		//rarus vikhle 12.08.2021 mt 17834 +++
		Если ОбъектНастройки = "Scan_СоглашенияОПоставке" Тогда
			Если ТипЗаявки = Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОПSRU Тогда
				НаборЗаписей.Отбор.ТипСоглашенияОПоставке.Установить(ТипЗаявки);	
			Иначе
				НаборЗаписей.Отбор.ТипСоглашенияОПоставке.Установить(Выборка.ТипЗаявки);	
			КонецЕсли;	
		КонецЕсли;	
		//rarus vikhle 12.08.2021 mt 17834 ---
		НаборЗаписей.Отбор.ИмяЭлемента.Установить(Выборка.ИмяЭлемента);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать();
		Исключение 
			ЕстьОшибки = Истина;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции


//rarus agar 25.08.2020  16181 --
