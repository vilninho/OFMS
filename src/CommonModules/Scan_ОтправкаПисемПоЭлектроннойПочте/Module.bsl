//rarus tenkam 26.07.2017 mantis 9858 +++ Перенесла процедуры отправки эл. писем в этот модуль
//rarus BProg_Gladkov 02.05.2020 0015962 +- Во всем модуле убрал ссылку на самого себя.

//////////////////////////////////////////////////////////////////////////
///////////////////////////// ОТПРАВКА ПИСЕМ /////////////////////////////
//////////////////////////////////////////////////////////////////////////

// Вспомогательные функции и процедуры

// Функция - Отправить письмо по правам и настройкам
//
// Параметры:
//  НастройкаТемыПисьма		 - Строка - Наименование настройки Scan_ПраваИНастройки
//  НастройкаТекстаПисьма	 - Строка - Наименование настройки Scan_ПраваИНастройки
//  ПравоПолучателейПисьма	 - Строка - Наименование права Scan_ПраваИНастройки
// 
// Возвращаемое значение:
//  СозданныйОбъект - Неопределено, если отправка не была произведена
//
Функция ОтправитьПисьмоПоНастройкам(НастройкаТемыПисьма = Неопределено, НастройкаТекстаПисьма = Неопределено, ПравоПолучателейПисьма) Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Тема          = ?(ЗначениеЗаполнено(НастройкаТемыПисьма),Scan_ПраваИНастройки.Scan_Право(НастройкаТемыПисьма),"");
	ТекстПисьма   = ?(ЗначениеЗаполнено(НастройкаТекстаПисьма),Scan_ПраваИНастройки.Scan_Право(НастройкаТекстаПисьма),"");
	Важность      = ВажностьИнтернетПочтовогоСообщения.Обычная;
    ФорматТекста  = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	АдресатыПользователи = Scan_РегламентныеЗадания.ПолучитьАдресаПользователей(ПравоПолучателейПисьма);
		
	//Создание структуры ПараметрыПисьма
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", АдресатыПользователи);

	Если ПараметрыПисьма.Кому.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	ПараметрыПисьма.Вставить("Важность",  Важность);
	ПараметрыПисьма.Вставить("ТипТекста", ФорматТекста);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
	
	//rarus tenkam 31.10.2017 mantis 11695 +++
	ПараметрыПисьма.Вставить("Автоматически", Истина);
	ПараметрыПисьма.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
	//rarus tenkam 31.10.2017 mantis 11695 ---	
	
	СозданныйОбъект =  РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);	
	
	Возврат СозданныйОбъект;	
КонецФункции  

// Интерактивная / автоматическая отправка писем с ПФ

Функция ПолучитьПолучателейДокумента(ДокументИсточник, ИмяПечатнойФормы) Экспорт
	ПочтовыйАдресПолучателя = "";
	Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо,
		|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.Scan_ВзаимосвязьКонтактныхЛицИМестХранения КАК Scan_ВзаимосвязьКонтактныхЛицИМестХранения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
		|		ПО Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо = Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	Scan_ВзаимосвязьКонтактныхЛицИМестХранения.МестоХранения = &МестоХранения
		|	&ТекНастройка
		|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
		|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Представление <> """"";
		Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
		Если ИмяПечатнойФормы = "МХ1" ИЛИ  ИмяПечатнойФормы = "МХ3" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекНастройка", "И Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо.ОтправлятьПФМХ1МХ3 = ИСТИНА");		
		ИначеЕсли ИмяПечатнойФормы = "М15" Тогда                                                                                                            
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекНастройка", "И Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо.ОтправлятьПФМ15 = ИСТИНА");	
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекНастройка", "И Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо.ОтправлятьПФЗаявкиНаДействие = ИСТИНА");
		КонецЕсли;
		
		Если ИмяПечатнойФормы = "МХ1" ИЛИ ИмяПечатнойФормы = "М15" Тогда
			// Укажем КЛ Поставщика услуг, у которых в месте доставки установлен флаг "Активен"
			Если ЗначениеЗаполнено(ДокументИсточник.МестоДоставки) Тогда
				Запрос.УстановитьПараметр("МестоХранения", ДокументИсточник.МестоДоставки);
				ТабРезультат = Запрос.Выполнить().Выгрузить();
				Для Каждого ТекКЛ Из ТабРезультат Цикл
					ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли  ИмяПечатнойФормы = "МХ3" Тогда
			// Укажем КЛ Поставщика услуг, у которых в месте получения установлен флаг "Активен"
			Если ЗначениеЗаполнено(ДокументИсточник.МестоДоставки) Тогда
				Запрос.УстановитьПараметр("МестоХранения", ДокументИсточник.МестоПолучения);
				ТабРезультат = Запрос.Выполнить().Выгрузить();
				Для Каждого ТекКЛ Из ТабРезультат Цикл
					ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение Тогда
				// Укажем КЛ Грузополучателя, у которых в месте доставки установлен флаг "Активен"
				Если ЗначениеЗаполнено(ДокументИсточник.Грузополучатель) И ЗначениеЗаполнено(ДокументИсточник.МестоДоставки) Тогда
					Запрос.УстановитьПараметр("МестоХранения", ДокументИсточник.МестоДоставки);
					ТабРезультат = Запрос.Выполнить().Выгрузить();
					Для Каждого ТекКЛ Из ТабРезультат Цикл
						ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
					КонецЦикла;
				КонецЕсли;  
				
			ИначеЕсли ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение Тогда
				// Укажем КЛ Поставщика услуг, у которых в месте доставки установлен флаг "Активен"
				Если ЗначениеЗаполнено(ДокументИсточник.Подрядчик) И ЗначениеЗаполнено(ДокументИсточник.МестоДоставки) Тогда
					Запрос.УстановитьПараметр("МестоХранения", ДокументИсточник.МестоДоставки);
					ТабРезультат = Запрос.Выполнить().Выгрузить();
					Для Каждого ТекКЛ Из ТабРезультат Цикл
						ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК Тогда 
				// Укажем КЛ Поставщика услуг, у которых в месте получения установлен флаг "Активен"
				Если ЗначениеЗаполнено(ДокументИсточник.Подрядчик) И ЗначениеЗаполнено(ДокументИсточник.МестоПолучения) Тогда
					Запрос.УстановитьПараметр("МестоХранения", ДокументИсточник.МестоПолучения);
					ТабРезультат = Запрос.Выполнить().Выгрузить();
					Для Каждого ТекКЛ Из ТабРезультат Цикл
						ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		Если    ИмяПечатнойФормы = "ПФ_MXL_ТранспортнаяНакладная" 
			Или ИмяПечатнойФормы = "ПФ_MXL_ТранспортнаяНакладная2200" //rarus agar 24.03.2021 17274 +-
			Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_ЗаявкаПеревозчикуКонтактыОтправителя.КонтактноеЛицо,
			|	Scan_ЗаявкаПеревозчикуКонтактыОтправителя.Представление
			|ИЗ
			|	Документ.Scan_ЗаявкаПеревозчику.КонтактыОтправителя КАК Scan_ЗаявкаПеревозчикуКонтактыОтправителя
			|ГДЕ
			|	Scan_ЗаявкаПеревозчикуКонтактыОтправителя.ВидКонтактнойИнформации = &ВидКИ
			|	И Scan_ЗаявкаПеревозчикуКонтактыОтправителя.Ссылка = &ЗаявкаПеревозчику";
			
			Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
			Запрос.УстановитьПараметр("ЗаявкаПеревозчику", ДокументИсточник);
			
			ТабРезультат = Запрос.Выполнить().Выгрузить();
			Для Каждого ТекКЛ Из ТабРезультат Цикл
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
			КонецЦикла;
		ИначеЕсли ИмяПечатнойФормы = "ПФ_MXL_ЗаявкаПеревозчику" Тогда	
			Если НЕ ЗначениеЗаполнено(ДокументИсточник.Перевозчик) Тогда
				Возврат "";
			КонецЕсли;
			//Укажем контактные лица перевозчика, которые есть в договоре с перевозчиком, и у которых установлен флаг "Отправлять ПФ ЗП"
			Запрос = Новый Запрос;
			//rarus pechek 03.04.2020 mantis 15672 +++
			//Запрос.Текст = "ВЫБРАТЬ
			//|	Scan_ДоговорыВзаиморасчетовКонтактныеЛицаПоДоговору.КонтактноеЛицо КАК КонтактноеЛицо
			//|ПОМЕСТИТЬ КЛПоДоговору
			//|ИЗ
			//|	Справочник.Scan_ДоговорыВзаиморасчетов.КонтактныеЛицаПоДоговору КАК Scan_ДоговорыВзаиморасчетовКонтактныеЛицаПоДоговору
			//|ГДЕ
			//|	Scan_ДоговорыВзаиморасчетовКонтактныеЛицаПоДоговору.Ссылка = &Договор
			//|	И Scan_ДоговорыВзаиморасчетовКонтактныеЛицаПоДоговору.КонтактноеЛицо.ОтправлятьПФЗаявкиПеревозчику = ИСТИНА
			//|
			//|СГРУППИРОВАТЬ ПО
			//|	Scan_ДоговорыВзаиморасчетовКонтактныеЛицаПоДоговору.КонтактноеЛицо
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка,
			//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление
			//|ПОМЕСТИТЬ ЭлПочтаКЛ
			//|ИЗ
			//|	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
			//|ГДЕ
			//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	КЛПоДоговору.КонтактноеЛицо,
			//|	ЕСТЬNULL(ЭлПочтаКЛ.Представление, """") КАК Представление
			//|ИЗ
			//|	КЛПоДоговору КАК КЛПоДоговору
			//|		ЛЕВОЕ СОЕДИНЕНИЕ ЭлПочтаКЛ КАК ЭлПочтаКЛ
			//|		ПО КЛПоДоговору.КонтактноеЛицо = ЭлПочтаКЛ.Ссылка";
			//Запрос.УстановитьПараметр("Договор", ДокументИсточник.ДоговорСПеревозчиком);
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
			               |	ЕСТЬNULL(Scan_КонтактныеЛицаКонтактнаяИнформация.Представление, """") КАК Представление
			               |ИЗ
			               |	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
			               |ГДЕ
			               |	Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
			               |	И Scan_КонтактныеЛицаКонтактнаяИнформация.Представление <> """"
			               |	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Перевозчик
			               |	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.ОтправлятьПФЗаявкиПеревозчику";
						   
			Запрос.УстановитьПараметр("Перевозчик", ДокументИсточник.Перевозчик);
			//rarus pechek 03.04.2020 mantis 15672 ---
			Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
			ТабРезультат = Запрос.Выполнить().Выгрузить();
			Для Каждого ТекКЛ Из ТабРезультат Цикл
				Если СокрЛП(ТекКЛ.Представление) <> "" Тогда
					ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	Возврат ПочтовыйАдресПолучателя;
КонецФункции

Функция ПолучитьПолучателейКопииДокумента(ДокументИсточник, ИмяПечатнойФормы, ПочтовыйАдресПолучателя = "") Экспорт
	ПочтовыйАдресПолучателяКопии = "";
	Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.Scan_ЗаявкаПеревозчику") Тогда
		Если ИмяПечатнойФормы = "ПФ_MXL_ЗаявкаПеревозчику" Тогда
			
			// Укажем в копии КЛ отправителя, у которых в месте отгрузке установлен флаг "Активен"
			Если ЗначениеЗаполнено(ДокументИсточник.КомпанияОтправитель) И ЗначениеЗаполнено(ДокументИсточник.МестоОтгрузки) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо,
					|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление
					|ИЗ
					|	РегистрСведений.Scan_ВзаимосвязьКонтактныхЛицИМестХранения КАК Scan_ВзаимосвязьКонтактныхЛицИМестХранения
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
					|		ПО Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо = Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка
					|ГДЕ
					|	Scan_ВзаимосвязьКонтактныхЛицИМестХранения.МестоХранения = &МестоОтгрузки
					|	И Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо.ОтправлятьПФЗаявкиПеревозчику = ИСТИНА
					|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
					|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Представление <> """"";
				
				Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
				Запрос.УстановитьПараметр("МестоОтгрузки", ДокументИсточник.МестоОтгрузки);
				ТабРезультат = Запрос.Выполнить().Выгрузить();
				Для Каждого ТекКЛ Из ТабРезультат Цикл
					Если (ЗначениеЗаполнено(ПочтовыйАдресПолучателя) И СтрНайти(ПочтовыйАдресПолучателя, СокрЛП(ТекКЛ.Представление)) <> 0) ИЛИ
						СтрНайти(ПочтовыйАдресПолучателяКопии, СокрЛП(ТекКЛ.Представление)) <> 0 Тогда		// rarus tenkam 01.09.2017 mantis 9444 + 
						Продолжить;
					КонецЕсли;
					ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
				КонецЦикла;
			КонецЕсли;
			
			// Укажем в копии КЛ получателя, у которых в месте доставки установлен флаг "Активен"
			Если ЗначениеЗаполнено(ДокументИсточник.КомпанияПолучатель) И ЗначениеЗаполнено(ДокументИсточник.МестоДоставки) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо,
					|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление
					|ИЗ
					|	РегистрСведений.Scan_ВзаимосвязьКонтактныхЛицИМестХранения КАК Scan_ВзаимосвязьКонтактныхЛицИМестХранения
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
					|		ПО Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо = Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка
					|ГДЕ
					|	Scan_ВзаимосвязьКонтактныхЛицИМестХранения.МестоХранения = &МестоДоставки
					|	И Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо.ОтправлятьПФЗаявкиПеревозчику = ИСТИНА
					|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
					|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Представление <> """"";
				
				Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
				Запрос.УстановитьПараметр("МестоДоставки", ДокументИсточник.МестоДоставки);
				ТабРезультат = Запрос.Выполнить().Выгрузить();
				Для Каждого ТекКЛ Из ТабРезультат Цикл
					Если ЗначениеЗаполнено(ПочтовыйАдресПолучателя) И СтрНайти(ПочтовыйАдресПолучателя, СокрЛП(ТекКЛ.Представление)) <> 0  ИЛИ
						СтрНайти(ПочтовыйАдресПолучателяКопии, СокрЛП(ТекКЛ.Представление)) <> 0 Тогда		// rarus tenkam 01.09.2017 mantis 9444 +
					Продолжить;
				КонецЕсли;
				ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
				КонецЦикла;
			КонецЕсли;
		
			// Также укажем пользователей, у которых установлено право "Отправлять ПФ заявки перевозчику"
			МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ОтправлятьПФЗаявкиПеревозчику",Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
			|	ПользователиКонтактнаяИнформация.Представление
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
			|ГДЕ
			|	ПользователиКонтактнаяИнформация.Ссылка В(&МассивПользователей)
			|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
			|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
			Запрос.УстановитьПараметр("МассивПользователей",МассивПользователей);
			
			ТабРезультат = Запрос.Выполнить().Выгрузить();			   
			Для Каждого ТекПользователь Из ТабРезультат Цикл
				Если ЗначениеЗаполнено(ПочтовыйАдресПолучателя) И СтрНайти(ПочтовыйАдресПолучателя, СокрЛП(ТекПользователь.Представление)) <> 0  ИЛИ
						СтрНайти(ПочтовыйАдресПолучателяКопии, СокрЛП(ТекПользователь.Представление)) <> 0 Тогда		// rarus tenkam 01.09.2017 mantis 9444 +
					Продолжить;
				КонецЕсли;
				ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ТекПользователь.Пользователь + " <" + СокрЛП(ТекПользователь.Представление) + ">; ";
			КонецЦикла;
			
			// Также, если это вывоз от кузовостроителя, то укажем пользователей, у которых установлено право "Отправлять ПФ заявки перевозчику при вывозе от кузовостроителей"
			Грузоотправитель = ДокументИсточник.КомпанияОтправитель;
			Грузополучатель = ДокументИсточник.КомпанияПолучатель;	
			
			//rarus tenkam 24.10.2017 mantis 11439 +++
			//Если ТипЗнч(Грузоотправитель) = Тип("СправочникСсылка.Scan_Дилеры") Тогда
			//	Грузоотправитель = Грузоотправитель.Контрагент;
			//КонецЕсли;

			//Если ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.Scan_Дилеры") Тогда
			//	Грузополучатель = Грузополучатель.Контрагент;
			//КонецЕсли;
			//rarus tenkam 24.10.2017 mantis 11439 ---
			
			Если Грузоотправитель.Кузовостроитель ИЛИ Грузополучатель.Кузовостроитель Тогда	
				МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ОтправлятьПФЗаявкиПеревозчикуПриВывозеОтКузовостроителей",Истина);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
				|	ПользователиКонтактнаяИнформация.Представление
				|ИЗ
				|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
				|ГДЕ
				|	ПользователиКонтактнаяИнформация.Ссылка В(&МассивПользователей)
				|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
				|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
				Запрос.УстановитьПараметр("МассивПользователей",МассивПользователей);
				
				ТабРезультат = Запрос.Выполнить().Выгрузить();			   
				Для Каждого ТекПользователь Из ТабРезультат Цикл
					ПолучательПредставление = ТекПользователь.Пользователь.Наименование + " <" + СокрЛП(ТекПользователь.Представление) + ">; ";
					Если СтрНайти(ПочтовыйАдресПолучателяКопии, ПолучательПредставление) = 0 Тогда 
						Если ЗначениеЗаполнено(ПочтовыйАдресПолучателя) И СтрНайти(ПочтовыйАдресПолучателя, ПолучательПредставление) <> 0 Тогда
							Продолжить;
						КонецЕсли;
						ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ПолучательПредставление;
					КонецЕсли;		
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		Если ИмяПечатнойФормы = "М15" Тогда
			// Укажем пользователей, у которых установлено право "Отправлять ПФ М-15"
			МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ОтправлятьПФМ15",Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
			|	ПользователиКонтактнаяИнформация.Представление
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
			|ГДЕ
			|	ПользователиКонтактнаяИнформация.Ссылка В(&МассивПользователей)
			|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
			|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
			Запрос.УстановитьПараметр("МассивПользователей",МассивПользователей);
			
			ТабРезультат = Запрос.Выполнить().Выгрузить();			   
			Для Каждого ТекПользователь Из ТабРезультат Цикл
				Если ЗначениеЗаполнено(ПочтовыйАдресПолучателя) И СтрНайти(ПочтовыйАдресПолучателя, СокрЛП(ТекПользователь.Представление)) <> 0  ИЛИ
						СтрНайти(ПочтовыйАдресПолучателяКопии, СокрЛП(ТекПользователь.Представление)) <> 0 Тогда		// rarus tenkam 01.09.2017 mantis 9444 +
					Продолжить;
				КонецЕсли;
				ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ТекПользователь.Пользователь + " <" + СокрЛП(ТекПользователь.Представление) + ">; ";
			КонецЦикла;
		ИначеЕсли ИмяПечатнойФормы = "МХ1" ИЛИ ИмяПечатнойФормы = "МХ3" Тогда 			
			// Укажем пользователей, у которых установлено право "Отправлять ПФ МХ-1/МХ-3"
			МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ОтправлятьПФМХ1МХ3",Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
			|	ПользователиКонтактнаяИнформация.Представление
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
			|ГДЕ
			|	ПользователиКонтактнаяИнформация.Ссылка В(&МассивПользователей)
			|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
			|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
			Запрос.УстановитьПараметр("МассивПользователей",МассивПользователей);
			
			ТабРезультат = Запрос.Выполнить().Выгрузить();			   
			Для Каждого ТекПользователь Из ТабРезультат Цикл
				Если ЗначениеЗаполнено(ПочтовыйАдресПолучателя) И СтрНайти(ПочтовыйАдресПолучателя, СокрЛП(ТекПользователь.Представление)) <> 0  ИЛИ
						СтрНайти(ПочтовыйАдресПолучателяКопии, СокрЛП(ТекПользователь.Представление)) <> 0 Тогда		// rarus tenkam 01.09.2017 mantis 9444 +
					Продолжить;
				КонецЕсли;
				ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ТекПользователь.Пользователь + " <" + СокрЛП(ТекПользователь.Представление) + ">; ";
			КонецЦикла;
		Иначе 
			// Укажем пользователей, у которых установлено право "Отправлять ПФ заявки на действие"
			МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ОтправлятьПФЗаявкиНаДействие",Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
			|	ПользователиКонтактнаяИнформация.Представление
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
			|ГДЕ
			|	ПользователиКонтактнаяИнформация.Ссылка В(&МассивПользователей)
			|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
			|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
			Запрос.УстановитьПараметр("МассивПользователей",МассивПользователей);
			ТабРезультат = Запрос.Выполнить().Выгрузить();			   
			Для Каждого ТекПользователь Из ТабРезультат Цикл
				Если ЗначениеЗаполнено(ПочтовыйАдресПолучателя) И СтрНайти(ПочтовыйАдресПолучателя, СокрЛП(ТекПользователь.Представление)) <> 0  ИЛИ
						СтрНайти(ПочтовыйАдресПолучателяКопии, СокрЛП(ТекПользователь.Представление)) <> 0 Тогда		// rarus tenkam 01.09.2017 mantis 9444 +
					Продолжить;
				КонецЕсли;
				ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ТекПользователь.Пользователь + " <" + СокрЛП(ТекПользователь.Представление) + ">; ";
			КонецЦикла;
			
			// Укажем в копии КЛ из тч заявки на действие, у которых установлено "Отправить ПФ заявки на действие"
			Если ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу ИЛИ
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ 
				ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Scan_ЗаявкаНаДействиеКонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо,
				|	Scan_ЗаявкаНаДействиеКонтактныеЛица.Представление КАК Представление
				|ИЗ
				|	Документ.Scan_ЗаявкаНаДействие.КонтактныеЛица КАК Scan_ЗаявкаНаДействиеКонтактныеЛица
				|ГДЕ
				|	Scan_ЗаявкаНаДействиеКонтактныеЛица.Ссылка = &ДокументИсточник
				|	И Scan_ЗаявкаНаДействиеКонтактныеЛица.ВидКонтактнойИнформации = &ВидКИ
				|	И Scan_ЗаявкаНаДействиеКонтактныеЛица.КонтактноеЛицо.ОтправлятьПФЗаявкиНаДействие = ИСТИНА";
				
				//Запрос = Новый Запрос;
				//Запрос.Текст = 
				//"ВЫБРАТЬ
				//|	Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо,
				//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление
				//|ИЗ
				//|	РегистрСведений.Scan_ВзаимосвязьКонтактныхЛицИМестХранения КАК Scan_ВзаимосвязьКонтактныхЛицИМестХранения
				//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
				//|		ПО Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо = Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка
				//|ГДЕ
				//|	Scan_ВзаимосвязьКонтактныхЛицИМестХранения.МестоХранения = &МестоДоставки
				//|	И Scan_ВзаимосвязьКонтактныхЛицИМестХранения.КонтактноеЛицо.ОтправлятьПФЗаявкиНаДействие = ИСТИНА
				//|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
				//|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Представление <> """"";
				//
				Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));
				//Запрос.УстановитьПараметр("МестоДоставки", ДокументИсточник.МестоДоставки);
				Запрос.УстановитьПараметр("ДокументИсточник", ДокументИсточник);
				ТабРезультат = Запрос.Выполнить().Выгрузить();
				Для Каждого ТекКЛ Из ТабРезультат Цикл
					Если ЗначениеЗаполнено(ПочтовыйАдресПолучателя) И СтрНайти(ПочтовыйАдресПолучателя, СокрЛП(ТекКЛ.Представление)) <> 0  ИЛИ
						СтрНайти(ПочтовыйАдресПолучателяКопии, СокрЛП(ТекКЛ.Представление)) <> 0 Тогда		// rarus tenkam 01.09.2017 mantis 9444 +
						Продолжить;
					КонецЕсли;
					ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
		//ТекКонтрагент = Неопределено;
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
		//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление
		//|ИЗ
		//|	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
		//|ГДЕ
		//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Контрагент
		//|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Вид = &ВидКИ
		//|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.ОтправлятьПФЗаявкиНаДействие = ИСТИНА
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление,
		//|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка";
		//Запрос.УстановитьПараметр("ВидКИ", Scan_ПраваИНастройки.Scan_Право("АдресЭлПочтыДляОтправкиПисемКонтактнымЛицам"));

		//Если ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу ИЛИ
		//	ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу Тогда
		//	// Укажем сотрудников Хранителя 2, у которых установлена настройка "Отправлять ПФ заявки на действие"
		//	ТекКонтрагент = ДокументИсточник.Хранитель;
		//ИначеЕсли ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу ИЛИ 
		//	ДокументИсточник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу Тогда
		//	// Укажем сотрудников Грузополучателя, у которых установлена настройка "Отправлять ПФ заявки на действие"
		//	ТекКонтрагент = ДокументИсточник.Грузополучатель;
		//КонецЕсли;
		//
		//Если Не ЗначениеЗаполнено(ТекКонтрагент) Тогда
		//	Возврат "";
		//КонецЕсли;
		//Контрагент = ?(ТипЗнч(ТекКонтрагент) = Тип("СправочникСсылка.Scan_Дилеры"), ТекКонтрагент.Контрагент, ТекКонтрагент);
		//Запрос.УстановитьПараметр("Контрагент", Контрагент);
		//ТабРезультат = Запрос.Выполнить().Выгрузить();
		//Для Каждого ТекКЛ Из ТабРезультат Цикл
		//	ПочтовыйАдресПолучателяКопии = ПочтовыйАдресПолучателяКопии + ТекКЛ.КонтактноеЛицо + " <" + СокрЛП(ТекКЛ.Представление) + ">; ";
		//КонецЦикла;
		
	КонецЕсли;         	
	Возврат ПочтовыйАдресПолучателяКопии;
КонецФункции

Функция ПреобразоватьФорматыСохраненияВСтроку(МассивФорматов) Экспорт
	СтрокаФорматов = "";
	Если МассивФорматов.Количество() > 0 Тогда
		Для Каждого Формат Из МассивФорматов Цикл
			Если СтрокаФорматов = "" Тогда
				СтрокаФорматов = Строка(Формат);	
			Иначе	
				СтрокаФорматов = СтрокаФорматов + "," + Строка(Формат);
			КонецЕсли; 
		КонецЦикла;                                	
	КонецЕсли; 	
	Возврат СтрокаФорматов;
КонецФункции

Функция ПреобразоватьСтрокуВФорматыСохранения(СтрокаФорматов) Экспорт
	МассивФорматов = Новый Массив;
	ВремМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаФорматов,",");
	Для Каждого ТекСтрока Из ВремМассив Цикл
		Если ВРЕГ(ТекСтрока) = "PDF" Тогда
			ТекФормат = ТипФайлаТабличногоДокумента.PDF;
		ИначеЕсли ВРЕГ(ТекСтрока) = "XLSX" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.XLSX;
		ИначеЕсли ВРЕГ(ТекСтрока) = "XLS" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.XLS;
		ИначеЕсли ВРЕГ(ТекСтрока) = "ODS" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.ODS;
		ИначеЕсли ВРЕГ(ТекСтрока) = "MXL" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.MXL;
		ИначеЕсли ВРЕГ(ТекСтрока) = "DOCX" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.DOCX;
		ИначеЕсли ВРЕГ(ТекСтрока) = "HTML" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.HTML;
		ИначеЕсли ВРЕГ(ТекСтрока) = "TXT" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.TXT;
		ИначеЕсли ВРЕГ(ТекСтрока) = "ANSITXT" Тогда 
			ТекФормат = ТипФайлаТабличногоДокумента.ANSITXT;
		Иначе
			Продолжить;
		КонецЕсли;
		МассивФорматов.Добавить(ТекФормат);
	КонецЦикла;
	Возврат МассивФорматов;
КонецФункции
//rarus tenkam 28.04.2017 mantis 9444 ---

Функция ОтправитьПисьмоОЗагрузкеПоПраву(Право, Текст, Тема) Экспорт //rarus abrant 02.05.2017 mantis 8698 +-
	ПараметрыПисьма = Новый Структура;
	
	////Сформируем текст письма
	//ТекстПисьма = Scan_ПраваИНастройки.Scan_Право("ТекстПовторногоПисьмаНапоминанияДилерам") + Символы.ПС;
	//Для Каждого ЭлементМассива Из МассивСтрок Цикл
	//	НомерИзделия = ЭлементМассива.Изделие.НомерИзделия;
	//	ТекстПисьма = ТекстПисьма + НомерИзделия + Символы.ПС;	
	//КонецЦикла;
	
	////Сформируем тему письма
	//Если ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
	//	ТекКонтрагент = Заказчик;		
	//ИначеЕсли ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Дилеры") Тогда	
	//	ТекКонтрагент = Заказчик.Контрагент;
	//Иначе
	//	//Если это организация
	//	Возврат Неопределено;	//rarus tenkam 06.03.2017 mantis 7185 +
	//КонецЕсли;
	//ТемаПисьма = ТекКонтрагент.Наименование + ". " + Scan_ПраваИНастройки.Scan_Право("ТемаПовторногоПисьмаНапоминанияДилерам");
	
	//Заполним параметры письма
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Текст);
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	ПараметрыПисьма.Вставить("Важность",  ВажностьИнтернетПочтовогоСообщения.Обычная);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
	//ПараметрыПисьма.Вставить("Владелец", Заказчик);
	
	//Адресаты = ПолучитьАдресаКЛЗаказчика(Заказчик);
	//Если Адресаты.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//ПараметрыПисьма.Вставить("Кому", Адресаты);
	
	АдресатыПользователи = Scan_РегламентныеЗадания.ПолучитьАдресаПользователей(Право);
	Если АдресатыПользователи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыПисьма.Вставить("Кому", АдресатыПользователи);
	//rarus tenkam 31.10.2017 mantis 11695 +++
	ПараметрыПисьма.Вставить("Автоматически", Истина);
	ПараметрыПисьма.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
	//rarus tenkam 31.10.2017 mantis 11695 ---

	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	ПисьмоОтправлено = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);	
	
	Возврат ПисьмоОтправлено;	
КонецФункции
//rarus tenkam 26.07.2017 mantis 9858 ---


//////////////////////////////////////////////////////////////////////////
/////////////////////////// МЕХАНИЗМ ШАБЛОНОВ ////////////////////////////
//////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

Функция ОтправитьПФ(Документ, ИмяПФ = Неопределено, ПараметрыОтправки = Неопределено) Экспорт //rarus BProg_Gladkov 02.05.2020 0015962 +- 
	Если ИмяПФ = Неопределено тогда
		ИмяПФ = Scan_Печать.ИмяОсновнойПФ(Документ);
	КонецЕсли;
	
	Шаблон = ШаблонПоИмениПФ(ИмяПФ);
	Результат = ОтправитьПисьмоПоШаблону(Шаблон, Документ, ПараметрыОтправки);
	Возврат Результат;
КонецФункции

Функция ШаблонПоИмениПФ(ИмяПФ) Экспорт //rarus BProg_Gladkov 03.05.2020 0015962 +- 
	Если НЕ ЗначениеЗаполнено(ИмяПФ) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Scan_ШаблоныПисем ГДЕ ИмяПФ = &ИмяПФ И Действует");
	Запрос.УстановитьПараметр("ИмяПФ", ИмяПФ);
	Выборка = Запрос.Выполнить().Выбрать();
	ШаблонПоИмениПФ = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
	Возврат ШаблонПоИмениПФ;
КонецФункции

Функция ОтправитьПисьмоПоШаблонуИзПрава(Право, Ссылка = Неопределено, ПараметрыОтправки = Неопределено) Экспорт //rarus BProg_Gladkov 02.05.2020 0015962 +- 
	Шаблон = ШаблонИзПрава(Право);
	Результат = ОтправитьПисьмоПоШаблону(Шаблон, Ссылка, ПараметрыОтправки);
	Возврат Результат;
КонецФункции

Функция ШаблонИзПрава(Право, Ссылка = Неопределено) //rarus BProg_Gladkov 02.05.2020 0015962 +- 
	
	СсылкаЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(Тип(Ссылка));
	Если СсылкаЭтоДокумент тогда
		Scan_ПраваИНастройки.Scan_ПолучитьПраваИНастройкиПользователя(Ссылка.Организация, Право);
	Иначе
		Шаблон = Scan_ПраваИНастройки.Scan_Право(Право);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Шаблон.Действует тогда
		ШаблонСообщения = "Не удалось отправить письмо. У выбранного в настройках шаблона ""%1"" снят флаг ""Действует""";
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Шаблон);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Шаблон);
		
		ИмяСобытия = "Отправка письма по шаблону из права";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , Шаблон, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Шаблон;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УбратьДублиПолучателей(ПолучателиПисьма, ПолучателиПисьмаКопии) Экспорт //rarus tenkam 17.10.2017 mantis 11352 +-
	Если НЕ ЗначениеЗаполнено(ПолучателиПисьма) ИЛИ НЕ ЗначениеЗаполнено(ПолучателиПисьмаКопии) Тогда
		Возврат;
	КонецЕсли;
	
	МассивКопии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучателиПисьмаКопии,";",Истина, Истина);
	Для Каждого ТекПолучатель Из МассивКопии Цикл
		ТекПолучатель = СокрЛП(ТекПолучатель);
		Если ТекПолучатель = "" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ПолучателиПисьма, ТекПолучатель) <> 0 Тогда
			ТекКЛ = ТекПолучатель + ";";
			ПолучателиПисьмаКопии = СтрЗаменить(ПолучателиПисьмаКопии, ТекКЛ,"");
			
		КонецЕсли;
	КонецЦикла;	
	
	ПолучателиПисьмаКопии = СтрЗаменить(ПолучателиПисьмаКопии,Символы.ПС, " "); 
			
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровПисьма(Шаблон, ТекСсылка = Неопределено, ПараметрыОтправки = Неопределено) Экспорт //rarus BProg_Gladkov 19.12.2019 0015117 +- Получена при делении на части функции ОтправитьПисьмоПоШаблону
	
	//rarus BProg_Gladkov 02.05.2020 0015962 ++ Выполнен рефакторинг 
	//Если ЗначениеЗаполнено(Шаблон.ХозОперация) Тогда - Секция удалена
	Если ЗначениеЗаполнено(Шаблон.ИмяПФ) И ЗначениеЗаполнено(ТекСсылка) Тогда
		ТабличныйДокумент = Scan_Печать.СформироватьПФ(ТекСсылка, Шаблон.ИмяПФ);
		Вложения = ПоместитьТабличныйДокументВоВременноеХранилище(ТабличныйДокумент, Шаблон.ИмяПФ);
		
	ИначеЕсли ЗначениеЗаполнено(Шаблон.ИмяТабДок) Тогда //rarus bonmak 01.07.2019 14433 ++
		ПечатнаяФорма = ПечатьПоТабДок(Шаблон.ИмяТабДок, ТекСсылка);
		Вложения = ПоместитьТабличныйДокументВоВременноеХранилище(ПечатнаяФорма, Шаблон.ИмяТабДок); //rarus BProg_Gladkov 02.05.2020 0015962 +- Использована единая функция	
		//rarus bonmak 01.07.2019 14433 --	
		
	//rarus ozhnik 14927 18.02.2020 + 
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОтправки) И ПараметрыОтправки.Свойство("ТабличныйДокументКОтправке") и ПараметрыОтправки.Свойство("ИмяМакета") Тогда
		Вложения = ПоместитьТабличныйДокументВоВременноеХранилище(ПараметрыОтправки.ТабличныйДокументКОтправке, ПараметрыОтправки.ИмяМакета); //rarus BProg_Gladkov 02.05.2020 0015962 +- Использована единая функция
	//rarus ozhnik 14927 18.02.2020 -
	Иначе
		Вложения = Новый Массив;
	КонецЕсли;
	//rarus BProg_Gladkov 02.05.2020 0015962 --

	// rarus tenkam 16.08.2018 mantis 13381 +++
	Если ЗначениеЗаполнено(ПараметрыОтправки) И ПараметрыОтправки.Свойство("НесколькоПараметров") Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ТекСсылка);
		МассивПараметров.Добавить(ПараметрыОтправки.НесколькоПараметров);
		ТелоПисьма = Справочники.Scan_ШаблоныПисем.СформироватьТекст(Шаблон, МассивПараметров,Истина);	
	Иначе
	// rarus tenkam 16.08.2018 mantis 13381 ---	
		ТелоПисьма = Справочники.Scan_ШаблоныПисем.СформироватьТекст(Шаблон, ТекСсылка);
	КонецЕсли;		// rarus tenkam 16.08.2018 mantis 13381 +	
		
	Если ЗначениеЗаполнено(ПараметрыОтправки) И ПараметрыОтправки.Свойство("ДополнительныйТекст")Тогда
		ТелоПисьма = ТелоПисьма + Символы.ПС + СокрЛП(ПараметрыОтправки.ДополнительныйТекст);
	КонецЕсли;
		
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("УчетнаяЗапись", 				Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
	ПараметрыПисьма.Вставить("Кому", 						Справочники.Scan_ШаблоныПисем.ПолучитьПолучателейПисьма(Шаблон, ТекСсылка));
	ПараметрыПисьма.Вставить("Копии", 						Справочники.Scan_ШаблоныПисем.ПолучитьКопииПисьма(Шаблон, ТекСсылка));
	ПараметрыПисьма.Вставить("АдресОтвета", 				Scan_ВспомогательныеФункцииСервер.ПолучитьЭлПочтуПользователя(ПользователиКлиентСервер.ТекущийПользователь()));
	ПараметрыПисьма.Вставить("Тема", 						Справочники.Scan_ШаблоныПисем.ПолучитьЗаголовокПисьма(Шаблон,ТекСсылка));
	ПараметрыПисьма.Вставить("Тело", 						ТелоПисьма);
	ПараметрыПисьма.Вставить("Вложения", 					Вложения);
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки",	ЛОЖЬ);
	ПараметрыПисьма.Вставить("Источник", 					ТекСсылка);
	ПараметрыПисьма.Вставить("ИмяПФ", 						Шаблон.ИмяПФ);
	ПараметрыПисьма.Вставить("ТипТекста", 					Шаблон.ТипТекста);
	//rarus tenkam 31.10.2017 mantis 11695 +++ 
	ПараметрыПисьма.Вставить("ДокументОтправки", 			ТекСсылка);
	
	Автоматически = Истина;
	Если ЗначениеЗаполнено(ПараметрыОтправки) И ПараметрыОтправки.Свойство("Автоматически", Автоматически) Тогда
		ПараметрыПисьма.Вставить("Автоматически", Автоматически);
	КонецЕсли;                                
	//rarus tenkam 31.10.2017 mantis 11695 ---
	
	Возврат ПараметрыПисьма; //rarus BProg_Gladkov 19.12.2019 0015117 +-
КонецФункции

Функция ОтправитьПисьмо(ПараметрыПисьма, СообщениеОтправки = "") Экспорт //rarus BProg_Gladkov 19.12.2019 0015117 +- Получена при делении на части функции ОтправитьПисьмоПоШаблону
	Попытка		//rarus tenkam 23.01.2017 mantis 12717 +
		ПисьмоОтправлено = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(ПараметрыПисьма.УчетнаяЗапись, ПараметрыПисьма);
	//rarus tenkam 23.01.2017 mantis 12717 +++	
	Исключение
		СообщениеОтправки = ОписаниеОшибки();
		ПисьмоОтправлено = Неопределено;
	КонецПопытки;
	//rarus tenkam 23.01.2017 mantis 12717 ---
	
	Если ЗначениеЗаполнено(ПисьмоОтправлено) Тогда
		//rarus BProg_Gladkov 19.12.2019 0015117 +++
		Кому = "";
		Если ЗначениеЗаполнено(ПараметрыПисьма.Кому) тогда
			Для Каждого Структура из ПараметрыПисьма.Кому Цикл
				Получатель ="<"+Структура.Адрес + ">" + Структура.Представление;
				Кому = ?(ЗначениеЗаполнено(Кому),Кому+ " " + Получатель, Получатель);  	
			КонецЦикла;
		КонецЕсли;
		//rarus BProg_Gladkov 19.12.2019 0015117 ---
		
		ИмяФайла = ?(ЗначениеЗаполнено(ПараметрыПисьма.Вложения), ПараметрыПисьма.Вложения[0].Представление, ""); //rarus BProg_Gladkov 03.05.2020 0015962 +-
		
		СообщениеОтправки = "Отправлено письмо:" + Символы.ПС + "Кому: " + Кому + Символы.ПС + "Вложения: " + ИмяФайла;
		УровеньЖР = УровеньЖурналаРегистрации.Примечание;
		ЗаписьЖурналаРегистрации("Автоматическая отправка электронного письма", УровеньЖР, ПараметрыПисьма.Источник, ,СообщениеОтправки,);	// rarus tenkam 04.10.2019 mantis 15052 +
		Возврат Истина;
	Иначе
		//rarus tenkam 23.01.2017 mantis 12717 +++
		//СообщениеОтправки = "Не удалось автоматически отправить письмо с печатной формой документа.";
		СообщениеОтправки = СообщениеОтправки + "Не удалось автоматически отправить письмо с печатной формой документа.";
		//rarus tenkam 23.01.2017 mantis 12717 ---
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;		
		ЗаписьЖурналаРегистрации("Автоматическая отправка электронного письма", УровеньЖР, ПараметрыПисьма.Источник, ,СообщениеОтправки,);	// rarus tenkam 04.10.2019 mantis 15052 +
		Возврат Ложь;
	КонецЕсли;
	//ЗаписьЖурналаРегистрации("Автоматическая отправка электронного письма", УровеньЖР, ТекСсылка , ,СообщениеОтправки,);	// rarus tenkam 04.10.2019 mantis 15052 +
КонецФункции

Функция ОтправитьПисьмоПоШаблону(Шаблон, Ссылка = Неопределено, ПараметрыОтправки = Неопределено) Экспорт //rarus BProg_Gladkov 03.05.2020 0015962 +- 
	
	Результат = РезультатОтправкиПисьма();
	Если НЕ ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПисьма = ПолучитьСтруктуруПараметровПисьма(Шаблон, Ссылка, ПараметрыОтправки);
	Результат.ПисьмоОтправлено = ОтправитьПисьмо(ПараметрыПисьма, Результат.ТекстСообщения);
	Если Результат.ПисьмоОтправлено тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОтправкиПисьма() //rarus BProg_Gladkov 03.05.2020 0015962 +- 
	РезультатОтправкиПисьма = Новый Структура;
	РезультатОтправкиПисьма.Вставить("ВыполняласьОтправкаПисьма", 	Ложь);
	РезультатОтправкиПисьма.Вставить("ПисьмоОтправлено", 			Ложь);
	РезультатОтправкиПисьма.Вставить("ТекстСообщения", 				"");
	
	Возврат РезультатОтправкиПисьма;
КонецФункции

Функция ПоместитьТабличныйДокументВоВременноеХранилище(ТабличныйДокумент, ИмяМакета) //rarus BProg_Gladkov 02.05.2020 0015962 +- 
	Если ТабличныйДокумент = Неопределено тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	//Получим таблицу со всеми форматами	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	Scan_ЗначимыеСобытия.ЗаполнитьТаблицуФорматов(ТаблицаФорматов);
	
	//Получим массив форматов из настройки
	СтрокаФормат = Scan_ПраваИНастройки.Scan_Право("ФорматПрикрепленногоФайлаПриАвтоматическойОтправке");
	ФорматыСохранения = Scan_ВспомогательныеФункцииСервер.ПреобразоватьСтрокуВФорматыСохранения(СтрокаФормат);
	Если ФорматыСохранения.Количество() = 0 Тогда
		ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;
	
	СтруктураПФ = Новый Структура("ТабличныйДокумент", ТабличныйДокумент);
	СтруктураПФ.Вставить("ИмяМакета", ИмяМакета);

	МасивТабДоков = Новый Массив;
	МасивТабДоков.Добавить(СтруктураПФ);
	
	Вложения = Scan_ЗначимыеСобытия.ПоместитьТабличныеДокументыВоВременноеХранилище(ТаблицаФорматов, ФорматыСохранения, Ложь, МасивТабДоков);
	Возврат Вложения;
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьПФЗаявки(ДокументСсылка, СообщениеОтправки = "", ВсеОк = Ложь) Экспорт 	//rarus tenkam 26.04.2017 mantis 9444 +-
																							//rarus BProg_Gladkov 02.05.2020 0015962 +- Переместил из Scan_ЗаявкаНаДействие 
	//rarus tenkam 13.11.2017 mantis 8465 +++
	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
		//rarus BProg_Gladkov 03.05.2020 0015962 ++ ОтправитьПФ
		Результат = ОтправитьПФ(ДокументСсылка);
		ВсеОк = НЕ Результат.ВыполняласьОтправкаПисьма ИЛИ НЕ Результат.ПисьмоОтправлено;
		//rarus BProg_Gladkov 03.05.2020 0015962 -- 
	Иначе
		//rarus tenkam 13.11.2017 mantis 8465 ---	
		
		//rarus tenkam 25.09.2017 mantis 11216 +++
		//Если НЕ Scan_ВспомогательныеФункцииСервер.ЭтоЗаявкаCПеревозкой(ДокументСсылка) Тогда 
		//	Возврат;
		//КонецЕсли;
		//rarus tenkam 25.09.2017 mantis 11216 ---
		
		ИмяПФ = Scan_Печать.ИмяОсновнойПФ(ДокументСсылка); //rarus BProg_Gladkov 04.05.2020 0015962 +-
		Если НЕ ЗначениеЗаполнено(ИмяПФ) Тогда //rarus BProg_Gladkov 02.05.2020 0015962 +- Заменена проверка на "ЗначениеЗаполнено"
			ВсеОк = Истина;	//rarus tenkam 15.08.2017 mantis 9319 +
			Возврат; 
		КонецЕсли;	//rarus tenkam 03.05.2017 +
		Тема = Scan_ПраваИНастройки.Scan_Право("ТемаПисьмаПриИнтерактивнойОтправке");
		Тело = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаПриИнтерактивнойОтправке");
		АдресОтвета = Scan_ВспомогательныеФункцииСервер.ПолучитьЭлПочтуПользователя(ПользователиКлиентСервер.ТекущийПользователь());
		Кому = ПолучитьПолучателейДокумента(ДокументСсылка, ИмяПФ);
		Копии = ПолучитьПолучателейКопииДокумента(ДокументСсылка, ИмяПФ, Кому);
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		Если НЕ ЗначениеЗаполнено(Кому) Тогда
			СообщениеОтправки = "Не удалось автоматически отправить письмо с печатной формой документа. Нет ни одного получателя.";
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(Копии) Тогда
			Если СтрНайти(Копии, АдресОтвета) = 0 Тогда		// rarus tenkam 01.09.2017 mantis 9444 + 
				Копии = Копии + АдресОтвета + ";";
			КонецЕсли;
		Иначе
			Копии = АдресОтвета;
		КонецЕсли;
		
		//rarus BProg_Gladkov 02.05.2020 0015962 ++ СформироватьПФ
		ПечатнаяФорма = Scan_Печать.СформироватьПФ(ДокументСсылка, ИмяПФ); 
		ИмяФайла = ПечатнаяФорма.ИспользуемоеИмяФайла;
		Вложения = ПоместитьТабличныйДокументВоВременноеХранилище(ПечатнаяФорма, ИмяПФ);
		//rarus BProg_Gladkov 02.05.2020 0015962 -- 
		
		//Создание структуры ПараметрыПисьма
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Тема", Тема + " " + ИмяФайла);
		ПараметрыПисьма.Вставить("Тело", Тело);
		ПараметрыПисьма.Вставить("Кому", Кому);
		ПараметрыПисьма.Вставить("Копии", Копии);
		ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);	
		ПараметрыПисьма.Вставить("Вложения", Вложения);
		
		ПараметрыПисьма.Вставить("Кодировка", "utf-8");
		ПараметрыПисьма.Вставить("Важность",  ВажностьИнтернетПочтовогоСообщения.Обычная);
		ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
		ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
		ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
		ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
		
		//rarus tenkam 31.10.2017 mantis 11695 +++
		ПараметрыПисьма.Вставить("ДокументОтправки", ДокументСсылка);
		ПараметрыПисьма.Вставить("Автоматически", Истина);
		ПараметрыПисьма.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
		//rarus tenkam 31.10.2017 mantis 11695 ---
		
		СозданныйОбъект = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);		
		Если ЗначениеЗаполнено(СозданныйОбъект) Тогда
			СообщениеОтправки = "Отправлено письмо:" + Символы.ПС + "Кому: " + Кому + Символы.ПС + "Вложения: " + ИмяФайла;
			УровеньЖР = УровеньЖурналаРегистрации.Примечание;
			ВсеОк = Истина;	//rarus tenkam 10.05.2017
		Иначе
			СообщениеОтправки = "Не удалось автоматически отправить письмо с печатной формой документа.";
			УровеньЖР = УровеньЖурналаРегистрации.Ошибка;		
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Автоматическая отправка ПФ заявки на действие", УровеньЖР,ДокументСсылка , ,СообщениеОтправки,);
		
	КонецЕсли;		//rarus tenkam 13.11.2017 mantis 8465 +
КонецПроцедуры

Процедура ОтправитьАннулированнуюЗаявку(ЗаявкаПеревозчику) Экспорт 	//rarus tenkam 17.10.2017 mantis 11352 +-
																	//rarus BProg_Gladkov 03.05.2020 0015962 +- Выполнен рефакториг
	
	Если НЕ Scan_ПраваИНастройки.Scan_Право("АвтоматическаяОтправкаПФАннулированнойЗаявкиПеревозчику") 
	// rarus tenkam 06.07.2020 mantis 16285 +++
		//ИЛИ РегистрыСведений.Scan_ОтправленныеПисьма.ЕстьОтправленноеПисьмо(ЗаявкаПеревозчику) //rarus tenkam 18.04.2018 mantis 12979 +-
		ИЛИ НЕ РегистрыСведений.Scan_ОтправленныеПисьма.ЕстьОтправленноеПисьмо(ЗаявкаПеревозчику) 
	// rarus tenkam 06.07.2020 mantis 16285 ---	
	Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОтправки = Новый Структура("Автоматически", Истина);	//rarus tenkam 31.10.2017 mantis 11695 +
	РезультатОтправкиПисьма = ОтправитьПФ(ЗаявкаПеревозчику, , ПараметрыОтправки); //rarus BProg_Gladkov 04.05.2020 0015962 +-
КонецПроцедуры

Процедура ОтправитьПисьмоНапоминаниеДилерам() Экспорт
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Сформировать и отправить напоминания дилерам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ШаблонПисьма = ШаблонИзПрава("ШаблонНапоминаниеДилерам"); //rarus BProg_Gladkov 02.05.2020 0015962 +- 
	Если НЕ ЗначениеЗаполнено(ШаблонПисьма) Тогда
		Возврат;	
	КонецЕсли;		
	//rarus bonmak 05.08.2019 14427 изменил запрос
	
	// rarus tenkam 19.08.2019 mantis 14427 +++
	//Утерян старый запрос - восстановлен из истории хранилища
	
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ВЫБОР
	//|		КОГДА ТИПЗНАЧЕНИЯ(Scan_Продукты.Заказчик) = ТИП(Справочник.Scan_Дилеры)
	//|			ТОГДА Scan_Продукты.Заказчик.Контрагент
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ТИПЗНАЧЕНИЯ(Scan_Продукты.Заказчик) = ТИП(Справочник.Scan_Контрагенты)
	//|					ТОГДА Scan_Продукты.Заказчик
	//|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
	//|			КОНЕЦ
	//|	КОНЕЦ КАК Заказчик,
	//|	Scan_Продукты.Изделие КАК Изделие,
	//|	Scan_Продукты.ЗаказНаЗавод КАК ЗаказНаЗавод
	//|ПОМЕСТИТЬ ТаблицаСоответствий
	//|ИЗ
	//|	Справочник.Scan_Продукты КАК Scan_Продукты
	//|ГДЕ
	//|	Scan_Продукты.ЗаказНаЗавод.CDDX = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	//|	И Scan_Продукты.ЗаказНаЗавод.НапоминаниеДилерамОтправлено = ЛОЖЬ
	//|	И Scan_Продукты.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
	//|	И Scan_Продукты.ЗаказНаЗавод.ЕстьАдресДоставки = ЛОЖЬ
	//|	И Scan_Продукты.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТаблицаСоответствий.Заказчик КАК Заказчик,
	//|	ТаблицаСоответствий.Изделие КАК Изделие,
	//|	ТаблицаСоответствий.ЗаказНаЗавод КАК ЗаказНаЗавод,
	//|	ТаблицаСоответствий.Изделие.НомерИзделия КАК НомерИзделия
	//|ИЗ
	//|	ТаблицаСоответствий КАК ТаблицаСоответствий
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
	//|					ИЛИ &Ссылка = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ТаблицаСоответствий.Заказчик = &Ссылка
	//|		КОНЕЦ
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Заказчик,
	//|	НомерИзделия";    	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)) КАК Заказчик,
	|	Scan_Изделия.Ссылка КАК Изделие,
	|	Scan_Изделия.ЗаказНаЗавод КАК ЗаказНаЗавод
	|ПОМЕСТИТЬ ТаблицаСоответствий
	|ИЗ
	|	Справочник.Scan_Изделия КАК Scan_Изделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних(, Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Заказчик)) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
	|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ,
	//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	|				,
	|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
	|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDDX)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDDX
	|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихCDDX.Объект
	|			И Scan_КлючевыеДатыПроцессовСрезПоследнихCDDX.Значение = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|ГДЕ
	//|	Scan_Изделия.ЗаказНаЗавод.CDDX = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	//rarus BProg_Gladkov 21.11.2019 0014452 -- 
	|	Scan_Изделия.ЗаказНаЗавод.НапоминаниеДилерамОтправлено = ЛОЖЬ
	|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
	//|	И Scan_Изделия.ЗаказНаЗавод.ЕстьАдресДоставки = ЛОЖЬ //rarus BProg_Dekin 11.11.2019 0014452 +- "ЕстьАдресДоставки" удален
	|	И Scan_Изделия.Ссылка <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.Заказчик КАК Заказчик,
	|	ТаблицаСоответствий.Изделие КАК Изделие,
	|	ТаблицаСоответствий.ЗаказНаЗавод КАК ЗаказНаЗавод,
	|	ТаблицаСоответствий.Изделие.НомерИзделия КАК НомерИзделия
	|ИЗ
	|	ТаблицаСоответствий КАК ТаблицаСоответствий
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
	|					ИЛИ &Ссылка = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаСоответствий.Заказчик = &Ссылка
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказчик,
	|	НомерИзделия";
	// rarus tenkam 19.08.2019 mantis 14427 ---
	
	Запрос.УстановитьПараметр("Ссылка",Неопределено);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		//Нечего отправлять  		
		Возврат;
	КонецЕсли;
	ТабДанных = РезультатЗапроса.Выгрузить();
	ТабДанныхИсточник = ТабДанных.Скопировать();
	ТабДанных.Свернуть("Заказчик");
	МассивЗаказчиков = ТабДанных.ВыгрузитьКолонку("Заказчик");
	
	//Отправим письмо пользователям
	//rarus BProg_Gladkov 03.05.2020 0015962 ++ ОтправитьПисьмоПоШаблону
	РезультатОтправкиПисьма = ОтправитьПисьмоПоШаблону(ШаблонПисьма);
	ВсеОк = РезультатОтправкиПисьма.ПисьмоОтправлено;
	//rarus BProg_Gladkov 03.05.2020 0015962 -- 
	Если НЕ ВсеОк Тогда
		Сообщить(РезультатОтправкиПисьма.ТекстСообщения); //rarus BProg_Gladkov 04.05.2020 0015962 +- 
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо-напоминание пользователям'"),),);
	Иначе
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователям отправлено письмо-напоминание по изделиям'"),),);
	КонецЕсли;
	            	
	//Отправим заказчикам
	Для Каждого ТекЗаказчик Из МассивЗаказчиков Цикл
		Если НЕ ЗначениеЗаполнено(ТекЗаказчик) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Заказчик",ТекЗаказчик); 
		МассивСтрок = ТабДанныхИсточник.НайтиСтроки(СтруктураПоиска);
		
		//rarus BProg_Gladkov 03.05.2020 0015962 ++ ОтправитьПисьмоПоШаблону
		РезультатОтправкиПисьма = ОтправитьПисьмоПоШаблону(ШаблонПисьма, ТекЗаказчик);
		ВсеОк = РезультатОтправкиПисьма.ПисьмоОтправлено;
		//rarus BProg_Gladkov 03.05.2020 0015962 -- 
		
		Если Не ВсеОк Тогда
			Сообщить(РезультатОтправкиПисьма.ТекстСообщения); //rarus BProg_Gladkov 04.05.2020 0015962 +- 
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказчику %1 не удалось отправить письмо-напоминание по изделиям'"), ТекЗаказчик),);
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказчику %1 отправлено письмо-напоминание по изделиям'"), ТекЗаказчик),); 
			Для каждого ЭлементМассива Из МассивСтрок Цикл
				ТекЗаказОбъект = ЭлементМассива.ЗаказНаЗавод.ПолучитьОбъект();	
				ТекЗаказОбъект.НапоминаниеДилерамОтправлено = Истина;
				Попытка
					ТекЗаказОбъект.Записать();
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для Заказа на завод %1 установлен признак напоминание дилерам отправлено'"), ЭлементМассива.ЗаказНаЗавод),);
				Исключение
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для Заказа на завод %1 не удалось установить признак напоминание дилерам отправлено. Описание ошибки: %2'"), ЭлементМассива.ЗаказНаЗавод, ОписаниеОшибки()),);
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры 

Функция ПечатьПоТабДок(ИмяТабДок, ТекСсылка = Неопределено) Экспорт //rarus bonmak 01.07.2019 14433 ++
	
	Если ИмяТабДок = "DateDeviation" Тогда
		ТабДок = СформироватьТабДокDateDeviation();
		
	ИначеЕсли ИмяТабДок = "OrderDeviation" Тогда //rarus bonmak 08.11.2019 14869 ++ 
		ТабДок = СформироватьТабДокOrderDeviation(ТекСсылка);
	//rarus bonmak 08.11.2019 14869 --
	Иначе
		ТабДок = Неопределено;
	КонецЕсли;
	
	//rarus BProg_Gladkov 02.05.2020 0015962 ++ ПечатьПоТабДок Выполнен рефакторинг 
	Если ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") тогда
		Если ИмяТабДок = "DateDeviation" Тогда
			ТабДок.ИспользуемоеИмяФайла = "Date Deviation"; 
			
		ИначеЕсли ИмяТабДок = "OrderDeviation" Тогда //rarus bonmak 08.11.2019 14869 ++ 
			ТабДок.ИспользуемоеИмяФайла = "Order Deviation"; 
		КонецЕсли;
		
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	//rarus BProg_Gladkov 02.05.2020 0015962 -- 
	
	Возврат ТабДок;
КонецФункции //rarus bonmak 01.07.2019 14433 --

Функция СформироватьТабДокDateDeviation() //rarus bonmak 01.07.2019 14433 ++
	ТабДок = Новый ТабличныйДокумент;
	//rarus bonmak 05.08.2019 14427 заменил регистр
	Запрос = Новый Запрос;
	Запрос.Текст =
		//rarus BProg_Dekin 20.05.2020 mantis 0015999 ++ Не нужные заказы забираются из изделия, так как статус перенесен в изделие
		//"ВЫБРАТЬ
		//|	Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ КАК Заказ,
		//|	Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение КАК Значение
		//|ПОМЕСТИТЬ НеНужныеЗаказы
		//|ИЗ
		//|	РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
		//|ГДЕ
		//|	Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.СтатусЗаказаЛокальный) //rarus bonmak 15.08.2019 14576 поменял на новое значение
		//|	И (Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение = ЗНАЧЕНИЕ(Справочник.Scan_ЛокальныеСтатусыЗаказовНаЗавод.SOLD) //rarus bonmak 15.08.2019 14576 поменял на справочник
		//|			ИЛИ Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение = ЗНАЧЕНИЕ(Справочник.Scan_ЛокальныеСтатусыЗаказовНаЗавод.DELETED)) //rarus bonmak 15.08.2019 14576 поменял на справочник
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		"ВЫБРАТЬ
		|	Scan_Изделия.ЗаказНаЗавод КАК Заказ,
		|	Scan_Изделия.ЛокальныйСтатусПродукта КАК Значение
		|ПОМЕСТИТЬ НеНужныеЗаказы
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.ЗаказНаЗавод <> Значение(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка)
		|	И (Scan_Изделия.ЛокальныйСтатусПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ЛокальныеСтатусыПродуктов.SOLD) 
		|			ИЛИ Scan_Изделия.ЛокальныйСтатусПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ЛокальныеСтатусыПродуктов.DELETED))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//rarus BProg_Dekin 20.05.2020 mantis 0015999 --
		|ВЫБРАТЬ
		|	Scan_ХарактеристикиЗаказовНаЗавод.Реквизит КАК ПараметрЗаказаНаЗавод,
		|	Scan_ХарактеристикиЗаказовНаЗавод.Значение КАК ТекущееЗначение,
		|	Scan_ХарактеристикиЗаказовНаЗавод.Заказ КАК ЗаказНаЗавод,
		|	Scan_ХарактеристикиЗаказовНаЗавод.Период КАК ДатаИзменения,
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
		|	Scan_ХарактеристикиЗаказовНаЗавод.Заказ.Заказчик КАК Заказчик,
		|	Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение КАК Клиент
		|ПОМЕСТИТЬ ХарактеристикиТекущиеЗначения
		|ИЗ
		|	РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод КАК Scan_ХарактеристикиЗаказовНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&ДатаК, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
		|		ПО Scan_ХарактеристикиЗаказовНаЗавод.Заказ = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ НеНужныеЗаказы КАК НеНужныеЗаказы
		|		ПО Scan_ХарактеристикиЗаказовНаЗавод.Заказ = НеНужныеЗаказы.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних(&ДатаК, ) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
		|		ПО Scan_ХарактеристикиЗаказовНаЗавод.Заказ = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ
		|			И (Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент))
		|ГДЕ
		|	Scan_ХарактеристикиЗаказовНаЗавод.Период МЕЖДУ &ДатаН И КОНЕЦПЕРИОДА(&ДатаК, ДЕНЬ)
		|	И НЕ Scan_ХарактеристикиЗаказовНаЗавод.Заказ.ПометкаУдаления
		|	И НеНужныеЗаказы.Значение ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеЗначения.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ТекущиеЗначения.ТекущееЗначение КАК ТекущееЗначение,
		|	ТекущиеЗначения.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ТекущиеЗначения.ДатаИзменения КАК ДатаИзменения,
		|	ТекущиеЗначения.Изделие КАК Изделие,
		|	ТекущиеЗначения.Заказчик КАК Заказчик,
		|	ТекущиеЗначения.Клиент КАК Клиент,
		|	МАКСИМУМ(Scan_ХарактеристикиЗаказовНаЗавод.Период) КАК ДатаИзмененияПред,
		|	ТекущиеЗначения.Изделие.НомерИзделия КАК НомерИзделия
		|ПОМЕСТИТЬ ХарактеристикиТекущиеЗначенияДатаИзмененияПред
		|ИЗ
		|	ХарактеристикиТекущиеЗначения КАК ТекущиеЗначения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод КАК Scan_ХарактеристикиЗаказовНаЗавод
		|		ПО ТекущиеЗначения.ПараметрЗаказаНаЗавод = Scan_ХарактеристикиЗаказовНаЗавод.Реквизит
		|			И ТекущиеЗначения.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗавод.Заказ
		|			И ТекущиеЗначения.ДатаИзменения > Scan_ХарактеристикиЗаказовНаЗавод.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеЗначения.ПараметрЗаказаНаЗавод,
		|	ТекущиеЗначения.ТекущееЗначение,
		|	ТекущиеЗначения.ЗаказНаЗавод,
		|	ТекущиеЗначения.ДатаИзменения,
		|	ТекущиеЗначения.Изделие,
		|	ТекущиеЗначения.Заказчик,
		|	ТекущиеЗначения.Клиент,
		|	ТекущиеЗначения.Изделие.НомерИзделия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред.ТекущееЗначение КАК ТекущееЗначение,
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред.ДатаИзменения КАК ДатаИзменения,
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред.Изделие КАК Изделие,
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред.Заказчик КАК Заказчик,
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред.Клиент КАК Клиент,
		|	Scan_ХарактеристикиЗаказовНаЗавод.Значение КАК ПредыдущееЗначение,
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред.НомерИзделия КАК НомерИзделия,
		|	ЛОЖЬ КАК КлючевыеДаты
		|ПОМЕСТИТЬ ХарактеристикиЗаказовНаЗавод
		|ИЗ
		|	ХарактеристикиТекущиеЗначенияДатаИзмененияПред КАК ХарактеристикиТекущиеЗначенияДатаИзмененияПред
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод КАК Scan_ХарактеристикиЗаказовНаЗавод
		|		ПО ХарактеристикиТекущиеЗначенияДатаИзмененияПред.ПараметрЗаказаНаЗавод = Scan_ХарактеристикиЗаказовНаЗавод.Реквизит
		|			И ХарактеристикиТекущиеЗначенияДатаИзмененияПред.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗавод.Заказ
		|			И ХарактеристикиТекущиеЗначенияДатаИзмененияПред.ДатаИзмененияПред = Scan_ХарактеристикиЗаказовНаЗавод.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КлючевыеДатыПроцессовСрезПоследних.ВидКлючевойДаты КАК ПараметрЗаказаНаЗавод,
		|	Scan_КлючевыеДатыПроцессовСрезПоследних.Значение КАК ТекущееЗначение,
		|	Scan_КлючевыеДатыПроцессовСрезПоследних.Объект КАК ЗаказНаЗавод,
		|	Scan_КлючевыеДатыПроцессовСрезПоследних.Период КАК ДатаИзменения,
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
		|	Scan_КлючевыеДатыПроцессовСрезПоследних.Объект.Заказчик КАК Заказчик,
		|	Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение КАК Клиент
		|ПОМЕСТИТЬ ТекущиеЗначения
		|ИЗ
		|	РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|			,
		|			ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|				И НЕ Объект.ПометкаУдаления
		|				И (ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.PDD)
		|					ИЛИ ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD)
		|					ИЛИ ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD2)
		|					ИЛИ ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.EDD)
		|					ИЛИ ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ADD)
		|					ИЛИ ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия))) КАК Scan_КлючевыеДатыПроцессовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&ДатаК, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
		|		ПО Scan_КлючевыеДатыПроцессовСрезПоследних.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ НеНужныеЗаказы КАК НеНужныеЗаказы
		|		ПО Scan_КлючевыеДатыПроцессовСрезПоследних.Объект = НеНужныеЗаказы.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних(&ДатаК, ) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
		|		ПО Scan_КлючевыеДатыПроцессовСрезПоследних.Объект = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ
		|			И (Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент))
		|ГДЕ
		|	Scan_КлючевыеДатыПроцессовСрезПоследних.Период МЕЖДУ &ДатаН И КОНЕЦПЕРИОДА(&ДатаК, ДЕНЬ)
		|	И НеНужныеЗаказы.Значение ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеЗначения.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ТекущиеЗначения.ТекущееЗначение КАК ТекущееЗначение,
		|	ТекущиеЗначения.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ТекущиеЗначения.ДатаИзменения КАК ДатаИзменения,
		|	ТекущиеЗначения.Изделие КАК Изделие,
		|	ТекущиеЗначения.Заказчик КАК Заказчик,
		|	ТекущиеЗначения.Клиент КАК Клиент,
		|	МАКСИМУМ(Scan_КлючевыеДатыПроцессов.Период) КАК ДатаИзмененияПред,
		|	ТекущиеЗначения.Изделие.НомерИзделия КАК НомерИзделия
		|ПОМЕСТИТЬ ТекущиеЗначенияДатаПред
		|ИЗ
		|	ТекущиеЗначения КАК ТекущиеЗначения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
		|		ПО ТекущиеЗначения.ПараметрЗаказаНаЗавод = Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты
		|			И ТекущиеЗначения.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессов.Объект
		|			И (Scan_КлючевыеДатыПроцессов.ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод))
		|			И ТекущиеЗначения.ДатаИзменения > Scan_КлючевыеДатыПроцессов.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеЗначения.ПараметрЗаказаНаЗавод,
		|	ТекущиеЗначения.ТекущееЗначение,
		|	ТекущиеЗначения.ЗаказНаЗавод,
		|	ТекущиеЗначения.ДатаИзменения,
		|	ТекущиеЗначения.Изделие,
		|	ТекущиеЗначения.Заказчик,
		|	ТекущиеЗначения.Клиент,
		|	ТекущиеЗначения.Изделие.НомерИзделия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеЗначенияДатаПред.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ТекущиеЗначенияДатаПред.ТекущееЗначение КАК ТекущееЗначение,
		|	ТекущиеЗначенияДатаПред.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ТекущиеЗначенияДатаПред.ДатаИзменения КАК ДатаИзменения,
		|	ТекущиеЗначенияДатаПред.Изделие КАК Изделие,
		|	ТекущиеЗначенияДатаПред.Заказчик КАК Заказчик,
		|	ТекущиеЗначенияДатаПред.Клиент КАК Клиент,
		|	Scan_КлючевыеДатыПроцессов.Значение КАК ПредыдущееЗначение,
		|	ТекущиеЗначенияДатаПред.НомерИзделия КАК НомерИзделия,
		|	ИСТИНА КАК КлючевыеДаты
		|ПОМЕСТИТЬ Итог
		|ИЗ
		|	ТекущиеЗначенияДатаПред КАК ТекущиеЗначенияДатаПред
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
		|		ПО ТекущиеЗначенияДатаПред.ПараметрЗаказаНаЗавод = Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты
		|			И ТекущиеЗначенияДатаПред.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессов.Объект
		|			И (Scan_КлючевыеДатыПроцессов.ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод))
		|			И ТекущиеЗначенияДатаПред.ДатаИзмененияПред = Scan_КлючевыеДатыПроцессов.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХарактеристикиЗаказовНаЗавод.ПараметрЗаказаНаЗавод,
		|	ХарактеристикиЗаказовНаЗавод.ТекущееЗначение,
		|	ХарактеристикиЗаказовНаЗавод.ЗаказНаЗавод,
		|	ХарактеристикиЗаказовНаЗавод.ДатаИзменения,
		|	ХарактеристикиЗаказовНаЗавод.Изделие,
		|	ХарактеристикиЗаказовНаЗавод.Заказчик,
		|	ХарактеристикиЗаказовНаЗавод.Клиент,
		|	ХарактеристикиЗаказовНаЗавод.ПредыдущееЗначение,
		|	ХарактеристикиЗаказовНаЗавод.НомерИзделия,
		|	ХарактеристикиЗаказовНаЗавод.КлючевыеДаты
		|ИЗ
		|	ХарактеристикиЗаказовНаЗавод КАК ХарактеристикиЗаказовНаЗавод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Итоги.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	Итоги.НомерИзделия КАК НомерИзделия,
		|	Итоги.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	Итоги.ПредыдущееЗначение КАК ПредыдущееЗначение,
		|	Итоги.ТекущееЗначение КАК ТекущееЗначение,
		|	Итоги.ДатаИзменения КАК ДатаИзменения,
		|	Итоги.Заказчик КАК Заказчик,
		|	Итоги.Клиент КАК Клиент,
		|	Итоги.Изделие КАК Изделие,
		|	Итоги.КлючевыеДаты КАК КлючевыеДаты,
		|	Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение КАК ТипЗаказаНаЗавод
		|ПОМЕСТИТЬ ИтоговаОбщая
		|ИЗ
		|	Итог КАК Итоги
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
		|		ПО Итоги.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ
		|			И (Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод))
		|ГДЕ
		|	(Итоги.ПредыдущееЗначение <> Итоги.ТекущееЗначение
		|			ИЛИ Итоги.ПредыдущееЗначение ЕСТЬ NULL)
		|	И Итоги.КлючевыеДаты
		//rarus bonmak 16.02.2021 17234 ++
		//|	И Итоги.Изделие.ТипПродукта = &ТипПродукта
		|	И Итоги.Изделие.ТипПродукта В (&ТипПродукта)
		//rarus bonmak 16.02.2021 17234 --
		|	И (Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение <> ЗНАЧЕНИЕ(Перечисление.Scan_ТипыЗаказовНаЗавод.OpenOrder)
		|			ИЛИ Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаОбщая.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ИтоговаОбщая.НомерИзделия КАК НомерИзделия,
		|	ИтоговаОбщая.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ИтоговаОбщая.ПредыдущееЗначение КАК ПредыдущееЗначение,
		|	ИтоговаОбщая.ТекущееЗначение КАК ТекущееЗначение,
		|	ИтоговаОбщая.ДатаИзменения КАК ДатаИзменения,
		|	ИтоговаОбщая.Заказчик КАК Заказчик,
		|	ИтоговаОбщая.Клиент КАК Клиент,
		|	ИтоговаОбщая.Изделие КАК Изделие,
		|	ИтоговаОбщая.КлючевыеДаты КАК КлючевыеДаты
		|ПОМЕСТИТЬ ИтоговаяEDD
		|ИЗ
		|	ИтоговаОбщая КАК ИтоговаОбщая
		|ГДЕ
		|	ИтоговаОбщая.ПараметрЗаказаНаЗавод = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.EDD)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаОбщая.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ИтоговаОбщая.НомерИзделия КАК НомерИзделия,
		|	ИтоговаОбщая.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ИтоговаОбщая.ПредыдущееЗначение КАК ПредыдущееЗначение,
		|	ИтоговаОбщая.ТекущееЗначение КАК ТекущееЗначение,
		|	ИтоговаОбщая.ДатаИзменения КАК ДатаИзменения,
		|	ИтоговаОбщая.Заказчик КАК Заказчик,
		|	ИтоговаОбщая.Клиент КАК Клиент,
		|	ИтоговаОбщая.Изделие КАК Изделие,
		|	ИтоговаОбщая.КлючевыеДаты КАК КлючевыеДаты
		|ПОМЕСТИТЬ ИтоговаяPDDCDDCDD2
		|ИЗ
		|	ИтоговаОбщая КАК ИтоговаОбщая
		|ГДЕ
		|	(ИтоговаОбщая.ПараметрЗаказаНаЗавод = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.PDD)
		|			ИЛИ ИтоговаОбщая.ПараметрЗаказаНаЗавод = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD)
		|			ИЛИ ИтоговаОбщая.ПараметрЗаказаНаЗавод = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD2))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаОбщая.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ИтоговаОбщая.НомерИзделия КАК НомерИзделия,
		|	ИтоговаОбщая.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ИтоговаОбщая.ПредыдущееЗначение КАК ПредыдущееЗначение,
		|	ИтоговаОбщая.ТекущееЗначение КАК ТекущееЗначение,
		|	ИтоговаОбщая.ДатаИзменения КАК ДатаИзменения,
		|	ИтоговаОбщая.Заказчик КАК Заказчик,
		|	ИтоговаОбщая.Клиент КАК Клиент,
		|	ИтоговаОбщая.Изделие КАК Изделие,
		|	ИтоговаОбщая.КлючевыеДаты КАК КлючевыеДаты,
		|	ИтоговаОбщая.ТипЗаказаНаЗавод КАК ТипЗаказаНаЗавод
		|ПОМЕСТИТЬ ИтоговаяADD
		|ИЗ
		|	ИтоговаОбщая КАК ИтоговаОбщая
		|ГДЕ
		|	ИтоговаОбщая.ПараметрЗаказаНаЗавод = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ADD)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаОбщая.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ИтоговаОбщая.НомерИзделия КАК НомерИзделия,
		|	ИтоговаОбщая.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ИтоговаОбщая.ПредыдущееЗначение КАК ПредыдущееЗначение,
		|	ИтоговаОбщая.ТекущееЗначение КАК ТекущееЗначение,
		|	ИтоговаОбщая.ДатаИзменения КАК ДатаИзменения,
		|	ИтоговаОбщая.Заказчик КАК Заказчик,
		|	ИтоговаОбщая.Клиент КАК Клиент,
		|	ИтоговаОбщая.Изделие КАК Изделие,
		|	ИтоговаОбщая.КлючевыеДаты КАК КлючевыеДаты,
		|	ИтоговаОбщая.ТипЗаказаНаЗавод КАК ТипЗаказаНаЗавод
		|ПОМЕСТИТЬ ИтоговаяДатаПродажи
		|ИЗ
		|	ИтоговаОбщая КАК ИтоговаОбщая
		|ГДЕ
		|	ИтоговаОбщая.ПараметрЗаказаНаЗавод = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ИтоговаяADD.ЗаказНаЗавод, ИтоговаяДатаПродажи.ЗаказНаЗавод) КАК ЗаказНаЗавод,
		|	ЕСТЬNULL(ИтоговаяADD.НомерИзделия, ИтоговаяДатаПродажи.НомерИзделия) КАК НомерИзделия,
		|	ЕСТЬNULL(ИтоговаяADD.ПараметрЗаказаНаЗавод, ИтоговаяДатаПродажи.ПараметрЗаказаНаЗавод) КАК ПараметрЗаказаНаЗавод,
		|	ИтоговаяADD.ТекущееЗначение КАК ТекущееЗначениеADD,
		|	ЕСТЬNULL(ИтоговаяADD.Заказчик, ИтоговаяДатаПродажи.Заказчик) КАК Заказчик,
		|	ЕСТЬNULL(ИтоговаяADD.Клиент, ИтоговаяДатаПродажи.Клиент) КАК Клиент,
		|	ЕСТЬNULL(ИтоговаяADD.Изделие, ИтоговаяДатаПродажи.Изделие) КАК Изделие,
		|	ЕСТЬNULL(ИтоговаяADD.КлючевыеДаты, ИтоговаяДатаПродажи.КлючевыеДаты) КАК КлючевыеДаты,
		|	ИтоговаяДатаПродажи.ТекущееЗначение КАК ТекущееЗначениеДатаПродажи
		|ПОМЕСТИТЬ ОбщаяяАDDДатаПродажи
		|ИЗ
		|	ИтоговаяADD КАК ИтоговаяADD
		|		ПОЛНОЕ СОЕДИНЕНИЕ ИтоговаяДатаПродажи КАК ИтоговаяДатаПродажи
		|		ПО ИтоговаяADD.ЗаказНаЗавод = ИтоговаяДатаПродажи.ЗаказНаЗавод
		|			И ИтоговаяADD.НомерИзделия = ИтоговаяДатаПродажи.НомерИзделия
		|			И ИтоговаяADD.Изделие = ИтоговаяДатаПродажи.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяPDDCDDCDD2.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ИтоговаяPDDCDDCDD2.НомерИзделия КАК НомерИзделия,
		|	ИтоговаяPDDCDDCDD2.ПараметрЗаказаНаЗавод КАК ПараметрЗаказаНаЗавод,
		|	ИтоговаяPDDCDDCDD2.ПредыдущееЗначение КАК ПредыдущееЗначение,
		|	ИтоговаяPDDCDDCDD2.ТекущееЗначение КАК ТекущееЗначение,
		|	ИтоговаяPDDCDDCDD2.ДатаИзменения КАК ДатаИзменения,
		|	ИтоговаяPDDCDDCDD2.Заказчик КАК Заказчик,
		|	ИтоговаяPDDCDDCDD2.Клиент КАК Клиент
		|ИЗ
		|	ИтоговаяPDDCDDCDD2 КАК ИтоговаяPDDCDDCDD2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИтоговаяEDD КАК ИтоговаяEDD
		|		ПО ИтоговаяPDDCDDCDD2.ЗаказНаЗавод = ИтоговаяEDD.ЗаказНаЗавод
		|			И ИтоговаяPDDCDDCDD2.НомерИзделия = ИтоговаяEDD.НомерИзделия
		|			И ИтоговаяPDDCDDCDD2.Изделие = ИтоговаяEDD.Изделие
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОбщаяяАDDДатаПродажи КАК ОбщаяяАDDДатаПродажи
		|		ПО ИтоговаяPDDCDDCDD2.ЗаказНаЗавод = ОбщаяяАDDДатаПродажи.ЗаказНаЗавод
		|			И ИтоговаяPDDCDDCDD2.НомерИзделия = ОбщаяяАDDДатаПродажи.НомерИзделия
		|			И ИтоговаяPDDCDDCDD2.Изделие = ОбщаяяАDDДатаПродажи.Изделие
		|ГДЕ
		|	(ИтоговаяPDDCDDCDD2.ДатаИзменения > ИтоговаяEDD.ДатаИзменения
		|			ИЛИ ИтоговаяEDD.ДатаИзменения ЕСТЬ NULL)
		|	И ОбщаяяАDDДатаПродажи.ТекущееЗначениеADD ЕСТЬ NULL
		|	И ОбщаяяАDDДатаПродажи.ТекущееЗначениеДатаПродажи ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаЗавод,
		|	НомерИзделия,
		|	ПараметрЗаказаНаЗавод";
	КолвоДней = Scan_ПраваИНастройки.Scan_Право("ДиапазонИзмененияДатPDDCDDCDD2");
	ТекДата = ТекущаяДата();
	ДатаН = НачалоДня(ТекДата) - КолвоДней * 24 * 60 * 60;
	ДатаК = КонецДня(ТекДата);
	//rarus bonmak 16.02.2021 17234 ++
	//ТипПродукта = Scan_ПраваИНастройки.Scan_Право("ТипПродуктаДляАлгоритмовОповещенияОНеобходимостиИзмененияEDD"); 	
	ТипПродукта = Новый Массив;
	
	ТипПродукта = Справочники.Scan_ТипыПродуктов.ПолучитьТипыПродуктовПоНастройке("ТипПродуктаДляАлгоритмовОповещенияОНеобходимостиИзмененияEDD");

	//rarus bonmak 16.02.2021 17234 --
	Запрос.УстановитьПараметр("ДатаК", ДатаК);
	Запрос.УстановитьПараметр("ДатаН", ДатаН);
	Запрос.УстановитьПараметр("ТипПродукта", ТипПродукта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	табРезультат = РезультатЗапроса.Выгрузить();	
		
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабРезультат);
	Построитель.Вывести(ТабДок);
	//меняем названия колонок
	ТабДок.Область("R4C"+2).Текст = "Заказ на завод";
	ТабДок.Область("R4C"+3).Текст = "№ изделия";
	ТабДок.Область("R4C"+4).Текст = "Параметр заказа на завод";
	ТабДок.Область("R4C"+5).Текст = "Предыдущее значение";
	ТабДок.Область("R4C"+6).Текст = "Текущее значение";
	ТабДок.Область("R4C"+7).Текст = "Дата изменения";
	
	Возврат ТабДок;
КонецФункции //rarus bonmak 01.07.2019 14433 --

Функция СформироватьТабДокOrderDeviation(ТекСсылка) //rarus bonmak 08.11.2019 14869 ++
	ТабДок = Новый ТабличныйДокумент;
	//см. СформироватьПисьмоОЗначимыхРасхожденияхКлючевыхДат
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаказыНаЗавод.Заказчик КАК Заказчик,
		|	Scan_ЗаказыНаЗавод.Ссылка КАК ЗаказНаЗавод,
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
		|	Scan_КлючевыеДатыКонтролируемыеДаты.Значение КАК Значение,
		|	Scan_КлючевыеДатыКонтролируемыеДаты.ВидКлючевойДаты КАК ВидКлючевойДаты,
		|	Scan_КлючевыеДатыКонтролируемыеДаты.Период КАК ДатаИзмен,
		|	МАКСИМУМ(Scan_КлючевыеДатыПроцессовПредЗнач.Период) КАК ДатаИзменПред
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		Scan_ТипыПродуктов.Ссылка КАК ТипПродуктаТягач
		|	ИЗ
		|		Справочник.Scan_ТипыПродуктов КАК Scan_ТипыПродуктов
		|	ГДЕ
		|		Scan_ТипыПродуктов.Наименование ПОДОБНО ""Тягач"") КАК ВЗТипПродуктаТягач,
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаОтгрузкиСЗаводаПриEXW)
		|					И ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)) КАК Scan_КлючевыеДатыДатаОтгрузкиСЗавода
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыДатаОтгрузкиСЗавода.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
		|					И ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)) КАК Scan_КлючевыеДатыДатаПродажиДилеру
		|		ПО (Scan_КлючевыеДатыДатаПродажиДилеру.Объект = Scan_ЗаказыНаЗавод.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПортСПБ)
		|					И ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)) КАК Scan_КлючевыеДатыДатаCDDфакт
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыДатаCDDфакт.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ВидКлючевойДаты.Ссылка В
		|					(ВЫБРАТЬ
		|						Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.КонтролируемыйПараметрЗаказаНаЗавод.Ссылка КАК КонтролируемыйПараметрЗаказаНаЗаводСсылка
		|					ИЗ
		|						Справочник.Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге КАК Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге
		|					ГДЕ
		|						Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.ИспользоватьПриМониторинге)) КАК Scan_КлючевыеДатыКонтролируемыеДаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессовПредЗнач
		|			ПО Scan_КлючевыеДатыКонтролируемыеДаты.Объект = Scan_КлючевыеДатыПроцессовПредЗнач.Объект
		|				И Scan_КлючевыеДатыКонтролируемыеДаты.ВидКлючевойДаты = Scan_КлючевыеДатыПроцессовПредЗнач.ВидКлючевойДаты
		|				И Scan_КлючевыеДатыКонтролируемыеДаты.Период > Scan_КлючевыеДатыПроцессовПредЗнач.Период
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыКонтролируемыеДаты.Объект
		|ГДЕ
		//rarus BProg_Dekin 20.05.2020 mantis 0015999 ++ Вместо статуса заказа используется статус продукта
		//|	Scan_ЗаказыНаЗавод.СтатусЗаказаЛокальный = ЗНАЧЕНИЕ(Справочник.Scan_ЛокальныеСтатусыЗаказовНаЗавод.OPEN)
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ЛокальныйСтатусПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ЛокальныеСтатусыПродуктов.OPEN)
		//rarus BProg_Dekin 20.05.2020 mantis 0015999 --
		|	И Scan_ЗаказыНаЗавод.Заказчик <> ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
		|	И НЕ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие ЕСТЬ NULL
		|	И Scan_КлючевыеДатыДатаПродажиДилеру.Значение ЕСТЬ NULL
		|	И Scan_КлючевыеДатыДатаОтгрузкиСЗавода.Значение ЕСТЬ NULL
		|	И НЕ((Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ГруппыПродуктов.ТранспортныеСредства)
		|				ИЛИ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ГруппыПродуктов.Двигатели))
		|				И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ТипПродукта = ВЗТипПродуктаТягач.ТипПродуктаТягач
		|				И НЕ Scan_КлючевыеДатыДатаCDDфакт.Значение ЕСТЬ NULL)
		|	И НЕ Scan_КлючевыеДатыКонтролируемыеДаты.Значение ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаказыНаЗавод.Заказчик,
		|	Scan_ЗаказыНаЗавод.Ссылка,
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие,
		|	Scan_КлючевыеДатыКонтролируемыеДаты.Значение,
		|	Scan_КлючевыеДатыКонтролируемыеДаты.ВидКлючевойДаты,
		|	Scan_КлючевыеДатыКонтролируемыеДаты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ВременнаяТаблица.Изделие КАК Изделие,
		|	ВременнаяТаблица.ВидКлючевойДаты КАК ПараметрЗаказаНаЗавод,
		|	ВременнаяТаблица.Значение КАК ТекущееЗначение,
		|	Scan_КлючевыеДатыПроцессов.Значение КАК ПредыдущееЗначение,
		|	ВременнаяТаблица.ДатаИзменПред КАК ДатаИзменения,
		|	ВременнаяТаблица.Заказчик КАК Заказчик,
		|	ВременнаяТаблица.Изделие.СОП КАК СОП
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
		|		ПО ВременнаяТаблица.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессов.Объект
		|			И (Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ВременнаяТаблица.ВидКлючевойДаты)
		|			И (Scan_КлючевыеДатыПроцессов.Период = ВременнаяТаблица.ДатаИзменПред)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге КАК Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге
		|		ПО ВременнаяТаблица.ВидКлючевойДаты = Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.КонтролируемыйПараметрЗаказаНаЗавод
		|			И (Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.ИспользоватьПриМониторинге)
		|ГДЕ
		|	НЕ Scan_КлючевыеДатыПроцессов.Значение ЕСТЬ NULL
		|	И РАЗНОСТЬДАТ(Scan_КлючевыеДатыПроцессов.Значение, ВременнаяТаблица.Значение, ДЕНЬ) > Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.МаксимальноеОтклонение
		|	И ВременнаяТаблица.Заказчик = &Заказчик";
	Запрос.УстановитьПараметр("Заказчик", ТекСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	табРезультат = РезультатЗапроса.Выгрузить();	
		
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабРезультат);
	Построитель.Вывести(ТабДок);
	//меняем названия колонок
	ТабДок.Область("R4C"+2).Текст = "Заказ на завод";
	ТабДок.Область("R4C"+3).Текст = "№ изделия";
	ТабДок.Область("R4C"+4).Текст = "Параметр заказа на завод";
	ТабДок.Область("R4C"+5).Текст = "Текущее значение";
	ТабДок.Область("R4C"+6).Текст = "Предыдущее значение";
	ТабДок.Область("R4C"+7).Текст = "Дата изменения";
	ТабДок.Область("R4C"+8).Текст = "Заказчик";
	ТабДок.Область("R4C"+9).Текст = "СОП";
	
	Возврат ТабДок;
КонецФункции //rarus bonmak 08.11.2019 14869 --

// rarus agar 10.03.2022 15689 ++
Процедура ОтправитьДетализированныйАкт(ЗаявкаПеревозчику, СообщениеОтправки = "") Экспорт
	
	ПараметрыОтправки = Новый Структура("Автоматически", Истина);
	РезультатОтправкиПисьма = ОтправитьПФ(ЗаявкаПеревозчику, "ПФ_MXL_ДетализированныйАкт", ПараметрыОтправки);
	
КонецПроцедуры
// rarus agar 10.03.2022 15689 --

#КонецОбласти

#Область УстаревшийКод
	
//rarus BProg_Gladkov 02.05.2020 0015962 +++ Удалено право
//Процедура ОтправитьПисьмоОЗагрузкеГрузовогоБилета(Ссылка = Неопределено, ДопТекст = "") Экспорт
//	ПараметрыОтправки = Новый Структура("ДополнительныйТекст", ДопТекст);	
//	ПисьмоОтправлено = ОтправитьПисьмоПоШаблонуИзПрава("ШаблонЗагрузкаГрузовогоБилета", , ПараметрыОтправки);
//КонецПроцедуры  
//rarus BProg_Gladkov 04.05.2020 0015962 -- 

//rarus BProg_Gladkov 25.11.2019 0014452 ++ регламентное задание "ОтправитьНапоминанияАдминистраторамПродаж" удалено
//Процедура ОтправитьПисьмоНапоминаниеДилерамПовторное(Ссылка = Неопределено) Экспорт
//	ИмяСобытия = НСтр("ru = 'Регламентное задание. Отправить напоминания администраторам продаж'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
//	
//	ШаблонПисьма = Scan_ПраваИНастройки.Scan_Право("ШаблонНапоминаниеДилерамПовторное");
//	Если НЕ ЗначениеЗаполнено(ШаблонПисьма) Тогда
//		Возврат;	
//	КонецЕсли;
//	//rarus bonmak 05.08.2019 14427 изменил запрос
//	
//	// rarus tenkam 19.08.2019 mantis 14427 +++
//	//Утерян старый запрос - восстановлен из истории хранилища
//	
//	//Запрос.Текст = 
//	//"ВЫБРАТЬ
//	//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод,
//	//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие КАК Изделие,
//	//|	ВЫБОР
//	//|		КОГДА ТИПЗНАЧЕНИЯ(Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Продукт.Заказчик) = ТИП(Справочник.Scan_Дилеры)
//	//|			ТОГДА Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Продукт.Заказчик.Контрагент
//	//|		ИНАЧЕ ВЫБОР
//	//|				КОГДА ТИПЗНАЧЕНИЯ(Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Продукт.Заказчик) = ТИП(Справочник.Scan_Контрагенты)
//	//|					ТОГДА Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Продукт.Заказчик
//	//|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
//	//|			КОНЕЦ
//	//|	КОНЕЦ КАК Заказчик,
//	//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие.НомерИзделия КАК НомерИзделия
//	//|ПОМЕСТИТЬ ТаблицаСоответствий
//	//|ИЗ
//	//|	РегистрСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних  
//	//|ГДЕ
//	//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.CDDY = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
//	//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьБукингЛист = ИСТИНА
//	//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
//	//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьАдресДоставки = ЛОЖЬ
//	//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
//	//|;
//	//|
//	//|////////////////////////////////////////////////////////////////////////////////
//	//|ВЫБРАТЬ
//	//|	ТаблицаСоответствий.Заказчик КАК Заказчик,
//	//|	ТаблицаСоответствий.Изделие КАК Изделие,
//	//|	ТаблицаСоответствий.ЗаказНаЗавод КАК ЗаказНаЗавод,
//	//|	ТаблицаСоответствий.Изделие.НомерИзделия КАК НомерИзделия
//	//|ИЗ
//	//|	ТаблицаСоответствий КАК ТаблицаСоответствий
//	//|ГДЕ
//	//|	ВЫБОР
//	//|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
//	//|					ИЛИ &Ссылка = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
//	//|				ТОГДА ИСТИНА
//	//|			ИНАЧЕ ТаблицаСоответствий.Заказчик = &Ссылка
//	//|		КОНЕЦ
//	//|
//	//|УПОРЯДОЧИТЬ ПО
//	//|	Заказчик,
//	//|	Изделие";	//rarus tenkam 31.07.2017 mantis 10085 +
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод,
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
//	|	ЕСТЬNULL(Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)) КАК Заказчик,
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.НомерИзделия КАК НомерИзделия
//	|ПОМЕСТИТЬ ТаблицаСоответствий
//	|ИЗ
//	|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних(, Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Заказчик)) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
//	|		ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ
//	|ГДЕ
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDDY = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьБукингЛист = ИСТИНА
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
//	//|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьАдресДоставки = ЛОЖЬ //rarus BProg_Dekin 11.11.2019 0014452 +- "ЕстьАдресДоставки" удален
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаСоответствий.Заказчик КАК Заказчик,
//	|	ТаблицаСоответствий.Изделие КАК Изделие,
//	|	ТаблицаСоответствий.ЗаказНаЗавод КАК ЗаказНаЗавод,
//	|	ТаблицаСоответствий.Изделие.НомерИзделия КАК НомерИзделия
//	|ИЗ
//	|	ТаблицаСоответствий КАК ТаблицаСоответствий
//	|ГДЕ
//	|	ВЫБОР
//	|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
//	|					ИЛИ &Ссылка = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ТаблицаСоответствий.Заказчик = &Ссылка
//	|		КОНЕЦ
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Заказчик,
//	|	Изделие";	//rarus tenkam 31.07.2017 mantis 10085 +
//	
//	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
//	Запрос.УстановитьПараметр("Ссылка", Неопределено);
//	РезультатЗапроса = Запрос.Выполнить(); 
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		//Нечего отправлять 		
//		Возврат;
//	КонецЕсли;
//	
//	ТаблицаДанные = РезультатЗапроса.Выгрузить();
//	ТаблицаДанныеКопия = ТаблицаДанные.Скопировать();
//	ТаблицаДанныеКопия.Свернуть("Заказчик");
//	МассивЗаказчиков = ТаблицаДанныеКопия.ВыгрузитьКолонку("Заказчик");
//	Для Каждого ТекЗаказчик Из МассивЗаказчиков Цикл
//		Если НЕ ЗначениеЗаполнено(ТекЗаказчик) Тогда
//			Продолжить;
//		КонецЕсли;
//		СообщениеОтправки = "";
//		ВсеОк = ОтправитьПисьмоПоШаблону(ШаблонПисьма,ТекЗаказчик,СообщениеОтправки);
//		Сообщить(СообщениеОтправки);
//		Если НЕ ВсеОк Тогда
//			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказчику %1 не удалось отправить письмо-напоминание по изделиям'"), ТекЗаказчик),);
//		Иначе
//			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказчику %1 отправлено письмо-напоминание по изделиям'"), ТекЗаказчик),);
//		КонецЕсли;
//	КонецЦикла;  
//	
//КонецПроцедуры  
//rarus tenkam 10.11.2017 mantis 8465 ---
//rarus BProg_Gladkov 25.11.2019 0014452 --

//Функция ПечатьПоХО(ДокументСсылка, ИмяПФ = "") //rarus BProg_Gladkov 02.05.2020 0015962 +- Удалена.
//	ТабДокПФ = Неопределено;
//	
//	МассивДокументов = Новый Массив;
//	МассивДокументов.Добавить(ДокументСсылка);
//	
//	ХозОперация = ДокументСсылка.ХозОперация;
//	
//	ПараметрыПечати = Новый Структура;
//	ПараметрыПечати.Вставить("ЗаголовокФормы", 				 "Печатная форма");                    	
//	ПараметрыПечати.Вставить("ВыводитьСпецификацииИзделий",  Ложь);
//	ПараметрыПечати.Вставить("ПоказыватьДопУсловия",         Ложь);
//	ПараметрыПечати.Вставить("ДопУсловия",                   Неопределено);
//	ПараметрыПечати.Вставить("ВыводитьГруппировкиИзделий",Ложь);
//	ПараметрыПечати.Вставить("ВыводитьТаможенноеОформление",Ложь);
//	ПараметрыПечати.Вставить("ТОСтранаОтправления", Неопределено);
//	ПараметрыПечати.Вставить("ТОСтранаПрибытия", Неопределено);

//	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
//		ПараметрыПечати.Вставить("ТаблицаПеревозчиков",			 Документы.Scan_ЗаявкаНаДействие.ПолучитьТаблицуПеревозчиков(ДокументСсылка));
//	КонецЕсли;
//	
//	Если ХозОперация = Справочники.Scan_ХозяйственныеОперации.Доставка Тогда 
//		ТабДокПФ = Неопределено;
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПостановкаНаХранение(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПередачаВПроизводство(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПередачаВПроизводство(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПокупкаУПоставщикаИПередачаТК(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПокупкаУПоставщикаИПродажаТретьемуЛицу(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПокупкаУПоставщикаСПостановкойНаХранение(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати); 		
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПостановкаНаХранение Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_ПостановкаНаХранение(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати); 
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_СнятиеСХраненияИПередачаВПроизводство(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_СнятиеСХраненияИПередачаНаХранениеТретьемуЛицу(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);	
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_СнятиеСХраненияИПередачаТК(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_СнятиеСХраненияИПродажаТретьемуЛицу(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьПФ_MXL_СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ХозОперация = Справочники.Scan_ХозяйственныеОперации.ЗаявкаПеревозчику Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаПеревозчику.ПечатьПФ_MXL_ЗаявкаПеревозчику(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	КонецЕсли;
//	
//	//rarus tenkam 10.11.2017 mantis 8465 +++
//	Если ИмяПФ = "М15" Тогда 
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьМ15(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ИмяПФ = "МХ3" Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьМХ3(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ИмяПФ = "МХ1" Тогда
//		ТабДокПФ = Документы.Scan_ЗаявкаНаДействие.ПечатьМХ1(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	ИначеЕсли ИмяПФ = "ПФ_MXL_ТранспортнаяНакладная" Тогда
//	    ТабДокПФ = Документы.Scan_ЗаявкаПеревозчику.ПечатьПФ_MXL_ТранспортнаяНакладная(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	//rarus tenkam 20.11.2017 mantis 9427 +++	
//	ИначеЕсли ИмяПФ = "ПФ_MXL_СервисныеОперацииПриКТС" Тогда
//	    ТабДокПФ = Документы.Scan_ЧекЛистТехническогоСостоянияИзделия.ПечатьПФ_MXL_СервисныеОперацииПриКТС(МассивДокументов, Новый СписокЗначений, , ПараметрыПечати);
//	//rarus tenkam 20.11.2017 mantis 9427 ---
//	КонецЕсли;
//	//rarus tenkam 10.11.2017 mantis 8465 ---
//	
//	Возврат ТабДокПФ;
//	
//КонецФункции

#КонецОбласти 
