///////////////////////////////////////////////////////////////////////
////// ВАЖНО!!! У ПРОЦЕДУР И ФУНКЦИЙ, УКАЗАННЫХ КАК МЕТОД РЕГЛАМЕНТНОГО ЗАДАНИЯ, НЕОБХОДИМО ДОБАВЛЯТЬ 1-Й ПАРАМЕТР "СТРУКТУРАПАРАМЕТРОВ"!
////// ПАРАМЕТР НУЖЕН ДЛЯ ХРАНЕНИЯ ПРИЗНАКА "ПРОВЕРЯТЬНАЗАВИСАНИЕ"
////// ПРИ ОТСУТСТВИИ ПАРАМЕТРА РЕГЛАМЕНТНОЕ ЗАДАНИЕ НЕ БУДЕТ ВЫПОЛНЯТЬСЯ ИЗ-ЗА ОШИБКИ "СЛИШКОМ МНОГО ФАКТИЧЕСКИХ ПАРАМЕТРОВ ДЛЯ МЕТОДА ФОНОВОГО ЗАДАНИЯ "
///////////////////////////////////////////////////////////////////////





///////////////////////////////////////////////////////////////////////
////// РЕГЛАМЕНТНОЕ ЗАДАНИЕ УСТАНОВКИ ПРИЗНАКА "В АРХИВЕ"
///////////////////////////////////////////////////////////////////////

//rarus sergei 16.08.2016 mantis 7110 ++
Функция УстановитьПризнакВАрхивеДляИзделийПриЗапуске(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	Если СтандартныеПодсистемыСервер.НеобходимоОбновлениеПараметровРаботыПрограммы() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Обработчик регламентного задания УстановкаПризнакаВАрхивеДляИзделий.
//
Процедура УстановитьПризнакВАрхивеДляИзделий(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_УстановкаПризнакаВАрхивеДляИзделий);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_УстановкаПризнакаВАрхивеДляИзделий.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	Если НЕ ЗначениеЗаполнено(Scan_ПраваИНастройки.Scan_Право("СрокУстраненияНедостатковПослеПродажиИзделия")) Тогда
	   Возврат;  
	КонецЕсли;
	ИмяСобытия = НСтр("ru = 'Изделия.УстановкаПризнакаВАрхиве'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная установка признака в архиве для изделий'"));
	ТекущаяДата = ТекущаяДатаСеанса();
	КоличествоПеремещенныхИзделийВАрхив = 0;
	ИзделияБезДатыПомещенияВАрхив = ПолучитьИзделияБезДатыПомещенияВАрхив(); //rarus bonmak 13.08.2019 14427 изменил переменные	
	Для каждого Изделие Из ИзделияБезДатыПомещенияВАрхив Цикл //rarus bonmak 13.08.2019 14427 изменил переменные
	    // rarus tenkam 20.09.2019 mantis 14834 +++
	    //Флаг = ПроверитьИзделие(Изделие.Ссылка,ТекущаяДата); //rarus bonmak 13.08.2019 14427 изменил переменные	
		Флаг = ПроверитьИзделие(Изделие,ТекущаяДата);
		// rarus tenkam 20.09.2019 mantis 14834 ---
		
		Если Флаг Тогда		
			КоличествоПеремещенныхИзделийВАрхив = КоличествоПеремещенныхИзделийВАрхив+1;		
		КонецЕсли;
	КонецЦикла;	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Информация, , ,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершена регламентная установка признака в архиве для изделий (Перемещено изделий  в архив: %1)'"),
			КоличествоПеремещенныхИзделийВАрхив));

КонецПроцедуры

Функция ПроверитьИзделие(Изделие,ДатаПК) Экспорт //rarus bonmak 13.08.2019 14427 изменил переменные
	//rarus tenkam 01.03.2017 mantis 8415 +++
	//rarus bonmak 13.08.2019 14427 ++
	//Если ЗначениеЗаполнено(Продукт.Изделие) Тогда 
		Если ЗначениеЗаполнено(Изделие.Замечание) И Изделие.Замечание <> "НОРМА" Тогда
			Если ДатаПК < Изделие.КрайняяДатаУстраненияНедостатков Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		//ПродуктОбъект = Продукт.ПолучитьОбъект();
		//ПродуктОбъект.ПродуктВАрхиве = ДатаПК;
		Попытка
			//ПродуктОбъект.Записать();
			
			// rarus tenkam 31.05.2019 mantis 14224 +++
			//Если ЗначениеЗаполнено(ПродуктОбъект.Изделие) Тогда
				// Запишем ключевую дату 
				РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(Изделие, 
												Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПК,
												Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве, ТекущаяДата());	
			//КонецЕсли;
			// rarus tenkam 31.05.2019 mantis 14224 ---

			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки; 		
	//Иначе 
	//	Возврат Ложь;
	//КонецЕсли;
	//ДатаТребуемойОтправкиПродуктаВАрхив = Продукт.Изделие.КрайняяДатаУстраненияНедостатков;
	//Флаг = Ложь;
	//Если ДатаПК > ДатаТребуемойОтправкиПродуктаВАрхив Тогда
	//	ПродуктОбъект = Продукт.ПолучитьОбъект();
	//	ПродуктОбъект.ПродуктВАрхиве = ДатаПК;
	//	ПродуктОбъект.Записать();
	//	Флаг = Истина;
	//КонецЕсли;
	//Возврат Флаг;
	//rarus tenkam 01.03.2017 mantis 8415 ---
	//rarus bonmak 13.08.2019 14427 --
КонецФункции	

Функция ПолучитьИзделияБезДатыПомещенияВАрхив()
	// rarus tenkam 20.09.2019 mantis 14834 +++
	////rarus bonmak 13.08.2019 14427 изменил запрос
	//Запрос = Новый Запрос;
	//Запрос.Текст ="ВЫБРАТЬ
	//              |	Scan_Изделия.Ссылка КАК Ссылка
	//              |ИЗ
	//              |	Справочник.Scan_Изделия КАК Scan_Изделия
	//              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	//              |				,
	//              |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
	//              |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру
	//              |		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Объект
	//              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	//              |				,
	//              |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
	//              |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиДилеру
	//              |		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиДилеру.Объект
	//              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	//              |				,
	//              |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
	//              |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве
	//              |		ПО Scan_Изделия.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Объект
	//              |ГДЕ
	//			  //rarus bonmak 26.08.2019 14800 ++
	//			  //было
	//			  //|	(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение <> ДАТАВРЕМЯ(1, 1, 1)
	//			  //|			ИЛИ НЕ Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение ЕСТЬ NULL)
	//			  //|	И (Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиДилеру.Значение <> ДАТАВРЕМЯ(1, 1, 1)
	//			  //|			ИЛИ НЕ Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиДилеру.Значение ЕСТЬ NULL)
	//			  
	//			  |	Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение <> ДАТАВРЕМЯ(1, 1, 1)
	//              |	И Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиДилеру.Значение <> ДАТАВРЕМЯ(1, 1, 1)
	//               //rarus bonmak 26.08.2019 14800 --
	//              |	И (Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение = ДАТАВРЕМЯ(1, 1, 1)
	//              |			ИЛИ Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение ЕСТЬ NULL)";
	////Запрос.УстановитьПараметр("ПустаяДата",Дата('00010101')); //rarus bonmak 13.08.2019 14427
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	//Возврат Результат;
	
	Запрос = Новый Запрос;
	//rarus vikhle 10.04.2020 mt 14870 +++ изменил запрос
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Scan_Изделия.Ссылка КАК Ссылка
	//               |ПОМЕСТИТЬ ИзделияБезДатыВАрхиве
	//               |ИЗ
	//               |	Справочник.Scan_Изделия КАК Scan_Изделия
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	//               |				,
	//               |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
	//               |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве
	//               |		ПО Scan_Изделия.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Объект
	//               |ГДЕ
	//               |	(Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение = ДАТАВРЕМЯ(1, 1, 1)
	//               |			ИЛИ Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение ЕСТЬ NULL)
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	МАКСИМУМ(Scan_МестонахождениеИзделий.Период) КАК Период,
	//               |	Scan_МестонахождениеИзделий.Изделие КАК Изделие
	//               |ПОМЕСТИТЬ ПоследнийПериодДвиженияДляИзделия
	//               |ИЗ
	//               |	РегистрНакопления.Scan_МестонахождениеИзделий КАК Scan_МестонахождениеИзделий
	//               |ГДЕ
	//               |	Scan_МестонахождениеИзделий.Изделие В
	//               |			(ВЫБРАТЬ
	//               |				ИзделияБезДатыВАрхиве.Ссылка КАК Ссылка
	//               |			ИЗ
	//               |				ИзделияБезДатыВАрхиве КАК ИзделияБезДатыВАрхиве)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	Scan_МестонахождениеИзделий.Изделие
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ПоследнийПериодДвиженияДляИзделия.Изделие КАК Изделие,
	//               |	ПоследнийПериодДвиженияДляИзделия.Период КАК Период,
	//               |	МАКСИМУМ(Scan_МестонахождениеИзделий.ХозОперация) КАК ХозОперация
	//               |ПОМЕСТИТЬ ИзделияПоследнееДвижение
	//               |ИЗ
	//               |	РегистрНакопления.Scan_МестонахождениеИзделий КАК Scan_МестонахождениеИзделий
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийПериодДвиженияДляИзделия КАК ПоследнийПериодДвиженияДляИзделия
	//               |		ПО Scan_МестонахождениеИзделий.Период = ПоследнийПериодДвиженияДляИзделия.Период
	//               |			И Scan_МестонахождениеИзделий.Изделие = ПоследнийПериодДвиженияДляИзделия.Изделие
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ПоследнийПериодДвиженияДляИзделия.Изделие,
	//               |	ПоследнийПериодДвиженияДляИзделия.Период
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ИзделияПоследнееДвижение.Изделие КАК Изделие,
	//               |	ИзделияПоследнееДвижение.Период КАК ДатаУбытия
	//               |ИЗ
	//               |	ИзделияПоследнееДвижение КАК ИзделияПоследнееДвижение
	//               |ГДЕ
	//               |	ИзделияПоследнееДвижение.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.УбытиеИзУчета)";	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_Изделия.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ИзделияБезДатыВАрхиве
	               |ИЗ
	               |	Справочник.Scan_Изделия КАК Scan_Изделия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	               |				,
	               |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
	               |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве
	               |		ПО Scan_Изделия.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	               |				,
	               |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
	               |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.Sow)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихSoW
	               |		ПО Scan_Изделия.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихSoW.Объект
	               |ГДЕ
	               |	(Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение ЕСТЬ NULL)
	               |	И Scan_КлючевыеДатыПроцессовСрезПоследнихSoW.Значение <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И Scan_КлючевыеДатыПроцессовСрезПоследнихSoW.Значение ЕСТЬ НЕ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Scan_МестонахождениеИзделий.Период) КАК Период,
	               |	Scan_МестонахождениеИзделий.Изделие КАК Изделие
	               |ПОМЕСТИТЬ ПоследнийПериодДвиженияДляИзделия
	               |ИЗ
	               |	РегистрНакопления.Scan_МестонахождениеИзделий КАК Scan_МестонахождениеИзделий
	               |ГДЕ
	               |	Scan_МестонахождениеИзделий.Изделие В
	               |			(ВЫБРАТЬ
	               |				ИзделияБезДатыВАрхиве.Ссылка КАК Ссылка
	               |			ИЗ
	               |				ИзделияБезДатыВАрхиве КАК ИзделияБезДатыВАрхиве)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_МестонахождениеИзделий.Изделие
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследнийПериодДвиженияДляИзделия.Изделие КАК Изделие,
	               |	ПоследнийПериодДвиженияДляИзделия.Период КАК Период,
	               |	МАКСИМУМ(Scan_МестонахождениеИзделий.ХозОперация) КАК ХозОперация
	               |ПОМЕСТИТЬ ИзделияПоследнееДвижение
	               |ИЗ
	               |	РегистрНакопления.Scan_МестонахождениеИзделий КАК Scan_МестонахождениеИзделий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийПериодДвиженияДляИзделия КАК ПоследнийПериодДвиженияДляИзделия
	               |		ПО Scan_МестонахождениеИзделий.Период = ПоследнийПериодДвиженияДляИзделия.Период
	               |			И Scan_МестонахождениеИзделий.Изделие = ПоследнийПериодДвиженияДляИзделия.Изделие
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоследнийПериодДвиженияДляИзделия.Изделие,
	               |	ПоследнийПериодДвиженияДляИзделия.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИзделияПоследнееДвижение.Изделие КАК Изделие,
	               |	ИзделияПоследнееДвижение.Период КАК ДатаУбытия
	               |ИЗ
	               |	ИзделияПоследнееДвижение КАК ИзделияПоследнееДвижение
	               |ГДЕ
	               |	ИзделияПоследнееДвижение.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.УбытиеИзУчета)";	
	//rarus vikhle 10.04.2020 mt 14870 ---
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоДнейИзНастройки = Scan_ПраваИНастройки.Scan_Право("КоличествоДнейДоПеремещенияВАрхив");
	МассивИзделий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//rarus bonmak 10.12.2020 16961 ++
		Если ВыборкаДетальныеЗаписи.Изделие.БУ Тогда 
			ДатаПоступленияБУНаСклад = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ВыборкаДетальныеЗаписи.Изделие,
			Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИзделияБУНаСклад),
			Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИзделияБУНаСклад,ТекущаяДата());
			Если ЗначениеЗаполнено(ДатаПоступленияБУНаСклад) Тогда
				Если ВыборкаДетальныеЗаписи.ДатаУбытия <= ДатаПоступленияБУНаСклад Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//rarus bonmak 10.12.2020 16961 --
		
		Если (ВыборкаДетальныеЗаписи.ДатаУбытия + КоличествоДнейИзНастройки * 24 * 60 *60) < ТекущаяДата() Тогда
			МассивИзделий.Добавить(ВыборкаДетальныеЗаписи.Изделие);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИзделий;
	// rarus tenkam 20.09.2019 mantis 14834 ---

КонецФункции
//rarus sergei 16.08.2016 mantis 7110 --

///////////////////////////////////////////////////////////////////////
////// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ ИНТЕГРАЦИИ С 1БД
///////////////////////////////////////////////////////////////////////

// rarus tenkam 19.08.2016 mantis 6897 ++ (загрузка стока)

// Процедура - Загрузить сток
//
Процедура ЗагрузитьСток(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ЗагрузкаСтокаПродуктов);

	//ИмяСобытия = НСтр("ru = 'Регламентное задание. Загрузить сток продуктов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	//	НСтр("ru = 'Начата регламентная загрузка стока продуктов'"));
	//
	//ИмяМетода = "GetListOfProduct";
	//СообщениеОбОшибке = "";
	//Отказ = Ложь;
	//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	//Если НЕ Scan_ПраваИНастройки.Scan_Право("ПервоначальноеЗаполнение") Тогда
	//	
	//	// rarus tenkam 14.05.2018 mantis 12939 +++
	//	ДатаНачала = Дата('00010101');
	//	ЗагружатьОтДатыУспешногоЗапускаРЗ = Scan_ПраваИНастройки.Scan_Право("ЗагружатьСтокПродуктовОтДатыУспешногоЗапускаРЗ"); 
	//	Если ЗагружатьОтДатыУспешногоЗапускаРЗ Тогда
	//		ПоследняяДата = Scan_ВебСервисы.ПолучитьПоследнийУспешныйВызов();
	//		Если ЗначениеЗаполнено(ПоследняяДата) Тогда
	//			ДатаНачала = ПоследняяДата;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
	//	// rarus tenkam 14.05.2018 mantis 12939 ---
	//	        						
	//		//rarus tenkam 09.03.2017 update +++
	//		КоличествоЧасов = Scan_ПраваИНастройки.Scan_Право("КоличествоЧасовПериодаИзменений");
	//		Если НЕ ЗначениеЗаполнено(КоличествоЧасов) Тогда
	//			КоличествоЧасов = 24;
	//		КонецЕсли;
	//		//rarus tenkam 09.03.2017 ---
	//		
	//		// rarus tenkam 14.05.2018 mantis 12939 +++
	//		//СтруктураПараметров["ДатаНачала"] = ТекущаяДата() - 60*60*КоличествоЧасов;
	//		//СтруктураПараметров["ДатаОкончания"] = ТекущаяДата();
	//		ДатаНачала = ТекущаяДата() - 60*60*КоличествоЧасов;
	//	КонецЕсли;
	//	
	//	СтруктураПараметров["ДатаНачала"] = ДатаНачала;
	//	СтруктураПараметров["ДатаОкончания"] = ТекущаяДата() + 60;	//добавим минуту
	//    // rarus tenkam 14.05.2018 mantis 12939 ---                               		
	//	
	//КонецЕсли;
	//ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	//Если НЕ Отказ Тогда
	//	СсылкаЭлемента = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникПродукты(ТекЭлементОтвет, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	//Иначе
	//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекЭлементОтвет + СообщениеОбОшибке);	
	//КонецЕсли;
	//
	//////rarus tenkam 04.04.2017 TLMS 011 +++
	////ОбновитьЗаказыНаЗавод();
	////ОбновитьИзделия();
	//////rarus tenkam 04.04.2017 TLMS 011 ---
	//	 	
	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная загрузка стока продуктов'"));
	
КонецПроцедуры
//rarus tenkam 19.08.2016 mantis 6897 --

//rarus bonmak 16452 23.09.2020 ++
//rarus tenkam 04.04.2017 TLMS 011 +++
//Процедура ОбновитьЗаказыНаЗавод()
//	ИмяСобытия = НСтр("ru = 'Регламентное задание. Загрузить сток продуктов. Обновление заказов на завод'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Начато обновление заказов на завод'"));
//	
//	//rarus bonmak 13.08.2019 14427 изменил запрос
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	|ИЗ
//	|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
//	|				,
//	|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
//	|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве
//	|		ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие = Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Объект
//	|ГДЕ
//	|	(Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение = ДАТАВРЕМЯ(1, 1, 1)
//	|			ИЛИ Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение ЕСТЬ NULL)
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.IDExternalSystemProduct <> """"
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод <> ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка)
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ДатаОбновления >= &ДатаНачала
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ДатаОбновления <= &ДатаОкончания
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.IDExternalSystem <> """"
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод";
//	
//	КоличествоЧасов = Scan_ПраваИНастройки.Scan_Право("КоличествоЧасовПериодаИзменений");
//	Если НЕ ЗначениеЗаполнено(КоличествоЧасов) Тогда
//		КоличествоЧасов = 24;
//	КонецЕсли;
//	Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 60*60*КоличествоЧасов);
//	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		ИмяМетода = "GetOrderToDelivery";
//		СообщениеОбОшибке = "";
//		Отказ = Ложь;
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
//		СтруктураПараметров.Вставить("GUID", ВыборкаДетальныеЗаписи.ЗаказНаЗавод.IDExternalSystem);
//		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
//		Если НЕ Отказ Тогда
//			СсылкаПродукта = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникЗаказыНаЗавод(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
//		КонецЕсли;	
//	КонецЦикла;
//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено обновление заказов на завод'"));
//	
//КонецПроцедуры	

//Процедура ОбновитьИзделия()
//	ИмяСобытия = НСтр("ru = 'Регламентное задание. Загрузить сток продуктов. Обновление изделий'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Начато обновление изделий'"));

//	//rarus bonmak 13.08.2019 14427 изменил запрос
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие
//	|ИЗ
//	|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
//	|				,
//	|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
//	|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве
//	|		ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие = Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Объект
//	|ГДЕ
//	|	(Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение = ДАТАВРЕМЯ(1, 1, 1)
//	|			ИЛИ Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение ЕСТЬ NULL)
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.IDExternalSystemProduct <> """"
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ДатаОбновления >= &ДатаНачала
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ДатаОбновления <= &ДатаОкончания
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.IDExternalSystem <> """"
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие";
//	
//	КоличествоЧасов = Scan_ПраваИНастройки.Scan_Право("КоличествоЧасовПериодаИзменений");
//	Если НЕ ЗначениеЗаполнено(КоличествоЧасов) Тогда
//		КоличествоЧасов = 24;
//	КонецЕсли;
//	Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 60*60*КоличествоЧасов);
//	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		//Нужна проверка, для двигателей - GetEngines
//		ТекГруппа = ВыборкаДетальныеЗаписи.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта;
//		ИмяМетода = ?(ТекГруппа = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства, "GetChassis", "GetEngines");
//		//ИмяМетода = "GetChassis";
//		СообщениеОбОшибке = "";
//		Отказ = Ложь;
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
//		СтруктураПараметров.Вставить("GUID", ВыборкаДетальныеЗаписи.Изделие.IDExternalSystem);
//		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
//		Если НЕ Отказ Тогда
//			СсылкаПродукта = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникИзделия(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
//		КонецЕсли;	
//	КонецЦикла;
//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено обновление изделий'"));

//КонецПроцедуры	
//rarus tenkam 04.04.2017 TLMS 011 ---
//rarus bonmak 16452 23.09.2020 --	       
//rarus tenkam 14.11.2016 mantis 7092 ++

// Процедура - Загрузить данные по СОП
//
Процедура ЗагрузитьДанныеПоСОП(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ЗагрузитьДанныеПоСОП);

	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ЗагрузитьДанныеПоСОП.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Загрузить данные по СОП'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная загрузка данных по СОП'"));
	
	ИмяМетода = "GetListOfSOP";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если НЕ Scan_ПраваИНастройки.Scan_Право("ПервоначальноеЗаполнение") Тогда
		//rarus tenkam 09.03.2017 update +++
		КоличествоЧасов = Scan_ПраваИНастройки.Scan_Право("КоличествоЧасовПериодаИзменений");
		Если НЕ ЗначениеЗаполнено(КоличествоЧасов) Тогда
			КоличествоЧасов = 24;
		КонецЕсли;
		//rarus tenkam 09.03.2017 ---
		
		СтруктураПараметров["ДатаНачала"] = ТекущаяДата() - 60*60*КоличествоЧасов;
		СтруктураПараметров["ДатаОкончания"] = ТекущаяДата();
	КонецЕсли;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		СсылкаЭлемента = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
	КонецЕсли;
		 	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная загрузка данных по СОП'"));
	
КонецПроцедуры
//rarus tenkam 14.11.2016 mantis 7092 --

//rarus tenkam 07.03.2017 mantis 7175 +++
Процедура ОтправитьДанныеИзделийВ1БД(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	//rarus bonmak 15.08.2019 14576 ++
	//не используем
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОтправитьДанныеИзделийВ1БД);

	//ИмяСобытия = НСтр("ru = 'Регламентное задание. Отправить данные изделий в 1БД'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//
	//Если НЕ Scan_ПраваИНастройки.Scan_Право("ОбратныйОбменС1БД") Тогда
	//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Обратный обмен с 1БД не включен. Отправка данных отменена.'"));
	//   	Возврат;	
	//КонецЕсли;

	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	//	НСтр("ru = 'Начата регламентная отправка данных по изделиям'"));
	//	
	//ИмяМетода = "SetChassis";
	//ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;

	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Scan_Обмен1БДДанныеДляОтправки.Изделие КАК Изделие,
	//               |	Scan_Обмен1БДДанныеДляОтправки.Реквизит,
	//               |	Scan_Обмен1БДДанныеДляОтправки.Значение
	//               |ИЗ
	//               |	РегистрСведений.Scan_Обмен1БДДанныеДляОтправки КАК Scan_Обмен1БДДанныеДляОтправки
	//               |ИТОГИ ПО
	//               |	Изделие";
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаИзделия = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Изделие");
	//Пока ВыборкаИзделия.Следующий() Цикл
	//	Если НЕ ЗначениеЗаполнено(ВыборкаИзделия.Изделие.IDExternalSystem) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Отказ = Ложь;
	//	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	//    СтруктураПараметров.Вставить("GUID", ВыборкаИзделия.Изделие.IDExternalSystem);
	//	
	//	ВыборкаРеквизитов = ВыборкаИзделия.Выбрать();
	//	Пока ВыборкаРеквизитов.Следующий() Цикл
	//		СтруктураПараметров.Вставить(ВыборкаРеквизитов.Реквизит, ВыборкаРеквизитов.Значение);
	//	КонецЦикла;
	//	ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	//	Если НЕ Отказ Тогда
	//		//Удалим запись из регистра
	//		РегистрыСведений.Scan_Обмен1БДДанныеДляОтправки.УдалитьЗаписи(ВыборкаИзделия.Изделие);
	//	Иначе
	//		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекЭлементОтвет );	
	//	КонецЕсли;	
	//КонецЦикла;
	//
	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная отправка данных по изделиям'"));
	//
	//rarus bonmak 15.08.2019 14576 --
КонецПроцедуры
//rarus tenkam 07.03.2017 mantis 7175 ---

Процедура ОтправитьДанныеРеквизитовВ1БД(СтруктураПараметров = Неопределено) Экспорт //rarus bonmak 15.08.2019 14576 ++ //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОтправитьДанныеРеквизитовВ1БД);
	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ОтправитьДанныеРеквизитовВ1БД.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Отправка данных реквизитов в 1БД'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если НЕ Scan_ПраваИНастройки.Scan_Право("ОбратныйОбменС1БД") Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Обратный обмен с 1БД не включен. Отправка данных отменена.'"));
		Возврат;	
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начата регламентная отправка данных по реквизитам'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_Обмен1БДОчередьПоОтправкеРеквизитов.Объект КАК Объект,
	|	Scan_Обмен1БДОчередьПоОтправкеРеквизитов.ВидЗапроса КАК ВидЗапроса,
	|	Scan_Обмен1БДОчередьПоОтправкеРеквизитов.Реквизит КАК Реквизит,
	|	Scan_Обмен1БДОчередьПоОтправкеРеквизитов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.Scan_Обмен1БДОчередьПоОтправкеРеквизитов КАК Scan_Обмен1БДОчередьПоОтправкеРеквизитов
	|ИТОГИ ПО
	|	Объект,
	|	ВидЗапроса";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаОбъект = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Объект");
	Пока ВыборкаОбъект.Следующий() Цикл
		фОбъект = ВыборкаОбъект.Объект;
		
		
		ВыборкаВидЗапроса = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ВидЗапроса");
		Пока ВыборкаВидЗапроса.Следующий() Цикл
			Отказ = Ложь;
			ИмяМетода = ВыборкаВидЗапроса.ВидЗапроса;
			//rarus bonmak 21.08.2020 16210 ++
			//фИмяМетода = Метаданные.Перечисления.Scan_ВидыЗапроса.ЗначенияПеречисления[Перечисления.Scan_ВидыЗапроса.Индекс(ИмяМетода)].Имя; 
			фИмяМетода = ИмяМетода.ИмяПредопределенныхДанных; 
			//rarus bonmak 21.08.2020 16210 --
			ИмяСобытияЖурналаРегистрации = "Веб-сервис." + фИмяМетода;
			Если ИмяМетода = Справочники.Scan_ВидыЗапроса.SetProduct Тогда //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
				IDExternalSystem = фОбъект.IDExternalSystemProduct;
			ИначеЕсли ИмяМетода = Справочники.Scan_ВидыЗапроса.CreateProduct	//rarus bonmak 18.05.2020 14375 ++ //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник 
				ИЛИ ИмяМетода = Справочники.Scan_ВидыЗапроса.CreateSOP Тогда	// rarus tenkam 23.09.2020 mantis 16181 + 
				IDExternalSystem = "";
				//rarus bonmak 18.05.2020 14375 --
			Иначе
				IDExternalSystem = фОбъект.IDExternalSystem;
			КонецЕсли;
			
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(фИмяМетода);
			Если ИмяМетода <> Справочники.Scan_ВидыЗапроса.CreateProduct Тогда //rarus bonmak 18.05.2020 14375 добавил условие //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
				СтруктураПараметров.Вставить("GUID", IDExternalSystem);
			КонецЕсли;
			ВыборкаРеквизитов = ВыборкаВидЗапроса.Выбрать();
			
			Пока ВыборкаРеквизитов.Следующий() Цикл
				СтруктураПараметров.Вставить(ВыборкаРеквизитов.Реквизит, ВыборкаРеквизитов.Значение);
			КонецЦикла;
			// rarus tenkam 28.04.2021 mantis 17659 +++
			// Возможно отправка методом SetAdditionalProperty только доп. реквизитов продукта
			// для расширение необходимо менять структуру регистра - добавлять ТипОбъекта
			Если ИмяМетода = Справочники.Scan_ВидыЗапроса.SetAdditionalProperty Тогда
				СтруктураПараметров.Вставить("ТипОбъекта", "Продукт");
				СтруктураПараметров.Вставить("GUID", фОбъект.IDExternalSystemProduct);
			КонецЕсли;			
			// rarus tenkam 28.04.2021 mantis 17659 ---			
			Если ИмяМетода = Справочники.Scan_ВидыЗапроса.CreateProduct Тогда //rarus bonmak 18.05.2020 14375 ++ добавил условие и обработку ИСТИНА //rarus bonmak 21.08.2020 16210 изменено с перечисления на справочник
				ТекЭлементОтвет = Scan_ВебСервисыРазборОтветов.ВызватьМетод_CreateProduct(СтруктураПараметров);
				Если ТекЭлементОтвет = Неопределено Тогда
					Отказ = Истина;
					ТекЭлементОтвет = "Ошибка создания продукта " + фОбъект.Ссылка; 
				Иначе
					фОбъектИзделия = фОбъект.Ссылка.ПолучитьОбъект();
					фОбъектИзделия.IDExternalSystemProduct = ТекЭлементОтвет;
					Попытка
						фОбъектИзделия.ДополнительныеСвойства.Вставить("ОтправитьРеквизитыВ1БД", ИСТИНА);
						фОбъектИзделия.Записать();
					Исключение
						Отказ = Истина;
						ТекЭлементОтвет = "Ошибка записи продукта " + фОбъект.Ссылка;
					КонецПопытки;					
				КонецЕсли;
				// rarus tenkam 23.09.2020 mantis 16181 +++
			ИначеЕсли ИмяМетода = Справочники.Scan_ВидыЗапроса.CreateSOP Тогда
				Отказ = НЕ Справочники.Scan_ДоговорыВзаиморасчетов.СоздатьДоговорВ1БД(фОбъект);
				Если НЕ Отказ Тогда
					// Установим у соглашения о поставке статус СОП оформлен
					СообщениеОбОшибке = "";
					ВсеОК = Справочники.Scan_СоглашенияОПоставке.УстановитьСтатусСОПОформлен(фОбъект, СообщениеОбОшибке);
					Если НЕ ВсеОК Тогда
						ЗаписьЖурналаРегистрации("Установка статуса СОП оформлен",,,фОбъект,СообщениеОбОшибке);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяМетода = Справочники.Scan_ВидыЗапроса.SetSOP Тогда
				Если СтруктураПараметров.Свойство("GUID") Тогда
					ДоговорСсылка = Справочники.Scan_ДоговорыВзаиморасчетов.НайтиПоРеквизиту("IDExternalSystem", СтруктураПараметров.GUID);
					Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
						Отказ = НЕ Справочники.Scan_ДоговорыВзаиморасчетов.ИзменитьДоговорВ1БД(СтруктураПараметров, ДоговорСсылка);
					КонецЕсли;
				КонецЕсли;
				// rarus tenkam 23.09.2020 mantis 16181 ---
			Иначе
				ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(фИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);		
			КонецЕсли; //rarus bonmak 18.05.2020 14375 --

			Если НЕ Отказ Тогда
				//Удалим запись из регистра
				РегистрыСведений.Scan_Обмен1БДОчередьПоОтправкеРеквизитов.УдалитьЗаписи(фОбъект,ИмяМетода);
			Иначе
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекЭлементОтвет );	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная отправка данных по реквизитам'"));		
КонецПроцедуры //rarus bonmak 15.08.2019 14576 --

//rarus tenkam 07.03.2017 mantis 7175 ---

//rarus tenkam 17.08.2017 mantis 10824 +++
Процедура ОтправитьСобытияВ1БД(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОтправитьСобытияВ1БД);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ОтправитьСобытияВ1БД.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Отправить события в 1БД'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если НЕ Scan_ПраваИНастройки.Scan_Право("ОбратныйОбменС1БД") Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Обратный обмен с 1БД не включен. Отправка данных отменена.'"));
	   	Возврат;	
	КонецЕсли;

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная отправка событий'"));
		
	ИмяМетода = "SendProductActivityEvent";
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_Обмен1БДНеотправленныеСобытия.ВидСобытия КАК ВидСобытия,
	               |	Scan_Обмен1БДНеотправленныеСобытия.ДатаСобытия КАК ДатаСобытия,
	               |	Scan_Обмен1БДНеотправленныеСобытия.GuidСобытияВВнешнейСистеме КАК GuidСобытияВВнешнейСистеме,
	               |	Scan_Обмен1БДНеотправленныеСобытия.Изделие КАК Изделие,
	               |	Scan_Обмен1БДНеотправленныеСобытия.ТекстЗапроса КАК ТекстЗапроса,
	               |	Scan_Обмен1БДНеотправленныеСобытия.Пользователь КАК Пользователь,
	               |	Scan_Обмен1БДНеотправленныеСобытия.ТекстСобытия КАК ТекстСобытия,
	               |	Scan_Обмен1БДНеотправленныеСобытия.ПричинаСобытия КАК ПричинаСобытия,
	               |	Scan_Обмен1БДНеотправленныеСобытия.GuidСобытия1БД КАК GuidСобытия1БД 		//rarus tenkam 27.09.2017 mantis 10831 +
	               |ИЗ
	               |	РегистрСведений.Scan_Обмен1БДНеотправленныеСобытия КАК Scan_Обмен1БДНеотправленныеСобытия";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультата = РезультатЗапроса.Выбрать();
	
	// Получим структуру данных
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
	
	Пока ВыборкаРезультата.Следующий() Цикл
	
		СтруктураПараметров.Вставить("ВидСобытия", ВыборкаРезультата.ВидСобытия);		
		СтруктураПараметров.Вставить("ДатаСобытия", ВыборкаРезультата.ДатаСобытия);
		СтруктураПараметров.Вставить("GuidСобытияВВнешнейСистеме", ВыборкаРезультата.GuidСобытияВВнешнейСистеме);
		
		ДокументСсылка = Документы.Scan_ЗаявкаПеревозчику.ПолучитьСсылку(Новый УникальныйИдентификатор(ВыборкаРезультата.GuidСобытияВВнешнейСистеме));
		СтруктураПараметров.Вставить("ДокументСсылка", ДокументСсылка);
	
		СтруктураПараметров.Вставить("ПричинаСобытия", ВыборкаРезультата.ПричинаСобытия);
		СтруктураПараметров.Вставить("ТекстСобытия",ВыборкаРезультата.ТекстСобытия);
		СтруктураПараметров.Вставить("Пользователь",ВыборкаРезультата.Пользователь);
		СтруктураПараметров.Вставить("ТСGUID",ВыборкаРезультата.Изделие.IDExternalSystem);
		
		//rarus tenkam 27.09.2017 mantis 10831 +++
		Если ЗначениеЗаполнено(ВыборкаРезультата.GuidСобытия1БД) Тогда
			СтруктураПараметров.Вставить("GuidСобытия", ВыборкаРезультата.GuidСобытия1БД);
		КонецЕсли;		
		//rarus tenkam 27.09.2017 mantis 10831 ---
		
		ТекстЗапроса = ВыборкаРезультата.ТекстЗапроса;
		
		//Отправим запрос в 1БД
		СообщениеОбОшибке = "";
		ОтказОбмена = Ложь;
		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, ОтказОбмена, ИмяСобытияЖурналаРегистрации,ТекстЗапроса);
		Если Не ОтказОбмена Тогда
			GuidСобытия1БД = Scan_ВебСервисыРазборОтветов.РазборОтветаОтправкиСобытия(ТекЭлементОтвет, ОтказОбмена, СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации, ИмяМетода); 
			// Зафиксируем отправку события
			РегистрыСведений.Scan_Обмен1БДОтправленныеСобытия.ЗаписатьСобытиеВРегистр(СтруктураПараметров,ТекстЗапроса,ТекЭлементОтвет,GuidСобытия1БД);
			// Удалим запись из регистра
			РегистрыСведений.Scan_Обмен1БДНеотправленныеСобытия.УдалитьСобытие(СтруктураПараметров);
			
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекЭлементОтвет);
	 	КонецЕсли;
	КонецЦикла;	
	
	ПроверитьНеотправленныеСобытия();
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная отправка событий'"));
		
КонецПроцедуры

Процедура ПроверитьНеотправленныеСобытия()
	
	КоличествоДнейПроверки = Scan_ПраваИНастройки.Scan_Право("КоличествоДнейУведомленияОНеотправленныхСобытиях");
	КрайняяДата  = КонецДня(ТекущаяДатаСеанса() - КоличествоДнейПроверки*24*60*60);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_Обмен1БДНеотправленныеСобытия.ВидСобытия КАК ВидСобытия,
	               |	Scan_Обмен1БДНеотправленныеСобытия.ДатаСобытия КАК ДатаСобытия,
	               |	Scan_Обмен1БДНеотправленныеСобытия.GuidСобытияВВнешнейСистеме КАК GuidСобытияВВнешнейСистеме,
	               |	Scan_Обмен1БДНеотправленныеСобытия.Изделие КАК Изделие,
	               |	Scan_Обмен1БДНеотправленныеСобытия.ТекстЗапроса КАК ТекстЗапроса,
	               |	Scan_Обмен1БДНеотправленныеСобытия.Пользователь КАК Пользователь,
	               |	Scan_Обмен1БДНеотправленныеСобытия.ТекстСобытия КАК ТекстСобытия,
	               |	Scan_Обмен1БДНеотправленныеСобытия.ПричинаСобытия КАК ПричинаСобытия,
	               |	Scan_Обмен1БДНеотправленныеСобытия.GuidСобытия1БД КАК GuidСобытия1БД
	               |ИЗ
	               |	РегистрСведений.Scan_Обмен1БДНеотправленныеСобытия КАК Scan_Обмен1БДНеотправленныеСобытия
	               |ГДЕ
	               |	Scan_Обмен1БДНеотправленныеСобытия.ДатаСобытия <= &КрайняяДата";
	Запрос.УстановитьПараметр("КрайняяДата", КрайняяДата);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонОтправкиПисемОНеотправленныхСобытиях"); //rarus BProg_Gladkov 05.05.2020 0015962 +- 
	КонецЕсли;

КонецПроцедуры

//rarus tenkam 17.08.2017 mantis 10824 ---

// rarus tenkam 18.03.2019 mantis 13629 +++
Процедура ПроверитьМетодыОбменаС1БД(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ПроверитьМетодыОбменаС1БД);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ПроверитьМетодыОбменаС1БД.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +

	ИмяСобытия = НСтр("ru = 'Регламентное задание.Проверить методы обмена с 1БД'", ОбщегоНазначения.КодОсновногоЯзыка()); //rarus vikhle 27.09.2021 АПК
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начата регламентная проверка методов обмена с 1БД'"));
	
	ОшибокНет = Истина;
	ОшибокНет = Scan_ВебСервисыПроверкаМетодов.ПроверитьВсеМетоды(); 
	
	Если НЕ ОшибокНет Тогда
		// Ошибки - отправим письмо
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
			РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонОтправкиПисемОбОшибкахПриОбменеС1БД"); //rarus BProg_Gladkov 02.05.2020 0015962 +-
		КонецЕсли;
	КонецЕсли;
	
	// Удалим старые данные
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Очистка регистра Проверка методов обмена с 1БД (Scania)'"));
	
	//rarus vikhle 23.09.2021 mt 17927 +++
	ТаблицаНастроек		= Scan_ВспомогательныеФункцииСервер.РазобратьНастройкиОчисткиРегистров();
	СтрокаТаблицы		= ТаблицаНастроек.Найти(Метаданные.РегистрыСведений.Scan_Обмен1БДПроверкаМетодовОбменаС1БД.Имя, "РегистрСведений");
	ВсегоУдалено		= 0;
	СообщениеОбОшибке	= "";
	Если Не СтрокаТаблицы = Неопределено Тогда
		Если СтрокаТаблицы.КоличествоДней > 0 Тогда  
			КонечныйПериод	= НачалоДня(ТекущаяДатаСеанса()) - СтрокаТаблицы.КоличествоДней * 24 * 60 * 60;
			ВсегоУдалено 	= УдалитьЗаписиРегистраДоПериода(СтрокаТаблицы.РегистрСведений, КонечныйПериод, СообщениеОбОшибке); 
			
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				Комментарий = СтрШаблон(Нстр("ru = 'В регистре сведений ""%1"" не были удалены записи по причине: %2'"), СтрокаТаблицы.РегистрСведений, СообщениеОбОшибке);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
			Иначе
				Комментарий = СтрШаблон(Нстр("ru = 'В регистре сведений ""%1"" удалено записей: %2'"), СтрокаТаблицы.РегистрСведений, ВсегоУдалено);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание,,, Комментарий);	
			КонецЕсли;
			
		Иначе
			Комментарий = СтрШаблон(Нстр("ru = 'Не заполнен период очистки для регистра сведений ""%1"". Очистка не выполнена.'",ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаТаблицы.РегистрСведений);
			ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Предупреждение,,,Комментарий);	
		КонецЕсли;	
	Иначе
		Комментарий = СтрШаблон(Нстр("ru = 'Не заполнена настройка очистки для регистра сведений ""%1"". Очистка не выполнена.'",ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаТаблицы.РегистрСведений);
		ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Предупреждение,,,Комментарий);	
	КонецЕсли;	
	//rarus vikhle 23.09.2021 mt 17927 ---
	
	//rarus vikhle 23.09.2021 mt 17927 +++ закомментировал
	//КоличествоДней = Scan_ПраваИНастройки.Scan_Право("ПериодОчисткиЗаписейРегистраОбменаС1БД");
	//Если Не ЗначениеЗаполнено(КоличествоДней) Тогда
	//	КоличествоДней = 31;
	//КонецЕсли;
	//ДатаОкончания = НачалоДня(ТекущаяДата()) - КоличествоДней*24*60*60;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Scan_Обмен1БДПроверкаМетодовОбменаС1БД.Период КАК Период,
	//	|	Scan_Обмен1БДПроверкаМетодовОбменаС1БД.ВидЗапроса КАК ВидЗапроса
	//	|ИЗ
	//	|	РегистрСведений.Scan_Обмен1БДПроверкаМетодовОбменаС1БД КАК Scan_Обмен1БДПроверкаМетодовОбменаС1БД
	//	|ГДЕ
	//	|	Scan_Обмен1БДПроверкаМетодовОбменаС1БД.Период МЕЖДУ ДАТАВРЕМЯ(1, 1, 1) И &ДатаОкончания";
	//
	//Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//ВсегоУдалено = 0;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	МенеджерЗаписи = РегистрыСведений.Scan_Обмен1БДПроверкаМетодовОбменаС1БД.СоздатьМенеджерЗаписи();
	//	МенеджерЗаписи.Период = ВыборкаДетальныеЗаписи.Период;
	//	МенеджерЗаписи.ВидЗапроса = ВыборкаДетальныеЗаписи.ВидЗапроса;
	//	МенеджерЗаписи.Прочитать();
	//	МенеджерЗаписи.Удалить();
	//	ВсегоУдалено = ВсегоУдалено + 1;
	//КонецЦикла;
		
	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удалено записей: %1'"), ВсегоУдалено),);
	//rarus vikhle 23.09.2021 mt 17927 ---
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена очистка регистра Проверка методов обмена с 1БД (Scania)'"));
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная проверка методов обмена с 1БД'"));
	
КонецПроцедуры
// rarus tenkam 18.03.2019 mantis 13629 ---

///////////////////////////////////////////////////////////////////////
////// РЕГЛАМЕНТНОЕ ЗАДАНИЕ АВТОМАТИЧЕСКОЙ УСТАНОВКИ ДАТЫ УХОДА (ФАКТ)
//// В начале каждого дня происходит проверка: Если есть документ "Заказ перевозчику", у которого "Дата получения" 
//// (дата планового ухода) уже настала (меньше текущей даты), то "Дата ухода (факт)" проставляется равной дате получения.
///////////////////////////////////////////////////////////////////////

//rarus tenkam 14.10.2016 mantis 7688 ++

// Процедура устанавливает дату фактического ухода для изделий в заявках перевозчику, у которых дата получения = текущей дате
Процедура УстановитьДатуФактическогоУхода(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_УстановкаДатыУходаФакт);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_УстановкаДатыУходаФакт.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +

	ИмяСобытия = НСтр("ru = 'ЗаявкаПеревозчику.УстановкаДатыУходаФакт'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная установка фактической даты ухода для заявок перевозчику'"));
		
	ТекущаяДата = ТекущаяДатаСеанса();
	// Получим список документов, которые необходимо обработать
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ЗаявкаПеревозчику.Ссылка
	               |ИЗ
	               |	Документ.Scan_ЗаявкаПеревозчику КАК Scan_ЗаявкаПеревозчику
	               |ГДЕ
	               |	Scan_ЗаявкаПеревозчику.ПометкаУдаления = ЛОЖЬ
	               |	И Scan_ЗаявкаПеревозчику.Проведен = ИСТИНА
				   |	И Scan_ЗаявкаПеревозчику.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)	//rarus tenkam 29.03.2017 mantis 7623 +
	               |	И Scan_ЗаявкаПеревозчику.ДатаУходаФакт = ДАТАВРЕМЯ(1, 1, 1)
				   // Было "=", стало "<" (т.е. все, что вчерашним днем и раньше) tenkam 7688 +
				   // Было "<", стало "<="
	               |	И НАЧАЛОПЕРИОДА(Scan_ЗаявкаПеревозчику.ДатаПолучения, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |	И Scan_ЗаявкаПеревозчику.ПодтвержденаПеревозчиком = ИСТИНА";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	ТабЗаявокПеревозчику = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекЗаявка Из ТабЗаявокПеревозчику Цикл
		ТекЗаявкаОбъект = ТекЗаявка.Ссылка.ПолучитьОбъект();
		//rarus tenkam 14.11.2016 mantis 7688 ++ (новое требование - уберем настройку)
		//// Получим время фактического ухода из настройки
		//ВремяУходаФакт = Scan_ПраваИНастройки.Scan_Право("ВремяФактическогоУходаИзделий");
		//ТекЗаявкаОбъект.ДатаУходаФакт = НачалоДня(ТекЗаявкаОбъект.ДатаПолучения) + (ВремяУходаФакт - НачалоДня(ВремяУходаФакт));
		ТекЗаявкаОбъект.ДатаУходаФакт = ТекЗаявкаОбъект.ДатаПолучения;
		//rarus tenkam 14.11.2016 mantis 7688 --
		Для Каждого СтрокаИзделия Из ТекЗаявкаОбъект.СоставЗаявки Цикл
			СтрокаИзделия.ДатаУходаФакт = ТекЗаявкаОбъект.ДатаУходаФакт;
		КонецЦикла; 
		
		//rarus tenkam 02.11.2016 mantis 7688 ++ 
		Попытка
			ТекЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			// Обработаем статусы заявок на действие
			Для Каждого СтрокаТЧ Из ТекЗаявкаОбъект.СоставЗаявки Цикл
				Scan_ВспомогательныеФункцииСервер.НастроитьСтатусДокументаЗаявкаНаДействие(СтрокаТЧ.ЗаявкаНаДействие);
			КонецЦикла;
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для документа %1 установлена дата ухода (факт) %2'"), ТекЗаявка.Ссылка, ТекЗаявкаОбъект.ДатаУходаФакт),);

		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для документа %1 не удалось установить дату ухода (факт) %2'"),ТекЗаявка.Ссылка, ТекЗаявкаОбъект.ДатаУходаФакт),);
		КонецПопытки;		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная установка фактической даты ухода изделий в заявках превозчику'"));
	
КонецПроцедуры
//rarus tenkam 14.10.2016 mantis 7688 --

///////////////////////////////////////////////////////////////////////
////// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ ПО ПИСЬМАМ И НАПОМИНАНИЯМ
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
//// ОТПРАВКА ПИСЕМ-НАПОМИНАНИЙ ДИЛЕРАМ И ПОЛЬЗОВАТЕЛЯМ 

//rarus sergei 28.11.2016 mantis 7184 ++
Процедура СформироватьИОтправитьПисьмаНапоминанияДилерам(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ФормироватьПисьмаНапоминанияДилерам);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ФормироватьПисьмаНапоминанияДилерам.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Сформировать и отправить напоминания дилерам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начато регламентное формирование и отправка писем-напоминаний дилерам'"));
	
	//rarus tenkam 13.11.2017 mantis 8465 +++
	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
		Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоНапоминаниеДилерам();
	Иначе
		//rarus tenkam 13.11.2017 mantis 8465 ---     	
		
		ТекущаяДата = ТекущаяДатаСеанса();
		Запрос = Новый Запрос; //rarus bonmak 05.08.2019 14427 изменил запрос
		// rarus tenkam 19.08.2019 mantis 14427 +++ 
		//Утерян старый запрос - восстановлен из истории хранилища
		
		//Запрос.Текст = "ВЫБРАТЬ
		//|	Scan_Продукты.Заказчик КАК Заказчик,
		//|	Scan_Продукты.Изделие КАК Изделие,
		//|	Scan_Продукты.ЗаказНаЗавод КАК ЗаказНаЗавод
		//|ПОМЕСТИТЬ ТаблицаСоответствий
		//|ИЗ
		//|	Справочник.Scan_Продукты КАК Scan_Продукты
		//|ГДЕ
		//|	Scan_Продукты.ЗаказНаЗавод.CDDX = &ТекущаяДата
		//|	И Scan_Продукты.ЗаказНаЗавод.НапоминаниеДилерамОтправлено = ЛОЖЬ
		//|	И Scan_Продукты.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И Scan_Продукты.ЗаказНаЗавод.ЕстьАдресДоставки = ЛОЖЬ
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТаблицаСоответствий.Заказчик КАК Заказчик
		//|ИЗ
		//|	ТаблицаСоответствий КАК ТаблицаСоответствий
		//|ГДЕ
		//|	ТаблицаСоответствий.Заказчик <> НЕОПРЕДЕЛЕНО
		//|	И ТаблицаСоответствий.Заказчик <> ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
		//|	И ТаблицаСоответствий.Заказчик <> ЗНАЧЕНИЕ(Справочник.Scan_Дилеры.ПустаяСсылка)
		//|	И ТаблицаСоответствий.Заказчик <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ТаблицаСоответствий.Заказчик
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТаблицаСоответствий.Заказчик КАК Заказчик,
		//|	ТаблицаСоответствий.Изделие КАК Изделие,
		//|	ТаблицаСоответствий.ЗаказНаЗавод КАК ЗаказНаЗавод
		//|ИЗ
		//|	ТаблицаСоответствий КАК ТаблицаСоответствий
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТаблицаСоответствий.Изделие КАК Изделие
		//|ИЗ
		//|	ТаблицаСоответствий КАК ТаблицаСоответствий
		//|ГДЕ
		//|	ТаблицаСоответствий.Изделие <> НЕОПРЕДЕЛЕНО											//rarus tenkam 7184 + bug
		//|	И ТаблицаСоответствий.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка) 	//rarus tenkam 7184 + bug
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ТаблицаСоответствий.Изделие
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТаблицаСоответствий.ЗаказНаЗавод КАК ЗаказНаЗавод
		//|ИЗ
		//|	ТаблицаСоответствий КАК ТаблицаСоответствий
		//|ГДЕ
		//|	(ТаблицаСоответствий.Заказчик = НЕОПРЕДЕЛЕНО
		//|			ИЛИ ТаблицаСоответствий.Заказчик = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
		//|			ИЛИ ТаблицаСоответствий.Заказчик = ЗНАЧЕНИЕ(Справочник.Scan_Дилеры.ПустаяСсылка)
		//|			ИЛИ ТаблицаСоответствий.Заказчик = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		
		// Исправлено
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)) КАК Заказчик,
		|	Scan_Изделия.Ссылка КАК Изделие,
		|	Scan_Изделия.ЗаказНаЗавод КАК ЗаказНаЗавод
		|ПОМЕСТИТЬ ТаблицаСоответствий
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних(, Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Заказчик)) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
		|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр. 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDDX)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDDX
		|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихCDDX.Объект
		|			И Scan_КлючевыеДатыПроцессовСрезПоследнихCDDX.Значение = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|ГДЕ
		//|	Scan_Изделия.ЗаказНаЗавод.CDDX = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|	Scan_Изделия.ЗаказНаЗавод.НапоминаниеДилерамОтправлено = ЛОЖЬ
		|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И Scan_Изделия.ЗаказНаЗавод.ЕстьАдресДоставки = ЛОЖЬ //rarus BProg_Dekin 11.11.2019 0014452 +- "ЕстьАдресДоставки" удален
		|	И Scan_Изделия.Ссылка <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСоответствий.Заказчик КАК Заказчик
		|ИЗ
		|	ТаблицаСоответствий КАК ТаблицаСоответствий
		|ГДЕ
		|	ТаблицаСоответствий.Заказчик <> ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСоответствий.Заказчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСоответствий.Заказчик КАК Заказчик,
		|	ТаблицаСоответствий.Изделие КАК Изделие,
		|	ТаблицаСоответствий.ЗаказНаЗавод КАК ЗаказНаЗавод
		|ИЗ
		|	ТаблицаСоответствий КАК ТаблицаСоответствий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСоответствий.Изделие КАК Изделие
		|ИЗ
		|	ТаблицаСоответствий КАК ТаблицаСоответствий
		|ГДЕ
		|	ТаблицаСоответствий.Изделие <> НЕОПРЕДЕЛЕНО
		|	И ТаблицаСоответствий.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСоответствий.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСоответствий.ЗаказНаЗавод КАК ЗаказНаЗавод
		|ИЗ
		|	ТаблицаСоответствий КАК ТаблицаСоответствий
		|ГДЕ
		|	ТаблицаСоответствий.Заказчик = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)";
		// rarus tenkam 19.08.2019 mantis 14427 ---
		
		Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата));
		Результат = Запрос.ВыполнитьПакет();
		ТаблицаЗаказчиков = Результат[1].Выгрузить();
		ТабЗаказчикИзделие = Результат[2].Выгрузить();
		ТабИзделий = Результат[3].Выгрузить();
		ТабПустыхЗаказчиков = Результат[4].Выгрузить();
		МассивИзделий = ТабИзделий.ВыгрузитьКолонку("Изделие");
		СозданныйОбъект = Неопределено;
		Если МассивИзделий.Количество() > 0 Тогда
			//rarus tenkam 27.12.2016 mantis 7184 ++ (теперь универсальная процедура)
			//СозданныйОбъект = ОтправитьПисьмоНапоминаниеПользователям(МассивИзделий);
			//СозданныйОбъект = ОтправитьПисьмоНапоминание(МассивИзделий);
			СозданныйОбъект = ОтправитьПисьмоНапоминание(ТабЗаказчикИзделие);	//rarus tenkam 19.01.2017 mantis 7184 + (новое требование)
			//rarus tenkam 27.12.2016 mantis 7184 --
		КонецЕсли; 
		Если СозданныйОбъект=Неопределено Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо-напоминание пользователям'"),),);
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователям отправлено письмо-напоминание по изделиям'"),),);
			//rarus tenkam 27.12.2016 mantis 7184 ++
		КонецЕсли;
		//rarus tenkam 27.12.2016 mantis 7184 --
		Для каждого строка Из ТаблицаЗаказчиков Цикл
			СтруктураПоиска = Новый Структура("Заказчик",строка.Заказчик); 
			МассивСтрок = ТабЗаказчикИзделие.НайтиСтроки(СтруктураПоиска);
			
			//rarus tenkam 27.12.2016 mantis 7184 ++ (теперь универсальная процедура)
			//СозданныйОбъект1 = ОтправитьПисьмоНапоминаниеДилерам(МассивСтрок,строка.Заказчик);
			СозданныйОбъект1 = ОтправитьПисьмоНапоминание(МассивСтрок,строка.Заказчик);
			//rarus tenkam 27.12.2016 mantis 7184 --
			
			Если СозданныйОбъект1 = Неопределено Тогда
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказчику %1 не удалось отправить письмо-напоминание по изделиям'"), строка.Заказчик),);
			Иначе
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказчику %1 отправлено письмо-напоминание по изделиям'"), строка.Заказчик),); 		//rarus tenkam 03.04.2017 TLMS 011 была ".Ошибка", поменяла на "УровеньЖурналаРегистрации.Примечание"
				Для каждого элементМассива Из МассивСтрок Цикл
					ТекЗаказОбъект = элементМассива.ЗаказНаЗавод.ПолучитьОбъект();	
					ТекЗаказОбъект.НапоминаниеДилерамОтправлено = Истина;
					Попытка
						ТекЗаказОбъект.Записать();
						ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для Заказа на завод %1 установлен признак напоминание дилерам отправлено'"), элементМассива.ЗаказНаЗавод),);
					Исключение
						ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для Заказа на завод %1 не удалось установить признак напоминание дилерам отправлено. Описание ошибки: %2'"), элементМассива.ЗаказНаЗавод,ОписаниеОшибки()),);
					КонецПопытки;
				КонецЦикла; 
			КонецЕсли;	
		КонецЦикла; 
		Для каждого строкатаб Из ТабПустыхЗаказчиков Цикл
			ТекЗаказОбъект = строкатаб.ЗаказНаЗавод.ПолучитьОбъект();	
			ТекЗаказОбъект.НапоминаниеДилерамОтправлено = Истина;
			Попытка
				ТекЗаказОбъект.Записать();
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для Заказа на завод %1 установлен признак напоминание дилерам отправлено'"), строкатаб.ЗаказНаЗавод),);
			Исключение
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для Заказа на завод %1 не удалось установить признак напоминание дилерам отправлено. Описание ошибки: %2'"), строкатаб.ЗаказНаЗавод,ОписаниеОшибки()),);
			КонецПопытки;
		КонецЦикла; 
		//КонецЕсли; 	 //rarus tenkam 27.12.2016 mantis 7184 +
	КонецЕсли;		//rarus tenkam 14.11.2017 mantis 8465 +
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное формирование и отправка писем-напоминаний дилерам'"));
	
КонецПроцедуры

//rarus tenkam 27.12.2016 mantis 7164 ++
Функция ОтправитьПисьмоНапоминание(МассивИзделий, Заказчик = Неопределено)
	
	Автор         = Справочники.Пользователи.ПустаяСсылка();
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Тема          = Scan_ПраваИНастройки.Scan_Право("ТемаПисьмаНапоминанияДилерам");
	Комментарий   = "";
	ТекстПисьма   = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаНапоминанияДилерам");
	Важность      = ВажностьИнтернетПочтовогоСообщения.Обычная;
    
	Если ТипЗнч(МассивИзделий) = Тип("Массив") Тогда	//rarus tenkam 19.01.2017 mantis 7184 + (новое требование)
		ФорматТекста  = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		Для Каждого ЭлементМассива Из МассивИзделий Цикл
			НомерИзделия = ?(ЗначениеЗаполнено(Заказчик), ЭлементМассива.Изделие.НомерИзделия, ЭлементМассива.НомерИзделия);
			ТекстПисьма = ТекстПисьма + " " + Строка(НомерИзделия) + Символы.ПС;	
		КонецЦикла;
	//rarus tenkam 19.01.2017 mantis 7184 ++
	ИначеЕсли ТипЗнч(МассивИзделий) = Тип("ТаблицаЗначений") И Заказчик = Неопределено Тогда
		//тип = таблица значений
		ФорматТекста  = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		ТекстПисьма = СформироватьHTLMтекстНапоминания(ТекстПисьма, МассивИзделий);
	КонецЕсли;
	//rarus tenkam 19.01.2017 mantis 7184 --
	
	//Создание структуры ПараметрыПисьма
	ПараметрыПисьма = Новый Структура;

	ДобавитьВПараметрАдресатов(ПараметрыПисьма,"Кому", Заказчик);
	
	Если ПараметрыПисьма.Кому.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	ПараметрыПисьма.Вставить("Важность",  Важность);
	ПараметрыПисьма.Вставить("ТипТекста", ФорматТекста);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
	Если ЗначениеЗаполнено(Заказчик) Тогда
		ПараметрыПисьма.Вставить("Владелец", Заказчик);
	КонецЕсли;
	//rarus tenkam 31.10.2017 mantis 11695 +++
	ПараметрыПисьма.Вставить("Автоматически", Истина);
	ПараметрыПисьма.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
	//rarus tenkam 31.10.2017 mantis 11695 ---
	
	СозданныйОбъект =  РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);	
	
	Возврат СозданныйОбъект;	
КонецФункции
//rarus tenkam 27.12.2016 mantis 7164 --

Процедура ДобавитьВПараметрАдресатов(ПараметрыПисьма, ИмяПараметра, Заказчик = Неопределено) 
	Адресаты = Новый Массив;
	Если Заказчик = Неопределено Тогда
		//tenkam: отправим только пользователям
		Запрос = Новый Запрос;
		//rarus tenkam 19.03.2017 mantis 8303 +++
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ПользователиКонтактнаяИнформация.АдресЭП,
		//|	ПользователиКонтактнаяИнформация.Представление
		//|ИЗ
		//|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		//|ГДЕ
		//|	ПользователиКонтактнаяИнформация.Ссылка.ОтправлятьПисьмаНапоминанияПоДоставкеИзделий = ИСТИНА
		//|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
		//|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
		МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ОтправлятьПисьмаНапоминанияПоДоставкеИзделий",Истина);
		Запрос.Текст = "ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.АдресЭП,
		|	ПользователиКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка В (&МассивПользователей)
		|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
		|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
		Запрос.УстановитьПараметр("МассивПользователей",МассивПользователей);
		//rarus tenkam 19.03.2017 mantis 8303 ---
		
		Таблица = Запрос.Выполнить().Выгрузить();			   
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.АдресЭП, СтрокаТаблицы.Представление));
		КонецЦикла;
	Иначе
		//tenkam: отправим только КЛ заказчика
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Scan_КонтактныеЛицаКонтактнаяИнформация.АдресЭП,
		|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Владелец
		|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.ОтправлятьПисьмаНапоминанияПоДоставкеИзделий = ИСТИНА
		|	И Scan_КонтактныеЛицаКонтактнаяИнформация.АдресЭП <> """"";
		Если ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
			Запрос.УстановитьПараметр("Владелец",Заказчик);		
		ИначеЕсли ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Компании") Тогда //rarus bonmak 04.12.2019 14456 изменил наименование справочника	
			//rarus bonmak 15.04.2020 14456 ++
			//Запрос.УстановитьПараметр("Владелец",Заказчик.Контрагент);
			ЗначениеВладельца = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьДилераПоКомпании(Заказчик);
			Запрос.УстановитьПараметр("Владелец",ЗначениеВладельца);
			//rarus bonmak 15.04.2020 14456 --
		КонецЕсли; 
		ТаблицаКЛ = Запрос.Выполнить().Выгрузить();
		Если ТаблицаКЛ.Количество()>0 Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаКЛ Цикл
				Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.АдресЭП, СтрокаТаблицы.Представление));
			КонецЦикла;	
		КонецЕсли; 
		
	КонецЕсли; 
	ПараметрыПисьма.Вставить(ИмяПараметра, Адресаты);
КонецПроцедуры
//rarus sergei 28.11.2016 mantis 7184 --

//rarus tenkam 19.01.2017 mantis 7184 ++
Функция СформироватьHTLMтекстНапоминания(ТекстПисьма, ТЗ);
	ТЗ.Сортировать("Заказчик Возр");
	ТекстПисьма = ТекстПисьма + Символы.ПС + "<table border = ""1"">";
	Для Каждого ТекСтрока Из ТЗ Цикл
		ТекстПисьма = ТекстПисьма + "<tr><td>" + ТекСтрока.Заказчик + "</td><td>" + Строка(ТексТрока.Изделие.НомерИзделия) + "</td></tr>";
	КонецЦикла;
	ТекстПисьма = ТекстПисьма + "</table>";	

	Возврат ТекстПисьма;
КонецФункции
	//rarus tenkam 19.01.2017 mantis 7184 --

///////////////////////////////////////////////////////////////////////
//// ОТПРАВКА ПИСЕМ С М-15 

//rarus sergei 02.12.2016 mantis 7169 ++
Процедура СформироватьПисьмаСВложениемМ15(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров 
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ФормироватьПисьмаСВложениемМ15);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ФормироватьПисьмаСВложениемМ15.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Сформировать письма с вложением М-15'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начато регламентное формирование и отправка писем с вложением М-15'"));
	
		Запрос = Новый Запрос;
		//rarus tenkam 26.12.2016 mantis 7169 ++
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка,
		//               |	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт.Заказчик
		//               |ИЗ
		//               |	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		//               |ГДЕ
		//               |	(Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПередачаВПроизводство)
		//               |			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство))
		//               |	И НАЧАЛОПЕРИОДА(Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ДатаПередачиВПроизводство, ДЕНЬ) = &ДатаСсылка
		//               |	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		//               |	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Сторнирован = ЛОЖЬ
		//               |	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
		//               |
		//               |СГРУППИРОВАТЬ ПО
		//               |	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка,
		//               |	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Продукт.Заказчик";
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействие.Ссылка,
		|	Scan_ЗаявкаНаДействие.Подрядчик
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие КАК Scan_ЗаявкаНаДействие
		|ГДЕ
		|	(Scan_ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПередачаВПроизводство)
		|			ИЛИ Scan_ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство))
		|	И НАЧАЛОПЕРИОДА(Scan_ЗаявкаНаДействие.ДатаПередачиВПроизводство, ДЕНЬ) = &ДатаСсылка
		|	И Scan_ЗаявкаНаДействие.Проведен = ИСТИНА
		|	И Scan_ЗаявкаНаДействие.Сторнирован = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ";
		//rarus tenkam 26.12.2016 mantis 7169 --
		КолвоДнейИзНастройки = Scan_ПраваИНастройки.Scan_Право("КоличествоДнейДоОтправкиМ15");			   
		ДатаОтправкиВПроизводство = НачалоДня(ТекущаяДатаСеанса() + КолвоДнейИзНастройки*24*60*60); 			   
		Запрос.УстановитьПараметр("ДатаСсылка",ДатаОтправкиВПроизводство);
		ТабРезультатов = Запрос.Выполнить().Выгрузить();
		Для каждого строкаТаб Из ТабРезультатов Цикл
			//rarus tenkam 26.12.2016 mantis 7169 ++	
			//Если строкаТаб.ПродуктЗаказчик = Неопределено ИЛИ 
			//	строкаТаб.ПродуктЗаказчик = Справочники.Организации.ПустаяСсылка() ИЛИ
			//	строкаТаб.ПродуктЗаказчик = Справочники.Scan_Дилеры.ПустаяСсылка() ИЛИ
			//	строкаТаб.ПродуктЗаказчик = Справочники.Scan_Контрагенты.ПустаяСсылка() Тогда
			//	СозданныйОбъект = ОтправитьПисьмоСМ15(строкаТаб.Ссылка);		
			//Иначе
			//	
			//	СозданныйОбъект = ОтправитьПисьмоСМ15(строкаТаб.Ссылка, строкаТаб.ПродуктЗаказчик);	
			//КонецЕсли;
			
			Если строкаТаб.Подрядчик = Неопределено ИЛИ строкаТаб.Подрядчик = Справочники.Scan_Компании.ПустаяСсылка() ИЛИ строкаТаб.Подрядчик = Справочники.Scan_Контрагенты.ПустаяСсылка() Тогда //rarus bonmak 04.12.2019 14456
				//Вообще говоря, "Поставщик услуг" обязательно должен быть заполнен. Такая проверка не нужна.
				КонтрагентЗаявки = Справочники.Scan_Контрагенты.ПустаяСсылка();
			Иначе
				//rarus tenkam 24.10.2017 mantis 11439 +++
				//Если ТипЗнч(строкаТаб.Подрядчик) = Тип("СправочникСсылка.Scan_Дилеры") Тогда
				//	КонтрагентЗаявки = строкаТаб.Подрядчик.Контрагент;
				//ИначеЕсли ТипЗнч(строкаТаб.Подрядчик) = Тип("СправочникСсылка.Scan_Контрагенты") Тогда
				//rarus tenkam 24.10.2017 mantis 11439 ---
				КонтрагентЗаявки = строкаТаб.Подрядчик;
				//КонецЕсли;		//rarus tenkam 24.10.2017 mantis 11439 +
			КонецЕсли;
			
			//rarus tenkam 10.11.2017 mantis 8465 +++
			Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
				//rarus BProg_Gladkov 05.05.2020 0015962 ++ ОтправитьПФ
				РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПФ(строкаТаб.Ссылка, "М15");
				СозданныйОбъект = ?(РезультатОтправкиПисьма.ПисьмоОтправлено, Истина, Неопределено);
				//rarus BProg_Gladkov 05.05.2020 0015962 -- 
			Иначе//rarus tenkam 10.11.2017 mantis 8465 ---	
				
				СозданныйОбъект = ОтправитьПисьмоСМ15(строкаТаб.Ссылка, КонтрагентЗаявки);
				
			КонецЕсли;		//rarus tenkam 10.11.2017 mantis 8465 +
			//rarus tenkam 26.12.2016 mantis 7169 --
			Если СозданныйОбъект=Неопределено Тогда	
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо с вложением М-15 для Заявки на действие %1'"),  строкаТаб.Ссылка),);		
			Иначе
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправлено письмо с вложением М-15 для Заявки на действие %1'"),строкаТаб.Ссылка),);
			КонецЕсли;
		КонецЦикла; 
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное формирование и отправка писем с вложением М-15'"));
	
КонецПроцедуры

//rarus tenkam 26.12.2016 mantis 7169 ++
//Функция ОтправитьПисьмоСМ15(ЗаявкаНаДействие, Заказчик = Неопределено)
Функция ОтправитьПисьмоСМ15(ЗаявкаНаДействие, Заказчик)
//rarus tenkam 26.12.2016 mantis 7169 --
		
	Автор         = Справочники.Пользователи.ПустаяСсылка();
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Тема          = Scan_ПраваИНастройки.Scan_Право("ТемаПисьмаСПечатнойФормойМ15");
	Комментарий   = "";
	ТекстПисьма   = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаСПечатнойФормойМ15");
	Важность      = ВажностьИнтернетПочтовогоСообщения.Обычная;
	ФорматТекста  = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	Тема = Тема + " № " + ЗаявкаНаДействие.Номер + " от " + Формат(ЗаявкаНаДействие.Дата,"ДЛФ=ДД");
	//Создание структуры ПараметрыПисьма
	
	ПараметрыПисьма = Новый Структура;
	ОбъектыПечати = Новый СписокЗначений;
	МассивЗаявок = Новый массив;
	МассивЗаявок.Добавить(ЗаявкаНаДействие);
	ПечатнаяФорма = Документы.Scan_ЗаявкаНаДействие.ПечатьМ15(МассивЗаявок,ОбъектыПечати);
	ТаблицаФорматов = Новый ТаблицаЗначений;
	Scan_ЗначимыеСобытия.ЗаполнитьТаблицуФорматов(ТаблицаФорматов);
	Результат = ПоместитьТабличныеДокументыВоВременноеХранилище(ТаблицаФорматов,ПечатнаяФорма, ЗаявкаНаДействие);	//rarus tenkam 12.01.2017 mantis 7169 + (добавила в аргумент ссылку на заявку)
	ПараметрыПисьма.Вставить("Вложения", Результат);
	//rarus tenkam 26.12.2016 mantis 7169 ++
	//Если Заказчик <> Неопределено Тогда
	//	ДобавитьВПараметрАдресатовМ15(ПараметрыПисьма,"Кому",Заказчик);	
	//Иначе	
	//    ДобавитьВПараметрАдресатовМ15(ПараметрыПисьма,"Кому");
	//КонецЕсли; 
	ДобавитьВПараметрАдресатовМ15(ПараметрыПисьма,"Кому",Заказчик);
	//rarus tenkam 26.12.2016 mantis 7189 --
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	ПараметрыПисьма.Вставить("Важность",  Важность);
	ПараметрыПисьма.Вставить("ТипТекста", ФорматТекста);
	
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
	Если ЗначениеЗаполнено(Заказчик) Тогда
		ПараметрыПисьма.Вставить("Владелец", Заказчик);
	КонецЕсли;	
	//rarus tenkam 31.10.2017 mantis 11695 +++
	ПараметрыПисьма.Вставить("ДокументОтправки", ЗаявкаНаДействие);
	ПараметрыПисьма.Вставить("Автоматически", Истина);
	ПараметрыПисьма.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
	//rarus tenkam 31.10.2017 mantis 11695 ---

	СозданныйОбъект = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);		
	Возврат СозданныйОбъект;	
КонецФункции

//rarus tenkam 26.12.2016 mantis 7169 ++
//Процедура ДобавитьВПараметрАдресатовМ15(ПараметрыПисьма, ИмяПараметра, Заказчик = Неопределено) 
Процедура ДобавитьВПараметрАдресатовМ15(ПараметрыПисьма, ИмяПараметра, Заказчик) 
//rarus tenkam 26.12.2016 mantis 7169 ++
	Адресаты = Новый Массив;
	Запрос = Новый Запрос;
	//rarus tenkam 19.03.2017 mantis 8303 +++
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ПользователиКонтактнаяИнформация.АдресЭП,
	//|	ПользователиКонтактнаяИнформация.Представление
	//|ИЗ
	//|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	//|ГДЕ
	////rarus tenkam 26.12.2016 mantis 7169 ++
	////|	ПользователиКонтактнаяИнформация.Ссылка.ОтправлятьПисьмаНапоминанияПоДоставкеИзделий = ИСТИНА
	//|	ПользователиКонтактнаяИнформация.Ссылка.ОтправлятьПФМ15 = ИСТИНА
	////rarus tenkam 26.12.2016 mantis 7169 --
	//|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
	//|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
	МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению("ОтправлятьПФМ15",Истина);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.АдресЭП,
	|	ПользователиКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Ссылка В (&МассивПользователей)
	|	И ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
	|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
	Запрос.УстановитьПараметр("МассивПользователей",МассивПользователей);
	//rarus tenkam 19.03.2017 mantis 8303 ---
	
	Таблица = Запрос.Выполнить().Выгрузить();			   
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.АдресЭП, СтрокаТаблицы.Представление));
	КонецЦикла;
	
	//rarus tenkam 26.12.2016 mantis 7169 ++
	//Если Заказчик <> Неопределено Тогда
	Если ЗначениеЗаполнено(Заказчик) Тогда
	//rarus tenkam 26.12.2016 mantis 7169 --
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Scan_КонтактныеЛицаКонтактнаяИнформация.АдресЭП,
		|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Владелец
		//rarus tenkam 26.12.2016 mantis 7169 ++
		//|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.ОтправлятьПисьмаНапоминанияПоДоставкеИзделий = ИСТИНА
		|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.ОтправлятьПФМ15 = ИСТИНА
		//rarus tenkam 26.12.2016 mantis 7169 ++
		|	И Scan_КонтактныеЛицаКонтактнаяИнформация.АдресЭП <> """"";

		//Если ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда			//rarus tenkam 26.12.2016 mantis 7169 + (закомментировала)
		Запрос.УстановитьПараметр("Владелец",Заказчик);		
		//rarus tenkam 26.12.2016 mantis 7169 ++ (закомментировала)
		//ИначеЕсли ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Дилеры") Тогда	
		//	Запрос.УстановитьПараметр("Владелец",Заказчик.Контрагент);
		//КонецЕсли; 
		//rarus tenkam 26.12.2016 mantis 7169 --
		ТаблицаКЛ = Запрос.Выполнить().Выгрузить();
		Если ТаблицаКЛ.Количество()>0 Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаКЛ Цикл
				Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.АдресЭП, СтрокаТаблицы.Представление));
			КонецЦикла;	
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрыПисьма.Вставить(ИмяПараметра, Адресаты);
КонецПроцедуры

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(ТаблицаФорматов, ТабличныйДокумент, ЗаявкаНаДействиеСсылка = Неопределено)
	Результат = Новый Массив;
	//Результат = Новый СписокЗначений;
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	// Каталог временных файлов
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки);
	
	// Сохранение табличных документов.
	ПараметрыФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайлаТабличногоДокумента.PDF))[0];
	//rarus tenkam 12.01.2017 mantis 7169 ++ (поменяла алгоритм)
	//Если ТабличныйДокумент.ИспользуемоеИмяФайла<>"" Тогда
	//	ИмяФайла = Scan_ЗначимыеСобытия.ПолучитьИмяВременногоФайлаДляПечатнойФормы(ТабличныйДокумент.ИспользуемоеИмяФайла,ПараметрыФормата.Расширение,ИспользованныеИменаФайлов);	
	//Иначе	
	//	ИмяФайла = Scan_ЗначимыеСобытия.ПолучитьИмяВременногоФайлаДляПечатнойФормы(ТабличныйДокумент.ИмяМакета,ПараметрыФормата.Расширение,ИспользованныеИменаФайлов);
	//КонецЕсли;
	ПараметрыДляВставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаДействиеСсылка, "Дата,Номер");
	ПараметрыДляВставки.Дата = Формат(ПараметрыДляВставки.Дата, "ДЛФ=D");
	ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы", "М-15");
	Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] № [Номер] от [Дата]'");
	ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыДляВставки);
	ИмяФайла = ИмяФайла + "." + ПараметрыФормата.Расширение;
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	//rarus tenkam 12.01.2017 mantis 7169 --

	ПолноеИмяФайла = Scan_ЗначимыеСобытия.УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);		
	ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор());
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Представление", ИмяФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
	ОписаниеФайла.Вставить("Кодировка", "");
	Результат.Добавить(ОписаниеФайла);
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции
//rarus sergei 02.12.2016 mantis 7169 --

///////////////////////////////////////////////////////////////////////
//// ФОРМИРОВАНИЕ НАПОМИНАНИЙ О СРОКАХ БЕСПЛАТНОГО ХРАНЕНИЯ

//rarus BProg_Gladkov 25.11.2019 0014452 ++ СформироватьНапоминанияОПриближенииСроковБесплатногоХраненияИзделий удаленено.
////rarus sergei 08.12.2016 mantis 7186 ++
//Процедура СформироватьНапоминанияОПриближенииСроковБесплатногоХраненияИзделий() Экспорт
//	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ФормироватьПисьмаНапоминанияДилерам);	
//	ИмяСобытия = НСтр("ru = 'Регламентное задание. Сформировать письма с вложением М-15'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
//	НСтр("ru = 'Начато регламентное формирование напоминаний о приближении сроков бесплатного хранения изделий'"));
//	КолвоДнейДоОкончанияИзНастройки =  Scan_ПраваИНастройки.Scan_Право("КоличествоДнейДоОкончанияСроковБесплатногоХраненияИзделий");
//	Если КолвоДнейДоОкончанияИзНастройки <> 0 Тогда
//		//rarus bonmak 13.08.2019 14427 изменил запрос
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		|	Scan_МестонахождениеИзделийОстатки.МестоХранения.Контрагент КАК МестоХраненияКонтрагент,
//		|	Scan_МестонахождениеИзделийОстатки.МестоХранения.Ссылка КАК МестоХраненияСсылка,
//		|	Scan_МестонахождениеИзделийОстатки.Изделие
//		|ПОМЕСТИТЬ СписокИзделий
//		|ИЗ
//		|	РегистрНакопления.Scan_МестонахождениеИзделий.Остатки КАК Scan_МестонахождениеИзделийОстатки
//		|ГДЕ
//		|	Scan_МестонахождениеИзделийОстатки.МестоХранения В
//		|			(ВЫБРАТЬ
//		|				Scan_МестаХранения.Ссылка
//		|			ИЗ
//		|				Справочник.Scan_МестаХранения КАК Scan_МестаХранения
//		|			ГДЕ
//		|				Scan_МестаХранения.Контрагент.Кузовостроитель = ИСТИНА)
//		|	И Scan_МестонахождениеИзделийОстатки.Изделие.Ссылка В
//		|			(ВЫБРАТЬ
//		|				Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие
//		|			ИЗ
//		|				РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
//		|				,
//		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
//		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве
//		|		ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие = Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Объект
//		|			ГДЕ
//		|(Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение = &ПустаяДата
//		|			ИЛИ Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Значение ЕСТЬ NULL)
//		|				И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.АвтомобильПроданСоСканияРусь = &ПустаяДата
//		|				И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ПоступилМашинокомплект <> &ПустаяДата
//		|				И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.Ссылка <> ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка))
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Scan_ДоговорыВзаиморасчетов.Ссылка КАК Ссылка,
//		|	СписокИзделий.Изделие
//		|ИЗ
//		|	СписокИзделий КАК СписокИзделий
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ДоговорыВзаиморасчетов КАК Scan_ДоговорыВзаиморасчетов
//		|		ПО СписокИзделий.МестоХраненияКонтрагент = Scan_ДоговорыВзаиморасчетов.Владелец
//		|ГДЕ
//		|	Scan_ДоговорыВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДоговоров.Подряда)
//		|	И Scan_ДоговорыВзаиморасчетов.Ссылка <> ЗНАЧЕНИЕ(Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка)
//		|	И Scan_ДоговорыВзаиморасчетов.МестаХранения.МестоХранения = СписокИзделий.МестоХраненияСсылка
//		|	И Scan_ДоговорыВзаиморасчетов.СрокБесплатногоХраненияПродукта <> 0
//		|	И (Scan_ДоговорыВзаиморасчетов.Бессрочный = ИСТИНА
//		|			ИЛИ Scan_ДоговорыВзаиморасчетов.ДатаОкончания > &ТекущаяДата)";
//		ПустаяДата = Дата('00010101');
//		ТекущаяДата = ТекущаяДатаСеанса();
//		Запрос.УстановитьПараметр("ПустаяДата",ПустаяДата);
//		Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата));
//		ТаблицаПродуктов = Запрос.Выполнить().Выгрузить();
//		МассивИзделийДляОтправкиНапоминания = Новый Массив;
//		Для каждого строкаТП Из ТаблицаПродуктов Цикл
//			Запрос1 = Новый Запрос;
//			Запрос1.Текст ="ВЫБРАТЬ
//			|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ПоступилМашинокомплект
//			|ИЗ
//			|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//			|ГДЕ
//			|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие = &СсылкаИзделие";
//			Запрос1.УстановитьПараметр("СсылкаИзделие",строкаТП.Изделие);
//			Выборка = Запрос1.Выполнить().Выбрать();
//			Если Выборка.Следующий() Тогда
//				РасчетноеВремя = Выборка.ЗаказНаЗаводПоступилМашинокомплект + строкаТП.Ссылка.СрокБесплатногоХраненияПродукта*24*60*60 - КолвоДнейДоОкончанияИзНастройки*24*60*60; 
//				Если РасчетноеВремя = НачалоДня(ТекущаяДата) Тогда
//					МассивИзделийДляОтправкиНапоминания.Добавить(строкаТП.Изделие);
//				КонецЕсли; 	
//			КонецЕсли; 
//		КонецЦикла;
//		Если МассивИзделийДляОтправкиНапоминания.Количество() > 0 Тогда
//			ОтправитьНапоминанияПоСрокамБесплатногоХранения(КолвоДнейДоОкончанияИзНастройки,МассивИзделийДляОтправкиНапоминания,ИмяСобытия);	 	
//		КонецЕсли;
//	КонецЕсли;
//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное напоминаний о приближении сроков бесплатного хранения изделий'"));
//КонецПроцедуры

//Процедура ОтправитьНапоминанияПоСрокамБесплатногоХранения(КолвоДнейИзНастройки, МассивИзделий,ИмяСобытия)
//	Содержание = "Обратите внимание! Для указанных ниже изделий осталось " + строка(КолвоДнейИзНастройки) + " дней бесплатного хранения. Список изделий: "+Символы.ПС;
//	Для каждого ЭлементМассива Из МассивИзделий Цикл
//		Содержание = Содержание + строка(ЭлементМассива) + Символы.ПС;
//	КонецЦикла; 
//	ВремяСобытия = ТекущаяДатаСеанса()+5*60;
//	ТаблицаПользователейИЗначений = Scan_ПраваИНастройки.ПолучитьОбъектыПоПравамИНастройкам(Перечисления.Scan_НазначениеПравИНастроек.Пользователь,"ОповещатьОПриближенииСрокаИстеченияБесплатногоХраненияИзделий",Истина);	
//	Если ТаблицаПользователейИЗначений = Неопределено ИЛИ ТаблицаПользователейИЗначений.КОличество()= 0 Тогда
//		Возврат;	
//	КонецЕсли; 
//	МассивСтрокОбъектов = ТаблицаПользователейИЗначений.ВыгрузитьКолонку("Объект");
//	Для каждого строка Из МассивСтрокОбъектов Цикл
//	
//		ПараметрыНапоминания = Новый Структура;
//	    ПараметрыНапоминания.Вставить("Описание", Содержание);
//		ПараметрыНапоминания.Вставить("Пользователь", строка);
//		ПараметрыНапоминания.Вставить("ВремяСобытия", ВремяСобытия);
//		ПараметрыНапоминания.Вставить("СрокНапоминания", ВремяСобытия);	
//		ПараметрыНапоминания.Вставить("СпособУстановкиВремениНапоминания", Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя);
//		ПараметрыНапоминания.Вставить("ИнтервалВремениНапоминания", 0);
//		ПараметрыНапоминания.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
//		НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыНапоминания.Пользователь);
//		НаборЗаписей.Прочитать();
//	//	
//		НоваяЗапись = НаборЗаписей.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыНапоминания);
//		Попытка
//			НаборЗаписей.Записать(Истина);
//			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователю %1  создано напоминание о приближении срока истечения бесплатного хранения'"), строка),);
//		Исключение
//			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователю %1 не удалось сформировать напоминание о приближении срока истечения бесплатного хранения. Описание ошибки: %2'"), строка,ОписаниеОшибки()),);
//			Возврат;
//		КонецПопытки;	
//	КонецЦикла;
//		
//
//КонецПроцедуры // ()
////rarus sergei 08.12.2016 mantis 7186 --
//rarus BProg_Gladkov 25.11.2019 0014452 -- 

///////////////////////////////////////////////////////////////////////
//// ОТПРАВКА НАПОМИНАНИЙ АДМИНИСТРАТОРАМ ПРОДАЖ

//rarus tenkam 18.01.2017 mantis 7185 ++

//rarus BProg_Gladkov 25.11.2019 0014452 ++ регламентное задание "ОтправитьНапоминанияАдминистраторамПродаж" удалено
//// Процедура - Отправить напоминания администраторам продаж
////
//Процедура ОтправитьНапоминанияАдминистраторамПродаж() Экспорт
//	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОтправитьНапоминанияАдминистраторамПродаж);

//	//rarus tenkam 27.02.2017 mantis 7185 +++
//	//ИмяСобытия = НСтр("ru = 'Регламентное задание. Отправить напоминания администраторам продаж'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
//	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
//	//	НСтр("ru = 'Начата регламентная отправка напоминаний администраторам продаж'"));
//	//	
//	//Запрос = Новый Запрос;
//	//Запрос.Текст = 
//	//	"ВЫБРАТЬ
//	//	|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод,
//	//	|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие
//	//	|ИЗ
//	//	|	РегистрСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних
//	//	|ГДЕ
//	//	|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.CDDY = &ТекущаяДата
//	//	|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьБукингЛист = ИСТИНА
//	//	|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)";
//	//
//	//Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
//	//
//	//РезультатЗапроса = Запрос.Выполнить();
//	//
//	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	//
//	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//	//	Если НЕ ВыборкаДетальныеЗаписи.ЗаказНаЗавод.ЕстьАдресДоставки Тогда
//	//		
//	//		ТекстНапоминания = "У изделия " + ВыборкаДетальныеЗаписи.Изделие.НомерИзделия +" нет заявки на действие.";
//	//		Источник = ВыборкаДетальныеЗаписи.Изделие;
//	//		Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОбОтсутствииЗаявкиНаДействиеПриВывозеИзПорта",ТекстНапоминания, Источник);
//	//		
//	//		ЗаказОбъект = ВыборкаДетальныеЗаписи.ЗаказНаЗавод.ПолучитьОбъект();
//	//		ЗаказОбъект.НапоминаниеАдмПродажОтправлено = Истина;
//	//		Попытка
//	//			ЗаказОбъект.Записать();
//	//			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для заказа на завод %1 установлен признак Напоминание администратору продаж отправлено'"), ВыборкаДетальныеЗаписи.ЗаказНаЗавод),);
//	//		Исключение
//	//			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для заказа на завод %1 не удалось установить признак Напоминание администратору продаж отправлено. Описание ошибки: %2'"), ВыборкаДетальныеЗаписи.ЗаказНаЗавод, ОписаниеОшибки()),);
//	//		КонецПопытки;
//	//	КонецЕсли;		
//	//КонецЦикла;	
//	//
//	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная отправка напоминаний администраторам продаж'"));

//	ИмяСобытия = НСтр("ru = 'Регламентное задание. Отправить напоминания администраторам продаж'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
//		НСтр("ru = 'Начата регламентная отправка напоминаний администраторам продаж'"));
//	//rarus bonmak 13.08.2019 14427 изменил запрос	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	// rarus tenkam 19.08.2019 mantis 14427 
//	//Утерян старый запрос - восстановлен из истории хранилища
//		
//	//"ВЫБРАТЬ
//	//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод,
//	//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие,
//	//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Продукт.Заказчик КАК Заказчик
//	//|ИЗ
//	//|	РегистрСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних
//	//|ГДЕ
//	//|	Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.CDDY = &ТекущаяДата
//	//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьБукингЛист = ИСТИНА
//	//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
//	//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьАдресДоставки = ЛОЖЬ
//	//|	И Scan_ВзаимосвязьИзделийПродуктовИЗаказовСрезПоследних.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)";	//rarus tenkam 31.07.2017 mantis 10085 +
//	
//	"ВЫБРАТЬ
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод,
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
//	|	ЕСТЬNULL(Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)) КАК Заказчик
//	|ИЗ
//	|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних(, Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Заказчик)) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
//	|		ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ
//	|ГДЕ
//	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDDY = &ТекущаяДата
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьБукингЛист = ИСТИНА
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.ЕстьАдресДоставки = ЛОЖЬ
//	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)";	//rarus tenkam 31.07.2017 mantis 10085 +
//	// rarus tenkam 19.08.2019 mantis 14427 --- 
//	
//	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
//	
//	ТабДанные = Запрос.Выполнить().Выгрузить();
//	СформироватьНапоминанияПользователямАдминистраторам(ТабДанные, ИмяСобытия);
//	
//	//rarus tenkam 13.11.2017 mantis 8465 +++
//	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
//		Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоНапоминаниеДилерамПовторное();
//	Иначе
//	//rarus tenkam 13.11.2017 mantis 8465 ---
//		ОтправитьПовторныеПисьмаНапоминания(ТабДанные, ИмяСобытия);
//	КонецЕсли; 		//rarus tenkam 13.11.2017 mantis 8465 +
//	
//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная отправка напоминаний администраторам продаж'"));
//	//rarus tenkam 28.02.2017 mantis 7185 ---
//КонецПроцедуры
////rarus tenkam 18.01.2017 mantis 7185 --
//rarus BProg_Gladkov 25.11.2019 0014452 -- 

//rarus tenkam 28.02.2017 mantis 7185 +++

// Rarus tenkam 25.02.2022 АПК +++

//// Функция - Отправить повторное письмо заказчику
////
//// Параметры:
////  МассивСтрок	 - 	 - 
////  Заказчик	 - 	 - 
//// 
//// Возвращаемое значение:
////   - 
////
//Функция ОтправитьПовторноеПисьмоЗаказчику(МассивСтрок, Заказчик)	
//	//Создание структуры ПараметрыПисьма
//	ПараметрыПисьма = Новый Структура;
//	
//	//Сформируем текст письма
//	ТекстПисьма = Scan_ПраваИНастройки.Scan_Право("ТекстПовторногоПисьмаНапоминанияДилерам") + Символы.ПС;
//	Для Каждого ЭлементМассива Из МассивСтрок Цикл
//		НомерИзделия = ЭлементМассива.Изделие.НомерИзделия;
//		ТекстПисьма = ТекстПисьма + НомерИзделия + Символы.ПС;	
//	КонецЦикла;
//	
//	//Сформируем тему письма
//	Если ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
//		ТекКонтрагент = Заказчик;		
//	ИначеЕсли ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Компании") Тогда	//rarus bonmak 04.12.2019 14456 изменил наименование справочника
//		//rarus bonmak 15.04.2020 14456 ++
//		//ТекКонтрагент = Заказчик.Контрагент;
//		ЗначениеВладельца = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьДилераПоКомпании(Заказчик);
//		ТекКонтрагент = ЗначениеВладельца;
//		//rarus bonmak 15.04.2020 14456 --	
//	Иначе
//		//Если это организация
//		Возврат Неопределено;	//rarus tenkam 06.03.2017 mantis 7185 +
//	КонецЕсли;
//	ТемаПисьма = ТекКонтрагент.Наименование + ". " + Scan_ПраваИНастройки.Scan_Право("ТемаПовторногоПисьмаНапоминанияДилерам");
//	
//	//Заполним параметры письма
//	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
//	ПараметрыПисьма.Вставить("Важность",  ВажностьИнтернетПочтовогоСообщения.Обычная);
//	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
//	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
//	ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
//	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
//	ПараметрыПисьма.Вставить("Владелец", Заказчик);
//	//rarus tenkam 31.10.2017 mantis 11695 +++
//	ПараметрыПисьма.Вставить("Автоматически", Истина);
//	ПараметрыПисьма.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());	
//	//rarus tenkam 31.10.2017 mantis 11695 ---

//	
//	Адресаты = ПолучитьАдресаКЛЗаказчика(Заказчик);
//	Если Адресаты.Количество() = 0 Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	ПараметрыПисьма.Вставить("Кому", Адресаты);
//	
//	АдресатыПользователи = ПолучитьАдресаПользователей("УведомлятьПоПочтеОбОтсутствииЗаявкиНаДействиеПриВывозеИзПорта");
//	Если АдресатыПользователи.Количество() = 0 Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	ПараметрыПисьма.Вставить("Копии", АдресатыПользователи);

//	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
//	
//	ПисьмоОтправлено = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);	
//	
//	Возврат ПисьмоОтправлено;	
//КонецФункции

//// Функция - Получить адреса КЛЗаказчика
////
//// Параметры:
////  Заказчик - 	 - 
//// 
//// Возвращаемое значение:
////   - 
////
//Функция ПолучитьАдресаКЛЗаказчика(Заказчик) Экспорт 
//	Адресаты = Новый Массив;
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	Scan_КонтактныеЛицаКонтактнаяИнформация.АдресЭП,
//	|	Scan_КонтактныеЛицаКонтактнаяИнформация.Представление
//	|ИЗ
//	|	Справочник.Scan_КонтактныеЛица.КонтактнаяИнформация КАК Scan_КонтактныеЛицаКонтактнаяИнформация
//	|ГДЕ
//	|	Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Владелец
//	|	И Scan_КонтактныеЛицаКонтактнаяИнформация.Ссылка.ОтправлятьПисьмаНапоминанияПоДоставкеИзделийПовторно = ИСТИНА
//	|	И Scan_КонтактныеЛицаКонтактнаяИнформация.АдресЭП <> """"";
//	Если ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Контрагенты") Тогда
//		Запрос.УстановитьПараметр("Владелец",Заказчик);		
//	ИначеЕсли ТипЗнч(Заказчик)= Тип("СправочникСсылка.Scan_Компании") Тогда	//rarus bonmak 04.12.2019 14456 изменил наименование справочника
//		//rarus bonmak 15.04.2020 14456 ++
//		//Запрос.УстановитьПараметр("Владелец",Заказчик.Контрагент);
//		ЗначениеВладельца = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьДилераПоКомпании(Заказчик);
//		Запрос.УстановитьПараметр("Владелец",ЗначениеВладельца);
//		//rarus bonmak 15.04.2020 14456 --
//	КонецЕсли; 
//	
//	ТаблицаКЛ = Запрос.Выполнить().Выгрузить();
//	
//	Для Каждого СтрокаТаблицы Из ТаблицаКЛ Цикл
//		Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.АдресЭП, СтрокаТаблицы.Представление));
//	КонецЦикла;	
//	Возврат Адресаты;
//КонецФункции
// Rarus tenkam 25.02.2022 АПК ---

// Функция - Получить адреса пользователей
//
// Параметры:
//  НаименованиеПрава	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьАдресаПользователей(НаименованиеПрава) Экспорт
	Адресаты = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.АдресЭП,
	|	ПользователиКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
	|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"
	|	И ПользователиКонтактнаяИнформация.Ссылка В (&МассивПользователей)";
	МассивПользователей = Scan_ПраваИНастройки.Scan_ПолучитьМассивОбъектовПоЗначению(НаименованиеПрава, Истина);
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей); 
	
	ТаблицаКЛ = Запрос.Выполнить().Выгрузить();			   
	
	Для Каждого СтрокаТаблицы Из ТаблицаКЛ Цикл
		Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.АдресЭП, СтрокаТаблицы.Представление));
	КонецЦикла;
	Возврат Адресаты;
КонецФункции
//rarus tenkam 28.02.2017 mantis 7185 +++

///////////////////////////////////////////////////////////////////////
//// ФОРМИРОВАНИЕ ПЕРЕМЕЩЕНИЙ К КУЗОВОСТРОИТЕЛЮ

//rarus tenkam 31.07.2017 mantis 10271 +++
Процедура ФормированиеПеремещенийККузовостроителю(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ФормированиеПеремещенийККузовостроителю);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ФормированиеПеремещенийККузовостроителю.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +

	ИмяСобытия = НСтр("ru = 'Регламентное задание.ПеремещениеККузовостроителю'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное формирование перемещения изделий к кузовостроителю'"));
	//rarus bonmak 13.08.2019 14427 изменил запрос
	//rarus BProg_Gladkov 19.11.2019 0014452 ++ Вынес работу с ключевыми датами из запроса
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод
	|ИЗ
	|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(
	|			&ТекДата,
	|			ЗаказНаЗавод <> ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка)
	|				И Изделие <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	|				,
	|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
	|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве
	|		ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие = Scan_КлючевыеДатыПроцессовСрезПоследнихПродуктВАрхиве.Объект
	|ГДЕ
	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.КодАдресаДоставки <> ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.КодАдресаДоставки <> ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.ПустаяСсылка)
	|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.МестоПроизводства <> ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)";		//bug 09.10.2017 +
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//rarus BProg_Gladkov 04.12.2019 0014452 ++ работа с ключевыми датами из регистра
		КлючевыеДатыЗаказаНаЗавод = РегистрыСведений.Scan_КлючевыеДатыПроцессов.КлючевыеДатыОбъекта(ВыборкаДетальныеЗаписи.ЗаказНаЗавод);
		Если ЗначениеЗаполнено(РегистрыСведений.Scan_КлючевыеДатыПроцессов.КлючеваяДата(ВыборкаДетальныеЗаписи.Изделие, "ПродуктВАрхиве"))
			ИЛИ НЕ ЗначениеЗаполнено(КлючевыеДатыЗаказаНаЗавод.FinishDate)
			ИЛИ НЕ ЗначениеЗаполнено(КлючевыеДатыЗаказаНаЗавод.ADD)
		Тогда
			Продолжить;
		КонецЕсли;
		//rarus BProg_Gladkov 04.12.2019 0014452 --
		
		// Еще нет поступления на место производства
		Если НЕ Справочники.Scan_ЗаказыНаЗавод.ПоступлениеУжеЕсть(ВыборкаДетальныеЗаписи.Изделие) Тогда
			Продолжить;
		КонецЕсли;
		
		// Перемещение уже есть	
		Если Справочники.Scan_ЗаказыНаЗавод.ПеремещениеККузовостроителюУжеЕсть(ВыборкаДетальныеЗаписи.Изделие, ВыборкаДетальныеЗаписи.ЗаказНаЗавод)Тогда
			Продолжить;
		КонецЕсли;
		
		// Если у кода адреса доставки нет соответствующего места хранения - то некуда перемещать
		МестоСоответствующееКоду = РегистрыСведений.Scan_СоответствиеКодовАдресовДоставки.ПолучитьМестоХранения(ВыборкаДетальныеЗаписи.ЗаказНаЗавод.КодАдресаДоставки);
		Если НЕ ЗначениеЗаполнено(МестоСоответствующееКоду) Тогда
			Продолжить;
		КонецЕсли;
		
		//Если текущее местоположение не равно месту производства
		ТекМестоНахождения = РегистрыНакопления.Scan_МестонахождениеИзделий.ПолучитьДанныеПоМестонахождениюИзделия(ВыборкаДетальныеЗаписи.Изделие, ТекущаяДата());
		//bug 09.10.2017 +++
		Если ТекМестоНахождения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// ---
		
		Если ТекМестоНахождения.МестоХранения <> ВыборкаДетальныеЗаписи.Изделие.МестоПроизводства Тогда
			Продолжить;
		КонецЕсли; 
		
		//bug 19.10.2017 +++  		
		Если МестоСоответствующееКоду = ВыборкаДетальныеЗаписи.Изделие.МестоПроизводства Тогда
			Продолжить;
		КонецЕсли; 
		// ---
		
		// Иначе сформируем перемещение
		ДокументПеремещений = Документы.Scan_ПеремещениеИзделий.СоздатьДокумент();
		ДокументПеремещений.Дата = ТекущаяДата();
		ДокументПеремещений.УстановитьНовыйНомер();
		ДокументПеремещений.МестоОтгрузки = ВыборкаДетальныеЗаписи.Изделие.МестоПроизводства;
		ДокументПеремещений.МестоДоставки = МестоСоответствующееКоду;
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь(); 
		ДокументПеремещений.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		ДокументПеремещений.Организация = ТекущийПользователь.Организация;
		ДокументПеремещений.ПодразделениеКомпании = ТекущийПользователь.ПодразделениеОрганизации;
		ДокументПеремещений.Автор = ТекущийПользователь;
		ДокументПеремещений.Менеджер = ТекущийПользователь;
		//rarus vikhle 27.04.2020 mt 15695 +++
		Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекущийПользователь,ДокументПеремещений.Компания,ДокументПеремещений.Контрагент);
		//rarus vikhle 27.04.2020 mt 15695 ---
		ДокументПеремещений.ДатаСоздания = ТекущаяДата();
		ДокументПеремещений.Комментарий = "Документ создан автоматически регламентным формированием перемещения к кузовостроителю.";
		ДокументПеремещений.ДатаПроведения = ТекущаяДата();

		СтрокаТЧ = ДокументПеремещений.ИзделияДляПеремещения.Добавить();
		СтрокаТЧ.Изделие = ВыборкаДетальныеЗаписи.Изделие;
		//rarus BProg_Gladkov 19.11.2019 0014452 ++ работа с ключевыми датами из регистра
		СтрокаТЧ.ДатаПолучения 	= КлючевыеДатыЗаказаНаЗавод.FinishDate + 1;
		СтрокаТЧ.ДатаДоставки 	= КлючевыеДатыЗаказаНаЗавод.ADD + 9*60*60;
		//rarus BProg_Gladkov 19.11.2019 0014452 -- 
		
		Попытка		
			ДокументПеремещений.Записать(РежимЗаписиДокумента.Проведение);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сформировано перемещение изделия %1 к кузовостроителю: %2'"), ВыборкаДетальныеЗаписи.Изделие, ДокументПеремещений.Ссылка),);
			// rarus tenkam 09.06.2018 mantis 13138 +++
			УстановитьЛогистическийТипДляКузовостроителя(ВыборкаДетальныеЗаписи.Изделие);
			// rarus tenkam 09.06.2016 mantis 13138 --- 
		Исключение
			//rarus FominskiyAS 19.04.2019  mantis 14191 +++
			//Сообщить("Не удалось сформировать перемещение изделий: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Сообщить(Нстр("ru = 'Не удалось сформировать перемещение продуктов: '; en = 'Failed to generate the movement of goods: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			//rarus FominskiyAS 19.04.2019  mantis 14191 ---
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось сформировать перемещение изделия %1 к кузовостроителю.'"),ВыборкаДетальныеЗаписи.Изделие),);
		КонецПопытки;
	КонецЦикла;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное формирование перемещения изделий к кузовостроителю'"));
КонецПроцедуры
//rarus tenkam 31.07.2017 mantis 10271 ---

// rarus tenkam 13.06.2018 mantis 13138 +++
Процедура УстановитьЛогистическийТипДляКузовостроителя(ИзделиеСсылка)
	Если НЕ ЗначениеЗаполнено(ИзделиеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказНаЗавод = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(ИзделиеСсылка); //rarus bonmak 13.08.2019 14427 изменил регистр
	Если Не ЗначениеЗаполнено(ИзделиеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	КодАдресаДоставки = ЗаказНаЗавод.КодАдресаДоставки;
	Если НЕ ЗначениеЗаполнено(КодАдресаДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	ЛогистическийТип = Справочники.Scan_ТипыПродуктовЛогистика.ПустаяСсылка();
	
	//rarus bonmak 04.09.2019 14442 ++
	//Если КодАдресаДоставки.Код = "000000006" ИЛИ КодАдресаДоставки.Код = "000000008" Тогда	// IRIZAR или PORT_HIGER 
		//Если ИзделиеСсылка.ТипПродуктаМаркетинговый.Код = "000000011" Тогда		// Intercity/Междугородный
		//	ЛогистическийТип = Справочники.Scan_ТипыПродуктовЛогистика.НайтиПоКоду("000000001");	// Автобус междугородний		
		//ИначеЕсли ИзделиеСсылка.ТипПродуктаМаркетинговый.Код = "000000008" Тогда	// Turist/Туристический 
		//	ЛогистическийТип = Справочники.Scan_ТипыПродуктовЛогистика.НайтиПоКоду("000000055");	// Автобус туристический 	
		//КонецЕсли;
	//ИначеЕсли КодАдресаДоставки.Код = "000000007" ИЛИ КодАдресаДоставки.Код = "000000003" ИЛИ КодАдресаДоставки.Код = "000000010" Тогда	// 9ISTRAIL или 9KH-KIPPER или 9WIELTON 
		//Если ИзделиеСсылка.ТипПродуктаМаркетинговый.Код = "000000004" Тогда		// Construction/Строительная техника
		//	ЛогистическийТип = Справочники.Scan_ТипыПродуктовЛогистика.НайтиПоКоду("000000011");	// Самосвал строительный 
		//ИначеЕсли ИзделиеСсылка.ТипПродуктаМаркетинговый.Код = "000000006" Тогда		// Mining, oil & gaz/Карьерная техника 
		//	ЛогистическийТип = Справочники.Scan_ТипыПродуктовЛогистика.НайтиПоКоду("000000051");	// Самосвал карьерный
		//КонецЕсли;
	Если КодАдресаДоставки.Код = "000000006" ИЛИ КодАдресаДоставки.Код = "000000008"
		ИЛИ КодАдресаДоставки.Код = "000000007" ИЛИ КодАдресаДоставки.Код = "000000003" 
		ИЛИ КодАдресаДоставки.Код = "000000010" Тогда 
		ЛогистическийТип = ИзделиеСсылка.ТипыМаркетинговые.ТипПродуктЛогистический;
		//rarus bonmak 04.09.2019 14442 --
	ИначеЕсли КодАдресаДоставки.Код = "000000004" Тогда	// 9SCHMITZ-L
		
		ЛогистическийТип = Справочники.Scan_ТипыПродуктовЛогистика.НайтиПоКоду("000000010");	// Грузовой-рефрижератор
		
	ИначеЕсли КодАдресаДоставки.Код = "000000009" Тогда	// DC ST_PETE
		
		ЛогистическийТип = Справочники.Scan_ТипыПродуктовЛогистика.НайтиПоКоду("000000011");	// Самосвал строительный
		
	КонецЕсли;
	
	// Проверим, что 
	// 1. найден нужный логистический тип
	// 2. установлен отличный от найденного логистический тип
	Если ЗначениеЗаполнено(ЛогистическийТип) И ЛогистическийТип <> ИзделиеСсылка.ТипПродуктаЛогистический Тогда
		// Установим новый логистический тип
		ИзделиеОбъект = ИзделиеСсылка.ПолучитьОбъект();
		ИзделиеОбъект.ТипПродуктаЛогистический = ЛогистическийТип;
		ИзделиеОбъект.НеОбновлятьЛогистическиеТипыИз1БД = Истина;
		
		СформированноеНаименование = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(ИзделиеОбъект);
		Если СформированноеНаименование <> "" Тогда
			ИзделиеОбъект.Наименование = СформированноеНаименование;
		КонецЕсли;
		
		Попытка
			ИзделиеОбъект.Записать();
			ЗаписьЖурналаРегистрации("Регламентное задание.ПеремещениеККузовостроителю.Установка логистического типа", УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для изделия %1 установлен логистический тип %2'"), ИзделиеСсылка, ЛогистическийТип),);
		Исключение
			//rarus FominskiyAS 19.04.2019  mantis 14191 +++
			//Сообщить("Не удалось сформировать перемещение изделий: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Сообщить(Нстр("ru = 'Не удалось сформировать перемещение продуктов: '; en = 'Failed to generate the movement of goods: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			//rarus FominskiyAS 19.04.2019  mantis 14191 ---
			ЗаписьЖурналаРегистрации("Регламентное задание.ПеремещениеККузовостроителю.Установка логистического типа", УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось для изделия %1 установить логистический тип %2'"), ИзделиеСсылка, ЛогистическийТип),);	
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

// rarus tenkam 13.06.2018 mantis 13138 ---

///////////////////////////////////////////////////////////////////////
//// ОЧИСТКА РЕГИСТРОВ С ЛОГАМИ

//rarus tenkam 17.10.2017 mantis 11403 +++

//Процедура ОчисткаРегистраОбменаС1БД(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
Процедура ОчисткаРегистровСведений(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 22.09.2021 m 17927	
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ФормированиеПеремещенийККузовостроителю);
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОчисткаРегистровСведений); //rarus vikhle 23.09.2021 mt 17927
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ОчисткаРегистровСведений.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	
	//ИмяСобытия = НСтр("ru = 'Регламентное задание.ОчисткаРегистраРегистрацияОбменаС1БД'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИмяСобытия = НСтр("ru = 'Регламентное задание.ОчисткаРегистровСведений'", ОбщегоНазначения.КодОсновногоЯзыка()); //rarus vikhle 23.09.2021 mt 17927 27.09.2021 АПК
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		//НСтр("ru = 'Начата регламентная очистка регистра Регистрация обмена с 1БД'"));
		НСтр("ru = 'Начата регламентная очистка регистров сведений'")); //rarus vikhle 22.09.2021 mt 17927
		
	//КоличествоДней = Scan_ПраваИНастройки.Scan_Право("ПериодОчисткиЗаписейРегистраОбменаС1БД"); //rarus vikhle 22.09.2021 mt 17927
	
	//rarus vikhle 22.09.2021 mt 17927 +++
	ТаблицаНастроек	= Scan_ВспомогательныеФункцииСервер.РазобратьНастройкиОчисткиРегистров();
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		
		УдаленоЗаписей		= 0;
		СообщениеОбОшибке	= "";
		
		Если СтрокаТаблицы.КоличествоДней > 0 Тогда  
			КонечныйПериод = НачалоДня(ТекущаяДатаСеанса()) - СтрокаТаблицы.КоличествоДней * 24 * 60 * 60;
			УдаленоЗаписей = УдалитьЗаписиРегистраДоПериода(СтрокаТаблицы.РегистрСведений, КонечныйПериод, СообщениеОбОшибке);
			
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				Комментарий = СтрШаблон(Нстр("ru = 'В регистре сведений ""%1"" не были удалены записи по причине: %2'"), СтрокаТаблицы.РегистрСведений, СообщениеОбОшибке);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
			Иначе
				Комментарий = СтрШаблон(Нстр("ru = 'В регистре сведений ""%1"" удалено записей: %2'"), СтрокаТаблицы.РегистрСведений, УдаленоЗаписей);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание,,, Комментарий);	
			КонецЕсли;	
			
		Иначе
			Комментарий = СтрШаблон(Нстр("ru = 'Не заполнен период очистки для регистра ""%1"". Очистка не выполнена.'",ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаТаблицы.РегистрСведений);
			ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Предупреждение,,,Комментарий);		
		КонецЕсли;
		
	КонецЦикла;	
	//rarus vikhle 22.09.2021 mt 17927 ---
	
	//rarus vikhle 22.09.2021 mt 17927 +++ закомментировал
	//Если Не ЗначениеЗаполнено(КоличествоДней) Тогда
	//	КоличествоДней = 31;
	//КонецЕсли;
	//ДатаОкончания = НачалоДня(ТекущаяДата()) - КоличествоДней*24*60*60;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Scan_РегистрацияОбмена1БД.Период КАК Период,
	//	//|	Scan_РегистрацияОбмена1БД.Подразделение КАК Подразделение, //rarus bonmak 16210 20.08.2020
	//	|	Scan_РегистрацияОбмена1БД.ВидЗапроса КАК ВидЗапроса,
	//	//|	Scan_РегистрацияОбмена1БД.Объект КАК Объект //rarus bonmak 16210 20.08.2020
	//	//rarus bonmak 16210 20.08.2020 ++
	//	|	Scan_РегистрацияОбмена1БД.ДатаВМиллисекундах КАК ДатаВМиллисекундах
	//	//rarus bonmak 16210 20.08.2020 --
	//	|ИЗ
	//	|	РегистрСведений.Scan_РегистрацияОбмена1БД КАК Scan_РегистрацияОбмена1БД
	//	|ГДЕ
	//	|	Scan_РегистрацияОбмена1БД.Период МЕЖДУ ДАТАВРЕМЯ(1, 1, 1) И &ДатаОкончания";
	//
	//Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//ВсегоУдалено = 0;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	МенеджерЗаписи = РегистрыСведений.Scan_РегистрацияОбмена1БД.СоздатьМенеджерЗаписи();
	//	//МенеджерЗаписи.Подразделение = ВыборкаДетальныеЗаписи.Подразделение; //rarus bonmak 16210 20.08.2020
	//	МенеджерЗаписи.Период = ВыборкаДетальныеЗаписи.Период;
	//	МенеджерЗаписи.ВидЗапроса = ВыборкаДетальныеЗаписи.ВидЗапроса;
	//	//rarus bonmak 16210 20.08.2020 ++
	//	//МенеджерЗаписи.Объект = ВыборкаДетальныеЗаписи.Объект;
	//	МенеджерЗаписи.ДатаВМиллисекундах = ВыборкаДетальныеЗаписи.ДатаВМиллисекундах;
	//	//rarus bonmak 16210 20.08.2020 --
	//	МенеджерЗаписи.Прочитать();
	//	МенеджерЗаписи.Удалить();
	//	ВсегоУдалено = ВсегоУдалено + 1;
	//КонецЦикла;

	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удалено записей: %1'"), ВсегоУдалено),);
		
	//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная очистка регистра Регистрация обмена с 1БД'"));
	//rarus vikhle 22.09.2021 mt 17927 ---
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная очистка регистров сведений'", ОбщегоНазначения.КодОсновногоЯзыка()));
КонецПроцедуры
//rarus tenkam 17.10.2017 mantis 11403 ---

//rarus tenkam 17.11.2017 mantis 9427 +++
///////////////////////////////////////////////////////////////////////
//// ЧЕК ЛИСТ ТЕХНИЧЕСКОГО СОСТОЯНИЯ ИЗДЕЛИЯ

Процедура КонтрольСроковВыполненияКТС(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров 
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_КонтрольСроковВыполненияКТС);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_КонтрольСроковВыполненияКТС.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Контроль сроков выполнения КТС'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начат регламентный контроль сроков выполнения КТС'"));
	
	Запрос = Новый Запрос;
	
	// rarus tenkam 28.07.2021 mantis 17459 + Изменен запрос
	Запрос.Текст = "ВЫБРАТЬ	
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Изделие КАК Изделие,
	               |	МАКСИМУМ(Scan_МатрицаХраненияИзделийСрезПоследних.Период) КАК Период
	               |ПОМЕСТИТЬ ПоследниеПериодыЗаписей
	               |ИЗ
	               |	РегистрСведений.Scan_МатрицаХраненияИзделий.СрезПоследних(&НаДату, ) КАК Scan_МатрицаХраненияИзделийСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Изделие
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследниеПериодыЗаписей.Период КАК Период,
	               |	ПоследниеПериодыЗаписей.Изделие КАК Изделие,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.МестоХранения КАК МестоХранения,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Реквизит КАК Реквизит,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Документ КАК Документ,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Значение КАК Значение,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Изделие.ТипПродуктаЛогистический КАК ЛогистическийТип,
	               |	МАКСИМУМ(Scan_МатрицаХраненияИзделий.Период) КАК ПериодФактическогоКТС
	               |ПОМЕСТИТЬ ПоследниеЗаписиПродуктов
	               |ИЗ
	               |	ПоследниеПериодыЗаписей КАК ПоследниеПериодыЗаписей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_МатрицаХраненияИзделий.СрезПоследних КАК Scan_МатрицаХраненияИзделийСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_МатрицаХраненияИзделий КАК Scan_МатрицаХраненияИзделий
	               |			ПО Scan_МатрицаХраненияИзделийСрезПоследних.Изделие = Scan_МатрицаХраненияИзделий.Изделие
	               |				И Scan_МатрицаХраненияИзделийСрезПоследних.Документ = Scan_МатрицаХраненияИзделий.Документ
	               |				И (Scan_МатрицаХраненияИзделий.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_КонтрольныеДатыХраненияИзделий.ДатаВыполненияКТСФакт))
	               |		ПО ПоследниеПериодыЗаписей.Изделие = Scan_МатрицаХраненияИзделийСрезПоследних.Изделие
	               |			И ПоследниеПериодыЗаписей.Период = Scan_МатрицаХраненияИзделийСрезПоследних.Период
	               |ГДЕ
	               |	ПоследниеПериодыЗаписей.Изделие.Аренда = ЛОЖЬ
	               |	И Scan_МатрицаХраненияИзделий.Период ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоследниеПериодыЗаписей.Период,
	               |	ПоследниеПериодыЗаписей.Изделие,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.МестоХранения,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Реквизит,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Документ,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Значение,
	               |	Scan_МатрицаХраненияИзделийСрезПоследних.Изделие.ТипПродуктаЛогистический
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_СрокиВыполненияКонтроляТехническогоCостоянияСрезПоследних.ПакетСервисныхОпераций КАК ПакетСервисныхОпераций,
	               |	Scan_СрокиВыполненияКонтроляТехническогоCостоянияСрезПоследних.ЛогистическийТип КАК ЛогистическийТип,
	               |	Scan_СрокиВыполненияКонтроляТехническогоCостоянияСрезПоследних.СрокКТС КАК СрокКТС,
	               |	Scan_СрокиВыполненияКонтроляТехническогоCостоянияСрезПоследних.Период КАК Период
	               |ПОМЕСТИТЬ СрокиКТС
	               |ИЗ
	               |	РегистрСведений.Scan_СрокиВыполненияКонтроляТехническогоCостояния.СрезПоследних(&НаДату, ) КАК Scan_СрокиВыполненияКонтроляТехническогоCостоянияСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СрокиКТС.Период) КАК Период,
	               |	СрокиКТС.ЛогистическийТип КАК ЛогистическийТип
	               |ПОМЕСТИТЬ СрокиКТСмакспериод
	               |ИЗ
	               |	СрокиКТС КАК СрокиКТС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СрокиКТС.ЛогистическийТип
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СрокиКТСмакспериод.Период КАК Период,
	               |	СрокиКТСмакспериод.ЛогистическийТип КАК ЛогистическийТип,
	               |	СрокиКТС.ПакетСервисныхОпераций КАК ПакетСервисныхОпераций,
	               |	СрокиКТС.СрокКТС КАК СрокКТС
	               |ПОМЕСТИТЬ СрокиКТСитого
	               |ИЗ
	               |	СрокиКТСмакспериод КАК СрокиКТСмакспериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СрокиКТС КАК СрокиКТС
	               |		ПО СрокиКТСмакспериод.Период = СрокиКТС.Период
	               |			И СрокиКТСмакспериод.ЛогистическийТип = СрокиКТС.ЛогистическийТип
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследниеЗаписиПродуктов.Период КАК Период,
	               |	ПоследниеЗаписиПродуктов.Изделие КАК Изделие,
	               |	ПоследниеЗаписиПродуктов.МестоХранения КАК МестоХранения,
	               |	ПоследниеЗаписиПродуктов.Реквизит КАК Реквизит,
	               |	ПоследниеЗаписиПродуктов.Документ КАК Документ,
	               |	ПоследниеЗаписиПродуктов.Значение КАК Значение,
	               |	ЕСТЬNULL(СрокиКТСитого.ПакетСервисныхОпераций, ЗНАЧЕНИЕ(Справочник.Scan_ПакетыСервисныхОпераций.ПустаяСсылка)) КАК ПакетСервисныхОпераций,
	               |	ПоследниеЗаписиПродуктов.ЛогистическийТип КАК ЛогистическийТип,
	               |	ЕСТЬNULL(СрокиКТСитого.СрокКТС, 0) КАК СрокКТС,
	               |	ЕСТЬNULL(Scan_МатрицаХраненияИзделийСрезПоследних.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПродажиИзделия,
	               |	ПоследниеЗаписиПродуктов.Документ.Дата КАК ДокументДата
	               |ИЗ
	               |	ПоследниеЗаписиПродуктов КАК ПоследниеЗаписиПродуктов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СрокиКТСитого КАК СрокиКТСитого
	               |		ПО ПоследниеЗаписиПродуктов.ЛогистическийТип = СрокиКТСитого.ЛогистическийТип
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_МатрицаХраненияИзделий.СрезПоследних(&НаДату, Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_КонтрольныеДатыХраненияИзделий.ДатапродажиИзделия)) КАК Scan_МатрицаХраненияИзделийСрезПоследних
	               |		ПО ПоследниеЗаписиПродуктов.Изделие = Scan_МатрицаХраненияИзделийСрезПоследних.Изделие
	               |ГДЕ
	               |	(ПоследниеЗаписиПродуктов.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_КонтрольныеДатыХраненияИзделий.ДатаПостановкиНаХранение)
	               |			ИЛИ ПоследниеЗаписиПродуктов.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_КонтрольныеДатыХраненияИзделий.ДатаВыполненияКТСФакт))";
	
	Запрос.УстановитьПараметр("НаДату",ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗначений = РезультатЗапроса.Выбрать();
	КолвоДнейИзНастройки = Scan_ПраваИНастройки.Scan_Право("КоличествоДнейДоОтправкиЧекЛиста");
	КолвоДнейИзНастройкиВСек = КолвоДнейИзНастройки*24*60*60; 
	МассивЧекЛистов = Новый Массив;		// rarus tenkam 24.08.2018 mantis 13264 +
	Пока ВыборкаЗначений.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаЗначений.ПакетСервисныхОпераций) Тогда
			// для текущего логистического типа нет пакета сервисных операций
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для логистического типа %1 не задан пакет сервисных операций'"),ВыборкаЗначений.ЛогистическийТип),);
			Продолжить;
		КонецЕсли;
		// rarus tenkam 28.01.2021 mantis 16730 +++
		Если ВыборкаЗначений.СрокКТС = 0 Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для логистического типа %1 не задан срок КТС'"),ВыборкаЗначений.ЛогистическийТип),);
			Продолжить;
		КонецЕсли;		
		// rarus tenkam 28.01.2021 mantis 16730 ---
		
		// rarus tenkam 28.07.2021 mantis 17459 ++
		Если ВыборкаЗначений.ДатаПродажиИзделия <> Дата(1,1,1) И
			ВыборкаЗначений.Реквизит = ПредопределенноеЗначение("Перечисление.Scan_КонтрольныеДатыХраненияИзделий.ДатаВыполненияКТСФакт") И
			ВыборкаЗначений.Значение < ВыборкаЗначений.ДатаПродажиИзделия И
			ВыборкаЗначений.Значение > ВыборкаЗначений.ДокументДата Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для изделия %1 чек-лист был исполнен до продажи'"),ВыборкаЗначений.Изделие),);
			Продолжить;
		КонецЕсли;
		// rarus tenkam 28.07.2021 mantis 17459 --
		
		ДатаСрокКТС = ВыборкаЗначений.Значение + ВыборкаЗначений.СрокКТС*24*60*60;
		ДатаПроверки = ДатаСрокКТС - КолвоДнейИзНастройкиВСек;
		Если ДатаПроверки <= ТекущаяДатаСеанса() Тогда
			// Сформируем документ чек-лист
			СообщениеОбОшибке = "";
			// rarus tenkam 22.07.2019 mantis 14427 +++
			//ЧекЛистСсылка = Документы.Scan_ЧекЛистТехническогоСостоянияИзделия.СформироватьЧекЛист(ВыборкаЗначений.Продукт.Изделие,ВыборкаЗначений.МестоХранения, ДатаСрокКТС, ВыборкаЗначений.ПакетСервисныхОпераций, СообщениеОбОшибке);
			ЧекЛистСсылка = Документы.Scan_ЧекЛистТехническогоСостоянияИзделия.СформироватьЧекЛист(ВыборкаЗначений.Изделие,ВыборкаЗначений.МестоХранения, ДатаСрокКТС, ВыборкаЗначений.ПакетСервисныхОпераций, СообщениеОбОшибке);
			// rarus tenkam 22.07.2019 mantis 14427 ---	
			
			Если НЕ ЗначениеЗаполнено(ЧекЛистСсылка) Тогда
				//Ошибка
				// rarus tenkam 22.07.2019 mantis 14427 +++
				//ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось создать чек лист для изделия %1. %2'"), ВыборкаЗначений.Продукт.Изделие, СообщениеОбОшибке),);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось создать чек лист для изделия %1. %2'"), ВыборкаЗначений.Изделие, СообщениеОбОшибке),);
				// rarus tenkam 22.07.2019 mantis 14427 +++
				Продолжить;
			КонецЕсли;
			
			//rarus tenkam 07.02.2018 mantis 12721 +++
			Документы.Scan_ЧекЛистТехническогоСостоянияИзделия.ОбработатьДанныеАКБ(ЧекЛистСсылка);
			//rarus tenkam 07.02.2018 mantis 12721 ---
			
			// rarus tenkam 24.08.2018 mantis 13264 +++
			// Запишем в массив все созданные чек-листы, а затем после цикла будем отправлять письма
			МассивЧекЛистов.Добавить(ЧекЛистСсылка);
			////Отправим чек лист
			//Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
			//	СозданныйОбъект = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоСЧекЛистом(ЧекЛистСсылка);	
			//Иначе	
			//	// Не удалось отправить письмо
			//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо с чек листом %1. Необходимо включить механизм шаблонов для отправки писем'"),  ЧекЛистСсылка),);
			//КонецЕсли;
			//Если СозданныйОбъект = Неопределено Тогда	
			//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо с чек листом %1'"),  ЧекЛистСсылка),);		
			//Иначе
			//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправлено письмо с чек листом %1'"),ЧекЛистСсылка),);
			//КонецЕсли; 	
			// rarus tenkam 24.08.2018 mantis 13264 ---
		КонецЕсли; 		
	КонецЦикла;
	
	// rarus tenkam 24.08.2018 mantis 13264 +++
	// Отправим чек листы
	Для Каждого ТекЧекЛист Из МассивЧекЛистов Цикл
		//rarus BProg_Gladkov 05.05.2020 0015962 ++ ОтправитьПисьмоПоШаблонуИзПрава
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
			РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонУведомленияХранителюПриКТСИзделий", ТекЧекЛист);
			Если РезультатОтправкиПисьма.ПисьмоОтправлено Тогда
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправлено письмо с чек листом %1'"),ТекЧекЛист),);
			Иначе 
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо с чек листом %1'"),  ТекЧекЛист),);		
			КонецЕсли;
		Иначе	
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо с чек листом %1. Необходимо включить механизм шаблонов для отправки писем'"),  ТекЧекЛист),);
		КонецЕсли;
		//rarus BProg_Gladkov 05.05.2020 0015962 -- 
	КонецЦикла;
	// rarus tenkam 24.08.2018 mantis 13264 ---
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершен регламентный контроль сроков выполнения КТС'"));
	
КонецПроцедуры

Процедура ПроверкаПодтвержденияДокументаЧекЛист(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ПроверкаПодтвержденияДокументаЧекЛист);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ПроверкаПодтвержденияДокументаЧекЛист.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Проверка подтверждения документа ""Чек лист технического состояния изделия""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начата регламентная проверка подтверждения Чек листа технического состояния'"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ЧекЛистТехническогоСостоянияИзделия.Ссылка КАК Ссылка,
	               |	Scan_ЧекЛистТехническогоСостоянияИзделия.Изделие КАК Изделие,
	               |	Scan_ЧекЛистТехническогоСостоянияИзделия.ПлановаяДатаВыполненияКТС КАК ПлановаяДатаВыполненияКТС,
	               |	Scan_ЧекЛистТехническогоСостоянияИзделия.МестоХранения КАК МестоХранения
	               |ПОМЕСТИТЬ ЧекЛисты
	               |ИЗ
	               |	Документ.Scan_ЧекЛистТехническогоСостоянияИзделия КАК Scan_ЧекЛистТехническогоСостоянияИзделия
	               |ГДЕ
	               |	Scan_ЧекЛистТехническогоСостоянияИзделия.КТСВыполнен = ЛОЖЬ
	               |	И Scan_ЧекЛистТехническогоСостоянияИзделия.Проведен = ИСТИНА
	               |	И Scan_ЧекЛистТехническогоСостоянияИзделия.ПометкаУдаления = ЛОЖЬ
	               |	И Scan_ЧекЛистТехническогоСостоянияИзделия.ПричинаНевыполнения = ЗНАЧЕНИЕ(Перечисление.Scan_ПричиныНевыполненияКТС.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Scan_МатрицаХраненияИзделий.Значение) КАК Значение,
	               |	Scan_МатрицаХраненияИзделий.Изделие КАК Изделие
	               |ПОМЕСТИТЬ ДатыПостановки
	               |ИЗ
	               |	РегистрСведений.Scan_МатрицаХраненияИзделий КАК Scan_МатрицаХраненияИзделий
	               |ГДЕ
	               |	(Scan_МатрицаХраненияИзделий.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_КонтрольныеДатыХраненияИзделий.ДатаПостановкиНаХранение)
	               |			ИЛИ Scan_МатрицаХраненияИзделий.Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_КонтрольныеДатыХраненияИзделий.ДатаВыполненияКТСФакт))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_МатрицаХраненияИзделий.Изделие
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЧекЛисты.Ссылка КАК Ссылка,
	               |	ЧекЛисты.Изделие КАК Изделие,
	               |	ЧекЛисты.ПлановаяДатаВыполненияКТС КАК ПлановаяДатаВыполненияКТС,
	               |	ЕСТЬNULL(ДатыПостановки.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПостановкиНаХранение,
	               |	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПродажиИзделия,
	               |	ЧекЛисты.МестоХранения КАК МестоХранения,
	               |	ЧекЛисты.Изделие.БУ КАК БУ,
	               |	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиКлиенту.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПродажиКлиенту,
	               |	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУДилеру.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПродажиБУДилеру,
	               |	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУКлиенту.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПродажиБУКлиенту
	               |ИЗ
	               |	ЧекЛисты КАК ЧекЛисты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	               |				,
	               |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
	               |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия
	               |		ПО ЧекЛисты.Изделие.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПостановки КАК ДатыПостановки
	               |		ПО ЧекЛисты.Изделие = ДатыПостановки.Изделие
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	               |				,
	               |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
	               |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиКлиенту
	               |		ПО ЧекЛисты.Изделие.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиКлиенту.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	               |				,
	               |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
	               |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУДилеру
	               |		ПО ЧекЛисты.Изделие = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУДилеру.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	               |				,
	               |				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
	               |					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУКлиенту
	               |		ПО ЧекЛисты.Изделие = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУКлиенту.Объект";
	               // rarus tenkam 22.07.2019 mantis 14427 ---
				   
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗначений = РезультатЗапроса.Выбрать();
	КолвоДнейИзНастройки = Scan_ПраваИНастройки.Scan_Право("КоличествоДнейПослеПроверкиТехсостоянияПриОтправкеПовторногоНапоминания");
	КолвоДнейИзНастройкиВСек = КолвоДнейИзНастройки*24*60*60; 
	Пока ВыборкаЗначений.Следующий() Цикл
		
		// rarus tenkam 26.02.2018 mantis 12844 +++ 		
		//ДатаПроверки = ВыборкаЗначений.ДатаПостановкиНаХранение + КолвоДнейИзНастройкиВСек;
		ДатаПроверки = ВыборкаЗначений.ПлановаяДатаВыполненияКТС + КолвоДнейИзНастройкиВСек;
		// rarus tenkam 26.02.2018 mantis 12844 ---
		
		Если ДатаПроверки <= ТекущаяДатаСеанса() Тогда
			
			// rarus tenkam 13.02.2018 mantis 12880 +++
			
			// rarus tenkam 26.01.2021 mantis 16730 +++
			//ДатаПродажиУходаСоСклада = ВыборкаЗначений.ДатаПродажиИзделия; //rarus bonmak 13.08.2019 14427 было //Дата('00010101');
			Если ВыборкаЗначений.БУ Тогда
				ДатаПродажиУходаСоСклада = ВыборкаЗначений.ДатаПродажиБУДилеру;	
			Иначе
				ДатаПродажиУходаСоСклада = ВыборкаЗначений.ДатаПродажиИзделия;	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаПродажиУходаСоСклада) Тогда
				Если ВыборкаЗначений.БУ Тогда
					ДатаПродажиУходаСоСклада = ВыборкаЗначений.ДатаПродажиБУКлиенту;	
				Иначе
					ДатаПродажиУходаСоСклада = ВыборкаЗначений.ДатаПродажиКлиенту;	
				КонецЕсли;	
			КонецЕсли;
			// rarus tenkam 26.01.2021 mantis 16730 ---
			
			//rarus bonmak 13.08.2019 14427 ++ получаю в запросе выше
			// Может продукт был продан?
			//ТекПродукт = РегистрыСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.ПолучитьПродуктПоИзделию(ВыборкаЗначений.Изделие);
			//Если ЗначениеЗаполнено(ТекПродукт) Тогда   			
			//	ДатаПродажиУходаСоСклада = ТекПродукт.ДатаПродажиИзделия;
			//КонецЕсли;
			//rarus bonmak 13.08.2019 14427 --
			
			
			ДанныеМестоположения = РегистрыНакопления.Scan_МестонахождениеИзделий.ПолучитьДанныеПоМестонахождениюИзделия(ВыборкаЗначений.Изделие, ТекущаяДата(),);
			МестоположениеИзделия = ?(ДанныеМестоположения = Неопределено, Неопределено, ДанныеМестоположения.МестоХранения);
			ДатаПриходаИзделия = ?(ДанныеМестоположения = Неопределено, Дата('00010101'), ДанныеМестоположения.ДатаПрихода); 
			Если МестоположениеИзделия <> ВыборкаЗначений.МестоХранения И НЕ ЗначениеЗаполнено(ДатаПродажиУходаСоСклада) Тогда
				// Изделие ушло со склада
				ДатаПродажиУходаСоСклада = ДатаПриходаИзделия;	
			КонецЕсли;
			
			// Изделие было продано или ушло со склада
			Если ЗначениеЗаполнено(ДатаПродажиУходаСоСклада) Тогда
				// Нужно установить причину в Чек-листе
				ЧекЛистОбъект = ВыборкаЗначений.Ссылка.ПолучитьОбъект();
				// Мог ли дилер провести КТС?
				Если ДатаПродажиУходаСоСклада < ВыборкаЗначений.ПлановаяДатаВыполненияКТС Тогда
					ПричинаНевыполнения = Перечисления.Scan_ПричиныНевыполненияКТС.ИзделиеПроданоУшлоСоСклада;
				Иначе
					ПричинаНевыполнения = Перечисления.Scan_ПричиныНевыполненияКТС.КТСНеВыполненДилером;
				КонецЕсли;
				ЧекЛистОбъект.ПричинаНевыполнения = ПричинаНевыполнения;
				Попытка
					ЧекЛистОбъект.Записать();
				Исключение
				КонецПопытки;
				// Письмо не нужно отправлять
				Продолжить;
			КонецЕсли;
			// rarus tenkam 13.02.2018 mantis 12880 ---
			
			//Отправим письмо-уведомление
			Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
				//rarus BProg_Gladkov 05.05.2020 0015962 ++ ОтправитьПисьмоПоШаблонуИзПрава
				РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонУведомленияОПодтвержденииЧекЛистаТехническогоСостояния", ВыборкаЗначений.Ссылка); //rarus BProg_Gladkov 02.05.2020 0015962 +-
				Если РезультатОтправкиПисьма.ПисьмоОтправлено Тогда
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправлено письмо с повторным уведомлением о подтверждении КТС %1'"),ВыборкаЗначений.Ссылка),);
				Иначе 
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо с повторным уведомлением о подтверждении КТС %1'"),  ВыборкаЗначений.Ссылка),);		
				КонецЕсли;
				//rarus BProg_Gladkov 05.05.2020 0015962 -- 
			Иначе	
				// Не удалось отправить письмо
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо с повторным уведомлением о подтверждении КТС %1. Необходимо включить механизм шаблонов для отправки писем'"),  ВыборкаЗначений.Ссылка),);
			КонецЕсли;
		КонецЕсли; 		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная проверка подтверждения Чек листа технического состояния'"));
	
КонецПроцедуры

//rarus tenkam 17.11.2017 mantis 9427 ---

//rarus tenkam 29.12.2017 mantis 9066 +++
///////////////////////////////////////////////////////////////////////
//// PLAN FOR WEEK

Процедура ЗаписатьPlanForWeek(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров 
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ЗаписатьПлановыеДанныеНаНеделю);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ЗаписатьПлановыеДанныеНаНеделю.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Записать плановые данные на неделю'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начата регламентная запись плановых данных на неделю'"));
	
	НомерНедели = НеделяГода(ТекущаяДата());
	ТекГод = Год(ТекущаяДата());
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    //rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		"ВЫБРАТЬ
		|	Scan_ЗаказыНаЗавод.Ссылка КАК ЗаказНаЗавод,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDDПоставщик.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDDПоставщик,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDD2,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDD
		|ПОМЕСТИТЬ ЗаказыНаЗаводСКлючевымиДатами
		|ИЗ
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDDПоставщик)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDDПоставщик
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDDПоставщик.Объект,
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD2)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Объект,
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыНаЗаводСКлючевымиДатами.ЗаказНаЗавод КАК ЗаказНаЗавод
		|ПОМЕСТИТЬ ЗаказыНаЗаводДляОтбора
		|ИЗ
		|	ЗаказыНаЗаводСКлючевымиДатами КАК ЗаказыНаЗаводСКлючевымиДатами
		|ГДЕ
		|	ЗаказыНаЗаводСКлючевымиДатами.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		|	И ВЫБОР
		|			КОГДА ЗаказыНаЗаводСКлючевымиДатами.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ЗаказыНаЗаводСКлючевымиДатами.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		|			КОГДА ЗаказыНаЗаводСКлючевымиДатами.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		// rarus tenkam 27.04.2020 mantis 15947 +++
		//|				ТОГДА ЗаказыНаЗаводСКлючевымиДатами.CDD2
		|				ТОГДА ЗаказыНаЗаводСКлючевымиДатами.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		// rarus tenkam 27.04.2020 mantis 15947 ---
		|			ИНАЧЕ ЗаказыНаЗаводСКлючевымиДатами.CDD
		|		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_Изделия.Ссылка) КАК SLA_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ SLA
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.МестоПроизводства.Код = ""000000075""
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_Изделия.Ссылка) КАК MZ_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ MZ
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.МестоПроизводства.Код = ""000000065""
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_Изделия.Ссылка) КАК MS_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ MS
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.МестоПроизводства.Код = ""000000154""
		|	И Scan_Изделия.ТипПродукта.ВидПродукта.Код = ""000000004""
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_Изделия.Ссылка) КАК BusChassis_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ BusChassis
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	(Scan_Изделия.МестоПроизводства.Код = ""000000154""
		|			ИЛИ Scan_Изделия.МестоПроизводства.Код = ""000000078"")
		|	И Scan_Изделия.ТипПродуктаЛогистический.Код = ""000000037""
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_Изделия.Ссылка КАК Buses_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ BusesВспомогательная
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	(Scan_Изделия.МестоПроизводства.Код = ""000000491""
		|			ИЛИ Scan_Изделия.МестоПроизводства.Код = ""000000358"")
		|	И (Scan_Изделия.ТипПродуктаЛогистический.Код = ""000000037""
		|			ИЛИ Scan_Изделия.ТипПродуктаЛогистический.Код = ""000000036""
		|			ИЛИ Scan_Изделия.ТипПродуктаЛогистический.Код = ""000000001"")
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие,
		|	&НомерНедели
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродуктаЛогистический.Код = ""000000037""
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродуктаЛогистический.Код = ""000000036""
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродуктаЛогистический.Код = ""000000001"")
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.МестоПроизводства.Код = ""000000358""
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоДоставки.ТипСклада = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСклада.АдресДоставки)
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоДоставки.ТипСклада = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСклада.Хранение))
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ BusesВспомогательная.Buses_План) КАК Buses_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ Buses
		|ИЗ
		|	BusesВспомогательная КАК BusesВспомогательная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие) КАК BodybuiltUnits_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ BodybuiltUnits
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродукта.ВидПродукта.Код = ""000000004""
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоОтгрузки.ЗарубежныйКузовостроитель = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие) КАК Jenty_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ Jenty
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Перевозчик.ГруппаJenty = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_КорректировкаИнформацииПоЗаявкам.Изделие) КАК TruckOnTruckDelivery_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ TruckOnTruckDelivery
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ДатаДоставкиПлановая МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Проведен = ИСТИНА
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.Scan_СпособыДоставкиПродуктов.Автовозом)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_КорректировкаИнформацииПоЗаявкам.Изделие) КАК JockeyTransportation_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ JockeyTransportation
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ДатаДоставкиПлановая МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Проведен = ИСТИНА
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.Scan_СпособыДоставкиПродуктов.СвоимХодом)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		// rarus tenkam 14.10.2019 mantis 14442 +++
		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие) КАК GenSetsTransportation_План,
		|	0 КАК GenSetsTransportation_План,
		// rarus tenkam 14.10.2019 mantis 14442 ---
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ GenSetsTransportation
		// rarus tenkam 27.04.2020 mantis 15947 +++
		//|ИЗ
		//|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		//|ГДЕ
		//|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		//|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		//|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		//|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена)
		////|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ГруппыПродуктов.ДизельныеЭлектростанции)	// rarus tenkam 14.10.2019 mantis 14442 +
		// rarus tenkam 27.04.2020 mantis 15947 ---
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие КАК QuantityOfVehicles_План,
		|	&НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ QuantityOfVehiclesВспомогательная
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаПолучения МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.КомпанияОтправитель.Кузовостроитель = ИСТИНА
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.ЗаявкаНаДействие.Подрядчик.Кузовостроитель = ИСТИНА)
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК)
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК))
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.ЗаявкаНаДействие.ВыездСотрудникаОЛ = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие,
		|	&НомерНедели
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	(Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу))
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Подрядчик.Кузовостроитель = ИСТИНА
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Грузоотправитель.Кузовостроитель = ИСТИНА)
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ДатаВыкупа МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ВыездСотрудникаОЛ = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&НомерНедели КАК НомерНедели,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ QuantityOfVehiclesВспомогательная.QuantityOfVehicles_План) КАК QuantityOfVehicles_План
		|ПОМЕСТИТЬ QuantityOfVehicles
		|ИЗ
		|	QuantityOfVehiclesВспомогательная КАК QuantityOfVehiclesВспомогательная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие КАК QuantityOfVisits_План,
		|	&НомерНедели КАК НомерНедели,
		|	ВЫБОР
		|		КОГДА Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Подрядчик = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
		|			ТОГДА Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Грузоотправитель
		|		ИНАЧЕ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Подрядчик
		|	КОНЕЦ КАК Кузовостроитель,
		|	НАЧАЛОПЕРИОДА(Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ДатаПолучения, ДЕНЬ) КАК ДатаПолучения
		|ПОМЕСТИТЬ QuantityOfVisitsВспомогательная
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	(Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Грузоотправитель.Кузовостроитель = ИСТИНА
		|			ИЛИ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Подрядчик.Кузовостроитель = ИСТИНА)
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ДатаПолучения МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И (Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК)
		|			ИЛИ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК))
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ВыездСотрудникаОЛ = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействие.Ссылка,
		|	&НомерНедели,
		|	ВЫБОР
		|		КОГДА Scan_ЗаявкаНаДействие.Подрядчик = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
		|			ТОГДА Scan_ЗаявкаНаДействие.Грузоотправитель
		|		ИНАЧЕ Scan_ЗаявкаНаДействие.Подрядчик
		|	КОНЕЦ,
		|	НАЧАЛОПЕРИОДА(Scan_ЗаявкаНаДействие.ДатаВыкупа, ДЕНЬ)
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие КАК Scan_ЗаявкаНаДействие
		|ГДЕ
		|	(Scan_ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение)
		|			ИЛИ Scan_ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу))
		|	И Scan_ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействие.Проведен = ИСТИНА
		|	И (Scan_ЗаявкаНаДействие.Подрядчик.Кузовостроитель = ИСТИНА
		|			ИЛИ Scan_ЗаявкаНаДействие.Грузоотправитель.Кузовостроитель = ИСТИНА)
		|	И Scan_ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаНаДействие.ДатаВыкупа МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаНаДействие.ВыездСотрудникаОЛ = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&НомерНедели КАК НомерНедели,
		|	МАКСИМУМ(QuantityOfVisitsВспомогательная.QuantityOfVisits_План) КАК QuantityOfVisits_План,
		|	QuantityOfVisitsВспомогательная.Кузовостроитель КАК Кузовостроитель,
		|	QuantityOfVisitsВспомогательная.ДатаПолучения КАК ДатаПолучения
		|ПОМЕСТИТЬ QuantityOfVisitsВспомогательная2
		|ИЗ
		|	QuantityOfVisitsВспомогательная КАК QuantityOfVisitsВспомогательная
		|
		|СГРУППИРОВАТЬ ПО
		|	QuantityOfVisitsВспомогательная.Кузовостроитель,
		|	QuantityOfVisitsВспомогательная.ДатаПолучения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&НомерНедели КАК НомерНедели,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ QuantityOfVisitsВспомогательная2.QuantityOfVisits_План) КАК QuantityOfVisits_План
		|ПОМЕСТИТЬ QuantityOfVisits
		|ИЗ
		|	QuantityOfVisitsВспомогательная2 КАК QuantityOfVisitsВспомогательная2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие) КАК AcceptanceHandoverDemoTestRent_План2,
		|	&НомерНедели КАК НомерНедели,
		|	0 КАК AcceptanceHandoverDemoTestRent_План
		|ПОМЕСТИТЬ AcceptanceHandoverDemoTestRent
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.аннулирована)
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.Аренда = ИСТИНА
		//Rarus bonmak 16.05.2022 19158 ++
		//|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ДемоИТест = ИСТИНА)
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.Демо = ИСТИНА
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.Тест = ИСТИНА)
		//Rarus bonmak 16.05.2022 19158 --
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаУходаФакт <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоДоставки.Код = ""000000219""
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоОтгрузки.Код = ""000000219"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&НомерНедели КАК НомерНедели,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие) КАК AdministrationOfVehiclesSales_План
		|ПОМЕСТИТЬ AdministrationOfVehiclesSales
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.аннулирована)
		|	И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК))
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ДатаПродажи <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ДатаПродажи МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	SLA.SLA_План КАК SLA,
		|	MZ.MZ_План КАК MZ,
		|	MS.MS_План КАК MS,
		|	BusChassis.BusChassis_План КАК BusChassis,
		|	Buses.Buses_План КАК Buses,
		|	BodybuiltUnits.BodybuiltUnits_План КАК BodybuiltUnits,
		|	Jenty.Jenty_План КАК Jenty,
		|	JockeyTransportation.JockeyTransportation_План КАК JockeyTransportation,
		|	GenSetsTransportation.GenSetsTransportation_План КАК GenSetsTransportation,
		|	TruckOnTruckDelivery.TruckOnTruckDelivery_План КАК TruckOnTruckDelivery,
		|	QuantityOfVehicles.QuantityOfVehicles_План КАК QuantityOfVehicles,
		|	QuantityOfVisits.QuantityOfVisits_План КАК QuantityOfVisits,
		|	AdministrationOfVehiclesSales.AdministrationOfVehiclesSales_План КАК AdministrationOfVehiclesSales,
		|	AcceptanceHandoverDemoTestRent.AcceptanceHandoverDemoTestRent_План2 КАК AcceptanceHandoverDemoTestRent
		|ИЗ
		|	SLA КАК SLA,
		|	MZ КАК MZ,
		|	MS КАК MS,
		|	BusChassis КАК BusChassis,
		|	BodybuiltUnits КАК BodybuiltUnits,
		|	Jenty КАК Jenty,
		|	TruckOnTruckDelivery КАК TruckOnTruckDelivery,
		|	JockeyTransportation КАК JockeyTransportation,
		|	GenSetsTransportation КАК GenSetsTransportation,
		|	QuantityOfVehicles КАК QuantityOfVehicles,
		|	QuantityOfVisits КАК QuantityOfVisits,
		|	AcceptanceHandoverDemoTestRent КАК AcceptanceHandoverDemoTestRent,
		|	AdministrationOfVehiclesSales КАК AdministrationOfVehiclesSales,
		|	Buses КАК Buses";
	
	КонецПериода = КонецНедели(Дата(ТекГод,1,1)+(НомерНедели-1) * 604800);
	НачалоПериода = НачалоНедели(Дата(ТекГод,1,1)+(НомерНедели-1) * 604800);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("НомерНедели", НомерНедели +1 );
	Запрос.УстановитьПараметр("ТекущийГод", ТекГод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,"Конец: " + КонецПериода + ", начало: " + НачалоПериода + ", номер: " + НомерНедели + " , год: " + ТекГод);	// rarus tenkam 08.04.2020 mantis 15947 +

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НаборЗаписей = РегистрыСведений.Scan_PlanForWeek.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерНедели.Установить(НомерНедели);
		НаборЗаписей.Отбор.Год.Установить(ТекГод);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		НоваяЗапись.Год = ТекГод;
		НоваяЗапись.НомерНедели = НомерНедели;
		НоваяЗапись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		НоваяЗапись.ДатаИзменения = ТекущаяДата();
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Записать plan for week'"));	// rarus tenkam 08.04.2020 mantis 15947 +

		НаборЗаписей.Записать();		
		
	КонецЕсли;      
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Записать плановые данные на неделю'"));
	
	// Запишем детальные записи
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    //rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр. 
		"ВЫБРАТЬ
		|	Scan_ЗаказыНаЗавод.Ссылка КАК ЗаказНаЗавод,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDDПоставщик.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDDПоставщик,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDD2,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDD
		|ПОМЕСТИТЬ ЗаказыНаЗаводСКлючевымиДатами
		|ИЗ
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDDПоставщик)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDDПоставщик
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDDПоставщик.Объект,
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|			,
		|			ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|				И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD2)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Объект,
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|			,
		|			ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|				И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыНаЗаводСКлючевымиДатами.ЗаказНаЗавод КАК ЗаказНаЗавод
		|ПОМЕСТИТЬ ЗаказыНаЗаводДляОтбора
		|ИЗ
		|	ЗаказыНаЗаводСКлючевымиДатами КАК ЗаказыНаЗаводСКлючевымиДатами
		|ГДЕ
		|	ЗаказыНаЗаводСКлючевымиДатами.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		|	И ВЫБОР
		|			КОГДА ЗаказыНаЗаводСКлючевымиДатами.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ЗаказыНаЗаводСКлючевымиДатами.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		|			КОГДА ЗаказыНаЗаводСКлючевымиДатами.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		// rarus tenkam 27.04.2020 mantis 15947 +++
		//|				ТОГДА ЗаказыНаЗаводСКлючевымиДатами.CDD2
		|				ТОГДА ЗаказыНаЗаводСКлючевымиДатами.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		// rarus tenkam 27.04.2020 mantis 15947 ---
		|			ИНАЧЕ ЗаказыНаЗаводСКлючевымиДатами.CDD
		|		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		
		|ВЫБРАТЬ
		|	Scan_Изделия.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ SLA
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.МестоПроизводства.Код = ""000000075""
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_Изделия.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ MZ
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.МестоПроизводства.Код = ""000000065""
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_Изделия.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ MS
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.МестоПроизводства.Код = ""000000154""
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//|	И Scan_Изделия.ТипПродукта.ВидПродукта.Код = ""000000004""
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_Изделия.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ BusChassis
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	(Scan_Изделия.МестоПроизводства.Код = ""000000154""
		|			ИЛИ Scan_Изделия.МестоПроизводства.Код = ""000000078"")
		|	И Scan_Изделия.ТипПродуктаЛогистический.Код = ""000000037""
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	NULL КАК Значение
		//|ПОМЕСТИТЬ Engines
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_Изделия.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ Buses
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	(Scan_Изделия.МестоПроизводства.Код = ""000000491""
		|			ИЛИ Scan_Изделия.МестоПроизводства.Код = ""000000358"")
		|	И (Scan_Изделия.ТипПродуктаЛогистический.Код = ""000000037""
		|			ИЛИ Scan_Изделия.ТипПродуктаЛогистический.Код = ""000000036""
		|			ИЛИ Scan_Изделия.ТипПродуктаЛогистический.Код = ""000000001"")
		//rarus BProg_Gladkov 21.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	И Scan_Изделия.ЗаказНаЗавод В (ВЫБРАТЬ ЗаказНаЗавод ИЗ ЗаказыНаЗаводДляОтбора)
		//|	И Scan_Изделия.ЗаказНаЗавод.КодАдресаДоставки = ЗНАЧЕНИЕ(Справочник.Scan_КодыАдресовДоставки.PORTSTP)
		//|	И ВЫБОР
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDDПоставщик МЕЖДУ &НачалоПериода И &КонецПериода
		//|			КОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1)
		//|				ТОГДА Scan_Изделия.ЗаказНаЗавод.CDD2 МЕЖДУ &НачалоПериода И &КонецПериода
		//|			ИНАЧЕ Scan_Изделия.ЗаказНаЗавод.CDD МЕЖДУ &НачалоПериода И &КонецПериода
		//|		КОНЕЦ
		//rarus BProg_Gladkov 21.11.2019 0014452 -- 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.НомерИзделия
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродуктаЛогистический.Код = ""000000037""
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродуктаЛогистический.Код = ""000000036""
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродуктаЛогистический.Код = ""000000001"")
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.МестоПроизводства.Код = ""000000358""
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоДоставки.ТипСклада = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСклада.АдресДоставки)
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоДоставки.ТипСклада = ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСклада.Хранение))
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ BodybuiltUnits
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродукта.ВидПродукта.Код = ""000000004""
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоОтгрузки.ЗарубежныйКузовостроитель = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ Jenty
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Перевозчик.ГруппаJenty = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ TruckOnTruckDelivery
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ДатаДоставкиПлановая МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Проведен = ИСТИНА
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.Scan_СпособыДоставкиПродуктов.Автовозом)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ JockeyTransportation
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ДатаДоставкиПлановая МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Проведен = ИСТИНА
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.Scan_СпособыДоставкиПродуктов.СвоимХодом)
		|;
		| 		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		// rarus tenkam 14.10.2019 mantis 14442 +++
		//|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.НомерИзделия КАК Значение
		|	NULL КАК Значение
		// rarus tenkam 14.10.2019 mantis 14442 ---
		//|ПОМЕСТИТЬ GenSetsTransportation
		// rarus tenkam 27.04.2020 mantis 15947 +++
		//|ИЗ
		//|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		//|ГДЕ
		//|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		//|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		//|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		//|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена)
		////|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ГруппыПродуктов.ДизельныеЭлектростанции)	// rarus tenkam 14.10.2019 mantis 14442 +
		// rarus tenkam 27.04.2020 mantis 15947 ---
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ QuantityOfVehicles
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаПолучения МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.КомпанияОтправитель.Кузовостроитель = ИСТИНА
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК)
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК))
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие.НомерИзделия
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	(Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу))
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Подрядчик.Кузовостроитель = ИСТИНА
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Грузоотправитель.Кузовостроитель = ИСТИНА)
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ДатаВыкупа МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		| 		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие КАК Значение
		//|ПОМЕСТИТЬ QuantityOfVisits
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.Грузоотправитель.Кузовостроитель = ИСТИНА
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ДатаПолучения МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И (Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК)
		|			ИЛИ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК))
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ВыездСотрудникаОЛ = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействие.Ссылка
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие КАК Scan_ЗаявкаНаДействие
		|ГДЕ
		|	(Scan_ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаСПостановкойНаХранение)
		|			ИЛИ Scan_ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаНаХранениеТретьемуЛицу))
		|	И Scan_ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействие.Проведен = ИСТИНА
		|	И (Scan_ЗаявкаНаДействие.Подрядчик.Кузовостроитель = ИСТИНА
		|			ИЛИ Scan_ЗаявкаНаДействие.Грузоотправитель.Кузовостроитель = ИСТИНА)
		|	И Scan_ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаНаДействие.ДатаВыкупа МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаНаДействие.ВыездСотрудникаОЛ = ИСТИНА
		|;
		|  		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ AcceptanceHandoverDemoTestRent
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|ГДЕ
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.аннулирована)
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.Аренда = ИСТИНА
		//Rarus bonmak 16.05.2022 19158 ++
		//|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.ДемоИТест = ИСТИНА)
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.Демо = ИСТИНА
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие.Тест = ИСТИНА)
		//Rarus bonmak 16.05.2022 19158 --
		|	И Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.ДатаУходаФакт <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоДоставки.Код = ""000000219""
		|			ИЛИ Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка.МестоОтгрузки.Код = ""000000219"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие.НомерИзделия КАК Значение
		//|ПОМЕСТИТЬ AdministrationOfVehiclesSales
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.аннулирована)
		|	И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК))
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ДатаПродажи <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ДатаПродажи МЕЖДУ &НачалоПериода И &КонецПериода";
	
	КонецПериода = КонецНедели(Дата(ТекГод,1,1)+(НомерНедели-1) * 604800);
	НачалоПериода = НачалоНедели(Дата(ТекГод,1,1)+(НомерНедели-1) * 604800);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("НомерНедели", НомерНедели +1 );
	Запрос.УстановитьПараметр("ТекущийГод", ТекГод);
	
	//rarus BProg_Gladkov 21.11.2019 0014452 ++ Увеличил номера пакетов в запросе на 2 (добавлены две верменные таблицы в начале запроса).
	РезультатПакеты = Запрос.ВыполнитьПакет();
	ТаблицаSLA = РезультатПакеты[2].Выгрузить();
	ТаблицаMZ = РезультатПакеты[3].Выгрузить();
	ТаблицаMS = РезультатПакеты[4].Выгрузить();
	ТаблицаBusChassis = РезультатПакеты[5].Выгрузить();
	ТаблицаEngines = РезультатПакеты[6].Выгрузить();
	ТаблицаBuses = РезультатПакеты[7].Выгрузить();
	ТаблицаBodybuiltUnits = РезультатПакеты[8].Выгрузить();
	ТаблицаJenty = РезультатПакеты[9].Выгрузить();
	ТаблицаTruckOnTruckDelivery = РезультатПакеты[10].Выгрузить();
	ТаблицаJockeyTransportation = РезультатПакеты[11].Выгрузить();
	ТаблицаGenSetsTransportation = РезультатПакеты[12].Выгрузить();
	ТаблицаQuantityOfVehicles = РезультатПакеты[13].Выгрузить();
	ТаблицаQuantityOfVisits = РезультатПакеты[14].Выгрузить();
	ТаблицаAcceptanceHandoverDemoTestRent = РезультатПакеты[15].Выгрузить();
	ТаблицаAdministrationOfVehiclesSales  = РезультатПакеты[16].Выгрузить();
	//rarus BProg_Gladkov 21.11.2019 0014452 --
	
	SLAплан = Новый ХранилищеЗначения(ТаблицаSLA, Новый СжатиеДанных(9));	
	
	НаборЗаписей = РегистрыСведений.Scan_ДетализацияПлановыхДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерНедели.Установить(НомерНедели);
	НаборЗаписей.Отбор.Год.Установить(ТекГод);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.SLA = Новый ХранилищеЗначения(ТаблицаSLA, Новый СжатиеДанных(9));	
	НоваяЗапись.MZ = Новый ХранилищеЗначения(ТаблицаMZ, Новый СжатиеДанных(9));	
	НоваяЗапись.MS = Новый ХранилищеЗначения(ТаблицаMS, Новый СжатиеДанных(9));	
	НоваяЗапись.BusChassis = Новый ХранилищеЗначения(ТаблицаBusChassis, Новый СжатиеДанных(9));	
	НоваяЗапись.Engines = Новый ХранилищеЗначения(ТаблицаEngines, Новый СжатиеДанных(9));	
	НоваяЗапись.Buses = Новый ХранилищеЗначения(ТаблицаBuses, Новый СжатиеДанных(9));	
	НоваяЗапись.BodybuiltUnits = Новый ХранилищеЗначения(ТаблицаBodybuiltUnits, Новый СжатиеДанных(9));	
	НоваяЗапись.Jenty = Новый ХранилищеЗначения(ТаблицаJenty, Новый СжатиеДанных(9));	
	НоваяЗапись.TruckOnTruckDelivery = Новый ХранилищеЗначения(ТаблицаTruckOnTruckDelivery, Новый СжатиеДанных(9));	
	НоваяЗапись.JockeyTransportation = Новый ХранилищеЗначения(ТаблицаJockeyTransportation, Новый СжатиеДанных(9));	
	НоваяЗапись.GenSetsTransportation = Новый ХранилищеЗначения(ТаблицаGenSetsTransportation, Новый СжатиеДанных(9));	
	НоваяЗапись.QuantityOfVehicles = Новый ХранилищеЗначения(ТаблицаQuantityOfVehicles, Новый СжатиеДанных(9));	
	НоваяЗапись.QuantityOfVisits = Новый ХранилищеЗначения(ТаблицаQuantityOfVisits, Новый СжатиеДанных(9));	
	НоваяЗапись.AcceptanceHandoverDemoTestRent = Новый ХранилищеЗначения(ТаблицаAcceptanceHandoverDemoTestRent, Новый СжатиеДанных(9));	
	НоваяЗапись.AdministrationOfVehiclesSales = Новый ХранилищеЗначения(ТаблицаAdministrationOfVehiclesSales, Новый СжатиеДанных(9));	
	
	НоваяЗапись.Год = ТекГод;
	НоваяЗапись.НомерНедели = НомерНедели;
	НоваяЗапись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	НоваяЗапись.ДатаИзменения = ТекущаяДата();
	
	НаборЗаписей.Записать();      
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Записать детализацию данных'"));
	
КонецПроцедуры

//rarus tenkam 29.12.2017 mantis 9066 ---

//rarus tenkam 24.04.2018 mantis 12931 +++
///////////////////////////////////////////////////////////////////////
//// УБЫТИЕ ИЗ УЧЕТА
Процедура СФормироватьУбытиеИзУчета(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров 
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_СформироватьУбытиеИзУчета);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_СформироватьУбытиеИзУчета.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Сформировать убытие из учета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начата регламентное формирование убытия из учета'"));
	
	
	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьЗадачиСНакладными") Тогда //rarus bonmak 17.08.2020 14375 добавил условие и отработку истина 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_Изделия.Ссылка КАК Изделие,
		|	Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение КАК ДатаПередачиИзделияДилеру
		|ПОМЕСТИТЬ ПроданныеИзделия
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру
		|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия
		|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия.Объект
		|ГДЕ
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|	И НЕ Scan_Изделия.БУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_Изделия.Ссылка,
		|	Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиБУИзделияДилеру.Значение
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПередачиБУИзделияДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиБУИзделияДилеру
		|		ПО Scan_Изделия.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиБУИзделияДилеру.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУИзделия
		|		ПО Scan_Изделия.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУИзделия.Объект
		|ГДЕ
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиБУИзделияДилеру.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУИзделия.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Scan_Изделия.БУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_Изделия.Ссылка,
		|	Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУКлиенту.Значение
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУКлиенту
		|		ПО Scan_Изделия.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУКлиенту.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУИзделия
		|		ПО Scan_Изделия.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУИзделия.Объект
		|ГДЕ
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУКлиенту.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиБУИзделия.Значение, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|	И Scan_Изделия.БУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_Изделия.Ссылка,
		|	Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиКлиенту.Значение
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиКлиенту
		|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиКлиенту.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия
		|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия.Объект
		|ГДЕ
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиКлиенту.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия.Значение, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|	И НЕ Scan_Изделия.БУ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_МестонахождениеИзделийОстатки.Изделие КАК Изделие,
		|	Scan_МестонахождениеИзделийОстатки.МестоХранения КАК Местонахождение,
		|	ПроданныеИзделия.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру
		|ПОМЕСТИТЬ ПроданныеИзделияНеубывшие
		|ИЗ
		|	РегистрНакопления.Scan_МестонахождениеИзделий.Остатки(
		|			&НаДату,
		|			Изделие В
		|				(ВЫБРАТЬ
		|					ПроданныеИзделия.Изделие КАК Изделие
		|				ИЗ
		|					ПроданныеИзделия КАК ПроданныеИзделия)) КАК Scan_МестонахождениеИзделийОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПроданныеИзделия КАК ПроданныеИзделия
		|		ПО Scan_МестонахождениеИзделийОстатки.Изделие = ПроданныеИзделия.Изделие
		|ГДЕ
		|	Scan_МестонахождениеИзделийОстатки.МестоХранения <> ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие КАК Изделие,
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействие
		|ПОМЕСТИТЬ НеаннулированныеЗаявкиПродажи
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу))
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие В
		|			(ВЫБРАТЬ
		|				ПроданныеИзделия.Изделие КАК Изделие
		|			ИЗ
		|				ПроданныеИзделия КАК ПроданныеИзделия)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроданныеИзделияНеубывшие.Изделие КАК Изделие,
		|	ПроданныеИзделияНеубывшие.Местонахождение КАК Местонахождение,
		|	ПроданныеИзделияНеубывшие.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру,
		|	ЕСТЬNULL(НеаннулированныеЗаявкиПродажи.ЗаявкаНаДействие, ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаНаДействие.ПустаяСсылка)) КАК ЗаявкаНаДействие
		|ПОМЕСТИТЬ ПродуктыМестаЗаявки
		|ИЗ
		|	ПроданныеИзделияНеубывшие КАК ПроданныеИзделияНеубывшие
		|		ЛЕВОЕ СОЕДИНЕНИЕ НеаннулированныеЗаявкиПродажи КАК НеаннулированныеЗаявкиПродажи
		|		ПО ПроданныеИзделияНеубывшие.Изделие = НеаннулированныеЗаявкиПродажи.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродуктыМестаЗаявки.Изделие КАК Изделие,
		|	ПродуктыМестаЗаявки.Местонахождение КАК Местонахождение,
		|	ПродуктыМестаЗаявки.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру,
		|	МАКСИМУМ(ПродуктыМестаЗаявки.ЗаявкаНаДействие) КАК ЗаявкаНаДействие
		|ПОМЕСТИТЬ ИтогоБезМеста
		|ИЗ
		|	ПродуктыМестаЗаявки КАК ПродуктыМестаЗаявки
		|ГДЕ
		|	ПродуктыМестаЗаявки.ЗаявкаНаДействие <> ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаНаДействие.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродуктыМестаЗаявки.Изделие,
		|	ПродуктыМестаЗаявки.Местонахождение,
		|	ПродуктыМестаЗаявки.ДатаПередачиИзделияДилеру
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтогоБезМеста.Изделие КАК Изделие,
		|	ИтогоБезМеста.Местонахождение КАК Местонахождение,
		|	ИтогоБезМеста.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру,
		|	ИтогоБезМеста.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		|	ИтогоБезМеста.ЗаявкаНаДействие.МестоПолучения КАК ЗаявкаНаДействиеМестоПолучения,
		|	ИтогоБезМеста.ЗаявкаНаДействие.ДатаПродажи КАК ЗаявкаНаДействиеДатаПродажи
		|ИЗ
		|	ИтогоБезМеста КАК ИтогоБезМеста";
		
	Иначе	
		//rarus bonmak 05.08.2019 14427 изменил запрос
		Запрос = Новый Запрос;
		Запрос.Текст = 
		// rarus tenkam 16.06.2020 mantis 16214 +++
		//"ВЫБРАТЬ
		//|	Scan_Изделия.Ссылка КАК Изделие
		//|ПОМЕСТИТЬ ПроданныеИзделия
		//|ИЗ
		//|	Справочник.Scan_Изделия КАК Scan_Изделия
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		//|				,
		//|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		//|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру
		//|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Объект
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		//|				,
		//|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		//|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия
		//|		ПО (Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Объект)
		//|ГДЕ
		//|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		//|	И ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие КАК Изделие,
		//|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействие
		//|ПОМЕСТИТЬ ЗаявкиПродуктов
		//|ИЗ
		//|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		//|ГДЕ
		//|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		//|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		//|	И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		//|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
		//|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу))
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	Scan_МестонахождениеИзделийОстатки.Изделие КАК Изделие,
		//|	Scan_МестонахождениеИзделийОстатки.МестоХранения КАК МестоХранения
		//|ПОМЕСТИТЬ Местонахождение
		//|ИЗ
		//|	РегистрНакопления.Scan_МестонахождениеИзделий.Остатки(&НаДату, ) КАК Scan_МестонахождениеИзделийОстатки
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	МАКСИМУМ(ЕСТЬNULL(ЗаявкиПродуктов.ЗаявкаНаДействие, ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаНаДействие.ПустаяСсылка))) КАК ЗаявкаНаДействие,
		//|	ЕСТЬNULL(Местонахождение.МестоХранения, ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)) КАК Местонахождение,
		//|	ПроданныеИзделия.Изделие КАК Изделие
		//|ПОМЕСТИТЬ ПродуктыМестаЗаявки
		//|ИЗ
		//|	ПроданныеИзделия КАК ПроданныеИзделия
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиПродуктов КАК ЗаявкиПродуктов
		//|		ПО ПроданныеИзделия.Изделие = ЗаявкиПродуктов.Изделие
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Местонахождение КАК Местонахождение
		//|		ПО ПроданныеИзделия.Изделие = Местонахождение.Изделие
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ПроданныеИзделия.Изделие,
		//|	ЕСТЬNULL(Местонахождение.МестоХранения, ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка))
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ПродуктыМестаЗаявки.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		//|	ПродуктыМестаЗаявки.ЗаявкаНаДействие.МестоПолучения КАК ЗаявкаНаДействиеМестоПолучения,
		//|	ПродуктыМестаЗаявки.Местонахождение КАК Местонахождение,
		//|	ПродуктыМестаЗаявки.Изделие КАК Изделие,
		//|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПередачиИзделияДилеру
		//|ИЗ
		//|	ПродуктыМестаЗаявки КАК ПродуктыМестаЗаявки
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		//|				,
		//|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		//|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру
		//|		ПО ПродуктыМестаЗаявки.Изделие.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Объект
		//|ГДЕ
		//|	ПродуктыМестаЗаявки.Местонахождение <> ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)";
		"ВЫБРАТЬ
		|	Scan_Изделия.Ссылка КАК Изделие,
		|	Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение КАК ДатаПередачиИзделияДилеру
		|ПОМЕСТИТЬ ПроданныеИзделия
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру
		|		ПО Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия
		|		ПО (Scan_Изделия.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Объект)
		|ГДЕ
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПередачиИзделияДилеру.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихДатаПродажиИзделия.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_МестонахождениеИзделийОстатки.Изделие КАК Изделие,
		|	Scan_МестонахождениеИзделийОстатки.МестоХранения КАК Местонахождение,
		|	ПроданныеИзделия.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру
		|ПОМЕСТИТЬ ПроданныеИзделияНеубывшие
		|ИЗ
		|	РегистрНакопления.Scan_МестонахождениеИзделий.Остатки(
		|			&НаДату,
		|			Изделие В
		|				(ВЫБРАТЬ
		|					ПроданныеИзделия.Изделие КАК Изделие
		|				ИЗ
		|					ПроданныеИзделия КАК ПроданныеИзделия)) КАК Scan_МестонахождениеИзделийОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПроданныеИзделия КАК ПроданныеИзделия
		|		ПО Scan_МестонахождениеИзделийОстатки.Изделие = ПроданныеИзделия.Изделие
		|ГДЕ
		|	Scan_МестонахождениеИзделийОстатки.МестоХранения <> ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие КАК Изделие,
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК ЗаявкаНаДействие
		|ПОМЕСТИТЬ НеаннулированныеЗаявкиПродажи
		|ИЗ
		|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
		|ГДЕ
		|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Проведен = ИСТИНА
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И (Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПродажаТретьемуЛицу)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусь)
		|			ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПродажаТретьемуЛицу))
		|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие В
		|			(ВЫБРАТЬ
		|				ПроданныеИзделия.Изделие КАК Изделие
		|			ИЗ
		|				ПроданныеИзделия КАК ПроданныеИзделия)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроданныеИзделияНеубывшие.Изделие КАК Изделие,
		|	ПроданныеИзделияНеубывшие.Местонахождение КАК Местонахождение,
		|	ПроданныеИзделияНеубывшие.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру,
		|	ЕСТЬNULL(НеаннулированныеЗаявкиПродажи.ЗаявкаНаДействие, ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаНаДействие.ПустаяСсылка)) КАК ЗаявкаНаДействие
		|ПОМЕСТИТЬ ПродуктыМестаЗаявки
		|ИЗ
		|	ПроданныеИзделияНеубывшие КАК ПроданныеИзделияНеубывшие
		|		ЛЕВОЕ СОЕДИНЕНИЕ НеаннулированныеЗаявкиПродажи КАК НеаннулированныеЗаявкиПродажи
		|		ПО ПроданныеИзделияНеубывшие.Изделие = НеаннулированныеЗаявкиПродажи.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродуктыМестаЗаявки.Изделие КАК Изделие,
		|	ПродуктыМестаЗаявки.Местонахождение КАК Местонахождение,
		|	ПродуктыМестаЗаявки.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру,
		|	МАКСИМУМ(ПродуктыМестаЗаявки.ЗаявкаНаДействие) КАК ЗаявкаНаДействие
		|ПОМЕСТИТЬ ИтогоБезМеста
		|ИЗ
		|	ПродуктыМестаЗаявки КАК ПродуктыМестаЗаявки
		|ГДЕ
		|	ПродуктыМестаЗаявки.ЗаявкаНаДействие <> ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаНаДействие.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродуктыМестаЗаявки.Изделие,
		|	ПродуктыМестаЗаявки.Местонахождение,
		|	ПродуктыМестаЗаявки.ДатаПередачиИзделияДилеру
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтогоБезМеста.Изделие КАК Изделие,
		|	ИтогоБезМеста.Местонахождение КАК Местонахождение,
		|	ИтогоБезМеста.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру,
		|	ИтогоБезМеста.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		|	ИтогоБезМеста.ЗаявкаНаДействие.МестоПолучения КАК ЗаявкаНаДействиеМестоПолучения,
		|	ИтогоБезМеста.ЗаявкаНаДействие.ДатаПродажи КАК ЗаявкаНаДействиеДатаПродажи
		|ИЗ
		|	ИтогоБезМеста КАК ИтогоБезМеста";
		// rarus tenkam 16.06.2002 mantis 16214 ---
	КонецЕсли;	
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// rarus tenkam 12.03.2019 mantis 14170 +++
		//Если ВыборкаДетальныеЗаписи.ЗаявкаНаДействие.МестоПолучения = ВыборкаДетальныеЗаписи.Местонахождение Тогда
		Если ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеМестоПолучения = ВыборкаДетальныеЗаписи.Местонахождение Тогда
		// rarus tenkam 12.03.2019 mantis 14170 ---	
			// Сформируем убытие
			
			Если НЕ Scan_ПраваИНастройки.Scan_Право("ФормироватьУбытиеИзУчета") Тогда
				Возврат;
			КонецЕсли;
			
			// rarus tenkam 07.10.2020 mantis 16518 +++
			ТекДатаПередачиИзделияДилеру = КонецДня(ВыборкаДетальныеЗаписи.ДатаПередачиИзделияДилеру)-9;
			//Если Справочники.Scan_Изделия.УбытиеУжеЕсть(ВыборкаДетальныеЗаписи.Изделие,  КонецДня(ВыборкаДетальныеЗаписи.ДатаПередачиИзделияДилеру)) Тогда //rarus bonmak 05.08.2019 14427 изменил справочник
			Если Справочники.Scan_Изделия.УбытиеУжеЕсть(ВыборкаДетальныеЗаписи.Изделие,  ТекДатаПередачиИзделияДилеру) Тогда
			// rarus tenkam 07.10.2020 mantis 16518 ---
				// rarus tenkam 12.03.2019 mantis 14170 +++
				//Возврат;
				Продолжить;
				// rarus tenkam 12.03.2019 mantis 14170 ---
			КонецЕсли;
			
			НовыйДокумент = Документы.Scan_ДвижениеИзделий.СоздатьДокумент();
			НовыйДокумент.ХозОперация = Справочники.Scan_ХозяйственныеОперации.УбытиеИзУчета;
			
			ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
			НовыйДокумент.Организация = ТекПользователь.Организация;
			НовыйДокумент.ПодразделениеКомпании = ТекПользователь.ПодразделениеОрганизации;
			НовыйДокумент.Автор = ТекПользователь;
			НовыйДокумент.Менеджер = ТекПользователь;
			//rarus vikhle 27.04.2020 mt 15695 +++	
			Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекПользователь,НовыйДокумент.Компания,НовыйДокумент.Контрагент);
			//rarus vikhle 27.04.2020 mt 15695 ---
			НовыйДокумент.Дата = ТекущаяДата();
			НовыйДокумент.МестоХранения = ВыборкаДетальныеЗаписи.Местонахождение;
			// rarus tenkam 07.10.2020 mantis 16518 +++
			//НовыйДокумент.ДатаПрихода = КонецДня(ВыборкаДетальныеЗаписи.ДатаПередачиИзделияДилеру);
			НовыйДокумент.ДатаПрихода = ТекДатаПередачиИзделияДилеру;
			// rarus tenkam 07.10.2020 mantis 16518 ---
			
			СтрокаТЧ = НовыйДокумент.СоставЗаявки.Добавить();
			СтрокаТЧ.Изделие = ВыборкаДетальныеЗаписи.Изделие;
			// rarus tenkam 07.10.2020 mantis 16518 +++
			//СтрокаТЧ.ДатаПрихода = КонецДня(ВыборкаДетальныеЗаписи.ДатаПередачиИзделияДилеру);
			СтрокаТЧ.ДатаПрихода = ТекДатаПередачиИзделияДилеру;
			// rarus tenkam 07.10.2020 mantis 16518 ---
			НовыйДокумент.Комментарий = "Документ сформирован автоматически регламентным заданием ""Сформировать убытие из учета"".";
			
			Попытка		
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание,,,"Сформирован документ убытия из учета " + НовыйДокумент.Ссылка);
			Исключение
				//rarus FominskiyAS 19.04.2019  mantis 14191 +++
				//Сообщить("Не удалось сформировать движение изделий (ХО Убытие из учета): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));/
				Сообщить(НСтр("ru = 'Не удалось сформировать движение продуктов (ХО Убытие из учета):  '; en = 'Failed to generate the movement of goods: '")+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				//rarus FominskiyAS 19.04.2019  mantis 14191 ---
						
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,"Не удалось сформировать движение изделий (ХО Убытие из учета): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
								
			КонецПопытки;
		Иначе
			// rarus tenkam 26.03.2021 mantis 17156 +++
			// Проверим, правильно ли нашли заявку, может заявки на продажу еще нет в базе
			КоличествоДнейДоДатыПродажиДляПодбораЗаявкиНаПродажу = 24*60*60*Scan_ПраваИНастройки.Scan_Право("КоличествоДнейДоДатыПродажиДляПодбораЗаявкиНаПродажу");
			ДатаСравненияОт = ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеДатаПродажи - КоличествоДнейДоДатыПродажиДляПодбораЗаявкиНаПродажу;
			ДатаСравненияДо = ВыборкаДетальныеЗаписи.ЗаявкаНаДействиеДатаПродажи + КоличествоДнейДоДатыПродажиДляПодбораЗаявкиНаПродажу;
			Если НЕ (ВыборкаДетальныеЗаписи.ДатаПередачиИзделияДилеру <= ДатаСравненияДо И
				ВыборкаДетальныеЗаписи.ДатаПередачиИзделияДилеру >= ДатаСравненияОт) Тогда
				// Заявка старая, не отправлять письмо
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание,,,"По продукту нет актуальной заявки на продажу. Продукт " + ВыборкаДетальныеЗаписи.Изделие);	
				Продолжить;
			КонецЕсли;
			// rarus tenkam 26.03.2021 mantis 17156 +++
			
			// Отправим повторное письмо   			
			Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
				РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонПовторныйОНевозможностиСформироватьУбытие", ВыборкаДетальныеЗаписи.ЗаявкаНаДействие); //rarus BProg_Gladkov 02.05.2020 0015962 +-
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное формирование убытия из учета'"));
	
КонецПроцедуры

//rarus tenkam 24.04.2018 mantis 12931 ---

///////////////////////////////////////////////////////////////////////
//// ФОРМИРОВАНИЕ ПИСЕМ ПО НЕОБХОДИМОСТИ ИЗМЕНЕНИЯ EDD 

#Область ФормированиеПисемПоНеобходимостиИзмененияEDD

Процедура СформироватьПисьмоПоНеобходимостиИзмененияEDD(СтруктураПараметров = Неопределено) Экспорт //rarus bonmak 01.07.2019 14433 ++	//rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ФормированиеПисемПоНеобходимостиИзмененияEDD);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ФормированиеПисемПоНеобходимостиИзмененияEDD.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Сформировать письма о необходимости изменения EDD'; en = 'Routine task. Generate letters as necessary to change the EDD'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начато регламентное формирование и отправка писем о необходимости изменения EDD'; en = 'Started the regular formation and sending of letters on the need to change the EDD'"));
	
	ДанныеЕсть = Scan_ОтправкаПисемПоЭлектроннойПочте.ПечатьПоТабДок("DateDeviation");
	
	Если ДанныеЕсть = Неопределено Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,НСтр("ru = 'Нет необходимости изменения EDD'; en = 'No need to change EDD'"));
	Иначе
		//rarus BProg_Gladkov 05.05.2020 0015962 ++ ОтправитьПисьмоПоШаблонуИзПрава
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
			РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонОтправкиПисемОНеобходимостиИзмененийEDD");
			Если РезультатОтправкиПисьма.ПисьмоОтправлено Тогда	
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,НСтр("ru = 'Отправлено письмо о необходимости изменения EDD'; en = 'An EDD change letter sent'"));
			Иначе
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,НСтр("ru = 'Не удалось отправить письмо о необходимости изменения EDD'; en = 'Failed to send EDD change letter'"));		
			КонецЕсли;
		КонецЕсли;
		//rarus BProg_Gladkov 05.05.2020 0015962 -- 
	КонецЕсли;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное формирование и отправка писем о необходимости изменения EDD'; en = 'Completed the regular formation and sending of letters about the need to change the EDD'"));	
КонецПроцедуры //rarus bonmak 01.07.2019 14433 --

#КонецОбласти

///////////////////////////////////////////////////////////////////////
//// ФОРМИРОВАНИЕ ПИСЕМ О ЗНАЧИМЫХ РАСХОЖДЕНИЯХ КЛЮЧЕВЫХ ДАТ 

#Область ФормированиеПисемОЗначимыхРасхожденияхКлючевыхДат

Процедура СформироватьПисьмоОЗначимыхРасхожденияхКлючевыхДат(СтруктураПараметров = Неопределено) Экспорт //rarus bonmak 08.11.2019 14869 ++ //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ПроверитьOтклоненияПоЗаказам);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ПроверитьOтклоненияПоЗаказам.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +

	//rarus BProg_Dekin 25.05.2020 mantis 0015999 ++ Добавил условие НЕ
	//rarus BProg_Gladkov 05.05.2020 0015962 ++ Процедура расчитана только на включенное право ИспользоватьМеханизмШаблоновДляОтправкиПисем
	//Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
	Если НЕ Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
	//rarus BProg_Dekin 25.05.2020 mantis 0015999 ++	
		Возврат;
	КонецЕсли;
	//rarus BProg_Gladkov 05.05.2020 0015962 -- 
	
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Сформировать письма о отклонении дат в заказах на завод'; en = 'Routine task. To form letters of rejection of the dates in the orders to the factory'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начато регламентное формирование и отправка писем о отклонении дат в заказах на завод'; en = 'The routine formation and sending of letters about the rejection of dates in orders for the plant has begun'"));
	//см. СформироватьТабДокOrderDeviation
	Запрос = Новый Запрос;		
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ЗаказыНаЗавод.Заказчик КАК Заказчик,
	|	Scan_ЗаказыНаЗавод.Ссылка КАК ЗаказНаЗавод,
	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
	|	Scan_КлючевыеДатыКонтролируемыеДаты.Значение КАК Значение,
	|	Scan_КлючевыеДатыКонтролируемыеДаты.ВидКлючевойДаты КАК ВидКлючевойДаты,
	|	Scan_КлючевыеДатыКонтролируемыеДаты.Период КАК ДатаИзмен,
	|	МАКСИМУМ(Scan_КлючевыеДатыПроцессовПредЗнач.Период) КАК ДатаИзменПред
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Scan_ТипыПродуктов.Ссылка КАК ТипПродуктаТягач
	|	ИЗ
	|		Справочник.Scan_ТипыПродуктов КАК Scan_ТипыПродуктов
	|	ГДЕ
	|		Scan_ТипыПродуктов.Наименование ПОДОБНО ""Тягач"") КАК ВЗТипПродуктаТягач,
	|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	|				,
	|				ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаОтгрузкиСЗаводаПриEXW)
	|					И ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)) КАК Scan_КлючевыеДатыДатаОтгрузкиСЗавода
	|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыДатаОтгрузкиСЗавода.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
	|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	|				,
	|				ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
	|					И ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)) КАК Scan_КлючевыеДатыДатаПродажиДилеру
	|		ПО (Scan_КлючевыеДатыДатаПродажиДилеру.Объект = Scan_ЗаказыНаЗавод.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	|				,
	|				ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПортСПБ)
	|					И ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)) КАК Scan_КлючевыеДатыДатаCDDфакт
	|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыДатаCDDфакт.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
	|				,
	|				ВидКлючевойДаты.Ссылка В
	|					(ВЫБРАТЬ
	|						Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.КонтролируемыйПараметрЗаказаНаЗавод.Ссылка КАК КонтролируемыйПараметрЗаказаНаЗаводСсылка
	|					ИЗ
	|						Справочник.Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге КАК Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге
	|					ГДЕ
	|						Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.ИспользоватьПриМониторинге)) КАК Scan_КлючевыеДатыКонтролируемыеДаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессовПредЗнач
	|			ПО Scan_КлючевыеДатыКонтролируемыеДаты.Объект = Scan_КлючевыеДатыПроцессовПредЗнач.Объект
	|				И Scan_КлючевыеДатыКонтролируемыеДаты.ВидКлючевойДаты = Scan_КлючевыеДатыПроцессовПредЗнач.ВидКлючевойДаты
	|				И Scan_КлючевыеДатыКонтролируемыеДаты.Период > Scan_КлючевыеДатыПроцессовПредЗнач.Период
	|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыКонтролируемыеДаты.Объект
	|ГДЕ
	//rarus BProg_Dekin 19.05.2020 mantis 0015999 ++ Вместо Статуса заказа используется статус продукта
	//|	Scan_ЗаказыНаЗавод.СтатусЗаказаЛокальный = ЗНАЧЕНИЕ(Справочник.Scan_ЛокальныеСтатусыЗаказовНаЗавод.OPEN)
	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ЛокальныйСтатусПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ЛокальныеСтатусыПродуктов.OPEN)
	//rarus BProg_Dekin 19.05.2020 mantis 0015999 --
	|	И Scan_ЗаказыНаЗавод.Заказчик <> ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
	|	И НЕ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие ЕСТЬ NULL
	|	И Scan_КлючевыеДатыДатаПродажиДилеру.Значение ЕСТЬ NULL
	|	И Scan_КлючевыеДатыДатаОтгрузкиСЗавода.Значение ЕСТЬ NULL
	|	И НЕ((Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ГруппыПродуктов.ТранспортныеСредства)
	|				ИЛИ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ТипПродукта.ВидПродукта.ГруппаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ГруппыПродуктов.Двигатели))
	|				И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.ТипПродукта = ВЗТипПродуктаТягач.ТипПродуктаТягач
	|				И НЕ Scan_КлючевыеДатыДатаCDDфакт.Значение ЕСТЬ NULL)
	|	И НЕ Scan_КлючевыеДатыКонтролируемыеДаты.Значение ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Scan_ЗаказыНаЗавод.Заказчик,
	|	Scan_ЗаказыНаЗавод.Ссылка,
	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие,
	|	Scan_КлючевыеДатыКонтролируемыеДаты.Значение,
	|	Scan_КлючевыеДатыКонтролируемыеДаты.ВидКлючевойДаты,
	|	Scan_КлючевыеДатыКонтролируемыеДаты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ЗаказНаЗавод КАК ЗаказНаЗавод,
	|	ВременнаяТаблица.Изделие КАК Изделие,
	|	ВременнаяТаблица.ВидКлючевойДаты КАК ПараметрЗаказаНаЗавод,
	|	ВременнаяТаблица.Значение КАК ТекущееЗначение,
	|	Scan_КлючевыеДатыПроцессов.Значение КАК ПредыдущееЗначение,
	|	ВременнаяТаблица.ДатаИзменПред КАК ДатаИзменения,
	|	ВременнаяТаблица.Заказчик КАК Заказчик,
	|	ВременнаяТаблица.Изделие.СОП КАК СОП
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
	|		ПО ВременнаяТаблица.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессов.Объект
	|			И (Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ВременнаяТаблица.ВидКлючевойДаты)
	|			И (Scan_КлючевыеДатыПроцессов.Период = ВременнаяТаблица.ДатаИзменПред)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге КАК Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге
	|		ПО ВременнаяТаблица.ВидКлючевойДаты = Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.КонтролируемыйПараметрЗаказаНаЗавод
	|			И (Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.ИспользоватьПриМониторинге)
	|ГДЕ
	|	НЕ Scan_КлючевыеДатыПроцессов.Значение ЕСТЬ NULL
	|	И РАЗНОСТЬДАТ(Scan_КлючевыеДатыПроцессов.Значение, ВременнаяТаблица.Значение, ДЕНЬ) > Scan_КонтролируемыеПараметрыЗаказаНаЗаводПриМониторинге.МаксимальноеОтклонение
	|ИТОГИ ПО
	|	Заказчик";
	ВыборкаЗаказчик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказчик.Следующий() Цикл
		//rarus BProg_Gladkov 05.05.2020 0015962 ++ ОтправитьПисьмоПоШаблонуИзПрава
		РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонПисьмаОбОтклоненияхВДатахЗаказаНаЗавод", ВыборкаЗаказчик.Заказчик); //rarus BProg_Gladkov 02.05.2020 0015962 +-
		Если РезультатОтправкиПисьма.ПисьмоОтправлено Тогда	
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,НСтр("ru = 'Отправлено письмо о отклонении дат в заказах на завод'; en = 'Email rejected dates in factory orders'"));
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,НСтр("ru = 'Не удалось отправить письмо о отклонении дат в заказах на завод'; en = 'Failed to send rejection date in factory orders'"));		
		КонецЕсли;
		//rarus BProg_Gladkov 05.05.2020 0015962 -- 
	КонецЦикла; 
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное формирование и отправка писем о отклонении дат в заказах на завод'; en = 'The routine formation and sending of letters about the rejection of dates in orders for the plant is completed'"));	
КонецПроцедуры //rarus bonmak 08.11.2019 14869 --

#КонецОбласти 




#Область Scan_ПолучениеЭлектронныхПисемСогласованияПоЭлектроннойПочте   //rarus BProg_Gladkov 23.12.2019 0015117 +-	

Процедура ПолучитьЭлектроннойПисьмоСоглавсованияПоЭлектронойПочте(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров 
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ПолучениеЭлектронныхПисемСогласованияПоЭлектроннойПочте);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ПолучениеЭлектронныхПисемСогласованияПоЭлектроннойПочте.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Получение электронных писем согласования по электронной почте'");
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начато получение писем';"));
	
	ТаблицаПользователейиАдресовЭП = Scan_СогласованиеДокументов.ПолучитьТаблицуПользователейиАдресовЭП();
	Если ТаблицаПользователейиАдресовЭП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТаблицы из ТаблицаПользователейиАдресовЭП Цикл
		СтрокаТаблицы.АдресЭП = НРег(СтрокаТаблицы.АдресЭП);
	КонецЦикла;
	
	МассивКолонокСоставаПисем = Новый Массив;
	МассивКолонокСоставаПисем.Добавить("Тексты");
	МассивКолонокСоставаПисем.Добавить("Идентификатор");
	МассивКолонокСоставаПисем.Добавить("Вложения");
	МассивКолонокСоставаПисем.Добавить("Размер");
	МассивКолонокСоставаПисем.Добавить("Получатели");
	МассивКолонокСоставаПисем.Добавить("Отправитель");
	МассивКолонокСоставаПисем.Добавить("Тема");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте.УчетнаяЗаписьЭлектроннойПочты КАК УчетнаяЗаписьЭлектроннойПочты,
	               |	Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте.ТипПредметаЗадачи КАК ТипПредметаЗадачи
	               |ИЗ
	               |	РегистрСведений.Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте КАК Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УчетнаяЗапись = Выборка.УчетнаяЗаписьЭлектроннойПочты;
		Если НЕ РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(УчетнаяЗапись) тогда
			Продолжить;
		КонецЕсли;
		ЭтоПротоколIMAP = УчетнаяЗапись.ПротоколВходящейПочты = "IMAP";
		ПараметрыЗагрузки = Новый Структура;

		Если ЭтоПротоколIMAP тогда
			ПараметрыЗагрузки.Вставить("Колонки", МассивКолонокСоставаПисем);
			ПараметрыЗагрузки.Вставить("ПолучениеЗаголовков", Истина);
			ПараметрыЗагрузки.Вставить("ПолучатьПрочитанные", Ложь);
		КонецЕсли;

		ТаблицаСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗапись, ПараметрыЗагрузки);
		Scan_СогласованиеДокументов.ВКолонкеОтправителяОставитьТолькоАдресЭлектроннойПочты(ТаблицаСообщений);
		МассивИдентификаторовОбработанныхПисем = Scan_СогласованиеДокументов.ОбработатьПисьмаДляСогласования(УчетнаяЗапись, ТаблицаСообщений, ТаблицаПользователейиАдресовЭП); 
		Если ЭтоПротоколIMAP тогда
			Scan_СогласованиеДокументов.УстановитьПисьмамПризнакПрочитано(УчетнаяЗапись, МассивИдентификаторовОбработанныхПисем);
		КонецЕсли;
	КонецЦикла;  

КонецПроцедуры

#КонецОбласти 

///////////////////////////////////////////////////////////////////////
//// ЗАГРУЗКА ИЗМЕНЕННЫХ ОБЪЕКТОВ 

#Область ЗагрузкаИзмененныхОбъектов

Процедура ПолучитьИзмененныеОбъекты(СтруктураПараметров = Неопределено) Экспорт //rarus bonmak 09.01.2020 15279 ++	 //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ПолучитьИзмененныеОбъекты);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ПолучитьИзмененныеОбъекты.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Получить измененные объекты из 1БД'; en = 'Routine task. Routine task. Get modified objects from 1DB'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начато регламентное получение измененных объектов из 1БД'; en = 'Regular receipt of changed objects from 1DB has been started'"));
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetUpdatesList";
	ЕстьОшибки = Scan_ВебСервисыРазборОтветов.ЗагрузитьЗадачи1БД();
	
	Если ЕстьОшибки Тогда
		СообщениеОбОшибке = "В процессе выполнения регламентного задания, возникли ошибки (см. журнал регистрации)";
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное получение измененных объектов из 1БД'; en = 'Regular receipt of changed objects from 1DB has been completed'"));	
КонецПроцедуры //rarus bonmak 09.01.2020 15279 --

#КонецОбласти

///////////////////////////////////////////////////////////////////////
//// ЗАГРУЗКА ВЕРСИЙ СПЕЦИФИКАЦИЙ 

#Область ЗагрузкаВерсийСпецификаций

Процедура ПолучитьВерсииСпецификаций(СтруктураПараметров = Неопределено) Экспорт //Rarus bonmak 07.02.2022 18853 ++
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ПолучитьВерсииСпецификаций);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ПолучитьВерсииСпецификаций.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Получить версии спецификаций из 1БД'; en = 'Routine task. Routine task. Get specification versions from 1DB'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начато регламентное получение версий спецификаций из 1БД'; en = 'Regular receipt of specification versions from 1DB has been started'"));
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetUpdatesList";
	ЕстьОшибки = Scan_ВебСервисыРазборОтветов.ЗагрузитьЗадачуВерсииСпецификаций();
	
	Если ЕстьОшибки Тогда
		СообщениеОбОшибке = "В процессе выполнения регламентного задания, возникли ошибки (см. журнал регистрации)";
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное получение версий спецификаций из 1БД'; en = 'Regular receipt of specification versions from 1DB has been completed'"));	
КонецПроцедуры //Rarus bonmak 07.02.2022 18853 --

#КонецОбласти

//rarus vikhle 16.04.2020 mt 15695 +++

///////////////////////////////////////////////////////////////////////
//// ПРОВЕРКА СЕССИИ ПОЛЬЗОВАТЕЛЯ ПОРТАЛА

Процедура ПроверитьСессиюПользователяПортала(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ПроверкаСессииПользователяПортала);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ПроверкаСессииПользователяПортала.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Проверка сессий пользователей портала'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начата проверка сессий пользователей портала';"));
	
	ДанныеТекущихПользователейПортала = РегистрыСведений.Scan_ПараметрыСессийПользователейПортала.ПолучитьДанныеПользователейПортала(); 
	
	Если НЕ ДанныеТекущихПользователейПортала.Количество() = 0 Тогда 
		ИмяМетода = "checkUserTokenIsOnline";
		ИмяСобытияЖурналаРегистрации = "Веб-сервис портала." + ИмяМетода;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетодаПортала(ИмяМетода);
		Для Каждого СтрокаДанных Из ДанныеТекущихПользователейПортала Цикл
			Отказ = Ложь;//rarus vikhle 03.03.2021 mt 17355
			СтруктураПараметров.Вставить ("login",СтрокаДанных.ПользовательПортала);
			СтруктураПараметров.Вставить ("token", СтрокаДанных.НомерСессииПортала);
			ОтветВебСервиса = Scan_ВебСервисы.ВызовВебСервисаПортала(ИмяМетода,СтруктураПараметров,Отказ,ИмяСобытияЖурналаРегистрации);
			Если Отказ Тогда
				РегистрыСведений.Scan_ПараметрыСессийПользователейПортала.УдалитьЗаписьРегистра(СтрокаДанных.Пользователь);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В регистре Параметры сессий пользователей портала удалена запись пользователя %1'"),СтрокаДанных.Пользователь));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена проверка сессий пользователей портала'"));

КонецПроцедуры
//rarus vikhle 16.04.2020 mt 15695 ---

//rarus vikhle 07.05.2020 mt 15695 +++

///////////////////////////////////////////////////////////////////////
//// ОБНОВЛЕНИЕ ПАРОЛЕЙ ПОЛЬЗОВАТЕЛЕЙ ПОРТАЛА 

Процедура ОбновитьПарольПользователямПортала(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
		
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОбновлениеПаролейПользователейПортала);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ОбновлениеПаролейПользователейПортала.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Обновление пароля пользователей портала'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начато обновление паролей пользователей портала';"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК ПользовательСсылка,
	               |	Пользователи.КодСотрудникаНаПортале КАК КодСотрудникаНаПортале,
	               |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Недействителен = ЛОЖЬ
	               |	И Пользователи.ПользовательПортала = ИСТИНА";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Ложь;
		НовыйПароль = Строка(Новый УникальныйИдентификатор());
		
		ИмяМетода = "addUpdateUser";
		ИмяСобытияЖурналаРегистрации = "Веб-сервис портала." + ИмяМетода;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетодаПортала(ИмяМетода);
		СтруктураПараметров.Вставить ("id",Выборка.КодСотрудникаНаПортале);
		СтруктураПараметров.Вставить ("tokenofms",НовыйПароль); 
		ОтветВебСервиса = Scan_ВебСервисы.ВызовВебСервисаПортала(ИмяМетода,СтруктураПараметров, Отказ,ИмяСобытияЖурналаРегистрации);
		Если Отказ Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , 
			,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Смена пароля у пользователя %1 отменена';"),Выборка.ПользовательСсылка));
			Продолжить;
		КонецЕсли;
				
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		ПользовательИБ.Пароль = НовыйПароль;
		ПользовательИБ.Записать();
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , 
			,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У пользователя %1 успешно изменен пароль';"),Выборка.ПользовательСсылка));
	КонецЦикла;	
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено обновление паролей пользователей портала'"));

КонецПроцедуры
//rarus vikhle 07.05.2020 mt 15695 ---

//rarus agar 09.07.2020 16055 ++

///////////////////////////////////////////////////////////////////////
//// ОБРАБОТКА ЗАЯВОК НА ОТГРУЗКУ 

Процедура ОбработкаЗаявокНаОтгрузку(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОбработкаЗаявокНаОтгрузку);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ОбработкаЗаявокНаОтгрузку.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Обработка заявок на отгрузку'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начало обработки заявок на отгрузку';"));
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата));
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Scan_ЗаявкаНаОтгрузку.Ссылка КАК ЗаявкаНаОтгрузку
	//|ИЗ
	//|	Документ.Scan_ЗаявкаНаОтгрузку КАК Scan_ЗаявкаНаОтгрузку
	//|ГДЕ
	//|	Scan_ЗаявкаНаОтгрузку.ДатаОтгрузки = ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -1)
	//| И Scan_ЗаявкаНаОтгрузку.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЧастичноИсполнена)";
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ЗаявкаНаОтгрузку.Ссылка КАК ЗаявкаНаОтгрузку
	|ИЗ
	|	Документ.Scan_ЗаявкаНаОтгрузку КАК Scan_ЗаявкаНаОтгрузку
	|ГДЕ
	|	НЕ Scan_ЗаявкаНаОтгрузку.ПометкаУдаления
	|	И Scan_ЗаявкаНаОтгрузку.ДатаОтгрузки = ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -1)
	|	И Scan_ЗаявкаНаОтгрузку.Статус <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Исполнена)
	|	И Scan_ЗаявкаНаОтгрузку.Статус <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена)
	|	И Scan_ЗаявкаНаОтгрузку.Статус <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отказ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НепроданныеПродукты = Документы.Scan_ЗаявкаНаОтгрузку.ПолучитьНепроданныеПродукты(Выборка.ЗаявкаНаОтгрузку);
		//Если НепроданныеПродукты.Количество() = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		УдаляемыеСтрокиПродуктов = Новый Массив;
		
		ЗаявкаНаОтгрузкуОбъект = Выборка.ЗаявкаНаОтгрузку.ПолучитьОбъект();
		
		Если ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЧастичноИсполнена") Тогда
			Для Каждого СтрокаПродукта Из ЗаявкаНаОтгрузкуОбъект.Продукты Цикл
				Если НепроданныеПродукты.Найти(СтрокаПродукта.Продукт) <> Неопределено Тогда
					УдаляемыеСтрокиПродуктов.Добавить(СтрокаПродукта);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиПродуктов Цикл
				ЗаявкаНаОтгрузкуОбъект.Продукты.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			Если ЗаявкаНаОтгрузкуОбъект.Продукты.Количество() > 0 Тогда
				ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Исполнена");
			Иначе
				ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена");
			КонецЕсли;
		Иначе
			ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена");
		КонецЕсли;
		
		Попытка
			ЗаявкаНаОтгрузкуОбъект.Записать();
			Если УдаляемыеСтрокиПродуктов.Количество() > 0 Тогда
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Из заявки на отгрузку %1 успешно удалены непроданные продукты (%2)'"), Выборка.ЗаявкаНаОтгрузку, УдаляемыеСтрокиПродуктов.Количество()),);
			Иначе
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заявка на отгрузку %1 успешно обработана'"), Выборка.ЗаявкаНаОтгрузку),);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Из заявки на отгрузку %1 непроданные продукты удалить не удалось. Описание ошибки: %2'"), Выборка.ЗаявкаНаОтгрузку, ОписаниеОшибки()),);
		КонецПопытки;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершение обработки заявок на отгрузку'"));

КонецПроцедуры
//rarus agar 09.07.2020 16055 --

//rarus vikhle 19.10.2020 mt 16328 +++

///////////////////////////////////////////////////////////////////////
////  СЧЕТЧИК DD ПРИ ИСПОЛЬЗОВАНИИ ЕВРОПЕЙСКИХ КУЗОВОСТРОИТЕЛЕЙ

Процедура ЗапуститьСчетчикDDПриИспользованииЕвропейскихКузовостроителей(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ЗапуститьСчетчикDDПриИспользованииЕвропейскихКузовостроителей);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ЗапуститьСчетчикDDПриИспользованииЕвропейскихКузовостроителей.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Запустить счетчик DD при использовании европейских кузовостроителей'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,,
								НСтр("ru = 'Запущен счетчик DD при использовании европейских кузовостроителей';"));
								
	ТекущаяДата = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Продукт
	               |ПОМЕСТИТЬ ДанныеСводногоРегистра
	               |ИЗ
	               |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
	               |ГДЕ
	               |	НЕ Scan_СводнаяИнформацияПоПродукту.Продукт.БУ
	               |	И Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия = ДАТАВРЕМЯ(1, 1, 1)
	               |	И Scan_СводнаяИнформацияПоПродукту.Продукт.МаркаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_МаркиПродуктов.Scania)
	               |	И Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод.ГотовностьТС
	               |	И Scan_СводнаяИнформацияПоПродукту.Продукт.СоглашениеОПоставке = ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Продукт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_МестонахождениеИзделийОстатки.Изделие КАК Изделие,
	               |	МАКСИМУМ(Scan_МестонахождениеИзделийОстатки.МестоХранения) КАК МестоХранения
	               |ПОМЕСТИТЬ ТекущееМестоХранения
	               |ИЗ
	               |	РегистрНакопления.Scan_МестонахождениеИзделий.Остатки(
	               |			,
	               |			Изделие В
	               |				(ВЫБРАТЬ
	               |					ДанныеСводногоРегистра.Продукт
	               |				ИЗ
	               |					ДанныеСводногоРегистра КАК ДанныеСводногоРегистра)) КАК Scan_МестонахождениеИзделийОстатки
	               |ГДЕ
	               |	Scan_МестонахождениеИзделийОстатки.КоличествоОстаток > 0
	               |	И Scan_МестонахождениеИзделийОстатки.МестоХранения.Наименование В(&МестаХраненияИзНастройки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_МестонахождениеИзделийОстатки.Изделие
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Изделие
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеСводногоРегистра.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаказыНаЗаводЗаказыНаЗакупку.Кузовщик) КАК КоличествоКузовщиков,
	               |	Scan_ЗаказыНаЗаводЗаказыНаЗакупку1.Кузовщик КАК Кузовщик
	               |ПОМЕСТИТЬ Кузовщики
	               |ИЗ
	               |	ДанныеСводногоРегистра КАК ДанныеСводногоРегистра
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ЗаказыНаЗавод.ЗаказыНаЗакупку КАК Scan_ЗаказыНаЗаводЗаказыНаЗакупку
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ЗаказыНаЗавод.ЗаказыНаЗакупку КАК Scan_ЗаказыНаЗаводЗаказыНаЗакупку1
	               |			ПО (ВЫБОР
	               |					КОГДА Scan_ЗаказыНаЗаводЗаказыНаЗакупку1.Основной
	               |						ТОГДА Scan_ЗаказыНаЗаводЗаказыНаЗакупку.Ссылка = Scan_ЗаказыНаЗаводЗаказыНаЗакупку1.Ссылка
	               |				КОНЕЦ)
	               |		ПО (Scan_ЗаказыНаЗаводЗаказыНаЗакупку.Ссылка = ДанныеСводногоРегистра.ЗаказНаЗавод)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_ЗаказыНаЗаводЗаказыНаЗакупку1.Кузовщик,
	               |	ДанныеСводногоРегистра.ЗаказНаЗавод
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаказыНаЗаводЗаказыНаЗакупку.Кузовщик) > 1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДанныеСводногоРегистра.ЗаказНаЗавод,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаказыНаЗаводЗаказыНаЗакупку.Кузовщик),
	               |	Scan_ЗаказыНаЗаводЗаказыНаЗакупку1.Кузовщик
	               |ИЗ
	               |	ДанныеСводногоРегистра КАК ДанныеСводногоРегистра
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ЗаказыНаЗавод.ЗаказыНаЗакупку КАК Scan_ЗаказыНаЗаводЗаказыНаЗакупку
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ЗаказыНаЗавод.ЗаказыНаЗакупку КАК Scan_ЗаказыНаЗаводЗаказыНаЗакупку1
	               |			ПО Scan_ЗаказыНаЗаводЗаказыНаЗакупку.Ссылка = Scan_ЗаказыНаЗаводЗаказыНаЗакупку1.Ссылка
	               |		ПО ДанныеСводногоРегистра.ЗаказНаЗавод = Scan_ЗаказыНаЗаводЗаказыНаЗакупку.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеСводногоРегистра.ЗаказНаЗавод,
	               |	Scan_ЗаказыНаЗаводЗаказыНаЗакупку1.Кузовщик
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаказыНаЗаводЗаказыНаЗакупку.Кузовщик) = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеСводногоРегистра.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ДанныеСводногоРегистра.Продукт КАК Продукт
	               |ИЗ
	               |	ДанныеСводногоРегистра КАК ДанныеСводногоРегистра
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущееМестоХранения КАК ТекущееМестоХранения
	               |		ПО ДанныеСводногоРегистра.Продукт = ТекущееМестоХранения.Изделие
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Кузовщики КАК Кузовщики
	               |		ПО ДанныеСводногоРегистра.ЗаказНаЗавод = Кузовщики.ЗаказНаЗавод
	               |ГДЕ
	               |	Кузовщики.Кузовщик.Наименование В(&КузовостроителиИзНастройки)
	               |ИТОГИ ПО
	               |	ЗаказНаЗавод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КалендарныеГрафики.ДатаГрафика КАК РабочаяДата
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.ДеньВключенВГрафик
	               |	И КалендарныеГрафики.ДатаГрафика >= &РасчетнаяDD";
	
	КолВоДнейДляРасчета = Scan_ПраваИНастройки.Scan_Право("КоличествоДнейДляРасчетаDD");
	РасчетнаяDD = НачалоДня(ТекущаяДата) + КолВоДнейДляРасчета * 60 * 60 * 24; 
	
	ЗначениеНастройки = Scan_ПраваИНастройки.Scan_Право("КузовостроителиДляСчетчикаDDПриИспользованииЕвропейскихКузовостроителей"); 
	КузовостроителиИзНастройки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеНастройки,Символы.ПС,Истина);
	
	ЗначениеНастройки = Scan_ПраваИНастройки.Scan_Право("МестаХраненияДляРасчетаДатыDD");
	МестаХраненияИзНастройки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеНастройки,Символы.ПС,Истина); 	
	
	Запрос.УстановитьПараметр("КузовостроителиИзНастройки",КузовостроителиИзНастройки);
	Запрос.УстановитьПараметр("МестаХраненияИзНастройки",МестаХраненияИзНастройки);
	Запрос.УстановитьПараметр("РасчетнаяDD",РасчетнаяDD);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[4].Выбрать();//rarus vikhle 11.11.2020 mt 16328
	Если Выборка.Следующий() Тогда
		РабочаяDD = Выборка.РабочаяДата;	
	Иначе
		РабочаяDD = РасчетнаяDD;
	КонецЕсли;	
	
	Выборка = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //rarus vikhle 11.11.2020 mt 16328
	Пока Выборка.Следующий() Цикл
		Отказ = Ложь;
		РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписатьКлючевуюДатуОбъекта(Выборка.ЗаказНаЗавод,
																				Перечисления.Scan_КлючевыеДаты.DD,
																				РабочаяDD,,
																				Отказ);
		Если НЕ Отказ Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание,,,
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У заказа на завод %1 установлена дата DD %2'"),
									Выборка.ЗаказНаЗавод,Формат(РабочаяDD,"ДФ=dd.MM.yyyy")));	
		Иначе	
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Произошла ошибка при установке даты DD для заказа на завод %1'"),
									Выборка.ЗаказНаЗавод));																			
		КонецЕсли;																			
	КонецЦикла;	
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,,
							НСтр("ru = 'Завершена работа счетчика DD при использовании европейских кузовостроителей'"));	
	
КонецПроцедуры
//rarus vikhle 19.10.2020 mt 16328 ---

///////////////////////////////////////////////////////////////////////
////  РАСЧЕТ ДАТ ORDER INTAKE

//rarus agar 15.04.2021 17739 ++
Процедура РасчетДатOrderIntake(СтруктураПараметров = Неопределено) Экспорт //rarus vikhle 23.06.2021 mt 17645 + СтруктураПараметров
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_АльтернативныйРасчетДатOrderIntake);//rarus vikhle 12.07.2021 АПК
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_АльтернативныйРасчетДатOrderIntake.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	//rarus agar 11.01.2022 17739 ++
	//РегистрыСведений.Scan_РасчетOrderIntake.ВыполнитьРасчетДатOrderIntake();
	Scan_OrderIntake.ВыполнитьРасчетOrderIntake();
	//rarus agar 11.01.2022 17739 --
	
КонецПроцедуры
//rarus agar 15.04.2021 17739 --

///////////////////////////////////////////////////////////////////////
////  ПРОВЕРКА ЗАВИСШИХ РЗ

//rarus vikhle 21.06.2021 mt 17645 +++
Процедура ПроверитьЗависшиеРЗ(СтруктураПараметров = Неопределено) Экспорт 
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ПроверитьЗависшиеРЗ);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ПроверитьЗависшиеРЗ.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	//rarus vikhle 12.07.2021 АПК +++
	//ИмяСобытия = НСтр("ru = 'Регламентное задание. Проверить зависшие регламентные задания.'");
	ИмяСобытия = НСтр("ru = 'Регламентное задание.Проверить зависшие регламентные задания.'",ОбщегоНазначения.КодОсновногоЯзыка());
	//rarus vikhle 12.07.2021 АПК ---
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,,
								НСтр("ru = 'Запущена проверка зависших регламентных заданий';"));
	
	ТекущееЗадание			= РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.Scan_ПроверитьЗависшиеРЗ); 
	ПроверяемыйИнтервал		= ?(ТекущееЗадание.Расписание.ПериодПовтораВТечениеДня = 0, 14400, ТекущееЗадание.Расписание.ПериодПовтораВТечениеДня); //4 часа по умолчанию
	РегЗадания				= РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	ЕстьЗависшиеЗадания 	= Ложь;
	ТекущаяДата				= ТекущаяДатаСеанса();
	
	Для Каждого РегЗадание Из РегЗадания Цикл
		
		Если РегЗадание.Параметры.Количество() > 0
			И ТипЗнч(РегЗадание.Параметры[0]) = Тип("Структура")
			И РегЗадание.Параметры[0].Свойство("ПроверятьНаЗависание")
			И РегЗадание.Параметры[0].ПроверятьНаЗависание Тогда
			
			Если НЕ РегЗадание.ПоследнееЗадание = Неопределено И 
				РегЗадание.ПоследнееЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				
				ВремяВыполнения = ТекущаяДата - РегЗадание.ПоследнееЗадание.Начало;
				
				Если ВремяВыполнения > ПроверяемыйИнтервал Тогда
					ЕстьЗависшиеЗадания = Истина;	
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЕстьЗависшиеЗадания Тогда
		ИмяПрава = "ШаблонПисьмаОЗависшихРегламентныхЗаданиях";
		РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава(ИмяПрава);
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершение проверки зависших регламентных заданий'"));
	
КонецПроцедуры	
//rarus vikhle 21.06.2021 mt 17645 ---

///////////////////////////////////////////////////////////////////////
////  ИСПРАВЛЕНИЕ РАСХОЖДЕНИЙ КЛЮЧЕВЫХ ДАТ

//rarus agar 22.06.2021 17925 ++
Процедура ИсправлениеРасхожденийКлючевыхДат(СтруктураПараметров = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ИсправлениеРасхожденийКлючевыхДат); // rarus agar 28.06.2021 АПК
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ИсправлениеРасхожденийКлючевыхДат.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Продукт,
	|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод
	|ПОМЕСТИТЬ ВТ_ПродуктыИЗаказы
	|ИЗ
	|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПродуктыИЗаказы.Продукт КАК Продукт,
	|	ВТ_ПродуктыИЗаказы.ЗаказНаЗавод КАК ЗаказНаЗавод,
	|	Scan_КлючевыеДаты.Ссылка КАК КлючеваяДата
	|ПОМЕСТИТЬ ВТ_ПродуктыИЗаказыИКД
	|ИЗ
	|	ВТ_ПродуктыИЗаказы КАК ВТ_ПродуктыИЗаказы,
	|	Перечисление.Scan_КлючевыеДаты КАК Scan_КлючевыеДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПродуктыИЗаказыИКД.Продукт КАК Продукт,
	|	ВТ_ПродуктыИЗаказыИКД.ЗаказНаЗавод КАК ЗаказНаЗавод,
	|	ВТ_ПродуктыИЗаказыИКД.КлючеваяДата КАК КлючеваяДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Scan_КлючевыеДатыПродуктов.Значение, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Scan_КлючевыеДатыПродуктов.Значение
	|		ИНАЧЕ Scan_КлючевыеДатыЗаказов.Значение
	|	КОНЕЦ КАК ЗначениеКлючевыеДаты,
	|	Scan_СводнаяИнформацияПоПродукту.DCD КАК DCD,
	|	Scan_СводнаяИнформацияПоПродукту.DDD КАК DDD,
	|	Scan_СводнаяИнформацияПоПродукту.PODOD КАК PODOD,
	|	Scan_СводнаяИнформацияПоПродукту.SDDate КАК SDDate,
	|	Scan_СводнаяИнформацияПоПродукту.PDD КАК PDD,
	|	Scan_СводнаяИнформацияПоПродукту.EDD КАК EDD,
	|	Scan_СводнаяИнформацияПоПродукту.CRD КАК CRD,
	|	Scan_СводнаяИнформацияПоПродукту.FinishDate КАК FinishDate,
	|	Scan_СводнаяИнформацияПоПродукту.CDD КАК CDD,
	|	Scan_СводнаяИнформацияПоПродукту.CDD2 КАК CDD2,
	|	Scan_СводнаяИнформацияПоПродукту.CDDПоставщик КАК CDDПоставщик,
	|	Scan_СводнаяИнформацияПоПродукту.CDDX КАК CDDX,
	|	Scan_СводнаяИнформацияПоПродукту.ПортСПБ КАК ПортСПБ,
	|	Scan_СводнаяИнформацияПоПродукту.ADD КАК ADD,
	|	Scan_СводнаяИнформацияПоПродукту.ETA КАК ETA,
	|	Scan_СводнаяИнформацияПоПродукту.ADDLBB КАК ADDLBB,
	|	Scan_СводнаяИнформацияПоПродукту.AN КАК AN,
	|	Scan_СводнаяИнформацияПоПродукту.PAD КАК PAD,
	|	Scan_СводнаяИнформацияПоПродукту.AAD КАК AAD,
	|	Scan_СводнаяИнформацияПоПродукту.PTSD КАК PTSD,
	|	Scan_СводнаяИнформацияПоПродукту.RFT КАК RFT,
	//|	Scan_СводнаяИнформацияПоПродукту.RFD КАК RFD, rarus bonmak 09.08.2021 16834
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия КАК ДатаПродажиИзделия,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту КАК ДатаПродажиКлиенту,
	|	Scan_СводнаяИнформацияПоПродукту.SoW КАК SoW,
	|	Scan_СводнаяИнформацияПоПродукту.WED КАК WED,
	|	Scan_СводнаяИнформацияПоПродукту.ПродуктВАрхиве КАК ПродуктВАрхиве,
	//|	Scan_СводнаяИнформацияПоПродукту.ДатаСОП КАК ДатаСОП, //rarus bonmak 09.08.2021 16834
	|	Scan_СводнаяИнформацияПоПродукту.DD КАК DD,
	|	Scan_СводнаяИнформацияПоПродукту.DD2 КАК DD2,
	|	Scan_СводнаяИнформацияПоПродукту.DDS КАК DDS,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаИнвойса КАК ДатаИнвойса,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПокупкиБУИзделия КАК ДатаПокупкиБУИзделия,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУДилеру КАК ДатаПродажиБУДилеру,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУКлиенту КАК ДатаПродажиБУКлиенту,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаОтгрузкиСЗаводаПриEXW КАК ДатаОтгрузкиСЗаводаПриEXW,
	|	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
	|	Scan_СводнаяИнформацияПоПродукту.RDB КАК RDB,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИнвойса1С КАК ДатаПоступленияИнвойса1С,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПередачиБУИзделияДилеру КАК ДатаПередачиБУИзделияДилеру,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИзделияНаСклад КАК ДатаПоступленияИзделияНаСклад,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИзделияБУНаСклад КАК ДатаПоступленияИзделияБУНаСклад,
	|	Scan_СводнаяИнформацияПоПродукту.ДатаСписания КАК ДатаСписания,
	//Rarus bonmak 04.02.2022 18590 ++
	|	Scan_СводнаяИнформацияПоПродукту.ВнутреннийРезервДилера КАК ВнутреннийРезервДилера,
	//Rarus bonmak 04.02.2022 18590 --
	|	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиПродуктаКлиенту КАК ДатаПродажиПродуктаКлиенту
	|ИЗ
	|	ВТ_ПродуктыИЗаказыИКД КАК ВТ_ПродуктыИЗаказыИКД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних КАК Scan_КлючевыеДатыПродуктов
	|		ПО (Scan_КлючевыеДатыПродуктов.ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.Изделие))
	|			И ВТ_ПродуктыИЗаказыИКД.Продукт = Scan_КлючевыеДатыПродуктов.Объект
	|			И ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = Scan_КлючевыеДатыПродуктов.ВидКлючевойДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних КАК Scan_КлючевыеДатыЗаказов
	|		ПО (Scan_КлючевыеДатыЗаказов.ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод))
	|			И ВТ_ПродуктыИЗаказыИКД.ЗаказНаЗавод = Scan_КлючевыеДатыЗаказов.Объект
	|			И ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = Scan_КлючевыеДатыЗаказов.ВидКлючевойДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
	|		ПО ВТ_ПродуктыИЗаказыИКД.Продукт = Scan_СводнаяИнформацияПоПродукту.Продукт
	|			И ВТ_ПродуктыИЗаказыИКД.ЗаказНаЗавод = Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DCD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.DCD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DDD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.DDD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.PODOD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.PODOD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.SDDate)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.SDDate КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.PDD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.PDD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.EDD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.EDD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CRD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.CRD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.FinishDate)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.FinishDate КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.CDD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD2)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.CDD2 КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDDПоставщик)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.CDDПоставщик КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDDX)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.CDDX КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПортСПБ)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ПортСПБ КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ADD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ADD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ETA)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ETA КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ADDLBB)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ADDLBB КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.AN)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.AN КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.PAD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.PAD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.AAD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.AAD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.PTSD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.PTSD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.RFT)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.RFT КАК ДАТА), ДЕНЬ)
	//rarus bonmak 09.08.2021 16834 ++
	//|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.RFD)
	//|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.RFD КАК ДАТА), ДЕНЬ)
	//rarus bonmak 09.08.2021 16834 --
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПередачиИзделияДилеру КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.SoW)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.SoW КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.WED)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.WED КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ПродуктВАрхиве КАК ДАТА), ДЕНЬ)
	//rarus bonmak 09.08.2021 16834 ++
	//|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаСОП)
	//|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаСОП КАК ДАТА), ДЕНЬ)
	//rarus bonmak 09.08.2021 16834 --
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DD)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.DD КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DD2)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.DD2 КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DDS)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.DDS КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПокупкиБУИзделия)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПокупкиБУИзделия КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУДилеру)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУДилеру КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУКлиенту КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаИнвойса)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаИнвойса КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаОтгрузкиСЗаводаПриEXW)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаОтгрузкиСЗаводаПриEXW КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.БроньДилера)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.RDB)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.RDB КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПоступленияИнвойса1С)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИнвойса1С КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПередачиБУИзделияДилеру)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПередачиБУИзделияДилеру КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПоступленияИзделияНаСклад)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИзделияНаСклад КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПоступленияИзделияБУНаСклад)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИзделияБУНаСклад КАК ДАТА), ДЕНЬ)
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаСписания)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаСписания КАК ДАТА), ДЕНЬ)
	//Rarus bonmak 04.02.2022 18590 ++
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ВнутреннийРезервДилера)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыПродуктов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ВнутреннийРезервДилера КАК ДАТА), ДЕНЬ)
	//Rarus bonmak 04.02.2022 18590 --
	|			КОГДА ВТ_ПродуктыИЗаказыИКД.КлючеваяДата = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиПродуктаКлиенту)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_КлючевыеДатыЗаказов.Значение КАК ДАТА), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Scan_СводнаяИнформацияПоПродукту.ДатаПродажиПродуктаКлиенту КАК ДАТА), ДЕНЬ)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_КлючевыеДатыПродуктов.Период";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// rarus agar 29.06.2021 АПК ++
	//ИмяСобытия = НСтр("ru = 'Регламентное задание. Исправление расхождений ключевых дат'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИмяСобытия = НСтр("ru = 'Регламентное задание.Исправление расхождений ключевых дат'", ОбщегоНазначения.КодОсновногоЯзыка());
	// rarus agar 29.06.2021 АПК --
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начато регламентное исправление расхождений ключевых дат'"));
	
	КомментарийЗаписи = НСтр("ru='Исправление расхождения ключевых дат регламентным заданием'");
	ШаблонКомментарияЖурналаРегистрации = НСтр("ru = 'Для Продукта %1 и Заказа на завод %2 в регистре сводной информации для Ключевой даты %3 значение %4 заменено на %5'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяПеречисления            = Выборка.КлючеваяДата.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(Выборка.КлючеваяДата);
		ИмяЗначенияПеречисления    = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		Продукт                   = Выборка.Продукт;
		ЗаказНаЗавод              = Выборка.ЗаказНаЗавод;
		КлючеваяДата              = Выборка.КлючеваяДата;
		ЗначениеКлючевыеДаты      = Выборка.ЗначениеКлючевыеДаты;
		ЗначениеСводнаяИнформация = Выборка[ИмяЗначенияПеречисления];
		
		РегистрыСведений.Scan_СводнаяИнформацияПоПродукту.ЗаписьЗначенияРегистраСводнаяИнформацияПоПродукту(Продукт, ЗаказНаЗавод, КлючеваяДата, ЗначениеКлючевыеДаты,, КомментарийЗаписи);
			
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментарияЖурналаРегистрации,
																								Продукт, ЗаказНаЗавод, КлючеваяДата, Формат(ЗначениеСводнаяИнформация, НСтр("ru='ДФ=дд.ММ.гггг; ДП='Пустая дата''")), Формат(ЗначениеКлючевыеДаты, "ДЛФ=ДД")); // Rarus tenkam 08.07.2022 mantis 18726 АПК +
			
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , КомментарийЖурналаРегистрации);
	КонецЦикла;
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено регламентное исправление расхождений ключевых дат'"));
	
КонецПроцедуры
//rarus agar 22.06.2021 17925 --

Процедура ОтправитьПисьмаИзОчереди(СтруктураПараметров = Неопределено) Экспорт // rarus tenkam 04.08.2021 mantis 18062
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОтправитьПисьмаИзОчереди);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ОтправитьПисьмаИзОчереди.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Отпрвка писем из очереди'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начата регламентная отправка писем из очереди'"));
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ОчередьПоОтправкеПисем.ШаблонПисьма КАК ШаблонПисьма,
		|	Scan_ОчередьПоОтправкеПисем.ДокументОтправки КАК ДокументОтправки,
		|	Scan_ОчередьПоОтправкеПисем.ПараметрыОтправки КАК ПараметрыОтправки,
		|	Scan_ОчередьПоОтправкеПисем.Пользователь КАК Пользователь,
		|	Scan_ОчередьПоОтправкеПисем.ДатаРегистрации КАК ДатаРегистрации
		|ИЗ
		|	РегистрСведений.Scan_ОчередьПоОтправкеПисем КАК Scan_ОчередьПоОтправкеПисем
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРегистрации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблону(ВыборкаДетальныеЗаписи.ШаблонПисьма, ВыборкаДетальныеЗаписи.ДокументОтправки, ВыборкаДетальныеЗаписи.ПараметрыОтправки.Получить());
		ВсеОк = РезультатОтправкиПисьма.ПисьмоОтправлено;
		//rarus BProg_Gladkov 03.05.2020 0015962 -- 
		Если НЕ ВсеОк Тогда
			Сообщить(РезультатОтправкиПисьма.ТекстСообщения); 
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо %1 по документу %2. Дата регистрации: %3'"),
			ВыборкаДетальныеЗаписи.ШаблонПисьма,ВыборкаДетальныеЗаписи.ДокументОтправки, ВыборкаДетальныеЗаписи.ДатаРегистрации),);
		Иначе
			// Удалим строку в регистре "Очередь по отправке писем"
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправлено письмо %1 по документу %2. Дата регистрации: %3'"),
				ВыборкаДетальныеЗаписи.ШаблонПисьма,ВыборкаДетальныеЗаписи.ДокументОтправки, ВыборкаДетальныеЗаписи.ДатаРегистрации),);
				
			НаборЗаписей = РегистрыСведений.Scan_ОчередьПоОтправкеПисем.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.ШаблонПисьма.Установить(ВыборкаДетальныеЗаписи.ШаблонПисьма);
			НаборЗаписей.Отбор.ДокументОтправки.Установить(ВыборкаДетальныеЗаписи.ДокументОтправки);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение		
				ТекстСообщения = Нстр("ru = 'Не удалось удалить данные по причине:'; en = 'Unable to delete data due to:'") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);				
			КонецПопытки;  			
		КонецЕсли; 		
	КонецЦикла;
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершена регламентная отправка писем из очереди'"));		
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
////  ОЧИСТКА РЕГИСТРОВ. СЛУЖЕБНЫЕ.

// Удаляет записи регистра сведений до периода
//
// Параметры:
//  ИмяРегистраСведений	 - Строка	 - Имя регистра сведений
//  КонечныйПериод		 - Дата	 	 - Дата, до которой нужно удалить записи
//  СообщениеОбОшибке	 - Строка	 - Описание ошибки, переинициализируется 
// 
// Возвращаемое значение:
//  Число - Количество удаленных записей
//
Функция УдалитьЗаписиРегистраДоПериода(ИмяРегистраСведений, КонечныйПериод, СообщениеОбОшибке) Экспорт //rarus vikhle 21.09.2021 m 17927 +++
	
	УдаленоЗаписей		= 0;
	СообщениеОбОшибке	= "";
	
	// Проверяем, существует ли регистр с переданным именем
	Регистр = Метаданные.РегистрыСведений.Найти(ИмяРегистраСведений);
	Если Регистр = Неопределено Тогда
		СообщениеОбОшибке = СтрШаблон(Нстр("ru = 'Не найден регистр сведений с именем ""%1""'"), ИмяРегистраСведений);
		Возврат УдаленоЗаписей;
	КонецЕсли;	
	
	//Определяем поле, по которому будем определять периоды записей
    РегистрПериодический = НЕ Регистр.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	Если РегистрПериодический Тогда
		ПолеПериод = "Период";
	Иначе
		ПолеПериод = ПолеПериодРегистра(ИмяРегистраСведений); //rarus vikhle 29.09.2021 mt 17927 переименовал вызываемую функцию	
	КонецЕсли;	
	
	Если ПолеПериод = Неопределено Тогда
		СообщениеОбОшибке = Нстр("ru = 'Не указано измерение или реквизит регистра сведений для определения периодов записей'");
	ИначеЕсли ПолеПериод <> "Период" 
		И (Регистр.Измерения.Найти(ПолеПериод) = Неопределено 
		И Регистр.Реквизиты.Найти(ПолеПериод) = Неопределено) Тогда //rarus vikhle 29.09.2021 mt 17927
		СообщениеОбОшибке = СтрШаблон(Нстр("ru = 'В регистре сведений нет измерения или реквизита ""%1""'"), ПолеПериод);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат УдаленоЗаписей;
	КонецЕсли;	
	
	// Создаем "шаблон" запроса, который далее будем заполнять данным переданного регистра. НЕ ЗАДАВАТЬ ПСЕВДОНИМ ДЛЯ &ПОЛЯ!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Поля
	               |ИЗ
	               |	&РегистрСведений КАК РегистрСведений
	               |ГДЕ
	               |	&ПолеПериод <= &ДатаОкончания"; //rarus vikhle 29.09.2021 mt 17927
	
	// Заполним выбираемые поля в запросе измерениями регистра
	СтрокаПолей = "";
	Для Каждого Измерение Из Регистр.Измерения Цикл
		СтрокаПолей = СтрокаПолей + ?(СтрокаПолей <> "", ",","") + Измерение.Имя;
	КонецЦикла;
	
	Если РегистрПериодический Тогда
		СтрокаПолей = СтрокаПолей + "," + ПолеПериод;
	КонецЕсли;	
	// Меняем "заглушки" в запросе на данные регистра 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля", СтрокаПолей); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистрСведений", "РегистрСведений." + ИмяРегистраСведений);
	
	Если Метаданные.РегистрыСведений.Scan_РегистрацияОбмена1БД = Регистр Тогда //Rarus bonmak 14.02.2022 18705 добавил условие и отработку истина
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеПериод", 
		"НЕ РегистрСведений.ВидЗапроса.НеОчищатьИсториюЗапроса
		 |И РегистрСведений." + ПолеПериод);	
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеПериод", "РегистрСведений." + ПолеПериод);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонечныйПериод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений[ИмяРегистраСведений].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();	
		УдаленоЗаписей = УдаленоЗаписей + 1;
	КонецЦикла;	
	
	Возврат УдаленоЗаписей;
	
КонецФункции //rarus vikhle 21.09.2021 m 17927 ---	

// Возвращает имя измерения или реквизита, по которому определяется период записи непериодического регистра сведений 
Функция ПолеПериодРегистра(ИмяРегистраСведений) //rarus vikhle 23.09.2021 m 17927 +++ // rarus vikhle 29.09.2021 17927 переименовал
	
	//Если ИмяРегистраСведений = "Scan_ОтправленныеПисьма" Тогда
	Если ИмяРегистраСведений = Метаданные.РегистрыСведений.Scan_ОтправленныеПисьма.Имя Тогда //rarus vikhle 29.09.2021 17927
		Возврат "ДатаОтправки";
	//ИначеЕсли ИмяРегистраСведений = "Scan_Обмен1БДОтправленныеСобытия" Тогда
	ИначеЕсли ИмяРегистраСведений = Метаданные.РегистрыСведений.Scan_Обмен1БДОтправленныеСобытия.Имя Тогда //rarus vikhle 29.09.2021 17927	
		Возврат "ДатаИзменения";
	//ИначеЕсли ИмяРегистраСведений = "Scan_Обмен1БДНеотправленныеСобытия" Тогда
	ИначеЕсли ИмяРегистраСведений = Метаданные.РегистрыСведений.Scan_Обмен1БДНеотправленныеСобытия.Имя Тогда //rarus vikhle 29.09.2021 17927
		//Возврат "ДатаСобытия";
		Возврат "ДатаИзменения"; //rarus vikhle 29.09.2021 m 17927
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции //rarus vikhle 23.09.2021 m 17927 ---	

///////////////////////////////////////////////////////////////////////
////  ОБНОВИТЬ ГРУППУ С АДРЕСАМИ КЛИЕНТОВ

Процедура ОбновитьГруппуСАдресамиКлиентов(СтруктураПараметров = Неопределено) Экспорт // Rarus tenkam 08.11.2021 mantis 17140 +++

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ОбновитьГруппуСАдресамиКлиентов);	
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ОбновитьГруппуСАдресамиКлиентов.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	ИмяСобытия = НСтр("ru = 'Регламентное задание. Обновить группу с адресами клиентов'", ОбщегоНазначения.КодОсновногоЯзыка()); // 14.01.2021 tenkam АПК (добавлен КодОсновногоЯзыка)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начато обновление группы адресов клиентов в справочнике Места хранения';"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчику.МестоОтгрузки КАК МестоХранения,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаявкаПеревозчику.Ссылка) КАК КоличествоИспользованийЗаПериод
		|ПОМЕСТИТЬ ИспользованиеМестВДокументах
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику КАК Scan_ЗаявкаПеревозчику
		|ГДЕ
		|	Scan_ЗаявкаПеревозчику.Сторнирован = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчику.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаПеревозчику.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчику.Дата >= &ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаявкаПеревозчику.МестоОтгрузки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ЗаявкаПеревозчику.МестоДоставки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаявкаПеревозчику.Ссылка)
		|ИЗ
		|	Документ.Scan_ЗаявкаПеревозчику КАК Scan_ЗаявкаПеревозчику
		|ГДЕ
		|	Scan_ЗаявкаПеревозчику.Сторнирован = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчику.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|	И Scan_ЗаявкаПеревозчику.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ЗаявкаПеревозчику.Дата >= &ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаявкаПеревозчику.МестоДоставки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ПеремещениеИзделий.МестоОтгрузки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ПеремещениеИзделий.Ссылка)
		|ИЗ
		|	Документ.Scan_ПеремещениеИзделий КАК Scan_ПеремещениеИзделий
		|ГДЕ
		|	Scan_ПеремещениеИзделий.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ПеремещениеИзделий.Дата >= &ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ПеремещениеИзделий.МестоОтгрузки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_ПеремещениеИзделий.МестоДоставки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ПеремещениеИзделий.Ссылка)
		|ИЗ
		|	Документ.Scan_ПеремещениеИзделий КАК Scan_ПеремещениеИзделий
		|ГДЕ
		|	Scan_ПеремещениеИзделий.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ПеремещениеИзделий.Дата >= &ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ПеремещениеИзделий.МестоДоставки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Scan_МестаХранения.Ссылка,
		|	0
		|ИЗ
		|	Справочник.Scan_МестаХранения КАК Scan_МестаХранения
		|ГДЕ
		|	Scan_МестаХранения.ЭтоГруппа = ЛОЖЬ
		|	И Scan_МестаХранения.Маршрут = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИспользованиеМестВДокументах.МестоХранения КАК МестоХранения,
		|	ИспользованиеМестВДокументах.МестоХранения.КоличествоИспользований КАК КоличествоИспользований,
		|	СУММА(ИспользованиеМестВДокументах.КоличествоИспользованийЗаПериод) КАК КоличествоИспользованийЗаПериод,
		|	ИспользованиеМестВДокументах.МестоХранения.Родитель КАК Родитель,
		|	ИспользованиеМестВДокументах.МестоХранения.НеЗапрещатьПеремещениеМестаХранения КАК НеЗапрещатьПеремещениеМестаХранения
		|ПОМЕСТИТЬ МестаИИспользования
		|ИЗ
		|	ИспользованиеМестВДокументах КАК ИспользованиеМестВДокументах
		|
		|СГРУППИРОВАТЬ ПО
		|	ИспользованиеМестВДокументах.МестоХранения,
		|	ИспользованиеМестВДокументах.МестоХранения.КоличествоИспользований,
		|	ИспользованиеМестВДокументах.МестоХранения.Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаИИспользования.МестоХранения КАК МестоХранения,
		|	МестаИИспользования.КоличествоИспользований КАК КоличествоИспользований,
		|	МестаИИспользования.КоличествоИспользованийЗаПериод КАК КоличествоИспользованийЗаПериод,
		|	МестаИИспользования.Родитель КАК Родитель,
		|	МестаИИспользования.НеЗапрещатьПеремещениеМестаХранения КАК НеЗапрещатьПеремещениеМестаХранения,
		|	ВЫБОР
		|		КОГДА МестаИИспользования.КоличествоИспользований <> МестаИИспользования.КоличествоИспользованийЗаПериод
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НужноИзменитьКоличество,
		|	ВЫБОР
		|		КОГДА МестаИИспользования.КоличествоИспользованийЗаПериод <= &КоличествоИзНастройки
		|				И МестаИИспользования.Родитель <> ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.МестаХраненияАдресаКлиентов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НужноПереместить,
		|	ВЫБОР
		|		КОГДА МестаИИспользования.КоличествоИспользованийЗаПериод > &КоличествоИзНастройки
		|				И МестаИИспользования.Родитель = ЗНАЧЕНИЕ(Справочник.Scan_МестаХранения.МестаХраненияАдресаКлиентов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НужноВернутьВМестаХранения
		|ПОМЕСТИТЬ ТаблицаСПризнаками
		|ИЗ
		|	МестаИИспользования КАК МестаИИспользования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСПризнаками.МестоХранения КАК МестоХранения,
		|	ТаблицаСПризнаками.КоличествоИспользований КАК КоличествоИспользований,
		|	ТаблицаСПризнаками.КоличествоИспользованийЗаПериод КАК КоличествоИспользованийЗаПериод,
		|	ТаблицаСПризнаками.Родитель КАК Родитель,
		|	ТаблицаСПризнаками.НужноИзменитьКоличество КАК НужноИзменитьКоличество,
		|	ТаблицаСПризнаками.НужноПереместить КАК НужноПереместить,
		|	ТаблицаСПризнаками.НужноВернутьВМестаХранения КАК НужноВернутьВМестаХранения
		|ИЗ
		|	ТаблицаСПризнаками КАК ТаблицаСПризнаками
		|ГДЕ
		|	(ТаблицаСПризнаками.НужноИзменитьКоличество
		|			ИЛИ ТаблицаСПризнаками.НужноПереместить
		|			ИЛИ ТаблицаСПризнаками.НужноВернутьВМестаХранения)
		|	И ТаблицаСПризнаками.НеЗапрещатьПеремещениеМестаХранения = ИСТИНА";
	
	КоличествоМесяцев = Scan_ПраваИНастройки.Scan_Право("ПериодПроверкиМестХраненияНаЧастотуИспользования");
	ДатаНачалаПроверки = НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(),-КоличествоМесяцев));
	КоличествоИзНастройки = Scan_ПраваИНастройки.Scan_Право("КоличествоИспользованийМестаХранения");
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаПроверки);
	Запрос.УстановитьПараметр("КоличествоИзНастройки", КоличествоИзНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МестоХраненияОбъект = ВыборкаДетальныеЗаписи.МестоХранения.ПолучитьОбъект();
		МестоХраненияОбъект.Заблокировать();
		// Проверим, возможно нужно перезаписать количество
		Если ВыборкаДетальныеЗаписи.НужноИзменитьКоличество Тогда
			МестоХраненияОбъект.КоличествоИспользований = ВыборкаДетальныеЗаписи.КоличествоИспользованийЗаПериод;
		КонецЕсли;
		
		// Проверим, возможно нужно переместить в папку	"Места хранения - адреса клиентов"	
		Если ВыборкаДетальныеЗаписи.НужноПереместить Тогда
			МестоХраненияОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_МестаХранения.МестаХраненияАдресаКлиентов");
		ИначеЕсли ВыборкаДетальныеЗаписи.НужноВернутьВМестаХранения Тогда   		
		// Проверим, возможно нужно переместить в папку	"Места хранения"			 
			МестоХраненияОбъект.Родитель = ПредопределенноеЗначение("Справочник.Scan_МестаХранения.МестаХранения");
		КонецЕсли;
		
		Попытка
			МестоХраненияОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать место хранения %1. Ошибка: %2'"), МестоХраненияОбъект.Ссылка, ОписаниеОшибки()),);		
		КонецПопытки;  
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Завершено обновление группы с адресами клиентов.'"));

КонецПроцедуры // Rarus tenkam 08.11.2021 mantis 17140 ---

///////////////////////////////////////////////////////////////////////
////  ИСПРАВЛЕНИЕ РАСХОЖДЕНИЙ КЛЮЧЕВЫХ ДАТ

//rarus agar 31.01.2022 17929 ++
Процедура ВыгрузкаПараметровВидимостиОбъектовВФайл(СтруктураПараметров = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Scan_ВыгрузкаПараметровВидимостиОбъектовВФайл);
	Scan_СборСтатистики.Scan_ЗапускРЗ(Метаданные.РегламентныеЗадания.Scan_ВыгрузкаПараметровВидимостиОбъектовВФайл.Наименование); // Rarus tenkam 11.04.2022 mantis 18433 +
	
	ИмяСобытия = НСтр("ru = 'Регламентное задание.Выгрузка параметров видимости объектов в файл'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	КаталогВыгрузки = Scan_ПраваИНастройки.Scan_Право("КаталогВыгрузкиФайловПараметровВидимостиОбъектов");
	Если Не ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru = 'Не задан каталог выгрузки файлов параметров видимости объектов'"));
		Возврат;
	КонецЕсли;
	
	ИмяФайла = "ПараметрыВидимостиОбъектов_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + ".xml";
	
	ПолноеИмяФайла = КаталогВыгрузки + "\" + ИмяФайла;
	
	АдресФайлаВХранилище = Scan_ПараметрыВидимостиОбъектовСервер.ПоместитьПараметрыВФайлВХранилище();
	ДвоичныеДанныеФайла  = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Параметры видимости объектов выгружены в файл'"));
	
КонецПроцедуры
//rarus agar 31.01.2022 17929 --
