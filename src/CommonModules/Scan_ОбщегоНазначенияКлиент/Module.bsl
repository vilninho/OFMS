//////////////////////////////////////////////////////////////////////////////////
//// TLMS.
//// 
//// Процедуры и функции общего назначения.
//////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ СЕАНСА

// Конечная (клиентская) стадия инициализации подсистемы УАТ - клиентские предупреждения, сообщения
//
&НаКлиенте
Процедура Scan_ИнициализацияСеансаКлиент(ДопПараметры = Неопределено) ЭКСПОРТ
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	////1й этап - операции, выполняемые до проверки системы защиты 
	//Если НЕ ДопПараметры.ПодсистемаУАТинициализирована Тогда
	//	
	//	РежимОткрытияОкна = ?(Scan_ОбщегоНазначенияПовтИсп.ЭтоОбъединеннаяКонфигурация(), РежимОткрытияОкнаФормы.Независимый, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//	
	//	// Проверка необходимости обновления информационной базы
	//	Если ДопПараметры.НеобходимоВыполнитьОбновление Тогда 
	//		ДопПараметры.Вставить("Отказ",Истина);
	//		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиСистемыЗащитыОбработкаРезультата", ЭтотОбъект, ДопПараметры);
	//		ПараметрыФормы = Новый Структура("ПрограммноеОткрытие", Истина);
	//		ОткрытьФорму("Обработка.уатПомощникОбновленияИБ.Форма", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	//		Возврат;
	//	КонецЕсли;
	//
		// Проверка разрешение работы пользователя в "правах и настройках"
		Если НЕ ДопПараметры.РазрешитьРаботуСПрограммой Тогда
			ДопПараметры.Вставить("Отказ",Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиСистемыЗащитыОбработкаРезультата", ЭтотОбъект, ДопПараметры);
			Описание = "Текущему пользователю <" + ПользователиКлиентСервер.ТекущийПользователь() + "> запрещено работать с программой!
				|Обратитесь к администратору базы данных.";
			ПараметрыФормы = Новый Структура("Описание", Описание);
			ОткрытьФорму("ОбщаяФорма.Scan_Предупреждение", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Возврат;
		КонецЕсли;
	//	
	//КонецЕсли;
	//
	////2й этап - проверка системы защиты
	//Если ДопПараметры.ОшибкаСистемыЗащиты Тогда
	//	ДопПараметры.Вставить("Отказ",Истина);
	//	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиСистемыЗащитыОбработкаРезультата", ЭтотОбъект, ДопПараметры);
	//	ПараметрыФормы = Новый Структура("РезультатыЗапуска,ПрограммноеОткрытиеФормы", ДопПараметры.СостояниеСистемыЗащиты.РезультатыЗапуска, ИСТИНА);
	//	ОткрытьФорму("Обработка.УправлениеЛицензированием.Форма.СостояниеСистемыЗащиты", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	//	Возврат;
	//КонецЕсли;
	
	//3й этап - успешное завершение инициализации
	Если НЕ ДопПараметры.ПодсистемаScanИнициализирована Тогда
		
		//// Установка расширения браузера для веб-клиента
		//#Если ВебКлиент Тогда
		//	Оповещение =  Новый ОписаниеОповещения("УстановитьПодключениеРасширенияРаботыСФайламиЗавершение",ЭтотОбъект,Истина);
		//	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение); 
		//#КонецЕсли
		
		// Установка признака успешной инициализации подсистемы Scan
		Scan_ОбщегоНазначения.УстановитьПодсистемаScanИнициализирована();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает отбор у списка
//
Процедура УстановитьОтборУСписка(ОтборСКД, Знач ЛевоеЗначение, Знач ПравоеЗначение, Знач ВидСравнения = Неопределено, Знач Использование = Истина) Экспорт      
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	Если ТипЗнч(ЛевоеЗначение) = Тип("Строка") Тогда
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	КонецЕсли;
	
	ЭлементыОтбора = ОтборСКД.Элементы;
	ЭлементОтбораДанных = Неопределено;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			Если ЭлементОтбораДанных = Неопределено Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбораДанных = Неопределено Тогда
		ЭлементОтбораДанных = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ЛевоеЗначение;
	КонецЕсли;
	
	ЭлементОтбораДанных.ВидСравнения   = ВидСравнения;
	ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбораДанных.Использование  = Использование;      
КонецПроцедуры

// Обработчик события возникающего при получении результата работы подчиненной формы.
//
// Параметры:
//  РезультатЗакрытия  - Произвольный - Результат выполнения операции в подчиненной форме.
//  ПараметрОповещения - Произвольный - Дополнительные параметры вызова обработчика.
//
&НаКлиенте
Процедура НастройкиСистемыЗащитыОбработкаРезультата(РезультатЗакрытия, Параметры=Неопределено) Экспорт
	
	Параметры.Отказ = (РезультатЗакрытия=Неопределено) ИЛИ РезультатЗакрытия;
	
	//Если Параметры.Отказ Тогда
	//	//если стартует отдельное решение УАТ, то сразу завершаем работу
	//	Если НЕ уатОбщегоНазначенияПовтИсп.ЭтоОбъединеннаяКонфигурация() Тогда
	//		ОписаниеОшибки = "";
	//		ЛицензированиеСервер.ЗавершениеРаботыСистемыЛицензирования(ОписаниеОшибки);
			ЗавершитьРаботуСистемы(Ложь);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры // НастройкиСистемыЗащитыОбработкаРезультата()


//rarus sergei 02.08.2016 mantis 7038 ++

// Процедура проверяет возможность записи объекта, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Процедура ПроверитьЗаписьНовогоОбъектаВФорме(Форма, Ссылка, СтрокаТипОбъекта = Неопределено, флЗаписыватьВсегда = Ложь, флОтказ = Ложь) Экспорт
	
	Если Ссылка.Пустая() ИЛИ флЗаписыватьВсегда Тогда
		флОтказ = Истина;
		
		ТекстВопроса = "Для выполнения данной операции необходимо записать";
		Если СтрокаТипОбъекта = "документ" Тогда
			ТекстВопроса = ТекстВопроса + " документ!";
		Иначе
			ТекстВопроса = ТекстВопроса + " элемент!";
		КонецЕсли;
		
		ПоказатьПредупреждение(Неопределено, ТекстВопроса);
	КонецЕсли; 
	
КонецПроцедуры // ЗаписатьНовыйОбъектВФорме()

//rarus sergei 02.08.2016 mantis 7038 --

Процедура ОтправитьПоШаблонуOI(ФормаОтчета, Команда) Экспорт //rarus ozhnik 14927 18.02.2020 +-
	//rarus BProg_Gladkov 05.05.2020 0015962 ++ ОтправитьПисьмоПоШаблонуИзПрава
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ТабличныйДокументКОтправке", 	ФормаОтчета.ОтчетТабличныйДокумент);
	ПараметрыОтправки.Вставить("ИмяМакета", 					"Order Intake (Daily)");	
	РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонПисьмаСОтчетомOrderIntake", , ПараметрыОтправки);
	//rarus BProg_Gladkov 05.05.2020 0015962 -- 
КонецПроцедуры
