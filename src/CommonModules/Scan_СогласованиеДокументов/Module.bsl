 //rarus BProg_Gladkov 10.01.2020 0015117 +++
 
#Область ОтправкаПисьма

// Процедура - Отправить электронные письма
//
// Параметры:
//  Задача	 - ЗадачаСсылка.ЗадачаИсполнителя - Задача для которой надо сформировать письма для согласования по электронной почте.
//
Процедура ОтправитьЭлектронныеПисьма(Задача) Экспорт 	//rarus BProg_Gladkov 30.12.2019 0015117 +-
														//rarus BProg_Gladkov 30.04.2020 0015962 +- Перенес из модуля менеджера ЗадачаИсполнителя. Переименовал. Старое название ОтправитьПисьмоНаСогласование
														
	ШаблонПисьма = ПолучитьШаблонПисьмаСогласованияПоЭлектроннойПочте(Задача.Предмет);
	Если НЕ ЗначениеЗаполнено(ШаблонПисьма) тогда
		Возврат;
	КонецЕсли;
	
	МассивИсполнителей = Новый Массив;
	Если ЗначениеЗаполнено(Задача.РольИсполнителя) тогда
		ТаблицаИсполнителей = БизнесПроцессыИЗадачиСервер.ВыбратьИсполнителейЗадач(Задача);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсполнителей, ТаблицаИсполнителей.ВыгрузитьКолонку("Исполнитель"));
	Иначе
		МассивИсполнителей.Добавить(Задача.Исполнитель);
	КонецЕсли;
	
	Для Каждого Пользователь из МассивИсполнителей Цикл
		ПараметрыОтправки = Новый Структура("Автоматически", Истина);	
		//rarus BProg_Gladkov 03.05.2020 0015962 ++ Изменены параметры функций ПолучитьСтруктуруПараметровПисьма и ОтправитьПисьмо
		ПараметрыПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ПолучитьСтруктуруПараметровПисьма(ШаблонПисьма, Задача.Предмет, ПараметрыОтправки);
		ЗаполнитьПараметрыПисьмаДляСогласования(ПараметрыПисьма, Задача, Пользователь);
		Если НЕ ЗначениеЗаполнено(ПараметрыПисьма.УчетнаяЗапись) тогда
			Продолжить;
		КонецЕсли;
		
		Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмо(ПараметрыПисьма);
		//rarus BProg_Gladkov 03.05.2020 0015962 -- 
	КонецЦикла;
КонецПроцедуры

//Функция ПолучитьТаблицуНастройкиСогласованияПоЭлектроннойПочте(Задача) Экспорт //rarus BProg_Gladkov 30.04.2020 0015962 +- Функция удалена 

// Функция - Получить шаблон письма согласования по электронной почте
//
// Параметры:
//  Задача	 - ЗадачаСсылка.ЗадачаИсполнителя - Задача для предмета которой надо получить шаблон.
// 
// Возвращаемое значение:
// СправочникСсылка.Scan_ШаблоныПисем - шаблон по которому надо сформировать письмо.
//
Функция ПолучитьШаблонПисьмаСогласованияПоЭлектроннойПочте(Документ) //rarus BProg_Gladkov 30.04.2020 0015962 +-
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Scan_Калькуляция") тогда
		ШаблонПисьма = Scan_ПраваИНастройки.Scan_ПолучитьПраваИНастройкиПользователя(Документ.Организация, "ШаблонСогласованияПоЭлектроннойПочтеДокументаКалькуляция");
	Иначе
		ШаблонПисьма = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонПисьма) 
		И НЕ ШаблонПисьма.Действует
	Тогда
		ШаблонПисьма = Неопределено;
	КонецЕсли;	
	
	Возврат ШаблонПисьма;
КонецФункции

Процедура ЗаполнитьПараметрыПисьмаДляСогласования(ПараметрыПисьма, ЗадачаСсылка, ПользовательПолучатель)
	ПараметрыПисьма.УчетнаяЗапись = ПолучитьУчетнуюЗаписьЭлПочтыДляСогласования(ЗадачаСсылка.Предмет);
	Если НЕ ЗначениеЗаполнено(ПараметрыПисьма.УчетнаяЗапись) тогда
		Возврат;
	КонецЕсли;
	ПараметрыПисьма.Кому = ПолучитьАдресЭлектроннойПочтыДляСогласования(ПользовательПолучатель);
	Если НЕ ЗначениеЗаполнено(ПараметрыПисьма.Кому) тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПисьма.АдресОтвета   = ПараметрыПисьма.УчетнаяЗапись.АдресЭлектроннойПочты;
	ПараметрыПисьма.Тема          = "Согласовать: " + ЗадачаСсылка.ПредметСтрокой; 
	ТемаОтветногописьма		      = "Re: "+ ПараметрыПисьма.Тема;
	ТекстСогласования             = СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(ЗадачаСсылка, ТемаОтветногописьма, ПараметрыПисьма.АдресОтвета);
	ПараметрыПисьма.Тело	 	  = ?(ЗначениеЗаполнено(ПараметрыПисьма.Тело), ПараметрыПисьма.Тело + " " + ТекстСогласования, ТекстСогласования);
	ПараметрыПисьма.Кому	 	  = ПолучитьАдресЭлектроннойПочтыДляСогласования(ПользовательПолучатель);
	ПараметрыПисьма.ТипТекста 	  = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
КонецПроцедуры

Функция ПолучитьУчетнуюЗаписьЭлПочтыДляСогласования(ПредметаЗадачи) Экспорт 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипПредметаЗадачи", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПредметаЗадачи.Метаданные()));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте.ТипПредметаЗадачи КАК ТипПредметаЗадачи,
	               |	Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте.УчетнаяЗаписьЭлектроннойПочты КАК УчетнаяЗаписьЭлектроннойПочты
	               |ИЗ
	               |	РегистрСведений.Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте КАК Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте
	               |ГДЕ
	               |	Scan_УчетныеЗаписиЭлектроннойПочтыДляСогласованияДокументовПоЭлектроннойПочте.ТипПредметаЗадачи = &ТипПредметаЗадачи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.УчетнаяЗаписьЭлектроннойПочты;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьАдресЭлектроннойПочтыДляСогласования(ПользовательПолучатель) Экспорт 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПользовательПолучатель);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользователиКонтактнаяИнформация.АдресЭП КАК АдресЭП
	               |ИЗ
	               |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	               |ГДЕ
	               |	НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления
	               |	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.Scan_EmailПользователяДляСогласованияДокументовПоЭлектроннойПочте)
	               |	И ПользователиКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.АдресЭП;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


Функция СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(ЗадачаССылка, ТемаПисьма, АдресОтвета) Экспорт
	СсылкиОтветов = ПолучитьОтветыВВидеСсылокMailto(ЗадачаССылка, ТемаПисьма, АдресОтвета);
	
	Если СсылкиОтветов.КоличествоОтветов > 1 Тогда
		Комментарий = НСтр("ru = 'Не отвечайте на это письмо. Для выполнения задачи нажмите на одну из ссылок.';
							|en = 'Do not reply to this email. To complete the task, click on one of the links'");

	ИначеЕсли СсылкиОтветов.КоличествоОтветов = 1 Тогда
		Комментарий = НСтр("ru = 'Не отвечайте на это письмо. Для выполнения задачи нажмите на ссылку.'; 
						   |en = 'Do not reply to this email. To complete the task, click on the link.'");
	КонецЕсли;
	
	//rarus agar 14.07.2020 15690 ++
	НавигационнаяСсылкаНаПредмет = "";
	Попытка
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		Если СтрНайти(СтрокаСоединения, "TLMS_dev") <> 0 Тогда
			НавигационнаяСсылкаНаПредмет = "https://datafactory.scania.ru/TLMS_dev/ru/#"+ ПолучитьНавигационнуюСсылку(ЗадачаССылка.Предмет);
		ИначеЕсли СтрНайти(СтрокаСоединения, "TLMS_Prod") <> 0 Тогда
			НавигационнаяСсылкаНаПредмет = "https://datafactory.scania.ru/TLMS_Prod/ru/#"+ ПолучитьНавигационнуюСсылку(ЗадачаССылка.Предмет);
		ИначеЕсли СтрНайти(СтрокаСоединения, "TLMS_test") <> 0 Тогда
			НавигационнаяСсылкаНаПредмет = "https://datafactory.scania.ru/TLMS_test/ru/#"+ ПолучитьНавигационнуюСсылку(ЗадачаССылка.Предмет);	
		КонецЕсли;
	Исключение КонецПопытки;
	
	Если НавигационнаяСсылкаНаПредмет = "" Тогда
		Результат = "%1<p>
		         |<B>%2</B>";
		Результат = СтрШаблон(Результат,Комментарий,СсылкиОтветов.Текст);
	Иначе
		ПредставлениеСсылкиНаПредмет = "<a href = '"+ НавигационнаяСсылкаНаПредмет +"'>"+ Строка(ЗадачаССылка.Предмет) + "</a>";
				
		Результат = "<p>%1</p>
		            |<p>%2</p>
		            |<B>%3</B>";
		Результат = СтрШаблон(Результат, ПредставлениеСсылкиНаПредмет, Комментарий, СсылкиОтветов.Текст);
	КонецЕсли;
	//rarus agar 14.07.2020 15690 --
	
	Возврат Результат;
		
КонецФункции


//// Формирует текст ссылок MailTo для ответов на задачу.
////
//// Параметры:
////  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
////  Получатель - СправочникСсылка.Пользователи - ссылка на пользователя.
////
//// Возвращаемое значение:
////  Строка
////
Функция ПолучитьОтветыВВидеСсылокMailto(ЗадачаССылка, ТемаПисьма, АдресЭлектроннойПочты ) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("КоличествоОтветов", 0);
	
	ВариантыОтветовДляВыполненияЗадачи = ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаССылка.БизнесПроцесс);
	ВозможныеВариантыВыполнения = ВариантыОтветовДляВыполненияЗадачи.СписокВариантовОтветов;
	Результат.КоличествоОтветов = ВозможныеВариантыВыполнения.Количество();
	Разделитель = "";
	
	Для Каждого ВариантОтвета Из ВозможныеВариантыВыполнения Цикл
		 ЦветСсылки = "";
		Если ВариантОтвета.Значение = Перечисления.Scan_РезультатыСогласования.Согласовано тогда
			ЦветСсылки = "green";
		ИначеЕсли ВариантОтвета.Значение = Перечисления.Scan_РезультатыСогласования.СогласованоСЗамечаниями тогда
			ЦветСсылки = "#ffc418";   //желтый
		ИначеЕсли ВариантОтвета.Значение = Перечисления.Scan_РезультатыСогласования.НеСогласовано тогда
			ЦветСсылки = "red";
		КонецЕсли;
		//ТемаПисьма = ТемаСообщенияДляССылкиMailTo(
		//	ЗадачаСсылка, ВариантОтвета.Значение, ВариантОтвета.Представление);
		ТекстОтвета = ТекстОтветногоСообщенияДляСсылкиMailTo(ВариантОтвета, ЗадачаСсылка);

		ТемаПисьмаВОтветномПисьме = ТемаПисьма;
		СсылкаНаОтвет = СформироватьСсылкуMailto(АдресЭлектроннойПочты,,,ТемаПисьмаВОтветномПисьме,ТекстОтвета, ,ВариантОтвета.Представление + "...", ЦветСсылки);
			
		Результат.Текст = Результат.Текст + Разделитель + СсылкаНаОтвет;
		
		Разделитель = " / ";
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Возвращает текст сообщения для ссылки mailto.
//
// Параметры:
//  КодЯзыка - Строка - код языка, на котором формируется текст сообщения.
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстОтветногоСообщенияДляСсылкиMailTo(ВариантОтвета, ЗадачаССылка)
	ВариантОтветаНаОтветноеПисьмо = "";
	Если ВариантОтвета.Представление = "Согласовать" тогда
		ВариантОтветаНаОтветноеПисьмо = "Согласовано";
	ИначеЕсли ВариантОтвета.Представление = "Согласовать с замечаниями" тогда
		ВариантОтветаНаОтветноеПисьмо = "Согласовано с замечаниями";
	ИначеЕсли ВариантОтвета.Представление = "Отказать" тогда 
		ВариантОтветаНаОтветноеПисьмо = "Отказано";
	КонецЕсли;
	
	ТекстОтвета = "Результат согласования: %1;
	    |Номер задачи: %2;
		|Предмет задачи: %3;
		|1. Приложите файлы, если нужно.;
		|2. Впишите ваш комментарий по выполнению задачи.;
		|Комментарий:";
	Возврат СтрШаблон(ТекстОтвета,ВариантОтветаНаОтветноеПисьмо,ЗадачаССылка.Номер, ЗадачаССылка.Предмет);
	
КонецФункции


// Возвращает список вариантов выполнения для задачи.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//
// Возвращаемое значение:
//  Структура
//   * СписокВариантовОтветов - СписокЗначений - список значений типа
//                              ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//                              с заполненным представлением; в нем содержатся варианты
//                              ответов.
//   * ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//                               ввод комментария обязателен.
//
Функция ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаСсылка)
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗадачаСсылка);
	ВозможныеВариантыВыполнения = МенеджерПроцесса.ВариантыОтветовДляВыполненияЗадачиПоПочте();
	Возврат ВозможныеВариантыВыполнения;
	
КонецФункции


// Формирует ссылку mailto
Функция СформироватьСсылкуMailto(Кому = "",	Копия = "",	СкрытаяКопия = "",	ТемаПисьма = "", ТекстПисьма = "",	ТипТекста = Неопределено, 	Представление = "", ЦветСсылки = "") Экспорт
	
	Если ТипТекста = Неопределено Тогда
		ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	КонецЕсли;
	
	СсылкаMailto = "";
	НачатоЗаполнениеПараметров = Ложь;
	
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "to", Кому,НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "cc", Копия, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "bcc", СкрытаяКопия, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "subject", ТемаПисьма, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "body", ТекстПисьма, НачатоЗаполнениеПараметров);
	//ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "style", "color:Red", НачатоЗаполнениеПараметров);
	
	Если Не ПустаяСтрока(СсылкаMailto) Тогда
		
		//Если ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = СсылкаMailto;
			КонецЕсли;
			
			СсылкаMailto = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<a href=""mailto:%1""><FONT color=%2>%3</FONT></a>", 	СсылкаMailto, ЦветСсылки, Представление);
		//Иначе
			
		//	СсылкаMailto = "mailto:" + СсылкаMailto;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаMailto;
	
КонецФункции

// Дописывает в ссылку новый параметр, если значение параметра заполнено
Процедура ДобавитьПараметрКСсылкеMailto(СсылкаMailto, НазваниеПараметра, ЗначениеПараметра, НачатоЗаполнениеПараметров)

	Если ПустаяСтрока(ЗначениеПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметра = ЗакодироватьСсылкуMailto(ЗначениеПараметра);
	
	Если НазваниеПараметра = "to" Тогда
		
		СсылкаMailto = СсылкаMailto + ЗначениеПараметра;
		Возврат;
		
	КонецЕсли;
	
	Если НачатоЗаполнениеПараметров Тогда
		
		СимволРазделитель = "&";
		
	Иначе
		
		СимволРазделитель = "?";
		НачатоЗаполнениеПараметров = Истина;
		
	КонецЕсли;
	
	СсылкаMailto = СсылкаMailto + СимволРазделитель + НазваниеПараметра + "=" + ЗначениеПараметра;
	
	Возврат;
	
КонецПроцедуры


// Кодирует символы " ", ПС, "?", "&", "%"
Функция ЗакодироватьСсылкуMailto(СсылкаMailto) Экспорт
	
	ЗакодированнаяСсылкаMailto = СсылкаMailto;
	
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "%", "%25");
	
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, Символы.ПС, "%0D%0A");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, " ", "%20");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "?", "%3F");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "&", "%26");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, """", "%22");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "<", "%3C");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, ">", "%3E");
	
	Возврат ЗакодированнаяСсылкаMailto;
	
КонецФункции

Функция ОтправитьПисьмоОтказВыполненияЗадачи(УчетнаяЗапись, Кому, Тема, ТекстСообщения) Экспорт
	
	Текст = ТекстСообщения;
	ПараметрыПисьма = Новый Структура;
	//Заполним параметры письма
	ПараметрыПисьма.Вставить("Тема", 				Тема);
	ПараметрыПисьма.Вставить("Тело", 				Текст);
	ПараметрыПисьма.Вставить("Кодировка", 			"utf-8");
	ПараметрыПисьма.Вставить("Важность",  			ВажностьИнтернетПочтовогоСообщения.Обычная);
	ПараметрыПисьма.Вставить("ТипТекста", 			Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", 	Ложь);
	ПараметрыПисьма.Вставить("УведомитьОДоставке", 	Ложь);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
	ПараметрыПисьма.Вставить("Кому", 				Кому);
	ПараметрыПисьма.Вставить("Автоматически", 		Истина);
	Попытка	
		ПисьмоОтправлено = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	Исключение
		СообщениеОтправки = ОписаниеОшибки();
		ПисьмоОтправлено = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(ПисьмоОтправлено) Тогда
		СообщениеОтправки = "Отправлено письмо:" + Символы.ПС + "Кому: " + Кому + Символы.ПС;
		УровеньЖР = УровеньЖурналаРегистрации.Примечание;
		ЗаписьЖурналаРегистрации("Автоматическая отправка электронного письма", УровеньЖР, , ,СообщениеОтправки,);
		Возврат Истина;
	Иначе
		СообщениеОтправки = СообщениеОтправки + "Не удалось автоматически отправить письмо об отказе выполнения задачи.";
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;		
		ЗаписьЖурналаРегистрации("Автоматическая отправка электронного письма", УровеньЖР, , ,СообщениеОтправки,);
		Возврат Ложь;
	КонецЕсли;
КонецФункции

#КонецОбласти
 
 
#Область РегламентноеЗадание
Функция ПолучитьТаблицуПользователейиАдресовЭП() Экспорт
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	 Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.Scan_EmailПользователяДляСогласованияДокументовПоЭлектроннойПочте);
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПользователиКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	                |	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
	                |	ПользователиКонтактнаяИнформация.Ссылка.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	                |ИЗ
	                |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	                |ГДЕ
	                |	НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления
	                |	И ПользователиКонтактнаяИнформация.Тип = &ТипКИ
	                |	И ПользователиКонтактнаяИнформация.Вид = &ВидКИ";
	 
	ТаблицаПользователейиАдресовЭП = Запрос.Выполнить().Выгрузить();;
	Возврат ТаблицаПользователейиАдресовЭП;	
КонецФункции


Процедура ВКолонкеОтправителяОставитьТолькоАдресЭлектроннойПочты(ТаблицаСообщений) Экспорт
	Для Каждого СтрокаЭлПисьма из ТаблицаСообщений Цикл
		СтрокаЭлПисьма.Отправитель = стрЗаменить(СтрокаЭлПисьма.Отправитель,">","");
		МассивОтправителей = СтрРазделить(СтрокаЭлПисьма.Отправитель,"<");
		Для Каждого ЭлементМассива из МассивОтправителей Цикл
			Если СтрНайти(ЭлементМассива, "@") > 0 тогда
				СтрокаЭлПисьма.Отправитель = ЭлементМассива;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ОбработатьПисьмаДляСогласования(УчетнаяЗапись, ТаблицаСообщений, ТаблицаПользователейиАдресовЭП) Экспорт 
	МассивИдентификаторовОбработанныхПисем = Новый Массив;
	ТекстОтказа = "";	
	Для Каждого СтрокаСообщения из ТаблицаСообщений Цикл
		ОбработатьПисьмоДляСогласования(СтрокаСообщения, ТаблицаПользователейиАдресовЭП, ТекстОтказа, МассивИдентификаторовОбработанныхПисем);
		Если ЗначениеЗаполнено(ТекстОтказа) тогда
			ТемаОтказа = СтрЗаменить(СтрокаСообщения.Тема, "Re: Согласовать:", "");
			ТемаОтказа = "Ошибка согласования:" + ТемаОтказа;
			ПисьмоОтправлено = ОтправитьПисьмоОтказВыполненияЗадачи(УчетнаяЗапись, СтрокаСообщения.Отправитель, ТемаОтказа, ТекстОтказа);
			Если ПисьмоОтправлено тогда
				МассивИдентификаторовОбработанныхПисем.Добавить(СтрокаСообщения.Идентификатор[0]);
			КонецЕсли;  
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИдентификаторовОбработанныхПисем;
КонецФункции

Процедура ОбработатьПисьмоДляСогласования(СтрокаСообщения, ТаблицаПользователейиАдресовЭП, ТекстОтказа, МассивИдентификаторовОбработанныхПисем)
		НайденнаяСтрока = ТаблицаПользователейиАдресовЭП.Найти(СтрокаСообщения.Отправитель, "АдресЭП");
		Если НайденнаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Исполнитель = НайденнаяСтрока.Пользователь;
		КодЯзыкаПользователя = ПолучитьКодЯзыкаПользователя(НайденнаяСтрока.ИдентификаторПользователяИБ);
		
		ТекстСообщения = ПолучитьТекстСообщения(СтрокаСообщения.Тексты);
		
		Если НЕ ЗначениеЗаполнено(ТекстСообщения) тогда
			ТекстОтказа = НСтр("ru = 'Ошибка чтения текста письма.'; 
			|en = 'Error reading message text.'", КодЯзыкаПользователя);
			Возврат;
		КонецЕсли;	
		
		
		Если НЕ ТекстПисьмаСоответствуетТребованиям(ТекстСообщения) тогда
			ТекстОтказа = НСтр("ru = 'Ответ отвергнут так как содержимое письма не соответствует формату.';
			|en = 'The answer is rejected because the content of the letter does not match the format.'", КодЯзыкаПользователя);
			Возврат;
		КонецЕсли;
		
		РезультатСогласования = ПрочитатьРезультатСогласования(ТекстСообщения);
		Если НЕ ЗначениеЗаполнено(РезультатСогласования) тогда
			ТекстОтказа = НСтр("ru = 'Ошибка чтения результата согласования.'; 
								|en = 'Error reading message text.'", КодЯзыкаПользователя);
			Возврат;
		КонецЕсли;
		СтруктураПисьма = СформироватьСтруктуруПочтовогоПисьма(); 
		СтруктураПисьма.РезультатСогласования = РезультатСогласования;
		Если НЕ ЗначениеЗаполнено(СтруктураПисьма.РезультатСогласования) Тогда 
			ТекстОтказа = НСтр("ru = 'Ошибка чтения результата согласования.'; 
								|en = 'Error reading message text.'", КодЯзыкаПользователя);
			Возврат;
		КонецЕсли;
		
		
		НомерЗадачи = ПрочитатьНомерЗадачи(ТекстСообщения);
		НомерПредметаЗадачи = ПрочитатьНомерПредметаЗадачи(ТекстСообщения);
		ЗадачаССылка = ПолучитьЗадачу(НомерЗадачи, НомерПредметаЗадачи);
		Если НЕ ЗначениеЗаполнено(ЗадачаССылка) Тогда
			ТекстОтказа = НСтр("ru = 'Задача НЕ найдена.'; 
								|en = 'Task NOT found.'", КодЯзыкаПользователя);
			Возврат;
		КонецЕсли;
		
		СтруктураПисьма.Задача = ЗадачаССылка;
		Если ЗадачаССылка.Выполнена тогда
			ТекстОтказа = НСтр("ru = 'Ответ отвергнут так как задача уже выполнена.';
			|en = 'The answer is rejected because the task has already been completed.'", КодЯзыкаПользователя);
			Возврат;
		КонецЕсли;
		
		Отказ = Ложь;
		НачатьТранзакцию();
		КомментарийПисьма = ПолучитьКомментарийПисьма(ТекстСообщения);
		ТекстКомментария = НСтр("ru = 'Согласовано по почте.';
								|en = 'Agreed by mail.'", КодЯзыкаПользователя);
		СтруктураПисьма.Комментарий  = ТекстКомментария + Символы.ПС +КомментарийПисьма;
		ОбработатьВложенияПисьма(ЗадачаССылка, СтрокаСообщения, СтруктураПисьма);	
		ЗадачаОбъект = ЗадачаССылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ЗадачаОбъект.РезультатВыполнения) тогда
			ЗадачаОбъект.РезультатВыполнения = ЗадачаОбъект.РезультатВыполнения + Символы.ПС + СтруктураПисьма.Комментарий;
		Иначе
			ЗадачаОбъект.РезультатВыполнения = СтруктураПисьма.Комментарий;
		КонецЕсли;
		Если ЗадачаОбъект.Исполнитель <> Исполнитель тогда
			ЗадачаОбъект.Исполнитель = Исполнитель;
		КонецЕсли;
		Попытка
			ЗадачаОбъект.Записать();
		Исключение
			ТаблицаСообщений = ПолучитьСообщенияПользователю(Истина);
			ТекстОтказа = НСтр("ru = 'Ошибка обработки задачи: ';
									|en = 'Task processing error: '", КодЯзыкаПользователя);
			ТекстОтказа = ТекстОтказа + ЗадачаССылка;
			Для Каждого СообщениеОшибка из ТаблицаСообщений Цикл
				ТекстОтказа = ТекстОтказа + Символы.ПС + СообщениеОшибка.Текст;
			КонецЦикла;
			
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		
		Если НЕ Отказ тогда
			БизнесПроцессы.Scan_Согласование.УстановитьРезультатСогласования(ЗадачаССылка, СтруктураПисьма.РезультатСогласования, Отказ);
			Если Отказ тогда
				ТаблицаСообщений = ПолучитьСообщенияПользователю(Истина);
				ТекстОтказа = НСтр("ru = 'Ошибка обработки задачи: ';
									|en = 'Task processing error: '", КодЯзыкаПользователя);
				ТекстОтказа = ТекстОтказа + ЗадачаССылка;
				Для Каждого СообщениеОшибка из ТаблицаСообщений Цикл
					ТекстОтказа = ТекстОтказа + Символы.ПС + СообщениеОшибка.Текст;
				КонецЦикла;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ тогда
			СогласованиеОбъект = СтруктураПисьма.Задача.БизнесПроцесс.ПолучитьОбъект();
			НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(СтруктураПисьма.Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока.РезультатСогласования = СтруктураПисьма.РезультатСогласования Тогда
				МассивИдентификаторовОбработанныхПисем.Добавить(СтрокаСообщения.Идентификатор[0]);
			Иначе	
				ТаблицаСообщений = ПолучитьСообщенияПользователю(Истина);
				ТекстОтказа = НСтр("ru = 'Ошибка обработки задачи: ';
				|en = 'Task processing error: '", КодЯзыкаПользователя);
				ТекстОтказа = ТекстОтказа + ЗадачаССылка;
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
КонецПроцедуры

Функция ПолучитьКодЯзыкаПользователя(ИдентификаторПользователя)
	ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователя);
	КодЯзыка = Метаданные.Языки.Найти(ПрочитанныеСвойства.Язык).КодЯзыка;
	
	Если НЕ ЗначениеЗаполнено(КодЯзыка) тогда
		КодЯзыка = "ru";
	КонецЕсли;
	
	Возврат КодЯзыка;
КонецФункции

Функция ПолучитьАвтораПисьма(АдресЭП)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура УстановитьПисьмамПризнакПрочитано(УчетнаяЗапись, МассивИдентификаторовПисем) Экспорт 
	Если Не ЗначениеЗаполнено(МассивИдентификаторовПисем) тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ЗаголовкиИдентификаторы", МассивИдентификаторовПисем);
	
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Протокол = ПротоколИнтернетПочты.IMAP;
	
	СоединениеДляУстановкиПризнакаПрочитан = Новый ИнтернетПочта;
	СоединениеДляУстановкиПризнакаПрочитан.Подключиться(Профиль, Протокол);
	АвтоматическиУдалятьСообщенияПриВыбореССервера = Ложь;
	ОтмечатьКакПрочтенные = Истина;
	НаборПисем = СоединениеДляУстановкиПризнакаПрочитан.Выбрать(АвтоматическиУдалятьСообщенияПриВыбореССервера, МассивИдентификаторовПисем, ОтмечатьКакПрочтенные);
	СоединениеДляУстановкиПризнакаПрочитан.Отключиться();
КонецПроцедуры

Процедура ОбработатьВложенияПисьма(ЗадачаСсылка, СтрокаПисьма, СтруктураПисьма)
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "Предмет");
	
	// rarus agar 26.05.2021 16927 ++
	ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(РеквизитыЗадачи.Предмет, Истина);
	Если ИменаСправочников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// rarus agar 26.05.2021 16927 --
	
	МассивИменПрисоединненныхФайлов = Новый Массив;
	Для Каждого Вложение из СтрокаПисьма.Вложения цикл
		
		Если ТипЗнч(Вложение.Значение) <> Тип("ДвоичныеДанные") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Вложение.Ключ, "_");
		
		ПутьКФайлу = КаталогВременныхФайлов() + "\" + ИмяФайла;
		Файл = Новый Файл(ПутьКФайлу);
		
		ДвоичныеДанные = Вложение.Значение;
		ДвоичныеДанные.Записать(ПутьКФайлу);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор",                       ПолучитьАвтораПисьма(СтрокаПисьма.Отправитель));
		ПараметрыФайла.Вставить("ВладелецФайлов",              РеквизитыЗадачи.Предмет);
		ПараметрыФайла.Вставить("ИмяБезРасширения",            Файл.Имя);
		ПараметрыФайла.Вставить("РасширениеБезТочки",          Файл.Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", "");
		
		
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ОписаниеФайла = "Получен по почте при согласовании задачи [" + ЗадачаССылка.Номер + "]";
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла,,ОписаниеФайла);
		
		УдалитьФайлы(ПутьКФайлу);
		
		МассивИменПрисоединненныхФайлов.Добавить(Файл.Имя);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивИменПрисоединненныхФайлов) тогда
		СтрокаИменФайлов = СтрСоединить(МассивИменПрисоединненныхФайлов, ",");
		Если Не ЗначениеЗаполнено(СтруктураПисьма.Комментарий) тогда
			СтруктураПисьма.Комментарий = "";
		Иначе
			СтруктураПисьма.Комментарий = СтруктураПисьма.Комментарий + Символы.ПС;
		КонецЕсли;
		СтруктураПисьма.Комментарий = СтруктураПисьма.Комментарий + "Письмо содержало следующие файлы: [ "+ СтрокаИменФайлов + "]. Файлы прикреплены к предмету задачи.";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСТекстомПисьма

Функция ПолучитьТекстСообщения(Тексты)
	ТекстСообщения_HTML = Неопределено;
	ТекстСообщения_ПростойТекст = Неопределено;
	Для Каждого ТекстСообщения из Тексты цикл
		ТипТекста = ТекстСообщения.Получить("ТипТекста");
		Если ТипТекста = "ПростойТекст" тогда
			ТекстСообщения_ПростойТекст = ТекстСообщения.Получить("Текст");
		ИначеЕсли ТипТекста = "HTML" тогда
			HTMLДокумент = ТекстСообщения.Получить("Текст");
			ТекстСообщения_HTML = Scan_Взаимодействия.ПолучитьОбычныйТекстИзHTML(HTMLДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщения_HTML) тогда
		ТекстСообщения = ТекстСообщения_HTML;
	Иначе
		ТекстСообщения = ТекстСообщения_ПростойТекст;
	КонецЕсли;

	Возврат ТекстСообщения;
КонецФункции

Функция ПрочитатьРезультатСогласования(Знач ТекстСообщения)
	
	Префикс = Врег("Результат согласования:");
	РезультатСогласования = ПрочитатьИзТекстаЗначениеВРегБезПробелов(ТекстСообщения, Префикс);
	
	Если РезультатСогласования = Врег("Согласовано") тогда
		РезультатСогласования = Перечисления.Scan_РезультатыСогласования.Согласовано;
	ИначеЕсли РезультатСогласования = Врег("СогласованоСЗамечаниями") тогда
		РезультатСогласования = Перечисления.Scan_РезультатыСогласования.СогласованоСЗамечаниями;
	ИначеЕсли РезультатСогласования = Врег("Отказано") тогда
		РезультатСогласования = Перечисления.Scan_РезультатыСогласования.НеСогласовано;
	КонецЕсли;
	
	Возврат РезультатСогласования;
КонецФункции	

Функция ПрочитатьНомерЗадачи(Знач ТекстСообщения)
	Префикс = Врег("Номер задачи:");
	НомерЗадачи = ПрочитатьИзТекстаЗначениеВРегБезПробелов(ТекстСообщения, Префикс);
	Возврат НомерЗадачи;
КонецФункции

Функция ПрочитатьНомерПредметаЗадачи(Знач ТекстСообщения)
	НомерЗадачи = "";
	Префикс = Врег("Предмет задачи:");
	ТекстСообщения = Врег(ТекстСообщения);
	ТекстСообщения = Прав(ТекстСообщения, СтрДлина(ТекстСообщения) - (СтрНайти(ТекстСообщения, Префикс)-1));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, Префикс,"");
	ТекстСообщения = Лев(ТекстСообщения, СтрНайти(ТекстСообщения, ";"));
	Если ЗначениеЗаполнено(ТекстСообщения) тогда
		СтрокаСПредметомЗадачи = СокрЛП(ТекстСообщения);
		МассивПредметаЗадачи = СтрРазделить(СтрокаСПредметомЗадачи, " ");
		Если ЗначениеЗаполнено(МассивПредметаЗадачи) тогда
			// rarus tenkam 02.06.2020 mantis 16175 +++
			НайденныйИндекс = МассивПредметаЗадачи.Найти("ОТ");
			Если НайденныйИндекс <> Неопределено И НайденныйИндекс <> 0 Тогда
				НомерЗадачи = МассивПредметаЗадачи[НайденныйИндекс-1];
			КонецЕсли;
			//НомерЗадачи = МассивПредметаЗадачи[3]; 
			// rarus tenkam 02.06.2020 mantis 16175 ---
		КонецЕсли;
	КонецЕсли;
	Возврат НомерЗадачи;
КонецФункции	

Функция ПрочитатьИзТекстаЗначениеВРегБезПробелов(Знач ТекстСообщения, Знач Префикс)
	Результат = "";
	
	ТекстСообщения = ВРег(ТекстСообщения);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, " ", "");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, Символы.ПС, "");
	
	Префикс = Врег(Префикс);
	Префикс = СтрЗаменить(Префикс, " ", "");
	Префикс = СтрЗаменить(Префикс, Символы.ПС, "");
	
	Если СтрНайти(ТекстСообщения, Префикс) = 0 тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстСообщения = Прав(ТекстСообщения, СтрДлина(ТекстСообщения) - (СтрНайти(ТекстСообщения, Префикс)-1));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, Префикс, "");

	Результат = Лев(ТекстСообщения, СтрНайти(ТекстСообщения, ";"));
	Результат = СтрЗаменить(Результат,";","");	
	Возврат Результат;
КонецФункции	

Функция СформироватьСтруктуруПочтовогоПисьма()
	СтруктураПочтовогоСообщения = Новый Структура;
	СтруктураПочтовогоСообщения.Вставить("РезультатСогласования");
	СтруктураПочтовогоСообщения.Вставить("Задача");
	СтруктураПочтовогоСообщения.Вставить("Комментарий");
	Возврат СтруктураПочтовогоСообщения;
КонецФункции

Функция ТекстПисьмаСоответствуетТребованиям(ТекстСообщения)
		Если СтрНайти(ТекстСообщения, "Результат согласования")
			И СтрНайти(ТекстСообщения, "Номер задачи")
			И (СтрНайти(ТекстСообщения, " Предмет") или СтрНайти(ТекстСообщения, "Предмет"))
			Тогда
			Возврат Истина;
		Иначе	
			Возврат Ложь;
		КонецЕсли;
КонецФункции

Функция ПолучитьЗадачу(НомерЗадачи, НомерПредмета)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерЗадачи", НомерЗадачи);
	Запрос.УстановитьПараметр("НомерПредмета",НомерПредмета); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.Номер = &НомерЗадачи
	               |	И ЗадачаИсполнителя.Предмет.Номер = &НомерПредмета";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьКомментарийПисьма(ТекстСообщения)
	ПозицияКомментария = СтрНайти(ТекстСообщения,"Комментарий:"); 
	ТекстСтрокБезКомментария = Лев(ТекстСообщения,ПозицияКомментария + 11);
	СтрокаКомментария = СтрЗаменить(ТекстСообщения,ТекстСтрокБезКомментария, "");
	Возврат СокрЛП(СтрокаКомментария);
КонецФункции

#КонецОбласти

//rarus BProg_Gladkov 10.01.2020 0015117 ---