//rarus tenkam mantis 6897 ++
////////////////////////////////////////////////////////////////////////////////
// РАЗБОР ОТВЕТОВ ВЕБ-СЕРВИСОВ СКАНИИ НАЧАЛО

// ЕДИНЫЕ ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ РАЗБОРА ОТВЕТОВ
Функция ПолучитьСтруктуруРеквизитов(ТекОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS = "", СообщениеОбОшибке = "") Экспорт	// rarus tenkam 25.03.2019 mantis 13629 + (добавлена СообщениеОбОшибке)
	
	МассивРеквизитов = ПолучитьМассивРеквизитов(ИмяМетодаWS);

	СтруктураРеквизитов = Новый Структура();
	Для Каждого СтруктураТекРеквизита Из МассивРеквизитов Цикл
		НовоеЗначение = Scan_ВебСервисы.ПрочитатьЗначениеРеквизитаИзXDTO(ТекОбъект, СтруктураТекРеквизита, ИмяСобытияЖурналаРегистрации, Отказ);
		Если Отказ Тогда
			// rarus tenkam 25.03.209 mantis 13629 +++
			//СообщениеОбОшибке = "Не удалось прочитать значение реквизита <"+СтруктураТекРеквизита.ИмяРекв+">. См. журнал регистрации";
			СообщениеОбОшибке = СообщениеОбОшибке + "Не удалось прочитать значение реквизита <"+СтруктураТекРеквизита.ИмяРекв+">.";
			// rarus tenkam 25.03.2019 mantis 13629 ---
			Возврат Неопределено;	
		КонецЕсли;		
		СтруктураРеквизитов.Вставить(СтруктураТекРеквизита.ИмяРекв, НовоеЗначение);
	КонецЦикла;
	Возврат СтруктураРеквизитов;
КонецФункции

Функция ПолучитьМассивРеквизитов(ИмяМетодаWS = "") Экспорт
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Наименование", "Наименование", "Строка", Ложь)); 
	МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "IDExternalSystem", "GUID", "Строка", Ложь)); 
	
	Если ИмяМетодаWS = "GetProductType" ИЛИ ИмяМетодаWS = "GetListOfProductType"Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ГруппаПродукта", "Группа", "ОбъектXDTO", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеАнглийское", "НаименованиеАнглийское", "Строка", Ложь)); //rarus bonmak 04.09.2019 14442
	ИначеЕсли ИмяМетодаWS = "GetProductModel" ИЛИ ИмяМетодаWS = "GetListOfProductModel"Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "МаркаПродукта", "Марка", "ОбъектXDTO", Ложь));	
	ИначеЕсли ИмяМетодаWS = "GetProductSubType" ИЛИ ИмяМетодаWS = "GetListOfProductSubType" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ВидПродукта", "ВидПродукта", "ОбъектXDTO", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Родитель", "Родитель", "ОбъектXDTO", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеАнглийское", "АнглийскоеНаименование", "Строка", Ложь));
	ИначеЕсли ИмяМетодаWS = "GetProductModel" ИЛИ ИмяМетодаWS = "GetListOfProductModel" Тогда 
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "МаркаПродукта", "Марка", "ОбъектXDTO", Ложь));
	// rarus tenkam 09.09.2019 mantis 14841 +++	
	ИначеЕсли ИмяМетодаWS = "GetSpecification" ИЛИ ИмяМетодаWS = "GetListOfSpecifications" ИЛИ ИмяМетодаWS = "GetSpecificationVersion" Тогда //rarus bonmak 24.09.2019 14177 ++ //rarus bonmak 20.03.2020 14177 добавил третье "или"
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ВидСпецификации", "ВидСпецификации", "ОбъектXDTO", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Изделие", "Продукт", "ОбъектXDTO", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Опции", "Опции", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаСоздания", "ДатаСоздания", "Дата", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ВерсияСпецификации", "ВерсияСпецификации", "Число", Ложь)); //rarus bonmak 20.03.2020 14177 
		//rarus bonmak 24.09.2019 14177 --
		// rarus tenkam 09.09.2019 mantis 14841 ---	
			
	ИначеЕсли ИмяМетодаWS = "GetProduct" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "МаркаПродукта", "Марка", "ОбъектXDTO", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ТипПродукта", "ТипПродукта", "ОбъектXDTO", Ложь));
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ТипПродуктаМаркетинговый", "ТипМаркетинговый", "ОбъектXDTO", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Изделие", "Предмет", "ОбъектXDTO", Ложь));
		//ДОДЕЛАТЬ: нет данных
	//rarus bonmak 15.04.2020 14456 ++
	//ИначеЕсли ИмяМетодаWS = "GetDealers" ИЛИ ИмяМетодаWS = "GetListOfDealers" Тогда
	//	// rarus tenkam 16.04.2020 mantis 15797 +++
	//	//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "КодДилера", "КодДилера", "Строка", Ложь));
	//	МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "КодДилера", "КодДилера", "Число", Ложь));
	//	// rarus tenkam 16.04.2020 mantis 15797 ---
	//	//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "КодДилераSOWA", "КодДилераSOWA", "Строка", Ложь));  	
	//	//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Контрагент", "Контрагент", "ОбъектXDTO", Ложь)); 	
	//rarus bonmak 15.04.2020 14456 --	
	ИначеЕсли ИмяМетодаWS = "GetContragents" ИЛИ ИмяМетодаWS = "GetListOfContragents" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ИНН", "ИНН", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеПолное", "НаименованиеПолное", "Строка", Ложь));  	
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "КПП", "КПП", "Строка", Ложь)); //rarus bonmak 15.04.2020 14456
		//ДОДЕЛАТЬ: нет данных
	//ИначеЕсли ИмяМетодаWS = "GetContragents" ИЛИ ИмяМетодаWS = "GetListOfContragents" Тогда //rarus bonmak 15.04.2020 14456 
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "МаркаПродукта", "Марка", "ОбъектXDTO", Ложь));
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Контрагент", "Контрагент", "ОбъектXDTO", Ложь));  	
		//
		
	ИначеЕсли ИмяМетодаWS = "GetChassis" ИЛИ ИмяМетодаWS = "GetListOfChassis" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НомерИзделия", "Шасси", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "МаркаПродукта", "Марка", "ОбъектXDTO", Ложь));
		//ДОДЕЛАТЬ: нет данных
		
	ИначеЕсли ИмяМетодаWS = "GetEngines" ИЛИ ИмяМетодаWS = "GetListOfEngines" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НомерИзделия", "НомерДвигателя", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "МаркаПродукта", "Марка", "ОбъектXDTO", Ложь));
		//ДОДЕЛАТЬ: нет данных
	ИначеЕсли ИмяМетодаWS = "GetListOfSOP" ИЛИ ИмяМетодаWS = "GetSOP" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НомерДоговора", "НомерДоговора", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаНачала", "Дата", "Дата", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Дилер", "Дилер", "ОбъектXDTO", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Продукты", "Продукты", "ОбъектXDTO", Ложь));
	ИначеЕсли ИмяМетодаWS = "GetOrderToDelivery" ИЛИ ИмяМетодаWS = "GetListOfOrderToDelivery" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Наименование", "НомерЗаказа", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Продукт", "Продукт", "ОбъектXDTO", Ложь));
		//rarus tenkam 09.01.2018 mantis 11952 +++	
	ИначеЕсли ИмяМетодаWS = "StoreInfo" Тогда
		МассивРеквизитов.Очистить();
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеСклада", "StoreName", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Всего", "TotalQty", "Число", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Зарезервировано", "ReservedQty", "Число", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Остаток", "FreeQty", "Число", Ложь));
		//rarus tenkam 09.01.2018 mantis 11952 ---
		// rarus tenkam 25.04.2019 mantis 14223 +++	
	ИначеЕсли ИмяМетодаWS = "GetListOfStatuses" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "СтатусCOW", "ДополнительныйКод", "Число", Ложь));
		// rarus tenkam 25.04.2019 mantis 14223 ---
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "КодСтатуса", "Код", "Число", Ложь));	// rarus tenkam 13.09.2019 mantis 14576 +
		
	ИначеЕсли ИмяМетодаWS = "GetAdditionalProperty" Тогда //rarus bonmak 04.09.2019 14442 ++
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ТипДопРеквизита1БД", "ТипДанных", "СписокXDTO", Истина));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ПредметДопРеквизита1БД", "ПринадлежностьКОбъекту", "СписокXDTO", Истина));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Важность", "Важность", "СписокXDTO", Истина)); //rarus vikhle 11.10.2021 m 18270
		//rarus bonmak 04.09.2019 14442 --
	ИначеЕсли ИмяМетодаWS = "GetProductMark" ИЛИ ИмяМетодаWS = "GetListOfProductMark"Тогда //rarus bonmak 04.09.2019 14442 ++
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеАнглийское", "НаименованиеАнглийское", "Строка", Ложь)); 	
		//rarus bonmak 04.09.2019 14442 --
	ИначеЕсли ИмяМетодаWS = "GetListOfOptions" Тогда //rarus bonmak 08.10.2019 14177 ++
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Код", "Код", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеАнглийское", "НаименованиеАнглийскоеОпции", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ИспользуетсяНаРынкеРФ", "ИспользуетсяНаРынкеРФ", "Булево", Ложь));
		//rarus bonmak 08.10.2019 14177 --
		// rarus agar 25.01.2022 18594 ++
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ВидПродукта", "ВидПродукта", "ОбъектXDTO", Ложь));
		// rarus agar 25.01.2022 18594 --
	ИначеЕсли ИмяМетодаWS = "GetListOfRegions" Тогда //rarus bonmak 07.01.2021 16625 ++
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеАнглийское", "НаименованиеАнглийское", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ФедеральныйОкруг", "ФедеральныйОкруг", "ОбъектXDTO", Ложь));
		//rarus bonmak 07.01.2021 16625 --
	ИначеЕсли ИмяМетодаWS = "GetListOfOptionsГруппа" Тогда //rarus bonmak 08.10.2019 14177 ++	
		//используется для создания группы
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "IDExternalSystem", "GUIDСемействаОпций", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Код", "КодСемействаОпций", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Наименование", "НаименованиеСемействаОпций", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеАнглийское", "НаименованиеАнглийскоеСемействаОпций", "Строка", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ИспользоватьВСпецификации", "ИспользоватьВСпецификации", "Булево", Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ОсновнаяОпция", "ОсновнаяОпция", "Булево", Ложь));
		//rarus bonmak 08.10.2019 14177 --
	ИначеЕсли ИмяМетодаWS = "GetListOfCompanyType" Тогда //rarus  18.02.2020 mantis 0014456 +-
		//Другие реквизиты проверять не требуется
	ИначеЕсли ИмяМетодаWS = "GetListOfCompanyGroup" Тогда //rarus  18.02.2020 mantis 0014456 +-
		//Другие реквизиты проверять не требуется
	ИначеЕсли ИмяМетодаWS = "GetListOfDealerType" Тогда //rarus  18.02.2020 mantis 0014456 +-
		//Другие реквизиты проверять не требуется
	ИначеЕсли ИмяМетодаWS = "GetListOfCooperationType" Тогда //rarus  18.02.2020 mantis 0014456 +-
		//Другие реквизиты проверять не требуется
	ИначеЕсли ИмяМетодаWS = "GetListOfSpecificationViewType" Тогда //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеАнглийское", 	"НаименованиеАнглийское", 	"Строка", 	Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Описание", 				"Описание", 				"Строка", 	Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаИзмененияВ1БД", 		"ДатаИзменения", 			"Дата", 	Ложь));
	ИначеЕсли ИмяМетодаWS = "GetListOfSpecificationView" Тогда	//rarus BProg_Dekin 17.03.2020 mantis 0014177 +-
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаСоздания1БД", 			"ДатаСоздания", 				"Дата", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ВидПродукта", 				"ВидПродукта", 					"ОбъектXDTO", 	Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ВидПредставления", 		"ВидПредставленияСпецификации", "ОбъектXDTO", 	Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаНачалаДействия", 		"ДатаНачалаДействия", 			"Дата", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаОкончанияДействия", 	"ДатаОкончанияДействия", 		"Дата", 		Ложь));
	ИначеЕсли ИмяМетодаWS = "GetSpecificationView" Тогда	//rarus BProg_Dekin 17.03.2020 mantis 0014177 +-
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеАнглийское", 	"НаименованиеАнглийское", 	"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НаименованиеSport", 		"НаименованиеАнглийское", 	"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Описание", 				"Описание", 				"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаИзмененияВ1БД", 		"ДатаИзменения", 			"Дата", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Номер", 					"Номер", 					"Число", 		Ложь));
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДочерняяГруппаОпций", 		"ДочерняяГруппаОпций", 		"СписокXDTO", 	Ложь));
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "СписокОпций", 				"СписокОпций", 				"СписокXDTO", 	Ложь));
		//rarus ozhnik 15888 10.06.2020 + 	
	ИначеЕсли ИмяМетодаWS = "GetListOfProductTypeSPORT" Тогда 
		
	ИначеЕсли ИмяМетодаWS = "GetListOfQuotation" Тогда 
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НомерКП", 					"QuotationNumber", 				"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Наименование",				"QuotationName", 				"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаСозданияКПSPORT", 		"CreationDate", 				"Дата", 		Ложь));
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Статус",			 		"QuotationStatus", 				"ОбъектXDTO", 	Ложь));
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Дилер", 					"Organization", 				"ОбъектXDTO", 		Ложь));
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Клиент", 					"Customer",		 				"ОбъектXDTO", 		Ложь));
				
	ИначеЕсли ИмяМетодаWS = "GetQuotation" Тогда 
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НомерКП", 					"QuotationNumber", 				"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Наименование",				"QuotationName", 				"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ДатаСозданияКПSPORT", 		"CreationDate", 				"Дата", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "СтатусКП",			 		"QuotationStatus", 				"ОбъектXDTO", 	Ложь)); 
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "PublicQKEY",			 	"PublicQKEY", 					"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Описание",			 		"Description", 					"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "СписокПродуктов",	 		"ProductList",	 				"ОбъектXDTO", 	Ложь));
		//rarus ozhnik 15888 10.06.2020 -
	//ИначеЕсли ИмяМетодаWS = "GetTaskOfExecution" Тогда  //rarus bonmak 18.05.2020 14375 ++
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ВидСобытия", 					"ТипЗадачи", 				"ОбъектXDTO", 		Ложь));
		//МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Накладная",				    "Накладная", 				"ОбъектXDTO", 		Ложь));
		//rarus bonmak 18.05.2020 14375 --
	// rarus agar 12.08.2021 17205 ++
	ИначеЕсли ИмяМетодаWS = "GetEPTS" Тогда
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "НомерЭПТС",				"НомерЭПТС", 				"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "СтатусЭПТС",			 		"Статус", 				"ОбъектXDTO", 	Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ТранспортноеСредство",			 		"ТранспортноеСредство", 				"ОбъектXDTO", 	Ложь));
	ИначеЕсли ИмяМетодаWS = "GetEPTSstatement" Тогда
		МассивРеквизитов.Очистить();
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Наименование",				"ИмяФайла", 				"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "ТипФайла",				"ТипФайла", 				"Строка", 		Ложь));
		МассивРеквизитов.Добавить(Новый Структура("ИмяРекв, ИмяXML, ТипРекв, ВПопытке", "Файл",			 		"File", 				"ДвоичныеДанные", 	Ложь));
	// rarus agar 12.08.2021 17205 --
	КонецЕсли;
	
	Возврат МассивРеквизитов;
КонецФункции

Функция СформироватьСообщениеИзМассива(ТекМассив) Экспорт
	ТекстСообщения = "";
	Для Каждого СтрокаМассива Из ТекМассив Цикл
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = СтрокаМассива.Текст;
		Иначе
			ТекстСообщения = ТекстСообщения + "; " + СтрокаМассива.Текст;
		КонецЕсли
	КонецЦикла;
	Возврат ТекстСообщения;
КонецФункции

// rarus tenkam 25.04.2019 mantis 14327 +++
Функция ПолучитьСоответствиеДополнительныеХарактеристики(ТекДанные) Экспорт
	Если ТипЗнч(ТекДанные) = Тип("СправочникОбъект.Scan_ЗаказыНаЗавод") ИЛИ
		ТипЗнч(ТекДанные) = Тип("СправочникОбъект.Scan_Изделия") Тогда
		ТекСсылка = ТекДанные.Ссылка;
	Иначе
		ТекСсылка = ТекДанные;
	КонецЕсли;
		
	ТекСоответствие = Новый Соответствие;
	Если ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.Scan_ЗаказыНаЗавод") Тогда
		
		ТекСоответствие.Вставить(Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.MarketChange, 
									Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(ТекСсылка,Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.MarketChange));
		ТекСоответствие.Вставить(Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент, 
									Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(ТекСсылка,Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент));
		// rarus tenkam 13.05.2019 mantis 14226 +++
		ТекСоответствие.Вставить(Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод, 
									Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(ТекСсылка,Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод));
									
		//ТекСоответствие.Вставить(Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.СтатусЗаказаЛокальный, 
									//Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(ТекСсылка,Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.СтатусЗаказаЛокальный)); //rarus bonmak 15.08.2019 14576 поменял на СтатусЗаказаЛокальный статусы формируются на нашей стороне							
		// rarus tenkam 13.05.2019 mantis 14226 ---
		// rarus tenkam 23.05.2019 mantis 14312 +++
		ТекСоответствие.Вставить(Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.PartPeriod, 
									Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(ТекСсылка,Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.PartPeriod));							
		// rarus tenkam 23.05.2019 mantis 14312 ---
		//rarus bonmak 04.07.2019 14301 ++
		ТекСоответствие.Вставить(Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.КомплектностьПоставки, 
									Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(ТекСсылка,Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.КомплектностьПоставки)); //rarus bonmak 30.01.2020 15575 изменил на заказ на завод
		//rarus bonmak 04.07.2019 14301 --							
	ИначеЕсли ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.Scan_Изделия") Тогда
		//rarus bonmak 04.07.2019 14301 ++
		// rarus tenkam 07.05.2019 mantis 14301 +++
		//ТекСоответствие.Вставить(Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.КомплектностьПоставки, 
									//Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(ТекСсылка,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.КомплектностьПоставки));
		// rarus tenkam 07.05.2019 mantis 14301---
		//rarus bonmak 04.07.2019 14301 --
		
	КонецЕсли;
	
	Возврат ТекСоответствие;
КонецФункции

Процедура ЗаписатьДополнительныеХарактеристики(ТекСсылка, СоответствиеДопРеквизитов, БылиИзменения = Ложь) Экспорт	// rarus tenkam 16.04.2020 mantis 15797 + БылиИзменения
	НаДату = ТекущаяДата();
	Для Каждого ТекСтрока Из СоответствиеДопРеквизитов Цикл 
		БылоХотяБыОдноИзменение = Ложь; 	// rarus tenkam 16.04.2020 mantis 15797 +
		Если ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.Scan_ЗаказыНаЗавод") Тогда
			Справочники.Scan_ЗаказыНаЗавод.ЗаписьЗначенияРегистраСведения(ТекСсылка, ТекСтрока.Значение, ТекСтрока.Ключ, НаДату, БылоХотяБыОдноИзменение);	// rarus tenkam 16.04.2020 mantis 15797 + БылоХотяБыОдноИзменение	
		ИначеЕсли ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.Scan_Изделия") Тогда
			// rarus tenkam 07.05.2019 mantis 14301 +++
			Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(ТекСсылка, ТекСтрока.Значение, ТекСтрока.Ключ, НаДату, БылоХотяБыОдноИзменение);	// rarus tenkam 16.04.2020 mantis 15797 + БылоХотяБыОдноИзменение
			// rarus tenkam 07.05.2019 mantis 14301 ---			
		КонецЕсли;
		БылиИзменения = БылиИзменения ИЛИ БылоХотяБыОдноИзменение;	// rarus tenkam 16.04.2020 mantis 15797 +
	КонецЦикла;		
КонецПроцедуры 
// rarus tenkam 25.04.2019 mantis 14327 ---

// rarus tenkam 29.05.2019 mantis 14224 +++
Функция ПолучитьСоответствиеКлючевыеДаты(ТекДанные) Экспорт
	Если ТипЗнч(ТекДанные) = Тип("СправочникОбъект.Scan_ЗаказыНаЗавод") ИЛИ
		ТипЗнч(ТекДанные) = Тип("СправочникОбъект.Scan_Изделия") Тогда
		ТекСсылка = ТекДанные.Ссылка;
	Иначе
		ТекСсылка = ТекДанные;
	КонецЕсли;
	
	ТекСоответствие = Новый Соответствие;
	Если ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.Scan_ЗаказыНаЗавод") Тогда
		ОбъектКлючевойДаты = ПредопределенноеЗначение("Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод");
		
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ADD"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ADD")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DCD"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DCD")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DDD"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DDD")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SDDate"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SDDate")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.PDD"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.PDD")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CRD"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CRD")));
		//rarus bonmak 09.08.2021 16834 ++
			//ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП"),
		//	РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП")));
		//rarus bonmak 09.08.2021 16834 --
		//rarus bonmak 30.01.2020 15575 ++
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаИнвойса"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаИнвойса")));
		//rarus bonmak 30.01.2020 15575 --
	ИначеЕсли ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.Scan_Изделия") Тогда
		ОбъектКлючевойДаты = ПредопределенноеЗначение("Перечисление.Scan_ОбъектыКлючевыхДат.Изделие");
		
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SoW"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SoW")));
		ТекСоответствие.Вставить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.WED"),
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.WED")));
		
	КонецЕсли;
	
	Возврат ТекСоответствие;
КонецФункции

Процедура ЗаписатьКлючевыеДаты(ТекСсылка, СоответствиеКлючевыеДаты, БылиИзменения = Ложь) Экспорт	// rarus tenkam 16.04.2020 mantis 15797 + БылиИзменнеия
	НаДату = ТекущаяДата();
	Для Каждого ТекСтрока Из СоответствиеКлючевыеДаты Цикл 
		БылоХотяБыОдноИзменение = Ложь; 	// rarus tenkam 16.04.2020 mantis 15797 +
		Если ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.Scan_ЗаказыНаЗавод") Тогда
			ОбъектКлючевойДаты = ПредопределенноеЗначение("Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод");
		ИначеЕсли ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.Scan_Изделия") Тогда
			ОбъектКлючевойДаты = ПредопределенноеЗначение("Перечисление.Scan_ОбъектыКлючевыхДат.Изделие");
		КонецЕсли;
		РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ТекСсылка, ОбъектКлючевойДаты, ТекСтрока.Значение, ТекСтрока.Ключ, НаДату, ,БылоХотяБыОдноИзменение);	// rarus tenkam 16.04.2020 mantis 15797 + БылоХотяБыОдноИзменение 
		БылиИзменения = БылиИзменения ИЛИ БылоХотяБыОдноИзменение;	// rarus tenkam 16.04.2020 mantis 15797 +
	КонецЦикла;		
КонецПроцедуры 
// rarus tenkam 29.05.2019 mantis 14224 ---  

// rarus tenkam 17.09.2019 mantis 14442 +++
Функция ДопРеквизитИспользуется(GUIDДопРеквизита) Экспорт
	
	//rarus bonmak 17468 23.09.2021 ++
	Если ПустаяСтрока(GUIDДопРеквизита) Тогда
		Возврат Ложь;
	КонецЕсли;
	//rarus bonmak 17468 23.09.2021 --
	
	НайденнаяСсылка = Справочники.Scan_ДополнительныеРеквизиты1БД.НайтиПоРеквизиту("IDExternalSystem", GUIDДопРеквизита);
	Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденнаяСсылка, "ИспользуетсяВOFMS"); 		
	//rarus bonmak 17468 23.09.2021 закомментировал ++	
	//Иначе
	//	// Такого доп. реквизита нет - загрузим
	//	ДопПараметры = Новый Структура("GUID", GUIDДопРеквизита);
	//	ВызватьМетод_GetAdditionalProperty(ДопПараметры);
	//rarus bonmak 17468 23.09.2021 --
	КонецЕсли;
	Возврат Ложь;		
КонецФункции
// rarus tenkam 17.09.2019 mantis 14442 ---

//// МАРКИ ПРОДУКТОВ
Функция РазборОтветаСправочникМаркиПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт
	Если ИмяМетодаWS = "GetListOfProductMark" Тогда
		//Получим все элементы из списка
		ОбъектМаркиПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.МаркиПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекМарка Из ОбъектМаркиПродуктов Цикл
			РазобратьМаркуПродукта(ТекМарка, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	ИначеЕсли ИмяМетодаWS = "GetProductMark" Тогда
		//Получим однин элемент
		ОбъектМаркаПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.МаркаПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		РазобратьМаркуПродукта(ОбъектМаркаПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
		
КонецФункции

Функция РазобратьМаркуПродукта(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetProductMark"); //rarus bonmak 04.09.2019 14442 добавил имя метода
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_МаркиПродуктов.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_МаркиПродуктов.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Если это предопределенный элемент
		Если СтруктураРеквизитов.Наименование = "Скания" Тогда
			ПредопределенноеСкания = Справочники.Scan_МаркиПродуктов.Scania;
			Если ПредопределенноеСкания.IDExternalSystem = "" Тогда
				СканияОбъект = ПредопределенноеСкания.ПолучитьОбъект();
				СканияОбъект.IDExternalSystem = СтруктураРеквизитов.IDExternalSystem;
				СканияОбъект.ДатаОбновления = ТекущаяДата();
				СканияОбъект.НаименованиеАнглийское = СтруктураРеквизитов.НаименованиеАнглийское; //rarus bonmak 04.09.2019 14442 
				СканияОбъект.Записать();
			КонецЕсли;
			Возврат ПредопределенноеСкания;
		КонецЕсли;
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники.Scan_МаркиПродуктов.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
		Если НайденныйЭлемент <> Справочники.Scan_МаркиПродуктов.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" Тогда
			//Обновим найденный элемент
			ОбъектСсылка = ОбновитьМаркуПродукта(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Иначе
		//Создадим новый элемент 
			ОбъектСсылка = СоздатьМаркуПродукта(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЕсли;
	Иначе
		ОбъектСсылка = ОбновитьМаркуПродукта(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьМаркуПродукта(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetProductMark"); //rarus bonmak 04.09.2019 14442 добавил имя метода
	
	НовыйОбъект = Справочники.Scan_МаркиПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать марку (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьМаркуПродукта(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetProductMark"); //rarus bonmak 04.09.2019 14442 добавил имя метода
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				//обработка реквизитов
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать марку (" + ЭлементСсылка + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции

//// ГРУППЫ ПРОДУКТОВ
Функция РазборОтветаСправочникГруппыПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт
	Если ИмяМетодаWS = "GetListOfProductGroup" Тогда
		//Получим все элементы из списка
		ОбъектГруппыПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ГруппыПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектГруппыПродуктов Цикл
			РазобратьГруппуПродукта(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	ИначеЕсли ИмяМетодаWS = "GetProductGroup" Тогда
		//Получим однин элемент
		ОбъектГруппаПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ГруппаПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		РазобратьГруппуПродукта(ОбъектГруппаПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
		
КонецФункции

Функция РазобратьГруппуПродукта(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ГруппыПродуктов.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_ГруппыПродуктов.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники.Scan_ГруппыПродуктов.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
		Если НайденныйЭлемент <> Справочники.Scan_ГруппыПродуктов.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" Тогда
			//Обновим найденный элемент
			ОбъектСсылка = ОбновитьГруппуПродукта(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Иначе
		//Создадим новый элемент 
			ОбъектСсылка = СоздатьГруппуПродукта(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЕсли;
	Иначе
		ОбъектСсылка = ОбновитьГруппуПродукта(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьГруппуПродукта(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов();
	
	НовыйОбъект = Справочники.Scan_ГруппыПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать группу (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьГруппуПродукта(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов();
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				//обработка реквизитов
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать группу ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);		
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции

//// ВИДЫ ПРОДУКТОВ
Функция РазборОтветаСправочникВидыПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт
	Если ИмяМетодаWS = "GetListOfProductType" Тогда
		//Получим все элементы из списка
		ОбъектВидыПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ВидыПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектВидыПродуктов Цикл
			РазобратьВидПродукта(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	ИначеЕсли ИмяМетодаWS = "GetProductType" Тогда
		//Получим однин элемент
		ОбъектВидПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ВидПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		РазобратьВидПродукта(ОбъектВидПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
		
КонецФункции

Функция РазобратьВидПродукта(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetProductType");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;

	НайденныйЭлемент = Справочники.Scan_ВидыПродуктов.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_ВидыПродуктов.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники.Scan_ВидыПродуктов.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
		Если НайденныйЭлемент <> Справочники.Scan_ВидыПродуктов.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" И НЕ НайденныйЭлемент.ЭтоГруппа Тогда
			//Обновим найденный элемент
			ОбъектСсылка = ОбновитьВидПродукта(НайденныйЭлемент, XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Иначе
		//Создадим новый элемент 
			ОбъектСсылка = СоздатьВидПродукта(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЕсли;
	Иначе
		ОбъектСсылка = ОбновитьВидПродукта(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьВидПродукта(XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetProductType");
	
	НовыйОбъект = Справочники.Scan_ВидыПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		Если ТекРеквизит.ИмяРекв = "ГруппаПродукта" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				ЗначениеРеквизита = Справочники.Scan_ГруппыПродуктов.ПустаяСсылка();
			Иначе
				// rarus tenkam 04.10.2019 mantis 14442 +++
				//Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв].Наименование = "Прицепная техника" Тогда
				//	ЗначениеРеквизита = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства;
				//	НовыйОбъект.Родитель = Справочники.Scan_ВидыПродуктов.ПрицепнаяТехника;
				//Иначе
				// rarus tenkam 04.10.2019 mantis 14442 ---
					ЗначениеРеквизита = РазобратьГруппуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
				//КонецЕсли;	// rarus tenkam 04.10.2019 mantis 14442 +	
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	////Получим "Модель"
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("ВидПродукта", ВидXDTO);
	//ИмяМетодаНовое = "GetListOfProductModel";
	//ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
	//ТекЭлементЗапрос = Scan_ВебСервисы.СформироватьСообщениеОбмена(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации); 
	//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации, ТекЭлементЗапрос);
	//
		
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать вид  (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьВидПродукта(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetProductType");
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "ГруппаПродукта" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				ЗначениеРеквизита = Справочники.Scan_ГруппыПродуктов.ПустаяСсылка();
			Иначе
				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв].Наименование = "Прицепная техника" Тогда
					ЗначениеРеквизита = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства;
				Иначе
					ЗначениеРеквизита = РазобратьГруппуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;

		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			
			Если ТекРеквизит.ИмяРекв = "ГруппаПродукта" Тогда
				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
					ЗначениеРеквизита = Справочники.Scan_ГруппыПродуктов.ПустаяСсылка();	
				Иначе
					// rarus tenkam 04.10.2019 mantis 14442 +++
					//Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв].Наименование = "Прицепная техника" Тогда
					//	ЗначениеРеквизита = Справочники.Scan_ГруппыПродуктов.ТранспортныеСредства;
					//	ТекОбъект.Родитель = Справочники.Scan_ВидыПродуктов.ПрицепнаяТехника;
					//Иначе
					// rarus tenkam 04.10.2019 mantis 14442 ---
					ЗначениеРеквизита = РазобратьГруппуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
					//КонецЕсли;	// rarus tenkam 04.10.2019 mantis 14442 +
				КонецЕсли;
				
			Иначе
				ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				//обработка реквизитов
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать вид ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции

//// ТИПЫ ПРОДУКТОВ / МАРКЕТИНГОВЫЕ ТИПЫ / ТИПЫ КУЗОВА / ТИПЫ ГИБДД / ЛОГИСТИЧЕСКИЕ ТИПЫ / ТИПЫ ПРОДУКТОВ

Функция РазборОтветаСправочникТипы(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ИмяСправочника = "Scan_ТипыПродуктов") Экспорт
	//rarus agar 07.09.2020 15696 ++
	//rarus vikhle 06.02.2020 mt 15659
	Если ИмяМетодаWS = "GetListOfProductSubType" Тогда
		//Получим все элементы из списка
		ОбъектТипыПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ТипыПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектТипыПродуктов Цикл
			РазобратьТип(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ИмяСправочника);
		КонецЦикла;
	//rarus agar 07.09.2020 15696 --
	ИначеЕсли ИмяМетодаWS = "GetProductSubType" Тогда
		ОбъектТипПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ТипПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		РазобратьТип(ОбъектТипПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ИмяСправочника);
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РазобратьТип(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода = "GetProductSubType", ИмяСправочника = "Scan_ТипыПродуктов") Экспорт 
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	// Группы-родители не обрабатываются
	Если СтруктураРеквизитов.Свойство("Родитель") И СтруктураРеквизитов.Родитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныйЭлемент = Справочники[ИмяСправочника].НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент.Пустая() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники[ИмяСправочника].НайтиПоНаименованию(СтруктураРеквизитов.Наименование, Истина);
		Если НЕ НайденныйЭлемент.Пустая() И ЗначениеЗаполнено(НайденныйЭлемент.IDExternalSystem) Тогда
			НайденныйЭлемент = Справочники[ИмяСправочника].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЭлементСсылка = СоздатьОбновитьТип(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ИмяСправочника);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция СоздатьОбновитьТип(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ИмяСправочника) 
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	СтруктураЗначений = Новый Структура;
	
	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипЗнч(ЭлементСсылка));
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл		
		Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
			//не удалось ранее получить значение объекта, значит тут список возьмем первое значение
			НеопределенныйОбъект = XDTOОбъект[ТекРеквизит.ИмяXML];
			ЗначениеНеопределенногоОбъекта = ПолучитьЗначениеОбъекта(НеопределенныйОбъект);
			СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = ЗначениеНеопределенногоОбъекта; 
		КонецЕсли;            		
		
		Если ТипЗнч(СтруктураРеквизитов[ТекРеквизит.ИмяРекв]) = Тип("ОбъектXDTO") Тогда
			Если ТекРеквизит.ИмяРекв = "ВидПродукта" Тогда
				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
					ЗначениеРеквизита = Справочники.Scan_ВидыПродуктов.ПустаяСсылка();
				Иначе
					ЗначениеРеквизита = РазобратьВидПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
				КонецЕсли;
			ИначеЕсли ТекРеквизит.ИмяРекв = "Родитель" Тогда
				// В текущей реализации для каждого родителя 1БД есть соответствующий справочник OFMS
				// Не будет обрабатывать родителя
				//Если ИмяСправочника = "Scan_ТипыПродуктов" Тогда
				//	ЗначениеРеквизита = Справочники.Scan_ТипыПродуктов.ТипыПродуктов;
				//Иначе
					ЗначениеРеквизита = Справочники[ИмяСправочника].ПустаяСсылка();
				//КонецЕсли;
			КонецЕсли;
		Иначе		
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		СтруктураЗначений.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);		
		
		Если НЕ Scan_ОбщегоНазначения.Scan_ЕстьРеквизитОбъекта(ТекРеквизит.ИмяРекв,МетаданныеСправочника) ИЛИ
				ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураЗначений[ТекРеквизит.ИмяРекв] Тогда
			СтруктураЗначений.Удалить(ТекРеквизит.ИмяРекв);
		КонецЕсли;				
	КонецЦикла;
	
	Если СтруктураЗначений.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из СтруктураЗначений Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			ИмяСобытияЖурналаРегистрации = ИмяСобытияЖурналаРегистрации + "." + ИмяСправочника;
			СообщениеОбОшибке = "Не удалось записать тип (" + ТекОбъект.Наименование + ") в справочник (" + ИмяСправочника + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции 

// rarus tenkam 17.09.2019 mantis 14442 ---

//// МОДЕЛИ
Функция РазборОтветаСправочникМоделиПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт
	Если ИмяМетодаWS = "GetListOfProductModel" Тогда
		//Получим все элементы из списка
		ОбъектМоделиПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.МоделиПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектМоделиПродуктов Цикл
			РазобратьМодельПродукта(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	ИначеЕсли ИмяМетодаWS = "GetProductModel" Тогда
		//Получим однин элемент
		ОбъектМодельПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.МодельПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		РазобратьМодельПродукта(ОбъектМодельПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция РазобратьМодельПродукта(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetProductModel");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;

	НайденныйЭлемент = Справочники.Scan_МоделиПродуктов.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_МоделиПродуктов.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники.Scan_МоделиПродуктов.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
		Если НайденныйЭлемент <> Справочники.Scan_МоделиПродуктов.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" Тогда
			//Обновим найденный элемент
			ОбъектСсылка = ОбновитьМодельПродукта(НайденныйЭлемент, XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Иначе
		//Создадим новый элемент 
			ОбъектСсылка = СоздатьМодельПродукта(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЕсли;
	Иначе
		ОбъектСсылка = ОбновитьМодельПродукта(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьМодельПродукта(XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetProductModel");
	
	НовыйОбъект = Справочники.Scan_МоделиПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.ПустаяСсылка();
			Иначе
				ЗначениеРеквизита = РазобратьМаркуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать модель  (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьМодельПродукта(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetProductModel");
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.ПустаяСсылка();
			Иначе
				ЗначениеРеквизита = РазобратьМаркуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;

		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			
			Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
					ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.ПустаяСсылка();	
				Иначе
					ЗначениеРеквизита = РазобратьМаркуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			КонецЕсли;
			Иначе
				ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				//обработка реквизитов
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать модель ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции	

//// ИЗДЕЛИЯ И ДВИГАТЕЛИ
#Область Удалить
//rarus bonmak 09.08.2021 16834 ++
//удаление во втором этапе
//Функция РазборОтветаСправочникИзделия(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт
//	Если ИмяМетодаWS = "GetListOfChassis" Тогда
//		//Получим все элементы из списка
//		ОбъектТС = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ТранспортныеСредства", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
//		Если Отказ Тогда 
//			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
//			Возврат Неопределено;
//		КонецЕсли;
//		
//		Для Каждого ТекЭлемент Из ОбъектТС Цикл
//			РазобратьИзделие(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Истина);
//		КонецЦикла;
//		
//	ИначеЕсли ИмяМетодаWS = "GetChassis" Тогда
//		//Получим однин элемент
//		ОбъектТС = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ТранспортноеСредствоИнфо", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
//		Если Отказ Тогда 
//			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
//			Возврат Неопределено;
//		КонецЕсли;
//				
//		ТекОбъект = РазобратьИзделие(ОбъектТС, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Истина);
//		Возврат ТекОбъект;
//		
//	ИначеЕсли ИмяМетодаWS = "GetListOfEngines" Тогда
//		//Получим все элементы из списка
//		ОбъектДвигатели = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Двигатели", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
//		Если Отказ Тогда 
//			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
//			Возврат Неопределено;
//		КонецЕсли;
//		
//		Для Каждого ТекЭлемент Из ОбъектДвигатели Цикл
//			РазобратьИзделие(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Ложь);
//		КонецЦикла;
//		
//	ИначеЕсли ИмяМетодаWS = "GetEngines" Тогда
//		//Получим однин элемент
//		ОбъектДвигатель = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДвигательИнфо", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
//		Если Отказ Тогда 
//			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
//			Возврат Неопределено;
//		КонецЕсли;
//		
//		ТекОбъект = РазобратьИзделие(ОбъектДвигатель, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Ложь);
//		Возврат ТекОбъект;
//	Иначе
//		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
//		Отказ = Истина;
//		Возврат Неопределено;
//	КонецЕсли;
//		
//КонецФункции

//Функция РазобратьИзделие(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС = Истина) Экспорт
//	ИмяМетода = ?(ЭтоТС, "GetChassis", "GetEngines");
//	Отказ = Ложь;
//	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
//		Возврат Неопределено;	
//	КонецЕсли;

//	НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
//	Если НайденныйЭлемент = Справочники.Scan_Изделия.ПустаяСсылка() Тогда
//		//Элемента с таким GUID нет
//		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
//		НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
//		Если НайденныйЭлемент <> Справочники.Scan_Изделия.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" Тогда
//			//Обновим найденный элемент
//			// rarus tenkam 16.04.2020 mantis 15797 +++
//			ОбъектСсылка = ОбновитьИзделиеНовая(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС);
//			//ОбъектСсылка = ОбновитьИзделие(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС);
//			// rarus tenkam 16.04.2020 mantis 15797 ---
//		Иначе
//			//rarus bonmak 29.07.2020 16140 ++
//			//найдем продукт по гуид шасси		
//			ИмяМетода = "GetListOfProduct";
//			СообщениеОбОшибке = "";
//			Отказ = Ложь;
//			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Истина);
//			Для Каждого Строка Из СтруктураПараметров Цикл
//				СтруктураПараметров.Вставить(Строка.Ключ, Неопределено);		
//			КонецЦикла;
//			
//			СтруктураПараметров.Вставить("ТСGUID", СтруктураРеквизитов.IDExternalSystem);
//			СтруктураПараметров.Вставить("Проверка", Истина);
//			ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
//			
//			Если НЕ Отказ Тогда
//				РазборОтветаСправочникПродукты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
//			КонецЕсли;
//			
//			НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
//			Если НайденныйЭлемент <> Справочники.Scan_Изделия.ПустаяСсылка() Тогда
//				ОбъектСсылка = ОбновитьИзделиеНовая(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС);
//			Иначе
//				//Создадим новый элемент 
//				// rarus tenkam 16.04.2020 mantis 15797 +++
//				ОбъектСсылка = СоздатьИзделиеНовая(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС);
//				//ОбъектСсылка = СоздатьИзделие(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС);
//				// rarus tenkam 16.04.2020 mantis 15797 ---				
//			КонецЕсли;	
//			//rarus bonmak 29.07.2020 16140 --
//		КонецЕсли;
//	Иначе
//		// rarus tenkam 16.04.2020 mantis 15797 +++
//		ОбъектСсылка = ОбновитьИзделиеНовая(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС);
//		//ОбъектСсылка = ОбновитьИзделие(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС);
//		// rarus tenkam 16.04.2020 mantis 15797 ---
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
//		Возврат ОбъектСсылка;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли;
//				
//КонецФункции

//// ПРОДУКТЫ
//Функция РазборОтветаСправочникПродукты(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт
//	Если ИмяМетодаWS = "GetListOfProduct" Тогда
//		//Получим все элементы из списка
//		ОбъектПродукты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Продукты", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
//		Если Отказ Тогда 
//			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
//			Возврат Неопределено;
//		КонецЕсли;
//		
//		Для Каждого ТекЭлемент Из ОбъектПродукты Цикл
//			ИмяМетодаНовое = "GetProduct";
//			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
//			СтруктураПараметров["GUID"] = ТекЭлемент.GUID;
//			
//			ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
//			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
//			Если НЕ Отказ Тогда
//				РазборОтветаСправочникПродукты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяНовогоСобытияЖурналаРегистрации,ИмяМетодаНовое);
//				//rarus tenkam 20.03.2017 mantis 7623 +++	
//				Если Отказ Тогда
//					Отказ = Ложь;
//					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ТекЭлемент.Наименование, ТекЭлемент.GUID, СообщениеОбОшибке);
//				КонецЕсли;
//				//rarus tenkam 20.03.2017 mantis 7623 ---		
//			Иначе
//				Отказ = Ложь;
//				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ТекЭлемент.Наименование, ТекЭлемент.GUID, ТекЭлементОтвет);
//				Продолжить;
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	ИначеЕсли ИмяМетодаWS = "GetProduct" Тогда
//		//Получим однин элемент
//		ОбъектПродукт = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.Продукт", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
//		Если Отказ Тогда 
//			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
//			Возврат Неопределено;
//		КонецЕсли;	
//		
//		ТекПродукт = РазобратьПродукт(ОбъектПродукт, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
//		Возврат ТекПродукт;
//	Иначе
//		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
//		Отказ = Истина;
//		Возврат Неопределено;
//	КонецЕсли;
//		
//КонецФункции

//Функция РазобратьПродукт(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
//	Отказ = Ложь;
//	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetProduct");
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
//		Возврат Неопределено;	
//	КонецЕсли;
//	
//	// rarus tenkam 10.06.2019 mantis 13865 +++
//	// Новый алгоритм для структуры Изделие - Заказ на завод
//	// Вызовем метод GetChassis
//	
//	ИмяМетодаНовое = "GetChassis";
//	ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
//	Отказ = Ложь;
//	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
//	Если СтруктураРеквизитов["Изделие"] = Неопределено Тогда
//		// Из 1БД не приходит изделие
//		ОбъектТС = Неопределено;
//		СтруктураРеквизитовТС = Неопределено;
//		//rarus bonmak 14773 15.08.2019 ++
//		ИмяМетодаНовое = "GetProduct";
//		ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
//		//rarus bonmak 14773 15.08.2019 --
//	Иначе
//			
//		ОбъектИзделия = СтруктураРеквизитов["Изделие"].ТранспортноеСредство;
//		// rarus tenkam 06.05.2020 mantis 16052 +++
//		Если ОбъектИзделия = Неопределено Тогда
//			// Возможно это Двигатель
//			ОбъектДвигатель = СтруктураРеквизитов["Изделие"].Двигатель;
//			Если ОбъектДвигатель = Неопределено Тогда
//				СообщениеОбОшибке = "Неверные предмет продукта!";			
//			Иначе
//				СообщениеОбОшибке = "Из 1БД передан двигатель " + ОбъектДвигатель.GUID + ", " + ОбъектДвигатель.Наименование;
//				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ОбъектДвигатель.Наименование, ОбъектДвигатель.GUID, "Из 1БД передан двигатель");
//			КонецЕсли;
//			Отказ = Истина;
//			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке); 
//			Возврат Неопределено;
//		КонецЕсли;	
//		// rarus tenkam 06.05.2020 mantis 16052 ---
//			
//		СтруктураПараметров.GUID = ОбъектИзделия.GUID; 	
//		
//		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
//		Если НЕ Отказ Тогда
//			ОбъектТС = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекЭлементОтвет, "Answer.Result.ТранспортноеСредствоИнфо", Отказ, ИмяНовогоСобытияЖурналаРегистрации, ИмяМетодаНовое);	
//			Если Отказ Тогда 
//				СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
//				Возврат Неопределено;
//			КонецЕсли;			
//		КонецЕсли;
//		
//		СтруктураРеквизитовТС = ПолучитьСтруктуруРеквизитов(ОбъектТС, Отказ, ИмяНовогоСобытияЖурналаРегистрации, ИмяМетодаНовое);
//		Если Отказ ИЛИ СтруктураРеквизитовТС = Неопределено Тогда
//			СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
//			Возврат Неопределено;	
//		КонецЕсли; 
//	КонецЕсли;	
//		
//	// Найдем изделие по GUID продукта
//	НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтруктураРеквизитов.IDExternalSystem);
//	Если НайденныйЭлемент = Справочники.Scan_Изделия.ПустаяСсылка() Тогда
//		//rarus bonmak 29.07.2020 16140 ++
//		Если СтруктураРеквизитов["Изделие"] = Неопределено Тогда
//		Иначе		
//			НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystem", СтруктураПараметров.GUID);
//			Если НайденныйЭлемент <> Справочники.Scan_Изделия.ПустаяСсылка() Тогда
//				Если ЗначениеЗаполнено(НайденныйЭлемент.IDExternalSystemProduct) Тогда
//					СообщениеОбОшибке = "Для изделия " + СтруктураПараметров.GUID + ", указан другой продукт, верный продукт " + СтруктураРеквизитов.IDExternalSystem;
//					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, НайденныйЭлемент.Наименование, СтруктураПараметров.GUID, "Изделие не соответствует продукту");
//					Отказ = Истина;
//					ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке); 
//					Возврат Неопределено;
//				Иначе
//					ОбъектСсылка = ОбновитьИзделиеНовая(НайденныйЭлемент, ОбъектТС, СтруктураРеквизитовТС, СообщениеОбОшибке, ИмяНовогоСобытияЖурналаРегистрации, Истина, XDTOОбъект, СтруктураРеквизитов);
//				КонецЕсли;	
//			КонецЕсли;
//		КонецЕсли;			
//		//rarus bonmak 29.07.2020 16140 --

//		//Элемента с таким GUID нет
//		
//		//Создадим новый элемент 
//		// rarus tenkam 16.04.2020 mantis 15797 +++
//		ОбъектСсылка = СоздатьИзделиеНовая(ОбъектТС, СтруктураРеквизитовТС, СообщениеОбОшибке, ИмяНовогоСобытияЖурналаРегистрации, Истина, XDTOОбъект, СтруктураРеквизитов);
//		//ОбъектСсылка = СоздатьИзделие(ОбъектТС, СтруктураРеквизитовТС, СообщениеОбОшибке, ИмяНовогоСобытияЖурналаРегистрации, Истина, XDTOОбъект, СтруктураРеквизитов);
//		// rarus tenkam 16.04.2020 mantis 15797 ---		
//	Иначе
//		// rarus tenkam 16.04.2020 mantis 15797 +++
//		ОбъектСсылка = ОбновитьИзделиеНовая(НайденныйЭлемент, ОбъектТС, СтруктураРеквизитовТС, СообщениеОбОшибке, ИмяНовогоСобытияЖурналаРегистрации, Истина, XDTOОбъект, СтруктураРеквизитов);
//		//ОбъектСсылка = ОбновитьИзделие(НайденныйЭлемент, ОбъектТС, СтруктураРеквизитовТС, СообщениеОбОшибке, ИмяНовогоСобытияЖурналаРегистрации, Истина, XDTOОбъект, СтруктураРеквизитов);
//		// rarus tenkam 16.04.2020 mantis 15797 ---		
//	КонецЕсли;
//	
//	Если Отказ Тогда
//		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ОбъектТС.Наименование, ОбъектТС.GUID, СообщениеОбОшибке);
//	КонецЕсли;
//	// rarus tenkam 10.06.2019 mantis 13865 ---
//	
//	// rarus tenkam 14.08.2019 mantis 14427 +++
//	// Удалим создание обновление продукта
//	
//	//НайденныйЭлемент = Справочники.Scan_Продукты.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
//	//Если НайденныйЭлемент = Справочники.Scan_Продукты.ПустаяСсылка() Тогда
//	//	//Элемента с таким GUID нет
//	//	//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
//	//	НайденныйЭлемент = Справочники.Scan_Продукты.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
//	//	Если НайденныйЭлемент <> Справочники.Scan_Продукты.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" Тогда
//	//		//Обновим найденный элемент
//	//		ОбъектСсылка = ОбновитьПродукт(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
//	//	Иначе
//	//	//Создадим новый элемент 
//	//		ОбъектСсылка = СоздатьПродукт(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
//	//	КонецЕсли;
//	//Иначе
//	//	ОбъектСсылка = ОбновитьПродукт(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
//	//КонецЕсли; 	
//	// rarus tenkam 14.08.2019 mantis 14427 ---
//	
//	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
//		Возврат ОбъектСсылка;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли;
//				
//КонецФункции
//rarus bonmak 09.08.2021 16834 --
#КонецОбласти
//// ДОП РЕКВИЗИТЫ
//ДопПараметры - структура, содержит:
//	Входные параметры:
//		GUID - строка, GUID запршиваемого бъекта в 1БД
//		ПолучитьСписокБезОбработки - булево, обработаем список из 1БД без создания/обновления справочника
//	Выходные параметры:
//		ТаблицаДопРеквизитовИсходная - таблица значений, формируется при обработке "ПолучитьСписокБезОбработки", возвращает данные из 1БД без корректировки 
//		ТаблицаДопРеквизитовИзмененная - таблица значений, формируется при обработке "ПолучитьСписокБезОбработки", обработка записей формируется внутри в зависимости от необходимости на основании таблицы ТаблицаДопРеквизитовИсходная  
Процедура ВызватьМетод_GetAdditionalProperty(ДопПараметры) Экспорт //rarus bonmak 04.09.2019 14442 ++
	ИмяМетода = "GetAdditionalProperty";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если ДопПараметры.Свойство("GUID") Тогда
		СтруктураПараметров.Вставить("GUID", ДопПараметры.GUID);
	КонецЕсли;
	//rarus bonmak 17468 23.09.2021 ++
	Если НЕ ДопПараметры.Свойство("ПолучитьСписокБезОбработки") Тогда
		ДопПараметры.Вставить("ПолучитьСписокБезОбработки", Ложь);
	КонецЕсли;
	//rarus bonmak 17468 23.09.2021 --
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаСправочникДопРеквизиты(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ДопПараметры); //rarus bonmak 17468 23.09.2021 добавил параметр ДопПараметры
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 04.09.2019 14442 --

Процедура РазборОтветаСправочникДопРеквизиты(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ДопПараметры) Экспорт //rarus bonmak 04.09.2019 14442 ++ //rarus bonmak 17468 23.09.2021 добавил параметр ДопПараметры		
	ДопРеквизиты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ДополнительныйРеквизит", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из ДопРеквизиты Цикл 
		Результат = РазобратьДопРеквизит(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ДопПараметры); //rarus bonmak 17468 23.09.2021 добавил параметр ДопПараметры
	КонецЦикла;
	
	Если ДопПараметры.ПолучитьСписокБезОбработки Тогда //rarus bonmak 17468 23.09.2021 ++
		СформироватьТаблицуДопРеквизитыИзмененная(ДопПараметры);
	КонецЕсли; //rarus bonmak 17468 23.09.2021 --

КонецПроцедуры //rarus bonmak 04.09.2019 14442 --

Функция РазобратьДопРеквизит(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ДопПараметры) Экспорт //rarus bonmak 04.09.2019 14442 ++ //rarus bonmak 17468 23.09.2021 добавил параметр ДопПараметры 
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	Если ДопПараметры.ПолучитьСписокБезОбработки Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
		ДобавитьДопРеквизитВТаблицуИсходная(XDTOОбъект, СтруктураРеквизитов, ИмяМетода, ДопПараметры);
	Иначе
		//Обработка данных в базе
		НайденныйЭлемент = Справочники.Scan_ДополнительныеРеквизиты1БД.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
		Если НайденныйЭлемент.Пустая() Тогда
			//Элемента с таким GUID нет
			//rarus bonmak 17468 23.09.2021 ++
			////Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
			//НайденныйЭлемент = Справочники.Scan_ДополнительныеРеквизиты1БД.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
			//Если НЕ НайденныйЭлемент.Пустая() И ЗначениеЗаполнено(НайденныйЭлемент.IDExternalSystem) Тогда
			//	НайденныйЭлемент = Справочники.Scan_ДополнительныеРеквизиты1БД.ПустаяСсылка();
			//КонецЕсли;
			СообщениеОбОшибке = "Не найден доп. реквизит по GUID " + СтруктураРеквизитов.IDExternalSystem;
			Возврат Неопределено;
			//rarus bonmak 17468 23.09.2021 --
		КонецЕсли;
		
		ЭлементСсылка = ОбновитьДопРеквизит(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
		
		Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
			Возврат ЭлементСсылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции //rarus bonmak 04.09.2019 14442 --

Функция ОбновитьДопРеквизит(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus bonmak 04.09.2019 14442 ++
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл		
		Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
			//не удалось ранее получить значение объекта, значит тут список возьмем первое значение
			НеопределенныйОбъект = XDTOОбъект[ТекРеквизит.ИмяXML];
			ЗначениеНеопределенногоОбъекта = ПолучитьЗначениеОбъекта(НеопределенныйОбъект);
			СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = ЗначениеНеопределенногоОбъекта; 
		КонецЕсли;
		
		Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв] Тогда
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
		КонецЕсли;				
	КонецЦикла;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		//rarus bonmak 17468 23.09.2021 закомментировал ++
		//Если ЭлементСсылка.Пустая() Тогда
		//	ТекОбъект = Справочники.Scan_ДополнительныеРеквизиты1БД.СоздатьЭлемент();
		//Иначе
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		//КонецЕсли;
		//rarus bonmak 17468 23.09.2021 --
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		//Пользователь
		ТекОбъект.Пользователь = ПользователиСлужебный.АвторизованныйПользователь();
		//Дата обновления
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать доп реквизит (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции //rarus bonmak 04.09.2019 14442 --

Функция ПолучитьЗначениеОбъекта(ОбъектОтвета) //rarus bonmak 04.09.2019 14442 ++
	ЗначениеОбъекта = "";
	Если ТипЗнч(ОбъектОтвета) = Тип("СписокXDTO") И ОбъектОтвета.Количество() <> 0 Тогда
		ЗначениеОбъекта = ОбъектОтвета[0];
	ИначеЕсли ТипЗнч(ОбъектОтвета) = Тип("ОбъектXDTO") ИЛИ ТипЗнч(ОбъектОтвета) = Тип("Строка") Тогда
		ЗначениеОбъекта = ОбъектОтвета;
	КонецЕсли;
	
	Возврат ЗначениеОбъекта;	
КонецФункции //rarus bonmak 04.09.2019 14442 --

//В данной процедуре формируется таблица со всеми доп. реквизитами из 1БД
Процедура ДобавитьДопРеквизитВТаблицуИсходная(XDTOОбъект, СтруктураРеквизитов, ИмяМетода, ДопПараметры) //rarus bonmak 17468 23.09.2021 ++
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	Если НЕ ДопПараметры.Свойство("ТаблицаДопРеквизитовИсходная") Тогда
		ТаблицаДопРеквизитовИсходная = Новый ТаблицаЗначений;
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл	
			ТаблицаДопРеквизитовИсходная.Колонки.Добавить(ТекРеквизит.ИмяРекв);
		КонецЦикла;
		ДопПараметры.Вставить("ТаблицаДопРеквизитовИсходная", ТаблицаДопРеквизитовИсходная);
	КонецЕсли;
	НоваяСтрока = ДопПараметры.ТаблицаДопРеквизитовИсходная.Добавить();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл		
		Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
			//не удалось ранее получить значение объекта, значит тут список возьмем первое значение
			НеопределенныйОбъект = XDTOОбъект[ТекРеквизит.ИмяXML];
			ЗначениеНеопределенногоОбъекта = ПолучитьЗначениеОбъекта(НеопределенныйОбъект);
			СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = ЗначениеНеопределенногоОбъекта; 
		КонецЕсли;
		НоваяСтрока[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв]; 				
	КонецЦикла;
КонецПроцедуры //rarus bonmak 17468 23.09.2021 --

//В данной процедуре формируется таблица с нужными(измененными) данными на основании таблицы ТаблицаДопРеквизитовИсходная 
Процедура СформироватьТаблицуДопРеквизитыИзмененная(ДопПараметры) //rarus bonmak 17468 23.09.2021 ++
	ТаблицаДопРеквизитовИсходная = ДопПараметры.ТаблицаДопРеквизитовИсходная;
	ТаблицаДопРеквизитовИзмененная = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитовИзмененная.Колонки.Добавить("Элемент1БД", Новый ОписаниеТипов("Строка"));
	ТаблицаДопРеквизитовИзмененная.Колонки.Добавить("GUID1БД", Новый ОписаниеТипов("Строка"));
	ТаблицаДопРеквизитовИзмененная.Колонки.Добавить("ЭлементOFMS", Новый ОписаниеТипов("СправочникСсылка.Scan_ДополнительныеРеквизиты1БД"));
	ТаблицаДопРеквизитовИзмененная.Колонки.Добавить("Получение", Новый ОписаниеТипов("Булево"));
	ТаблицаДопРеквизитовИзмененная.Колонки.Добавить("Отправка", Новый ОписаниеТипов("Булево"));
	ТаблицаДопРеквизитовИзмененная.Колонки.Добавить("ТипДанныхOFMS", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаИсходная Из ТаблицаДопРеквизитовИсходная Цикл
		НайденныйЭлемент = Справочники.Scan_ДополнительныеРеквизиты1БД.НайтиПоНаименованию(СтрокаИсходная.Наименование, Истина);
		Если НайденныйЭлемент.Пустая() Тогда
			НайденныйЭлемент = Справочники.Scan_ДополнительныеРеквизиты1БД.НайтиПоРеквизиту("IDExternalSystem", СтрокаИсходная.IDExternalSystem);
		КонецЕсли;
		Если НайденныйЭлемент.Наименование = СтрокаИсходная.Наименование
			И НайденныйЭлемент.IDExternalSystem = СтрокаИсходная.IDExternalSystem Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИзмененная = ТаблицаДопРеквизитовИзмененная.Добавить();
		СтрокаИзмененная.Элемент1БД 	= СтрокаИсходная.Наименование;
		СтрокаИзмененная.GUID1БД 		= СтрокаИсходная.IDExternalSystem;
		СтрокаИзмененная.ЭлементOFMS 	= НайденныйЭлемент;
		СтрокаИзмененная.Получение		= НайденныйЭлемент.ИспользуетсяВOFMS;
		СтрокаИзмененная.Отправка		= НайденныйЭлемент.ИспользуетсяВOFMSДляОтправки;
		СтрокаИзмененная.ТипДанныхOFMS 	= НайденныйЭлемент.ТипДопРеквизитаOFMS;	
	КонецЦикла;
	ТаблицаДопРеквизитовИзмененная.Сортировать("Элемент1БД");
	ДопПараметры.Вставить("ТаблицаДопРеквизитовИзмененная", ТаблицаДопРеквизитовИзмененная);
	
КонецПроцедуры //rarus bonmak 17468 23.09.2021 --

//// ЗАКАЗЫ НА ЗАВОД
Функция РазборОтветаСправочникЗаказыНаЗавод(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, XDTOОбъектПродукт = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetListOfOrderToDelivery" Тогда
		//Получим все элементы из списка
		ОбъектВидыПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ЗаказыНаПродукт", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектВидыПродуктов Цикл
			ИмяМетодаНовое = "GetOrderToDelivery";
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
			СтруктураПараметров["GUID"] = ТекЭлемент.GUID;

			ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
			Если НЕ Отказ Тогда
				РазборОтветаСправочникЗаказыНаЗавод(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяНовогоСобытияЖурналаРегистрации,ИмяМетодаНовое);
				//rarus tenkam 20.03.2017 mantis 7623 +++	
				Если Отказ Тогда
					Отказ = Ложь;
					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ТекЭлемент.Наименование, ТекЭлемент.GUID, СообщениеОбОшибке);
				КонецЕсли;
				//rarus tenkam 20.03.2017 mantis 7623 ---	
			КонецЕсли;		
		КонецЦикла;
		
	ИначеЕсли ИмяМетодаWS = "GetOrderToDelivery" Тогда
		//Получим однин элемент
		//rarus bonmak 08.02.2022 внес задачи мантис ++
		//ОбъектВидПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ЗаказПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		//Если Отказ Тогда 
		//	СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		//	Возврат Неопределено;
		//КонецЕсли;
		//
		//ТекЗаказНаЗавод = РазобратьЗаказНаЗавод(ОбъектВидПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт);
		//Возврат ТекЗаказНаЗавод;
		
		Возврат РазборОтвета_GetOrderToDelivery(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);
		//rarus bonmak 08.02.2022 внес задачи мантис --
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
		
КонецФункции

Функция РазобратьЗаказНаЗавод(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт = Неопределено) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetOrderToDelivery");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;

	НайденныйЭлемент = Справочники.Scan_ЗаказыНаЗавод.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
		Если НайденныйЭлемент <> Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" Тогда
			//Обновим найденный элемент
			// rarus tenkam 16.04.2020 mantis 15797 +++
			ОбъектСсылка = ОбновитьЗаказНаЗаводНовая(НайденныйЭлемент, XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт);
			//ОбъектСсылка = ОбновитьЗаказНаЗавод(НайденныйЭлемент, XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт);
			// rarus tenkam 16.04.2020 mantis 15797 ---
		Иначе
		//Создадим новый элемент 
			// rarus tenkam 16.04.2020 mantis 15797 +++
			ОбъектСсылка = СоздатьЗаказНаЗаводНовая(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт);
			//ОбъектСсылка = СоздатьЗаказНаЗавод(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт);
			// rarus tenkam 16.04.2020 mantis 15797 ---	
		КонецЕсли;
	Иначе
		// rarus tenkam 16.04.2020 mantis 15797 +++
		ОбъектСсылка = ОбновитьЗаказНаЗаводНовая(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт);
		//ОбъектСсылка = ОбновитьЗаказНаЗавод(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт);
		// rarus tenkam 16.04.2020 mantis 15797 ---
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

//// КОМПАНИИ
Процедура ВызватьМетод_GetCompany(ДопПараметры, Отказ = Ложь, СообщениеОбОшибке = "") Экспорт //rarus bonmak 15.04.2020 14456 ++
	ИмяМетода = "GetCompany";
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если ДопПараметры.Свойство("GUID") Тогда
		СтруктураПараметров.Вставить("GUID", ДопПараметры.GUID);
	КонецЕсли;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаКомпании(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 15.04.2020 14456 --

Процедура ВызватьМетод_GetListOfCompany(ДопПараметры, Отказ = Ложь, СообщениеОбОшибке = "") Экспорт //rarus bonmak 15.04.2020 14456 ++
	ИмяМетода = "GetListOfCompany";
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если ДопПараметры.Свойство("ВидВзаимодействия") Тогда
		СтруктураПараметров.Вставить("ВидВзаимодействия", ДопПараметры.ВидВзаимодействия);
	КонецЕсли;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаКомпании(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 15.04.2020 14456 --

Функция РазборОтветаКомпании(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт //rarus bonmak 15.04.2020 14456 ++
	Если ИмяМетодаWS = "GetListOfCompany" Тогда
		//Получим все элементы из списка
		ОбъектКомпании = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Компании", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектКомпании Цикл
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("GUID", ТекЭлемент.GUID);
			ВызватьМетод_GetCompany(ДопПараметры, Отказ, СообщениеОбОшибке);
		КонецЦикла;
	ИначеЕсли ИмяМетодаWS = "GetCompany" Тогда
		//Получим однин элемент
		ОбъектКомпания = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДанныеКомпании", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;	
		РазобратьКомпанию(ОбъектКомпания, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Отказ);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //rarus bonmak 15.04.2020 14456 --

Функция РазобратьКомпанию(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ) Экспорт //rarus bonmak 15.04.2020 14456 ++
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	фКодДилера = "";
	Если СоответствиеДопРеквизитов1БД["Код дилера"] <> Неопределено Тогда
		фКодДилера = СоответствиеДопРеквизитов1БД["Код дилера"];
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_Компании.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_Компании.ПустаяСсылка() Тогда 
		//Элемента с таким GUID нет
		//Если есть элемент с таким же кодом дилера, но пустым ID, то запишем в него ID
		Если НЕ ПустаяСтрока(фКодДилера) Тогда 
			НайденныйЭлемент = Справочники.Scan_Компании.НайтиПоРеквизиту("КодДилера", Число(фКодДилера)); 
			Если НайденныйЭлемент <> Справочники.Scan_Компании.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem <> "" Тогда  
				НайденныйЭлемент = Справочники.Scan_Компании.ПустаяСсылка();	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектСсылка = СоздатьОбновитьКомпанию(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ, СоответствиеДопРеквизитов1БД);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;			
КонецФункции //rarus bonmak 15.04.2020 14456 --

Функция СоздатьОбновитьКомпанию(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ, СоответствиеДопРеквизитов1БД) //rarus bonmak 15.04.2020 14456 ++
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetCompany");	
		
	СоответствиеРеквизитовДляЗаписи = Новый Соответствие;
	
	// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	//доп реквизиты обработали ранее
	
	Если СоответствиеДопРеквизитов1БД["Код дилера SOWA"] <> Неопределено Тогда
		Если ЭлементСсылка.КодДилераSOWA <> СоответствиеДопРеквизитов1БД["Код дилера SOWA"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("КодДилераSOWA", СоответствиеДопРеквизитов1БД["Код дилера SOWA"]);
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Статус компании"] <> Неопределено Тогда
		Если ЭлементСсылка.СтатусыКомпаний <> СоответствиеДопРеквизитов1БД["Статус компании"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("СтатусыКомпаний", СоответствиеДопРеквизитов1БД["Статус компании"]);
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Тип дилера"] <> Неопределено Тогда
		Если ЭлементСсылка.ТипыДилеров <> СоответствиеДопРеквизитов1БД["Тип дилера"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ТипыДилеров", СоответствиеДопРеквизитов1БД["Тип дилера"]);
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Форма компании"] <> Неопределено Тогда
		Если ЭлементСсылка.ФормыКомпаний <> СоответствиеДопРеквизитов1БД["Форма компании"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ФормыКомпаний", СоответствиеДопРеквизитов1БД["Форма компании"]);
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Группа компаний"] <> Неопределено Тогда
		Если ЭлементСсылка.ГруппыКомпаний <> СоответствиеДопРеквизитов1БД["Группа компаний"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ГруппыКомпаний", СоответствиеДопРеквизитов1БД["Группа компаний"]);
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Наименование английское"] <> Неопределено Тогда
		Если ЭлементСсылка.НаименованиеАнглийское <> СоответствиеДопРеквизитов1БД["Наименование английское"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("НаименованиеАнглийское", СоответствиеДопРеквизитов1БД["Наименование английское"]);
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["DealerID_COW"] <> Неопределено Тогда
		Если ЭлементСсылка.DealerID_COW <> СоответствиеДопРеквизитов1БД["DealerID_COW"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("DealerID_COW", СоответствиеДопРеквизитов1БД["DealerID_COW"]);
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Код дилера"] <> Неопределено Тогда
		//rarus bonmak 26.08.2020 16494 ++
		//Если ЭлементСсылка.КодДилера <> СоответствиеДопРеквизитов1БД["Код дилера"] Тогда
		Если ЭлементСсылка.КодДилера <> Число(СоответствиеДопРеквизитов1БД["Код дилера"]) Тогда
			//rarus bonmak 26.08.2020 16494 --
			СоответствиеРеквизитовДляЗаписи.Вставить("КодДилера", СоответствиеДопРеквизитов1БД["Код дилера"]);
		КонецЕсли;
	КонецЕсли;
	
	//rarus vikhle 05.04.2021 mt 17484
	Если СоответствиеДопРеквизитов1БД["Дилер активен"] <> Неопределено Тогда
		Если ЭлементСсылка.ДилерАктивен <> СоответствиеДопРеквизитов1БД["Дилер активен"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ДилерАктивен", СоответствиеДопРеквизитов1БД["Дилер активен"]);
		КонецЕсли;
	КонецЕсли;	
	//rarus vikhle 05.04.2021 mt 17484 ---
	
	//rarus vikhle 24.05.2021 mt 17543 +++
	Если СоответствиеДопРеквизитов1БД["Каптивный дилер"] <> Неопределено Тогда
		ВидДилера = ?(СоответствиеДопРеквизитов1БД["Каптивный дилер"],Перечисления.Scan_ВидыДилеров.Собственный,Перечисления.Scan_ВидыДилеров.Независимый); 
		Если ЭлементСсылка.ВидДилера <> ВидДилера Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ВидДилера", ВидДилера);
		КонецЕсли;
	КонецЕсли;
	//rarus vikhle 24.05.2021 mt 17543 ---
	
	//Обработаем связи компании с контрагентами
	ТаблицаВзаимодействийДляЗаписи = Новый ТаблицаЗначений;
	ТаблицаВзаимодействийДляЗаписи.Колонки.Добавить("ВидВзаимодействия");
	ТаблицаВзаимодействийДляЗаписи.Колонки.Добавить("Контрагент");
	ТаблицаВзаимодействийДляЗаписи.Колонки.Добавить("РежимУстановкиВидаВзаимодействия");

	Если XDTOОбъект.ВзаимодействиеСКонтрагента <> Неопределено Тогда
		Если XDTOОбъект.ВзаимодействиеСКонтрагента.Количество() > 0 Тогда	
			ЗаполнитьТаблицуВзаимодействияСКонтрагентами(XDTOОбъект, ТаблицаВзаимодействийДляЗаписи, ЭлементСсылка);	
		КонецЕсли;
	КонецЕсли;
	
	//rarus bonmak 07.01.2021 16625 ++
	//Обработаем регионы ответственности
	ТаблицаРегионы = Новый ТаблицаЗначений;
	ТаблицаРегионы.Колонки.Добавить("Регион");
	
	Если XDTOОбъект.РегионыОтветственности <> Неопределено Тогда
		Если XDTOОбъект.РегионыОтветственности.Количество() > 0 Тогда	
			ЗаполнитьТаблицуРегионыОтветственности(XDTOОбъект, ТаблицаРегионы, ЭлементСсылка, СообщениеОбОшибке, Отказ);	
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРегионыОбъект = ЭлементСсылка.РегионыОтветственности.Выгрузить();

	ИменаКолонок = "Регион"; 
	РегионыНЕИзменены = ОбщегоНазначения.КоллекцииИдентичны(ТаблицаРегионы,ТаблицаРегионыОбъект,ИменаКолонок);
									
	//rarus bonmak 07.01.2021 16625 --
	//rarus bonmak 08.06.2020 16178 ++
	фДилер = Ложь;
	Если XDTOОбъект.ВидВзаимодействия <> Неопределено Тогда
		Если XDTOОбъект.ВидВзаимодействия.Количество() > 0 Тогда	
			фДилер = ПроверитьВидВзаимодействияДилер(XDTOОбъект);	
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементСсылка.Дилер <> фДилер Тогда
		СоответствиеРеквизитовДляЗаписи.Вставить("Дилер", фДилер);
	КонецЕсли;
	//rarus bonmak 08.06.2020 16178 --

	Если СоответствиеРеквизитовДляЗаписи.Количество() <> 0
		ИЛИ НЕ РегионыНЕИзменены Тогда //rarus bonmak 07.01.2021 16625 добавил второе условие
		
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_Компании.СоздатьЭлемент();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
				
		Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписи Цикл
			ТекОбъект[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
		КонецЦикла;
	
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		//rarus bonmak 07.01.2021 16625 ++
		Если НЕ РегионыНЕИзменены Тогда 
			ТекОбъект.РегионыОтветственности.Загрузить(ТаблицаРегионы);
		КонецЕсли;
		//rarus bonmak 07.01.2021 16625 --
		Попытка 
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка;
		Исключение
			СообщениеОбОшибке = "Не удалось записать дилера ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);		
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если НЕ ЭлементСсылка.Пустая() Тогда
		Если ТаблицаВзаимодействийДляЗаписи.Количество() > 0 Тогда
			//обновим информация в регистре
			ПериодЗаписи = ТекущаяДата();
			Для Каждого СтрЗапись Из ТаблицаВзаимодействийДляЗаписи Цикл
				РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ДобавитьЗаписьВзаимосвязьКомпанийСКонтрагентами(ПериодЗаписи, ЭлементСсылка, СтрЗапись.Контрагент, СтрЗапись.ВидВзаимодействия, СтрЗапись.РежимУстановкиВидаВзаимодействия);
				ПериодЗаписи = ПериодЗаписи + 1;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭлементСсылка;

КонецФункции //rarus bonmak 15.04.2020 14456 --

Процедура ЗаполнитьТаблицуВзаимодействияСКонтрагентами(XDTOОбъект, ТаблицаВзаимодействия, ЭлементСсылка) //rarus bonmak 15.04.2020 14456 ++
	ДилерДобавлен = Ложь;
	ВидВзаимодействияДилер = Scan_ПраваИНастройки.Scan_Право("ВидВзаимодействияДилер");
	Для Каждого ВидСвязи Из XDTOОбъект.ВзаимодействиеСКонтрагента Цикл
		//Получим/обновим вид взаимодействия
		ИмяМетода 			= "GetListOfCooperationType";
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		ВидВзаимодействияСсылка = РазобратьВидВзаимодействия(ВидСвязи.ВидВзаимодействия, "", ИмяСобытияЖурналаРегистрации, ИмяМетода);
		Если ВидВзаимодействияСсылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидВзаимодействияСсылка = ВидВзаимодействияДилер Тогда 
			Если ДилерДобавлен Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Получим/обновим контрагента
		фИмяМетода = "GetContragents";
		фСтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(фИмяМетода ,Ложь);
		фСтруктураПараметров.Вставить("GUID", ВидСвязи.Контрагент.GUID);
		фИмяСобытияЖурналаРегистрации = "Веб-сервис." + фИмяМетода;
		Отказ 				= Ложь;
		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(фИмяМетода, фСтруктураПараметров, Отказ, фИмяСобытияЖурналаРегистрации);
		Если НЕ Отказ Тогда
			КонтрагентСсылка = РазборОтветаСправочникКонтрагенты(ТекЭлементОтвет,Отказ,"",фИмяСобытияЖурналаРегистрации,фИмяМетода);
		КонецЕсли;
		
		Если КонтрагентСсылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВзаимодействия = ТаблицаВзаимодействия.Добавить();
		СтрокаВзаимодействия.ВидВзаимодействия = ВидВзаимодействияСсылка;
		СтрокаВзаимодействия.Контрагент = КонтрагентСсылка;
		СтрокаВзаимодействия.РежимУстановкиВидаВзаимодействия = Перечисления.Scan_РежимУстановкиВидаВзаимодействия.Автоматически;
		
		Если ВидВзаимодействияСсылка = ВидВзаимодействияДилер Тогда 
			ДилерДобавлен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаВзаимодействия.Количество() > 0 Тогда
		Если НЕ ЭлементСсылка.Пустая() Тогда
			//проверим корректные виды взаимосвязей
			ТаблицаСуществующихСвязей = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьКонтрагентовПоКомпании(ЭлементСсылка);
			Для Каждого СтрСущСвязь Из ТаблицаСуществующихСвязей Цикл
				Отбор = Новый Структура();
				Отбор.Вставить("Контрагент", СтрСущСвязь.Контрагент);
				Отбор.Вставить("ВидВзаимодействия", СтрСущСвязь.ВидВзаимодействия);
				
				Строки = ТаблицаВзаимодействия.НайтиСтроки(Отбор);
				
				Если Строки.Количество() = 0 Тогда
					Если СтрСущСвязь.РежимУстановкиВидаВзаимодействия <> Перечисления.Scan_РежимУстановкиВидаВзаимодействия.Вручную Тогда
						//удаляем запись
						РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.УдалитьЗаписьВзаимосвязьКомпанийСКонтрагентами(СтрСущСвязь);
					КонецЕсли;
				Иначе
					Для Каждого СтрокаУдаления Из Строки Цикл
						ТаблицаВзаимодействия.Удалить(СтрокаУдаления);	
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 15.04.2020 14456 --

Процедура ЗаполнитьТаблицуРегионыОтветственности(XDTOОбъект, ТаблицаРегионы, ЭлементСсылка, СообщениеОбОшибке, Отказ) //rarus bonmak 07.01.2021 16625 ++
	Для Каждого Регион Из XDTOОбъект.РегионыОтветственности Цикл
		//Получим/обновим регион
		ИмяМетода = "GetListOfRegions";
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
		РегионСсылка = РазобратьРегион(Регион, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ);
		
		Если РегионСсылка = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
				
		СтрокаРегион = ТаблицаРегионы.Добавить();
		СтрокаРегион.Регион = РегионСсылка;
				
	КонецЦикла;
	
КонецПроцедуры //rarus bonmak 07.01.2021 16625 --

Функция ПроверитьВидВзаимодействияДилер(XDTOОбъект) //rarus bonmak 08.06.2020 16178 ++
	ВидВзаимодействияДилер = Scan_ПраваИНастройки.Scan_Право("ВидВзаимодействияДилер");
	Для Каждого фВидВзаимодействия Из XDTOОбъект.ВидВзаимодействия Цикл
		//Получим/обновим вид взаимодействия
		Если ЗначениеЗаполнено(фВидВзаимодействия.GUID) Тогда
			ИмяМетода 			= "GetListOfCooperationType";
			ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
			ВидВзаимодействияСсылка = РазобратьВидВзаимодействия(фВидВзаимодействия, "", ИмяСобытияЖурналаРегистрации, ИмяМетода);
			Если ВидВзаимодействияСсылка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВидВзаимодействияСсылка = ВидВзаимодействияДилер Тогда 
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;	
КонецФункции //rarus bonmak 08.06.2020 16178 --

//// СТАТУСЫ КОМПАНИИ
Процедура ВызватьМетод_GetListOfStatuses(ДопПараметры) Экспорт //rarus bonmak 15.04.2020 14456 ++
	ИмяМетода = "GetListOfStatuses";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	СтруктураПараметров.Вставить("ВидСтатуса", "СтатусыКомпаний");
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаСправочникСтатусыКомпании(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 15.04.2020 14456 --

Процедура РазборОтветаСправочникСтатусыКомпании(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 15.04.2020 14456 ++		
	Статусы = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Статусы", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из Статусы Цикл 
		Результат = РазобратьСтатусКомпании(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЦикла;
КонецПроцедуры //rarus bonmak 15.04.2020 14456 --

Функция РазобратьСтатусКомпании(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 15.04.2020 14456 ++
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_СтатусыКомпаний.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент.Пустая() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники.Scan_СтатусыКомпаний.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
		Если НЕ НайденныйЭлемент.Пустая() И ЗначениеЗаполнено(НайденныйЭлемент.IDExternalSystem) Тогда
			НайденныйЭлемент = Справочники.Scan_СтатусыКомпаний.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЭлементСсылка = СоздатьОбновитьСтатусКомпании(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //rarus bonmak 15.04.2020 14456 --

Функция СоздатьОбновитьСтатусКомпании(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus bonmak 15.04.2020 14456 ++
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "Наименование" ИЛИ ТекРеквизит.ИмяРекв = "IDExternalSystem" Тогда
			Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв] Тогда
				СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
			КонецЕсли;
		Иначе
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
		КонецЕсли;				
	КонецЦикла;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_СтатусыКомпаний.СоздатьЭлемент();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата(); 
				
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать статус компании (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции //rarus bonmak 15.04.2020 14456 --


//// КОНТРАГЕНТЫ
Функция РазборОтветаСправочникКонтрагенты(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ГруппаКонтрагента = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetListOfContragents" Тогда
		//Получим все элементы из списка
		ОбъектКонтрагенты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Контрагенты", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектКонтрагенты Цикл
			ИмяМетодаНовое = "GetContragents";
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
			СтруктураПараметров.GUID = ТекЭлемент.GUID;
			
			ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
			Если НЕ Отказ Тогда
				РазборОтветаСправочникКонтрагенты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяНовогоСобытияЖурналаРегистрации,ИмяМетодаНовое, ГруппаКонтрагента);
				//rarus tenkam 20.03.2017 mantis 7623 +++	
				Если Отказ Тогда
					Отказ = Ложь;
					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ТекЭлемент.Наименование, ТекЭлемент.GUID, СообщениеОбОшибке);
				КонецЕсли;
				//rarus tenkam 20.03.2017 mantis 7623 ---	
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяМетодаWS = "GetContragents" Тогда
		//Получим однин элемент
		ОбъектКонтрагент = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДанныеКонтрагента", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		ТекКонтрагент = РазобратьКонтрагента(ОбъектКонтрагент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ГруппаКонтрагента);
		Возврат ТекКонтрагент;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	Возврат Неопределено;
		
КонецФункции

Функция РазобратьКонтрагента(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ГруппаКонтрагента = Неопределено) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetContragents");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_Контрагенты.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_Контрагенты.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же кодом дилера, но пустым ID, то запишем в него ID
		//НайденныйЭлемент = Справочники.Scan_Контрагенты.НайтиПоРеквизиту("ИНН", СтруктураРеквизитов.ИНН); //rarus bonmak 15.04.2020 14456 
		// rarus tenkam 18.01.2019 mantis 13895 +++
		//Если НайденныйЭлемент <> Справочники.Scan_Контрагенты.ПустаяСсылка() Тогда //rarus bonmak 15.04.2020 14456
			// Если найден контрагент с таким же ИНН, то обновим существующий
		//Если НайденныйЭлемент <> Справочники.Scan_Контрагенты.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" Тогда
			// rarus tenkam 18.01.2019 mantis 13895 ---	
			//Обновим найденный элемент
			// rarus tenkam 16.04.2020 mantis 15797 +++
			//ОбъектСсылка = ОбновитьКонтрагентаНовая(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации); //rarus bonmak 15.04.2020 14456 
			//ОбъектСсылка = ОбновитьКонтрагента(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			// rarus tenkam 16.04.2020 mantis 15797 ---
		//Иначе
			//Создадим новый элемент 
			// rarus tenkam 16.04.2020 mantis 15797 +++
			ОбъектСсылка = СоздатьКонтрагентаНовая(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ГруппаКонтрагента);
			//ОбъектСсылка = СоздатьКонтрагента(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ГруппаКонтрагента);
			// rarus tenkam 16.04.2020 mantis 15797 ---
		//КонецЕсли;
	Иначе
		// rarus tenkam 16.04.2020 mantis 15797 +++
		ОбъектСсылка = ОбновитьКонтрагентаНовая(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		//ОбъектСсылка = ОбновитьКонтрагента(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		// rarus tenkam 16.04.2020 mantis 15797 --
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

//// СОП
Функция РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ПолучитьТолькоGUID = Ложь, ПродуктыБезЦен = Неопределено) Экспорт //Rarus bonmak 18405 26.11.2021 добавил параметр ПолучитьТолькоGUID  //rarus vikhle 16.06.2022 m 18981 + ПродуктыБезЦен
	Если ИмяМетодаWS = "GetListOfSOP" Тогда
		//Получим все элементы из списка
		ОбъектВидыПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.СОППродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		//Rarus bonmak 18405 26.11.2021 ++
		Если ПолучитьТолькоGUID Тогда
			Если ТипЗнч(ОбъектВидыПродуктов) = Тип("СписокXDTO") Тогда
				Если ОбъектВидыПродуктов.Количество() = 1 Тогда
					GUIDДоговора = ОбъектВидыПродуктов[0].GUID;
					Возврат GUIDДоговора;
				ИначеЕсли ОбъектВидыПродуктов.Количество() > 1 Тогда 
				 	СообщениеОбОшибке = "Методом GetListOfSOP по номеру договора вернулось больше 1 договора";	
					Отказ = Ложь;
					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB("Веб-сервис.GetListOfSOP", ОбъектВидыПродуктов[0].Наименование, ОбъектВидыПродуктов[0].GUID, СообщениеОбОшибке);
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			Возврат Неопределено;	
		КонецЕсли;
		//Rarus bonmak 18405 26.11.2021 --
		
		Для Каждого ТекЭлемент Из ОбъектВидыПродуктов Цикл
			ИмяМетодаНовое = "GetSOP";
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
			СтруктураПараметров["GUID"] = ТекЭлемент.GUID;
			
			ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
			
			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
			Если НЕ Отказ Тогда
				РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяНовогоСобытияЖурналаРегистрации,ИмяМетодаНовое);
				//rarus tenkam 16.03.2017 mantis 7623 +++	
				Если Отказ Тогда
					Отказ = Ложь;
					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ТекЭлемент.Наименование, ТекЭлемент.GUID, СообщениеОбОшибке);
					Продолжить;
				КонецЕсли;
			Иначе
				Отказ = Ложь;
				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ТекЭлемент.Наименование, ТекЭлемент.GUID, ТекЭлементОтвет);
				Продолжить;
				//rarus tenkam 16.03.2017 mantis 7623 ---	
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли ИмяМетодаWS = "GetSOP" Тогда
		//Получим однин элемент
		ОбъектВидПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СОП", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, СообщениеОбОшибке); //rarus bonmak 14790 30.08.2019 добавил СообщениеОбОшибке	
		Если Отказ Тогда 
			//СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации"; //rarus bonmak 14790 30.08.2019 вернется из функции выше
			Возврат Неопределено;
		КонецЕсли;
		
		ТекСОП = РазобратьСОП(ОбъектВидПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ПродуктыБезЦен); //rarus vikhle 16.03.2022 m 18981 + ПродуктыБезЦен 
		Возврат ТекСОП;
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
		
КонецФункции

Функция РазобратьСОП(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ПродуктыБезЦен = Неопределено) Экспорт //rarus vikhle 16.03.2022 m 18981 + ПродуктыБезЦен
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetSOP");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;

	НайденныйЭлемент = Справочники.Scan_ДоговорыВзаиморасчетов.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка() Тогда
		
		// rarus tenkam 01.10.2020 mantis 16181 +++		
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьНовыйАлгоритмСозданияДоговоров") Тогда
			// Источником СОП является OFMS - ничего не делаем
			Отказ = Истина;
			СообщениеОбОшибке = "Из 1БД передан СОП, которого нет в OFMS. ID Externla System: " + СтруктураРеквизитов.IDExternalSystem; 
			Возврат Неопределено;
		КонецЕсли;      		
		// rarus tenkam 01.10.2020 mantis 16181 ---
		
		//Элемента с таким GUID нет
		//Если есть элемент с таким же номером договора, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники.Scan_ДоговорыВзаиморасчетов.НайтиПоРеквизиту("НомерДоговора", СтруктураРеквизитов.НомерДоговора);
		Если НайденныйЭлемент <> Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка() И НайденныйЭлемент.IDExternalSystem = "" Тогда
			//Обновим найденный элемент
			// rarus tenkam 16.04.2020 mantis 15797 +++
			ОбъектСсылка = ОбновитьСОПНовая(НайденныйЭлемент, XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			//ОбъектСсылка = ОбновитьСОП(НайденныйЭлемент, XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			// rarus tenkam 16.04.2020 mantis 15797 ---
		Иначе
			//Создадим новый элемент 
			// rarus tenkam 16.04.2020 mantis 15797 +++
			ОбъектСсылка = СоздатьСОПНовая(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			//ОбъектСсылка = СоздатьСОП(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			// rarus tenkam 16.04.2020 mantis 15797 ---
		КонецЕсли;
	Иначе
		// rarus tenkam 01.10.2020 mantis 16181 +++		
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьНовыйАлгоритмСозданияДоговоров") Тогда
			ОбъектСсылка = ОбновитьСтатусПредоплатыСОП(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			//rarus vikhle 16.03.2022 m 18981 +++
			Если НЕ ПродуктыБезЦен = Неопределено Тогда
				ЗаполнитьЦеныПродуктовСОП(ПродуктыБезЦен, СтруктураРеквизитов);	
			КонецЕсли;	
			//rarus vikhle 16.03.2022 m 18981 ---
		Иначе
		// rarus tenkam 01.10.2020 mantis 16181 ---

			// rarus tenkam 16.04.2020 mantis 15797 +++
			ОбъектСсылка = ОбновитьСОПНовая(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			//ОбъектСсылка = ОбновитьСОП(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			// rarus tenkam 16.04.2020 mantis 15797 ---
		КонецЕсли;	// rarus tenkam 01.09.2020 mantis 16181 +
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьСОПНовая(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)	// rarus tenkam 11.03.2020 mantis 15797 +++
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetSOP");
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	
	Если СоответствиеДопРеквизитов1БД["Статус"] <> Неопределено Тогда
		Если СоответствиеДопРеквизитов1БД["Статус"] = "Закрыт" Тогда
			СообщениеОбОшибке = "Не удалось создать СОП  (Статус СОП - закрыт)";
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	МассивЗаказов = Новый Массив;
		
	НовыйОбъект = Справочники.Scan_ДоговорыВзаиморасчетов.СоздатьЭлемент();
	НовыйОбъект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение;
	НовыйОбъект.Бессрочный = Истина; 	
	
	// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "Дилер" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				Продолжить;
			Иначе
				//rarus bonmak 15.04.2020 14456 ++
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("GUID", СтруктураРеквизитов[ТекРеквизит.ИмяРекв].GUID);
				Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetCompany(ДопПараметры);
				//rarus bonmak 15.04.2020 14456 --
		
				НайденныйДилер = Справочники.Scan_Компании.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов[ТекРеквизит.ИмяРекв].GUID); //rarus bonmak 04.12.2019 14456
				Если ЗначениеЗаполнено(НайденныйДилер) Тогда
					ЗначениеВладельца = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьДилераПоКомпании(НайденныйДилер); //rarus bonmak 04.12.2019 14456
					НовыйОбъект.Владелец = ЗначениеВладельца; //rarus bonmak 15.04.2020 14456 НайденныйДилер.Контрагент;
					НовыйОбъект.Компания = НайденныйДилер; //rarus bonmak 15.04.2020 14456
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТекРеквизит.ИмяРекв = "Продукты" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] <> Неопределено Тогда
				Для Каждого ЭлПродукт Из СтруктураРеквизитов[ТекРеквизит.ИмяРекв].ПродуктСОП Цикл
					НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", ЭлПродукт.Продукт.GUID);
					Если ЗначениеЗаполнено(НайденноеИзделие) Тогда
						//rarus bonmak 09.08.2021 16834 ++
						//ТекЦенаИМестоДоставкиПродукта = ПолучитьЦенуИМестоДоставкиПродуктаСОП(ЭлПродукт);	// rarus tenkam 15.10.2020 mantis 16181 +
						//
						//НоваяСтрокаТЧ = НовыйОбъект.СпецификацияКСОП.Добавить();
						//НоваяСтрокаТЧ.СОП_Изделие = НайденноеИзделие;
						//// rarus tenkam 15.10.2020 mantis 16181 +++
						////НоваяСтрокаТЧ.СОП_МестоДоставки = ЭлПродукт.МестоДоставки;
						////НоваяСтрокаТЧ.СОП_ЦенаПродажиБезНДС = ЭлПродукт.Цена;
						//НоваяСтрокаТЧ.СОП_МестоДоставки = ТекЦенаИМестоДоставкиПродукта.МестоДоставки;
						//НоваяСтрокаТЧ.СОП_ЦенаПродажиБезНДС = ТекЦенаИМестоДоставкиПродукта.Цена;
						//// rarus tenkam 15.10.2020 mantis 16181 ---
						//НоваяСтрокаТЧ.СОП_СрокПоставки = ЭлПродукт.СрокПоставки;
						//НоваяСтрокаТЧ.СОП_Количество = 1;
						//НоваяСтрокаТЧ.СОП_СебестоимостьБезНДС = НайденноеИзделие.СебестоимостьЛогистическая;
						//// rarus tenkam 15.10.2020 mantis 16181 +++
						////НоваяСтрокаТЧ.СОП_СуммаПродажиБезНДС = ЭлПродукт.Цена * НоваяСтрокаТЧ.СОП_Количество;
						//НоваяСтрокаТЧ.СОП_СуммаПродажиБезНДС = НоваяСтрокаТЧ.СОП_ЦенаПродажиБезНДС * НоваяСтрокаТЧ.СОП_Количество;
						//// rarus tenkam 15.10.2020 mantis 16181 ---
						//rarus bonmak 09.08.2021 16834 --
						Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
							МассивЗаказов.Добавить(НайденноеИзделие.ЗаказНаЗавод);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			Продолжить;			
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	//rarus bonmak 09.08.2021 16834 НовыйОбъект.СОП_ОсновнойДоговор = Scan_ВспомогательныеФункцииСервер.ПолучитьОсновнойДоговорКонграгента(НовыйОбъект.Владелец);	//(update)
	НовыйОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");	//(update)
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	НовыйОбъект.СОП_ДатаОбновления = ТекущаяДата();
	
	ТекНаименование = "";
	Если ЗначениеЗаполнено(НовыйОбъект.НомерДоговора) Тогда
		ТекНаименование = ТекНаименование + "№ " + СокрЛП(НовыйОбъект.НомерДоговора);
	КонецЕсли;
	Если ЗначениеЗаполнено(НовыйОбъект.ДатаНачала) Тогда
		ТекНаименование = ТекНаименование + " от " + Формат(НовыйОбъект.ДатаНачала,"ДЛФ=Д");
	КонецЕсли;
	НовыйОбъект.Наименование = ТекНаименование;
	
	//Справочники.Scan_ДоговорыВзаиморасчетов.РассчитатьСуммыПоСОП(НовыйОбъект);	
	
	Если СоответствиеДопРеквизитов1БД["Статус предоплаты"] <> Неопределено Тогда	// СОП_СтатусОплаты
		НовыйОбъект.СОП_СтатусОплаты = СоответствиеДопРеквизитов1БД["Статус предоплаты"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Основной договор"] <> Неопределено Тогда // Основной договор
	КонецЕсли;	
			
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
		
		Для Каждого ТекЗаказ Из МассивЗаказов Цикл
			//rarus bonmak 09.08.2021 16834 РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ТекЗаказ, Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, НовыйОбъект.ДатаНачала, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП"), ТекущаяДата());
			АктуализироватьДатуОбновления(ТекЗаказ);
		КонецЦикла;
		
	Исключение
		СообщениеОбОшибке = "Не удалось создать СОП  (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьСОПНовая(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт	// rarus tenkam 11.03.2020 mantis 15797 +++
	
	//Закрытые СОП не будем обновлять
	//rarus bonmak 09.08.2021 16834 ++
	//Если ЭлементСсылка.СОП_Закрыт = Истина Тогда
	//	Возврат ЭлементСсылка;
	//КонецЕсли;                      
	//rarus bonmak 09.08.2021 16834 --
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetSOP");
	
	СоответствиеРеквизитовДляЗаписи = Новый Соответствие;
	
	НужноОбновлять = Ложь;
	
	// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "Дилер" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				Продолжить;
			Иначе
				//rarus bonmak 15.04.2020 14456 ++
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("GUID", СтруктураРеквизитов[ТекРеквизит.ИмяРекв].GUID);
				Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetCompany(ДопПараметры);
				//rarus bonmak 15.04.2020 14456 --
				
				НайденныйДилер = Справочники.Scan_Компании.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов[ТекРеквизит.ИмяРекв].GUID); //rarus bonmak 04.12.2019 14456
				Если ЗначениеЗаполнено(НайденныйДилер) Тогда
					//rarus bonmak 15.04.2020 14456 ++
					//ЗначениеВладельца = НайденныйДилер.Контрагент;
					Если ЗначениеЗаполнено(НайденныйДилер) И НайденныйДилер <> ЭлементСсылка["Компания"] Тогда //rarus bonmak 26.08.2020 16494 добавил условие
						СоответствиеРеквизитовДляЗаписи.Вставить("Компания", НайденныйДилер); //rarus bonmak 15.04.2020 14456 
					КонецЕсли;					
					//rarus agar 27.11.2020 16851 ++
					//Если ЗначениеЗаполнено(ЭлементСсылка["Владелец"]) Тогда
					//	Продолжить;
					//КонецЕсли;
					//rarus agar 27.11.2020 16851 --
					ЗначениеВладельца = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьДилераПоКомпании(НайденныйДилер);
					//rarus bonmak 15.04.2020 14456 --
					Если ЗначениеЗаполнено(ЗначениеВладельца) И ЗначениеВладельца <> ЭлементСсылка["Владелец"] Тогда
						СоответствиеРеквизитовДляЗаписи.Вставить("Владелец", ЗначениеВладельца);
					КонецЕсли;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТекРеквизит.ИмяРекв = "Продукты" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] <> Неопределено Тогда
				СписокПродуктов = СтруктураРеквизитов[ТекРеквизит.ИмяРекв].ПродуктСОП;
				
				ВремТаблЗначений = Новый ТаблицаЗначений;
				//rarus bonmak 09.08.2021 16834 ТаблПродуктовСправочника = ЭлементСсылка.СпецификацияКСОП;
				
				// Массив продуктов, которые принадлежат СОПу в 1БД и есть в TLMS 
				МассивПродуктов1БД = Новый Массив;
				//rarus bonmak 09.08.2021 16834 ++
				//Для Каждого СтрокаСписка Из СписокПродуктов Цикл
				//	
				//	// Количество изделий в СОПе совпадает
				//	НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрокаСписка.Продукт.GUID);
				//	// Продукта из 1ДБ нет в базе - пропускаем
				//	Если НЕ ЗначениеЗаполнено(НайденноеИзделие) Тогда	
				//	    Продолжить;
				//	КонецЕсли;
				//	
				//	МассивПродуктов1БД.Добавить(НайденноеИзделие);
				//	
				//	НайденныйВТабл = ТаблПродуктовСправочника.Найти(НайденноеИзделие,"СОП_Изделие");
				//	// В справочнике нет продукта, полученного из 1БД - нужно обновлять
				//	Если НЕ ЗначениеЗаполнено(НайденныйВТабл) Тогда
				//		НужноОбновлять = Истина;
				//		Продолжить;
				//	КонецЕсли;
				//	ТекСебестоимость = НайденноеИзделие.СебестоимостьЛогистическая;
				//	
				//	ТекЦенаИМестоДоставкиПродукта = ПолучитьЦенуИМестоДоставкиПродуктаСОП(СтрокаСписка);	// rarus tenkam 15.10.2020 mantis 16181 +
				//	
				//	// Какой-то из реквизитов ТЧ отличается - нужно обновить
				//	// rarus tenkam 15.10.2020 mantis 16181 +++
				//	//Если НайденныйВТабл.СОП_МестоДоставки <> СтрокаСписка.МестоДоставки ИЛИ
				//	//	НайденныйВТабл.СОП_ЦенаПродажиБезНДС <> СтрокаСписка.Цена ИЛИ
				//	Если НайденныйВТабл.СОП_МестоДоставки <> ТекЦенаИМестоДоставкиПродукта.МестоДоставки ИЛИ
				//		НайденныйВТабл.СОП_ЦенаПродажиБезНДС <> ТекЦенаИМестоДоставкиПродукта.Цена ИЛИ
				//	// rarus tenkam 15.10.2020 mantis 16181 ---
				//		НайденныйВТабл.СОП_СрокПоставки <> СтрокаСписка.СрокПоставки ИЛИ
				//		НайденныйВТабл.СОП_СебестоимостьБезНДС <> ТекСебестоимость Тогда
				//		НужноОбновлять = Истина;
				//		Продолжить;
				//	КонецЕсли;
				//КонецЦикла;	
				//
				//Если НЕ НужноОбновлять И МассивПродуктов1БД.Количество() <> ТаблПродуктовСправочника.Количество() Тогда
				//	НужноОбновлять = Истина;
				//	Продолжить;
				//КонецЕсли;
				//rarus bonmak 09.08.2021 16834 --
			КонецЕсли;
			Продолжить;
		ИначеЕсли ТекРеквизит.ИмяРекв = "Наименование" Тогда
			Продолжить;			
		Иначе			
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;

		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	
	Если СоответствиеДопРеквизитов1БД["Статус предоплаты"] <> Неопределено Тогда
		Если ЭлементСсылка.СОП_СтатусОплаты <> СоответствиеДопРеквизитов1БД["Статус предоплаты"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("СОП_СтатусОплаты", СоответствиеДопРеквизитов1БД["Статус предоплаты"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Статус"] <> Неопределено Тогда
		//rarus bonmak 09.08.2021 16834 ++
		//Если ЭлементСсылка.СОП_Закрыт <> СоответствиеДопРеквизитов1БД["Статус"] Тогда
		//	СоответствиеРеквизитовДляЗаписи.Вставить("СОП_Закрыт", СоответствиеДопРеквизитов1БД["Статус"]);
		//КонецЕсли;
		//rarus bonmak 09.08.2021 16834 --
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Основной договор"] <> Неопределено Тогда		
	КонецЕсли;
	
	Если НужноОбновлять ИЛИ СоответствиеРеквизитовДляЗаписи.Количество() <> 0 Тогда
		
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		
		Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписи Цикл
			ТекОбъект[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
		КонецЦикла;
	
		МассивЗаказов = Новый Массив;
		
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			
			Если ТекРеквизит.ИмяРекв = "Продукты" Тогда
				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] <> Неопределено Тогда
					
					// Массив продуктов, которые принадлежат СОПу в 1БД и есть в TLMS 
					МассивПродуктов1БД = Новый Массив;
					
					Для Каждого ЭлПродукт Из СтруктураРеквизитов[ТекРеквизит.ИмяРекв].ПродуктСОП Цикл						
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", ЭлПродукт.Продукт.GUID);
						Если ЗначениеЗаполнено(НайденноеИзделие) Тогда
							
							МассивПродуктов1БД.Добавить(НайденноеИзделие);
							
							ТекЦенаИМестоДоставкиПродукта = ПолучитьЦенуИМестоДоставкиПродуктаСОП(ЭлПродукт);	// rarus tenkam 15.10.2020 mantis 16181 +
							//rarus bonmak 09.08.2021 16834 ++
							//НайденнаяСтрока = ТекОбъект.СпецификацияКСОП.Найти(НайденноеИзделие, "СОП_Изделие");
							//Если НайденнаяСтрока = Неопределено Тогда
							//	НоваяСтрокаТЧ = ТекОбъект.СпецификацияКСОП.Добавить();
							//Иначе
							//	НоваяСтрокаТЧ = НайденнаяСтрока;
							//КонецЕсли;
							//НоваяСтрокаТЧ.СОП_Изделие = НайденноеИзделие;
							//// rarus tenkam 15.10.2020 mantis 16181 +++
							////НоваяСтрокаТЧ.СОП_МестоДоставки = ЭлПродукт.МестоДоставки;
							////НоваяСтрокаТЧ.СОП_ЦенаПродажиБезНДС = ЭлПродукт.Цена;
							//НоваяСтрокаТЧ.СОП_МестоДоставки = ТекЦенаИМестоДоставкиПродукта.МестоДоставки;
							//НоваяСтрокаТЧ.СОП_ЦенаПродажиБезНДС = ТекЦенаИМестоДоставкиПродукта.Цена;
							//// rarus tenkam 15.10.2020 mantis 16181 ---
							//НоваяСтрокаТЧ.СОП_СрокПоставки = ЭлПродукт.СрокПоставки;
							//НоваяСтрокаТЧ.СОП_Количество = 1;
							//НоваяСтрокаТЧ.СОП_СебестоимостьБезНДС = НайденноеИзделие.СебестоимостьЛогистическая;
							//// rarus tenkam 15.10.2020 mantis 16181 +++
							////НоваяСтрокаТЧ.СОП_СуммаПродажиБезНДС = ЭлПродукт.Цена * НоваяСтрокаТЧ.СОП_Количество;
							//НоваяСтрокаТЧ.СОП_СуммаПродажиБезНДС = НоваяСтрокаТЧ.СОП_ЦенаПродажиБезНДС * НоваяСтрокаТЧ.СОП_Количество;
							//// rarus tenkam 15.10.2020 mantis 16181 ---
							//rarus bonmak 09.08.2021 16834 --
							Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
								МассивЗаказов.Добавить(НайденноеИзделие.ЗаказНаЗавод);
							КонецЕсли;
						Иначе 
							ТекНаименование = "";
							Если ЗначениеЗаполнено(СтруктураРеквизитов.НомерДоговора) Тогда
								ТекНаименование = ТекНаименование + "№ " + СокрЛП(СтруктураРеквизитов.НомерДоговора);
							КонецЕсли;
							Если ЗначениеЗаполнено(СтруктураРеквизитов.ДатаНачала) Тогда
								ТекНаименование = ТекНаименование + " от " + Формат(СтруктураРеквизитов.ДатаНачала,"ДЛФ=Д");
							КонецЕсли;
							СообщениеОбОшибке = "Для договора: " + ТекНаименование +  " не найдет продукт: " + ЭлПродукт.Продукт.GUID;
							Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка); 					
						КонецЕсли;						
					КонецЦикла;
					
					//rarus bonmak 09.08.2021 16834 ++
					//МассивСтрокУдаления = Новый Массив;
					//Для Каждого ТекСтрокаПродуктСОП Из ТекОбъект.СпецификацияКСОП Цикл
					//	Если МассивПродуктов1БД.Найти(ТекСтрокаПродуктСОП.СОП_Изделие) = Неопределено Тогда
					//		// Продукт был удален в 1БД => удалим и у нас
					//		МассивСтрокУдаления.Добавить(ТекСтрокаПродуктСОП);
					//	КонецЕсли;
					//КонецЦикла;
					//
					//Для Каждого ТекСтрУдаления Из МассивСтрокУдаления Цикл
					//	//rarus bonmak 09.08.2021 16834 ++
					//	//НаборЗаписей = РегистрыСведений.Scan_ИсторияПоСОП.СоздатьНаборЗаписей();
					//	//НаборЗаписей.Отбор.Договор.Установить(ТекОбъект.Ссылка);
					//	//НаборЗаписей.Отбор.Изделие.Установить(ТекСтрокаПродуктСОП.СОП_Изделие);						
					//	//НаборЗаписей.Записать(); 
					//	//rarus bonmak 09.08.2021 16834 --
					//	ТекОбъект.СпецификацияКСОП.Удалить(ТекСтрУдаления);	
					//КонецЦикла;
					//rarus bonmak 09.08.2021 16834 --
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		ТекОбъект.СОП_ДатаОбновления = ТекущаяДата();
		
		ТекНаименование = "";
		Если ЗначениеЗаполнено(ТекОбъект.НомерДоговора) Тогда
			ТекНаименование = ТекНаименование + "№ " + СокрЛП(ТекОбъект.НомерДоговора);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекОбъект.ДатаНачала) Тогда
			ТекНаименование = ТекНаименование + " от " + Формат(ТекОбъект.ДатаНачала,"ДЛФ=Д");
		КонецЕсли;                    
		
		ТекОбъект.Наименование = ТекНаименование;
		//Справочники.Scan_ДоговорыВзаиморасчетов.РассчитатьСуммыПоСОП(ТекОбъект);
		
		Попытка 
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			
			Для Каждого ТекЗаказ Из МассивЗаказов Цикл
				//rarus bonmak 09.08.2021 16834 РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ТекЗаказ, Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ТекОбъект.ДатаНачала, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП"), ТекущаяДата());
				АктуализироватьДатуОбновления(ТекЗаказ);
			КонецЦикла;
						
		Исключение
			СообщениеОбОшибке = "Не удалось записать СОП ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции

Функция ОбновитьСтатусПредоплатыСОП(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)	// rarus tenkam 01.10.2020 mantis 16181 +++
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetSOP");
	
	СоответствиеРеквизитовДляЗаписи = Новый Соответствие;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	
	Если СоответствиеДопРеквизитов1БД["Статус предоплаты"] <> Неопределено Тогда
		Если ЭлементСсылка.СОП_СтатусОплаты <> СоответствиеДопРеквизитов1БД["Статус предоплаты"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("СОП_СтатусОплаты", СоответствиеДопРеквизитов1БД["Статус предоплаты"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеРеквизитовДляЗаписи.Количество() <> 0 Тогда
		
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		
		Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписи Цикл
			ТекОбъект[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
		КонецЦикла;
	
		МассивЗаказов = Новый Массив;
				
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		ТекОбъект.СОП_ДатаОбновления = ТекущаяДата();
				
		Попытка 
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать СОП ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции

Функция ПолучитьЦенуИМестоДоставкиПродуктаСОП(СтрокаПродуктаXDTOОбъект)		// rarus tenkam 15.10.2020 mantis 16181 +
	СтруктураПродукт = Новый Структура;
	КоллекцияСвойствПродукта = СтрокаПродуктаXDTOОбъект.Свойства();
	
	ЦенаПродукта = КоллекцияСвойствПродукта.Получить("Цена");
	Если ЦенаПродукта = Неопределено Тогда
		ЦенаПродукта = 0;
	Иначе
		ЦенаПродукта = ?(СтрокаПродуктаXDTOОбъект.Цена = Неопределено, 0, СтрокаПродуктаXDTOОбъект.Цена);
	КонецЕсли;
	
	МестоДоставкиПродукта = КоллекцияСвойствПродукта.Получить("МестоДоставки");
	Если МестоДоставкиПродукта = Неопределено Тогда
		МестоДоставкиПродукта = "";
	Иначе
		МестоДоставкиПродукта = ?(СтрокаПродуктаXDTOОбъект.МестоДоставки = Неопределено, "", СтрокаПродуктаXDTOОбъект.МестоДоставки);
	КонецЕсли;
	
	СтруктураПродукт.Вставить("Цена", ЦенаПродукта);
	СтруктураПродукт.Вставить("МестоДоставки", МестоДоставкиПродукта);
	
	Возврат СтруктураПродукт; 
КонецФункции

Процедура ЗаполнитьЦеныПродуктовСОП(ПродуктыБезЦен, Знач СтруктураРеквизитов) //rarus vikhle 16.03.2022 m 18981 +++
	
	Если СтруктураРеквизитов.Свойство("Продукты") Тогда
		Для Каждого СтрокаСписка Из СтруктураРеквизитов.Продукты.ПродуктСОП Цикл 
			
			СтрокаТЗ = ПродуктыБезЦен.Найти(СтрокаСписка.Продукт.Guid, "GUID");
			Если НЕ СтрокаТЗ = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаСписка);	
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЕсли;		
	
КонецПроцедуры //rarus vikhle 16.03.2022 m 18981 ---	

// rarus tenkam 25.04.2019 mantis 14223 +++

//// ЗАВОДСКИЕ СТАТУСЫ НА ЗАВОД
Функция РазборОтветаСправочникЗаводскиеСтатусы(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ВидСтатуса = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetListOfStatuses" Тогда
		//Получим все элементы из списка
		ОбъектСтатусы = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Статусы", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектСтатусы Цикл
			РазобратьЗаводскойСтатус(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;      	
		
КонецФункции

Функция РазобратьЗаводскойСтатус(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetListOfStatuses");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ЗаводскиеСтатусыЗаказаНаЗавод.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_ЗаводскиеСтатусыЗаказаНаЗавод.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Создадим новый элемент 
		ОбъектСсылка = СоздатьЗаводскойСтатус(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	Иначе
		ОбъектСсылка = ОбновитьЗаводскойСтатус(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьЗаводскойСтатус(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	// rarus tenkam 13.09.2019 mantis 14576 +++
	Если СтруктураРеквизитов.Свойство("СтатусCOW") И СтруктураРеквизитов.СтатусCOW = Неопределено Тогда
		// Это локальный статус
		Возврат Неопределено;	
	КонецЕсли;
	// rarus tenkam 13/09/2019 mantis 14576 ---
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfStatuses");
	
	НовыйОбъект = Справочники.Scan_ЗаводскиеСтатусыЗаказаНаЗавод.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		//rarus bonmak 23.12.2019 15530 ++
		Если ТекРеквизит.ИмяРекв = "КодСтатуса" Тогда
			//данный реквизит присутствует в справочнике локальные статусы
			Продолжить;
		КонецЕсли;
		//rarus bonmak 23.12.2019 15530 --
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать заводской статус заказа на завод (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьЗаводскойСтатус(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfStatuses");
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		//rarus bonmak 23.12.2019 15530 ++
		Если ТекРеквизит.ИмяРекв = "КодСтатуса" Тогда
			//данный реквизит присутствует в справочнике локальные статусы
			Продолжить;
		КонецЕсли;
		//rarus bonmak 23.12.2019 15530 --
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			//rarus bonmak 23.12.2019 15530 ++
			Если ТекРеквизит.ИмяРекв = "КодСтатуса" Тогда
				//данный реквизит присутствует в справочнике локальные статусы
				Продолжить;
			КонецЕсли;
			//rarus bonmak 23.12.2019 15530 --
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				//обработка реквизитов
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать заводской статус заказа на завод (" + ЭлементСсылка + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции
// rarus tenkam 25.04.2019 mantis 14223 ---

// rarus tenkam 13.09.2019 mantis 14576 +++

//// ЛОКАЛЬНЫЕ СТАТУСЫ ПРОДУКТОВ
Функция РазборОтветаСправочникЛокальныеСтатусы(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ВидСтатуса = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetListOfStatuses" Тогда
		//Получим все элементы из списка
		ОбъектСтатусы = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Статусы", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектСтатусы Цикл
			РазобратьЛокальныйСтатус(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;      	
		
КонецФункции

Функция РазобратьЛокальныйСтатус(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetListOfStatuses");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;
	
	//rarus BProg_Dekin 25.05.2020 mantis 0015999 ++ Изменил наименование справочника с локальными статусами
	//НайденныйЭлемент = Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	//Если НайденныйЭлемент = Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.ПустаяСсылка() Тогда
	//	//Элемента с таким GUID нет - найдем по наименованию предопределенные
	//	НайденныйЭлемент = Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
	//	Если НайденныйЭлемент = Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.ПустаяСсылка() ИЛИ НЕ НайденныйЭлемент.Предопределенный Тогда
	//		
	НайденныйЭлемент = Справочники.Scan_ЛокальныеСтатусыПродуктов.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_ЛокальныеСтатусыПродуктов.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет - найдем по наименованию предопределенные
		НайденныйЭлемент = Справочники.Scan_ЛокальныеСтатусыПродуктов.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
		Если НайденныйЭлемент = Справочники.Scan_ЛокальныеСтатусыПродуктов.ПустаяСсылка() ИЛИ НЕ НайденныйЭлемент.Предопределенный Тогда
		//rarus BProg_Dekin 25.05.2020 mantis 0015999 --
			//Создадим новый элемент 
			ОбъектСсылка = СоздатьЛокальныйСтатус(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Иначе
			ОбъектСсылка = ОбновитьЛокальныйСтатус(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		КонецЕсли;
	Иначе
		ОбъектСсылка = ОбновитьЛокальныйСтатус(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьЛокальныйСтатус(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	Если СтруктураРеквизитов.Свойство("СтатусCOW") И СтруктураРеквизитов.СтатусCOW <> Неопределено Тогда
		// Это заводской статус
		Возврат Неопределено;	
	КонецЕсли;
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfStatuses");

	//rarus BProg_Dekin 25.05.2020 mantis 0015999 ++ Изменил наименование справочника с локальными статусами
	//НовыйОбъект = Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.СоздатьЭлемент();
	НовыйОбъект = Справочники.Scan_ЛокальныеСтатусыПродуктов.СоздатьЭлемент();
	//rarus BProg_Dekin 25.05.2020 mantis 0015999 --
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать локальный статус продукта (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьЛокальныйСтатус(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfStatuses");
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				//обработка реквизитов
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать заводской статус продукта (" + ЭлементСсылка + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции

// rarus tenkam 13.09.2019 mantis 14576 ---

//// ТИПЫ КАБИН
Функция РазобратьТипКабины(ОбъектXDTOТипаКабины, СообщениеОбОшибке = "") Экспорт
	Если ОбъектXDTOТипаКабины = Неопределено Тогда
		Возврат Справочники.Scan_ТипыКабинИзделий.ПустаяСсылка();
	КонецЕсли;
	
	НайденныйТипКабины = Справочники.Scan_ТипыКабинИзделий.НайтиПоРеквизиту("IDExternalSystem", ОбъектXDTOТипаКабины.GUID);
	
	Если НайденныйТипКабины = Справочники.Scan_ТипыКабинИзделий.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименование, но пустым ID, то запишем в него ID
		НайденныйТипКабины = Справочники.Scan_ТипыКабинИзделий.НайтиПоНаименованию(ОбъектXDTOТипаКабины.Наименование);
		Если НайденныйТипКабины <> Справочники.Scan_ТипыКабинИзделий.ПустаяСсылка() И НайденныйТипКабины.IDExternalSystem = "" Тогда
			//Обновим найденный элемент
			ОбъектСсылка = ОбновитьТипКабины(НайденныйТипКабины, ОбъектXDTOТипаКабины);
		Иначе
			//Создадим новый элемент 
			ОбъектСсылка = СоздатьТипКабины(ОбъектXDTOТипаКабины)
		КонецЕсли;
	Иначе
		ОбъектСсылка = ОбновитьТипКабины(НайденныйТипКабины, ОбъектXDTOТипаКабины);
	КонецЕсли;
	
	Возврат ОбъектСсылка;						
КонецФункции

Функция ОбновитьТипКабины(ЭлементСсылка, XDTOОбъект)
	Если ЭлементСсылка.Наименование <> XDTOОбъект.Наименование ИЛИ НЕ ЗначениеЗаполнено(ЭлементСсылка.IDExternalSystem) Тогда
		ОбъектТипКабины = ЭлементСсылка.ПолучитьОбъект();
		
		ОбъектТипКабины.Наименование = XDTOОбъект.Наименование;
		ОбъектТипКабины.IDExternalSystem = XDTOОбъект.GUID;
		ОбъектТипКабины.ДатаОбновления = ТекущаяДата();
		
		ОбъектТипКабины.Записать();
	КонецЕсли;
	Возврат ЭлементСсылка;	
КонецФункции

Функция СоздатьТипКабины(XDTOОбъект) 
	НовыйТипКабины = Справочники.Scan_ТипыКабинИзделий.СоздатьЭлемент();
	
	НовыйТипКабины.Наименование = XDTOОбъект.Наименование;
	НовыйТипКабины.IDExternalSystem = XDTOОбъект.GUID;
	НовыйТипКабины.ДатаОбновления = ТекущаяДата();
	
	НовыйТипКабины.Записать();
	ОбъектСсылка = НовыйТипКабины.Ссылка;
	Возврат ОбъектСсылка;	
КонецФункции

//// ВИДЫ ТАХОГРАФОВ
Функция РазобратьВидТахографа(ОбъектXDTOВидаТахографа, РасшифровкаТахографа = "", СообщениеОбОшибке = "") Экспорт
	Если ОбъектXDTOВидаТахографа = Неопределено Тогда
		Возврат Справочники.Scan_ВидыТахографов.ПустаяСсылка();
	КонецЕсли;
	
	НайденныйВидТахографа = Справочники.Scan_ВидыТахографов.НайтиПоРеквизиту("IDExternalSystem", ОбъектXDTOВидаТахографа.GUID);
	
	Если НайденныйВидТахографа = Справочники.Scan_ВидыТахографов.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйВидТахографа = Справочники.Scan_ВидыТахографов.НайтиПоНаименованию(ОбъектXDTOВидаТахографа.Код);
		Если НайденныйВидТахографа <> Справочники.Scan_ВидыТахографов.ПустаяСсылка() И НайденныйВидТахографа.IDExternalSystem = "" Тогда
			//Обновим найденный элемент
			ОбъектСсылка = ОбновитьВидТахографа(НайденныйВидТахографа, ОбъектXDTOВидаТахографа, РасшифровкаТахографа);
		Иначе
			//Создадим новый элемент 
			ОбъектСсылка = СоздатьВидТахографа(ОбъектXDTOВидаТахографа, РасшифровкаТахографа)
		КонецЕсли;
	Иначе
		ОбъектСсылка = ОбновитьВидТахографа(НайденныйВидТахографа, ОбъектXDTOВидаТахографа, РасшифровкаТахографа);
	КонецЕсли;
	
	Возврат ОбъектСсылка;						
КонецФункции

Функция ОбновитьВидТахографа(ЭлементСсылка, XDTOОбъект, РасшифровкаТахографа)
	// rarus tenkam 31.07.2020 mantis 16313 +++
	//Если ЭлементСсылка.Наименование <> XDTOОбъект.Наименование ИЛИ НЕ ЗначениеЗаполнено(ЭлементСсылка.IDExternalSystem) Тогда
	Если НЕ ЗначениеЗаполнено(ЭлементСсылка.IDExternalSystem) ИЛИ
		ЭлементСсылка.Наименование <> XDTOОбъект.Код ИЛИ 
		(РасшифровкаТахографа <> "" И ЭлементСсылка.Расшифровка <> РасшифровкаТахографа) Тогда
	// rarus tenkam 31.07.2020 mantis 16313 ---	
	
		ОбъектВидТахографа = ЭлементСсылка.ПолучитьОбъект();
		
		//ОбъектВидТахографа.Наименование = XDTOОбъект.Наименование;
		ОбъектВидТахографа.IDExternalSystem = XDTOОбъект.GUID;
		//7100 +++
		ОбъектВидТахографа.Наименование = XDTOОбъект.Код;
		Если РасшифровкаТахографа <> "" И ОбъектВидТахографа.Расшифровка <> РасшифровкаТахографа Тогда
			ОбъектВидТахографа.Расшифровка = РасшифровкаТахографа;
		КонецЕсли;
		//7100 ---
		ОбъектВидТахографа.ДатаОбновления = ТекущаяДата();
		
		Попытка	// rarus tenkam 31.07.2020 mantis 16313 +
			ОбъектВидТахографа.Записать();
			Возврат ОбъектВидТахографа.Ссылка; 	// rarus tenkam 31.07.2020 mantis 16313 +
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	Возврат ЭлементСсылка;	
КонецФункции

Функция СоздатьВидТахографа(XDTOОбъект, РасшифровкаТахографа) 
	НовыйВидТахографа = Справочники.Scan_ВидыТахографов.СоздатьЭлемент();
	
	//НовыйВидТахографа.Наименование = XDTOОбъект.Наименование;
	НовыйВидТахографа.IDExternalSystem = XDTOОбъект.GUID;
	//7100 +++
	НовыйВидТахографа.Наименование = XDTOОбъект.Код;
	Если РасшифровкаТахографа <> "" Тогда
		НовыйВидТахографа.Расшифровка = РасшифровкаТахографа;
	КонецЕсли;
	//7100 ---
	НовыйВидТахографа.ДатаОбновления = ТекущаяДата();
	
	Попытка // rarus tenkam 31.07.2020 mantis 16313 +
		НовыйВидТахографа.Записать();
	Исключение
	КонецПопытки;
	ОбъектСсылка = НовыйВидТахографа.Ссылка;
	Возврат ОбъектСсылка;	
КонецФункции

//// МЕСТА ПРОИЗВОДСТВА
Функция РазобратьМестоПроизводства(НаименованиеМестаПроизводства, СообщениеОбОшибке = "") Экспорт
	Если НаименованиеМестаПроизводства = Неопределено Тогда
		Возврат Справочники.Scan_МестаХранения.ПустаяСсылка();
	КонецЕсли;
	
	НайденноеМестоПроизводства = Справочники.Scan_МестаХранения.НайтиПоНаименованию(НаименованиеМестаПроизводства);
	
	Если НайденноеМестоПроизводства = Справочники.Scan_МестаХранения.ПустаяСсылка() Тогда
		//Элемента с таким наименованием нет
		
		// rarus tenkam 13.11.2018 mantis 13713 +++     		
		Если СтрНайти(НаименованиеМестаПроизводства,"Нидерланды")<>0 ИЛИ СтрНайти(НаименованиеМестаПроизводства,"Netherlands")<>0 Тогда
		// Если в наименовании есть Нидерланды
			СтрокаПоиска = "Нидерланды";
			НайденныйСкладПроизводителя = ПолучитьСкладПроизводителяПодобно(СтрокаПоиска);
			Если НЕ ЗначениеЗаполнено(НайденныйСкладПроизводителя) Тогда
				СтрокаПоиска = "Netherlands";
				НайденныйСкладПроизводителя = ПолучитьСкладПроизводителяПодобно(СтрокаПоиска);
				Если ЗначениеЗаполнено(НайденныйСкладПроизводителя) Тогда
					Возврат НайденныйСкладПроизводителя;
				КонецЕсли;
			Иначе
				Возврат НайденныйСкладПроизводителя;
			КонецЕсли;
			
		ИначеЕсли СтрНайти(НаименованиеМестаПроизводства,"Швеция")<>0 ИЛИ СтрНайти(НаименованиеМестаПроизводства,"Sweden")<>0 Тогда
			// ИначеЕсли в наименовании есть Швеция
			СтрокаПоиска = "Швеция";
			НайденныйСкладПроизводителя = ПолучитьСкладПроизводителяПодобно(СтрокаПоиска);
			Если НЕ ЗначениеЗаполнено(НайденныйСкладПроизводителя) Тогда
				СтрокаПоиска = "Sweden";
				НайденныйСкладПроизводителя = ПолучитьСкладПроизводителяПодобно(СтрокаПоиска);
				Если ЗначениеЗаполнено(НайденныйСкладПроизводителя) Тогда
					Возврат НайденныйСкладПроизводителя;
				КонецЕсли;
			Иначе
				Возврат НайденныйСкладПроизводителя;
			КонецЕсли;
		КонецЕсли;
		// rarus tenkam 13.11.2018 mantis 13713 ---
		
		//Создадим новый элемент 
		ОбъектСсылка = СоздатьМестоПроизводства(НаименованиеМестаПроизводства)
	Иначе
		Если НайденноеМестоПроизводства.СкладПроизводителя Тогда
			ОбъектСсылка = НайденноеМестоПроизводства;
		Иначе
			// rarus tenkam 13.11.2018 mantis 13713 +++     		
			Если СтрНайти(НаименованиеМестаПроизводства,"Нидерланды")<>0 ИЛИ СтрНайти(НаименованиеМестаПроизводства,"Netherlands")<>0 Тогда
				// Если в наименовании есть Нидерланды
				СтрокаПоиска = "Нидерланды";
				НайденныйСкладПроизводителя = ПолучитьСкладПроизводителяПодобно(СтрокаПоиска);
				Если НЕ ЗначениеЗаполнено(НайденныйСкладПроизводителя) Тогда
					СтрокаПоиска = "Netherlands";
					НайденныйСкладПроизводителя = ПолучитьСкладПроизводителяПодобно(СтрокаПоиска);
					Если ЗначениеЗаполнено(НайденныйСкладПроизводителя) Тогда
						Возврат НайденныйСкладПроизводителя;
					КонецЕсли;
				Иначе
					Возврат НайденныйСкладПроизводителя;
				КонецЕсли;
				
			ИначеЕсли СтрНайти(НаименованиеМестаПроизводства,"Швеция")<>0 ИЛИ СтрНайти(НаименованиеМестаПроизводства,"Sweden")<>0 Тогда
				// ИначеЕсли в наименовании есть Швеция
				СтрокаПоиска = "Швеция";
				НайденныйСкладПроизводителя = ПолучитьСкладПроизводителяПодобно(СтрокаПоиска);
				Если НЕ ЗначениеЗаполнено(НайденныйСкладПроизводителя) Тогда
					СтрокаПоиска = "Sweden";
					НайденныйСкладПроизводителя = ПолучитьСкладПроизводителяПодобно(СтрокаПоиска);
					Если ЗначениеЗаполнено(НайденныйСкладПроизводителя) Тогда
						Возврат НайденныйСкладПроизводителя;
					КонецЕсли;
				Иначе
					Возврат НайденныйСкладПроизводителя;
				КонецЕсли;
			КонецЕсли;
			// rarus tenkam 13.11.2018 mantis 13713 ---
			
			ОбъектСсылка = СоздатьМестоПроизводства(НаименованиеМестаПроизводства);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектСсылка;						
КонецФункции

Функция СоздатьМестоПроизводства(НаименованиеМестаПроизводства) 
	НовоеМестоПроизводства = Справочники.Scan_МестаХранения.СоздатьЭлемент();
	
	НовоеМестоПроизводства.Наименование = НаименованиеМестаПроизводства;
	НовоеМестоПроизводства.СкладПроизводителя = Истина;
	НовоеМестоПроизводства.ДатаОбновления = ТекущаяДата();
	НовоеМестоПроизводства.Родитель = Справочники.Scan_МестаХранения.МестаХранения;
	НовоеМестоПроизводства.ТипСклада = Перечисления.Scan_ТипыСклада.Производство;
	
	НовоеМестоПроизводства.Записать();
	ОбъектСсылка = НовоеМестоПроизводства.Ссылка;
	Возврат ОбъектСсылка;	
КонецФункции

// rarus tenkam 13.11.2018 mantis 13713 +++
Функция ПолучитьСкладПроизводителяПодобно(СтрокаПодобно) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_МестаХранения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_МестаХранения КАК Scan_МестаХранения
		|ГДЕ
		|	Scan_МестаХранения.СкладПроизводителя
		|	И Scan_МестаХранения.Наименование ПОДОБНО &СтрокаПодобно
		|	И НЕ Scan_МестаХранения.ПометкаУдаления
		|	И НЕ Scan_МестаХранения.Маршрут";
	
	Запрос.УстановитьПараметр("СтрокаПодобно", "%" + СтрокаПодобно + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
		
КонецФункции  
// rarus tenkam 13.11.2018 mantis 13713 ---

//// ПРОДАВЦЫ ЗАКАЗЧИКА
Функция РазобратьПродавцаЗаказчика(НаименованиеМенеджера, СообщениеОбОшибке = "") Экспорт
	Если НаименованиеМенеджера = Неопределено Тогда
		Возврат Справочники.Scan_Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	НайденныйСотрудник = Справочники.Scan_Сотрудники.НайтиПоНаименованию(НаименованиеМенеджера);
	
	Если НайденныйСотрудник = Справочники.Scan_Сотрудники.ПустаяСсылка() Тогда
		//Элемента с таким наименованием нет
		//Создадим новый элемент 
		ОбъектСсылка = СоздатьСотрудника(НаименованиеМенеджера)
	Иначе
		ОбъектСсылка = НайденныйСотрудник;
	КонецЕсли;
	
	Возврат ОбъектСсылка;						
КонецФункции

Функция СоздатьСотрудника(ФИОСотрудника) 
	НовыйСотрудник = Справочники.Scan_Сотрудники.СоздатьЭлемент();
	
	НовыйСотрудник.Наименование = ФИОСотрудника;
	НовыйСотрудник.Записать();
	ОбъектСсылка = НовыйСотрудник.Ссылка;
	Возврат ОбъектСсылка;	
КонецФункции

//// СОБЫТИЕ ДВИЖЕНИЯ ИЗДЕЛИЯ
Функция РазборОтветаОтправкиСобытия(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт
	Если ИмяМетодаWS = "SendProductActivityEvent" ИЛИ ИмяМетодаWS = "SetProductPlace" Тогда
		ОбъектGuid = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		ОтветGUID = ОбъектGuid.GUID;
		Возврат ОтветGUID;
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//// Логирование

Процедура ЗаписьОшибокОбменаNDB(ВидЗапроса, Объект = Неопределено, IDExternalSystem, ПричинаОшибки = "") Экспорт
	
	// rarus tenkam 27.06.2019 mantis 14427 +++
	Если Объект = Неопределено И НЕ ЗначениеЗаполнено(IDExternalSystem) Тогда
		Возврат;
	КонецЕсли;
	// rarus tenkam 27.06.2019 mantis 14427 ---
	
	МенеджерЗаписи = РегистрыСведений.Scan_Обмен1БДНезагруженныеОбъекты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	// rarus tenkam 10.04.2019 mantis 14339 +++
	СтрокаВидЗапроса = СтрЗаменить(ВидЗапроса,"Веб-сервис.","");	
	// rarus tenkam 10.04.2019 mantis 14339 ---                 
	
	// rarus tenkam 18.03.2019 mantis 13629 +++
	// rarus tenkam 10.04.2019 mantis 14339 +++
	//ТекВидЗапроса = ПолучитьПеречислениеПоСтрокеВидаЗапроса(ВидЗапроса);
	ТекВидЗапроса = ПолучитьПеречислениеПоСтрокеВидаЗапроса(СтрокаВидЗапроса);
	// rarus tenkam 10.04.2019 mantis 14339 ---                 

	МенеджерЗаписи.ВидЗапроса = ТекВидЗапроса; 
	//МенеджерЗаписи.ВидЗапроса = ВидЗапроса;
	// rarus tenkam 18.03.2019 mantis 13629 ---
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.IDExternalSystem = IDExternalSystem;
	МенеджерЗаписи.ПричинаОшибки = ПричинаОшибки;
		
	//rarus FominskiyAS 28.02.2019  mantis 13863 +++
	//МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь; 
	МенеджерЗаписи.Пользователь = ПользователиСлужебный.АвторизованныйПользователь();
	//rarus FominskiyAS 28.02.2019  mantis 13863 ---

	МенеджерЗаписи.Записать();            
	
КонецПроцедуры
//rarus tenkam mantis 6897 --

//rarus tenkam 31.07.2017 mantis 10271 +++

//// КОДЫ АДРЕСОВ ДОСТАВКИ
Функция РазобратьКодАдресаДоставки(НаименованиеКодаАдресаДоставки, СообщениеОбОшибке = "") Экспорт
	Если НаименованиеКодаАдресаДоставки = Неопределено Тогда
		Возврат Справочники.Scan_КодыАдресовДоставки.ПустаяСсылка();
	КонецЕсли;
	НаименованиеКодаАдресаДоставки = СокрЛП(НаименованиеКодаАдресаДоставки);
	НайденныйКодАдресаДоставки = Справочники.Scan_КодыАдресовДоставки.НайтиПоНаименованию(НаименованиеКодаАдресаДоставки);
	
	Если НайденныйКодАдресаДоставки = Справочники.Scan_КодыАдресовДоставки.ПустаяСсылка() Тогда
		//Элемента с таким наименованием нет - создадим новый элемент 
		ОбъектСсылка = СоздатьКодАдресаДоставки(НаименованиеКодаАдресаДоставки)
	Иначе
		ОбъектСсылка = НайденныйКодАдресаДоставки;
	КонецЕсли;
	
	Возврат ОбъектСсылка;						
КонецФункции

Функция СоздатьКодАдресаДоставки(НаименованиеКодаАдресаДоставки) 
	НовыйКодАдресаДоставки = Справочники.Scan_КодыАдресовДоставки.СоздатьЭлемент();
	НовыйКодАдресаДоставки.Наименование = НаименованиеКодаАдресаДоставки;
	НовыйКодАдресаДоставки.Записать();
	ОбъектСсылка = НовыйКодАдресаДоставки.Ссылка;
	Возврат ОбъектСсылка;	
КонецФункции
//rarus tenkam 31.07.2017 mantis 10271 ---

//rarus tenkam 09.01.2018 mantis 11952 +++

//// КОЛИЧЕСТВО НА СКЛАДЕ
Функция РазборОтветаНаличиеНаСкладе(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, СтруктураПараметров = Неопределено) Экспорт
	Если ИмяМетодаWS = "StoreInfo" Тогда
		//Получим все элементы из списка
		
		ОбъектСклады = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.StorePartQty", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		ОбщееКоличество = 0;
		Если ТипЗнч(ОбъектСклады) = Тип("СписокXDTO") Тогда
			Для Каждого ТекСклад Из ОбъектСклады Цикл
				КоличествоНаСкладе = РазобратьНаличиеНаСкладе(ТекСклад, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, СтруктураПараметров);
				Если ЗначениеЗаполнено(КоличествоНаСкладе) Тогда
					ОбщееКоличество = ОбщееКоличество + КоличествоНаСкладе;
				КонецЕсли;
				Отказ = Ложь;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ОбъектСклады) = Тип("ОбъектXDTO") Тогда
			КоличествоНаСкладе = РазобратьНаличиеНаСкладе(ОбъектСклады, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, СтруктураПараметров);
			Если ЗначениеЗаполнено(КоличествоНаСкладе) Тогда
				ОбщееКоличество = КоличествоНаСкладе;
			КонецЕсли;
		КонецЕсли;
	
		Возврат ОбщееКоличество;		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция РазобратьНаличиеНаСкладе(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(XDTOОбъект.StoreName) = Тип("ОбъектXDTO") Тогда
		РегистрыСведений.Scan_НаличиеКомплектующихНаСкладе.ОчиститьКоличество(СтруктураПараметров.Комплектующие, 0);
		Возврат 0;
	КонецЕсли;   
	
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "StoreInfo");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;                   	
	

	НайденныйЭлемент = Справочники.Scan_МестаХранения.НайтиПоНаименованию(СтруктураРеквизитов.НаименованиеСклада);
	Если НайденныйЭлемент <> Справочники.Scan_МестаХранения.ПустаяСсылка() И НайденныйЭлемент.ПроверятьНаличиеВ1БД Тогда
		РегистрыСведений.Scan_НаличиеКомплектующихНаСкладе.ЗаписатьКоличество(СтруктураПараметров.Комплектующие, СтруктураРеквизитов.Остаток, НайденныйЭлемент);
		Возврат СтруктураРеквизитов.Остаток;			
	КонецЕсли;
	Возврат Неопределено;				
КонецФункции        

//rarus tenkam 09.01.2018 mantis 11952 ---

//// ОПЦИИ СПЕЦИФИКАЦИЙ ПРОДУКТА ТС
//Процедура ВызватьМетод_GetListOfOptions(ДопПараметры) Экспорт //rarus bonmak 24.09.2019 14177 ++
Функция ВызватьМетод_GetListOfOptions(ДопПараметры) Экспорт //rarus agar 16.02.2021 17130 +-
	ИмяМетода = "GetListOfOptions";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если ДопПараметры.Свойство("GUID") Тогда
		СтруктураПараметров.Вставить("GUID", ДопПараметры.GUID);
	КонецЕсли;
	
	// rarus agar 25.01.2022 18594 ++
	//ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	//ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	//Если НЕ Отказ Тогда
	//	//rarus agar 16.02.2021 17130 ++
	//	//РазборОтветаСправочникОпцииСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	//	РезультатРазбора = РазборОтветаСправочникОпцииСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	//	
	//	Возврат РезультатРазбора;
	//	//rarus agar 16.02.2021 17130 --
	//КонецЕсли;
	
	ВидыПродуктов = Новый Массив;
	Если  ДопПараметры.Свойство("ВидПродукта") 
		И ЗначениеЗаполнено(ДопПараметры.ВидПродукта)
		Тогда
		ВидыПродуктов.Добавить(ДопПараметры.ВидПродукта);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Scan_ВидыПродуктов.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_ВидыПродуктов КАК Scan_ВидыПродуктов
		|ГДЕ
		|	Scan_ВидыПродуктов.IDExternalSystem <> """"
		|	И НЕ Scan_ВидыПродуктов.ПометкаУдаления";
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВидыПродуктов.Добавить(Выборка.IDExternalSystem);
		КонецЦикла;
	КонецЕсли;
	
	Если ВидыПродуктов.Количество() > 0 Тогда
		РезультатВызова = Новый Структура("Получено,Обработано,НеОбработано,Создано,Обновлено,НеобработанныеОпции", 
											0, 0, 0, 0, 0, Новый Массив);
		
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		Для Каждого ВидПродукта Из ВидыПродуктов Цикл
			СтруктураПараметров.Вставить("ВидПродукта", ВидПродукта);
			ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатРазбора = РазборОтветаСправочникОпцииСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ВидПродукта);
			
			Если РезультатРазбора <> Неопределено Тогда
				Если ЗначениеЗаполнено(РезультатРазбора.Получено) Тогда
					РезультатВызова.Получено = РезультатВызова.Получено + РезультатРазбора.Получено;
				КонецЕсли;
				Если ЗначениеЗаполнено(РезультатРазбора.Обработано) Тогда
					РезультатВызова.Обработано   = РезультатРазбора.Обработано;
				КонецЕсли;
				Если ЗначениеЗаполнено(РезультатРазбора.Создано) Тогда
					РезультатВызова.Создано      = РезультатРазбора.Создано;
				КонецЕсли;
				Если ЗначениеЗаполнено(РезультатРазбора.Обновлено) Тогда
					РезультатВызова.Обновлено    = РезультатРазбора.Обновлено;
				КонецЕсли;
				Если ЗначениеЗаполнено(РезультатРазбора.НеОбработано) Тогда
					РезультатВызова.НеОбработано = РезультатРазбора.НеОбработано;
				КонецЕсли;
				Если ЗначениеЗаполнено(РезультатРазбора.НеобработанныеОпции) Тогда
					Для Каждого НеобработаннаяОпция Из РезультатРазбора.НеобработанныеОпции Цикл
						РезультатВызова.НеобработанныеОпции.Добавить(НеобработаннаяОпция);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Отказ = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат РезультатВызова;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	// rarus agar 25.01.2022 18594 --
//КонецПроцедуры //rarus bonmak 24.09.2019 14177 --
КонецФункции //rarus agar 16.02.2021 17130 +-

//Процедура РазборОтветаСправочникОпцииСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 24.09.2019 14177 ++		
//Функция РазборОтветаСправочникОпцииСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus agar 16.02.2021 17130 +-
Функция РазборОтветаСправочникОпцииСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ВидПродукта) Экспорт // rarus agar 25.01.2022 18594 +-
	СписокОпций = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Опции", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;
	
	//rarus agar 16.02.2021 17130 ++
	РезультатРазбора = Новый Структура("Получено,Обработано,НеОбработано,Создано,Обновлено,НеобработанныеОпции");
	Если ТипЗнч(СписокОпций) = Тип("СписокXDTO") Тогда
		РезультатРазбора.Получено = СписокОпций.Количество();
	КонецЕсли;
	
	СчетчикОбработано   = 0;
	СчетчикНеОбработано = 0;
	СчетчикСоздано      = 0;
	СчетчикОбновлено    = 0;
	НеобработанныеОпции = Новый Массив;
	//rarus agar 16.02.2021 17130 --
	
	Для Каждого XDTOОбъект Из СписокОпций Цикл
		//rarus agar 30.10.2020 16659 ++
		КоллекцияСвойствОпции = XDTOОбъект.Свойства();
		
		СвойствоКодОпции = КоллекцияСвойствОпции.Получить("Код");
		Если  СвойствоКодОпции <> Неопределено 
			И СтрНайти(XDTOОбъект.Код, "-") <> 0 
			Тогда
			//rarus agar 29.04.2021 17130 ++
			СчетчикНеОбработано           = СчетчикНеОбработано + 1;
			РезультатРазбора.НеОбработано = СчетчикНеОбработано;
			
			НеобработанныеОпции.Добавить(""+XDTOОбъект.Код+" "+XDTOОбъект.Наименование);
			//rarus agar 29.04.2021 17130 --
			Продолжить;
		КонецЕсли;
		//rarus agar 30.10.2020 16659 --
		
		//rarus agar 16.02.2021 17130 ++
		//Результат = РазобратьОпциюСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
		ЭтоНоваяОпция = Ложь;
		// rarus agar 25.01.2022 18594 ++
		//Результат = РазобратьОпциюСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ЭтоНоваяОпция);
		Результат = РазобратьОпциюСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ЭтоНоваяОпция, ВидПродукта);
		// rarus agar 25.01.2022 18594 --
		
		Если Результат = Неопределено Тогда
			СчетчикНеОбработано           = СчетчикНеОбработано + 1;
			РезультатРазбора.НеОбработано = СчетчикНеОбработано;
			
			НеобработанныеОпции.Добавить(XDTOОбъект.Код);
		Иначе
			СчетчикОбработано           = СчетчикОбработано + 1;
			РезультатРазбора.Обработано = СчетчикОбработано;
			
			Если ЭтоНоваяОпция Тогда
				СчетчикСоздано           = СчетчикСоздано + 1;
				РезультатРазбора.Создано = СчетчикСоздано;
			Иначе
				СчетчикОбновлено           = СчетчикОбновлено + 1;
				РезультатРазбора.Обновлено = СчетчикОбновлено;
			КонецЕсли;
		КонецЕсли;
		//rarus agar 16.02.2021 17130 --
	КонецЦикла;
	
	//rarus agar 16.02.2021 17130 ++
	РезультатРазбора.НеобработанныеОпции = НеобработанныеОпции;
	
	Возврат РезультатРазбора;
	//rarus agar 16.02.2021 17130 --
	
//КонецПроцедуры //rarus bonmak 24.09.2019 14177 --
КонецФункции //rarus agar 16.02.2021 17130 +-

//Функция РазобратьОпциюСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 24.09.2019 14177 ++
//Функция РазобратьОпциюСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ЭтоНоваяОпция) Экспорт //rarus agar 16.02.2021 17130 +-
Функция РазобратьОпциюСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ЭтоНоваяОпция, ВидПродукта) Экспорт // rarus agar 25.01.2022 18594 +-
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ОпцииПродуктов.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	
	//rarus agar 16.02.2021 17130 ++
	Если НайденныйЭлемент.Пустая() Тогда
		ЭтоНоваяОпция = Истина;
	КонецЕсли;
	//rarus agar 16.02.2021 17130 --
	
	//rarus bonmak 16.03.2020 15846 ++
	//Если НайденныйЭлемент.Пустая() Тогда
	//	//Элемента с таким GUID нет
	//	//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
	//	НайденныйЭлемент = Справочники.Scan_ОпцииПродуктов.НайтиПоНаименованию(СтруктураРеквизитов.Наименование, Истина); 
	//	Если НЕ НайденныйЭлемент.Пустая() И ЗначениеЗаполнено(НайденныйЭлемент.IDExternalSystem) Тогда
	//		НайденныйЭлемент = Справочники.Scan_ОпцииПродуктов.ПустаяСсылка();
	//	КонецЕсли;
	//КонецЕсли;
	//rarus bonmak 16.03.2020 15846 --
	// rarus agar 25.01.2022 18594 ++
	//ЭлементСсылка = СоздатьОбновитьОпциюСпецификации(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	ЭлементСсылка = СоздатьОбновитьОпциюСпецификации(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ВидПродукта);
	// rarus agar 25.01.2022 18594 --
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //rarus bonmak 24.09.2019 14177 --

//Функция СоздатьОбновитьОпциюСпецификации(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus bonmak 24.09.2019 14177 ++
Функция СоздатьОбновитьОпциюСпецификации(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ВидПродукта) // rarus agar 25.01.2022 18594 +-
	ГруппаСсылка = РазобратьГруппуОпцииСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	
	// rarus agar 16.02.2022 18594 ++
	ВидПродуктаСсылка = Справочники.Scan_ВидыПродуктов.НайтиПоРеквизиту("IDExternalSystem", ВидПродукта);
	// rarus agar 16.02.2022 18594 --
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		// rarus agar 25.01.2022 18594 ++
		Если ТекРеквизит.ИмяРекв = "ВидПродукта" Тогда
			СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = ВидПродуктаСсылка;
		КонецЕсли;
		// rarus agar 25.01.2022 18594 --
		
		Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв] Тогда
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
		КонецЕсли;				
	КонецЦикла;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_ОпцииПродуктов.СоздатьЭлемент();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		
		//Родитель(Семейство опций)
		ТекОбъект.Родитель = ГруппаСсылка;
		//ТипОпции
		ТекОбъект.ТипОпции = Справочники.Scan_ТипыОпций.БазовыеОпции;
		//Дата обновления
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать опцию (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат ?(ЗначениеЗаполнено(ЭлементСсылка), ЭлементСсылка, Неопределено); //rarus BProg_Dekin 23.03.2020 mantis 0014177 +- Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции //rarus bonmak 24.09.2019 14177 --

//// ГРУППА ОПЦИИ СПЕЦИФИКАЦИЙ ПРОДУКТА ТС
Функция РазобратьГруппуОпцииСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 08.10.2019 14177 ++
	Отказ = Ложь;
	
	//импровизированное имя для получения структуры реквизитов для создания группы
	ФИмяМетода = ИмяМетода + "Группа";
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ФИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ОпцииПродуктов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_ОпцииПродуктов КАК Scan_ОпцииПродуктов
		|ГДЕ
		|	Scan_ОпцииПродуктов.ЭтоГруппа
		|	И Scan_ОпцииПродуктов.IDExternalSystem = &IDExternalSystem";
	
	Запрос.УстановитьПараметр("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	
	РезультатЗапроса = Запрос.Выполнить();
	НайденныйЭлемент = Справочники.Scan_ОпцииПродуктов.ПустаяСсылка();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		НайденныйЭлемент = ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЕсли;
			
	ЭлементСсылка = СоздатьОбновитьГруппуОпцииСпецификации(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ФИмяМетода);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //rarus bonmak 08.10.2019 14177 --

Функция СоздатьОбновитьГруппуОпцииСпецификации(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus bonmak 08.10.2019 14177 ++
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл		
		Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв] Тогда
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
		КонецЕсли;				
	КонецЦикла;

	Если СтруктураРеквизитов.Количество() > 0 Тогда
		
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_ОпцииПродуктов.СоздатьГруппу();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		
		//Родитель(Первая общая группа)
		//rarus agar 23.07.2020 16123 ++
		Если Лев(ТекОбъект.Код, 1) = "5" Тогда
			ТекОбъект.Родитель = Справочники.Scan_ОпцииПродуктов.ЛокальныеОпции;
		Иначе
			ТекОбъект.Родитель = Справочники.Scan_ОпцииПродуктов.БазовыеОпции;
		КонецЕсли;
		//rarus agar 23.07.2020 16123 --
		//Дата обновления
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать группу (семейство) опции (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции //rarus bonmak 08.10.2019 14177 --

//// ВИДЫ СПЕЦИФИКАЦИЙ ПРОДУКТА ТС
Процедура ВызватьМетод_GetListOfSpecificationType(ДопПараметры) Экспорт //rarus bonmak 24.09.2019 14177 ++
	ИмяМетода = "GetListOfSpecificationType";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаСправочникВидыСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 24.09.2019 14177 --

Процедура РазборОтветаСправочникВидыСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 24.09.2019 14177 ++		
	СписокВидов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ВидыСпецификаций", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из СписокВидов Цикл 
		Результат = РазобратьВидСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЦикла;
КонецПроцедуры //rarus bonmak 24.09.2019 14177 --

Функция РазобратьВидСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 24.09.2019 14177 ++
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ВидыСпецификацийПродуктов.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент.Пустая() Тогда
		//Элемента с таким GUID нет
		Если СтруктураРеквизитов.Наименование = "Заказанная спецификация COW" Тогда
			НайденныйЭлемент = Справочники.Scan_ВидыСпецификацийПродуктов.COWСпецификацияЗаказанная;
		ИначеЕсли СтруктураРеквизитов.Наименование = "Локальная спецификация COW" Тогда
			НайденныйЭлемент = Справочники.Scan_ВидыСпецификацийПродуктов.COWСпецификацияЛокальная;
		ИначеЕсли СтруктураРеквизитов.Наименование = "Подтверждённая спецификация COW" Тогда
			НайденныйЭлемент = Справочники.Scan_ВидыСпецификацийПродуктов.COWСпецификацияПодтвержденнаяЗаводом;
		ИначеЕсли СтруктураРеквизитов.Наименование = "Спецификация CPII" Тогда
			НайденныйЭлемент = Справочники.Scan_ВидыСпецификацийПродуктов.SPIIСпецификация;
		ИначеЕсли СтруктураРеквизитов.Наименование = "Спецификация SPORT" Тогда
			НайденныйЭлемент = Справочники.Scan_ВидыСпецификацийПродуктов.SPORTСпецификация;
		Иначе
			//при новом значении необходимо внесение изменений
			Возврат Неопределено;			
		КонецЕсли;	
	КонецЕсли;
	
	ЭлементСсылка = СоздатьОбновитьВидСпецификации(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //rarus bonmak 24.09.2019 14177 --

Функция СоздатьОбновитьВидСпецификации(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus bonmak 24.09.2019 14177 ++
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл				
		Если ТекРеквизит.ИмяРекв = "Наименование" Тогда
			//наименование оставляем свое
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
			Продолжить;
		КонецЕсли;				

		Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв] Тогда
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
		КонецЕсли;				
	КонецЦикла;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			Возврат Неопределено;
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		//Дата обновления
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать вид спецификации (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции //rarus bonmak 24.09.2019 14177 --

//// МЕХАНИЗМ ОБМЕНА ЗАДАЧАМИ

Функция ЗагрузитьЗадачи1БД() Экспорт //rarus bonmak 09.01.2020 15279 ++
	ЕстьОшибки = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetUpdatesList";
	
	//Получим типы объектов для поиска изменений
	ТипыИзмененныхОбъектов = ПолучитьТипыИзмененныхОбъектов();
	Для Каждого ТипОбъекта Из ТипыИзмененныхОбъектов Цикл
		ТипИзменяемогоОбъекта1БД = ТипОбъекта.ТипИзменяемыхОбъектов;
		//Заполним структуру для отбора объекта	
		ИндексЗначенияПеречисления = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Индекс(ТипИзменяемогоОбъекта1БД);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.Scan_ТипыИзмененныхОбъектов1БД.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("UpdateSubject",ИмяЗначенияПеречисления);
		СтруктураПараметров.Вставить("ТипИзменяемогоОбъекта1БД",ТипИзменяемогоОбъекта1БД);
		СообщениеОбОшибке = "";
		//rarus bonmak 18.08.2020 14375 ++
		//Получение таблицы ранее открытых сессий, повторная отправка
		//ТаблВозврата = РегистрыСведений.Scan_РегистрацияСессийИзмененныхОбъектов1БД.ПолучитьОткрытыеСессии(ТипИзменяемогоОбъекта1БД);
		//Для Каждого СтрокаСессии Из ТаблВозврата Цикл
		//	Если НЕ ВыполнитьОбменПоСессии(СтрокаСессии, Ложь, ИмяСобытияЖурналаРегистрации) Тогда
		//		Сообщить("При повторной загрузке типа объекта: " + ИмяЗначенияПеречисления + " возникли ошибки (см. журнал регистрации)", СтатусСообщения.Внимание);
		//		ЕстьОшибки = Истина;	
		//	КонецЕсли;
		//КонецЦикла;
		//rarus bonmak 18.08.2020 14375 --
		//Создаем/разбираем сессии
		РезультатВыполнения = ПолучитьСессии(СтруктураПараметров, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Если НЕ РезультатВыполнения Тогда
			Сообщить("При загрузке типа объекта: " + ИмяЗначенияПеречисления + " возникли ошибки (см. журнал регистрации)", СтатусСообщения.Внимание);
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	Возврат ЕстьОшибки;
КонецФункции //rarus bonmak 09.01.2020 15279 --

Функция ЗагрузитьЗадачуВерсииСпецификаций() Экспорт //Rarus bonmak 07.02.2022 18853 ++
	ЕстьОшибки = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetUpdatesList";
	
	//Получим типы объекта версия спецификации для поиска изменений
	ТипИзменяемогоОбъекта1БД = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.ВерсияСпецификации;
	//Заполним структуру для отбора объекта	
	ИндексЗначенияПеречисления = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Индекс(ТипИзменяемогоОбъекта1БД);
	ИмяЗначенияПеречисления = Метаданные.Перечисления.Scan_ТипыИзмененныхОбъектов1БД.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("UpdateSubject",ИмяЗначенияПеречисления);
	СтруктураПараметров.Вставить("ТипИзменяемогоОбъекта1БД",ТипИзменяемогоОбъекта1БД);
	СообщениеОбОшибке = "";
	//Создаем/разбираем сессии
	РезультатВыполнения = ПолучитьСессии(СтруктураПараметров, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	Если НЕ РезультатВыполнения Тогда
		Сообщить("При загрузке типа объекта: " + ИмяЗначенияПеречисления + " возникли ошибки (см. журнал регистрации)", СтатусСообщения.Внимание);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
КонецФункции //Rarus bonmak 07.02.2022 18853 --

Функция ПолучитьТипыИзмененныхОбъектов() //rarus bonmak 09.01.2020 15279 ++	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_НастройкиЗагрузкиИзмененныхОбъектов1БД.ТипИзменяемыхОбъектов КАК ТипИзменяемыхОбъектов
		|ИЗ
		|	РегистрСведений.Scan_НастройкиЗагрузкиИзмененныхОбъектов1БД КАК Scan_НастройкиЗагрузкиИзмененныхОбъектов1БД
		|ГДЕ
		|	Scan_НастройкиЗагрузкиИзмененныхОбъектов1БД.Загружать
		//rarus bonmak 16452 23.09.2020 ++
		|УПОРЯДОЧИТЬ ПО
	    |   Scan_НастройкиЗагрузкиИзмененныхОбъектов1БД.Порядок";
		//rarus bonmak 16452 23.09.2020 --
	
	ВыгрузкаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгрузкаЗапроса;	
КонецФункции //rarus bonmak 09.01.2020 15279 --

Функция ПолучитьСессии(СтруктураПараметров, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт //rarus bonmak 09.01.2020 15279 ++
	ТаблицаОбновлений = Новый ТаблицаЗначений; //таблица со списком измененных объектов
	РезультатЗагрузки = Истина;
	СообщениеОбОшибке = ВызватьМетод_GetUpdatesList(СтруктураПараметров, ТаблицаОбновлений);
	Если СообщениеОбОшибке = "" Тогда
		Если ТаблицаОбновлений.Количество() = 0 Тогда
			СообщениеОбОшибке = "Нет обновлений для загрузки (GetUpdatesList): " + СтруктураПараметров.UpdateSubject;
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации); 
			Возврат Ложь;
		Иначе
			ТаблВозврата = Новый ТаблицаЗначений();
			ТаблВозврата.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			ТаблВозврата.Колонки.Добавить("SessionGUID", Новый ОписаниеТипов("Строка"));
			ТаблВозврата.Колонки.Добавить("ТипСессии", Новый ОписаниеТипов("ПеречислениеСсылка.Scan_ТипыСессии"));
			ТаблВозврата.Колонки.Добавить("UpdateSubject", Новый ОписаниеТипов("ПеречислениеСсылка.Scan_ТипыИзмененныхОбъектов1БД"));
			ТаблВозврата.Колонки.Добавить("UpdateSubjectGUID", Новый ОписаниеТипов("Строка"));
			ТаблВозврата.Колонки.Добавить("SessionStartDate", Новый ОписаниеТипов("Дата"));
			ТаблВозврата.Колонки.Добавить("SessionAuthor", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
			ТаблВозврата.Колонки.Добавить("SessionSize", Новый ОписаниеТипов("Число"));
			ТаблВозврата.Колонки.Добавить("PacketSize", Новый ОписаниеТипов("Число"));			 
			
			Для Каждого СтрокаОбновления Из ТаблицаОбновлений Цикл
				Если НЕ РегистрыСведений.Scan_РегистрацияСессийИзмененныхОбъектов1БД.СоздатьНовуюСессию(ТаблВозврата, СтруктураПараметров.ТипИзменяемогоОбъекта1БД, СтрокаОбновления, ИмяСобытияЖурналаРегистрации) Тогда
					Если НЕ ВыполнитьОбменПоСессии(ТаблВозврата[0], Истина, ИмяСобытияЖурналаРегистрации) Тогда
						РезультатЗагрузки = Ложь;
						РегистрыСведений.Scan_РегистрацияСессийИзмененныхОбъектов1БД.УдалитьНеЗакрытуюСессию(ТаблВозврата[0]); //rarus bonmak 18.08.2020 14375
					КонецЕсли;	
				Иначе
					РезультатЗагрузки = Ложь;
				КонецЕсли;
				ТаблВозврата.Очистить();
			КонецЦикла;	
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
КонецФункции //rarus bonmak 09.01.2020 15279 --

Функция ВыполнитьОбменПоСессии(СтрокаСессии, ОткрытьСессию = Истина, ИмяСобытияЖурналаРегистрации) //rarus bonmak 09.01.2020 15279 ++
	ДопПараметры = Новый Структура("СтрокаСессии", СтрокаСессии);
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	//rarus bonmak 16452 23.09.2020 ++
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(, Ложь);
	СтруктураПараметров.GUID = ДопПараметры.СтрокаСессии.UpdateSubjectGUID;
	//rarus bonmak 16452 23.09.2020 --
	
	Если ОткрытьСессию ИЛИ ДопПараметры.СтрокаСессии.ТипСессии = Перечисления.Scan_ТипыСессии.СессияСоздана Тогда
		Если ВызватьМетод_OpenExchangeSession(ДопПараметры) Тогда
			ОтветСервера = "Не удалось вызвать метод сервиса OpenExchangeSession. См. журнал регистрации";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ДопПараметры.СтрокаСессии.ТипСессии = Перечисления.Scan_ТипыСессии.СессияОткрыта Тогда	
		Если ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Продукт Тогда //rarus bonmak 29.07.2020 16140 ++
			//Разбор продукта
			//rarus bonmak 16452 23.09.2020 ++
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetProduct(СтруктураПараметров, Отказ, СообщениеОбОшибке);	
			Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				Возврат Ложь;
			КонецЕсли;
			//ИмяМетода = "GetProduct";
			//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
			//СтруктураПараметров.Вставить("GUID", ДопПараметры.СтрокаСессии.UpdateSubjectGUID);
			//ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
			//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
			//Если Отказ Тогда
			//	Возврат Ложь;
			//КонецЕсли;
			//СсылкаПродукта = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникПродукты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
			//Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
			//	СообщениеОбОшибке = "Ошибка разбора ответа, данного продукта: " + ДопПараметры.СтрокаСессии.UpdateSubjectGUID;
			//	Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			//	Возврат Ложь;
			//КонецЕсли;
			//rarus bonmak 29.07.2020 16140 --
			//rarus bonmak 16452 23.09.2020 --
		ИначеЕсли ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Автомобиль Тогда
			//Разбор автомобиля
			//rarus bonmak 16452 23.09.2020 ++
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetChassis(СтруктураПараметров, Отказ, СообщениеОбОшибке);	
			Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				Возврат Ложь;
			КонецЕсли;

			//ИмяМетода = "GetChassis";
			//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
			//СтруктураПараметров.Вставить("GUID", ДопПараметры.СтрокаСессии.UpdateSubjectGUID);
			//ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
			//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
			//Если Отказ Тогда
			//	Возврат Ложь;
			//КонецЕсли;
			//СсылкаПродукта = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникИзделия(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
			//Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
			//	СообщениеОбОшибке = "Ошибка разбора ответа, данного изделия: " + ДопПараметры.СтрокаСессии.UpdateSubjectGUID;
			//	Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			//	Возврат Ложь;
			//КонецЕсли;
			//rarus bonmak 16452 23.09.2020 --
		ИначеЕсли ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Задача Тогда
			//rarus bonmak 18.05.2020 14375 ++
			Если НЕ Scan_ПраваИНастройки.Scan_Право("ИспользоватьЗадачиСНакладными") Тогда 
				СообщениеОбОшибке = "Отключено право Использовать задачи с накладными";
				Возврат Ложь;
			КонецЕсли;  
			ВызватьМетод_GetTaskOfExecution(ДопПараметры, Отказ, СообщениеОбОшибке);
			Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				СообщениеОбОшибке = "Не удалось вызвать метод сервиса GetTaskOfExecution. См. журнал регистрации";
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, , ДопПараметры.СтрокаСессии.UpdateSubjectGUID, СообщениеОбОшибке);	
				Возврат Ложь;					
			КонецЕсли;
			//rarus bonmak 18.05.2020 14375 --
			//rarus BProg_Dekin 19.03.2020 mantis 0014177 ++
		ИначеЕсли ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.ПредставлениеСпецификации Тогда
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetSpecificationView(ДопПараметры.СтрокаСессии.UpdateSubjectGUID, Отказ, СообщениеОбОшибке);	
			Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				Возврат Ложь;
			КонецЕсли;
			//rarus BProg_Dekin 19.03.2020 mantis 0014177 --
		ИначеЕсли ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.ВерсияСпецификации Тогда //rarus bonmak 20.03.2020 14177 ++
			//rarus bonmak 16452 23.09.2020 ++
			//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(, Ложь);
			//СтруктураПараметров.GUID = ДопПараметры.СтрокаСессии.UpdateSubjectGUID;
			//rarus bonmak 16452 23.09.2020 --
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetSpecificationVersion(СтруктураПараметров, Отказ, СообщениеОбОшибке);
			Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				СообщениеОбОшибке = "Не удалось вызвать метод сервиса GetSpecificationVersion. См. журнал регистрации";
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, , ДопПараметры.СтрокаСессии.UpdateSubjectGUID, СообщениеОбОшибке);	
				Возврат Ложь;
			КонецЕсли;
			//rarus bonmak 20.03.2020 14177 --
		ИначеЕсли ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Компания Тогда //rarus bonmak 15.04.2020 14456 ++
			//rarus bonmak 16452 23.09.2020 ++
			//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(, Ложь);
			//СтруктураПараметров.GUID = ДопПараметры.СтрокаСессии.UpdateSubjectGUID;
			//rarus bonmak 16452 23.09.2020 --
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetCompany(СтруктураПараметров, Отказ, СообщениеОбОшибке);
			Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				Возврат Ложь;
			КонецЕсли;
			//rarus bonmak 15.04.2020 14456 --
			//rarus agar 07.09.2020 16452 ++
		ИначеЕсли ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.ЗаказНаАвтомобиль Тогда
			//rarus bonmak 16452 23.09.2020 ++
			//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(, Ложь);
			//СтруктураПараметров.GUID = ДопПараметры.СтрокаСессии.UpdateSubjectGUID;
			//rarus bonmak 16452 23.09.2020 --
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetOrderToDelivery(СтруктураПараметров, Отказ, СообщениеОбОшибке);
			Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				Возврат Ложь;
			КонецЕсли;
			//rarus agar 07.09.2020 16452 --
		Иначе
			СообщениеОбОшибке = "Не определен алгоритм обработки, данного типа объекта: " + ДопПараметры.СтрокаСессии.UpdateSubject;
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			Возврат Ложь;
		КонецЕсли;
		//Добавим запись о успешной загрузке данных
		РегистрыСведений.Scan_РегистрацияСессийИзмененныхОбъектов1БД.ДобавитьНовыйТипСессии(ДопПараметры.СтрокаСессии, Перечисления.Scan_ТипыСессии.ДанныеПолученыЗагружены, ИмяСобытияЖурналаРегистрации, Отказ);						
	КонецЕсли;

		
	Если ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Задача Тогда
		Если ДопПараметры.СтрокаСессии.ТипСессии = Перечисления.Scan_ТипыСессии.ДанныеПолученыЗагружены Тогда
			//После успешного разбора отправить статус "Завершено"
			Если ВызватьМетод_SetTaskOfExecution(ДопПараметры) Тогда
				СообщениеОбОшибке = "Не удалось вызвать метод сервиса SetTaskOfExecution. См. журнал регистрации";
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
				Возврат Ложь;
			КонецЕсли;
			//Добавим запись о успешной отправке статуса
			РегистрыСведений.Scan_РегистрацияСессийИзмененныхОбъектов1БД.ДобавитьНовыйТипСессии(ДопПараметры.СтрокаСессии, Перечисления.Scan_ТипыСессии.СтатусОтправлен, ИмяСобытияЖурналаРегистрации, Отказ);					
		КонецЕсли;
	КонецЕсли;
	
	Если (ДопПараметры.СтрокаСессии.UpdateSubject = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Задача И
		ДопПараметры.СтрокаСессии.ТипСессии = Перечисления.Scan_ТипыСессии.СтатусОтправлен) ИЛИ
		(ДопПараметры.СтрокаСессии.UpdateSubject <> Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Задача И
		ДопПараметры.СтрокаСессии.ТипСессии = Перечисления.Scan_ТипыСессии.ДанныеПолученыЗагружены)
		Тогда
		Если ВызватьМетод_CloseExchangeSession(ДопПараметры) Тогда
			ОтветСервера = "Не удалось вызвать метод сервиса CloseExchangeSession. См. журнал регистрации";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции //rarus bonmak 09.01.2020 15279 --

Функция ВызватьМетод_OpenExchangeSession(ДопПараметры) Экспорт //rarus bonmak 09.01.2020 15279 ++
	ИмяМетода = "OpenExchangeSession";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	СтруктураПараметров.Вставить("SessionGUID", ДопПараметры.СтрокаСессии.SessionGUID);
	СтруктураПараметров.Вставить("SessionStartDate", ДопПараметры.СтрокаСессии.SessionStartDate);
	СтруктураПараметров.Вставить("PacketSize", ДопПараметры.СтрокаСессии.PacketSize);
	СтруктураПараметров.Вставить("SessionAuthor", ДопПараметры.СтрокаСессии.SessionAuthor);
	СтруктураПараметров.Вставить("SessionSize", ДопПараметры.СтрокаСессии.SessionSize);
	
	//rarus bonmak 27.07.2020 16140 ++
	Если ДопПараметры.СтрокаСессии.UpdateSubject <> Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Задача Тогда
		СтруктураПараметров.Вставить("UpdateSubject", ДопПараметры.СтрокаСессии.UpdateSubject);
		СтруктураПараметров.Вставить("UpdateSubjectGUID", ДопПараметры.СтрокаСессии.UpdateSubjectGUID);
	КонецЕсли;
	//rarus bonmak 27.07.2020 16140 --
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтвета_OpenExchangeSession(ТекстОтвета, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
		Если НЕ Отказ Тогда					
			РегистрыСведений.Scan_РегистрацияСессийИзмененныхОбъектов1БД.ДобавитьНовыйТипСессии(ДопПараметры.СтрокаСессии, Перечисления.Scan_ТипыСессии.СессияОткрыта, ИмяСобытияЖурналаРегистрации, Отказ);				
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = ТекстОтвета;
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции //rarus bonmak 09.01.2020 15279 --

Процедура РазборОтвета_OpenExchangeSession(ТекстОтвета, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 09.01.2020 15279 ++
	ПространствоИменСхемы = "http://www.scania.org/webservice/SRUService";
	Попытка	
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстОтвета);
		ТипОбъектаExchangeMessage = ФабрикаXDTO.Тип(ПространствоИменСхемы, "ExchangeMessage");
		ОбъектExchangeMessage = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаExchangeMessage);
		ОбъектAnswer = ОбъектExchangeMessage.Answer;
		ОбъектResult = ОбъектAnswer.Result;
		ОбъектSessionInfo = ОбъектResult.SessionInfo;		
		SessionSize = ОбъектSessionInfo.SessionSize;
		ЧтениеXML.Закрыть();		
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = "Переданное сообщение - не в формате XML или XML передан с ошибками "+ИнформацияОбОшибке+" ("+ИмяМетода+")";
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		Отказ = Истина;		
	КонецПопытки;	
КонецПроцедуры //rarus bonmak 09.01.2020 15279 --

Функция ВызватьМетод_CloseExchangeSession(ДопПараметры) Экспорт //rarus bonmak 09.01.2020 15279 ++
	ИмяМетода = "CloseExchangeSession";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	СтруктураПараметров.Вставить("SessionGUID", ДопПараметры.СтрокаСессии.SessionGUID);
	СтруктураПараметров.Вставить("SessionStartDate", ДопПараметры.СтрокаСессии.SessionStartDate);
	СтруктураПараметров.Вставить("PacketSize", ДопПараметры.СтрокаСессии.PacketSize);
	СтруктураПараметров.Вставить("SessionSize", ДопПараметры.СтрокаСессии.SessionSize);
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда						
		РегистрыСведений.Scan_РегистрацияСессийИзмененныхОбъектов1БД.ДобавитьНовыйТипСессии(ДопПараметры.СтрокаСессии, Перечисления.Scan_ТипыСессии.СессияЗакрыта, ИмяСобытияЖурналаРегистрации, Отказ);					
	Иначе
		СообщениеОбОшибке = ТекстОтвета;
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Возврат Отказ;	
КонецФункции //rarus bonmak 09.01.2020 15279 --

Функция ВызватьМетод_GetUpdatesList(ДопПараметры, ТаблицаОбновлений) Экспорт //rarus bonmak 09.01.2020 15279 ++
	ИмяМетода = "GetUpdatesList";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если ДопПараметры.Свойство("UpdateSubject") Тогда
		СтруктураПараметров.Вставить("UpdateSubject", ДопПараметры.UpdateSubject);
	КонецЕсли;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтвета_GetUpdatesList(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ТаблицаОбновлений);
	Иначе
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
КонецФункции //rarus bonmak 09.01.2020 15279 --

Процедура РазборОтвета_GetUpdatesList(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ТаблицаОбновлений) Экспорт //rarus bonmak 09.01.2020 15279 ++
	ПространствоИменСхемы = "http://www.scania.org/webservice/SRUService";
	РезультатВыполнения = Новый Структура("СообщениеОбОшибке", ""); 
	Попытка	
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстОтвета);
		ТипОбъектаExchangeMessage = ФабрикаXDTO.Тип(ПространствоИменСхемы, "ExchangeMessage");
		ОбъектExchangeMessage = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаExchangeMessage);
		ОбъектAnswer = ОбъектExchangeMessage.Answer;
		ОбъектResult = ОбъектAnswer.Result;
		
		ТаблицаОбновлений.Колонки.Добавить("UpdateSubject");
		ТаблицаОбновлений.Колонки.Добавить("UpdateSubjectDescription");
		ТаблицаОбновлений.Колонки.Добавить("UpdateSubjectGUID");
		ТаблицаОбновлений.Колонки.Добавить("UpdatePriority");
		ТаблицаОбновлений.Колонки.Добавить("NoQueueLoad");
		
		Если ОбъектResult.Свойства().Количество() > 0 Тогда
			ОбъектUpdateInfo = ОбъектResult.UpdateInfo;
			Если ТипЗнч(ОбъектUpdateInfo) = Тип("СписокXDTO") Тогда
				Для Каждого СтрокаОбновления Из ОбъектUpdateInfo Цикл
					НоваяСтрокаОбновления = ТаблицаОбновлений.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОбновления,СтрокаОбновления);
					Если ТипЗнч(СтрокаОбновления.UpdateSubjectGUID) <> Тип("Строка") Тогда
						НоваяСтрокаОбновления.UpdateSubjectGUID = "";	
					КонецЕсли;
				КонецЦикла;				
			ИначеЕсли ТипЗнч(ОбъектUpdateInfo) = Тип("ОбъектXDTO") Тогда
				НоваяСтрокаОбновления = ТаблицаОбновлений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОбновления,ОбъектUpdateInfo);
			Иначе
				СообщениеОбОшибке = "Не удалось получить список обновлений. ("+ИмяМетодаWS+")";
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке); 
				РезультатВыполнения.СообщениеОбОшибке = СообщениеОбОшибке; 
				Отказ = Истина;
				Возврат;
			КонецЕсли;					
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = "Переданное сообщение - не в формате XML или XML передан с ошибками "+ИнформацияОбОшибке+" ("+ИмяМетодаWS+")";
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке);
		РезультатВыполнения.СообщениеОбОшибке = СообщениеОбОшибке; 
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры //rarus bonmak 09.01.2020 15279 --

Функция ВызватьМетод_SetTaskOfExecution(ДопПараметры) Экспорт //rarus bonmak 09.01.2020 15279 ++
	ИмяМетода = "SetTaskOfExecution";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	СтруктураПараметров.Вставить("GUID", ДопПараметры.СтрокаСессии.UpdateSubjectGUID);
	СтруктураПараметров.Вставить("Дата", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("СтатусЗадачи", Перечисления.Scan_СтатусыЗадач.Выполнена);
	СтруктураПараметров.Вставить("ДатаВыполнения", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("РезультатВыполнения", "Выполнение задачи");//rarus bonmak 12.08.2020 14375
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Возврат Отказ;	
КонецФункции //rarus bonmak 09.01.2020 15279 --

Процедура ВызватьМетод_GetTaskOfExecution(ДопПараметры, Отказ, СообщениеОбОшибке) Экспорт //rarus bonmak 09.01.2020 15279 ++ //rarus bonmak 18.05.2020 14375 ++
	ИмяМетода = "GetTaskOfExecution";
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	СтруктураПараметров.Вставить("SessionGUID", ДопПараметры.СтрокаСессии.SessionGUID);
	СтруктураПараметров.Вставить("SessionStartDate", ДопПараметры.СтрокаСессии.SessionStartDate);
	СтруктураПараметров.Вставить("PacketSize", ДопПараметры.СтрокаСессии.PacketSize);
	СтруктураПараметров.Вставить("UpdateSubjectGUID", ДопПараметры.СтрокаСессии.UpdateSubjectGUID);
	СтруктураПараметров.Вставить("SessionSize", ДопПараметры.СтрокаСессии.SessionSize);
		
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтвета_GetTaskOfExecution(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Иначе
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли;
	
КонецПроцедуры //rarus bonmak 09.01.2020 15279 -- //rarus bonmak 18.05.2020 14375 --

Процедура РазборОтвета_GetTaskOfExecution(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт //rarus bonmak 09.01.2020 15279 ++
	
	ОбъектЗадача = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.TaskOfExecution", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;	
	РазобратьЗадачу(ОбъектЗадача, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Отказ);
КонецПроцедуры //rarus bonmak 09.01.2020 15279 --

Функция РазобратьЗадачу(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ) Экспорт //rarus bonmak 18.05.2020 14375 ++
	Если XDTOОбъект = Неопределено ИЛИ XDTOОбъект.Количество() = 0 Тогда
		СообщениеОбОшибке = "Не удалось получить структуру накладной!";
		Отказ = Истина;
		Возврат Неопределено;	
	КонецЕсли;
	ОбъектЗадача = XDTOОбъект[0];
	ОбъектНакладная = ОбъектЗадача.Объект.Накладная; //объект XDTO 
	ТипЗадачи1БД = ОбъектЗадача.ТипЗадачи;
	ВидДокумента = ОбъектНакладная.ВидДокумента; //число
	Продукты = ОбъектНакладная.Продукт; //список XDTO
	//rarus bonmak 11.11.2020 16735 ++	
	ДатаПрихода    = ОбъектНакладная.Дата;
	НомерНакладной = ОбъектНакладная.Номер;
	ГУИДНакладной  = ОбъектНакладная.GUID;
	Если ДатаПрихода < Дата(2020, 10, 13) Тогда
		Если ВидДокумента <> 14 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	//rarus bonmak 11.11.2020 16735 --
	
	НайденныйЭлемент = Справочники.Scan_ВидыСобытий1БД.НайтиПоРеквизиту("IDExternalSystem", ТипЗадачи1БД.GUID);
	Если НайденныйЭлемент.Пустая() Тогда
		НайденныйЭлемент = Справочники.Scan_ВидыСобытий1БД.НайтиПоНаименованию(ТипЗадачи1БД.Наименование, Истина);
		Если НайденныйЭлемент.Пустая() Тогда
			//СообщениеОбОшибке = "Не удалось найти вид события задачи: " + ОбъектЗадача.GUID;
			//Отказ = Истина;
			Возврат Неопределено;
		Иначе
			ОбъектВидСобытия = НайденныйЭлемент.ПолучитьОбъект();
			ОбъектВидСобытия.IDExternalSystem = ТипЗадачи1БД.GUID;
			ОбъектВидСобытия.ДатаОбновления = ТекущаяДата();
			ОбъектВидСобытия.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ВидСобытия = НайденныйЭлемент; //ссылка спр. виды событий 
	
	НайденныйЭлементСтатус = Справочники.Scan_СтатусыНакладных1ДБ.НайтиПоРеквизиту("IDExternalSystem", ОбъектНакладная.Статус.GUID);
	Если НайденныйЭлементСтатус.Пустая() Тогда
		НайденныйЭлементСтатус = Справочники.Scan_СтатусыНакладных1ДБ.НайтиПоНаименованию(ОбъектНакладная.Статус.Наименование, Истина);
		Если НайденныйЭлементСтатус.Пустая() Тогда
			Возврат Неопределено;
		Иначе
			ОбъектСтатусДокумента = НайденныйЭлементСтатус.ПолучитьОбъект();
			ОбъектСтатусДокумента.IDExternalSystem = ОбъектНакладная.Статус.GUID;
			ОбъектСтатусДокумента.ДатаОбновления = ТекущаяДата();
			ОбъектСтатусДокумента.Записать();
		КонецЕсли;
	КонецЕсли;
	
	СтатусДокумента = НайденныйЭлементСтатус; //ссылка спр. статусы накладных

	//процедуры разбора задач описаны структурировано, для понимания в какой момент, что должно происходить
	Если ВидСобытия = Справочники.Scan_ВидыСобытий1БД.ПоступлениеПродуктов Тогда
		РазобратьЗадачуПоступлениеПродуктов(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке);
	ИначеЕсли ВидСобытия = Справочники.Scan_ВидыСобытий1БД.ПродажаПродуктов Тогда
		РазобратьЗадачуПродажаПродуктов(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке);
	ИначеЕсли ВидСобытия = Справочники.Scan_ВидыСобытий1БД.ОтменаНакладной Тогда
		РазобратьЗадачуОтменаНакладной(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке);
	ИначеЕсли ВидСобытия = Справочники.Scan_ВидыСобытий1БД.СписаниеПродукта Тогда //rarus bonmak 22.12.2020 16653
		РазобратьЗадачуСписаниеПродуктов(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке);	
	КонецЕсли;			
КонецФункции //rarus bonmak 18.05.2020 14375 --

Процедура РазобратьЗадачуПоступлениеПродуктов(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) //rarus bonmak 18.05.2020 14375 ++
	Если ВидДокумента = 15 Тогда
		Если СтатусДокумента = Справочники.Scan_СтатусыНакладных1ДБ.Проведён Тогда
			Если СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) Тогда
				Если Продукты <> Неопределено Тогда
					ДатаПрихода    = ОбъектНакладная.Дата;
					НомерНакладной = ОбъектНакладная.Номер;
					ГУИДНакладной  = ОбъектНакладная.GUID;
					//rarus bonmak 11.12.2020 16912 ++
					ЭтоСканияПитер = Ложь;
					GUIDЗаказчика = ОбъектНакладная.Заказчик.GUID;
					НайденныйЗаказчик = Справочники.Scan_Контрагенты.НайтиПоРеквизиту("IDExternalSystem", GUIDЗаказчика);
					ЗначениеПраваСканияПитер = Scan_ПраваИНастройки.Scan_Право("КузовостроительСканияПитер");
					Если ЗначениеПраваСканияПитер = НайденныйЗаказчик Тогда
						ЭтоСканияПитер = Истина;
					КонецЕсли;
					//rarus bonmak 11.12.2020 16912 --
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							ПризнакБУ = НайденноеИзделие.БУ;
							ЕстьПоступление = Ложь;
							//rarus bonmak 17.08.2020 14375 ++
							ЕстьУбытие = Ложь;
							ДатаПродажиИзделия = Дата(1,1,1); //rarus bonmak 27.08.2020 14375
							Если НайденноеИзделие.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania Тогда
								ЭтоСкания = Истина;
							Иначе
								ЭтоСкания = Ложь;
							КонецЕсли;
							//rarus bonmak 17.08.2020 14375 --

							//rarus bonmak 11.12.2020 16912 ++
							Если ЭтоСканияПитер Тогда
								//ЗАПИШЕМ КЛЮЧЕВУЮ ДАТУ поступления на фин. склад
								РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПрихода,
								Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИнвойса1С, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);
							КонецЕсли;
							//rarus bonmak 11.12.2020 16912 --

							ЕстьПоступление = Справочники.Scan_ЗаказыНаЗавод.ПоступлениеУжеЕсть(НайденноеИзделие); //rarus bonmak 27.08.2020 14375
							
							Если НЕ ПризнакБУ Тогда 
								//ЕстьПоступление = Справочники.Scan_ЗаказыНаЗавод.ПоступлениеУжеЕсть(НайденноеИзделие); //rarus bonmak 27.08.2020 14375
								//rarus bonmak 17.08.2020 14375 ++
								ДатаПродажиИзделия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод,
								Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия),
								Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, ТекущаяДата());
								
								//rarus bonmak 21.08.2020 14375 ++
								//ДатаПередачиИзделияДилеру = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод,
								//Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру),
								//Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, ТекущаяДата());
								//Если ЗначениеЗаполнено(ДатаПродажиИзделия) И ЗначениеЗаполнено(ДатаПередачиИзделияДилеру) Тогда 
								//rarus bonmak 17.08.2020 14375 ++ закомментировал
								//Если ЗначениеЗаполнено(ДатаПродажиИзделия) Тогда
								////rarus bonmak 21.08.2020 14375 //ЕстьУбытие = Справочники.Scan_Изделия.УбытиеУжеЕсть(НайденноеИзделие,  КонецДня(ДатаПередачиИзделияДилеру)); 
								//	ДокументУбытие = ЕстьУбытиеИзУчета(НайденноеИзделие, ЕстьУбытие);	
								//КонецЕсли;
								//rarus bonmak 17.08.2020 14375 --
								//rarus bonmak 21.08.2020 14375 --
								//rarus bonmak 17.08.2020 14375 --
							КонецЕсли;
							//rarus bonmak 17.08.2020 14375 ++
							//rarus bonmak 27.08.2020 14375 ++
							Если ЗначениеЗаполнено(ДатаПродажиИзделия) ИЛИ ПризнакБУ Тогда
								ДокументУбытие = ЕстьУбытиеИзУчета(НайденноеИзделие, ЕстьУбытие);	
							КонецЕсли;
							//определение БУ поступление
							Если ((НЕ ЕстьПоступление И НЕ ЕстьУбытие) ИЛИ (ЕстьПоступление И ЕстьУбытие)) И ПризнакБУ Тогда
								ЭтоПоступлениеБУ = Истина;	
							Иначе
								ЭтоПоступлениеБУ = Ложь;
							КонецЕсли;
							//rarus bonmak 27.08.2020 14375 --
							Если НЕ ЕстьПоступление И НЕ ЕстьУбытие И НЕ ЭтоСкания И НЕ ПризнакБУ Тогда
								ЭтоПоступлениеНЕСкания = Истина;	
							Иначе
								ЭтоПоступлениеНЕСкания = Ложь;
							КонецЕсли;
							//rarus bonmak 17.08.2020 14375 --
							Если (ЕстьПоступление И ЕстьУбытие) ИЛИ ЭтоПоступлениеБУ ИЛИ ЭтоПоступлениеНЕСкания Тогда //rarus bonmak 17.08.2020 14375 добавил ЕстьУбытие и третье ИЛИ
								Если НЕ ПризнакБУ И НЕ ЭтоПоступлениеНЕСкания Тогда //rarus bonmak 17.08.2020 14375 добавил второе И
									//1. ОЧИСТИМ КЛЮЧЕВЫЕ ДАТЫ
									Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
										//Дата продажи дилеру
										РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
										Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Дата('00010101'),
										Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, ДатаПрихода - 1,,,ГУИДНакладной, НомерНакладной);	
										//Дата передачи дилеру
										РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
										Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Дата('00010101'),
										Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, ДатаПрихода - 1,,,ГУИДНакладной, НомерНакладной);
										//Дата продажи клиенту
										РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
										Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Дата('00010101'),
										Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту, ДатаПрихода - 1,,,ГУИДНакладной, НомерНакладной);
									Иначе
										СообщениеОбОшибке = "Не удалось очистить ключевые даты у продукта:  " + НайденноеИзделие.IDExternalSystemProduct + " причина ошибки: Нет заказа на завод на дату " + ТекущаяДата();
										Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
										Продолжить;
									КонецЕсли;
								КонецЕсли;
								//2. СОЗДАДИМ ДОКУМЕНТ ПОСТУПЛЕНИЕ НА СКЛАД
								//rarus bonmak 11.11.2020 16735 ++
								#Область ПоискРанееСозданногоПоступления
								СоздатьПоступление = Истина;		
								Запрос = Новый Запрос;
								Запрос.Текст = 
								"ВЫБРАТЬ
								|	Scan_ДвижениеИзделийСоставЗаявки.Ссылка КАК Ссылка
								|ИЗ
								|	Документ.Scan_ДвижениеИзделий.СоставЗаявки КАК Scan_ДвижениеИзделийСоставЗаявки
								|ГДЕ
								|	Scan_ДвижениеИзделийСоставЗаявки.Ссылка.ХозОперация = Значение(Справочник.Scan_ХозяйственныеОперации.ПоступлениеНаСклад)
								|	И НЕ Scan_ДвижениеИзделийСоставЗаявки.Ссылка.ПометкаУдаления
								|	И Scan_ДвижениеИзделийСоставЗаявки.Изделие = &Изделие
								|	И Scan_ДвижениеИзделийСоставЗаявки.Ссылка.НакладнаяТС = &НакладнаяТС";
								
								Запрос.УстановитьПараметр("Изделие", НайденноеИзделие);
								Запрос.УстановитьПараметр("НакладнаяТС", НомерНакладной);
								
								РезультатЗапроса = Запрос.Выполнить();
								Если НЕ РезультатЗапроса.Пустой() Тогда 
									ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
									//ДатаПрихода	
									Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
										Если ВыборкаДетальныеЗаписи.Ссылка.ДатаПрихода <> ДатаПрихода Тогда
											Если ВыборкаДетальныеЗаписи.Ссылка.Проведен Тогда
												фСообщениеОбОшибке = "Изменение даты прихода. Поступление проведено " + ВыборкаДетальныеЗаписи.Ссылка + ", IDExternalSystemInvoice = " + ГУИДНакладной;
												Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB("GetUpdatesList", , ГУИДНакладной, фСообщениеОбОшибке);
											Иначе
												ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
												ДокОбъект.ДатаПрихода = ДатаПрихода;
												Для Каждого Стр Из ДокОбъект.СоставЗаявки Цикл
													Стр.ДатаПрихода = ДатаПрихода;
												КонецЦикла;
												Попытка		
													ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
												Исключение
													фСообщениеОбОшибке = "Не удалось перезаписать движение изделий (ХО Поступление на склад, механизм обмена задачами): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " для накладной " + ГУИДНакладной;
													Scan_ВебСервисы.scЗафиксироватьОшибку(фСообщениеОбОшибке, "Механизм получения задач");
												КонецПопытки;
											КонецЕсли;	
										КонецЕсли;
										СоздатьПоступление = Ложь;
									КонецЦикла;
								КонецЕсли;
								
								#КонецОбласти
								//rarus bonmak 11.11.2020 16735 --
								Если СоздатьПоступление Тогда //rarus bonmak 11.11.2020 16735 добавил условие
									НовыйДокумент = Документы.Scan_ДвижениеИзделий.СоздатьДокумент();
									НовыйДокумент.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПоступлениеНаСклад;
									
									ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
									НовыйДокумент.Организация = ТекПользователь.Организация;
									НовыйДокумент.ПодразделениеКомпании = ТекПользователь.ПодразделениеОрганизации;
									НовыйДокумент.Автор = ТекПользователь;
									НовыйДокумент.Менеджер = ТекПользователь;
									НовыйДокумент.Дата = ТекущаяДата();
									НовыйДокумент.НакладнаяТС = НомерНакладной; 
									
									Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекПользователь,НовыйДокумент.Компания,НовыйДокумент.Контрагент);
									
									НовыйДокумент.ДатаПрихода = ДатаПрихода;
									
									СтрокаТЧ = НовыйДокумент.СоставЗаявки.Добавить();
									СтрокаТЧ.Изделие = НайденноеИзделие;
									СтрокаТЧ.ДатаПрихода = ДатаПрихода;
									Попытка		
										НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
									Исключение
										СообщениеОбОшибке = "Не удалось сформировать движение изделий (ХО Поступление на склад, механизм обмена задачами): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " для накладной " + ГУИДНакладной;
										Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
										Продолжить;
									КонецПопытки;
									
									Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда //rarus bonmak 17.08.2020 14375 ++
										РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонПисьмаОСозданииДокументовДвиженияИзделий", НовыйДокумент.Ссылка);
									КонецЕсли; //rarus bonmak 17.08.2020 14375 --
								КонецЕсли;
								Если ПризнакБУ Тогда
									//3.ЗАПИШЕМ КЛЮЧЕВУЮ ДАТУ ПОСТУПЛЕНИЕ БУ НА СКЛАД
									РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
									Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПрихода,
									Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИзделияБУНаСклад, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);
									
									//rarus bonmak 03.11.2020 14375 ++
									//Очистим ключевую дату продукт в архиве
									РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
									Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
									Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);
									//rarus bonmak 03.11.2020 14375 --

								Иначе
									//3.ЗАПИШЕМ КЛЮЧЕВУЮ ДАТУ ПОСТУПЛЕНИЕ НА СКЛАД
									РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
									Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПрихода,
									Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИзделияНаСклад, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ВидДокумента = 14 Тогда
		Если СтатусДокумента = Справочники.Scan_СтатусыНакладных1ДБ.Проведён Тогда
			Если СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) Тогда
				Если Продукты <> Неопределено Тогда
					ДатаПрихода    = ОбъектНакладная.Дата;
					НомерНакладной = ОбъектНакладная.Номер;
					ГУИДНакладной  = ОбъектНакладная.GUID; 
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							ПризнакБУ = НайденноеИзделие.БУ;
							Если ПризнакБУ Тогда
								Если НайденноеИзделие.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							
							//1. ЗАПОЛНИМ ДАТУ ПОСТУПЛЕНИЯ ИНВОЙСА 1С
							//rarus bonmak 17.08.2020 14375 ++ перенос ключевой даты в изделие
							//Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
							//ДатаПоступленияИнвойса1С
							РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
							Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПрихода,
							Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИнвойса1С, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);	
							//Иначе
							//	СообщениеОбОшибке = "Не удалось записать ключевую даты ДатаПоступленияИнвойса1С у продукта:  " + НайденноеИзделие.IDExternalSystemProduct + " причина ошибки: Нет заказа на завод на дату " + ТекущаяДата();
							//	Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
							//	Продолжить;
							//КонецЕсли;
							//rarus bonmak 17.08.2020 14375 -- перенос ключевой даты в изделие
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры //rarus bonmak 18.05.2020 14375 --

Процедура РазобратьЗадачуПродажаПродуктов(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) //rarus bonmak 18.05.2020 14375 ++
	Если ВидДокумента = 10 Тогда
		Если СтатусДокумента = Справочники.Scan_СтатусыНакладных1ДБ.Проведён Тогда
			Если СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) Тогда
				Если Продукты <> Неопределено Тогда
					ДатаПрихода    = ОбъектНакладная.Дата;
					НомерНакладной = ОбъектНакладная.Номер;
					ГУИДНакладной  = ОбъектНакладная.GUID; 
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							ПризнакБУ = НайденноеИзделие.БУ;
							Если ПризнакБУ Тогда
								//1. ЗАПОЛНИМ КЛЮЧЕВУЮ ДАТУ ПРОДАЖИ БУ ДИЛЕРУ
								//Дата продажи БУ дилеру
								РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПрихода,
								Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);		
							Иначе
								//1. ЗАПОЛНИМ КЛЮЧЕВУЮ ДАТУ ПРОДАЖИ ИЗДЕЛИЯ 
								Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
									//Дата продажи дилеру
									РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ДатаПрихода,
									Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);	
								Иначе
									СообщениеОбОшибке = "Не удалось заполнить ключевую дату продажи изделия у продукта:  " + НайденноеИзделие.IDExternalSystemProduct + " причина ошибки: Нет заказа на завод на дату " + ТекущаяДата();
									Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
									Продолжить;
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ВидДокумента = 9 ИЛИ ВидДокумента = 13 Тогда
		Если СтатусДокумента = Справочники.Scan_СтатусыНакладных1ДБ.Проведён Тогда
			Если СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) Тогда
				Если Продукты <> Неопределено Тогда
					ДатаПрихода    = ОбъектНакладная.Дата;
					НомерНакладной = ОбъектНакладная.Номер;
					ГУИДНакладной  = ОбъектНакладная.GUID; 
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							ПризнакБУ = НайденноеИзделие.БУ;
							Если ПризнакБУ Тогда
								//1. ЗАПОЛНИМ КЛЮЧЕВУЮ ДАТУ ПРОДАЖИ БУ КЛИЕНТУ
								//Дата продажи БУ дилеру
								РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПрихода,
								Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);		
							Иначе
								//1. ЗАПОЛНИМ КЛЮЧЕВУЮ ДАТУ ПРОДАЖИ КЛИЕНТУ ИЛИ ДАТУ ПРОДАЖИ ОТ ОСП 
								Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
									// Для вида документа "9" записывается Дата продажи клиенту (ДатаПродажиПродуктаКлиенту), 
									// для "13" - Дата продажи от ОСП (ДатаПродажиКлиенту) 
									КлючеваяДата = ?(ВидДокумента = 9,Перечисления.Scan_КлючевыеДаты.ДатаПродажиПродуктаКлиенту,Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту);//rarus vikhle 08.06.2021 mt 17636
									РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ДатаПрихода,
									КлючеваяДата, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);	//rarus vikhle 08.06.2021 mt 17636 + ключевая дата
								Иначе
									СообщениеОбОшибке = "Не удалось заполнить ключевую дату продажи клиенту у продукта:  " + НайденноеИзделие.IDExternalSystemProduct + " причина ошибки: Нет заказа на завод на дату " + ТекущаяДата();
									Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры //rarus bonmak 18.05.2020 14375 --

Процедура РазобратьЗадачуОтменаНакладной(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) //rarus bonmak 18.05.2020 14375 ++
	Если ВидДокумента = 10 Тогда
		Если СтатусДокумента = Справочники.Scan_СтатусыНакладных1ДБ.Удален Тогда
			Если СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) Тогда
				Если Продукты <> Неопределено Тогда
					ДатаПрихода    = ОбъектНакладная.Дата;
					НомерНакладной = ОбъектНакладная.Номер;
					ГУИДНакладной  = ОбъектНакладная.GUID;
					//rarus bonmak 21.09.2020 14375 ++
					СписокПродуктов = Новый СписокЗначений;
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							СписокПродуктов.Добавить(НайденноеИзделие);	
						КонецЕсли;
					КонецЦикла;
					//rarus bonmak 21.09.2020 14375 --
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							//rarus bonmak 21.08.2020 14375 ++
							//ДатаУбытия = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод,
							//Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру),
							//Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, ТекущаяДата());
							//Если ДатаУбытия = Дата(1,1,1) Тогда
							//	Продолжить;
							//КонецЕсли;
							//ДокументУбытие = ПолучитьДокументУбытие(НайденноеИзделие, ДатаУбытия);
							ЕстьУбытие = Ложь;
							ДокументУбытие = ЕстьУбытиеИзУчета(НайденноеИзделие, ЕстьУбытие);
							//rarus bonmak 21.08.2020 14375 --
							ПризнакБУ = НайденноеИзделие.БУ;
							Если ПризнакБУ Тогда
								//1. ОЧИСТИМ КЛЮЧЕВЫЕ ДАТЫ
								//Дата Продажи БУ Дилеру
								РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
								Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУДилеру, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);	
								//Дата Передачи БУ Изделия Дилеру
								//РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								//Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
								//Перечисления.Scan_КлючевыеДаты.ДатаПередачиБУИзделияДилеру, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);
								//Чтение старого значения регистра
								СтруктураОтбора   = Новый Структура("Объект,ОбъектКлючевойДаты,ВидКлючевойДаты", НайденноеИзделие, Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Перечисления.Scan_КлючевыеДаты.ДатаПередачиБУИзделияДилеру);
								СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата(), СтруктураОтбора);
								ЗначениеТекущее   = СтруктураСведений.Значение;
								ДатаЗаписи        = СтруктураСведений.Период;
								РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
								Перечисления.Scan_КлючевыеДаты.ДатаПередачиБУИзделияДилеру, ДатаЗаписи + 1,,,ГУИДНакладной, НомерНакладной);			
									
								//Дата Продажи БУ Клиенту
								//РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								//Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
								//Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);
								//Чтение старого значения регистра
								СтруктураОтбора   = Новый Структура("Объект,ОбъектКлючевойДаты,ВидКлючевойДаты", НайденноеИзделие, Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту);
								СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата(), СтруктураОтбора);
								ЗначениеТекущее   = СтруктураСведений.Значение;
								ДатаЗаписи        = СтруктураСведений.Период;
								РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
								Перечисления.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту, ДатаЗаписи + 1,,,ГУИДНакладной, НомерНакладной);			
							Иначе	
								//1. ОЧИСТИМ КЛЮЧЕВЫЕ ДАТЫ
								Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
									//Дата продажи дилеру
									РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Дата('00010101'),
									Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);	
									//Дата передачи дилеру
									//РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
									//Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Дата('00010101'),
									//Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);
									СтруктураОтбора   = Новый Структура("Объект,ОбъектКлючевойДаты,ВидКлючевойДаты", НайденноеИзделие.ЗаказНаЗавод, Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру);
									СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата(), СтруктураОтбора);
									ЗначениеТекущее   = СтруктураСведений.Значение;
									ДатаЗаписи        = СтруктураСведений.Период;
									РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Дата('00010101'),
									Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, ДатаЗаписи + 1,,,ГУИДНакладной, НомерНакладной);			
								
									//Дата продажи клиенту
									//РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
									//Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Дата('00010101'),
									//Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);
									СтруктураОтбора   = Новый Структура("Объект,ОбъектКлючевойДаты,ВидКлючевойДаты", НайденноеИзделие.ЗаказНаЗавод, Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту);
									СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата(), СтруктураОтбора);
									ЗначениеТекущее   = СтруктураСведений.Значение;
									ДатаЗаписи        = СтруктураСведений.Период;
									РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Дата('00010101'),
									Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту, ДатаЗаписи + 1,,,ГУИДНакладной, НомерНакладной);			
								Иначе
									СообщениеОбОшибке = "Не удалось очистить ключевые даты у продукта:  " + НайденноеИзделие.IDExternalSystemProduct + " причина ошибки: Нет заказа на завод на дату " + ТекущаяДата();
									Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							//2. ОТМЕНИМ УБЫТИЕ ИЗ УЧЕТА И ПОМЕТИМ НА УДАЛЕНИЕ
							Если ДокументУбытие.Пустая() Тогда 
								Продолжить;
							КонецЕсли;
							//rarus bonmak 21.09.2020 14375 ++
							//НовыйДокумент = Документы.Scan_ДвижениеИзделий.СоздатьДокумент();
							//НовыйДокумент.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПоступлениеНаСклад;
							//
							//ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
							//НовыйДокумент.Организация = ТекПользователь.Организация;
							//НовыйДокумент.ПодразделениеКомпании = ТекПользователь.ПодразделениеОрганизации;
							//НовыйДокумент.Автор = ТекПользователь;
							//НовыйДокумент.Менеджер = ТекПользователь;
							//НовыйДокумент.Дата = ТекущаяДата();
							//НовыйДокумент.НакладнаяТС = НомерНакладной;
							//НовыйДокумент.МестоХранения = ДокументУбытие.МестоХранения; 
							//
							//Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекПользователь,НовыйДокумент.Компания,НовыйДокумент.Контрагент);
							//
							//НовыйДокумент.ДатаПрихода = ДокументУбытие.ДатаПрихода + 1;
							//НовыйДокумент.Комментарий = "Отмена накладной " + НомерНакладной + ". Документ сформирован автоматически";
							//
							//СтрокаТЧ = НовыйДокумент.СоставЗаявки.Добавить();
							//СтрокаТЧ.Изделие = НайденноеИзделие;
							//СтрокаТЧ.ДатаПрихода = ДокументУбытие.ДатаПрихода + 1;
							//
							//Попытка		
							//	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
							//Исключение
							//	СообщениеОбОшибке = "Не удалось сформировать движение изделий (ХО Поступление на склад, механизм обмена задачами, отмена продажи): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " для накладной " + ГУИДНакладной;
							//	Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
							//	Продолжить;
							//КонецПопытки;
							
							ДокументУбытиеОбъект = ДокументУбытие.ПолучитьОбъект();
							ДокументУбытиеОбъект.ПометкаУдаления = Истина;
							ДокументУбытиеОбъект.Проведен = Ложь;
							ДокументУбытиеОбъект.Комментарий = ДокументУбытиеОбъект.Комментарий + Символы.ПС + "Отмена накладной " + НомерНакладной + ". Документ отменен автоматически";

							Попытка		
								ДокументУбытиеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							Исключение
								СообщениеОбОшибке = "Не удалось отменить убытие из учета " + ДокументУбытиеОбъект.Номер + ", механизм обмена задачами, отмена продажи): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " для накладной " + ГУИДНакладной;
								Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
								Продолжить;
							КонецПопытки;

							//3. ИЗМЕНИМ СТАТУС ЗАЯВКИ НА ДЕЙСТВИЕ
							//Найдем заявку на действие
							Запрос = Новый Запрос;
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК Ссылка
							|ИЗ
							|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
							|ГДЕ
							|	(Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена)
							|	ИЛИ Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.ВРаботе)) // rarus tenkam 06.12.2021 mantis 18062 +
							|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие.Ссылка = &ИзделиеСсылка 
							|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация В(&СписокХО) // rarus tenkam 19.08.2021 mantis 18062 +
							|
							|УПОРЯДОЧИТЬ ПО
							|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Дата УБЫВ";
							
							Запрос.УстановитьПараметр("ИзделиеСсылка", НайденноеИзделие);
							
							// rarus tenkam 19.08.2021 mantis 18062 +++
							СписокХО = Scan_ВспомогательныеФункцииСервер.ПолучитьСписокХОСПродажей();
							Запрос.УстановитьПараметр("СписокХО", СписокХО);
							// rarus tenkam 19.08.2021 mantis 18062 ---
							
							РезультатЗапроса = Запрос.Выполнить();
							Если РезультатЗапроса.Пустой() Тогда
								Продолжить;
							Иначе
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								ВыборкаДетальныеЗаписи.Следующий();
								ЗаявкаНаДействиеСсылка = ВыборкаДетальныеЗаписи.Ссылка; 
							КонецЕсли;
							
							// rarus tenkam 19.08.2021 mantis 18062 +++
							Если Scan_ВспомогательныеФункцииСервер.ЭтоЗаявкаCПеревозкой(ЗаявкаНаДействиеСсылка) Тогда
								Продолжить;
							КонецЕсли;
							// rarus tenkam 19.08.2021 mantis 18062 ---
							
							//Статус "В работе"
							ЗаявкаНаДействиеОбъект = ЗаявкаНаДействиеСсылка.ПолучитьОбъект();
							ЗаявкаНаДействиеОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.ВРаботе;
							ЗаявкаНаДействиеОбъект.Комментарий = ЗаявкаНаДействиеОбъект.Комментарий + Символы.ПС + "Отмена накладной " + НомерНакладной;

							Попытка		
								ЗаявкаНаДействиеОбъект.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								СообщениеОбОшибке = "Не удалось изменить статус заявки на действие " + ЗаявкаНаДействиеОбъект.Номер + ", механизм обмена задачами, отмена продажи): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " для накладной " + ГУИДНакладной;
								Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
								Продолжить;
							КонецПопытки;
							//Статус "Аннулирована"
							МассивПродуктов = ЗаявкаНаДействиеСсылка.ПродуктыПоЗаявке.ВыгрузитьКолонку("Изделие");
							СписокИзделийПоЗаявке = Новый СписокЗначений;
							СписокИзделийПоЗаявке.ЗагрузитьЗначения(МассивПродуктов);
							АннулироватьЗаявку = Ложь;
							Для Каждого ЭлементПродукт Из СписокПродуктов Цикл
								ЗначениеЭлемента = СписокИзделийПоЗаявке.НайтиПоЗначению(ЭлементПродукт.Значение);
								Если ЗначениеЭлемента = Неопределено Тогда
									АннулироватьЗаявку = Ложь;
									Прервать;
								Иначе
									ИндексЭлемента = СписокИзделийПоЗаявке.Индекс(ЗначениеЭлемента);
									СписокИзделийПоЗаявке.Удалить(ИндексЭлемента);
									АннулироватьЗаявку = Истина;
								КонецЕсли;	
							КонецЦикла;
							
							Если АннулироватьЗаявку Тогда
								//Аннулируем если все продукты совпадают
								Если СписокИзделийПоЗаявке.Количество() = 0 Тогда
									Попытка	// rarus tenkam 04.08.2021 mantis 18062 +
										Scan_ВспомогательныеФункцииСервер.АннулироватьЗаявку(ЗаявкаНаДействиеСсылка);
									// rarus tenkam 04.08.2021 mantis 18062 +++
										// Добавим запись по отправке ПФ заявки на действие
										ИмяПФ = Scan_Печать.ИмяОсновнойПФ(ЗаявкаНаДействиеСсылка);
										ШаблонПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ШаблонПоИмениПФ(ИмяПФ);
										РегистрыСведений.Scan_ОчередьПоОтправкеПисем.ЗаписьЗначенияРегистраСведения(ЗаявкаНаДействиеСсылка,ШаблонПисьма)
									Исключение
										СообщениеОбОшибке = "Не удалось аннулировать заявку " + ЗаявкаНаДействиеСсылка;
										Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");											
									КонецПопытки;
									// rarus tenkam 04.08.2021 mantis 18062 ---
								КонецЕсли;
							КонецЕсли;
							//rarus bonmak 21.09.2020 14375 --
						КонецЕсли;
					КонецЦикла;
					
					//rarus kabany Дата: 21/05/2021 17517 +++
					// rarus agar 25.03.2021 17517 ++
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Продукты", СписокПродуктов.ВыгрузитьЗначения());
					Запрос.Текст = "ВЫБРАТЬ
					|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка КАК ЗаявкаНаОтгрузку,
					|	Scan_ЗаявкаНаОтгрузкуПродукты.Продукт КАК Продукт
					|ИЗ
					|	Документ.Scan_ЗаявкаНаОтгрузку.Продукты КАК Scan_ЗаявкаНаОтгрузкуПродукты
					|ГДЕ
					|	НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ПометкаУдаления
					|	И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отказ)
					|	И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Статус = ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена)
					|	И Scan_ЗаявкаНаОтгрузкуПродукты.Продукт В(&Продукты)
					|	И Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.СоглашениеОПоставке В
					|			(ВЫБРАТЬ
					|				Продукты.СоглашениеОПоставке
					|			ИЗ
					|				Справочник.Scan_Изделия КАК Продукты
					|			ГДЕ
					|				Продукты.Ссылка В (&Продукты))
					|ИТОГИ ПО
					|	ЗаявкаНаОтгрузку
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Продукты.СоглашениеОПоставке КАК Заявка
					|ИЗ
					|	Справочник.Scan_Изделия КАК Продукты
					|ГДЕ
					|	Продукты.Ссылка В(&Продукты)";
					РезультатыЗапроса = Запрос.ВыполнитьПакет();
					
					РезультатЗапросаЗаявкиНаОтгрузку = РезультатыЗапроса[0];
					РезультатЗапросаЗаявки           = РезультатыЗапроса[1];
					
					ВидДилераСобственный = ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Собственный");
					
					ОбъектКлючевойДатыИзделие      = ПредопределенноеЗначение("Перечисление.Scan_ОбъектыКлючевыхДат.Изделие");
					ОбъектКлючевойДатыЗаказНаЗавод = ПредопределенноеЗначение("Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод");
					
					КлючеваяДатаДатаПродажиБУДилеру  = ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУДилеру");
					КлючеваяДатаДатаПродажиБУКлиенту = ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиБУКлиенту");
					КлючеваяДатаДатаПродажиКлиенту   = ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту");
					КлючеваяДатаДатаПродажиИзделия   = ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия");
					
					ВыборкаЗаявкаНаОтгрузку = РезультатЗапросаЗаявкиНаОтгрузку.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЗаявкаНаОтгрузку");
					Пока ВыборкаЗаявкаНаОтгрузку.Следующий() Цикл
						ЗаявкаНаОтгрузкуОбъект = ВыборкаЗаявкаНаОтгрузку.ЗаявкаНаОтгрузку.ПолучитьОбъект();
						
						ВыборкаПродукты = ВыборкаЗаявкаНаОтгрузку.Выбрать();
						Если ЗаявкаНаОтгрузкуОбъект.Продукты.Количество() = ВыборкаПродукты.Количество() Тогда
							// В Заявке на отгрузку столько же продуктов, сколько и в отмененной накладной
							ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена");
						Иначе
							// Удаляем продукты отмененной накладной из Заявки на отгрузку
							Пока ВыборкаПродукты.Следующий() Цикл
								НайденнаяСтрока = ЗаявкаНаОтгрузкуОбъект.Продукты.Найти(ВыборкаПродукты.Продукт, "Продукт");
								Если НайденнаяСтрока <> Неопределено Тогда
									ЗаявкаНаОтгрузкуОбъект.Продукты.Удалить(НайденнаяСтрока);
								КонецЕсли;
							КонецЦикла;
							
							Если ЗаявкаНаОтгрузкуОбъект.Продукты.Количество() = 0 Тогда
								// В Заявке на отгрузку прдуктов не осталось
								ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена");
							Иначе
								// Обрабатываем Заявки на отгрузку только в статусах ЧастичноИсполнена и Исполнена
								// Другие статусы оставляем как есть
								Если    ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЧастичноИсполнена")
									Или ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Исполнена") 
									Тогда
									КоличествоПроданныхПродуктов = 0;
									
									ТекущаяДата = ТекущаяДата();
									ТипДилера   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаявкаНаОтгрузку.ЗаявкаНаОтгрузку,"Дилер.ВидДилера");
									
									Для Каждого СтрокаПродукта Из ЗаявкаНаОтгрузкуОбъект.Продукты Цикл
										ПродуктБУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПродукта.Продукт,"БУ");
										
										Если ПродуктБУ И ТипДилера <> ВидДилераСобственный Тогда
											ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(СтрокаПродукта.Продукт,
											ОбъектКлючевойДатыИзделие, КлючеваяДатаДатаПродажиБУДилеру, ТекущаяДата);
										ИначеЕсли ПродуктБУ И ТипДилера = ВидДилераСобственный Тогда
											ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(СтрокаПродукта.Продукт,
											ОбъектКлючевойДатыИзделие, КлючеваяДатаДатаПродажиБУКлиенту, ТекущаяДата);
										ИначеЕсли Не ПродуктБУ И ТипДилера = ВидДилераСобственный Тогда
											ЗаказНаЗаводСсылка = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(СтрокаПродукта.Продукт);
											
											ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ЗаказНаЗаводСсылка,
											ОбъектКлючевойДатыЗаказНаЗавод, КлючеваяДатаДатаПродажиКлиенту, ТекущаяДата);
										Иначе
											ЗаказНаЗаводСсылка = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(СтрокаПродукта.Продукт);
											
											ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ЗаказНаЗаводСсылка,
											ОбъектКлючевойДатыЗаказНаЗавод, КлючеваяДатаДатаПродажиИзделия, ТекущаяДата);
										КонецЕсли;
										
										Если  ЗначениеЗаполнено(ДатаПродажиПродукта) 
											И ТипЗнч(ДатаПродажиПродукта) = Тип("Дата")
											И ДатаПродажиПродукта <> Дата(1,1,1) 
											Тогда
											КоличествоПроданныхПродуктов = КоличествоПроданныхПродуктов + 1;
										КонецЕсли;
									КонецЦикла;
									
									Если ЗаявкаНаОтгрузкуОбъект.Продукты.Количество() = КоличествоПроданныхПродуктов Тогда
										ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Исполнена");
										// rarus kabany 28.05.2021 17517 +++
										//Иначе
										//	ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЧастичноИсполнена");
										//КонецЕсли;
									ИначеЕсли ЗаявкаНаОтгрузкуОбъект.Продукты.Количество() <> КоличествоПроданныхПродуктов И КоличествоПроданныхПродуктов > 0 Тогда 
										ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЧастичноИсполнена");
									Иначе
										Если КонецДня(ЗаявкаНаОтгрузкуОбъект.ДатаОтгрузки) < КонецДня(ТекущаяДата) Тогда
											ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена");
										Иначе
											ЗаявкаНаОтгрузкуОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Одобрена");
										КонецЕсли;
									КонецЕсли;
									// rarus kabany 28.05.2021 17517 ---
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Попытка
							ЗаявкаНаОтгрузкуОбъект.Записать();
						Исключение
							КомментарийЗаписи = "Не удалось записать Заявку на отгрузку: "+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Механизм получения задач", "Ошибка", Метаданные.Документы.Scan_ЗаявкаНаОтгрузку, ЗаявкаНаОтгрузкуОбъект.Ссылка, КомментарийЗаписи);
						КонецПопытки;
					КонецЦикла;
					
					ВыборкаЗаявка = РезультатЗапросаЗаявки.Выбрать();
					Пока ВыборкаЗаявка.Следующий() Цикл
						Если ВыборкаЗаявка.Заявка <> Справочники.Scan_СоглашенияОПоставке.ПустаяСсылка() Тогда   // rarus kabany 28.07.2021 18068 +
							ЗаявкаОбъект = ВыборкаЗаявка.Заявка.ПолучитьОбъект();
							
							КоличествоПроданныхПродуктов = 0;
							
							ТекущаяДата = ТекущаяДата();
							ТипДилера   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаявка.Заявка,"Дилер.ВидДилера");
							
							Для Каждого СтрокаПродукта Из ЗаявкаОбъект.СписокПродуктов Цикл
								ПродуктБУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПродукта.Продукт,"БУ");
								
								Если ПродуктБУ И ТипДилера <> ВидДилераСобственный Тогда
									ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(СтрокаПродукта.Продукт,
									ОбъектКлючевойДатыИзделие, КлючеваяДатаДатаПродажиБУДилеру, ТекущаяДата);
								ИначеЕсли ПродуктБУ И ТипДилера = ВидДилераСобственный Тогда
									ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(СтрокаПродукта.Продукт,
									ОбъектКлючевойДатыИзделие, КлючеваяДатаДатаПродажиБУКлиенту, ТекущаяДата);
								ИначеЕсли Не ПродуктБУ И ТипДилера = ВидДилераСобственный Тогда
									ЗаказНаЗаводСсылка = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(СтрокаПродукта.Продукт);
									
									ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ЗаказНаЗаводСсылка,
									ОбъектКлючевойДатыЗаказНаЗавод, КлючеваяДатаДатаПродажиКлиенту, ТекущаяДата);
								Иначе
									ЗаказНаЗаводСсылка = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(СтрокаПродукта.Продукт);
									
									ДатаПродажиПродукта = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ЗаказНаЗаводСсылка,
									ОбъектКлючевойДатыЗаказНаЗавод, КлючеваяДатаДатаПродажиИзделия, ТекущаяДата);
								КонецЕсли;
								
								Если  ЗначениеЗаполнено(ДатаПродажиПродукта) 
									И ТипЗнч(ДатаПродажиПродукта) = Тип("Дата")
									И ДатаПродажиПродукта <> Дата(1,1,1) 
									Тогда
									КоличествоПроданныхПродуктов = КоличествоПроданныхПродуктов + 1;
								КонецЕсли;
							КонецЦикла;
							
							Если КоличествоПроданныхПродуктов = 0 Тогда
								ЗаявкаОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен");
							ИначеЕсли ЗаявкаОбъект.СписокПродуктов.Количество() = КоличествоПроданныхПродуктов Тогда //rarus bonmak 27.07.2021 18055 было ЗаявкаОбъект.Продукты
								ЗаявкаОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Исполнен");
							Иначе
								ЗаявкаОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_ИсполненЧастично");
							КонецЕсли;
							
							Попытка
								ЗаявкаОбъект.Записать();
							Исключение
								КомментарийЗаписи = "Не удалось записать Заявку: "+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
								ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Механизм получения задач", "Ошибка", Метаданные.Справочники.Scan_СоглашенияОПоставке, ЗаявкаОбъект.Ссылка, КомментарийЗаписи);
							КонецПопытки;
						КонецЕсли;	
					КонецЦикла;
					// rarus agar 25.03.2021 17517 --
					//rarus kabany Дата: 21/05/2021 17517 ---
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ВидДокумента = 14 Тогда
		Если СтатусДокумента = Справочники.Scan_СтатусыНакладных1ДБ.Удален Тогда
			Если СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) Тогда
				Если Продукты <> Неопределено Тогда
					ДатаПрихода    = ОбъектНакладная.Дата;
					НомерНакладной = ОбъектНакладная.Номер;
					ГУИДНакладной  = ОбъектНакладная.GUID; 
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							ПризнакБУ = НайденноеИзделие.БУ;
							Если ПризнакБУ Тогда
								Если НайденноеИзделие.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							//1. ОЧИСТИМ ДАТУ ПОСТУПЛЕНИЯ ИНВОЙСА 1С
							//rarus bonmak 17.08.2020 14375 ++ перенос ключевой даты в изделие
							//Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
							//ДатаПоступленияИнвойса1С
							РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
							Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
							Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИнвойса1С, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);	
							//Иначе
							//	СообщениеОбОшибке = "Не удалось очистить ключевую даты ДатаПоступленияИнвойса1С у продукта:  " + НайденноеИзделие.IDExternalSystemProduct + " причина ошибки: Нет заказа на завод на дату " + ТекущаяДата();
							//	Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
							//	Продолжить;
							//КонецЕсли;
							//rarus bonmak 17.08.2020 14375 -- перенос ключевой даты в изделие
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидДокумента = 15 Тогда
		Если СтатусДокумента = Справочники.Scan_СтатусыНакладных1ДБ.Удален Тогда	
			Если СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) Тогда
				Если Продукты <> Неопределено Тогда
					ДатаПрихода    = ОбъектНакладная.Дата;
					НомерНакладной = ОбъектНакладная.Номер;
					ГУИДНакладной  = ОбъектНакладная.GUID; 
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							ПризнакБУ = НайденноеИзделие.БУ;
							//rarus bonmak 19.08.2020 14375 ++
							ДокументПоступление = ПолучитьДокументПоступление(НайденноеИзделие);
							Если ДокументПоступление.Пустая() Тогда 
								Продолжить;
							КонецЕсли;
							Если ДокументПоступление.НакладнаяТС <> НомерНакладной Тогда
								Продолжить;
							КонецЕсли;
							//rarus bonmak 19.08.2020 14375 --
							Если НЕ ПризнакБУ Тогда
								//1. ЗАПИСАТЬ ПОСЛЕДНИЕ ДАТЫ ПРОДАЖИ
								Если ЗначениеЗаполнено(НайденноеИзделие.ЗаказНаЗавод) Тогда
									//Дата продажи дилеру
									//Чтение старого значения регистра
									СтруктураОтбора   = Новый Структура("Объект,ОбъектКлючевойДаты,ВидКлючевойДаты", НайденноеИзделие.ЗаказНаЗавод, Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия);
									СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата(), СтруктураОтбора);
									ЗначениеТекущее   = СтруктураСведений.Значение;
									ДатаЗаписи        = СтруктураСведений.Период;
									Если ЗначениеТекущее = Дата(1,1,1) Тогда
										СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(СтруктураСведений.Период - 1, СтруктураОтбора);
										ЗначениеСтарое    = СтруктураСведений.Значение;
										Если ЗначениеСтарое <> Дата(1,1,1) Тогда
											РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
											Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначениеСтарое,
											Перечисления.Scan_КлючевыеДаты.ДатаПродажиИзделия, ДатаЗаписи + 1,,,ГУИДНакладной, НомерНакладной);	
										КонецЕсли;									
									КонецЕсли;
									//Дата передачи дилеру
									//Чтение старого значения регистра
									СтруктураОтбора   = Новый Структура("Объект,ОбъектКлючевойДаты,ВидКлючевойДаты", НайденноеИзделие.ЗаказНаЗавод, Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру);
									СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата(), СтруктураОтбора);
									ЗначениеТекущее   = СтруктураСведений.Значение;
									ДатаЗаписи        = СтруктураСведений.Период;
									Если ЗначениеТекущее = Дата(1,1,1) Тогда
										СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(СтруктураСведений.Период - 1, СтруктураОтбора);
										ЗначениеСтарое    = СтруктураСведений.Значение;
										Если ЗначениеСтарое <> Дата(1,1,1) Тогда
											РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
											Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначениеСтарое,
											Перечисления.Scan_КлючевыеДаты.ДатаПередачиИзделияДилеру, ДатаЗаписи + 1,,,ГУИДНакладной, НомерНакладной);	
										КонецЕсли;									
									КонецЕсли;								
									//Дата продажи клиенту								
									//Чтение старого значения регистра
									СтруктураОтбора   = Новый Структура("Объект,ОбъектКлючевойДаты,ВидКлючевойДаты", НайденноеИзделие.ЗаказНаЗавод, Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту);
									СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата(), СтруктураОтбора);
									ЗначениеТекущее   = СтруктураСведений.Значение;
									ДатаЗаписи        = СтруктураСведений.Период;
									Если ЗначениеТекущее = Дата(1,1,1) Тогда
										СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(СтруктураСведений.Период - 1, СтруктураОтбора);
										ЗначениеСтарое    = СтруктураСведений.Значение;
										Если ЗначениеСтарое <> Дата(1,1,1) Тогда
											РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие.ЗаказНаЗавод, 
											Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначениеСтарое,
											Перечисления.Scan_КлючевыеДаты.ДатаПродажиКлиенту, ДатаЗаписи + 1,,,ГУИДНакладной, НомерНакладной);	
										КонецЕсли;									
									КонецЕсли;
									
								Иначе
									СообщениеОбОшибке = "Не удалось очистить ключевые даты у продукта:  " + НайденноеИзделие.IDExternalSystemProduct + " причина ошибки: Нет заказа на завод на дату " + ТекущаяДата();
									Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
									Продолжить;
								КонецЕсли;
							//rarus vikhle 14.05.2021 mt 17733 +++	
							Иначе
								ТекущаяДата = ТекущаяДатаСеанса();
								ПродуктОбъект = Неопределено;//rarus vikhle 21.05.2021 mt 17733
								
								СтруктураОтбора = Новый Структура;
								СтруктураОтбора.Вставить("Объект",НайденноеИзделие);
								СтруктураОтбора.Вставить("ОбъектКлючевойДаты",Перечисления.Scan_ОбъектыКлючевыхДат.Изделие);
								СтруктураОтбора.Вставить("ВидКлючевойДаты",Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИзделияБУНаСклад);
								СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата, СтруктураОтбора);
								ЗначениеТекущее   = СтруктураСведений.Значение;
								ДатаЗаписи        = СтруктураСведений.Период;
								Если НЕ ЗначениеТекущее = Дата(1,1,1) Тогда
																		
									Запрос = Новый Запрос;
									Запрос.Текст = "ВЫБРАТЬ
									               |	Scan_СоставСоглашенийОПоставкеСрезПоследних.Период КАК Период,
									               |	Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие КАК Продукт,
									               |	Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке КАК СтараяЗаявка,
									               |	Scan_СоставСоглашенийОПоставкеСрезПоследнихТекущий.СоглашениеОПоставке КАК ТекущаяЗаявка
									               |ИЗ
									               |	РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних(&Период, Изделие = &НайденноеИзделие) КАК Scan_СоставСоглашенийОПоставкеСрезПоследних
									               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних(, Изделие = &НайденноеИзделие) КАК Scan_СоставСоглашенийОПоставкеСрезПоследнихТекущий
									               |		ПО Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие = Scan_СоставСоглашенийОПоставкеСрезПоследнихТекущий.Изделие";
									Запрос.УстановитьПараметр("НайденноеИзделие",НайденноеИзделие);
									Запрос.УстановитьПараметр("Период",ДатаЗаписи - 1);
									РезультатЗапроса = Запрос.Выполнить();
									ВыборкаСоставЗаявок = РезультатЗапроса.Выбрать();
									Если ВыборкаСоставЗаявок.Следующий() Тогда
										Если НЕ ЗначениеЗаполнено(ВыборкаСоставЗаявок.ТекущаяЗаявка) И ЗначениеЗаполнено(ВыборкаСоставЗаявок.СтараяЗаявка) Тогда 
											МенеджерЗаписи = РегистрыСведений.Scan_СоставСоглашенийОПоставке.СоздатьМенеджерЗаписи();
											МенеджерЗаписи.Период = ТекущаяДата;
											МенеджерЗаписи.Изделие = НайденноеИзделие;
											МенеджерЗаписи.СоглашениеОПоставке = ВыборкаСоставЗаявок.СтараяЗаявка;
											МенеджерЗаписи.Записать();
										КонецЕсли;	
									КонецЕсли;	
									
									МассивВидовЗначенийПродукта = Новый Массив;//массив видов реквизитов продукта, по которым нужно получить значение до момента фиксации поступления БУ
									Если НайденноеИзделие.СоглашениеОПоставке.Пустая() Тогда
										МассивВидовЗначенийПродукта.Добавить(Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.СоглашениеОПоставке);
									КонецЕсли;
									
									Если НайденноеИзделие.КлиентСоглашенияОПоставке.Пустая() Тогда
										МассивВидовЗначенийПродукта.Добавить(Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.КлиентСоглашенияОПоставке);	
									КонецЕсли;	
									
									//rarus vikhle 21.05.2021 mt 17733 +++
									Если НЕ НайденноеИзделие.ЛокальныйСтатусПродукта = Справочники.Scan_ЛокальныеСтатусыПродуктов.SOLD Тогда
										МассивВидовЗначенийПродукта.Добавить(Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ЛокальныйСтатусПродукта);	
									КонецЕсли;
									//rarus vikhle 21.05.2021 mt 17733 ---
									
									Если НЕ МассивВидовЗначенийПродукта.Количество() = 0 Тогда
									
										Запрос = Новый Запрос;
										Запрос.Текст = "ВЫБРАТЬ
										               |	Scan_ХарактеристикиИзделияСрезПоследних.Период КАК Период,
										               |	Scan_ХарактеристикиИзделияСрезПоследних.Изделие КАК Продукт,
										               |	Scan_ХарактеристикиИзделияСрезПоследних.ВидЗначения КАК ВидЗначения,
										               |	Scan_ХарактеристикиИзделияСрезПоследних.Значение КАК Значение
										               |ИЗ
										               |	РегистрСведений.Scan_ХарактеристикиИзделия.СрезПоследних(
										               |			&Период,
										               |			Изделие = &НайденноеИзделие
										               |				И ВидЗначения В (&ВидыЗначения)) КАК Scan_ХарактеристикиИзделияСрезПоследних";
										Запрос.УстановитьПараметр("НайденноеИзделие",НайденноеИзделие);
										Запрос.УстановитьПараметр("Период",ДатаЗаписи - 1);
										Запрос.УстановитьПараметр("ВидыЗначения",МассивВидовЗначенийПродукта);
										
										РезультатЗапроса = Запрос.Выполнить();
										Выборка = РезультатЗапроса.Выбрать();
										Если ПродуктОбъект = Неопределено Тогда //rarus vikhle 21.05.2021 mt 17733 
											ПродуктОбъект = НайденноеИзделие.ПолучитьОбъект();
										КонецЕсли;	
										Пока Выборка.Следующий() Цикл
											Если Выборка.ВидЗначения = Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.СоглашениеОПоставке 
												И ЗначениеЗаполнено(Выборка.Значение) Тогда
												ПродуктОбъект.СоглашениеОПоставке = Выборка.Значение;
											ИначеЕсли Выборка.ВидЗначения = Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.КлиентСоглашенияОПоставке 
												И ЗначениеЗаполнено(Выборка.Значение) Тогда
												ПродуктОбъект.КлиентСоглашенияОПоставке = Выборка.Значение;
											//rarus vikhle 21.05.2021 mt 17733 +++
											ИначеЕсли Выборка.ВидЗначения = Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.ЛокальныйСтатусПродукта 
												И ЗначениеЗаполнено(Выборка.Значение) Тогда
												ПродуктОбъект.ЛокальныйСтатусПродукта = Выборка.Значение;
											//rarus vikhle 21.05.2021 mt 17733 ---
											КонецЕсли;	
										КонецЦикла;	
									КонецЕсли;
									
									//rarus vikhle 21.05.2021 mt 17733 +++
									Если НЕ ПродуктОбъект = Неопределено И ПродуктОбъект.ЛокальныйСтатусПродукта.Пустая() Тогда
										ПродуктОбъект.ЛокальныйСтатусПродукта = Справочники.Scan_ЛокальныеСтатусыПродуктов.SOLD;
									КонецЕсли;	
									
									Если НЕ ПродуктОбъект = Неопределено И ПродуктОбъект.Модифицированность() Тогда
										Попытка
											ПродуктОбъект.Записать();
										Исключение
											фСообщениеОбОшибке = "Не удалось изменить реквизиты у продукта (" + ПродуктОбъект.IDExternalSystemProduct + ") для задачи:  " + ОбъектЗадача.GUID + " причина ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
											Scan_ВебСервисы.scЗафиксироватьОшибку(фСообщениеОбОшибке, "Механизм получения задач");	
										КонецПопытки;	
									КонецЕсли;
									//rarus vikhle 21.05.2021 mt 17733 ---
									
								КонецЕсли;	
							//rarus vikhle 14.05.2021 mt 17733 ---	
							КонецЕсли;
							//2. РАСПРОВЕСТИ ПОСТУПЛЕНИЕ НА СКЛАД
							//rarus bonmak 19.08.2020 14375 ++
							//ДокументПоступление = ПолучитьДокументПоступление(НайденноеИзделие);
							//Если ДокументПоступление.Пустая() Тогда 
							//	Продолжить;
							//КонецЕсли;
							//rarus bonmak 19.08.2020 14375 --
							ДокументПоступлениеОбъект = ДокументПоступление.ПолучитьОбъект();
							ДокументПоступлениеОбъект.ПометкаУдаления = Истина;
							Попытка
								ДокументПоступлениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							Исключение
								СообщениеОбОшибке = "Не удалось распровести документ :  " + ДокументПоступление + " причина ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
								Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
								Отказ = Истина;
								Продолжить;
							КонецПопытки;
							//3.ЗАПИШЕМ КЛЮЧЕВУЮ ДАТУ ПОСТУПЛЕНИЕ НА СКЛАД
							Если ПризнакБУ Тогда
								РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
								Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИзделияБУНаСклад, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);
								//Дата продукт в архиве
								//rarus bonmak 03.11.2020 14375 ++
								//Чтение старого значения регистра
									СтруктураОтбора   = Новый Структура("Объект,ОбъектКлючевойДаты,ВидКлючевойДаты", НайденноеИзделие, Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве);
									СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(ТекущаяДата(), СтруктураОтбора);
									ЗначениеТекущее   = СтруктураСведений.Значение;
									ДатаЗаписи        = СтруктураСведений.Период;
									Если ЗначениеТекущее = Дата(1,1,1) Тогда
										СтруктураСведений = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведенияСПериодом(СтруктураСведений.Период - 1, СтруктураОтбора);
										ЗначениеСтарое    = СтруктураСведений.Значение;
										Если ЗначениеСтарое <> Дата(1,1,1) Тогда
											РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
											Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ЗначениеСтарое,
											Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве, ДатаЗаписи + 1,,,ГУИДНакладной, НомерНакладной);	
										КонецЕсли;									
									КонецЕсли;
								//rarus bonmak 03.11.2020 14375 --

							Иначе
								РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
								Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, Дата('00010101'),
								Перечисления.Scan_КлючевыеДаты.ДатаПоступленияИзделияНаСклад, ДатаПрихода + 1,,,ГУИДНакладной, НомерНакладной);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры //rarus bonmak 18.05.2020 14375 --

Процедура РазобратьЗадачуСписаниеПродуктов(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) //rarus bonmak 22.12.2020 16653 ++
	Если ВидДокумента = 17 Тогда
		Если СтатусДокумента = Справочники.Scan_СтатусыНакладных1ДБ.Проведён Тогда
			Если СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) Тогда
				Если Продукты <> Неопределено Тогда
					ДатаПрихода    = ОбъектНакладная.Дата;
					НомерНакладной = ОбъектНакладная.Номер;
					ГУИДНакладной  = ОбъектНакладная.GUID; 
					СписокПродуктов = Новый СписокЗначений;
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							СписокПродуктов.Добавить(НайденноеИзделие);	
						КонецЕсли;
					КонецЦикла;
					Для Каждого СтрПродукт Из Продукты Цикл
						НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID);
						Если НЕ НайденноеИзделие.Пустая() Тогда
							//1. ЗАПОЛНИМ КЛЮЧЕВУЮ ДАТА СПИСАНИЯ
							РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(НайденноеИзделие, 
							Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ДатаПрихода,
							Перечисления.Scan_КлючевыеДаты.ДатаСписания, ДатаПрихода,,,ГУИДНакладной, НомерНакладной);		
							
							ДокументПоступление = ПолучитьДокументПоступление(НайденноеИзделие);
							Если ДокументПоступление.Пустая() Тогда 
								Продолжить;
							КонецЕсли;
							
							ЕстьУбытие = Ложь;
							ДокументУбытие = ЕстьУбытиеИзУчета(НайденноеИзделие, ЕстьУбытие);	
							Если ЕстьУбытие Тогда
								Продолжить;
							КонецЕсли;
							
							//2. АННУЛИРУЕМ ДОКУМЕНТЫ
							//Найдем заявку на действие
							Запрос = Новый Запрос;
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка КАК Ссылка
							|ИЗ
							|	Документ.Scan_ЗаявкаНаДействие.ПродуктыПоЗаявке КАК Scan_ЗаявкаНаДействиеПродуктыПоЗаявке
							|ГДЕ
							|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.СтатусЗаявки <> Значение (Справочник.Scan_СтатусыЗаявокНаДействие.Исполнена)
							|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Изделие.Ссылка = &ИзделиеСсылка
							|	И Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.ХозОперация В(&СписокХО) // rarus tenkam 19.08.2021 mantis 18062 +
							|
							|УПОРЯДОЧИТЬ ПО
							|	Scan_ЗаявкаНаДействиеПродуктыПоЗаявке.Ссылка.Дата УБЫВ";
							
							Запрос.УстановитьПараметр("ИзделиеСсылка", НайденноеИзделие);
							// rarus tenkam 19.08.2021 mantis 18062 +++
							СписокХО = Scan_ВспомогательныеФункцииСервер.ПолучитьСписокХОСПродажей();
							Запрос.УстановитьПараметр("СписокХО", СписокХО);
							// rarus tenkam 19.08.2021 mantis 18062 ---
							
							РезультатЗапроса = Запрос.Выполнить();
							Если НЕ РезультатЗапроса.Пустой() Тогда
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								ВыборкаДетальныеЗаписи.Следующий();
								ЗаявкаНаДействиеСсылка = ВыборкаДетальныеЗаписи.Ссылка;
								
								МассивПродуктов = ЗаявкаНаДействиеСсылка.ПродуктыПоЗаявке.ВыгрузитьКолонку("Изделие");
								СписокИзделийПоЗаявке = Новый СписокЗначений;
								СписокИзделийПоЗаявке.ЗагрузитьЗначения(МассивПродуктов);
								АннулироватьЗаявку = Ложь;
								Для Каждого ЭлементПродукт Из СписокПродуктов Цикл
									ЗначениеЭлемента = СписокИзделийПоЗаявке.НайтиПоЗначению(ЭлементПродукт.Значение);
									Если ЗначениеЭлемента = Неопределено Тогда
										АннулироватьЗаявку = Ложь;
										Прервать;
									Иначе
										ИндексЭлемента = СписокИзделийПоЗаявке.Индекс(ЗначениеЭлемента);
										СписокИзделийПоЗаявке.Удалить(ИндексЭлемента);
										АннулироватьЗаявку = Истина;
									КонецЕсли;	
								КонецЦикла;
								
								// rarus tenkam 19.08.2021 mantis 18062 +++
								Если Scan_ВспомогательныеФункцииСервер.ЭтоЗаявкаCПеревозкой(ЗаявкаНаДействиеСсылка) Тогда
									Продолжить;
								КонецЕсли;
								// rarus tenkam 19.08.2021 mantis 18062 --- 								
								
								Если АннулироватьЗаявку Тогда
									//Аннулируем если все продукты совпадают
									Если СписокИзделийПоЗаявке.Количество() = 0 Тогда
										Попытка	// rarus tenkam 04.08.2021 mantis 18062 + Попытка
											Scan_ВспомогательныеФункцииСервер.АннулироватьЗаявку(ЗаявкаНаДействиеСсылка); 
										// rarus tenkam 04.08.2021 mantis 18062 +++
											// Добавим запись по отправке ПФ заявки на действие
											ИмяПФ = Scan_Печать.ИмяОсновнойПФ(ЗаявкаНаДействиеСсылка);
											ШаблонПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ШаблонПоИмениПФ(ИмяПФ);
											РегистрыСведений.Scan_ОчередьПоОтправкеПисем.ЗаписьЗначенияРегистраСведения(ЗаявкаНаДействиеСсылка,ШаблонПисьма)
										Исключение
											СообщениеОбОшибке = "Не удалось аннулировать заявку " + ЗаявкаНаДействиеСсылка;
											Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");											
										КонецПопытки;
										// rarus tenkam 04.08.2021 mantis 18062 --- 										
									КонецЕсли;
								КонецЕсли;	
							КонецЕсли;
							
							//3. СОЗДАДИМ УБЫТИЕ ИЗ УЧЕТА
							НовыйДокумент = Документы.Scan_ДвижениеИзделий.СоздатьДокумент();
							НовыйДокумент.ХозОперация = Справочники.Scan_ХозяйственныеОперации.УбытиеИзУчета;
							ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
							НовыйДокумент.Организация = ТекПользователь.Организация;
							НовыйДокумент.ПодразделениеКомпании = ТекПользователь.ПодразделениеОрганизации;
							НовыйДокумент.Автор = ТекПользователь;
							НовыйДокумент.Менеджер = ТекПользователь;
							НовыйДокумент.Дата = ТекущаяДата();
							Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(ТекПользователь,НовыйДокумент.Компания,НовыйДокумент.Контрагент);
							
							ТекущееМестоположение = РегистрыНакопления.Scan_МестонахождениеИзделий.ПолучитьМестоположениеИзделия(НайденноеИзделие);
							Если ТекущееМестоположение = Неопределено Тогда
								СообщениеОбОшибке = "У изделия " + НайденноеИзделие + " не удалось получить текущее местонахождение. Списание изделий";
								Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
								Продолжить;
							КонецЕсли;
							
							НовыйДокумент.МестоХранения = ТекущееМестоположение;
							НовыйДокумент.ДатаПрихода = ДатаПрихода;
							НовыйДокумент.НакладнаяТС = НомерНакладной;
						
							СтрокаТЧ = НовыйДокумент.СоставЗаявки.Добавить();
							СтрокаТЧ.Изделие = НайденноеИзделие;
							СтрокаТЧ.ДатаПрихода = ДатаПрихода;
							НовыйДокумент.Комментарий = "Документ сформирован автоматически после получения накладной о списании изделий";
							
							Попытка		
								НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
								
								Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
									ТекстНапоминания = "Изделие " + НайденноеИзделие + " убыло из учета " + ДатаПрихода + " в связи со списанием";
									ПараметрыОтправки = Новый Структура("ДополнительныйТекст", ТекстНапоминания);	
									РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонПисьмаОСписанииИзделий",,ПараметрыОтправки); 
								КонецЕсли;
							Исключение
								СообщениеОбОшибке = "Не удалось записать убытие из учета при списании изделия " + НайденноеИзделие + " причина ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
								Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
								Продолжить;
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры //rarus bonmak 22.12.2020 16653 --

Функция СоздатьДокументЗадачаИз1БД(Продукты, СтатусДокумента, ВидДокумента, ВидСобытия, ОбъектНакладная, ОбъектЗадача, Отказ, СообщениеОбОшибке) //rarus bonmak 18.05.2020 14375 ++
	//rarus bonmak 14375 17.08.2020 ++
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗадачаИз1ДБ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Scan_ЗадачаИз1ДБ КАК Scan_ЗадачаИз1ДБ
		|ГДЕ
		|	Scan_ЗадачаИз1ДБ.IDExternalSystemTask = &IDExternalSystemTask
		|	И Scan_ЗадачаИз1ДБ.IDExternalSystemInvoice = &IDExternalSystemInvoice";
	
	Запрос.УстановитьПараметр("IDExternalSystemInvoice", ОбъектНакладная.GUID);
	Запрос.УстановитьПараметр("IDExternalSystemTask", ОбъектЗадача.GUID);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		фСообщениеОбОшибке = "Документ Задача из 1БД уже создана ранее:  IDExternalSystemTask = " + ОбъектЗадача.GUID + ", IDExternalSystemInvoice = " + ОбъектНакладная.GUID;
		Scan_ВебСервисы.scЗафиксироватьОшибку(фСообщениеОбОшибке, "Механизм получения задач"); 
		Возврат Истина;	
	КонецЕсли;
	//rarus bonmak 14375 17.08.2020 --
	
	//rarus bonmak 11.11.2020 16735 ++
	#Область ПовторныеНакладныеБезИзменений
	СравнитьЗадачи = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ЗадачаИз1ДБ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Scan_ЗадачаИз1ДБ КАК Scan_ЗадачаИз1ДБ
		|ГДЕ
		|	Scan_ЗадачаИз1ДБ.IDExternalSystemInvoice = &IDExternalSystemInvoice
		|	И Scan_ЗадачаИз1ДБ.ВидСобытия = &ВидСобытия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Scan_ЗадачаИз1ДБ.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("IDExternalSystemInvoice", ОбъектНакладная.GUID);
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Если ВыборкаДетальныеЗаписи.Ссылка.ДатаНакладной = ОбъектНакладная.Дата Тогда 
			СравнитьЗадачи = Истина;	
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область ОтменаНакладнойБезПоступленияПродажи
	Если ВидСобытия = Справочники.Scan_ВидыСобытий1БД.ОтменаНакладной Тогда  
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ЗадачаИз1ДБ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Scan_ЗадачаИз1ДБ КАК Scan_ЗадачаИз1ДБ
		|ГДЕ
		|	Scan_ЗадачаИз1ДБ.IDExternalSystemInvoice = &IDExternalSystemInvoice
		|	И Scan_ЗадачаИз1ДБ.ВидСобытия <> &ВидСобытия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Scan_ЗадачаИз1ДБ.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("IDExternalSystemInvoice", ОбъектНакладная.GUID);
		Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			фСообщениеОбОшибке = "Отмена накладной без поступления/продажи:  IDExternalSystemTask = " + ОбъектЗадача.GUID + ", IDExternalSystemInvoice = " + ОбъектНакладная.GUID;
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB("GetUpdatesList", , ОбъектЗадача.GUID, фСообщениеОбОшибке);	
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	//rarus bonmak 11.11.2020 16735 --
	ДокументЗадача = Документы.Scan_ЗадачаИз1ДБ.СоздатьДокумент();
	ДокументЗадача.Дата = ТекущаяДата();
	ДокументЗадача.ВидСобытия = ВидСобытия;
	ДокументЗадача.IDExternalSystemTask = ОбъектЗадача.GUID;
	ДокументЗадача.НаименованиеЗадачи1ДБ = ОбъектЗадача.Наименование;
	ДокументЗадача.НомерЗадачи1ДБ = ОбъектЗадача.Номер;
	ДокументЗадача.СтатусЗадачи1ДБ = ОбъектЗадача.СтатусЗадачи;
	ДокументЗадача.IDExternalSystemInvoice = ОбъектНакладная.GUID;
	ДокументЗадача.ВидДокументаНакладной = ОбъектНакладная.ВидДокумента;
	ДокументЗадача.НомерНакладной = ОбъектНакладная.Номер;
	ДокументЗадача.СтатусНакладной = СтатусДокумента;
	//rarus bonmak 16459 07.12.2020 ++
	НайденныйДилер = Справочники.Scan_Компании.ПустаяСсылка();
	НайденныйЗаказчик = Справочники.Scan_Контрагенты.ПустаяСсылка();
	ДоговорСКлиентом = "";
	ДозаполнитьИзделие = Ложь;
	Если ВидДокумента = 9 ИЛИ ВидДокумента = 13 Тогда
		ДозаполнитьИзделие = Истина;
		Если ОбъектНакладная.СвязанныеДокументы <> Неопределено Тогда
			Для Каждого стрСвязанныйДокумент Из ОбъектНакладная.СвязанныеДокументы.Документ Цикл 
				Если стрСвязанныйДокумент.ВидДокумента = 4 Тогда
					ДоговорСКлиентом = "№ " + стрСвязанныйДокумент.Номер + " от " + стрСвязанныйДокумент.Дата;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//rarus bonmak 16459 07.12.2020 --
	Если ОбъектНакладная.Заказчик <> Неопределено Тогда 
		ДокументЗадача.ЗаказчикНакладной = ОбъектНакладная.Заказчик.Наименование;
		НайденныйЗаказчик = Справочники.Scan_Контрагенты.НайтиПоРеквизиту("IDExternalSystem", ОбъектНакладная.Заказчик.GUID); //rarus bonmak 16459 07.12.2020 
		
		//rarus bonmak 17043 04.01.2021 ++
		Если НайденныйЗаказчик.Пустая() Тогда
			ИмяМетода = "GetContragents";
			//СообщениеОбОшибке = "";
			//Отказ = Ложь;
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
			СтруктураПараметров.Вставить("GUID", ОбъектНакладная.Заказчик.GUID);
			ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
			Если Отказ Тогда 
				СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
				Возврат Ложь;
			КонецЕсли;
		
			НайденныйЗаказчик = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникКонтрагенты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
			Если НайденныйЗаказчик = Неопределено Тогда
				СообщениеОбОшибке = "Не удалось создать контрагента. См. журнал регистрации";
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;
		//rarus bonmak 17043 04.01.2021 --
	КонецЕсли;
	
	Если ОбъектНакладная.Плательщик <> Неопределено Тогда 
		ДокументЗадача.ПлательщикНакладной = ОбъектНакладная.Плательщик.Наименование;
	КонецЕсли;
	Если ОбъектНакладная.Дилер <> Неопределено Тогда
		НайденныйДилер = Справочники.Scan_Компании.НайтиПоРеквизиту("КодДилера", Число(ОбъектНакладная.Дилер.КодДилера));
		//rarus bonmak 17043 04.01.2021 ++
		Если НайденныйДилер.Пустая() Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("GUID", ОбъектНакладная.Дилер.GUID);
			Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetCompany(ДопПараметры, Отказ, СообщениеОбОшибке);
			Если Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				Возврат Ложь;
			КонецЕсли;
			НайденныйДилер = Справочники.Scan_Компании.НайтиПоРеквизиту("КодДилера", Число(ОбъектНакладная.Дилер.КодДилера));
		КонецЕсли;
		//rarus bonmak 17043 04.01.2021 --
		ДокументЗадача.ДилерНакладной = НайденныйДилер;
	КонецЕсли;
	ДокументЗадача.ДатаНакладной = ОбъектНакладная.Дата;
	
	Если Продукты <> Неопределено Тогда
		Для Каждого СтрПродукт Из Продукты Цикл 
			СтрокаТЧ = ДокументЗадача.Продукты.Добавить();
			
			//НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтрПродукт.GUID); //rarus bonmak 14375 07.08.2020 закомментировал
			
			//Если НайденноеИзделие.Пустая() Тогда //rarus bonmak 14375 07.08.2020 закомментировал условие, всегда обновляем продукт, для получения актуального признака БУ
			//Если не нашли, то создадим стандартным способом
			//rarus bonmak 16452 23.09.2020 ++
			//фИмяМетода = "GetProduct";
			//ИмяСобытияЖурналаРегистрации = "Вызов метода: " + фИмяМетода; 
			//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(фИмяМетода ,Ложь);
			//СтруктураПараметров.Вставить("GUID", СтрПродукт.GUID);
			//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(фИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
			//Если Отказ Тогда
			//	Возврат Ложь;
			//КонецЕсли;
			//НайденноеИзделие = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникПродукты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,фИмяМетода);
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(,Ложь);
			СтруктураПараметров.Вставить("GUID", СтрПродукт.GUID);
			НайденноеИзделие = Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetProduct(СтруктураПараметров, Отказ, СообщениеОбОшибке);	
			//rarus bonmak 16452 23.09.2020 --
			Если НайденноеИзделие = Неопределено ИЛИ Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда //rarus bonmak 16452 23.09.2020
				СообщениеОбОшибке = "Не удалось создать документ Задача из 1БД для задачи:  " + ОбъектЗадача.GUID + " причина ошибки: Не удалось создать/обновить продукт " + СтрПродукт.GUID;
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач");
				Возврат Ложь;
			КонецЕсли;
			//КонецЕсли;  
			СтрокаТЧ.Продукт = НайденноеИзделие;
			//rarus bonmak 16459 07.12.2020 ++
			Если ДозаполнитьИзделие Тогда
				Если НайденноеИзделие.КлиентНакладнаяУТ <> НайденныйЗаказчик
					ИЛИ НайденноеИзделие.ДоговорСКлиентомНакладнаяУТ <> ДоговорСКлиентом
					ИЛИ НайденноеИзделие.ДилерНакладнаяУТ <> НайденныйДилер Тогда
					ОбъектИзделие = НайденноеИзделие.ПолучитьОбъект();
					Если НайденноеИзделие.КлиентНакладнаяУТ <> НайденныйЗаказчик Тогда 
						ОбъектИзделие.КлиентНакладнаяУТ = НайденныйЗаказчик;
					КонецЕсли;
					Если НайденноеИзделие.ДоговорСКлиентомНакладнаяУТ <> ДоговорСКлиентом Тогда
						ОбъектИзделие.ДоговорСКлиентомНакладнаяУТ = ДоговорСКлиентом;
					КонецЕсли;
					Если НайденноеИзделие.ДилерНакладнаяУТ <> НайденныйДилер Тогда
						ОбъектИзделие.ДилерНакладнаяУТ = НайденныйДилер;
					КонецЕсли;
					Попытка
						ОбъектИзделие.Записать();
					Исключение
						фСообщениеОбОшибке = "Не удалось дозаполнить карточку изделия (" + ОбъектИзделие.IDExternalSystemProduct + ") для задачи:  " + ОбъектЗадача.GUID + " причина ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						Scan_ВебСервисы.scЗафиксироватьОшибку(фСообщениеОбОшибке, "Механизм получения задач"); 	
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			//rarus bonmak 16459 07.12.2020 --
			
			//rarus vikhle 06.05.2021 mt 17719 +++
			Если ВидСобытия = Справочники.Scan_ВидыСобытий1БД.ПоступлениеПродуктов И ВидДокумента = 15 Тогда
				СтрокаРеквизитов = "БУ, ЛокальныйСтатусПродукта, IDExternalSystemProduct,СоглашениеОПоставке,КлиентСоглашенияОПоставке";//rarus vikhle 18.05.2021 mt 17733 
				СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденноеИзделие, СтрокаРеквизитов);
				ОбъектИзделие = Неопределено; //rarus vikhle 14.05.2021 mt 17733
				Если СтруктураРеквизитов.БУ Тогда
					Если СтруктураРеквизитов.ЛокальныйСтатусПродукта = Справочники.Scan_ЛокальныеСтатусыПродуктов.SOLD Тогда
						ОбъектИзделие = НайденноеИзделие.ПолучитьОбъект();
						ОбъектИзделие.ЛокальныйСтатусПродукта = Справочники.Scan_ЛокальныеСтатусыПродуктов.NEW;
					КонецЕсли;
					
					//rarus vikhle 14.05.2021 mt 17733 +++
					Если НЕ СтруктураРеквизитов.СоглашениеОПоставке.Пустая() Тогда   
						Если ОбъектИзделие = Неопределено Тогда
							ОбъектИзделие = НайденноеИзделие.ПолучитьОбъект(); 
						КонецЕсли;	
						ОбъектИзделие.СоглашениеОПоставке = Справочники.Scan_СоглашенияОПоставке.ПустаяСсылка();
					КонецЕсли;
					
					Если НЕ СтруктураРеквизитов.КлиентСоглашенияОПоставке.Пустая() Тогда
						Если ОбъектИзделие = Неопределено Тогда
							ОбъектИзделие = НайденноеИзделие.ПолучитьОбъект(); 
						КонецЕсли;	
						ОбъектИзделие.КлиентСоглашенияОПоставке = Справочники.Scan_Контрагенты.ПустаяСсылка();	
					КонецЕсли;	
					
					Если НЕ ОбъектИзделие = Неопределено И ОбъектИзделие.Модифицированность() Тогда
						Попытка
							ОбъектИзделие.Записать();
						Исключение
							фСообщениеОбОшибке = "Не удалось изменить реквизиты у продукта (" + СтруктураРеквизитов.IDExternalSystemProduct + ") для задачи:  " + ОбъектЗадача.GUID + " причина ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Scan_ВебСервисы.scЗафиксироватьОшибку(фСообщениеОбОшибке, "Механизм получения задач"); 	
						КонецПопытки;
					КонецЕсли;		
					
					//Очистка записи в регистре состав заявок для возможности создания заявок на СОП по БУ продукту
					СтруктураОтбора = Новый Структура("Изделие",НайденноеИзделие);
					СтруктураЗаписи = РегистрыСведений.Scan_СоставСоглашенийОПоставке.ПолучитьПоследнее(,СтруктураОтбора);
					Если НЕ СтруктураЗаписи.СоглашениеОПоставке.Пустая() Тогда 
						МенеджерЗаписи = РегистрыСведений.Scan_СоставСоглашенийОПоставке.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Период = ТекущаяДатаСеанса();
						МенеджерЗаписи.Изделие = НайденноеИзделие;
						МенеджерЗаписи.СоглашениеОПоставке = Справочники.Scan_СоглашенияОПоставке.ПустаяСсылка();
						МенеджерЗаписи.Записать();
					КонецЕсли;
				КонецЕсли;	
				//rarus vikhle 14.05.2021 mt 17733 ---
				
				
			КонецЕсли;	
			//rarus vikhle 06.05.2021 mt 17719 ---
		КонецЦикла;
	КонецЕсли;
	//rarus bonmak 11.11.2020 16735 ++
	Если СравнитьЗадачи Тогда
		ИменаКолонок = "Продукт";
		Если ОбщегоНазначения.КоллекцииИдентичны(ВыборкаДетальныеЗаписи.Ссылка.Продукты, ДокументЗадача.Продукты, ИменаКолонок) Тогда
			фСообщениеОбОшибке = "Документ Задача из 1БД не создана. Повторная регистрация:  IDExternalSystemTask = " + ОбъектЗадача.GUID + ", IDExternalSystemInvoice = " + ОбъектНакладная.GUID;
			Scan_ВебСервисы.scЗафиксироватьОшибку(фСообщениеОбОшибке, "Механизм получения задач"); 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	//rarus bonmak 11.11.2020 16735 --	 
	Попытка
		ДокументЗадача.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СообщениеОбОшибке = "Не удалось записать документ Задача из 1БД для задачи:  " + ОбъектЗадача.GUID + " причина ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Механизм получения задач"); 
		Отказ = Истина;
		Возврат Ложь;	
	КонецПопытки;
	
	Возврат Истина;
КонецФункции //rarus bonmak 18.05.2020 14375 --

//rarus bonmak 21.08.2020 14375 ++
//Функция ПолучитьДокументУбытие(ИзделиеСсылка, ДатаУбытия) //rarus bonmak 18.05.2020 14375 ++ 
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	Scan_ДвижениеИзделийСоставЗаявки.Ссылка КАК Ссылка
//	               |ИЗ
//	               |	Документ.Scan_ДвижениеИзделий.СоставЗаявки КАК Scan_ДвижениеИзделийСоставЗаявки
//	               |ГДЕ
//	               |	Scan_ДвижениеИзделийСоставЗаявки.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.УбытиеИзУчета)
//	               |	И Scan_ДвижениеИзделийСоставЗаявки.Изделие = &Изделие
//	               |	И Scan_ДвижениеИзделийСоставЗаявки.ДатаПрихода = &ДатаУбытия
//	               |	И Scan_ДвижениеИзделийСоставЗаявки.Ссылка.Проведен   
//	               |	И НЕ Scan_ДвижениеИзделийСоставЗаявки.Ссылка.ПометкаУдаления";		
//	Запрос.УстановитьПараметр("Изделие",ИзделиеСсылка);
//	Запрос.УстановитьПараметр("ДатаУбытия", ДатаУбытия);
//	РезультатЗапроса = Запрос.Выполнить(); 
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат Документы.Scan_ДвижениеИзделий.ПустаяСсылка();
//	Иначе
//		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
//		ВыборкаЗапроса.Следующий();
//		Возврат ВыборкаЗапроса.Ссылка;
//	КонецЕсли;
//КонецФункции //rarus bonmak 18.05.2020 14375 --
//rarus bonmak 21.08.2020 14375 --

Функция ПолучитьДокументПоступление(ИзделиеСсылка) //rarus bonmak 18.05.2020 14375 ++
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ДвижениеИзделийСоставЗаявки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Scan_ДвижениеИзделий.СоставЗаявки КАК Scan_ДвижениеИзделийСоставЗаявки
	               |ГДЕ
	               |	(Scan_ДвижениеИзделийСоставЗаявки.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ПоступлениеНаСклад)
	               |			ИЛИ Scan_ДвижениеИзделийСоставЗаявки.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ВводНачальныхОстатков))
	               |	И Scan_ДвижениеИзделийСоставЗаявки.Изделие = &Изделие
	               |	И Scan_ДвижениеИзделийСоставЗаявки.Ссылка.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Scan_ДвижениеИзделийСоставЗаявки.Ссылка.Дата УБЫВ";
	Запрос.УстановитьПараметр("Изделие",ИзделиеСсылка);
	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.Scan_ДвижениеИзделий.ПустаяСсылка();
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		Возврат ВыборкаЗапроса.Ссылка;
	КонецЕсли;
КонецФункции //rarus bonmak 18.05.2020 14375 --

Функция ЕстьУбытиеИзУчета(ИзделиеСсылка, ЕстьУбытие) //rarus bonmak 21.08.2020 14375 ++
	//1. Проверим документ убытие
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ДвижениеИзделийСоставЗаявки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Scan_ДвижениеИзделий.СоставЗаявки КАК Scan_ДвижениеИзделийСоставЗаявки
	               |ГДЕ
	               |	Scan_ДвижениеИзделийСоставЗаявки.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.УбытиеИзУчета)
	               |	И Scan_ДвижениеИзделийСоставЗаявки.Изделие = &Изделие
	               |	И Scan_ДвижениеИзделийСоставЗаявки.Ссылка.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Scan_ДвижениеИзделийСоставЗаявки.Ссылка.Дата УБЫВ";
	Запрос.УстановитьПараметр("Изделие",ИзделиеСсылка);
	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		ЕстьУбытие = Ложь;
		Возврат Документы.Scan_ДвижениеИзделий.ПустаяСсылка();
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ДокументУбытиеИзУчета = ВыборкаЗапроса.Ссылка;
		//2. Проверим местонахождение
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_МестонахождениеИзделийОстатки.Изделие КАК Изделие,
		|	МАКСИМУМ(Scan_МестонахождениеИзделийОстатки.МестоХранения) КАК Местонахождение
		|ИЗ
		|	РегистрНакопления.Scan_МестонахождениеИзделий.Остатки(, Изделие = &ИзделиеСсылка) КАК Scan_МестонахождениеИзделийОстатки
		|ГДЕ
		|	Scan_МестонахождениеИзделийОстатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_МестонахождениеИзделийОстатки.Изделие";
		
		Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			//Убытие сформировано, изделие убыло из учета
			ЕстьУбытие = Истина;
			Возврат ДокументУбытиеИзУчета;
		Иначе
			//Убытия нет.
			ЕстьУбытие = Ложь;
			Возврат Документы.Scan_ДвижениеИзделий.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
КонецФункции //rarus bonmak 21.08.2020 14375 --

//// ФОРМЫ КОМПАНИЙ
Процедура РазборОтветаСправочникФормыКомпаний(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	СписокФормКомпаний = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ФормыКомпаний", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из СписокФормКомпаний Цикл 
		Результат = РазобратьФормуКомпании(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЦикла;	
КонецПроцедуры

Функция РазобратьФормуКомпании(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ФормыКомпаний.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		ЭлементСсылка = ОбновитьФормуКомпании(НайденныйЭлемент, XDTOОбъект, ИмяСобытияЖурналаРегистрации);
	Иначе
		ЭлементСсылка = СоздатьФормуКомпании(XDTOОбъект, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция ОбновитьФормуКомпании(ЭлементСсылка, XDTOОбъект, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	ОбъектФормаКомпании = ЭлементСсылка.ПолучитьОбъект();
		
	ОбъектФормаКомпании.Наименование 		= XDTOОбъект.Наименование;
	ОбъектФормаКомпании.IDExternalSystem 	= XDTOОбъект.GUID;

	ОбъектМодифицирован = Scan_ОбщегоНазначенияСервер.ОбъектМодифицирован(ОбъектФормаКомпании);
	
	Если ОбъектМодифицирован Тогда
		ОбъектФормаКомпании.ДатаОбновления 		= ТекущаяДата();
		Попытка
			Если НЕ ОбъектФормаКомпании.ПроверитьЗаполнение() Тогда
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
			КонецЕсли;
			
			ОбъектФормаКомпании.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать форму компании ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, XDTOОбъект.GUID, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции

Функция СоздатьФормуКомпании(XDTOОбъект, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	НоваяФормаКомпании = Справочники.Scan_ФормыКомпаний.СоздатьЭлемент();
	
	НоваяФормаКомпании.Наименование 	= XDTOОбъект.Наименование;
	НоваяФормаКомпании.IDExternalSystem = XDTOОбъект.GUID;
	НоваяФормаКомпании.ДатаОбновления 	= ТекущаяДата();
	НоваяФормаКомпании.ПометкаУдаления	= XDTOОбъект.DeletionMark;
	
	Попытка
		Если НЕ НоваяФормаКомпании.ПроверитьЗаполнение() Тогда
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
		КонецЕсли;
		
		НоваяФормаКомпании.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось записать форму компании ("+НоваяФормаКомпании.Наименование+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,НоваяФормаКомпании.Наименование, НоваяФормаКомпании.GUID, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НоваяФормаКомпании.Ссылка;	
КонецФункции

//// ГРУППЫ КОМПАНИЙ
Процедура РазборОтветаСправочникГруппыКомпаний(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	СписокГруппКомпаний = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ГруппыКомпаний", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из СписокГруппКомпаний Цикл 
		Результат = РазобратьГруппуКомпании(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЦикла;	
КонецПроцедуры

Функция РазобратьГруппуКомпании(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ГруппыКомпаний.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		ЭлементСсылка = ОбновитьГруппуКомпании(НайденныйЭлемент, XDTOОбъект, ИмяСобытияЖурналаРегистрации);
	Иначе
		ЭлементСсылка = СоздатьГруппуКомпании(XDTOОбъект, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция ОбновитьГруппуКомпании(ЭлементСсылка, XDTOОбъект, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	ОбъектГруппаКомпании = ЭлементСсылка.ПолучитьОбъект();
		
	ОбъектГруппаКомпании.Наименование 		= XDTOОбъект.Наименование;
	ОбъектГруппаКомпании.IDExternalSystem 	= XDTOОбъект.GUID;

	ОбъектМодифицирован = Scan_ОбщегоНазначенияСервер.ОбъектМодифицирован(ОбъектГруппаКомпании);
	
	Если ОбъектМодифицирован Тогда
		ОбъектГруппаКомпании.ДатаОбновления 		= ТекущаяДата();
		Попытка
			Если НЕ ОбъектГруппаКомпании.ПроверитьЗаполнение() Тогда
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
			КонецЕсли;
			
			ОбъектГруппаКомпании.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать группу компании ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, ОбъектГруппаКомпании.GUID, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции

Функция СоздатьГруппуКомпании(XDTOОбъект, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	НоваяГруппаОбъект = Справочники.Scan_ГруппыКомпаний.СоздатьЭлемент();
	
	НоваяГруппаОбъект.Наименование 		= XDTOОбъект.Наименование;
	НоваяГруппаОбъект.IDExternalSystem 	= XDTOОбъект.GUID;
	НоваяГруппаОбъект.ДатаОбновления 	= ТекущаяДата();
	НоваяГруппаОбъект.ПометкаУдаления	= XDTOОбъект.DeletionMark;
	
	Попытка
		Если НЕ НоваяГруппаОбъект.ПроверитьЗаполнение() Тогда
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
		КонецЕсли;
		
		НоваяГруппаОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось записать группу компании ("+НоваяГруппаОбъект.Наименование+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,НоваяГруппаОбъект.Наименование, НоваяГруппаОбъект.GUID, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НоваяГруппаОбъект.Ссылка;	
КонецФункции

//// ТИПЫ ДИЛЕРОВ
Процедура РазборОтветаСправочникТипыДилеров(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	СписокТиповДилеров = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ТипыДилеров", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из СписокТиповДилеров Цикл 
		Результат = РазобратьТипДилера(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЦикла;	
КонецПроцедуры

Функция РазобратьТипДилера(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ТипыДилеров.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		ЭлементСсылка = ОбновитьТипДилера(НайденныйЭлемент, XDTOОбъект, ИмяСобытияЖурналаРегистрации);
	Иначе
		ЭлементСсылка = СоздатьТипДилера(XDTOОбъект, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция ОбновитьТипДилера(ЭлементСсылка, XDTOОбъект, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	ОбъектТипДилера = ЭлементСсылка.ПолучитьОбъект();
		
	ОбъектТипДилера.Наименование 		= XDTOОбъект.Наименование;
	ОбъектТипДилера.IDExternalSystem 	= XDTOОбъект.GUID;

	ОбъектМодифицирован = Scan_ОбщегоНазначенияСервер.ОбъектМодифицирован(ОбъектТипДилера);
	
	Если ОбъектМодифицирован Тогда
		ОбъектТипДилера.ДатаОбновления 		= ТекущаяДата();
		Попытка
			Если НЕ ОбъектТипДилера.ПроверитьЗаполнение() Тогда
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
			КонецЕсли;
			
			ОбъектТипДилера.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать тип дилера ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, ОбъектТипДилера.GUID, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции

Функция СоздатьТипДилера(XDTOОбъект, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	НовыйТипОбъект = Справочники.Scan_ТипыДилеров.СоздатьЭлемент();
	
	НовыйТипОбъект.Наименование 	= XDTOОбъект.Наименование;
	НовыйТипОбъект.IDExternalSystem = XDTOОбъект.GUID;
	НовыйТипОбъект.ДатаОбновления 	= ТекущаяДата();
	НовыйТипОбъект.ПометкаУдаления	= XDTOОбъект.DeletionMark;
	
	Попытка
		Если НЕ НовыйТипОбъект.ПроверитьЗаполнение() Тогда
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
		КонецЕсли;
		
		НовыйТипОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось записать тип дилера ("+НовыйТипОбъект.Наименование+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,НовыйТипОбъект.Наименование, НовыйТипОбъект.GUID, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НовыйТипОбъект.Ссылка;	
КонецФункции

//// ВИДЫ ВЗАИМОДЕЙСТВИЙ
Процедура РазборОтветаСправочникВидыВзаимодействий(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	СписокВидовВзаимодействия = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ВидыВзаимодействия", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из СписокВидовВзаимодействия Цикл 
		Результат = РазобратьВидВзаимодействия(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЦикла;	
КонецПроцедуры

Функция РазобратьВидВзаимодействия(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ВидыВзаимодействий.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		ЭлементСсылка = ОбновитьВидВзаимодействия(НайденныйЭлемент, XDTOОбъект, ИмяСобытияЖурналаРегистрации);
	Иначе
		ЭлементСсылка = СоздатьВидВзаимодействия(XDTOОбъект, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция ОбновитьВидВзаимодействия(ЭлементСсылка, XDTOОбъект, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	ОбъектВидВзаимодействия = ЭлементСсылка.ПолучитьОбъект();
		
	ОбъектВидВзаимодействия.Наименование 		= XDTOОбъект.Наименование;
	ОбъектВидВзаимодействия.IDExternalSystem 	= XDTOОбъект.GUID;

	ОбъектМодифицирован = Scan_ОбщегоНазначенияСервер.ОбъектМодифицирован(ОбъектВидВзаимодействия);
	
	Если ОбъектМодифицирован Тогда
		ОбъектВидВзаимодействия.ДатаОбновления 		= ТекущаяДата();
		Попытка
			Если НЕ ОбъектВидВзаимодействия.ПроверитьЗаполнение() Тогда
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
			КонецЕсли;
			
			ОбъектВидВзаимодействия.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать вид взаимодействия ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, ОбъектВидВзаимодействия.GUID, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции

Функция СоздатьВидВзаимодействия(XDTOОбъект, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	НовыйВидВзаимодействия = Справочники.Scan_ВидыВзаимодействий.СоздатьЭлемент();
	
	//НовыйВидВзаимодействия.Код				= XDTOОбъект.Код; //rarus BProg_Dekin 28.05.2020 mantis 000014456 +-
	НовыйВидВзаимодействия.Наименование 	= XDTOОбъект.Наименование;
	НовыйВидВзаимодействия.IDExternalSystem = XDTOОбъект.GUID;
	НовыйВидВзаимодействия.ДатаОбновления 	= ТекущаяДата();
	НовыйВидВзаимодействия.ПометкаУдаления	= XDTOОбъект.DeletionMark;
	
	Попытка
		Если НЕ НовыйВидВзаимодействия.ПроверитьЗаполнение() Тогда
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
		КонецЕсли;
		
		НовыйВидВзаимодействия.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось записать вид взаимодействия ("+НовыйВидВзаимодействия.Наименование+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,НовыйВидВзаимодействия.Наименование, НовыйВидВзаимодействия.IDExternalSystem, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НовыйВидВзаимодействия.Ссылка;	
КонецФункции

//// ВИДЫ ПРЕДСТАВЛЕНИЙ СПЕЦИФИКАЦИЙ

// Процедура - Разбор ответа справочник виды представлений спецификаций
//
// Параметры:
//  ТекстОтвета					 - Строка - Текст, в котором содержится ответ на разбираемый запрос
//  Отказ						 - Булево - Если в процедуре будет ошибка, то Отказ будет равен Истина 
//  СообщениеОбОшибке			 - Строка - Если будут ошибки, то будут записаны в данном параметре 
//  ИмяСобытияЖурналаРегистрации - Строка - Имя события в журнале регистрации для фиксации изменения в системе 
//  ИмяМетода					 - Строка - Имя метода для которого выполняется разбор
//
Процедура РазборОтветаСправочникВидыПредставленийСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
	СписокВидовПредставленийСпецификаций = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ВидыПредставленияСпецификаций", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = Нстр("ru = 'Не удалось разобрать ответ веб-сервиса. См. журнал регистрации'; en = 'Failed to parse the web service response. See the log.'");
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из СписокВидовПредставленийСпецификаций Цикл 
		Результат = РазобратьВидПредставленияСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЦикла;		
КонецПроцедуры

Функция РазобратьВидПредставленияСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = Нстр("ru = 'Не удалось получить структуру реквизитов!'; en = 'Failed to get the attributes structure!'");
		Возврат Неопределено;	
	КонецЕсли;
	
	ЭлементСсылка = СоздатьОбновитьВидПредставленияСпецификации(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	
	Возврат ?(ЗначениеЗаполнено(ЭлементСсылка), ЭлементСсылка, Неопределено);		
КонецФункции

функция СоздатьОбновитьВидПредставленияСпецификации(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
	ЭлементСсылка = Справочники.Scan_ВидыПредставленийСпецификаций.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ВидПредставленияОбъект = ЭлементСсылка.ПолучитьОбъект();
	Иначе
		ВидПредставленияОбъект = Справочники.Scan_ВидыПредставленийСпецификаций.СоздатьЭлемент();
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
		ВидПредставленияОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
	КонецЦикла;
		
	ОбъектМодифицирован = Scan_ОбщегоНазначенияСервер.ОбъектМодифицирован(ВидПредставленияОбъект);
	
	Если ОбъектМодифицирован Тогда
		ВидПредставленияОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ВидПредставленияОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ВидПредставленияОбъект.Записать();
			ЭлементСсылка = ВидПредставленияОбъект.Ссылка; 
		Исключение
			ТекстОшибки = Нстр("ru = 'Не удалось записать вид представления спецификации ('; en = 'Failed to write Specification view type!'");
			СообщениеОбОшибке = ТекстОшибки + ВидПредставленияОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ВидПредставленияОбъект.Наименование, ВидПредставленияОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат ?(ЗначениеЗаполнено(ЭлементСсылка), ЭлементСсылка, Неопределено);
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

//// ПРЕДСТАВЛЕНИЯ СПЕЦИФИКАЦИЙ

// Процедура - Разбор ответа справочник представления спецификаций
//
// Параметры:
//  ТекстОтвета					 - Строка - Текст, в котором содержится ответ на разбираемый запрос
//  Отказ						 - Булево - Если в процедуре будет ошибка, то Отказ будет равен Истина 
//  СообщениеОбОшибке			 - Строка - Если будут ошибки, то будут записаны в данном параметре 
//  ИмяСобытияЖурналаРегистрации - Строка - Имя события в журнале регистрации для фиксации изменения в системе 
//  ИмяМетода					 - Строка - Имя метода для которого выполняется разбор
//
Процедура РазборОтветаСправочникПредставленияСпецификаций(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
	СписокПредставленийСпецификаций = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ПредставленияСпецификаций", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = Нстр("ru = 'Не удалось разобрать ответ веб-сервиса. См. журнал регистрации'; en = 'Failed to parse the web service response. See the log.'");
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из СписокПредставленийСпецификаций Цикл 
		Результат = РазобратьПредставлениеСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЦикла;		
КонецПроцедуры

Функция РазобратьПредставлениеСпецификации(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = Нстр("ru = 'Не удалось получить структуру реквизитов!'; en = 'Failed to get the attributes structure!'");;
		Возврат Неопределено;	
	КонецЕсли;
	
	ЭлементСсылка = СоздатьОбновитьПредставлениеСпецификации(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Возврат ?(ЗначениеЗаполнено(ЭлементСсылка), ЭлементСсылка, Неопределено);		
КонецФункции

Функция СоздатьОбновитьПредставлениеСпецификации(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
	ЭлементСсылка = Справочники.Scan_ПредставленияСпецификаций.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ПредставлениеСпецификацииОбъект = ЭлементСсылка.ПолучитьОбъект();
	Иначе
		ПредставлениеСпецификацииОбъект = Справочники.Scan_ПредставленияСпецификаций.СоздатьЭлемент();
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
		Если ЭлементСтруктуры.Ключ = "ВидПродукта" И XDTOОбъект.ВидПродукта <> Неопределено Тогда
			ПредставлениеСпецификацииОбъект.ВидПродукта = РазобратьВидПродукта(XDTOОбъект.ВидПродукта, СообщениеОбОшибке, "Веб-сервис.GetProductType");
		ИначеЕсли ЭлементСтруктуры.Ключ = "ВидПредставления" И XDTOОбъект.ВидПредставленияСпецификации <> Неопределено Тогда
			ПредставлениеСпецификацииОбъект.ВидПредставления = РазобратьВидПредставленияСпецификации(XDTOОбъект.ВидПредставленияСпецификации, СообщениеОбОшибке, "Веб-сервис.GetListOfSpecificationViewType", "GetListOfSpecificationViewType"); 		
		Иначе
			ПредставлениеСпецификацииОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЕсли;
	КонецЦикла;
		
	ОбъектМодифицирован = Scan_ОбщегоНазначенияСервер.ОбъектМодифицирован(ПредставлениеСпецификацииОбъект);
	
	Если ОбъектМодифицирован Тогда
		ПредставлениеСпецификацииОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ПредставлениеСпецификацииОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ПредставлениеСпецификацииОбъект.Записать();
			ЭлементСсылка = ПредставлениеСпецификацииОбъект.Ссылка; 
		Исключение
			ТекстОшибки = Нстр("ru = 'Не удалось записать представление спецификации ('; en = 'Failed to write Specification view!'");
			СообщениеОбОшибке = ТекстОшибки + ПредставлениеСпецификацииОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ПредставлениеСпецификацииОбъект.Наименование, ПредставлениеСпецификацииОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат ?(ЗначениеЗаполнено(ЭлементСсылка), ЭлементСсылка, Неопределено);
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

//// ИЕРАРХИЯ ОПЦИЙ ПРЕДСТАВЛЕНИЙ СПЕЦИФИКАЦИИ

Функция ВызватьМетод_GetSpecificationView(GUID, Отказ = Ложь, СообщениеОбОшибке = "") Экспорт //rarus BProg_Dekin 19.03.2020 mantis 0014177 +-
	ИмяМетода 			= "GetSpecificationView";
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	СтруктураПараметров.GUID = GUID;
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникИерархияОпцийПредставленийСпецификации(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;
КонецФункции

// Процедура - Разбор ответа справочник иерархия опций представлений спецификации
//
// Параметры:
//  ТекстОтвета					 - Строка - Текст, в котором содержится ответ на разбираемый запрос
//  Отказ						 - Булево - Если в процедуре будет ошибка, то Отказ будет равен Истина 
//  СообщениеОбОшибке			 - Строка - Если будут ошибки, то будут записаны в данном параметре 
//  ИмяСобытияЖурналаРегистрации - Строка - Имя события в журнале регистрации для фиксации изменения в системе 
//  ИмяМетода					 - Строка - Имя метода для которого выполняется разбор
//
Процедура РазборОтветаСправочникИерархияОпцийПредставленийСпецификации(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
	ИерархияОпцийПредставленийСпецификации = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ПредставлениеСпецификации", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = Нстр("ru = 'Не удалось разобрать ответ веб-сервиса. См. журнал регистрации'; en = 'Failed to parse the web service response. See the log.'");
		Возврат;
	КонецЕсли;
	ПредставлениеСпецификации = РазобратьПредставлениеСпецификации(ИерархияОпцийПредставленийСпецификации, СообщениеОбОшибке, "Веб-сервис.GetListOfSpecificationView", "GetListOfSpecificationView");
	Если НЕ ЗначениеЗаполнено(ПредставлениеСпецификации) Тогда	
		СообщениеОбОшибке = СтрШаблон("Не удалось загрузить иерархию опций представления спецификаций по представлению спецификации с гуидом <%1>", ИерархияОпцийПредставленийСпецификации.GUID);
		Возврат;
	КонецЕсли;
	Справочники.Scan_ИерархияОпцийПредставленийСпецификации.УдалитьВсеЭлементыСправочникаПоВладельцу(ПредставлениеСпецификации);
	
	Родитель = Неопределено;
	СписокXDTOДочерниеГруппыОпций = ИерархияОпцийПредставленийСпецификации.ГруппыОпций.ДочерняяГруппаОпций;
	Для Каждого ОбъектXDTOДочерняяГруппа Из СписокXDTOДочерниеГруппыОпций Цикл
		РазобратьГруппуОпцийИерархииПредставленийСпецификации(Родитель, ПредставлениеСпецификации, ОбъектXDTOДочерняяГруппа, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);		
	КонецЦикла;
КонецПроцедуры

Процедура РазобратьГруппуОпцийИерархииПредставленийСпецификации(Родитель, ПредставлениеСпецификации, XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = Нстр("ru = 'Не удалось получить структуру реквизитов!'; en = 'Failed to get the attributes structure!'");
		Возврат;	
	КонецЕсли;
	
	//Создание группы справочника
	ГруппаИерархииОбъект = Справочники.Scan_ИерархияОпцийПредставленийСпецификации.СоздатьГруппу();
	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
		ГруппаИерархииОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
	КонецЦикла;
	ГруппаИерархииОбъект.Владелец		= ПредставлениеСпецификации;
	ГруппаИерархииОбъект.Родитель 		= Родитель;
	ГруппаИерархииОбъект.ДатаОбновления = ТекущаяДатаСеанса();
	
	Попытка
		Если НЕ ГруппаИерархииОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		ГруппаИерархииОбъект.Записать(); 
	Исключение
		ТекстОшибки = Нстр("ru = 'Не удалось записать иерархию опции представления спецификации ('; en = 'Failed to write Hierarchy of option view of specification!'");
		СообщениеОбОшибке = ТекстОшибки + ГруппаИерархииОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ГруппаИерархииОбъект.Наименование, ГруппаИерархииОбъект.IDExternalSystem, СообщениеОбОшибке);
		Возврат;
	КонецПопытки;
	
	//Создание элемента справочника с заполненной опцией
	Для Каждого ОбъектXDTOОпция Из XDTOОбъект.СписокОпций Цикл
		СозданиеЭлементаСправочникаИерархияОпцийПредставленийСпецификации(ОбъектXDTOОпция, ГруппаИерархииОбъект.Ссылка, ПредставлениеСпецификации, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
	КонецЦикла;
	
	//Разбор подчиненных групп опций 
	Для Каждого ОбъектXDTOГруппаОпций Из XDTOОбъект.ДочерняяГруппаОпций Цикл
		РазобратьГруппуОпцийИерархииПредставленийСпецификации(ГруппаИерархииОбъект.Ссылка, ПредставлениеСпецификации, ОбъектXDTOГруппаОпций, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода)			
	КонецЦикла; 
КонецПроцедуры

Процедура СозданиеЭлементаСправочникаИерархияОпцийПредставленийСпецификации(ОбъектXDTOОпция, Родитель, Владелец, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.03.2020 mantis 0014177 +-
	ОпцияСпецификации = РазобратьГруппуОпцииСпецификации(ОбъектXDTOОпция, СообщениеОбОшибке, "Веб-сервис.GetListOfOptions", "GetListOfOptions");
	//ОпцияСпецификации = РазобратьОпциюСпецификации(ОбъектXDTOОпция, СообщениеОбОшибке, "Веб-сервис.GetListOfOptions", "GetListOfOptions");
	Если ЗначениеЗаполнено(ОпцияСпецификации) Тогда
		НовыйОбъектИерархии = Справочники.Scan_ИерархияОпцийПредставленийСпецификации.СоздатьЭлемент();
		НовыйОбъектИерархии.Опция 				= ОпцияСпецификации;
		НовыйОбъектИерархии.Родитель 			= Родитель;
		НовыйОбъектИерархии.Владелец 			= Владелец;
		НовыйОбъектИерархии.ДатаОбновления 		= ТекущаяДатаСеанса();
		//rarus BProg_Dekin 30.03.2020 mantis 0014177 ++
		НовыйОбъектИерархии.IDExternalSystem 	= ОбъектXDTOОпция.GUIDСемействаОпций;
		НовыйОбъектИерархии.Наименование		= ОбъектXDTOОпция.НаименованиеСемействаОпций;
		//rarus BProg_Dekin 30.03.2020 mantis 0014177 --
		
		Попытка
			Если НЕ НовыйОбъектИерархии.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			НовыйОбъектИерархии.Записать(); 
		Исключение
			ТекстОшибки = Нстр("ru = 'Не удалось записать иерархию опции представления спецификации ('; en = 'Failed to write Hierarchy of option view of specification!'");
			СообщениеОбОшибке = ТекстОшибки + НовыйОбъектИерархии.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, НовыйОбъектИерархии.Наименование, НовыйОбъектИерархии.IDExternalSystem, СообщениеОбОшибке);
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
	
//// СПЕЦИФИКАЦИЙ ПРОДУКТА ТС
Процедура ВызватьМетод_GetListOfSpecifications(ДопПараметры, Владелец = Неопределено) Экспорт //rarus bonmak 24.09.2019 14177 ++
	ИмяМетода = "GetListOfSpecifications";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	//Если ДопПараметры.Свойство("GUID") Тогда
	//	СтруктураПараметров.Вставить("GUID", ДопПараметры.GUID);
	//КонецЕсли;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаСправочникВерсииСпецификацииПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Владелец);
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 24.09.2019 14177 --

Процедура ВызватьМетод_GetSpecification(ДопПараметры, Владелец = Неопределено) Экспорт //rarus bonmak 08.10.2019 14177 ++
	ИмяМетода = "GetSpecification";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если ДопПараметры.Свойство("GUID") Тогда
		СтруктураПараметров.Вставить("GUID", ДопПараметры.GUID);
	КонецЕсли;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаСправочникВерсииСпецификацииПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Владелец);
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 08.10.2019 14177 --

// rarus tenkam 09.09.2019 mantis 14841 +++	
//rarus bonmak 24.09.2019 14177 ++
Функция РазборОтветаСправочникВерсииСпецификацииПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Владелец = Неопределено, ИсходныйОбъект = неопределено) Экспорт 
	Если ИмяМетодаWS = "GetListOfSpecifications" Тогда
		//Получим все элементы из списка
		ОбъектСпецификацииПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.СпецификацияПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектСпецификацииПродуктов Цикл
			ИмяМетодаНовое = "GetSpecification";
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
			СтруктураПараметров["GUID"] = ТекЭлемент.GUID;

			ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
			
			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
			Если НЕ Отказ Тогда
				ОбъектСпецификацияПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекЭлементОтвет, "Answer.Result.СпецификацияПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);
				РазобратьВерсиюСпецификацииПродукта(ОбъектСпецификацияПродукта,СообщениеОбОшибке,ИмяНовогоСобытияЖурналаРегистрации,ИмяМетодаНовое,владелец); //rarus ozhnik 15888 05.07.2020 + 
				////rarus tenkam 20.03.2017 mantis 7623 +++	
				//Если Отказ Тогда
				//	Отказ = Ложь;
				//	Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ТекЭлемент.Наименование, ТекЭлемент.GUID, СообщениеОбОшибке);
				//КонецЕсли;
				////rarus tenkam 20.03.2017 mantis 7623 ---	
			КонецЕсли;

		КонецЦикла;
		//rarus ozhnik 16453 07.09.2020 + 
		Если исходныйОбъект <> неопределено Тогда
			СпецификацияSport = Справочники.Scan_ВерсииБазовыхСпецификаций.НайтиПоРеквизиту("ВидСпецификации",Справочники.Scan_ВидыСпецификацийПродуктов.SPORTСпецификация,,Владелец);
			Если не СпецификацияSport.Пустая() Тогда
				ВерсияСпецификации = СпецификацияSport.ВерсияСпецификации;
				ПараметрыОтбора = Новый Структура("ОбъектИспользования,ВерсияСпецификации", исходныйОбъект,ВерсияСпецификации);
				НайденныеСтроки =  СпецификацияSport.Использование.НайтиСтроки(ПараметрыОтбора);
				Если найденныеСтроки.Количество()=0 Тогда
					СпецификацияОбъект = СпецификацияSport.ПолучитьОбъект();
					НоваяСтрока = СпецификацияОбъект.Использование.Добавить();
					НоваяСтрока.ОбъектИспользования = исходныйОбъект;
					НоваяСтрока.ВерсияСпецификации = ВерсияСпецификации;
					СпецификацияОбъект.Записать();
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;	
		//rarus ozhnik 16453 07.09.2020 -
	ИначеЕсли ИмяМетодаWS = "GetSpecification" Тогда
		//Получим однин элемент
		ОбъектСпецификацияПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СпецификацияПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		РазобратьВерсиюСпецификацииПродукта(ОбъектСпецификацияПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Владелец);
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция РазобратьВерсиюСпецификацииПродукта(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Владелец) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetSpecification");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;

	НайденныйЭлемент = Справочники.Scan_ВерсииБазовыхСпецификаций.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	//поиск по наименованию не имеет смысла, т.к. наименования могут совпадать
	ОбъектСсылка = СоздатьОбновитьВерсиюСпецификацииПродукта(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Владелец);
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьОбновитьВерсиюСпецификацииПродукта(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Владелец)
			
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	//rarus bonmak 20.03.2020 14177 ++
	КопияСтруктураРеквизитов = ОбменДаннымиСобытия.СкопироватьСтруктуру(СтруктураРеквизитов);
	КопияСтруктураРеквизитов.Вставить("ДатаВерсииСпецификации", XDTOОбъект.ДатаИзменения);
	//rarus bonmak 20.03.2020 14177 --
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл		
		Если ТекРеквизит.ИмяРекв = "Изделие" Тогда
			//Найдем продукт
			//Если ЗначениеЗаполнено(СтруктураРеквизитов.Изделие) Тогда	//rarus ozhnik 15888 05.07.2020 + у SPORT спецификации может не быть изделия			
			Если СтруктураРеквизитов.Свойство("Изделие") И НЕ СтруктураРеквизитов.Изделие = Неопределено Тогда //rarus vikhle 25.09.2020 mt 16181 
				НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтруктураРеквизитов.Изделие.GUID);
				Если НайденноеИзделие.Пустая() Тогда
					//Если не нашли, то создадим стандартным способом
					//rarus bonmak 16452 23.09.2020 ++
					//фИмяМетода = "GetProduct";
					//Отказ = Ложь;
					//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(фИмяМетода ,Ложь);
					//СтруктураПараметров.Вставить("GUID", СтруктураРеквизитов.Изделие.GUID);
					//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(фИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
					//Если Отказ Тогда
					//	Возврат Неопределено;
					//КонецЕсли;
					//НайденноеИзделие = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникПродукты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,фИмяМетода);
					СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(,Ложь);
					СтруктураПараметров.Вставить("GUID", СтруктураРеквизитов.Изделие.GUID);
					НайденноеИзделие = Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetProduct(СтруктураПараметров, Ложь, СообщениеОбОшибке);	
			        //rarus bonmak 16452 23.09.2020 --
					Если НайденноеИзделие = Неопределено Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли; //rarus ozhnik 15888 05.07.2020 + 
			Иначе
				НайденноеИзделие = Справочники.Scan_Изделия.ПустаяСсылка();
			КонецЕсли;
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
			Продолжить;
		ИначеЕсли ТекРеквизит.ИмяРекв = "ВидСпецификации" Тогда
			//Определим вид спецификации
			НайденныйВидСпецификации = Справочники.Scan_ВидыСпецификацийПродуктов.НайтиПоРеквизиту("IDExternalSystem",СтруктураРеквизитов.ВидСпецификации.GUID);
			Если НайденныйВидСпецификации.Пустая() Тогда
				//Если не нашли, то создадим стандартным способом
				НайденныйВидСпецификации = РазобратьВидСпецификации(СтруктураРеквизитов.ВидСпецификации, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, "GetListOfSpecificationType");
				Если НайденныйВидСпецификации = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = НайденныйВидСпецификации;
			КопияСтруктураРеквизитов[ТекРеквизит.ИмяРекв] = НайденныйВидСпецификации; //rarus bonmak 20.03.2020 14177
		КонецЕсли;
		
		Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв] Тогда
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
		КонецЕсли;				
	КонецЦикла;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			//создание происходит при загрузке спецификации из заявки на СОП			
			ТекОбъект = Справочники.Scan_ВерсииБазовыхСпецификаций.СоздатьЭлемент();
			ТекОбъект.Владелец = Владелец; 
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если ТекОбъект.Владелец.Изделие <> НайденноеИзделие Тогда
			//если изделие владельца не совпадает с возвращаемым продуктом по спецификации, не создаем и не обновляем спецификацию
			СообщениеОбОшибке = "Изменено изделие спецификации в 1БД. Новое изделие: " + НайденноеИзделие.IDExternalSystem;
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов.Наименование, СтруктураРеквизитов.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;	
		КонецЕсли;

		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		//Дата обновления
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Если СтруктураРеквизитов.Свойство("Опции") Тогда
			ТаблицаОпций = Справочники.Scan_ВерсииБазовыхСпецификаций.РазобратьСтрокуОпций(СтруктураРеквизитов.Опции);
			Если ТаблицаОпций.Количество() > 0 Тогда
				ТекОбъект.РасшифровкаОпций.Загрузить(ТаблицаОпций);
			КонецЕсли;
		КонецЕсли;
			 
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
						
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка;
			
			РегистрыСведений.Scan_ВерсииСпецификаций.ЗаписьЗначенияРегистраСведения(КопияСтруктураРеквизитов); //rarus bonmak 20.03.2020 14177
			РегистрыСведений.Scan_ОпределяемыеПараметрыПоОпциямПродуктов.ОбновитьОпределяемыеПараметры(НайденноеИзделие);
						
		Исключение
			СообщениеОбОшибке = "Не удалось записать версию спецификацию (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
	
КонецФункции
//rarus bonmak 24.09.2019 14177 --

//// ВЕРСИИ СПЕЦИФИКАЦИЙ ПРОДУКТА ТС
Процедура ВызватьМетод_GetSpecificationVersion(ДопПараметры, Отказ, СообщениеОбОшибке) Экспорт //rarus bonmak 20.03.2020 14177 ++
	ИмяМетода = "GetSpecificationVersion";
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если ДопПараметры.Свойство("GUID") Тогда
		СтруктураПараметров.Вставить("GUID", ДопПараметры.GUID);
	КонецЕсли;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаВерсииСпецификацииПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 20.03.2020 14177 --

Функция РазборОтветаВерсииСпецификацииПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт //rarus bonmak 20.03.2020 14177 ++
	//Получим однин элемент
	ОбъектСпецификацияПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СпецификацияПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;	
	РазобратьВерсииСпецификацииПродукта(ОбъектСпецификацияПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Отказ);
КонецФункции //rarus bonmak 20.03.2020 14177 --

Функция РазобратьВерсииСпецификацииПродукта(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ) Экспорт //rarus bonmak 20.03.2020 14177 ++
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetSpecificationVersion");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;

	НайденныйЭлемент = Справочники.Scan_ВерсииБазовыхСпецификаций.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	//поиск по наименованию не имеет смысла, т.к. наименования могут совпадать
	ОбъектСсылка = СоздатьОбновитьВерсииСпецификацииПродукта(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;			
КонецФункции //rarus bonmak 20.03.2020 14177 --

Функция СоздатьОбновитьВерсииСпецификацииПродукта(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ) //rarus bonmak 20.03.2020 14177 ++
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл		
		Если ТекРеквизит.ИмяРекв = "Изделие" Тогда
			
			//rarus bonmak 17615 31.05.2021 ++
			Если СтруктураРеквизитов.Свойство("Изделие") И НЕ СтруктураРеквизитов.Изделие = Неопределено Тогда 
				//rarus bonmak 17615 31.05.2021 --
				НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтруктураРеквизитов.Изделие.GUID);
				Если НайденноеИзделие.Пустая() Тогда
					//rarus bonmak 16452 23.09.2020 ++
					//фИмяМетода = "GetProduct";
					//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(фИмяМетода ,Ложь);
					//СтруктураПараметров.Вставить("GUID", СтруктураРеквизитов.Изделие.GUID);
					//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(фИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
					//Если Отказ Тогда
					//	Возврат Неопределено;
					//КонецЕсли;
					//НайденноеИзделие = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникПродукты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,фИмяМетода);
					
					СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(,Ложь);
					СтруктураПараметров.Вставить("GUID", СтруктураРеквизитов.Изделие.GUID);
					НайденноеИзделие = Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetProduct(СтруктураПараметров, Отказ, СообщениеОбОшибке);	
					//rarus bonmak 16452 23.09.2020 --
					
					Если НайденноеИзделие = Неопределено ИЛИ Отказ ИЛИ НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда //rarus bonmak 16452 23.09.2020
						Отказ = Истина;
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
			Иначе //rarus bonmak 17615 31.05.2021 ++
				НайденноеИзделие = Справочники.Scan_Изделия.ПустаяСсылка();
				//rarus bonmak 17615 31.05.2021 --
			КонецЕсли;
			СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = НайденноеИзделие;
		ИначеЕсли ТекРеквизит.ИмяРекв = "ВидСпецификации" Тогда
			НайденныйВидСпецификации = Справочники.Scan_ВидыСпецификацийПродуктов.НайтиПоРеквизиту("IDExternalSystem",СтруктураРеквизитов.ВидСпецификации.GUID);
			Если НайденныйВидСпецификации.Пустая() Тогда
				НайденныйВидСпецификации = РазобратьВидСпецификации(СтруктураРеквизитов.ВидСпецификации, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, "GetListOfSpecificationType");
				Если НайденныйВидСпецификации = Неопределено Тогда
					Отказ = Истина;
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = НайденныйВидСпецификации; 
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьЗаписьВРегистр = Ложь;
	Если НЕ ЭлементСсылка.Пустая() Тогда
		Если СтруктураРеквизитов.Свойство("ВерсияСпецификации") Тогда
			Если СтруктураРеквизитов.ВерсияСпецификации >= ЭлементСсылка.ВерсияСпецификации Тогда
				СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(, Ложь);
				СтруктураПараметров.GUID = СтруктураРеквизитов.IDExternalSystem;
				Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetSpecification(СтруктураПараметров);
			КонецЕсли;
			ДобавитьЗаписьВРегистр = Истина;
		КонецЕсли;
	Иначе
		Если СтруктураРеквизитов.ВидСпецификации <> Справочники.Scan_ВидыСпецификацийПродуктов.SPORTСпецификация Тогда
			//rarus bonmak 19.05.2021 17615 ++
			//НайденныйЭлемент = Справочники.Scan_СпецификацииПродуктов.НайтиПоРеквизиту("Изделие", СтруктураРеквизитов.Изделие);
			НайденныйЭлемент = Справочники.Scan_СпецификацииПродуктов.ПолучитьСпецификациюПоИзделию(СтруктураРеквизитов.Изделие);
			//rarus bonmak 19.05.2021 17615 --
			Если НЕ НайденныйЭлемент.Пустая() Тогда
				СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(, Ложь);
				СтруктураПараметров.GUID = СтруктураРеквизитов.IDExternalSystem;
				Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetSpecification(СтруктураПараметров, НайденныйЭлемент);
				
				ДобавитьЗаписьВРегистр = Истина;
			Иначе
				//rarus bonmak 19.05.2021 17615 ++
				//СообщениеОбОшибке = "Не создана SPORT Спецификация: " + СтруктураРеквизитов.Наименование + " (" + СтруктураРеквизитов.IDExternalSystem + ") версия " + СтруктураРеквизитов.ВерсияСпецификации;
				//Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
				//Отказ = Истина;
				ПродуктСсылка = СтруктураРеквизитов.Изделие;
				СпецификацияОбъект = Справочники.Scan_СпецификацииПродуктов.СоздатьЭлемент();
				СпецификацияОбъект.Наименование = "" + ПродуктСсылка.МодельПродукта + " " + ПродуктСсылка.Наименование;
				СпецификацияОбъект.МодельПродукта = ПродуктСсылка.МодельПродукта;
				СпецификацияОбъект.Изделие = ПродуктСсылка; 
				Попытка
					СпецификацияОбъект.Записать();
				Исключение
					СообщениеОбОшибке = "Не удалось записать спецификацию: " + СтруктураРеквизитов.Наименование + " (" + СтруктураРеквизитов.IDExternalSystem + ") версия " + СтруктураРеквизитов.ВерсияСпецификации + ": "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
					Отказ = Истина;	
				КонецПопытки;
				Если НЕ СпецификацияОбъект.Ссылка.Пустая() Тогда
					СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(, Ложь);
					СтруктураПараметров.GUID = СтруктураРеквизитов.IDExternalSystem;
					Scan_ВебСервисыРазборОтветов.ВызватьМетод_GetSpecification(СтруктураПараметров, СпецификацияОбъект.Ссылка);
					
					ДобавитьЗаписьВРегистр = Истина;
					
					ПродуктОбъект = ПродуктСсылка.ПолучитьОбъект(); 
					ПродуктОбъект.Заблокировать();//rarus vikhle 03.09.2021 АПК
					ПродуктОбъект.СпецификацияПродукта = СпецификацияОбъект.Ссылка;
					Попытка
						ПродуктОбъект.Записать();
					Исключение
						СообщениеОбОшибке = "Не удалось привязать спецификацию " + СпецификацияОбъект.Ссылка + " к продукту " + ПродуктСсылка + ": " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ПродуктСсылка);	
					КонецПопытки;
				КонецЕсли;
				//rarus bonmak 19.05.2021 17615 --
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = "Не создана SPORT Спецификация: " + СтруктураРеквизитов.Наименование + " (" + СтруктураРеквизитов.IDExternalSystem + ") версия " + СтруктураРеквизитов.ВерсияСпецификации;
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	СтруктураРеквизитов.Вставить("ДатаВерсииСпецификации", XDTOОбъект.ДатаИзменения);

	Если ДобавитьЗаписьВРегистр Тогда
		Отказ = РегистрыСведений.Scan_ВерсииСпецификаций.ЗаписьЗначенияРегистраСведения(СтруктураРеквизитов);
		Если Отказ Тогда
			СообщениеОбОшибке = "Не удалось записать версию спецификацию: " + СтруктураРеквизитов.Наименование + " (" + СтруктураРеквизитов.IDExternalSystem + ") версия " + СтруктураРеквизитов.ВерсияСпецификации;
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);			
		КонецЕсли;	
	КонецЕсли;	
КонецФункции //rarus bonmak 20.03.2020 14177 --

//// СОЗДАНИЕ ПРОДУКТА в 1БД
Функция ВызватьМетод_CreateProduct(ДопПараметры) Экспорт //rarus bonmak 18.05.2020 14375 ++
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	ИмяМетода = "CreateProduct";
	ГУИДПродукта = Неопределено;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Если ДопПараметры.Свойство("МаркаПродукта") Тогда
		СтруктураПараметров.Вставить("МаркаПродукта", ДопПараметры.МаркаПродукта);
	КонецЕсли;
	Если ДопПараметры.Свойство("ТипПродукта") Тогда
		СтруктураПараметров.Вставить("ТипПродукта", ДопПараметры.ТипПродукта);
	КонецЕсли;
	Если ДопПараметры.Свойство("НомерИзделия") Тогда
		СтруктураПараметров.Вставить("НомерИзделия", ДопПараметры.НомерИзделия);
	КонецЕсли;
	//rarus agar 02.02.2021 17132 ++
	Если ДопПараметры.Свойство("Наименование") Тогда
		СтруктураПараметров.Вставить("Наименование", ДопПараметры.Наименование);
	КонецЕсли;
	//rarus agar 02.02.2021 17132 --
	// Rarus tenkam 31.03.2022 mantis 19047 +++
	Если ДопПараметры.Свойство("БУ") Тогда
		СтруктураПараметров.Вставить("БУ", ДопПараметры.БУ);
	КонецЕсли;
	Если ДопПараметры.Свойство("TLMS") Тогда
		СтруктураПараметров.Вставить("TLMS", ДопПараметры.TLMS);
	КонецЕсли;
	// Rarus tenkam 31.03.2022 mantis 19047 ---
			
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		ГУИДПродукта = РазборОтветаСозданиеПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;
	
	Возврат ГУИДПродукта;
КонецФункции //rarus bonmak 18.05.2020 14375 --

Функция РазборОтветаСозданиеПродуктов(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт //rarus bonmak 18.05.2020 14375 ++
	//Получим однин элемент
	ОбъектСпецификацияПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.Продукт", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);	
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;	
	Возврат РазобратьСозданиеПродукта(ОбъектСпецификацияПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Отказ);
КонецФункции //rarus bonmak 18.05.2020 14375 --

Функция РазобратьСозданиеПродукта(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ) Экспорт //rarus bonmak 18.05.2020 14375 ++
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	Возврат СтруктураРеквизитов.IDExternalSystem;			
КонецФункции //rarus bonmak 18.05.2020 14375 --

//// СОЗДАНИЕ ДОГОВОРА В 1БД  	
Функция ВызватьМетод_CreateSOP(СОПДоговорСсылка, СоглашениеОПоставкеСсылка = Неопределено, Отказ = Ложь, СообщениеОбОшибке = "") Экспорт // rarus tenkam 07.09.2020 mantis 16181 +++
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	ИмяМетода = "CreateSOP";
	ГУИДДоговора = Неопределено;
	         		                  		
	Если ЗначениеЗаполнено(СОПДоговорСсылка.IDExternalSystem) Тогда
		СообщениеОбОшибке = "Ошибка при вызове метода " + ИмяМетода + ". В договоре заполнен ID External System.";
		Отказ = Истина;
		Возврат СОПДоговорСсылка.IDExternalSystem;			
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СоглашениеОПоставкеСсылка) Тогда
		СоглашениеОПоставкеСсылка = Справочники.Scan_СоглашенияОПоставке.НайтиСоглашениеОПоставкеПоДоговору(СОПДоговорСсылка);
	КонецЕсли;
	
	Если СоглашениеОПоставкеСсылка.СписокПродуктов.Количество() = 0 Тогда
		СообщениеОбОшибке = "Ошибка при вызове метода " + ИмяМетода + ". В соглашении о поставке нет продуктов.";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СОПДоговорСсылка.Компания) Тогда
		СообщениеОбОшибке = "Ошибка при вызове метода " + ИмяМетода + ". В договоре СОП не заполнена компания.";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// rarus tenkam 27.08.2021 mantis 18215 +++
	// Проверим, заполнены ли по всем продуктам документы с ценами
	Для Каждого ТекСтрока Из СоглашениеОПоставкеСсылка.СписокПродуктов Цикл
		Если НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Продукт,"ДокументУстановкиПлановыхЦенПродукта")) Тогда
			СообщениеОбОшибке = "Ошибка при вызове метода " + ИмяМетода + ". В договоре СОП не у всех продуктов есть документ установки цен.";
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;	  	
	// rarus tenkam 27.08.2021 mantis 18215 ---
             	
	СтруктураПараметров = СОППолучитьСтруктуруДанныхДляОтправкив1БД(СОПДоговорСсылка, СоглашениеОПоставкеСсылка, ИмяМетода);

	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		ГУИДДоговора = РазборОтветаМетодовCreateSet(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;
	
	Возврат ГУИДДоговора;
КонецФункции	// rarus tenkam 07.09.2020 mantis 16181 ---

//// ОБНОВЛЕНИЕ ДОГОВОРА В 1БД
Функция ВызватьМетод_SetSOP(СтруктураПараметров, СОПДоговорСсылка, СоглашениеОПоставкеСсылка = Неопределено, Отказ = Ложь, СообщениеОбОшибке = "") Экспорт // rarus tenkam 07.09.2020 mantis 16181 +++
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	ИмяМетода = "SetSOP";
	GUIDДоговора = СОПДоговорСсылка.IDExternalSystem;
	
	Если НЕ ЗначениеЗаполнено(GUIDДоговора) Тогда
		СообщениеОбОшибке = "Ошибка при вызове метода " + ИмяМетода + ". В договоре не заполнен ID External System.";
		Отказ = Истина;
		Возврат Неопределено;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СоглашениеОПоставкеСсылка) Тогда
		СоглашениеОПоставкеСсылка = Справочники.Scan_СоглашенияОПоставке.НайтиСоглашениеОПоставкеПоДоговору(СОПДоговорСсылка);
	КонецЕсли;
	
	Если СоглашениеОПоставкеСсылка.СписокПродуктов.Количество() = 0 Тогда
		СообщениеОбОшибке = "Ошибка при вызове метода " + ИмяМетода + ". В соглашении о поставке нет продуктов.";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СОПДоговорСсылка.Компания) Тогда
		СообщениеОбОшибке = "Ошибка при вызове метода " + ИмяМетода + ". В договоре СОП не заполнена компания.";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("GUID", GUIDДоговора);
	
	// Проверим, возможно изменились только доп. реквизиты, тогда вызовем не SetSOP, а SetAdditionalProperty
	Если ИзменилисьТолькоДопРеквизитыСОП(СтруктураПараметров) Тогда
		Возврат ВызватьМетод_SetAdditionalProperty(СтруктураПараметров, "СоглашениеОПоставке", GUIDДоговора, Отказ, СообщениеОбОшибке);	
	Иначе	
		// ТЧ с продуктами нужно передавать всегда
		
		ТЧПродукты = Новый ТаблицаЗначений;
		ТЧПродукты.Колонки.Добавить("ПродуктGUID", Новый ОписаниеТипов("Строка"));
		ТЧПродукты.Колонки.Добавить("СпециальныеУсловия", Новый ОписаниеТипов("Строка"));
		ТЧПродукты.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число"));
		ТЧПродукты.Колонки.Добавить("ПроцентДрайва", Новый ОписаниеТипов("Число"));
		ТЧПродукты.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТЧПродукты.Колонки.Добавить("ЦенаПродажи", Новый ОписаниеТипов("Число"));
		ТЧПродукты.Колонки.Добавить("СуммаПродажи", Новый ОписаниеТипов("Число"));
		ТЧПродукты.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
		ТЧПродукты.Колонки.Добавить("СрокПоставки", Новый ОписаниеТипов("Дата"));
		ТЧПродукты.Колонки.Добавить("ЦенаЗакупки",Новый ОписаниеТипов("Число")); //rarus vikhle 01.02.2021 mt 17179
		ТЧПродукты.Колонки.Добавить("ДатаПерерасчета",Новый ОписаниеТипов("Дата")); // rarus tenkam 05.04.2021 mantis 17419 +
		
		//rarus vikhle 16.03.2022 m 18981 +++
		Если СоглашениеОПоставкеСсылка.Статус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС Тогда
			ПродуктыБезДокументов = Новый ТаблицаЗначений;
			ПродуктыБезДокументов.Колонки.Добавить("GUID",			Новый ОписаниеТипов("Строка"));
			ПродуктыБезДокументов.Колонки.Добавить("СуммаСкидки",	Новый ОписаниеТипов("Число"));
			ПродуктыБезДокументов.Колонки.Добавить("ПроцентДрайва",	Новый ОписаниеТипов("Число"));
			ПродуктыБезДокументов.Колонки.Добавить("ЦенаПродажи",	Новый ОписаниеТипов("Число"));
			ПродуктыБезДокументов.Колонки.Добавить("СуммаПродажи",	Новый ОписаниеТипов("Число"));
			ПродуктыБезДокументов.Колонки.Добавить("СуммаНДС",		Новый ОписаниеТипов("Число"));
		
		 
			ПродуктыЗаявки	= СоглашениеОПоставкеСсылка.СписокПродуктов.ВыгрузитьКолонку("Продукт");
			ДокументыЦен	= Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьДокументыУстановкиЦенПоМассивуПродуктов(ПродуктыЗаявки, СоглашениеОПоставкеСсылка, Истина);
		КонецЕсли;	
		//rarus vikhle 16.03.2022 m 18981 ---
		
		Для Каждого ТекСтрока ИЗ СоглашениеОПоставкеСсылка.СписокПродуктов Цикл
			НоваяСтрока = ТЧПродукты.Добавить();
			
			ТекПродукт = ТекСтрока.Продукт;
			
			//rarus vikhle 16.03.2022 m 18981 +++
			//СоответствиеСоставляющих = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЗначенияВсехСоставляющихПродукта(ТекПродукт);
			//СоответствиеСоставляющихБезНДС = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЗначенияВсехСоставляющихПродукта(ТекПродукт, Ложь);
			//rarus vikhle 16.03.2022 m 18981 ---
			
			НоваяСтрока.ПродуктGUID = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекПродукт, "IDExternalSystemProduct");
			НоваяСтрока.СпециальныеУсловия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.СпециальныеУсловия, "Код");		
			НоваяСтрока.Количество = 1;
			
			//rarus vikhle 16.03.2022 m 18981 +++
			Если НЕ СоглашениеОПоставкеСсылка.Статус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС Тогда 
				СоответствиеСоставляющих = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЗначенияВсехСоставляющихПродукта(ТекПродукт);
				СоответствиеСоставляющихБезНДС = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЗначенияВсехСоставляющихПродукта(ТекПродукт, Ложь);	
				
				НоваяСтрока.СуммаСкидки		= СоответствиеСоставляющих.Получить("ДрайвDealerNet");		
				НоваяСтрока.ПроцентДрайва	= СоответствиеСоставляющих.Получить("ПроцентДрайва"); 		
				//НоваяСтрока.ЦенаПродажи = СоответствиеСоставляющих.Получить("ЦенаДилера");
				НоваяСтрока.ЦенаПродажи		= СоответствиеСоставляющих.Получить("ЦенаDealerNetСоСкидкой");//rarus vikhle 04.02.2021 mt 17196 
				НоваяСтрока.СуммаПродажи	= СоответствиеСоставляющих.Получить("ЦенаDealerNetСоСкидкой");
				НоваяСтрока.СуммаНДС		= СоответствиеСоставляющих.Получить("ЦенаDealerNetСоСкидкой") - СоответствиеСоставляющихБезНДС.Получить("ЦенаDealerNetСоСкидкой");
			Иначе
				// При отправке заявок в статусе "Неактуально, есть ДС" цены берутся из документов цен по заявке
				// При отсутствии документов с ценами цены получаются методом GetSop
				ДокументЦен = ДокументыЦен[ТекПродукт]; 	
				
				Если НЕ ДокументЦен = Неопределено Тогда
					
					СтрокаТЧ = ДокументЦен.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.ДрайвDealerNet, "СоставляющаяЦены"); 
					Если НЕ СтрокаТЧ = Неопределено Тогда
						НоваяСтрока.СуммаСкидки	= СтрокаТЧ.ЦенаСНДС;		
					КонецЕсли;
					
					СтрокаТЧ = ДокументЦен.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.ПроцентДрайва, "СоставляющаяЦены"); 
					Если НЕ СтрокаТЧ = Неопределено Тогда
						НоваяСтрока.ПроцентДрайва = СтрокаТЧ.ЦенаСНДС;		
					КонецЕсли;
					
					СтрокаТЧ = ДокументЦен.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой, "СоставляющаяЦены");
					Если НЕ СтрокаТЧ = Неопределено Тогда
						НоваяСтрока.ЦенаПродажи		= СтрокаТЧ.ЦенаСНДС;
						НоваяСтрока.СуммаПродажи	= СтрокаТЧ.ЦенаСНДС;
						НоваяСтрока.СуммаНДС		= СтрокаТЧ.ЦенаСНДС - СтрокаТЧ.ЦенаБезНДС;
					КонецЕсли;	
					
				Иначе
					СтрокаТЗ = ПродуктыБезДокументов.Добавить();
					СтрокаТЗ.Guid = НоваяСтрока.ПродуктGUID;
				КонецЕсли;	
					
			КонецЕсли;	
			//rarus vikhle 16.03.2022 m 18981 ---
			
			НоваяСтрока.СрокПоставки	= ТекСтрока.DDS;
			НоваяСтрока.ЦенаЗакупки 	= ТекСтрока.Себестоимость; //rarus vikhle 01.02.2021 mt 17179 
			НоваяСтрока.ДатаПерерасчета = ТекСтрока.ДатаПерерасчета; // rarus tenkam 05.04.2021 mantis 17419 +
		КонецЦикла;	
		СтруктураПараметров.Вставить("Продукты", ТЧПродукты);
		
		//rarus vikhle 16.03.2022 m 18981 +++
		Если СоглашениеОПоставкеСсылка.Статус = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС
			И ПродуктыБезДокументов.Количество() > 0 Тогда
			// Получим цены продуктов без документов цен методом GetSop
			СообщениеОбОшибкеGetSop = "";
			ОтказGetSop	= Ложь;
			СтруктураПараметровGetSop = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода("GetSOP" ,Ложь);
			СтруктураПараметровGetSop.Вставить("GUID", GUIDДоговора);
			ИмяСобытияЖурналаРегистрацииGetSop = "Веб-сервис.GetSOP";
			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод("GetSOP", 
															СтруктураПараметровGetSop, 
															ОтказGetSop, 
															ИмяСобытияЖурналаРегистрацииGetSop);
			Если НЕ ОтказGetSop Тогда
				Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекЭлементОтвет,
																							 ОтказGetSop,
																							 СообщениеОбОшибкеGetSop,
																							 ИмяСобытияЖурналаРегистрацииGetSop,
																							 "GetSOP",,
																							 ПродуктыБезДокументов);
				Если НЕ ОтказGetSop Тогда
					
					ЗаполняемыеПоля = "СуммаСкидки, ПроцентДрайва, ЦенаПродажи, СуммаПродажи, СуммаНДС";
					Для Каждого СтрокаТЗ Из ПродуктыБезДокументов Цикл
						
						СтрокаПродукта = ТЧПродукты.Найти(СтрокаТЗ.Guid, "ПродуктGUID");
						Если НЕ СтрокаПродукта = Неопределено Тогда
							ЗаполнитьЗначенияСвойств(СтрокаПродукта, СтрокаТЗ, ЗаполняемыеПоля);
						КонецЕсли;	
						
					КонецЦикла;
					
				Иначе
					Отказ = Истина;																					 
					Возврат GUIDДоговора;
				КонецЕсли;
				
			Иначе
				Отказ = Истина;
				Возврат GUIDДоговора;
			КонецЕсли;
			
		КонецЕсли;	
		//rarus vikhle 16.03.2022 m 18981 ---
		
		//rarus vikhle 13.01.2021 mt 17026 +++
		//ТЧ График платежей всегда передаем
		ТЧГрафикПлатежей = Новый ТаблицаЗначений;
		ТЧГрафикПлатежей.Колонки.Добавить("ВидОплаты",	Новый ОписаниеТипов("Строка"));
		ТЧГрафикПлатежей.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
		ТЧГрафикПлатежей.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
		
		//rarus vikhle 04.08.2021 mt 17637 +++
		СгруппированныйГрафик = Справочники.Scan_СоглашенияОПоставке.СгруппированныйГрафикПлатежей(СоглашениеОПоставкеСсылка.ГрафикПлатежей.Выгрузить());
		//Для Каждого ТекСтрока ИЗ СоглашениеОПоставкеСсылка.ГрафикПлатежей Цикл
		Для Каждого ТекСтрока ИЗ СгруппированныйГрафик Цикл	
		//rarus vikhle 04.08.2021 mt 17637 ---	
			НоваяСтрока            = ТЧГрафикПлатежей.Добавить();
			НоваяСтрока.ВидОплаты  = ?(ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыОплат.Предоплата"), "Предоплата", "Постоплата");
			НоваяСтрока.ДатаОплаты = ТекСтрока.ДатаПлатежа;
			НоваяСтрока.Сумма      = ТекСтрока.Сумма;
		КонецЦикла;	
		СтруктураПараметров.Вставить("ГрафикПлатежей",ТЧГрафикПлатежей);
		//rarus vikhle 13.01.2021 mt 17026 ---
		
		//rarus vikhle 14.01.2021 mt 17026 +++
		// ТЧ Условия оплаты
		ТЧУсловияОплаты = Новый ТаблицаЗначений;
		ТЧУсловияОплаты.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов("Строка"));
		ТЧУсловияОплаты.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		ТЧУсловияОплаты.Колонки.Добавить("Процент", Новый ОписаниеТипов("Число"));
		ТЧУсловияОплаты.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
		ТЧУсловияОплаты.Колонки.Добавить("РасчетДатыОплаты", Новый ОписаниеТипов("Строка"));
		ТЧУсловияОплаты.Колонки.Добавить("СрокВДнях", Новый ОписаниеТипов("Число"));
		
		//rarus vikhle 04.08.2021 mt 17637 +++
		СгруппированныеУсловияОплаты = Справочники.Scan_СоглашенияОПоставке.СгруппированныеУсловияОплаты(СоглашениеОПоставкеСсылка.УсловияОплаты.Выгрузить());
		//Для Каждого ТекСтрока ИЗ СоглашениеОПоставкеСсылка.УсловияОплаты Цикл
		Для Каждого ТекСтрока ИЗ СгруппированныеУсловияОплаты Цикл
			НоваяСтрока = ТЧУсловияОплаты.Добавить();
			
			НоваяСтрока.ВидОплаты = ?(ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыОплат.Предоплата"), "Предоплата", "Постоплата");
			НоваяСтрока.Сумма = ТекСтрока.Сумма;		
			НоваяСтрока.Процент = ТекСтрока.ПроцентОплаты; 		
			НоваяСтрока.ДатаОплаты = ТекСтрока.КрайняяДатаОплаты;  
			
			Если ТекСтрока.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыДоговора") Тогда 
				ТекРасчетДатыОплаты = "ОтДатыДоговора";	
			ИначеЕсли ТекСтрока.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыОтгрузкиDDS") Тогда
				ТекРасчетДатыОплаты = "ОтДатыОтгрузки";
			ИначеЕсли ТекСтрока.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ДоДатыОтгрузкиDDS") Тогда
				ТекРасчетДатыОплаты = "ДоДатыОтгрузки";
			КонецЕсли; 
			
			НоваяСтрока.РасчетДатыОплаты = ТекРасчетДатыОплаты;		
			НоваяСтрока.СрокВДнях = ТекСтрока.СрокОплатыАванса;		
		КонецЦикла;	
		СтруктураПараметров.Вставить("УсловияОплаты", ТЧУсловияОплаты);
		//rarus vikhle 14.01.2021 mt 17026 ---
		
		ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		Если НЕ Отказ Тогда
			GUIDДоговора = РазборОтветаМетодовCreateSet(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
		КонецЕсли;
		
		Возврат GUIDДоговора;
	КонецЕсли;
КонецФункции	// rarus tenkam 07.09.2020 mantis 16181 ---

//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ПО ОТПРАВКЕ ДАННЫХ СОП
Функция РазборОтветаМетодовCreateSet(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS) Экспорт // rarus tenkam 07.09.2020 mantis 16181 +++
	ОбъектResult = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;
	ОтветGUID = ОбъектResult.GUID;
	
	Если НЕ ЗначениеЗаполнено(ОтветGUID) Тогда
		// Возможно, есть ErrorDescription
		ErrorDescription = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.ErrorMessage.ErrorDescription", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS);
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Иначе
			СообщениеОбОшибке = ErrorDescription;
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;	

	Возврат ОтветGUID;
	
КонецФункции	// rarus tenkam 07.09.2020 mantis 16181 ---

Функция СОППолучитьСтруктуруДанныхДляОтправкиВ1БД(СОПДоговорСсылка, СоглашениеОПоставкеСсылка = Неопределено, ИмяМетода = "") Экспорт // rarus tenkam 07.09.2020 mantis 16181 +++
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяМетода <> "" Тогда
		СтруктураДанных = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	Иначе
		СтруктураДанных = Новый Структура;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СоглашениеОПоставкеСсылка) Тогда
		СоглашениеОПоставкеСсылка = Справочники.Scan_СоглашенияОПоставке.НайтиСоглашениеОПоставкеПоДоговору(СОПДоговорСсылка);
	КонецЕсли;  	
	
	// Реквизиты 	
	СтруктураДанных.Вставить("GUID",СОПДоговорСсылка.IDExternalSystem);
	СтруктураДанных.Вставить("Наименование",СОПДоговорСсылка.Наименование);
	СтруктураДанных.Вставить("НомерДоговора", СОПДоговорСсылка.НомерДоговора);
	СтруктураДанных.Вставить("Дата", СОПДоговорСсылка.ДатаНачала);
	СтруктураДанных.Вставить("ДилерGUID", СОПДоговорСсылка.Компания.IDExternalSystem);
	СтруктураДанных.Вставить("ВидДоговора", ?(СОПДоговорСсылка.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение, "Соглашение", "ДополнительноеСоглашение"));
	СтруктураДанных.Вставить("GuidИсточника", Scan_ПраваИНастройки.Scan_Право("GuidИсточникаOFMS"));
	
	// ТЧ Продукты
	ТЧПродукты = Новый ТаблицаЗначений;
	ТЧПродукты.Колонки.Добавить("ПродуктGUID", Новый ОписаниеТипов("Строка"));
	ТЧПродукты.Колонки.Добавить("СпециальныеУсловия", Новый ОписаниеТипов("Строка"));
	ТЧПродукты.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число"));
	ТЧПродукты.Колонки.Добавить("ПроцентДрайва", Новый ОписаниеТипов("Число"));
	ТЧПродукты.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТЧПродукты.Колонки.Добавить("ЦенаПродажи", Новый ОписаниеТипов("Число"));
	ТЧПродукты.Колонки.Добавить("СуммаПродажи", Новый ОписаниеТипов("Число"));
	ТЧПродукты.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	ТЧПродукты.Колонки.Добавить("СрокПоставки", Новый ОписаниеТипов("Дата"));
	ТЧПродукты.Колонки.Добавить("ЦенаЗакупки",Новый ОписаниеТипов("Число")); //rarus vikhle 01.02.2021 mt 17179
	ТЧПродукты.Колонки.Добавить("ДатаПерерасчета",Новый ОписаниеТипов("Дата")); // rarus tenkam 05.04.2021 mantis 17419 +
	//ТЧПродукты.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка"));
	//ТЧПродукты.Колонки.Добавить("МестоПоставкиGUID", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекСтрока ИЗ СоглашениеОПоставкеСсылка.СписокПродуктов Цикл
		НоваяСтрока = ТЧПродукты.Добавить();
		
		ТекПродукт = ТекСтрока.Продукт;
		
		СоответствиеСоставляющих = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЗначенияВсехСоставляющихПродукта(ТекПродукт);
		СоответствиеСоставляющихБезНДС = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЗначенияВсехСоставляющихПродукта(ТекПродукт, Ложь);
		
		НоваяСтрока.ПродуктGUID = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекПродукт, "IDExternalSystemProduct");
		НоваяСтрока.СпециальныеУсловия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.СпециальныеУсловия, "Код");		
		НоваяСтрока.СуммаСкидки = СоответствиеСоставляющих.Получить("ДрайвDealerNet");		
		НоваяСтрока.ПроцентДрайва = СоответствиеСоставляющих.Получить("ПроцентДрайва"); 		
		НоваяСтрока.Количество = 1;
		//НоваяСтрока.ЦенаПродажи = СоответствиеСоставляющих.Получить("ЦенаДилера");
		НоваяСтрока.ЦенаПродажи = СоответствиеСоставляющих.Получить("ЦенаDealerNetСоСкидкой"); //rarus vikhle 04.02.2021 mt 17196
		НоваяСтрока.СуммаПродажи = СоответствиеСоставляющих.Получить("ЦенаDealerNetСоСкидкой");
		НоваяСтрока.СуммаНДС = СоответствиеСоставляющих.Получить("ЦенаDealerNetСоСкидкой") - СоответствиеСоставляющихБезНДС.Получить("ЦенаDealerNetСоСкидкой");
		НоваяСтрока.СрокПоставки = ТекСтрока.DDS;
		НоваяСтрока.ЦенаЗакупки = ТекСтрока.Себестоимость; //rarus vikhle 01.02.2021 mt 17179
		НоваяСтрока.ДатаПерерасчета = ТекСтрока.ДатаПерерасчета; // rarus tenkam 05.04.2021 mantis 17419 +
	КонецЦикла;	
	СтруктураДанных.Вставить("Продукты", ТЧПродукты);

	// ТЧ Условия оплаты
	ТЧУсловияОплаты = Новый ТаблицаЗначений;
	ТЧУсловияОплаты.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов("Строка"));
	ТЧУсловияОплаты.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТЧУсловияОплаты.Колонки.Добавить("Процент", Новый ОписаниеТипов("Число"));
	ТЧУсловияОплаты.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
	ТЧУсловияОплаты.Колонки.Добавить("РасчетДатыОплаты", Новый ОписаниеТипов("Строка"));
	ТЧУсловияОплаты.Колонки.Добавить("СрокВДнях", Новый ОписаниеТипов("Число"));
	
	//rarus vikhle 04.08.2021 mt 17637 +++
	СгруппированныеУсловияОплаты = Справочники.Scan_СоглашенияОПоставке.СгруппированныеУсловияОплаты(СоглашениеОПоставкеСсылка.УсловияОплаты.Выгрузить());
	//Для Каждого ТекСтрока ИЗ СоглашениеОПоставкеСсылка.УсловияОплаты Цикл
	Для Каждого ТекСтрока ИЗ СгруппированныеУсловияОплаты Цикл
		//rarus vikhle 04.08.2021 mt 17637 ---
		НоваяСтрока = ТЧУсловияОплаты.Добавить();
		
		НоваяСтрока.ВидОплаты = ?(ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыОплат.Предоплата"), "Предоплата", "Постоплата");
		НоваяСтрока.Сумма = ТекСтрока.Сумма;		
		НоваяСтрока.Процент = ТекСтрока.ПроцентОплаты; 		
		НоваяСтрока.ДатаОплаты = ТекСтрока.КрайняяДатаОплаты;  
		
		Если ТекСтрока.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыДоговора") Тогда 
			ТекРасчетДатыОплаты = "ОтДатыДоговора";	
		ИначеЕсли ТекСтрока.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыОтгрузкиDDS") Тогда
			ТекРасчетДатыОплаты = "ОтДатыОтгрузки";
		ИначеЕсли ТекСтрока.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ДоДатыОтгрузкиDDS") Тогда
			ТекРасчетДатыОплаты = "ДоДатыОтгрузки";
		КонецЕсли; 
		
		НоваяСтрока.РасчетДатыОплаты = ТекРасчетДатыОплаты;		
		НоваяСтрока.СрокВДнях = ТекСтрока.СрокОплатыАванса;		
	КонецЦикла;	
	СтруктураДанных.Вставить("УсловияОплаты", ТЧУсловияОплаты);
	
	//rarus vikhle 13.01.2021 mt 17026 +++
	
	//ТЧ График платежей
	ТЧГрафикПлатежей = Новый ТаблицаЗначений;
	ТЧГрафикПлатежей.Колонки.Добавить("ВидОплаты",	Новый ОписаниеТипов("Строка"));
	ТЧГрафикПлатежей.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
	ТЧГрафикПлатежей.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
	
	//rarus vikhle 04.08.2021 mt 17637 +++
	СгруппированныйГрафик = Справочники.Scan_СоглашенияОПоставке.СгруппированныйГрафикПлатежей(СоглашениеОПоставкеСсылка.ГрафикПлатежей.Выгрузить());
	//Для Каждого ТекСтрока ИЗ СоглашениеОПоставкеСсылка.ГрафикПлатежей Цикл 
	Для Каждого ТекСтрока ИЗ СгруппированныйГрафик Цикл
	//rarus vikhle 04.08.2021 mt 17637 ---	
		НоваяСтрока            = ТЧГрафикПлатежей.Добавить();
		НоваяСтрока.ВидОплаты  = ?(ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыОплат.Предоплата"), "Предоплата", "Постоплата");
		НоваяСтрока.ДатаОплаты = ТекСтрока.ДатаПлатежа;
		НоваяСтрока.Сумма      = ТекСтрока.Сумма;
	КонецЦикла;	
	СтруктураДанных.Вставить("ГрафикПлатежей",ТЧГрафикПлатежей);
	//rarus vikhle 13.01.2021 mt 17026 ---
	
	// Доп. реквизиты
	ВалютаСОП = СОПДоговорСсылка.ВалютаВзаиморасчетов;
	Если ЗначениеЗаполнено(ВалютаСОП) Тогда
		СтруктураДанных.Вставить("ВалютаCode", ВалютаСОП.Код);
		СтруктураДанных.Вставить("ВалютаDescription", ВалютаСОП.Наименование);		
	КонецЕсли;
	
	ПродавецДилераКЛ = СоглашениеОПоставкеСсылка.ПродавецДилера;
	ПродавецДилераПользователь = Справочники.Пользователи.НайтиПоРеквизиту("КонтактноеЛицоКомпании", ПродавецДилераКЛ);	
	Если ЗначениеЗаполнено(ПродавецДилераПользователь) Тогда
		ПродавецДилераIDПортала = ПродавецДилераПользователь.КодСотрудникаНаПортале;
		ПродавецДилераЛогинПортала = ПродавецДилераПользователь.ЛогинНаПортале;
		
		СтруктураДанных.Вставить("ПродавецДилераIDПортала", ПродавецДилераIDПортала);
		СтруктураДанных.Вставить("ПродавецДилераЛогинПортала", ПродавецДилераЛогинПортала);	
	КонецЕсли;
	
	СтруктураДанных.Вставить("СтатусGUID",СоглашениеОПоставкеСсылка.Статус.IDExternalSystem);
	// rarus tenkam 05.04.2021 mantis 17419 +++
	СтруктураДанных.Вставить("ЗаявкаНаБУПродукты",СоглашениеОПоставкеСсылка.ЗаявкаНаБУПродукты);
	СтруктураДанных.Вставить("ВалютнаяОговорка",СоглашениеОПоставкеСсылка.ВалютнаяОговорка);
	// rarus tenkam 05.04.2021 mantis 17419 ---
	
	//СтруктураДанных.Вставить("СрокОплатыОстатка", СоглашениеОПоставкеСсылка.ОтсрочкаПлатежа); //rarus bonmak 13.01.2021 17041
		
	Возврат СтруктураДанных;
КонецФункции	// rarus tenkam 07.09.2020 mantis 16181 ---

Функция ИзменилисьТолькоДопРеквизитыСОП(СтруктураПараметров) Экспорт // rarus tenkam 07.09.2020 mantis 16181 +++
	Для Каждого ТекПараметр Из СтруктураПараметров Цикл
		Если ТекПараметр.Ключ <> "ВалютаCode" И ТекПараметр.Ключ <> "ВалютаDescription" И
			ТекПараметр.Ключ <> "ПродавецДилераIDПортала" И ТекПараметр.Ключ <> "ПродавецДилераЛогинПортала" И
			ТекПараметр.Ключ <> "СтатусGUID" И 
			// rarus tenkam 05.04.2021 mantis 17419 +++
	        ТекПараметр.Ключ <> "ЗаявкаНаБУПродукты" И 
			ТекПараметр.Ключ <> "ВалютнаяОговорка" И  			
			// rarus tenkam 05.04.2021 mantis 17419 ---
			//ТекПараметр.Ключ <> "СрокОплатыОстатка" И //rarus bonmak 13.01.2021 17041
			ТекПараметр.Ключ <> "GUID" И 
			ТекПараметр.Ключ <> "ТипОбъекта" И ЗначениеЗаполнено(ТекПараметр.Значение) Тогда
			
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции	// rarus tenkam 07.09.2020 mantis 16181 ---

//// ОБНОВЛЕНИЕ ДОП. РЕКВИЗИТОВ ОБЪЕКТА
Функция ВызватьМетод_SetAdditionalProperty(СтруктураПараметров, ТипОбъекта, GUIDОбъекта, Отказ = Ложь, СообщениеОбОшибке = "", ОбъектИДопРеквизит = Неопределено) Экспорт	// rarus tenkam 07.09.2020 mantis 16181 +++ //rarus vikhle 03.03.2022 m 18879 + ОбъектИДопРеквизит
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	ИмяМетода = "SetAdditionalProperty";
	
	Если НЕ СтруктураПараметров.Свойство("ТипОбъекта") Тогда
		СтруктураПараметров.Вставить("ТипОбъекта", ТипОбъекта);	
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("GUID") Тогда		
		СтруктураПараметров.Вставить("GUID", GUIDОбъекта);
	КонецЕсли;
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		GUIDОбъекта = РазборОтветаМетодовCreateSet(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;
	
	//rarus vikhle 03.03.2022 m 18879 +++
	Если Отказ И НЕ ОбъектИДопРеквизит = Неопределено Тогда
		Для Каждого СтрокаСоответствия Из ОбъектИДопРеквизит Цикл
			РегистрыСведений.Scan_Обмен1БДОчередьПоОтправкеРеквизитов.ЗаписьЗначенияРегистраСведения(СтрокаСоответствия.Ключ, 
																								Справочники.Scan_ВидыЗапроса.SetAdditionalProperty, 
																								СтрокаСоответствия.Значение,
																								СтруктураПараметров[СтрокаСоответствия.Значение]);
		КонецЦикла;																						
	КонецЕсли;																	
	//rarus vikhle 03.03.2022 m 18879 ---
	
	Возврат GUIDОбъекта;
КонецФункции	// rarus tenkam 07.09.2020 mantis 16181 ---

// rarus tenkam 09.09.2019 mantis 14841 ---

// rarus tenkam 18.03.2019 mantis 13629 +++
Функция ПолучитьПеречислениеПоСтрокеВидаЗапроса(ВидЗапроса) Экспорт
	
	Если ВидЗапроса = "GetListOfProductMark" Тогда				
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfProductMark;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfProductMark;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetProductMark" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetProductMark;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetProductMark; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfProductGroup" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfProductGroup;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfProductGroup;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetProductGroup" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetProductGroup; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetProductGroup;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfProductType" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfProductType;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfProductType;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetProductType" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetProductType;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetProductType;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfProductSubType" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfProductSubType;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfProductSubType;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetProductSubType" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetProductSubType;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetProductSubType;//rarus bonmak 21.08.2020 16210
	//rarus bonmak 14.04.2020 15891 ++	
	//ИначеЕсли ВидЗапроса = "GetListOfManufacturers" Тогда	
	//	Возврат Перечисления.Scan_ВидыЗапроса.GetListOfManufacturers;
	//ИначеЕсли ВидЗапроса = "GetManufacturers" Тогда	
	//	Возврат Перечисления.Scan_ВидыЗапроса.GetManufacturers;
	//rarus bonmak 14.04.2020 15891 --
	ИначеЕсли ВидЗапроса = "GetListOfProductModel" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfProductModel; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfProductModel; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetProductModel" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetProductModel;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetProductModel;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfChassis" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfChassis;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfChassis;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetChassis" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetChassis; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetChassis; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfEngines" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfEngines;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfEngines;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetEngines" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetEngines;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetEngines;//rarus bonmak 21.08.2020 16210
	//rarus bonmak 15.04.2020 14456 ++	
	//ИначеЕсли ВидЗапроса = "GetListOfDealers" Тогда	
	//	Возврат Перечисления.Scan_ВидыЗапроса.GetListOfDealers;	
	//ИначеЕсли ВидЗапроса = "GetDealers" Тогда	
	//	Возврат Перечисления.Scan_ВидыЗапроса.GetDealers;
	ИначеЕсли ВидЗапроса = "GetCompany" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetCompany;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetCompany;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfCompany" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfCompany;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfCompany; //rarus bonmak 21.08.2020 16210
	//rarus bonmak 15.04.2020 14456 --
	ИначеЕсли ВидЗапроса = "GetListOfContragents" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfContragents;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfContragents;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetContragents" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetContragents;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetContragents;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfCountries" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfCountries;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfCountries; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfProduct" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfProduct; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfProduct; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetProduct" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetProduct; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetProduct;  //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfCommercialOffers" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfCommercialOffers; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfCommercialOffers; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetProductCommercialOffers" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetProductCommercialOffers; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetProductCommercialOffers;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfOrderToDelivery" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfOrderToDelivery;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfOrderToDelivery;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetOrderToDelivery" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetOrderToDelivery;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetOrderToDelivery; //rarus bonmak 21.08.2020 16210
	// rarus tenkam 09.09.2019 mantis 14841 +++
	//rarus bonmak 24.09.2019 14177 ++
	ИначеЕсли ВидЗапроса = "GetListOfSpecifications" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfSpecifications;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfSpecifications; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetSpecification" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetSpecification;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetSpecification;//rarus bonmak 21.08.2020 16210
	//rarus bonmak 24.09.2019 14177 --
	// rarus tenkam 09.09.2019 mantis 14841 ---	
	ИначеЕсли ВидЗапроса = "GetListOfStatuses" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfStatuses;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfStatuses;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfSOP" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfSOP;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfSOP; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetSOP" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetSOP;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetSOP;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "SetProduct" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.SetProduct; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.SetProduct;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "SetOrderToDelivery" Тогда //rarus bonmak 15.08.2019 14576 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.SetOrderToDelivery; //rarus bonmak 15.08.2019 14576 -- //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.SetOrderToDelivery; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "SetChassis" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.SetChassis; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.SetChassis;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "SetProductPlace" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.SetProductPlace; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.SetProductPlace; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "SendProductActivityEvent" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.SendProductActivityEvent;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.SendProductActivityEvent;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "StoreInfo" Тогда	
		//Возврат Перечисления.Scan_ВидыЗапроса.StoreInfo;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.StoreInfo;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetAdditionalProperty" Тогда //rarus bonmak 04.09.2019 14442 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetAdditionalProperty; //rarus bonmak 04.09.2019 14442 -- //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetAdditionalProperty;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfOptions" Тогда //rarus bonmak 24.09.2019 14177 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfOptions; //rarus bonmak 24.09.2019 14177 --//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfOptions; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfSpecificationType" Тогда //rarus bonmak 24.09.2019 14177 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfSpecificationType; //rarus bonmak 24.09.2019 14177 --//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfSpecificationType;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "SetLocation" Тогда //rarus bonmak 02.12.2019 14375 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.SetLocation; //rarus bonmak 02.12.2019 14375 -- //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.SetLocation;  //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfCompanyType" Тогда //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfCompanyType;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfCompanyType; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfCompanyGroup" Тогда //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfCompanyGroup;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfCompanyGroup; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfDealerType" Тогда //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfDealerType;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfDealerType;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfCooperationType" Тогда //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfCooperationType; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfCooperationType; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "OpenExchangeSession" Тогда //rarus bonmak 09.01.2020 15279 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.OpenExchangeSession;//rarus bonmak 21.08.2020 16210
		//rarus bonmak 09.01.2020 15279 --
		Возврат Справочники.Scan_ВидыЗапроса.OpenExchangeSession;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetTaskOfExecution" Тогда //rarus bonmak 09.01.2020 15279 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetTaskOfExecution; //rarus bonmak 21.08.2020 16210
		//rarus bonmak 09.01.2020 15279 --
		Возврат Справочники.Scan_ВидыЗапроса.GetTaskOfExecution; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "SetTaskOfExecution" Тогда //rarus bonmak 09.01.2020 15279 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.SetTaskOfExecution;//rarus bonmak 21.08.2020 16210
		//rarus bonmak 09.01.2020 15279 --
		Возврат Справочники.Scan_ВидыЗапроса.SetTaskOfExecution;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "CloseExchangeSession" Тогда //rarus bonmak 09.01.2020 15279 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.CloseExchangeSession;//rarus bonmak 21.08.2020 16210
		//rarus bonmak 09.01.2020 15279 --
		Возврат Справочники.Scan_ВидыЗапроса.CloseExchangeSession; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetUpdatesList" Тогда //rarus bonmak 09.01.2020 15279 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetUpdatesList;//rarus bonmak 21.08.2020 16210
		//rarus bonmak 09.01.2020 15279 --
		Возврат Справочники.Scan_ВидыЗапроса.GetUpdatesList;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfSpecificationView" Тогда //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfSpecificationView;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfSpecificationView;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfSpecificationViewType" Тогда //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfSpecificationViewType; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfSpecificationViewType;//rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetSpecificationView" Тогда //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetSpecificationView;//rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetSpecificationView; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetSpecificationVersion" Тогда //rarus bonmak 20.03.2020 14177 ++	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetSpecificationVersion; //rarus bonmak 21.08.2020 16210
		//rarus bonmak 20.03.2020 14177 --
		Возврат Справочники.Scan_ВидыЗапроса.GetSpecificationVersion; //rarus bonmak 21.08.2020 16210
	//rarus ozhnik 15888 14.07.2020 + 
	ИначеЕсли ВидЗапроса = "GetListOfProductTypeSPORT" Тогда 
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfProductTypeSPORT; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfProductTypeSPORT; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetListOfQuotation" Тогда 	
		//Возврат Перечисления.Scan_ВидыЗапроса.GetListOfQuotation; //rarus bonmak 21.08.2020 16210
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfQuotation; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "GetQuotation" Тогда 
		//Возврат Перечисления.Scan_ВидыЗапроса.GetQuotation; //rarus bonmak 21.08.2020 16210	
	//rarus ozhnik 15888 14.07.2020 -
		Возврат Справочники.Scan_ВидыЗапроса.GetQuotation; //rarus bonmak 21.08.2020 16210
	ИначеЕсли ВидЗапроса = "CreateProduct" Тогда //rarus bonmak 18.05.2020 14375 ++ 
		//Возврат Перечисления.Scan_ВидыЗапроса.CreateProduct; //rarus bonmak 21.08.2020 16210  	
	//rarus bonmak 18.05.2020 14375 --
		Возврат Справочники.Scan_ВидыЗапроса.CreateProduct; //rarus bonmak 21.08.2020 16210 
	//rarus tenkam 12.10.2020 mantis 16181 +++
 	ИначеЕсли ВидЗапроса = "CreateSOP" Тогда 
		Возврат Справочники.Scan_ВидыЗапроса.CreateSOP; 
	ИначеЕсли ВидЗапроса = "SetSOP" Тогда 
		Возврат Справочники.Scan_ВидыЗапроса.SetSOP; 
	ИначеЕсли ВидЗапроса = "SetAdditionalProperty" Тогда 
		Возврат Справочники.Scan_ВидыЗапроса.SetAdditionalProperty; 
		//rarus tenkam 12.10.2020 mantis 16181 ---
		//rarus agar 16.10.2020 15696 ++
	ИначеЕсли ВидЗапроса = "setPurchaseOrder" 
		Или   ВидЗапроса = "SetPurchaseOrder"
		Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.SetPurchaseOrder");
	ИначеЕсли ВидЗапроса = "setPurchaseOrderApproval" 
		Или   ВидЗапроса = "SetPurchaseOrderApproval"
		Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.SetPurchaseOrderApproval");
	ИначеЕсли ВидЗапроса = "GetOrderStatus" Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetOrderStatus");
	ИначеЕсли ВидЗапроса = "GetListOfCostCenters" Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetListOfCostCenters");
	ИначеЕсли ВидЗапроса = "GetListContragent" Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetListContragent");
	ИначеЕсли ВидЗапроса = "GetListDogovorov" Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetListDogovorov");
	ИначеЕсли ВидЗапроса = "GetListOfCategories" Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetListOfCategories");
	ИначеЕсли ВидЗапроса = "GetListOfDeliveries" Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetListOfDeliveries");
		//rarus agar 16.10.2020 15696 --
	ИначеЕсли ВидЗапроса = "GetListOfRegions" Тогда //rarus bonmak 07.01.2021 16625 ++ 
		Возврат Справочники.Scan_ВидыЗапроса.GetListOfRegions;
		//rarus bonmak 07.01.2021 16625 --
	//rarus agar 13.03.2021 17373 ++
	ИначеЕсли ВидЗапроса = "getUser" 
		Или   ВидЗапроса = "GetUser"
		Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetUser");
	ИначеЕсли ВидЗапроса = "addUpdateUser" 
		Или   ВидЗапроса = "AddUpdateUser"
		Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.AddUpdateUser");
	ИначеЕсли ВидЗапроса = "checkUserTokenIsOnline" 
		Или   ВидЗапроса = "CheckUserTokenIsOnline"
		Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.CheckUserTokenIsOnline");
	//rarus agar 13.03.2021 17373 --checkUserTokenIsOnline
	//rarus agar 16.08.2021 17205 ++
	ИначеЕсли ВидЗапроса = "GetEPTS" Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetEPTS");
	ИначеЕсли ВидЗапроса = "GetEPTSstatement" Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ВидыЗапроса.GetEPTSstatement");
	//rarus agar 16.08.2021 17205 --
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьИмяПеречисления(ВидЗапроса) Экспорт
	Если ЗначениеЗаполнено(ВидЗапроса) Тогда
		//rarus bonmak 21.08.2020 16210 ++
		//ЗначениеПеречисления = ВидЗапроса;		
		//ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;		
		//ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);		
		//ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		ИмяЗначенияПеречисления = ВидЗапроса.ИмяПредопределенныхДанных;
		//rarus bonmak 21.08.2020 16210 --
	Иначе
		ИмяЗначенияПеречисления = "";
	КонецЕсли;
	Возврат ИмяЗначенияПеречисления;
	
КонецФункции

// rarus tenkam 18.03.2019 mantis 13629 ---

//rarus BProg_Dekin 13.02.2020 mantis 000014560 ++
Процедура ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(Значение, ГруппаОпций, ТипОпции, ЗаказНаЗавод, ДополнительнаяИнформацияПоЗаказамНаЗавод);
	Опция_Ссылка = Справочники.Scan_ОпцииПродуктов.НайтиПоКоду(Значение,, ГруппаОпций);
	Если НЕ ЗначениеЗаполнено(Опция_Ссылка) Тогда
		ОпцияОбъект = Справочники.Scan_ОпцииПродуктов.СоздатьЭлемент();
		ОпцияОбъект.Код 					= Значение;
		ОпцияОбъект.Наименование			= Значение;
		ОпцияОбъект.ИспользуетсяНаРынкеРФ	= Истина;
		ОпцияОбъект.Родитель                = ГруппаОпций;
		ОпцияОбъект.ТипОпции				= ТипОпции;
		ОпцияОбъект.Записать();
		Опция_Ссылка = ОпцияОбъект.Ссылка;
	КонецЕсли;
	//Запись в регистр сведений Scan_КвотыSOrderFFUФакт
	МенеджерЗаписи_КвотыSOrderFFUФакт = РегистрыСведений.Scan_КвотыSOrderFFUФакт.СоздатьМенеджерЗаписи();
	МенеджерЗаписи_КвотыSOrderFFUФакт.ЗаказНаЗавод 	= ЗаказНаЗавод;
	МенеджерЗаписи_КвотыSOrderFFUФакт.ТипОпции		= ТипОпции;
	МенеджерЗаписи_КвотыSOrderFFUФакт.Опция			= Опция_Ссылка;
	МенеджерЗаписи_КвотыSOrderFFUФакт.Записать();
	
	//Запись в регистр сведений Scan_ХарактеристикиЗаказовНаЗавод
	//rarus BProg_Dekin 06.04.2020 mantis 0015937 ++
	Справочники.Scan_ЗаказыНаЗавод.ЗаписьЗначенияРегистраСведения(ЗаказНаЗавод, Опция_Ссылка, ДополнительнаяИнформацияПоЗаказамНаЗавод, ТекущаяДата());
	//МенеджерЗаписи_ХарактеристикиЗаказовНаЗавод = РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи_ХарактеристикиЗаказовНаЗавод.Период			= ТекущаяДата();
	//МенеджерЗаписи_ХарактеристикиЗаказовНаЗавод.Заказ 			= ЗаказНаЗавод;
	//МенеджерЗаписи_ХарактеристикиЗаказовНаЗавод.Реквизит		= ДополнительнаяИнформацияПоЗаказамНаЗавод;
	//МенеджерЗаписи_ХарактеристикиЗаказовНаЗавод.Значение		= Опция_Ссылка;
	//МенеджерЗаписи_ХарактеристикиЗаказовНаЗавод.Пользователь	= ПараметрыСеанса.ТекущийПользователь;
	//МенеджерЗаписи_ХарактеристикиЗаказовНаЗавод.Записать();
	//rarus BProg_Dekin 06.04.2020 mantis 0015937 --
	
				
КонецПроцедуры
//rarus BProg_Dekin 13.02.2020 mantis 000014560 --


// rarus tenkam 11.03.2020 mantis 15797 +++

// УНИФИКАЦИЯ ОБРАБОТКИ ДОП. РЕКВИЗИТОВ

Функция ОбработатьДополнительныеРеквизиты(СписокДопРеквизитов, СоответствиеДопРеквизитов = Неопределено, ПроверкаМетодов = Ложь) Экспорт //rarus bonmak 17468 23.09.2021 добавил параметр ПроверкаМетодов 
	
	Если СоответствиеДопРеквизитов = Неопределено Тогда
		СоответствиеДопРеквизитов = Новый Соответствие;	
	КонецЕсли;
	
	// У объекта нет доп. реквизитов
	Если СписокДопРеквизитов = Неопределено Тогда
		Возврат СоответствиеДопРеквизитов;
	КонецЕсли;
	
	// Для определения тахографа используем два доп. реквизита
	ТипТахографа = Неопределено;
	РасшифровкаТахографа = "";			
			
	Для Каждого ТекСвойство Из СписокДопРеквизитов.СписокЗначенийСвойств Цикл
		//rarus bonmak 17468 23.09.2021 ++
		GUIDДопРеквизита = ТекСвойство.Свойство.GUID;
		//rarus bonmak 17468 23.09.2021 --
		// Если у доп. реквизита не установлен флаг использования, то не обрабатывать   		
		Если НЕ ДопРеквизитИспользуется(GUIDДопРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		//rarus bonmak 17468 23.09.2021 ++
		МенеджерСпрДопРеквизиты = Справочники.Scan_ДополнительныеРеквизиты1БД; 
		НайденныйДопРеквизит = Справочники.Scan_ДополнительныеРеквизиты1БД.НайтиПоРеквизиту("IDExternalSystem", GUIDДопРеквизита);
		ПредставлениеДопРеквизита = "";
		//rarus bonmak 17468 23.09.2021 --
		
		НаименованиеДопРеквизита = ТекСвойство.Свойство.Наименование;
		ЗначениеДопРеквизита = Неопределено;
		//rarus bonmak 17468 23.09.2021 скорректированы условия ++
		// Получим значение доп. реквизита
		//Если НаименованиеДопРеквизита = "ADDate" Тогда
		Если МенеджерСпрДопРеквизиты.ADDate = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "ADDate"; //rarus bonmak 17468 23.09.2021 
		//ИначеЕсли НаименованиеДопРеквизита = "Assembly level" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.AssemblyLevel = НайденныйДопРеквизит Тогда
			// Получим ссылку на перечисление "Scan_КомплектностьПоставкиЗначения" по синониму
			ЗначениеДопРеквизита = Scan_ОбщегоНазначенияТиповые.ВернутьЗначениеПеречисленияПоСинониму("Scan_КомплектностьПоставкиЗначения", СокрЛП(ТекСвойство.Значение.Строка));		
			ПредставлениеДопРеквизита = "Assembly level"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "CDDate" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.CDDate = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "CDDate"; //rarus bonmak 17468 23.09.2021 
		//ИначеЕсли НаименованиеДопРеквизита = "CDDateDeviated" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.CDDateDeviated = НайденныйДопРеквизит Тогда
			// CDD2 устанавливается только при условии, что она меньше допустимой (см. настройку 61008 "Допустимый диапазон даты CDD2")
			ТекДатаCDD2 = ТекСвойство.Значение.Дата;
			ДопустимаяДата = ДобавитьМесяц(ТекущаяДата(), Scan_ПраваИНастройки.Scan_Право("ДопустимыйДиапазонДатыCDD2"));
			Если ТекДатаCDD2 <> Неопределено И ТекДатаCDD2 <= ДопустимаяДата Тогда 
				ЗначениеДопРеквизита = ТекДатаCDD2;
			КонецЕсли;
			ПредставлениеДопРеквизита = "CDDateDeviated"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "DateOut" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.DateOut = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "DateOut"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "DCD" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.DCD = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "DCD"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "DDDate" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.DDDate = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "DDDate"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "DDDate_Confirmed" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.DDDate_Confirmed = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "DDDate_Confirmed"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "DealerID" Тогда	
		//ИначеЕсли НаименованиеДопРеквизита = "DealerID_COW" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.DealerID_COW = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			
			// Поиск компании по реквизиту DealerID_COW для ЗаказчикCOW
			DealerID_COW_Ссылка = Справочники.Scan_Компании.НайтиПоРеквизиту("DealerID_COW", ТекСвойство.Значение.Строка);
			Если НЕ ЗначениеЗаполнено(DealerID_COW_Ссылка) Тогда
				ТекстОшибки = Нстр("ru = 'НЕ найден дилер в справочнике «Компании» по реквизиту «DealerID_COW» со значением «%1»';" +
				"en = 'The dealer was not found in the directory of the «Company»  at the requisite «DealerID_COW» with the value «%1»'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ТекСвойство.Значение.Строка);
				//Scan_ВебСервисы.scЗафиксироватьОшибку(ТекстОшибки, ИмяСобытияЖурналаРегистрации);
			Иначе
				СоответствиеДопРеквизитов.Вставить("DealerID_COW_Ссылка", DealerID_COW_Ссылка);		
			КонецЕсли;
			ПредставлениеДопРеквизита = "DealerID_COW"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "DeliveryAdrCode_Confirmed" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.DeliveryAdrCode_Confirmed = НайденныйДопРеквизит Тогда
			// Поиск/создание кода адреса доставки в справочнике "Scan_КодыАдресовДоставки" по наименованию
			ЗначениеДопРеквизита = РазобратьКодАдресаДоставки(ТекСвойство.Значение.Строка);
			ПредставлениеДопРеквизита = "DeliveryAdrCode_Confirmed"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "DeliveryDate" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.DeliveryDate = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "DeliveryDate"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "EngineNo" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.EngineNo = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "EngineNo"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "FactoryInvoiceDate" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.FactoryInvoiceDate = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "FactoryInvoiceDate"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "FFU_No_Confirmed" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.FFU_No_Confirmed = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "FFU_No_Confirmed"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "FinishDate" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.FinishDate = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "FinishDate"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "OrderType" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.OrderType = НайденныйДопРеквизит Тогда
			// Получение значения перечисления "Scan_ТипыЗаказовНаЗавод" по символу
			ЗначениеДопРеквизита = Справочники.Scan_ЗаказыНаЗавод.ПолучитьТипЗаказаНаЗаводПоСимволу(ТекСвойство.Значение.Строка);
			ПредставлениеДопРеквизита = "OrderType"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "PartPeriod" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.PartPeriod = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Число;
			ПредставлениеДопРеквизита = "PartPeriod"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "PDDate" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.PDDate = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "PDDate"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "PRU" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.PRU = НайденныйДопРеквизит Тогда
			// Поиск места производства по буквенному коду
			ЗначениеДопРеквизита = Справочники.Scan_МестаХранения.НайтиПоРеквизиту("БуквенныйКод",ТекСвойство.Значение.Строка);
			ПредставлениеДопРеквизита = "PRU"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "RetailCustomerName" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.RetailCustomerName = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;			
			// Будем учитывать "Market Change", "MarketChange", "market Change" и т.п.
			ТекЗначениеКлиент = СтрЗаменить(НРег(ЗначениеДопРеквизита)," ", ""); 
			СоответствиеДопРеквизитов.Вставить("MarketChange", ?(ТекЗначениеКлиент = "marketchange", Истина, Ложь));
			ПредставлениеДопРеквизита = "RetailCustomerName"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "S_Ord_No_Confirmed" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.S_Ord_No_Confirmed = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "S_Ord_No_Confirmed"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "SDDate" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.SDDate = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "SDDate"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "StatusID" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.StatusID = НайденныйДопРеквизит Тогда
			// Поиск заводского статуса заказа на завод по числовому реквизиту "СтатусCOW"
			ЗначениеДопРеквизита = Справочники.Scan_ЗаводскиеСтатусыЗаказаНаЗавод.НайтиПоРеквизиту("СтатусCOW",ТекСвойство.Значение.Число);
			ПредставлениеДопРеквизита = "StatusID"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "VIN-код" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.VINКод = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "VIN-код"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Адрес электронной почты" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.АдресЭлектроннойПочты = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Адрес электронной почты"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Вид тахографа" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ВидТахографа = НайденныйДопРеквизит Тогда
			// Получим тип тахографа для создания/обновления тахографа с завода Скании
			ТипТахографа = ТекСвойство.Значение.ТипТахографа;
			ПредставлениеДопРеквизита = "Вид тахографа"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Дата передачи клиенту" Тогда
		//	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьЗадачиСНакладными") Тогда //rarus bonmak 18.05.2020 14375 ++
		//		Продолжить;
		//	КонецЕсли; //rarus bonmak 18.05.2020 14375 --
		//	ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
		//ИначеЕсли НаименованиеДопРеквизита = "Дата продажи дилеру" Тогда
		//	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьЗадачиСНакладными") Тогда //rarus bonmak 18.05.2020 14375 ++
		//		Продолжить;
		//	КонецЕсли; //rarus bonmak 18.05.2020 14375 --
		//	ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
		//ИначеЕсли НаименованиеДопРеквизита = "Дилер заказчик COW" Тогда
	    ИначеЕсли МенеджерСпрДопРеквизиты.ДилерЗаказчикCOW = НайденныйДопРеквизит Тогда
			// Получим GUID для проверки
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дилер.GUID;
			ПредставлениеДопРеквизита = "Дилер заказчик COW"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Заводская гарантия, действительна до" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ЗаводскаяГарантияДействительнаДо = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
			ПредставлениеДопРеквизита = "Заводская гарантия, действительна до"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Код дилера SOWA" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.КодДилераSOWA = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Код дилера SOWA"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Код дилера" Тогда //rarus bonmak 15.04.2020 14456 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.КодДилера = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Код дилера"; //rarus bonmak 17468 23.09.2021
			//rarus bonmak 15.04.2020 14456 --
		//ИначеЕсли НаименованиеДопРеквизита = "Контактный телефон" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.КонтактныйТелефон = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Контактный телефон"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Контрагент" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.Контрагент = НайденныйДопРеквизит Тогда
			// Поиск/создание контрагента
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				ТекВыборка = Справочники.Scan_Контрагенты.Выбрать();
				Если ТекВыборка.Следующий() Тогда
					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеДопРеквизита = ПолучитьСоздатьКонтрагентаИз1БД(ТекСвойство.Значение.Контрагент);
			КонецЕсли;
			ПредставлениеДопРеквизита = "Контрагент"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Контрольные приборы. Серийный №, текущий" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.КонтрольныеПриборыСерийныйТекущий = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("ICCID:", ТекСвойство.Значение.Строка,"");
			ПредставлениеДопРеквизита = "Контрольные приборы. Серийный №, текущий"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Логистический тип продукта" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ЛогистическийТипПродукта = НайденныйДопРеквизит Тогда
			// Поиск/создание/обновление типа
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				ТекВыборка = Справочники.Scan_ТипыПродуктовЛогистика.Выбрать();
				Если ТекВыборка.Следующий() Тогда
					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеДопРеквизита = ПолучитьСоздатьТипИз1БД(ТекСвойство.Значение.ТипПродукта, "Scan_ТипыПродуктовЛогистика");
			КонецЕсли;
			ПредставлениеДопРеквизита = "Логистический тип продукта"; //rarus bonmak 17468 23.09.2021
			//ИначеЕсли НаименованиеДопРеквизита = "Маркетинговый тип продукта" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.МаркетинговыйТипПродукта = НайденныйДопРеквизит Тогда
			// Поиск/создание/обновление типа
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				ТекВыборка = Справочники.Scan_МаркетинговыеТипыПродуктов.Выбрать();
				Если ТекВыборка.Следующий() Тогда
					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеДопРеквизита = ПолучитьСоздатьТипИз1БД(ТекСвойство.Значение.ТипПродукта, "Scan_МаркетинговыеТипыПродуктов");
			КонецЕсли;
			ПредставлениеДопРеквизита = "Маркетинговый тип продукта"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Менеджер т/с" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.МенеджерТС = НайденныйДопРеквизит Тогда
			// Поиск/создание cотрудника по наименоавнию
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				ТекВыборка = Справочники.Scan_Сотрудники.Выбрать();
				Если ТекВыборка.Следующий() Тогда
					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеДопРеквизита = РазобратьПродавцаЗаказчика(ТекСвойство.Значение.Строка);
			КонецЕсли;
			ПредставлениеДопРеквизита = "Менеджер т/с"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Модель" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.Модель = НайденныйДопРеквизит Тогда
			// Поиск/создание/обновление модели продукта
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				ТекВыборка = Справочники.Scan_МоделиПродуктов.Выбрать();
				Если ТекВыборка.Следующий() Тогда
					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеДопРеквизита = ПолучитьСоздатьМодельИз1БД(ТекСвойство.Значение.Модель);
			КонецЕсли;
			ПредставлениеДопРеквизита = "Модель"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Наименование" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.Наименование = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Наименование"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Наименование полное" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.НаименованиеПолное = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Наименование полное"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Наименование сокращенное" Тогда //rarus bonmak 15.04.2020 14456 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.НаименованиеСокращенное = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Наименование сокращенное"; //rarus bonmak 17468 23.09.2021
			//rarus bonmak 15.04.2020 14456 --
		//ИначеЕсли НаименованиеДопРеквизита = "Основной договор" Тогда
			// Пока не обрабатываем
			//<СписокЗначенийСвойств>
			//	<Значение>
			//		<Договор>
			//			<DeletionMark>false</DeletionMark>
			//			<Код>119470</Код>
			//			<Наименование>33-DA-2018/BRN-ALT</Наименование>
			//			<GUIDИсточника>951f5370-836a-11e8-80fd-00155d010b48</GUIDИсточника>
			//			<GUID>1db61607-fedc-11e8-8124-00155d81d72f</GUID>
			//			<ВидДоговора>ДилерскоеСоглашение</ВидДоговора>
			//		</Договор>
			//	</Значение>
			//	<Свойство>
			//		<Наименование>Основной договор</Наименование>
			//		<GUID>5175df21-a71b-11e6-80ed-001dd8b71c6f</GUID>
			//		<Важность>Базовые</Важность>
			//	</Свойство>
			//</СписокЗначенийСвойств>			
		//ИначеЕсли НаименованиеДопРеквизита = "Почтовый адрес" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ПочтовыйАдрес = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Почтовый адрес"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Себестоимость логистическая" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.СебестоимостьЛогистическая = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Число;
			ПредставлениеДопРеквизита = "Себестоимость логистическая"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "СОП" Тогда
		//	// Поиск/создание/обновление СОП
		//	ЗначениеДопРеквизита = ПолучитьСоздатьСОПИз1БД(ТекСвойство.Значение.СОП);
		//ИначеЕсли НаименованиеДопРеквизита = "Статус" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.Статус = НайденныйДопРеквизит Тогда
			// Если из 1БД возвращается статус с наименованием "Закрыт", то значение = Истина, иначе Ложь
			Если ТекСвойство.Значение.Статус <> Неопределено Тогда
				ЗначениеДопРеквизита = (ТекСвойство.Значение.Статус.Наименование = "Закрыт");
			КонецЕсли;
			// Возможно 1БД передает строкой?
			Если ТекСвойство.Значение.Строка <> Неопределено Тогда
				ЗначениеДопРеквизита = (ТекСвойство.Значение.Строка = "Закрыт");	
			КонецЕсли;
			ПредставлениеДопРеквизита = "Статус"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Статус предоплаты" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.СтатусПредоплаты = НайденныйДопРеквизит Тогда
			// Получение ммылки на перечисление Scan_СтатусыОплатПоСОП
			ЗначениеДопРеквизита = ПолучитьСтатусОплатыПоСОП(ТекСвойство.Значение.Строка);
			ПредставлениеДопРеквизита = "Статус предоплаты"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Сумма продажи дилеру" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.СуммаПродажиДилеру = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Число;
			ПредставлениеДопРеквизита = "Сумма продажи дилеру"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Тахограф" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.Тахограф = НайденныйДопРеквизит Тогда
			// Расшифровка нужна для создания/обновления тахографа
			РасшифровкаТахографа = ТекСвойство.Значение.Строка;	
			ПредставлениеДопРеквизита = "Тахограф"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Тип ГИБДД" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ТипГИБДД = НайденныйДопРеквизит Тогда
			// Поиск/создание/обновление типа
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				ТекВыборка = Справочники.Scan_ТипыГИБДД.Выбрать();
				Если ТекВыборка.Следующий() Тогда
					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеДопРеквизита = ПолучитьСоздатьТипИз1БД(ТекСвойство.Значение.ТипПродукта, "Scan_ТипыГИБДД");
			КонецЕсли;
			ПредставлениеДопРеквизита = "Тип ГИБДД"; //rarus bonmak 17468 23.09.2021
			//ИначеЕсли НаименованиеДопРеквизита = "Тип кабины" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ТипКабины = НайденныйДопРеквизит Тогда
			// Поиск/создание/обновление типа кабины
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				ТекВыборка = Справочники.Scan_ТипыКабинИзделий.Выбрать();
				Если ТекВыборка.Следующий() Тогда
					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеДопРеквизита = РазобратьТипКабины(ТекСвойство.Значение.ТипКабины);
			КонецЕсли;
			ПредставлениеДопРеквизита = "Тип кабины"; //rarus bonmak 17468 23.09.2021
			//ИначеЕсли НаименованиеДопРеквизита = "Тип кузова" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ТипКузова = НайденныйДопРеквизит Тогда
			// Поиск/создание/обновление типа
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				ТекВыборка = Справочники.Scan_ТипыКузова.Выбрать();
				Если ТекВыборка.Следующий() Тогда
					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеДопРеквизита = ПолучитьСоздатьТипИз1БД(ТекСвойство.Значение.ТипПродукта, "Scan_ТипыКузова");
			КонецЕсли;
			ПредставлениеДопРеквизита = "Тип кузова"; //rarus bonmak 17468 23.09.2021
			//ИначеЕсли НаименованиеДопРеквизита = "Тип продукта" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ТипПродукта = НайденныйДопРеквизит Тогда
			// Поиск/создание/обновление типа
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Scan_Изделия.ТипПродукта КАК ТипПродукта
				|ИЗ
				|	Справочник.Scan_Изделия КАК Scan_Изделия
				|ГДЕ
				|	Scan_Изделия.IDExternalSystemProduct <> """"";
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					ЗначениеДопРеквизита = ВыборкаДетальныеЗаписи.ТипПродукта;
				КонецЕсли;                  
			Иначе
				ЗначениеДопРеквизита = ПолучитьСоздатьТипИз1БД(ТекСвойство.Значение.ТипПродукта, "Scan_ТипыПродуктов");
			КонецЕсли;
			ПредставлениеДопРеквизита = "Тип продукта"; //rarus bonmak 17468 23.09.2021
			//ИначеЕсли НаименованиеДопРеквизита = "Юридический адрес" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ЮридическийАдрес = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Юридический адрес"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Статус компании" Тогда //rarus bonmak 15.04.2020 14456 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.СтатусКомпании = НайденныйДопРеквизит Тогда
			//ЗначениеДопРеквизита = ТекСвойство.Значение.Статус;
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Продолжить;
			Иначе
				ИмяМетода = "GetListOfStatuses";
				СообщениеОбОшибке = "";
				ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
				фXDTOОбъект = ТекСвойство.Значение.Статус;
				ЗначениеДопРеквизита = РазобратьСтатусКомпании(фXDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
				//rarus bonmak 15.04.2020 14456 --
			КонецЕсли;
			ПредставлениеДопРеквизита = "Статус компании"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Иностранец" Тогда //rarus bonmak 15.04.2020 14456 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.Иностранец = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Булево;
			ПредставлениеДопРеквизита = "Иностранец"; //rarus bonmak 17468 23.09.2021
			//rarus bonmak 15.04.2020 14456 --
		//ИначеЕсли НаименованиеДопРеквизита = "Тип дилера" Тогда //rarus bonmak 15.04.2020 14456 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.ТипДилера = НайденныйДопРеквизит Тогда
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Продолжить;
			Иначе
				ИмяМетода = "GetListOfDealerType";
				СообщениеОбОшибке = "";
				ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
				фXDTOОбъект = ТекСвойство.Значение.ТипДилера;
				ЗначениеДопРеквизита = РазобратьТипДилера(фXDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
				//rarus bonmak 15.04.2020 14456 --
			КонецЕсли;
			ПредставлениеДопРеквизита = "Тип дилера"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Форма компании" Тогда //rarus bonmak 15.04.2020 14456 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.ФормаКомпании = НайденныйДопРеквизит Тогда
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Продолжить;
			Иначе	
				ИмяМетода = "GetListOfCompanyType";
				СообщениеОбОшибке = "";
				ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
				фXDTOОбъект = ТекСвойство.Значение.ФормаКомпании;
				ЗначениеДопРеквизита = РазобратьФормуКомпании(фXDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
				//rarus bonmak 15.04.2020 14456 --
			КонецЕсли;
			ПредставлениеДопРеквизита = "Форма компании"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Группа компаний" Тогда //rarus bonmak 15.04.2020 14456 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.ГруппаКомпаний = НайденныйДопРеквизит Тогда
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Продолжить;
			Иначе	
				ИмяМетода = "GetListOfCompanyGroup";
				СообщениеОбОшибке = "";
				ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
				фXDTOОбъект = ТекСвойство.Значение.ГруппаКомпаний;
				ЗначениеДопРеквизита = РазобратьГруппуКомпании(фXDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
				//rarus bonmak 15.04.2020 14456 --
			КонецЕсли;
			ПредставлениеДопРеквизита = "Группа компаний"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Наименование английское" Тогда //rarus bonmak 15.04.2020 14456 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.НаименованиеАнглийское = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			//rarus bonmak 15.04.2020 14456 --
			ПредставлениеДопРеквизита = "Наименование английское"; //rarus bonmak 17468 23.09.2021
		//rarus BProg_Dekin 06.05.2020 mantis 0014916 ++	
		//ИначеЕсли НаименованиеДопРеквизита = "Топливо" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.Топливо = НайденныйДопРеквизит Тогда
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Продолжить;
			Иначе
				ЗначениеДопРеквизита = ПолучитьТипТоплива(СокрЛП(ТекСвойство.Значение.Строка));	//rarus vikhle 25.08.2020 mt 14916
			КонецЕсли;
			ПредставлениеДопРеквизита = "Топливо"; //rarus bonmak 17468 23.09.2021
		//rarus BProg_Dekin 06.05.2020 mantis 0014916 --
		//rarus BProg_Dekin 27.05.2020 mantis 0015893 ++ Получение доп. реквизита СегментРынка
		//ИначеЕсли НаименованиеДопРеквизита = "СегментРынка" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.СегментРынка = НайденныйДопРеквизит Тогда
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Продолжить;
			Иначе
				ЗначениеДопРеквизита = ПолучитьСоздатьСегментРынка(ТекСвойство.Значение.ТипПродукта, ИмяСобытияЖурналаРегистрации);
			КонецЕсли;
			ПредставлениеДопРеквизита = "СегментРынка"; //rarus bonmak 17468 23.09.2021
		//rarus BProg_Dekin 27.05.2020 mantis 0015893 --
		//rarus ozhnik 15888 29.06.2020 + 
		//ИначеЕсли НаименованиеДопРеквизита = "Product id" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ProductId = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Product id"; //rarus bonmak 17468 23.09.2021
		//rarus ozhnik 15888 29.06.2020 -
		//ИначеЕсли НаименованиеДопРеквизита = "Транспортное средство с пробегом" Тогда //rarus bonmak 14375 07.08.2020 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.БУ = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Булево;
			ПредставлениеДопРеквизита = "Транспортное средство с пробегом"; //rarus bonmak 17468 23.09.2021
		//rarus bonmak 14375 07.08.2020 --
		//rarus agar 14.08.2020 16138 ++
		//ИначеЕсли НаименованиеДопРеквизита = "Уровень токсичности" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.УровеньТоксичности = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Уровень токсичности"; //rarus bonmak 17468 23.09.2021
		//ИначеЕсли НаименованиеДопРеквизита = "Цвет кабины ПТС" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ЦветКабиныПТС = НайденныйДопРеквизит Тогда
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Продолжить;
			Иначе
				ИмяМетода = "GetChassis";
				ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
				
				ЗначениеДопРеквизита = ПолучитьСоздатьЦветКабиныПТС(ТекСвойство.Значение.ЦветКабиныПТС, ИмяСобытияЖурналаРегистрации);
				//rarus agar 14.08.2020 16138 --
			КонецЕсли;
			ПредставлениеДопРеквизита = "Цвет кабины ПТС"; //rarus bonmak 17468 23.09.2021
		//rarus vikhle 02.11.2020 mt 16181 +++
		//ИначеЕсли НаименованиеДопРеквизита = "Quotation number" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.QuotationNumber = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Quotation number"; //rarus bonmak 17468 23.09.2021
		//rarus vikhle 02.11.2020 mt 16181 ---	
		//ИначеЕсли НаименованиеДопРеквизита = "DLV" Тогда //rarus bonmak 04.01.2021 16719 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.DLV = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "DLV"; //rarus bonmak 17468 23.09.2021
			//rarus bonmak 04.01.2021 16719 --
		//rarus vikhle 05.04.2021 mt 17484	
		//ИначеЕсли НаименованиеДопРеквизита = "Дилер активен" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ДилерАктивен = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Булево;
			ПредставлениеДопРеквизита = "Дилер активен"; //rarus bonmak 17468 23.09.2021
		//rarus vikhle 05.04.2021 mt 17484 ---			
		//rarus vikhle 24.05.2021 mt 17543 +++
		//ИначеЕсли НаименованиеДопРеквизита = "Каптивный дилер" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.КаптивныйДилер = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Булево;
			ПредставлениеДопРеквизита = "Каптивный дилер"; //rarus bonmak 17468 23.09.2021
		//rarus vikhle 24.05.2021 mt 17543 ---
		// rarus agar 13.08.2021 17205 ++
		//ИначеЕсли НаименованиеДопРеквизита = "ЭПТС" Тогда
		ИначеЕсли МенеджерСпрДопРеквизиты.ЭПТС = НайденныйДопРеквизит Тогда
			Если ПроверкаМетодов Тогда //rarus bonmak 17468 23.09.2021 добавил условие и отработку истина
				Продолжить;
			Иначе
				ИмяМетода = "GetEPTS";
				СообщениеОбОшибке = "";
				ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
				фXDTOОбъект = ТекСвойство.Значение.ЭПТС;
				ЗначениеДопРеквизита = Разобрать_ЭПТС(фXDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Ложь, ИмяМетода);
			КонецЕсли;
			ПредставлениеДопРеквизита = "ЭПТС"; //rarus bonmak 17468 23.09.2021
		// rarus agar 13.08.2021 17205 --
		// rarus agar 17.12.2021 18240 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.НаименованиеТСОпределяемоеЕгоНазначением = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Наименование ТС, определяемое его назначением";
		ИначеЕсли МенеджерСпрДопРеквизиты.МаркаПоЭПТС = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Марка по ЭПТС";
		ИначеЕсли МенеджерСпрДопРеквизиты.КоммерческоеНаименование = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Коммерческое наименование";
		ИначеЕсли МенеджерСпрДопРеквизиты.ИдентификационныйНомер = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Идентификационный номер";
		ИначеЕсли МенеджерСпрДопРеквизиты.НомерШассиРамы = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Номер шасси (рамы)";
		// rarus agar 17.12.2021 18240 --
		// rarus agar 17.01.2022 18240 ++
		ИначеЕсли МенеджерСпрДопРеквизиты.ИноеНаименованиеТСПоЭПТС = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Иное наименование ТС по ЭПТС";
		// rarus agar 17.01.2022 18240 --
		// rarus vikhle 17.01.2022 m 18755 +++
		ИначеЕсли МенеджерСпрДопРеквизиты.STDUO = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "STDUO";	
		ИначеЕсли МенеджерСпрДопРеквизиты.НомерСтандартнойСпецификации = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
			ПредставлениеДопРеквизита = "Номер стандартной спецификации"; 	
		// rarus vikhle 17.01.2022 m 18755 ---
		// rarus vikhle 01.03.2022 m 18879 +++
		ИначеЕсли МенеджерСпрДопРеквизиты.РегиональныйМенеджерОКП = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение;
			ПредставлениеДопРеквизита = "Региональный менеджер ОКП";
		ИначеЕсли МенеджерСпрДопРеквизиты.РегиональныйМенеджерОП = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение;
			ПредставлениеДопРеквизита = "Региональный менеджер ОП";
		ИначеЕсли МенеджерСпрДопРеквизиты.РегиональныйМенеджерОПАвтобусов = НайденныйДопРеквизит Тогда
			ЗначениеДопРеквизита = ТекСвойство.Значение;
			ПредставлениеДопРеквизита = "Региональный менеджер ОП автобусов";	
		// rarus vikhle 01.03.2022 m 18879 ---
		Иначе
			// Нет обработки такого реквизита или реквизит не правильно определен
			//rarus bonmak 17468 23.09.2021 ++
			СообщениеОбОшибке = "Не удалось обработать доп. реквизит " + НаименованиеДопРеквизита + " (" + GUIDДопРеквизита + ")";
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB("Обработка доп. реквизитов", НаименованиеДопРеквизита, GUIDДопРеквизита, СообщениеОбОшибке);	
			Продолжить;
			//rarus bonmak 17468 23.09.2021 --
		КонецЕсли;
		//rarus bonmak 17468 23.09.2021 --
		// Установим значение доп. реквизита по наименованию-ключу
		// Если элемент с таким наименование существует, то его значение заменяется, иначе добавляется новый
		//rarus bonmak 17468 23.09.2021 ++
		//СоответствиеДопРеквизитов.Вставить(НаименованиеДопРеквизита, ЗначениеДопРеквизита);
		СоответствиеДопРеквизитов.Вставить(ПредставлениеДопРеквизита, ЗначениеДопРеквизита);
		//rarus bonmak 17468 23.09.2021 --
	КонецЦикла;
	
	// Обработаем тахограф
	Если ТипТахографа <> Неопределено Тогда
		// Поиск/создание/обновление тахографа
		ТахографСЗаводаСкания = РазобратьВидТахографа(ТипТахографа, РасшифровкаТахографа);
		СоответствиеДопРеквизитов.Вставить("Вид тахографа", ТахографСЗаводаСкания);	
	КонецЕсли;
	
	Возврат СоответствиеДопРеквизитов;

КонецФункции

Функция ПолучитьТипТоплива(НаименованиеТоплива) //rarus BProg_Dekin 06.05.2020 mantis 0014916 +- Разбор доп реквизита "топливо"
	
	ПустаяСсылка = Справочники.Scan_ТипыТопливаДвигателейПродуктов.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(НаименованиеТоплива) Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	//rarus vikhle 25.08.2020 mt 14916 +++	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_ТипыТопливаДвигателейПродуктовСписокНаименованийТиповТопливаВ1ДБ.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Scan_ТипыТопливаДвигателейПродуктов.СписокНаименованийТиповТопливаВ1ДБ КАК Scan_ТипыТопливаДвигателейПродуктовСписокНаименованийТиповТопливаВ1ДБ
	               |ГДЕ
	               |	Scan_ТипыТопливаДвигателейПродуктовСписокНаименованийТиповТопливаВ1ДБ.Наименование = &ТипТоплива";
	Запрос.УстановитьПараметр("ТипТоплива",НаименованиеТоплива);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;		
	Иначе
		Возврат НаименованиеТоплива;
	КонецЕсли;	
	
		
	//НайденныйТипТоплива = Справочники.Scan_ТипыТопливаДвигателейПродуктов.НайтиПоНаименованию(НаименованиеТоплива);
	//
	//Если ЗначениеЗаполнено(НайденныйТипТоплива) Тогда
	//	Возврат НайденныйТипТоплива;
	//КонецЕсли;
	
	//Код = "";
	//Если НаименованиеТоплива = "Дизель" Тогда
	//	Код = "D";
	//ИначеЕсли НаименованиеТоплива = "Этанол" Тогда
	//	Код = "Е";
	//ИначеЕсли НаименованиеТоплива = "Компримированный природный газ" Тогда
	//	Код = "CNG";
	//ИначеЕсли НаименованиеТоплива = "Сжатый природный газ" Тогда
	//	Код = "LNG";
	//Иначе
	//	//Тип топлива не найден и создавать новый не надо
	//	Возврат ПустаяСсылка;		
	//КонецЕсли;
	
	//НовыйТипТоплива = Справочники.Scan_ТипыТопливаДвигателейПродуктов.СоздатьЭлемент();
	//НовыйТипТоплива.Код 			= Код;
	//НовыйТипТоплива.Наименование	= НаименованиеТоплива;
	//НовыйТипТоплива.Записать();
		
	//Возврат НовыйТипТоплива.Ссылка;
	//rarus vikhle 25.08.2020 mt 14916 ---
КонецФункции

Функция ПолучитьСоздатьСегментРынка(ОбъектXDTO, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 27.05.2020 mantis 0015893 +- Разбор доп реквизита "СегментРынка"
		
	ЭлементСсылка = Справочники.Scan_СегментыРынкаПродуктов.НайтиПоРеквизиту("IDExternalSystem", ОбъектXDTO.GUID);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		СегментРынкаОбъект = ЭлементСсылка.ПолучитьОбъект();
	Иначе
		СегментРынкаОбъект = Справочники.Scan_СегментыРынкаПродуктов.СоздатьЭлемент();
	КонецЕсли;
	
	СегментРынкаОбъект.Наименование 			= ОбъектXDTO.Наименование;
	СегментРынкаОбъект.НаименованиеАнглийское	= ОбъектXDTO.АнглийскоеНаименование;
	СегментРынкаОбъект.IDExternalSystem 		= ОбъектXDTO.GUID;

	ОбъектМодифицирован = Scan_ОбщегоНазначенияСервер.ОбъектМодифицирован(СегментРынкаОбъект);
	
	Если ОбъектМодифицирован Тогда
		СегментРынкаОбъект.ДатаОбновления = ТекущаяДата();
		Попытка
			Если НЕ СегментРынкаОбъект.ПроверитьЗаполнение() Тогда
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
			КонецЕсли;
			
			СегментРынкаОбъект.Записать();
			
			ЭлементСсылка = СегментРынкаОбъект.Ссылка;
		Исключение
			СообщениеОбОшибке = "Не удалось записать сегмент рынка продукта с гуидом ("+СегментРынкаОбъект.GUID+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СегментРынкаОбъект.GUID, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

//rarus agar 14.08.2020 16138 ++
Функция ПолучитьСоздатьЦветКабиныПТС(ОбъектXDTO, ИмяСобытияЖурналаРегистрации)
	
	ЭлементСсылка = Справочники.Scan_ЦветаКабиныПТС.НайтиПоРеквизиту("IDExternalSystem", ОбъектXDTO.GUID);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ЦветКабиныПТСОбъект = ЭлементСсылка.ПолучитьОбъект();
	Иначе
		ЦветКабиныПТСОбъект = Справочники.Scan_ЦветаКабиныПТС.СоздатьЭлемент();
	КонецЕсли;
	
	ЦветКабиныПТСОбъект.Наименование     = ОбъектXDTO.Наименование;
	ЦветКабиныПТСОбъект.IDExternalSystem = ОбъектXDTO.GUID;

	ОбъектМодифицирован = Scan_ОбщегоНазначенияСервер.ОбъектМодифицирован(ЦветКабиныПТСОбъект);
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если НЕ ЦветКабиныПТСОбъект.ПроверитьЗаполнение() Тогда
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(СообщенияПользователю));
			КонецЕсли;
			
			ЦветКабиныПТСОбъект.Записать();
			
			ЭлементСсылка = ЦветКабиныПТСОбъект.Ссылка;
		Исключение
			СообщениеОбОшибке = "Не удалось записать цвет кабины ПТС с гуидом ("+ЦветКабиныПТСОбъект.IDExternalSystem+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, ЦветКабиныПТСОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции
//rarus agar 14.08.2020 16138 --

Функция ПолучитьСоздатьКонтрагентаИз1БД(Контрагент1БД)
	ЗначениеЭлемента = Справочники.Scan_Контрагенты.НайтиПоРеквизиту("IDExternalSystem", Контрагент1БД.GUID);
	// Если по GUID контрагента не нашли, то создадим нового контрагента в группе "Дилеры"
	Если ЗначениеЭлемента = Справочники.Scan_Контрагенты.ПустаяСсылка() Тогда 
		ИмяМетодаНовое = "GetContragents";
		Отказ = Ложь;
		СообщениеОбОшибкеНовое = "";
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
		СтруктураПараметров.GUID = Контрагент1БД.GUID;
		
		ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
		Если НЕ Отказ Тогда
			ГруппаКонтрагента = Справочники.Scan_Контрагенты.Дилеры;
			ЗначениеЭлемента = РазборОтветаСправочникКонтрагенты(ТекЭлементОтвет, Отказ, СообщениеОбОшибкеНовое, ИмяНовогоСобытияЖурналаРегистрации, ИмяМетодаНовое,ГруппаКонтрагента);	
			Если Отказ Тогда
				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, Контрагент1БД.Наименование, Контрагент1БД.GUID, СообщениеОбОшибкеНовое);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЭлемента;
Конецфункции

Функция ПолучитьСоздатьТипИз1БД(ТипПродукта1БД, ИмяСправочника)
	СообщениеОбОшибкеНовое = "";
	Если ТипПродукта1БД = Неопределено Тогда
		ЗначениеЭлемента = Справочники[ИмяСправочника].ПустаяСсылка();
	Иначе
		ЗначениеЭлемента = РазобратьТип(ТипПродукта1БД, СообщениеОбОшибкеНовое, "Веб-сервис.GetProductSubType","GetProductSubType",ИмяСправочника);	
	КонецЕсли;
	Возврат ЗначениеЭлемента;
КонецФункции

Функция ПолучитьСоздатьМодельИз1БД(Модель1БД, ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetProductModel")
	СообщениеОбОшибкеНовое = "";
	Если Модель1БД = Неопределено Тогда
		ЗначениеЭлемента = Справочники.Scan_МоделиПродуктов.ПустаяСсылка();
	Иначе
		ЗначениеЭлемента = РазобратьМодельПродукта(Модель1БД, СообщениеОбОшибкеНовое, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	Возврат ЗначениеЭлемента;
КонецФункции

// rarus tenkam 10.12.2021 OFMS устранение ошибок Sonar Qube (АПК) +++
//Функция ПолучитьСоздатьСОПИз1БД(СОП1БД)
//	СообщениеОбОшибкеНовое = "";
//	ЗначениеЭлемента = Неопределено;
//	Если СОП1БД = Неопределено Тогда
//		ЗначениеЭлемента = Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка();
//	Иначе
//		ИмяМетодаНовое = "GetSOP";
//		Отказ = Ложь;
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
//		СтруктураПараметров.GUID = СОП1БД.GUID;
//		
//		ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
//		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
//		Если НЕ Отказ Тогда
//			ЗначениеЭлемента = РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекЭлементОтвет, Отказ, СообщениеОбОшибкеНовое, ИмяНовогоСобытияЖурналаРегистрации, ИмяМетодаНовое);	
//			Если Отказ Тогда
//				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, СОП1БД.Наименование, СОП1БД.GUID, СообщениеОбОшибкеНовое);
//			КонецЕсли;
//		КонецЕсли;	
//	КонецЕсли;
//	Возврат ЗначениеЭлемента;
//КонецФункции
// rarus tenkam 10.12.2021 OFMS устранение ошибок Sonar Qube (АПК) ---

//Функция ОбновитьСОПИз1БД(СсылкаСОП)
//	Если ЗначениеЗаполнено(СсылкаСОП.IDExternalSystem) Тогда
//		Отказ = Ложь;	
//		СообщениеОбОшибке = "";
//		ИмяМетодаНовое = "GetSOP";
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
//		СтруктураПараметров.GUID = СсылкаСОП.IDExternalSystem;
//		ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
//		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
//		СсылкаСОП = РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекЭлементОтвет, Отказ, СообщениеОбОшибке, ИмяНовогоСобытияЖурналаРегистрации, ИмяМетодаНовое);
//		Если Отказ Тогда
//			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, СсылкаСОП.IDExternalSystem, СсылкаСОП.IDExternalSystem, СообщениеОбОшибке);
//		КонецЕсли;
//	КонецЕсли;
//	Возврат СсылкаСОП;
//КонецФункции

Функция ПолучитьСтатусОплатыПоСОП(НаименованиеСтатусаПредоплаты) Экспорт
	Если НаименованиеСтатусаПредоплаты = "ВнесенаПолностью" Тогда
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.Оплачено;
	ИначеЕсли НаименованиеСтатусаПредоплаты = "ВнесенаЧастично" Тогда
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.ОплаченоЧастично;
	ИначеЕсли НаименованиеСтатусаПредоплаты = "НеТребуется" Тогда //rarus bonmak 26.02.2021 17290 ++
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.НеТребуется;
		//rarus bonmak 26.02.2021 17290 --
	ИначеЕсли НаименованиеСтатусаПредоплаты = "НеВнесена" Тогда
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.НеОплачено;
	// rarus tenkam 05.10.2020 mantis 16181 +++
	ИначеЕсли НаименованиеСтатусаПредоплаты = "ПредоплатаНеТребуется" Тогда
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.ПредоплатаНеТребуется;	
	ИначеЕсли НаименованиеСтатусаПредоплаты = "ПредоплатаОтсутствует" Тогда
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.ПредоплатаОтсутствует;	
	ИначеЕсли НаименованиеСтатусаПредоплаты = "ПредоплатаПолученаНеСоответствуетГрафику" Тогда //rarus bonmak 17234 03.03.2021 исправил заглавную букву С
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.ПредоплатаПолученаНесоответствуетГрафику;	
	ИначеЕсли НаименованиеСтатусаПредоплаты = "ПредоплатаПолученаСоответствуетГрафику" Тогда
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.ПредоплатаПолученаСоответствуетГрафику;	
	ИначеЕсли НаименованиеСтатусаПредоплаты = "ПредоплатаВнесенаПолностью" Тогда
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.ПредоплатаВнесенаПолностью;	
	ИначеЕсли НаименованиеСтатусаПредоплаты = "ОплаченоПолностью" Тогда
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.ОплаченоПолностью;	
	// rarus tenkam 05.10.2020 mantis 16181 ---
	Иначе 
		ЗначениеЭлемента = Перечисления.Scan_СтатусыОплатПоСОП.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЗначениеЭлемента;
КонецФункции

//Функция ПолучитьСоздатьЗаказНаЗаводИз1БД(ПродуктGUID = "", XDTOОбъектПродукт = Неопределено, ЗаказНаЗаводGUID = "")
//	ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка();
//	Отказ = Ложь;
//	СообщениеОбОшибке = "";
//	Если ЗаказНаЗаводGUID <> "" Тогда	// Если есть GUID заказа на завод, то этого достаточно
//		
//		ИмяМетодаНовое = "GetOrderToDelivery";
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
//		СтруктураПараметров["GUID"] = ЗаказНаЗаводGUID;					
//		ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
//		
//		ТекЭлементЗапрос = Scan_ВебСервисы.СформироватьСообщениеОбмена(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации); 
//		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации, ТекЭлементЗапрос);
//		
//		ЗаказНаЗаводСсылка = РазборОтветаСправочникЗаказыНаЗавод(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяНовогоСобытияЖурналаРегистрации,ИмяМетодаНовое, XDTOОбъектПродукт);
//		Если Отказ Тогда
//			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ЗаказНаЗаводGUID, ЗаказНаЗаводGUID, СообщениеОбОшибке);
//		КонецЕсли;
//		
//	Иначе	// Получим заказ на завод по GUID продукта		
//		ИмяМетодаНовое = "GetListOfOrderToDelivery";
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое);
//		СтруктураПараметров.ПродуктGUID =  ПродуктGUID;
//		ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
//		
//		ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
//		Если НЕ Отказ Тогда
//			// Получим список заказов на завод из 1БД (обработаем только первый заказ)
//			ОбъектСписокЗаказов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекЭлементОтвет, "Answer.Result.СписокБазовыхОбъектов.ЗаказыНаПродукт", Отказ, ИмяНовогоСобытияЖурналаРегистрации, ИмяМетодаНовое); 
//			Если НЕ Отказ И ОбъектСписокЗаказов.Количество() <> 0 Тогда 
//				ИмяМетодаНовое = "GetOrderToDelivery";
//				СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое, Ложь);
//				СтруктураПараметров["GUID"] = ОбъектСписокЗаказов[0].GUID;
//				ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
//				
//				ТекЭлементЗапрос = Scan_ВебСервисы.СформироватьСообщениеОбмена(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации); 
//				ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметров, Отказ, ИмяНовогоСобытияЖурналаРегистрации, ТекЭлементЗапрос);
//				
//				ЗаказНаЗаводСсылка = РазборОтветаСправочникЗаказыНаЗавод(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяНовогоСобытияЖурналаРегистрации,ИмяМетодаНовое, XDTOОбъектПродукт);
//				Если Отказ Тогда
//					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, ОбъектСписокЗаказов[0].Наименование, ОбъектСписокЗаказов[0].GUID, СообщениеОбОшибке);
//				КонецЕсли;
//			КонецЕсли;
//		Иначе
//			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, , СтруктураПараметров.ПродуктGUID, "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации");	
//		КонецЕсли;
//	КонецЕсли;
//	Возврат ЗаказНаЗаводСсылка;
//		
//КонецФункции

Функция АктуализироватьДатуОбновления(СсылкаНаОбъект) Экспорт
	ТекОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	ТекОбъект.ДатаОбновления = ТекущаяДата();
	Попытка
		ТекОбъект.Записать();
		Возврат Истина;
	Исключение
		// Не удалось обновить дату обновления
		Возврат Ложь;
	КонецПопытки;		
КонецФункции

//rarus vikhle 25.08.2020 mt 14916 +++
Функция ОтправитьПисьмоОТипеТоплива (НомерПродукта,НаименованиеДопРеквизитаТопливо)
	//Отправка письма о необходимости скорректировать наименование справочника «Типы топлива двигателей продуктов»
	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда 
		ДополнительныйТекстПисьма = "Для продукта " +  НомерПродукта + " не удалось заполнить реквизит «Тип топлива»." 
									+ " Наименование " + "«" + НаименованиеДопРеквизитаТопливо + "»" 
									+ " в справочнике «Типы топлива двигателей продуктов» не определено.";
		ПараметрыОтправки 		= Новый Структура("ДополнительныйТекст", ДополнительныйТекстПисьма);
		РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонПисьмаОНеобходимостиУведомлятьОбИзмененииНаименованияТипаТоплива",,ПараметрыОтправки);
	КонецЕсли;
КонецФункции	
//rarus vikhle 25.08.2020 mt 14916 ---

Функция СоздатьЗаказНаЗаводНовая(XDTOОбъект,СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт = Неопределено)
	        	                                                                 	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetOrderToDelivery");
	
	НовыйОбъект = Справочники.Scan_ЗаказыНаЗавод.СоздатьЭлемент();
	
	// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл		
		Если ТекРеквизит.ИмяРекв = "Продукт" Тогда
			Продолжить;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеДопРеквизитов = ПолучитьСоответствиеДополнительныеХарактеристики(НовыйОбъект);
	
	СоответствиеКлючевыеДатыЗаказаНаЗавод = ПолучитьСоответствиеКлючевыеДаты(НовыйОбъект); 
	
	FFU_No_Confirmed 	= "";
	S_Ord_No_Confirmed 	= "";
	ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.ПустаяСсылка();
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	Если XDTOОбъектПродукт <> Неопределено Тогда
		СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъектПродукт.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
	КонецЕсли;
	
	// КЛЮЧЕВЫЕ ДАТЫ
	
	Если СоответствиеДопРеквизитов1БД["ADDate"] <> Неопределено Тогда	// ADD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ADD")] = СоответствиеДопРеквизитов1БД["ADDate"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["CDDate"] <> Неопределено Тогда	// CDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD")] = СоответствиеДопРеквизитов1БД["CDDate"];
	КонецЕсли;		
	Если СоответствиеДопРеквизитов1БД["CDDateDeviated"] <> Неопределено Тогда	//CDD2
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2")] = СоответствиеДопРеквизитов1БД["CDDateDeviated"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["DCD"] <> Неопределено Тогда	//DCD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DCD")] = СоответствиеДопРеквизитов1БД["DCD"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["DDDate"] <> Неопределено ИЛИ СоответствиеДопРеквизитов1БД["DDDate"] <> Неопределено Тогда	// DDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DDD")] = ?(СоответствиеДопРеквизитов1БД["DDDate"] = Неопределено, СоответствиеДопРеквизитов1БД["DDDate_Confirmed"], СоответствиеДопРеквизитов1БД["DDDate"]);	
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["FactoryInvoiceDate"] <> Неопределено Тогда	// Дата инвойса
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаИнвойса")] = СоответствиеДопРеквизитов1БД["FactoryInvoiceDate"];	
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["FinishDate"] <> Неопределено ИЛИ СоответствиеДопРеквизитов1БД["DateOut"] <> Неопределено Тогда	// FinishDate
		FinishDateЗначение = ?(СоответствиеДопРеквизитов1БД["FinishDate"] = Неопределено, СоответствиеДопРеквизитов1БД["DateOut"], СоответствиеДопРеквизитов1БД["FinishDate"]);
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate")] = FinishDateЗначение;
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["PDDate"] <> Неопределено Тогда	// PDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.PDD")] = СоответствиеДопРеквизитов1БД["PDDate"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["SDDate"] <> Неопределено Тогда	//SDDate
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SDDate")] = СоответствиеДопРеквизитов1БД["SDDate"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Дата передачи клиенту"] <> Неопределено Тогда	// Дата продажи клиенту
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту")] = СоответствиеДопРеквизитов1БД["Дата передачи клиенту"];
	КонецЕсли;     
	Если СоответствиеДопРеквизитов1БД["Дата продажи дилеру"] <> Неопределено Тогда	// Дата продажи изделия
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")] = СоответствиеДопРеквизитов1БД["Дата продажи дилеру"];		
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда // Дата СОП (из СОП)	
		//rarus bonmak 09.08.2021 16834 ++
		//СсылкаНаСОП = СоответствиеДопРеквизитов1БД["СОП"];
		//СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП")] = СсылкаНаСОП.ДатаНачала;
		//rarus bonmak 09.08.2021 16834 --
	КонецЕсли;
		
	// ХАРАКТЕРИСТИКИ
	
	Если СоответствиеДопРеквизитов1БД["Assembly level"] <> Неопределено Тогда	// Комплектность поставки
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.КомплектностьПоставки] = СоответствиеДопРеквизитов1БД["Assembly level"];
	КонецЕсли;			
	Если СоответствиеДопРеквизитов1БД["OrderType"] <> Неопределено Тогда	// Тип заказа на завод
		ТекТипЗаказаНаЗавод = СоответствиеДопРеквизитов1БД["OrderType"];
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод] = ТекТипЗаказаНаЗавод;			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["PartPeriod"] <> Неопределено Тогда	// Part period
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.PartPeriod] = СоответствиеДопРеквизитов1БД["PartPeriod"]; 	
	КонецЕсли; 	
	Если СоответствиеДопРеквизитов1БД["RetailCustomerName"] <> Неопределено Тогда	// Клиент, Market change 
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент] = СоответствиеДопРеквизитов1БД["RetailCustomerName"];
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.MarketChange] = СоответствиеДопРеквизитов1БД["MarketChange"];
	КонецЕсли;			
		
	// РЕКВИЗИТЫ
	
	Если СоответствиеДопРеквизитов1БД["DealerID_COW_Ссылка"] <> Неопределено И СоответствиеДопРеквизитов1БД["Дилер заказчик COW"] <> Неопределено Тогда	// Заказчик COW
		ДилерЗаказчик_COW = СоответствиеДопРеквизитов1БД["Дилер заказчик COW"]; // GUID дилера из 1БД 
		DealerID_COW_Ссылка = СоответствиеДопРеквизитов1БД["DealerID_COW_Ссылка"];
		
		Если DealerID_COW_Ссылка.IDExternalSystem <> ДилерЗаказчик_COW Тогда
			ТекстОшибки = Нстр("ru = 'IDExternalSystem у дилера не совпадает со значением из 1ДБ';" +
			"en = 'Dealer IDExternalSystem does not match 1dB value'");
			Scan_ВебСервисы.scЗафиксироватьОшибку(ТекстОшибки, ИмяСобытияЖурналаРегистрации);
		Иначе			
			НовыйОбъект.ЗаказчикCOW = DealerID_COW_Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"] <> Неопределено Тогда	// Код адреса доставки
		НовыйОбъект.КодАдресаДоставки = СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["PRU"] <> Неопределено Тогда		// Место производства
		НовыйОбъект.МестоПроизводства = СоответствиеДопРеквизитов1БД["PRU"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["StatusID"] <> Неопределено Тогда		// Заводской статус
		НовыйОбъект.ЗаводскойСтатусЗаказа = СоответствиеДопРеквизитов1БД["StatusID"];
	КонецЕсли;					
	Если СоответствиеДопРеквизитов1БД["Менеджер т/с"] <> Неопределено Тогда		// Продавец заказчика	
		НовыйОбъект.ПродавецЗаказчика = СоответствиеДопРеквизитов1БД["Менеджер т/с"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда		//Заказчик (из СОП)
		СсылкаНаСОП = СоответствиеДопРеквизитов1БД["СОП"];
		
		Если ЗначениеЗаполнено(СсылкаНаСОП) Тогда
			НовыйОбъект.Заказчик = СсылкаНаСОП.Владелец;
		КонецЕсли;
	КонецЕсли;	
		
	// ПРОЧЕЕ 	
	
	// Получение FFU и S-order для дальнейшей обработки
	Если СоответствиеДопРеквизитов1БД["FFU_No_Confirmed"] <> Неопределено Тогда
		FFU_No_Confirmed = СоответствиеДопРеквизитов1БД["FFU_No_Confirmed"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["S_Ord_No_Confirmed"] <> Неопределено Тогда
		S_Ord_No_Confirmed = СоответствиеДопРеквизитов1БД["S_Ord_No_Confirmed"];	
	КонецЕсли;
	
	//rarus BProg_Dekin 21.05.2020 mantis 0015999 ++ Статус автоматически установится в изделии при записи заказа на завод
	//// Установка локального статуса заказа в зависимости от типа заказа на завод
	//Если ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder 
	//	ИЛИ ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.FirmOrderNormal
	//	ИЛИ ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.FirmOrderRefill 
	//	ИЛИ ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.FirmOrderUrgent Тогда
	//	
	//	НовыйОбъект.СтатусЗаказаЛокальный = Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.NEW;
	//ИначеЕсли НовыйОбъект.ЗаводскойСтатусЗаказа.СтатусCOW = 45 
	//	И ТекТипЗаказаНаЗавод <> Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder 
	//	И ТекТипЗаказаНаЗавод <> Перечисления.Scan_ТипыЗаказовНаЗавод.ПустаяСсылка() Тогда
	//	
	//	НовыйОбъект.СтатусЗаказаЛокальный = Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.DELETED;
	//КонецЕсли;
	//rarus BProg_Dekin 21.05.2020 mantis 0015999 --
	
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
		
		// Запишем все доп. характеристики в регистр "История изменений"
		ЗаписатьДополнительныеХарактеристики(НовыйОбъект.Ссылка, СоответствиеДопРеквизитов);
		
		// СDDX и CDDY рассчитываются при записи заказа на завод - заполним их
		СDDX = Справочники.Scan_ЗаказыНаЗавод.РассчитатьCDDX(СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD")],
													  СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2")],
													  НовыйОбъект.НапоминаниеДилерамОтправлено);
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDDX")] = СDDX;
		
		Если ЗначениеЗаполнено(FFU_No_Confirmed) Тогда
			FFUОпции = Справочники.Scan_ОпцииПродуктов.FFUОпции;
			ТипОпции = Справочники.Scan_ТипыОпций.FFUОпции;
			ДополнительнаяИнформацияПоЗаказамНаЗавод = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.FFUНомер;	
			ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(FFU_No_Confirmed, FFUОпции, ТипОпции, НовыйОбъект.Ссылка, ДополнительнаяИнформацияПоЗаказамНаЗавод);  
		КонецЕсли;
		Если ЗначениеЗаполнено(S_Ord_No_Confirmed) Тогда
			SOrderОпции = Справочники.Scan_ОпцииПродуктов.SOrderОпции;	
			ТипОпции 	= Справочники.Scan_ТипыОпций.SOrderОпции;
			ДополнительнаяИнформацияПоЗаказамНаЗавод = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.SOrderНомер;
			ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(S_Ord_No_Confirmed, SOrderОпции, ТипОпции, НовыйОбъект.Ссылка, ДополнительнаяИнформацияПоЗаказамНаЗавод);  
		КонецЕсли;
		
		// Запишем все ключевые даты в регистр
		ЗаписатьКлючевыеДаты(НовыйОбъект.Ссылка, СоответствиеКлючевыеДатыЗаказаНаЗавод);		
		
	Исключение
		СообщениеОбОшибке = "Не удалось создать заказ на завод  (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;

КонецФункции

Функция ОбновитьЗаказНаЗаводНовая(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, XDTOОбъектПродукт = Неопределено)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetOrderToDelivery");
	
	СоответствиеРеквизитовДляЗаписи = Новый Соответствие;
	
	// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "Продукт" Тогда
			Продолжить;				
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;

		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;	
	
	СоответствиеДопРеквизитов = ПолучитьСоответствиеДополнительныеХарактеристики(ЭлементСсылка);
	
	СоответствиеКлючевыеДатыЗаказаНаЗавод = ПолучитьСоответствиеКлючевыеДаты(ЭлементСсылка);
	
	ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.ПустаяСсылка();
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	Если XDTOОбъектПродукт <> Неопределено Тогда
		СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъектПродукт.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
	КонецЕсли;
	
	// КЛЮЧЕВЫЕ ДАТЫ
	
	Если СоответствиеДопРеквизитов1БД["ADDate"] <> Неопределено Тогда	// ADD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ADD")] = СоответствиеДопРеквизитов1БД["ADDate"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["CDDate"] <> Неопределено Тогда	// CDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD")] = СоответствиеДопРеквизитов1БД["CDDate"];
	КонецЕсли;		
	Если СоответствиеДопРеквизитов1БД["CDDateDeviated"] <> Неопределено Тогда	//CDD2
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2")] = СоответствиеДопРеквизитов1БД["CDDateDeviated"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["DCD"] <> Неопределено Тогда	//DCD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DCD")] = СоответствиеДопРеквизитов1БД["DCD"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["DDDate"] <> Неопределено ИЛИ СоответствиеДопРеквизитов1БД["DDDate"] <> Неопределено Тогда	// DDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DDD")] = ?(СоответствиеДопРеквизитов1БД["DDDate"] = Неопределено, СоответствиеДопРеквизитов1БД["DDDate_Confirmed"], СоответствиеДопРеквизитов1БД["DDDate"]);	
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["FactoryInvoiceDate"] <> Неопределено Тогда	// Дата инвойса
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаИнвойса")] = СоответствиеДопРеквизитов1БД["FactoryInvoiceDate"];	
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["FinishDate"] <> Неопределено ИЛИ СоответствиеДопРеквизитов1БД["DateOut"] <> Неопределено Тогда	// FinishDate
		FinishDateЗначение = ?(СоответствиеДопРеквизитов1БД["FinishDate"] = Неопределено, СоответствиеДопРеквизитов1БД["DateOut"], СоответствиеДопРеквизитов1БД["FinishDate"]);
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate")] = FinishDateЗначение;
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["PDDate"] <> Неопределено Тогда	// PDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.PDD")] = СоответствиеДопРеквизитов1БД["PDDate"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["SDDate"] <> Неопределено Тогда	//SDDate
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SDDate")] = СоответствиеДопРеквизитов1БД["SDDate"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Дата передачи клиенту"] <> Неопределено Тогда	// Дата продажи клиенту
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту")] = СоответствиеДопРеквизитов1БД["Дата передачи клиенту"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Дата продажи дилеру"] <> Неопределено Тогда	// Дата продажи изделия
		// rarus tenkam 14.05.2020 mantis 16084 +++ 		
		ДатаПродажиИзделияСтарая = СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")];
		
		ТекИзделие = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(ЭлементСсылка);
		Если ЗначениеЗаполнено(ТекИзделие) И НЕ ТекИзделие.БУ Тогда
			Если ДатаПродажиИзделияСтарая = Неопределено ИЛИ ДатаПродажиИзделияСтарая = Дата(1,1,1) Тогда
				СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")] = СоответствиеДопРеквизитов1БД["Дата продажи дилеру"];		
			КонецЕсли;
		КонецЕсли;
		//СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")] = СоответствиеДопРеквизитов1БД["Дата продажи дилеру"];			
		// rarus tenkam 14.05.2020 mantis 16084 ---
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда // Дата СОП (из СОП)	
		//rarus bonmak 09.08.2021 16834 ++
		//СсылкаНаСОП = СоответствиеДопРеквизитов1БД["СОП"];
		//СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП")] = СсылкаНаСОП.ДатаНачала;
		//rarus bonmak 09.08.2021 16834 --
	КонецЕсли;
	
	// ХАРАКТЕРИСТИКИ
	
	Если СоответствиеДопРеквизитов1БД["Assembly level"] <> Неопределено Тогда	// Комплектность поставки
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.КомплектностьПоставки] = СоответствиеДопРеквизитов1БД["Assembly level"];
	КонецЕсли;			
	Если СоответствиеДопРеквизитов1БД["OrderType"] <> Неопределено Тогда	// Тип заказа на завод
		ТекТипЗаказаНаЗавод = СоответствиеДопРеквизитов1БД["OrderType"];
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод] = ТекТипЗаказаНаЗавод;			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["PartPeriod"] <> Неопределено Тогда	// Part period
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.PartPeriod] = СоответствиеДопРеквизитов1БД["PartPeriod"]; 	
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["RetailCustomerName"] <> Неопределено Тогда	// Клиент, Market change 
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент] = СоответствиеДопРеквизитов1БД["RetailCustomerName"];
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.MarketChange] = СоответствиеДопРеквизитов1БД["MarketChange"];
	КонецЕсли;			
	
	// РЕКВИЗИТЫ
	
	Если СоответствиеДопРеквизитов1БД["DealerID_COW_Ссылка"] <> Неопределено И СоответствиеДопРеквизитов1БД["Дилер заказчик COW"] <> Неопределено Тогда	// Заказчик COW
		ДилерЗаказчик_COW = СоответствиеДопРеквизитов1БД["Дилер заказчик COW"]; // GUID дилера из 1БД 
		DealerID_COW_Ссылка = СоответствиеДопРеквизитов1БД["DealerID_COW_Ссылка"];
		
		Если DealerID_COW_Ссылка.IDExternalSystem <> ДилерЗаказчик_COW Тогда
			ТекстОшибки = Нстр("ru = 'IDExternalSystem у дилера не совпадает со значением из 1ДБ';" +
			"en = 'Dealer IDExternalSystem does not match 1dB value'");
			Scan_ВебСервисы.scЗафиксироватьОшибку(ТекстОшибки, ИмяСобытияЖурналаРегистрации);
		ИначеЕсли ЭлементСсылка.ЗаказчикCOW <> DealerID_COW_Ссылка Тогда			
			СоответствиеРеквизитовДляЗаписи.Вставить("ЗаказчикCOW", DealerID_COW_Ссылка);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"] <> Неопределено Тогда	// Код адреса доставки
		Если ЭлементСсылка.КодАдресаДоставки <> СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("КодАдресаДоставки", СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"]);
		КонецЕсли;
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["PRU"] <> Неопределено Тогда		// Место производства
		Если ЭлементСсылка.МестоПроизводства <> СоответствиеДопРеквизитов1БД["PRU"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("МестоПроизводства", СоответствиеДопРеквизитов1БД["PRU"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["StatusID"] <> Неопределено Тогда		// Заводской статус
		Если ЭлементСсылка.ЗаводскойСтатусЗаказа <> СоответствиеДопРеквизитов1БД["StatusID"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ЗаводскойСтатусЗаказа", СоответствиеДопРеквизитов1БД["StatusID"]);
		КонецЕсли;
	КонецЕсли;					
	Если СоответствиеДопРеквизитов1БД["Менеджер т/с"] <> Неопределено Тогда		// Продавец заказчика	
		Если ЭлементСсылка.ПродавецЗаказчика <> СоответствиеДопРеквизитов1БД["Менеджер т/с"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ПродавецЗаказчика", СоответствиеДопРеквизитов1БД["Менеджер т/с"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда		//Заказчик (из СОП)
		СсылкаНаСОП = СоответствиеДопРеквизитов1БД["СОП"];
		
		Если ЗначениеЗаполнено(СсылкаНаСОП) И ЭлементСсылка.Заказчик <> СсылкаНаСОП.Владелец Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("Заказчик", СсылкаНаСОП.Владелец);
		КонецЕсли;		
	КонецЕсли;	
		
	// ПРОЧЕЕ 	
	
	// Получение FFU и S-order для дальнейшей обработки
	Если СоответствиеДопРеквизитов1БД["FFU_No_Confirmed"] <> Неопределено Тогда
		FFUОпции = Справочники.Scan_ОпцииПродуктов.FFUОпции;
		ТипОпции = Справочники.Scan_ТипыОпций.FFUОпции;
		ДополнительнаяИнформацияПоЗаказамНаЗавод = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.FFUНомер;
		ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(СоответствиеДопРеквизитов1БД["FFU_No_Confirmed"], FFUОпции, ТипОпции, ЭлементСсылка, ДополнительнаяИнформацияПоЗаказамНаЗавод);
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["S_Ord_No_Confirmed"] <> Неопределено Тогда
		SOrderОпции = Справочники.Scan_ОпцииПродуктов.SOrderОпции;	
		ТипОпции 	= Справочники.Scan_ТипыОпций.SOrderОпции;
		ДополнительнаяИнформацияПоЗаказамНаЗавод = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.SOrderНомер;
		ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(СоответствиеДопРеквизитов1БД["S_Ord_No_Confirmed"], SOrderОпции, ТипОпции, ЭлементСсылка, ДополнительнаяИнформацияПоЗаказамНаЗавод)
	КонецЕсли;
	
	//rarus BProg_Dekin 21.05.2020 mantis 0015999 ++ Статус автоматически установится в изделии при записи заказа на завод
	//// Установка локального статуса заказа в зависимости от типа заказа на завод
	//Если (ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder 
	//	ИЛИ ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.FirmOrderNormal
	//	ИЛИ ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.FirmOrderRefill 
	//	ИЛИ ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.FirmOrderUrgent) 
	//	И НЕ ЗначениеЗаполнено(ЭлементСсылка.СтатусЗаказаЛокальный) Тогда
	//	
	//	СоответствиеРеквизитовДляЗаписи.Вставить("СтатусЗаказаЛокальный", Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.NEW);
	//ИначеЕсли ЭлементСсылка.ЗаводскойСтатусЗаказа.СтатусCOW = 45 
	//	И ТекТипЗаказаНаЗавод <> Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder 
	//	И ТекТипЗаказаНаЗавод <> Перечисления.Scan_ТипыЗаказовНаЗавод.ПустаяСсылка() 
	//	И ЭлементСсылка.СтатусЗаказаЛокальный <> Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.DELETED Тогда
	//	
	//	СоответствиеРеквизитовДляЗаписи.Вставить("СтатусЗаказаЛокальный", Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.DELETED);
	//КонецЕсли;	
	//rarus BProg_Dekin 21.05.2020 mantis 0015999 --
	
	// ЗАПИШЕМ СНАЧАЛА ДАННЫЕ В РЕГИСТРЫ
	НужноОбновлять = Ложь;
	БылиИзменения = Ложь;
	
	ЗаписатьДополнительныеХарактеристики(ЭлементСсылка, СоответствиеДопРеквизитов);
	Если БылиИзменения Тогда НужноОбновлять = Истина; КонецЕсли;
	
	// СDDX рассчитываются при записи заказа на завод - заполним их
	СDDX = Справочники.Scan_ЗаказыНаЗавод.РассчитатьCDDX(СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD")],
			СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2")],
			ЭлементСсылка.НапоминаниеДилерамОтправлено);
	Если ЗначениеЗаполнено(СDDX) И СDDX <> СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDDX")] Тогда
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDDX")] = СDDX;
	КонецЕсли;
	
	// Запишем все ключевый даты в регистр
	ЗаписатьКлючевыеДаты(ЭлементСсылка, СоответствиеКлючевыеДатыЗаказаНаЗавод, БылиИзменения);		
	Если БылиИзменения Тогда НужноОбновлять = Истина; КонецЕсли;			
	
	// ЗАПИШЕМ ИЗМЕНЕНИЯ РЕКВИЗИТОВ (или Даты обновления, если были изменения в регистрах)
	Если НужноОбновлять ИЛИ СоответствиеРеквизитовДляЗаписи.Количество() <> 0 Тогда	
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		
		Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписи Цикл
			ТекОбъект[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата();
			
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			
			// Возможно нужно создать поступление на склад (появилась Finish date или Место производства)
			ТекИзделие = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(ТекОбъект.Ссылка);
			Если ЗначениеЗаполнено(ТекИзделие) Тогда
				FinishDate = СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate")];
				Если ЗначениеЗаполнено(FinishDate) Тогда
					Если НЕ Справочники.Scan_ЗаказыНаЗавод.ПоступлениеУжеЕсть(ТекИзделие, FinishDate) Тогда
						Документы.Scan_ДвижениеИзделий.СформироватьПоступлениеНаСклад(ТекИзделие, FinishDate);
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;
			
		Исключение
			СообщениеОбОшибке = "Не удалось записать заказ на завод ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);		
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;			
		
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

#Область Удалить
//rarus bonmak 09.08.2021 16834 ++
//удалить в слудеющем этапе
//Функция СоздатьИзделиеНовая(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС = Истина, XDTOОбъектПродукт = Неопределено, СтруктураРеквизитовПродукт = Неопределено)	// rarus tenkam 11.06.2019 mantis 13865 + (аргумент XDTOОбъектПродукт, СтруктураРеквизитовПродукт)
//	
//	МассивРеквизитовСправочника = ?(ЭтоТС, ПолучитьМассивРеквизитов("GetChassis"), ПолучитьМассивРеквизитов("GetEngines"));
//	
//	НовыйОбъект = Справочники.Scan_Изделия.СоздатьЭлемент();
//	
//	СоответствиеКлючевыеДатыИзделия = ПолучитьСоответствиеКлючевыеДаты(НовыйОбъект); 
//	СоответствиеКлючевыеДатыЗаказаНаЗавод = Неопределено;
//	
//	СсылкаНаСОП = Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка();
//	
//	Если XDTOОбъектПродукт <> Неопределено Тогда
//		// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД (ПРОДУКТ)
//		
//		НовыйОбъект.IDExternalSystemProduct = XDTOОбъектПродукт.GUID;		
//		МассивРеквизитовСправочникаПродукт = ПолучитьМассивРеквизитов("GetProduct"); 	
//		
//		Для Каждого ТекРеквизит Из МассивРеквизитовСправочникаПродукт Цикл
//			Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
//				Если СтруктураРеквизитовПродукт[ТекРеквизит.ИмяРекв] = Неопределено Тогда
//					ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.ПустаяСсылка();
//				Иначе
//					ЗначениеРеквизита = РазобратьМаркуПродукта(СтруктураРеквизитовПродукт[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
//				КонецЕсли;
//			ИначеЕсли ТекРеквизит.ИмяРекв = "ТипПродукта" Тогда
//				Если СтруктураРеквизитовПродукт[ТекРеквизит.ИмяРекв] = Неопределено Тогда
//					ЗначениеРеквизита = Справочники.Scan_ТипыПродуктов.ПустаяСсылка();
//				Иначе
//					ЗначениеРеквизита = РазобратьТип(СтруктураРеквизитовПродукт[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, "Веб-сервис.GetProductSubType","GetProductSubType","Scan_ТипыПродуктов");	
//				КонецЕсли;
//			Иначе
//				Продолжить;
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//				НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//			КонецЕсли;
//		КонецЦикла;
//		
//		// Получим "Заказ на завод"
//		ЗаказНаЗаводСсылка = ПолучитьСоздатьЗаказНаЗаводИз1БД(XDTOОбъектПродукт.GUID, XDTOОбъектПродукт);
//		
//		НовыйОбъект.ЗаказНаЗавод = ЗаказНаЗаводСсылка;
//		СоответствиеКлючевыеДатыЗаказаНаЗавод = ПолучитьСоответствиеКлючевыеДаты(НовыйОбъект.ЗаказНаЗавод);
//		
//		Если ЗначениеЗаполнено(НовыйОбъект.ЗаказНаЗавод) Тогда
//			Если ЗначениеЗаполнено(НовыйОбъект.ЗаказНаЗавод.МестоПроизводства) Тогда
//				Если НовыйОбъект.ЗаказНаЗавод.МестоПроизводства <> НовыйОбъект.МестоПроизводства Тогда
//					НовыйОбъект.МестоПроизводства = НовыйОбъект.ЗаказНаЗавод.МестоПроизводства;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;		
//	КонецЕсли; 	
//		
//	Если XDTOОбъект <> Неопределено Тогда 
//		// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД (ИЗДЕЛИЕ)
//		
//		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
//			Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
//				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
//					ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.ПустаяСсылка();
//				Иначе
//					ЗначениеРеквизита = РазобратьМаркуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
//				КонецЕсли;			
//			Иначе
//				ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//			КонецЕсли;			
//			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//				НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли; 
//	
//	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
//	
//	// Заполним соответствие с доп. реквизитами
//	СоответствиеДопРеквизитов1БД = Неопределено;
//	Если XDTOОбъект <> Неопределено Тогда
//		СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
//	КонецЕсли;
//	Если XDTOОбъектПродукт <> Неопределено Тогда
//		СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъектПродукт.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
//	КонецЕсли; 
//		
//	//// КЛЮЧЕВЫЕ ДАТЫ ЗАКАЗА НА ЗАВОД
//	//
//	//Если СоответствиеДопРеквизитов1БД["Дата продажи дилеру"] <> Неопределено И СоответствиеКлючевыеДатыЗаказНаЗавод <> Неопределено Тогда	// Дата продажи изделия
//	//	СоответствиеКлючевыеДатыЗаказНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")] = СоответствиеДопРеквизитов1БД["Дата продажи дилеру"];
//	//КонецЕсли;		
//	//Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено И СоответствиеКлючевыеДатыЗаказНаЗавод <> Неопределено  Тогда		// Дата СОП
//	//	СсылкаНаСОП = СоответствиеДопРеквизитов1БД["СОП"];
//	//	СоответствиеКлючевыеДатыЗаказНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП")] = СсылкаНаСОП.ДатаНачала;					
//	//КонецЕсли;
//	
//	// КЛЮЧЕВЫЕ ДАТЫ ИЗДЕЛИЯ
//	
//	Если СоответствиеДопРеквизитов1БД["DeliveryDate"] <> Неопределено Тогда		// SoW 
//		СоответствиеКлючевыеДатыИзделия[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SoW")] = СоответствиеДопРеквизитов1БД["DeliveryDate"];
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Заводская гарантия, действительна до"] <> Неопределено Тогда		// WED
//		СоответствиеКлючевыеДатыИзделия[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.WED")] = СоответствиеДопРеквизитов1БД["Заводская гарантия, действительна до"];	
//	КонецЕсли;
//	
//	// РЕКВИЗИТЫ
//	
//	Если СоответствиеДопРеквизитов1БД["Вид тахографа"] <> Неопределено Тогда	// Тахограф с завода Скания
//		НовыйОбъект.ТахографСЗаводаСкания = СоответствиеДопРеквизитов1БД["Вид тахографа"];			
//	КонецЕсли;	
//	Если СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"] <> Неопределено Тогда	// Номер ЭРА ГЛОНАСС
//		НовыйОбъект.НомерЭРАГЛОНАСС = СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"]; 
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Логистический тип продукта"] <> Неопределено Тогда // Тип продукта логистический
//		НовыйОбъект.ТипПродуктаЛогистический = СоответствиеДопРеквизитов1БД["Логистический тип продукта"];
//	КонецЕсли;	
//	Если СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"] <> Неопределено Тогда	// Типы маркетинговые
//		НовыйОбъект.ТипыМаркетинговые = СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"];			
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Модель"] <> Неопределено Тогда	// Модель продукта
//		НовыйОбъект.МодельПродукта = СоответствиеДопРеквизитов1БД["Модель"];
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Себестоимость логистическая"] <> Неопределено Тогда	// Себестоимость логистическая
//		НовыйОбъект.СебестоимостьЛогистическая = СоответствиеДопРеквизитов1БД["Себестоимость логистическая"];			
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда	// СОП
//		СОППродукта = СоответствиеДопРеквизитов1БД["СОП"];
//		НовыйОбъект.СОП = СОППродукта;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Спецификация"] <> Неопределено Тогда	// Спецификация продукта
//		НовыйОбъект.СпецификацияПродукта = СоответствиеДопРеквизитов1БД["Спецификация"];			
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"] <> Неопределено Тогда	// Стоимость продажи
//		НовыйОбъект.СтоимостьПродажи = СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"];			
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Тип ГИБДД"] <> Неопределено Тогда	// Тип ГИБДД
//		НовыйОбъект.ТипГИБДД = СоответствиеДопРеквизитов1БД["Тип ГИБДД"];
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Тип кабины"] <> Неопределено Тогда	// Тип кабины
//		НовыйОбъект.ТипКабины = СоответствиеДопРеквизитов1БД["Тип кабины"];
//	КонецЕсли;	
//	Если СоответствиеДопРеквизитов1БД["Тип кузова"] <> Неопределено Тогда	// Тип кузова
//		НовыйОбъект.ТипКузова = СоответствиеДопРеквизитов1БД["Тип кузова"];
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Тип продукта"] <> Неопределено Тогда		// Тип продукта
//		НовыйОбъект.ТипПродукта = СоответствиеДопРеквизитов1БД["Тип продукта"];
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["EngineNo"] <> Неопределено Тогда	// Номер двигателя ТС
//		НовыйОбъект.НомерДвигателяТС = СоответствиеДопРеквизитов1БД["EngineNo"];			
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["VIN-код"] <> Неопределено Тогда	// VIN, VIN2
//		НовыйОбъект.VIN = СоответствиеДопРеквизитов1БД["VIN-код"];
//		НовыйОбъект.VIN2 = НовыйОбъект.VIN;
//	КонецЕсли;
//	//rarus BProg_Dekin 06.05.2020 mantis 0014916 ++ заполнение доп. реквизита "Топливо"
//	Если СоответствиеДопРеквизитов1БД["Топливо"] <> Неопределено Тогда	// Топливо
//		//rarus vikhle 25.08.2020 mt 14916 +++
//		Если ТипЗнч(СоответствиеДопРеквизитов1БД["Топливо"]) = Тип("СправочникСсылка.Scan_ТипыТопливаДвигателейПродуктов") Тогда
//			НовыйОбъект.ТипТопливаДвигателя = СоответствиеДопРеквизитов1БД["Топливо"];
//		ИначеЕсли ТипЗнч(СоответствиеДопРеквизитов1БД["Топливо"]) = Тип("Строка") Тогда
//			НовыйОбъект.ТипТопливаДвигателя = Справочники.Scan_ТипыТопливаДвигателейПродуктов.ПустаяСсылка();
//			ОтправитьПисьмоОТипеТоплива(НовыйОбъект.НомерИзделия,СоответствиеДопРеквизитов1БД["Топливо"]);
//		КонецЕсли;
//		//rarus vikhle 25.08.2020 mt 14916 ---
//	КонецЕсли;
//	//rarus BProg_Dekin 06.05.2020 mantis 0014916 --
//	//rarus BProg_Dekin 27.05.2020 mantis 0015893 ++ заполнение доп. реквизита "СегментРынка"
//	Если СоответствиеДопРеквизитов1БД["СегментРынка"] <> Неопределено Тогда	// Топливо
//		НовыйОбъект.СегментРынкаПродуктов = СоответствиеДопРеквизитов1БД["СегментРынка"];
//	КонецЕсли;
//	//rarus BProg_Dekin 27.05.2020 mantis 0015893 --
//	
//	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке +	
//	Если СоответствиеДопРеквизитов1БД["Product id"] <> Неопределено Тогда	
//		НовыйОбъект.IDПродуктаКП = СоответствиеДопРеквизитов1БД["Product id"];
//	КонецЕсли;
//	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке -
//	
//	//rarus bonmak 14375 07.08.2020 ++
//	Если СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"] <> Неопределено Тогда 
//		НовыйОбъект.БУ = СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"];
//	КонецЕсли;
//	//rarus bonmak 14375 07.08.2020 --
//	
//	//rarus vikhle 02.11.2020 mt 16181 +++
//	Если СоответствиеДопРеквизитов1БД["Quotation number"] <> Неопределено Тогда 
//		НовыйОбъект.НомерКП = СоответствиеДопРеквизитов1БД["Quotation number"];
//	КонецЕсли;
//	//rarus vikhle 02.11.2020 mt 16181 ---
//	
//	//rarus agar 14.08.2020 16138 ++
//	Если СоответствиеДопРеквизитов1БД["Уровень токсичности"] <> Неопределено Тогда 
//		НовыйОбъект.ЭкологическийКласс = СоответствиеДопРеквизитов1БД["Уровень токсичности"];
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Цвет кабины ПТС"] <> Неопределено Тогда 
//		НовыйОбъект.ЦветКабиныПТС = СоответствиеДопРеквизитов1БД["Цвет кабины ПТС"];
//	КонецЕсли;
//	//rarus agar 14.08.2020 16138 --
//	
//	//rarus ozhnik  07.07.2020 + 
//	
//	//rarus ozhnik  07.07.2020 + 
//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//	
//	СформированноеНаименование = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(НовыйОбъект);
//	Если СформированноеНаименование <> "" Тогда
//		НовыйОбъект.Наименование = СформированноеНаименование;
//	КонецЕсли;  	
//	
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;
//		
//		НовыйОбъект.Записать();
//		
//		// Запишем все ключевые даты в регистр (ИЗДЕЛИЯ)
//		ЗаписатьКлючевыеДаты(НовыйОбъект.Ссылка, СоответствиеКлючевыеДатыИзделия);		
//	//rarus vikhle 11.09.2020 mt 16181 закомментировал	
//	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке +	
//	//Если СоответствиеДопРеквизитов1БД["Product id"] <> Неопределено Тогда	
//	//	Если ЗначениеЗаполнено(СоответствиеДопРеквизитов1БД["Product id"]) Тогда
//	//			  	
//	//		Запрос = Новый Запрос;
//	//		Запрос.Текст = 
//	//			"ВЫБРАТЬ
//	//			|	Scan_СоставСоглашенийОПоставкеСрезПоследних.Период КАК Период,
//	//			|	Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие КАК Изделие,
//	//			|	Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке КАК СоглашениеОПоставке
//	//			|ИЗ
//	//			|	РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних(, Изделие = &Изделие) КАК Scan_СоставСоглашенийОПоставкеСрезПоследних";
//	//		
//	//		Запрос.УстановитьПараметр("Изделие", НовыйОбъект.Ссылка);
//	//		
//	//		РезультатЗапроса = Запрос.Выполнить();
//	//		
//	//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	//		
//	//		Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
//	//			СоглашениеОПоставке = ВыборкаДетальныеЗаписи.СоглашениеОпоставке;
//	//		Иначе
//	//			СоглашениеОпоставке = Справочники.Scan_СоглашенияОПоставке.ПустаяСсылка();
//	//		КонецЕсли; 
//	//		
//	//		Если СоглашениеОПоставке.Пустая() Тогда
//	//			
//	//			Запрос = Новый Запрос;
//	//			Запрос.Текст = 
//	//			"ВЫБРАТЬ
//	//			|	Scan_СоглашенияОПоставке.Ссылка КАК Ссылка,
//	//			|	Scan_СоглашенияОПоставке.IDПродуктаКП КАК IDПродуктаКП
//	//			|ИЗ
//	//			|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
//	//			|ГДЕ
//	//			|	Scan_СоглашенияОПоставке.IDПродуктаКП = &IDПродуктаКП
//	//			|	И НЕ Scan_СоглашенияОПоставке.Статус В (&Статус)
//	//			|	И Scan_СоглашенияОПоставке.ПометкаУдаления = ЛОЖЬ";
//	//			
//	//			Запрос.УстановитьПараметр("IDПродуктаКП", СоответствиеДопРеквизитов1БД["Product id"]);
//	//			МассивСтатусовОтказ = Новый Массив;
//	//			МассивСтатусовОтказ.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.Отказ);
//	//			МассивСтатусовОтказ.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Расторгнут);
//	//			МассивСтатусовОтказ.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Отменен);
//	//			//МассивСтатусовОтказ.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС); //rarus vikhle 18.08.2020 mt 16181
//	//			Запрос.УстановитьПараметр("Статус", МассивСтатусовОтказ);
//	//			
//	//			РезультатЗапроса = Запрос.Выполнить();
//	//			
//	//			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	//			
//	//			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//	//				МенеджерЗаписи = РегистрыСведений.Scan_СоставСоглашенийОПоставке.СоздатьМенеджерЗаписи();
//	//				МенеджерЗаписи.Период = ТекущаяДатаСеанса();
//	//				МенеджерЗаписи.Изделие = НовыйОбъект.Ссылка;
//	//				МенеджерЗаписи.СоглашениеОПоставке = ВыборкаДетальныеЗаписи.Ссылка;
//	//				МенеджерЗаписи.Записать();
//					
//					//rarus vikhle 18.08.2020 mt 16181  +++
//				//	СоглашениеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
//				//	НоваяСтрокаТЧ = СоглашениеОбъект.СписокПродуктов.Добавить();
//				//	НоваяСтрокаТЧ.Продукт = НовыйОбъект.Ссылка;
//				//	НоваяСтрокаТЧ.Количество = 1;
//				//	Запрос.Текст = "ВЫБРАТЬ
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Продукт.Ссылка КАК ПродуктСсылка,
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Количество КАК Количество,
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.ПроцентДрайв КАК ПроцентДрайв,
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.СпециальныеУсловия КАК СпециальныеУсловия,
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.DD КАК DD,
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.DDS КАК DDS,
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.НомерСтроки КАК НомерСтроки
//				//	               |ИЗ
//				//	               |	Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
//				//	               |ГДЕ
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка = &СоглашениеОПоставке
//				//	               |	И Scan_СоглашенияОПоставкеСписокПродуктов.Продукт ССЫЛКА Справочник.Scan_ДрафтыПродуктов
//				//	               |
//				//	               |УПОРЯДОЧИТЬ ПО
//				//	               |	Scan_СоглашенияОПоставкеСписокПродуктов.НомерСтроки";
//				//	Запрос.УстановитьПараметр("СоглашениеОПоставке", ВыборкаДетальныеЗаписи.Ссылка);
//				//	РезультатЗапроса = Запрос.Выполнить();
//				//    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//				//	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//				//		//заполняем фактическое изделие данными из строки драфта
//				//		НоваяСтрокаТЧ.ПроцентДрайв = ВыборкаДетальныеЗаписи.ПроцентДрайв;
//				//		НоваяСтрокаТЧ.DD = ВыборкаДетальныеЗаписи.DD;
//				//		НоваяСтрокаТЧ.DDS = ВыборкаДетальныеЗаписи.DDS;
//				//		НоваяСтрокаТЧ.СпециальныеУсловия = ВыборкаДетальныеЗаписи.СпециальныеУсловия;
//				//		//у драфта уменьшаем количество на 1 или удаляем
//				//		Если ВыборкаДетальныеЗаписи.Количество > 1 Тогда
//				//			СоглашениеОбъект.СписокПродуктов[ВыборкаДетальныеЗаписи.НомерСтроки - 1].Количество = СоглашениеОбъект.СписокПродуктов[ВыборкаДетальныеЗаписи.НомерСтроки - 1].Количество - 1;
//				//		Иначе
//				//			СоглашениеОбъект.СписокПродуктов.Удалить(ВыборкаДетальныеЗаписи.НомерСтроки - 1);
//				//		КонецЕсли;	
//				//	КонецЕсли;	
//				//	
//				//	СоглашениеОбъект.Количество = СоглашениеОбъект.СписокПродуктов.Итог("Количество");
//				//	Попытка
//				//		СоглашениеОбъект.Записать();
//				//	Исключение
//				//		СообщениеОбОшибке = "Не удалось скорректировать соглашения о поставке " + СоглашениеОбъект.Наименование + ": " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//				//		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
//				//	КонецПопытки;	
//				//	
//				//	//Создание документов установки плановых цен
//				//	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
//				//	ТабРучныхСоставляющих = Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьТаблицуРучныхСоставляющихСкидкиНаценки(НовыйОбъект.Ссылка);
//				//
//				//	// Установка Базовой цены
//				//	СтрокаСоставляющей = ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаДилера"),"СоставляющаяЦены");
//				//	СтрокаСоставляющей.ЦенаСНДС = СоглашениеОПоставке.Цена;
//				//	СтрокаСоставляющей.ЦенаБезНДС = СоглашениеОПоставке.ЦенаБезНДС;
//				//	СтрокаСоставляющей.СтавкаНДС = СоглашениеОПоставке.СтавкаНДС;
//				//	СтрокаСоставляющей.Пользователь = ТекущийПользователь;
//				//	СтрокаСоставляющей.Источник = СоглашениеОПоставке.Ссылка; 
//				//	
//				//	// Установка СУ и цены для клиента
//				//	Если ЗначениеЗаполнено(НоваяСтрокаТЧ.СпециальныеУсловия) Тогда
//				//		СтрокаСоставляющей 					= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet"),"СоставляющаяЦены");
//				//		СтрокаСоставляющей.ЦенаСНДС 		= НоваяСтрокаТЧ.СпециальныеУсловия.ЦенаДляДилера;
//				//		СтрокаСоставляющей.ЦенаБезНДС 		= НоваяСтрокаТЧ.СпециальныеУсловия.ЦенаБезНДС;
//				//		СтрокаСоставляющей.СтавкаНДС 		= НоваяСтрокаТЧ.СпециальныеУсловия.СтавкаНДС;
//				//		СтрокаСоставляющей.Пользователь		= ТекущийПользователь;
//				//		СтрокаСоставляющей.Источник			= СоглашениеОбъект.Ссылка;
//				//		
//				//		СтрокаСоставляющей = ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУRetailPrice"),"СоставляющаяЦены");
//				//		СтрокаСоставляющей.ЦенаСНДС 		= НоваяСтрокаТЧ.СпециальныеУсловия.ЦенаДляКлиента;
//				//		СтрокаСоставляющей.ЦенаБезНДС		= НоваяСтрокаТЧ.СпециальныеУсловия.ЦенаБезНДС;
//				//		СтрокаСоставляющей.СтавкаНДС 		= НоваяСтрокаТЧ.СпециальныеУсловия.СтавкаНДС;
//				//		СтрокаСоставляющей.Пользователь 	= ТекущийПользователь;
//				//		СтрокаСоставляющей.Источник 		= СоглашениеОбъект.Ссылка;
//				//	КонецЕсли;
//				//	
//				//	// Установка % драйва
//				//	Если ЗначениеЗаполнено(НоваяСтрокаТЧ.ПроцентДрайв) Тогда
//				//		СтрокаСоставляющей 					= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ПроцентДрайва"),"СоставляющаяЦены");
//				//		СтрокаСоставляющей.ЦенаСНДС 		= НоваяСтрокаТЧ.ПроцентДрайв;
//				//		СтрокаСоставляющей.ЦенаБезНДС 		= НоваяСтрокаТЧ.ПроцентДрайв;	
//				//		СтрокаСоставляющей.СтавкаНДС 		= СоглашениеОбъект.СтавкаНДС;
//				//		СтрокаСоставляющей.Пользователь 	= ТекущийПользователь;
//				//		СтрокаСоставляющей.Источник 		= СоглашениеОбъект.Ссылка;
//				//	КонецЕсли;
//				//	
//				//	// Установка лог. затрат
//				//	Если ЗначениеЗаполнено(НоваяСтрокаТЧ.ЛогистическиеЗатратыСумма) Тогда
//				//		СтрокаСоставляющей 					= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЛогистическиеЗатраты"),"СоставляющаяЦены");
//				//		СтрокаСоставляющей.ЦенаСНДС 		= НоваяСтрокаТЧ.ЛогистическиеЗатратыСумма;
//				//		СтрокаСоставляющей.Пользователь 	= ТекущийПользователь;
//				//		СтрокаСоставляющей.Источник 		= СоглашениеОбъект.Ссылка;
//				//	КонецЕсли;
//				//	
//				//	// Установка компенсации
//				//	Если ЗначениеЗаполнено(НоваяСтрокаТЧ.КомпенсацииСумма) Тогда
//				//		СтрокаСоставляющей 					= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.Компенсация"),"СоставляющаяЦены");
//				//		СтрокаСоставляющей.ЦенаСНДС 		= НоваяСтрокаТЧ.КомпенсацииСумма;
//				//		СтрокаСоставляющей.Пользователь 	= ТекущийПользователь;
//				//		СтрокаСоставляющей.Источник 		= СоглашениеОбъект.Ссылка;
//				//	КонецЕсли;	
//				//	
//				//	ДокументУстановкиЦен = Документы.Scan_УстановкаПлановыхЦенПродукта.СоздатьСкорректироватьДокументУстановкиЦен(НовыйОбъект.Ссылка,ТабРучныхСоставляющих,СоглашениеОбъект.Ссылка,НоваяСтрокаТЧ.СпециальныеУсловия);
//				//	Если ДокументУстановкиЦен = Неопределено Тогда
//				//		СообщениеОбОшибке = "Не удалось создать документ установки плановых цен для продукта " + НовыйОбъект.Наименование + ": " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//				//		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);						
//				//	КонецЕсли;
//					//rarus vikhle 18.08.2020 mt 16181  +++
//					
//					
//	//				Запрос = Новый Запрос;
//	//				Запрос.Текст = 
//	//				"ВЫБРАТЬ
//	//				|	Scan_СпецификацииПродуктов.Ссылка КАК Ссылка
//	//				|ИЗ
//	//				|	Справочник.Scan_СпецификацииПродуктов КАК Scan_СпецификацииПродуктов
//	//				|ГДЕ
//	//				|	Scan_СпецификацииПродуктов.Изделие = &Изделие
//	//				|	И Scan_СпецификацииПродуктов.ПометкаУдаления = ЛОЖЬ";
//	//				
//	//				Запрос.УстановитьПараметр("Изделие", НовыйОбъект.Ссылка);
//	//				
//	//				Если Запрос.Выполнить().Пустой() Тогда
//	//					Для каждого СтрокаПродукта Из ВыборкаДетальныеЗаписи.Ссылка.КоммерческоеПредложениеSPORT.ПродуктыКП Цикл
//	//						Если СтрокаПродукта.IDПродуктаКП = НовыйОбъект.IDПродуктаКП Тогда
//	//							Если ЗначениеЗаполнено(СтрокаПродукта.Спецификация) Тогда
//	//								НоваяСпецификация = СтрокаПродукта.Спецификация.Скопировать();
//	//								НоваяСпецификация.Изделие = НовыйОбъект.ссылка;
//	//								НоваяСпецификация.Наименование = НоваяСпецификация.Наименование + НовыйОбъект.Наименование;

//	//								НоваяСпецификация.Записать();
//	//
//	//								Запрос = Новый Запрос;
//	//								Запрос.Текст = 
//	//									"ВЫБРАТЬ
//	//									|	Scan_ВерсииБазовыхСпецификаций.Ссылка КАК Ссылка
//	//									|ИЗ
//	//									|	Справочник.Scan_ВерсииБазовыхСпецификаций КАК Scan_ВерсииБазовыхСпецификаций
//	//									|ГДЕ
//	//									|	Scan_ВерсииБазовыхСпецификаций.Владелец = &Владелец
//	//									|	И Scan_ВерсииБазовыхСпецификаций.ПометкаУдаления = ЛОЖЬ";
//	//								
//	//								Запрос.УстановитьПараметр("Владелец",  СтрокаПродукта.Спецификация);
//	//								
//	//								РезультатЗапроса = Запрос.Выполнить();
//	//								
//	//								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	//								
//	//								Если ВыборкаДетальныеЗаписи.Следующий() тогда
//	//									НоваяВерсияСпецификация = ВыборкаДетальныеЗаписи.Ссылка.Скопировать();
//	//									НоваяВерсияСпецификация.Владелец = НоваяСпецификация.ссылка;
//	//									НоваяВерсияСпецификация.Записать();
//	//									
//	//									//rarus ozhnik 15888 14.07.2020 + 
//	//									СтруктураЗаписи = Новый Структура;
//	//									СтруктураЗаписи.Вставить("Спецификация", НоваяВерсияСпецификация.Ссылка);
//	//									СтруктураЗаписи.Вставить("ВидСпецификации", НоваяВерсияСпецификация.ВидСпецификации);
//	//									СтруктураЗаписи.Вставить("ВерсияСпецификации", НоваяВерсияСпецификация.ВерсияСпецификации);
//	//									СтруктураЗаписи.Вставить("Опции", НоваяВерсияСпецификация.Опции);
//	//									СтруктураЗаписи.Вставить("ДатаВерсииСпецификации", НоваяВерсияСпецификация.ДатаСоздания);
//	//									СтруктураЗаписи.Вставить("ПродуктКП", НоваяВерсияСпецификация.Владелец.ПродуктКП);
//	//									СтруктураЗаписи.Вставить("НомерКПSPORT", НоваяВерсияСпецификация.Владелец.НомерКПSPORT); 							
//	//									СтруктураЗаписи.Вставить("IDExternalSystem", "");
//	//									                         
//	//									РегистрыСведений.Scan_ВерсииСпецификаций.ЗаписьЗначенияРегистраСведения(СтруктураЗаписи); 
//	//									РегистрыСведений.Scan_ОпределяемыеПараметрыПоОпциямПродуктов.ОбновитьОпределяемыеПараметры(НовыйОбъект.ссылка);  										
//	//									//rarus ozhnik 15888 14.07.2020 -

//	//								КонецЕсли;
//	//

//	//							КонецЕсли; 
//	//						КонецЕсли;
//	//					КонецЦикла;
//	//				КонецЕсли;  
//	//			КонецЕсли;  			
//	//
//	//		КонецЕсли;
//	//     	

//	//	КонецЕсли;
//	//	

//	//КонецЕсли;
//	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке -
//	//rarus vikhle 11.09.2020 mt 16181 закомментировал ---
//	
//		// Появилась связка Заказ на завод-Изделие => Проверим, может нужно создать поступление на склад
//		ТекИзделие = НовыйОбъект.Ссылка;
//		Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) И ЗначениеЗаполнено(ТекИзделие) Тогда
//			FinishDate = СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate")];  
//			Если ЗначениеЗаполнено(FinishDate) Тогда
//				Если НЕ Справочники.Scan_ЗаказыНаЗавод.ПоступлениеУжеЕсть(ТекИзделие, FinishDate) Тогда
//					Документы.Scan_ДвижениеИзделий.СформироватьПоступлениеНаСклад(ТекИзделие, FinishDate);
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//		
//		//Если ЗначениеЗаполнено(СоответствиеКлючевыеДатыЗаказНаЗавод) Тогда
//		//	// Запишем все ключевые даты в регистр (ЗАКАЗЫ НА ЗАВОД)
//		//	ЗаписатьКлючевыеДаты(ТекЗаказНаЗавод, СоответствиеКлючевыеДатыЗаказНаЗавод);		
//		//КонецЕсли;
//		
//		Справочники.Scan_КоммерческиеПредложения.ОбновитьТабличныеЧастиКП(ТекИзделие); //rarus vikhle 28.09.2020 mt 16181 
//	Исключение
//		ВыдаватьОшибку = Истина;
//		Если НЕ Scan_ПраваИНастройки.Scan_Право("КонтролироватьЗагрузкуПродуктовБезТипаИНаименования") Тогда
//			Если НЕ ЗначениеЗаполнено(НовыйОбъект.Наименование) ИЛИ НЕ ЗначениеЗаполнено(НовыйОбъект.ТипПродукта) Тогда
//				ВыдаватьОшибку = Ложь;
//			КонецЕсли;	
//		КонецЕсли;
//		Если ВыдаватьОшибку Тогда //rarus bonmak 14.04.2020 15936 добавил условие 
//			СообщениеОбОшибке = "Не удалось создать изделие  (" + НовыйОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //rarus bonmak 14773 15.08.2019
//			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
//			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, НовыйОбъект.Наименование, ?(XDTOОбъект = Неопределено, НовыйОбъект.IDExternalSystemProduct, НовыйОбъект.IDExternalSystem), СообщениеОбОшибке); //rarus bonmak 14773 15.08.2019 изменил параметры 
//		КонецЕсли;
//		
//		Возврат Неопределено;
//	КонецПопытки;
//	Возврат НовыйОбъект.Ссылка;
//КонецФункции

//Функция ОбновитьИзделиеНовая(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭтоТС = Истина, XDTOОбъектПродукт = Неопределено, СтруктураРеквизитовПродукт = Неопределено)	// rarus tenkam 11.06.2019 mantis 13865 + (аргумент XDTOОбъектПродукт, СтруктураРеквизитовПродукт)
//	
//	МассивРеквизитовСправочника = ?(ЭтоТС, ПолучитьМассивРеквизитов("GetChassis"), ПолучитьМассивРеквизитов("GetEngines"));
//	
//	ЗаказНаЗаводСсылка = ЭлементСсылка.ЗаказНаЗавод; 
//	
//	СоответствиеРеквизитовДляЗаписи = Новый Соответствие;
//		
//	СоответствиеКлючевыеДатыИзделия = ПолучитьСоответствиеКлючевыеДаты(ЭлементСсылка);

//	Если XDTOОбъект <> Неопределено Тогда 
//	
//		// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД (ИЗДЕЛИЕ)
//		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//			Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
//				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
//					ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.ПустаяСсылка();
//				Иначе
//					ЗначениеРеквизита = РазобратьМаркуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
//				КонецЕсли;
//			ИначеЕсли ТекРеквизит.ИмяРекв = "Наименование" Тогда
//				Продолжить;
//			Иначе
//				ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//			КонецЕсли;

//			Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
//				СоответствиеРеквизитовДляЗаписи.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если XDTOОбъектПродукт <> Неопределено Тогда
//		
//		// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД (ПРОДУКТ)
//		Если Не ЗначениеЗаполнено(ЭлементСсылка.IDExternalSystemProduct) Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("IDExternalSystemProduct", XDTOОбъектПродукт.GUID);
//		КонецЕсли;
//		
//		// Проверим/обновим заказ на завод
//		ЗаказНаЗаводСсылка = ПолучитьСоздатьЗаказНаЗаводИз1БД(XDTOОбъектПродукт.GUID, XDTOОбъектПродукт);
//		Если ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка() ИЛИ ЗаказНаЗаводСсылка = Неопределено Тогда
//			// Если из 1БД не пришел заказ, но в карточке он есть, не будем очищать
//			ЗаказНаЗаводСсылка = ЭлементСсылка.ЗаказНаЗавод;
//		ИначеЕсли ЭлементСсылка.ЗаказНаЗавод <> ЗаказНаЗаводСсылка Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ЗаказНаЗавод", ЗаказНаЗаводСсылка);	
//		КонецЕсли;		
//	Иначе		
//		Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда
//			
//			//Проверим/обновим заказ на завод
//			ЗаказНаЗаводСсылка = ПолучитьСоздатьЗаказНаЗаводИз1БД(,, ЗаказНаЗаводСсылка.IDExternalSystem);
//			Если ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка() ИЛИ ЗаказНаЗаводСсылка = Неопределено Тогда
//				// Если из 1БД не обновился заказ, но в карточке он есть, не будем очищать
//				ЗаказНаЗаводСсылка = ЭлементСсылка.ЗаказНаЗавод;
//			ИначеЕсли ЭлементСсылка.ЗаказНаЗавод <> ЗаказНаЗаводСсылка Тогда
//				СоответствиеРеквизитовДляЗаписи.Вставить("ЗаказНаЗавод", ЗаказНаЗаводСсылка);	
//			КонецЕсли;	
//		КонецЕсли;
//	КонецЕсли;	
//	
//	СоответствиеКлючевыеДатыЗаказаНаЗавод = ПолучитьСоответствиеКлючевыеДаты(ЗаказНаЗаводСсылка);	
//	
//	Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда
//		МестоПроизводстваИзЗаказа = ЗаказНаЗаводСсылка.МестоПроизводства;
//		Если ЗначениеЗаполнено(МестоПроизводстваИзЗаказа) Тогда
//			Если МестоПроизводстваИзЗаказа <> ЭлементСсылка.МестоПроизводства Тогда				
//				СоответствиеРеквизитовДляЗаписи.Вставить("МестоПроизводства", МестоПроизводстваИзЗаказа);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//		
//	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
//	
//	// Заполним соответствие с доп. реквизитами
//	СоответствиеДопРеквизитов1БД = Неопределено;
//	Если XDTOОбъект <> Неопределено Тогда
//		СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
//	КонецЕсли;
//	Если XDTOОбъектПродукт <> Неопределено Тогда
//		СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъектПродукт.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
//	КонецЕсли;
//	
//	//// КЛЮЧЕВЫЕ ДАТЫ ЗАКАЗА НА ЗАВОД
//	//
//	//Если СоответствиеДопРеквизитов1БД["Дата продажи дилеру"] <> Неопределено И СоответствиеКлючевыеДатыЗаказНаЗавод <> Неопределено Тогда	// Дата продажи изделия
//	//	
//	//	ДатаПродажиИзделия = СоответствиеКлючевыеДатыЗаказНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")];
//	//	Если НЕ ЭлементСсылка.БУ И (ДатаПродажиИзделия = Неопределено ИЛИ ДатаПродажиИзделия = Дата(1,1,1)) Тогда
//	//		// Обновлять если не БУ и раньше даты не было
//	//		СоответствиеКлючевыеДатыЗаказНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")] = СоответствиеДопРеквизитов1БД["Дата продажи дилеру"];
//	//	КонецЕсли;		
//	//КонецЕсли;		
//	//Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено И СоответствиеКлючевыеДатыЗаказНаЗавод <> Неопределено  Тогда		// Дата СОП
//	//	СсылкаНаСОП = СоответствиеДопРеквизитов1БД["СОП"];
//	//	СоответствиеКлючевыеДатыЗаказНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП")] = СсылкаНаСОП.ДатаНачала;					
//	//КонецЕсли;
//	
//	// КЛЮЧЕВЫЕ ДАТЫ ИЗДЕЛИЯ
//	
//	Если СоответствиеДопРеквизитов1БД["DeliveryDate"] <> Неопределено Тогда		// SoW 
//		СоответствиеКлючевыеДатыИзделия[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SoW")] = СоответствиеДопРеквизитов1БД["DeliveryDate"];
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Заводская гарантия, действительна до"] <> Неопределено Тогда		// WED
//		СоответствиеКлючевыеДатыИзделия[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.WED")] = СоответствиеДопРеквизитов1БД["Заводская гарантия, действительна до"];	
//	КонецЕсли;
//	
//	// РЕКВИЗИТЫ
//	
//	Если СоответствиеДопРеквизитов1БД["Вид тахографа"] <> Неопределено Тогда	// Тахограф с завода Скания
//		Если ЭлементСсылка.ТахографСЗаводаСкания <> СоответствиеДопРеквизитов1БД["Вид тахографа"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ТахографСЗаводаСкания", СоответствиеДопРеквизитов1БД["Вид тахографа"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"] <> Неопределено Тогда	// Номер ЭРА ГЛОНАСС
//		Если ЭлементСсылка.НомерЭРАГЛОНАСС <> СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("НомерЭРАГЛОНАСС", СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Логистический тип продукта"] <> Неопределено Тогда // Тип продукта логистический
//		Если ЭлементСсылка.ТипПродуктаЛогистический <> СоответствиеДопРеквизитов1БД["Логистический тип продукта"] Тогда
//			Если НЕ ЭлементСсылка.НеОбновлятьЛогистическиеТипыИз1БД Тогда
//				СоответствиеРеквизитовДляЗаписи.Вставить("ТипПродуктаЛогистический", СоответствиеДопРеквизитов1БД["Логистический тип продукта"]);
//			КонецЕсли;		
//		КонецЕсли;
//	КонецЕсли;	
//	Если СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"] <> Неопределено Тогда	// Типы маркетинговые
//		Если ЭлементСсылка.ТипыМаркетинговые <> СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ТипыМаркетинговые", СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Модель"] <> Неопределено Тогда	// Модель продукта
//		Если ЭлементСсылка.МодельПродукта <> СоответствиеДопРеквизитов1БД["Модель"] Тогда
//			Если НЕ ЭлементСсылка.НеОбновлятьМоделиИз1БД Тогда
//				СоответствиеРеквизитовДляЗаписи.Вставить("МодельПродукта", СоответствиеДопРеквизитов1БД["Модель"]);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Себестоимость логистическая"] <> Неопределено Тогда	// Себестоимость логистическая
//		Если ЭлементСсылка.СебестоимостьЛогистическая <> СоответствиеДопРеквизитов1БД["Себестоимость логистическая"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("СебестоимостьЛогистическая", СоответствиеДопРеквизитов1БД["Себестоимость логистическая"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда	// СОП
//		СОППродукта = СоответствиеДопРеквизитов1БД["СОП"];
//		Если ЭлементСсылка.СОП <> СОППродукта И НЕ ЭлементСсылка.БУ Тогда	// Для БУ не обновляем
//			
//			СоответствиеРеквизитовДляЗаписи.Вставить("СОП", СОППродукта);
//			ОбновитьСОПИз1БД(ЭлементСсылка.СОП);	// СОП изменился, обновим старый (должна уменьшиться ТЧ)
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Спецификация"] <> Неопределено Тогда	// Спецификация продукта
//		Если ЭлементСсылка.СпецификацияПродукта <> СоответствиеДопРеквизитов1БД["Спецификация"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("СпецификацияПродукта", СоответствиеДопРеквизитов1БД["Спецификация"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"] <> Неопределено Тогда	// Стоимость продажи
//		Если ЭлементСсылка.СтоимостьПродажи <> СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("СтоимостьПродажи", СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Тип ГИБДД"] <> Неопределено Тогда	// Тип ГИБДД
//		Если ЭлементСсылка.ТипГИБДД <> СоответствиеДопРеквизитов1БД["Тип ГИБДД"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ТипГИБДД", СоответствиеДопРеквизитов1БД["Тип ГИБДД"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Тип кабины"] <> Неопределено Тогда	// Тип кабины
//		Если ЭлементСсылка.ТипКабины <> СоответствиеДопРеквизитов1БД["Тип кабины"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ТипКабины", СоответствиеДопРеквизитов1БД["Тип кабины"]);
//		КонецЕсли;
//	КонецЕсли;	
//	Если СоответствиеДопРеквизитов1БД["Тип кузова"] <> Неопределено Тогда	// Тип кузова
//		Если ЭлементСсылка.ТипКузова <> СоответствиеДопРеквизитов1БД["Тип кузова"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ТипКузова", СоответствиеДопРеквизитов1БД["Тип кузова"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Тип продукта"] <> Неопределено Тогда		// Тип продукта
//		Если ЭлементСсылка.ТипПродукта <> СоответствиеДопРеквизитов1БД["Тип продукта"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ТипПродукта", СоответствиеДопРеквизитов1БД["Тип продукта"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["EngineNo"] <> Неопределено Тогда	// Номер двигателя ТС
//		Если ЭлементСсылка.НомерДвигателяТС <> СоответствиеДопРеквизитов1БД["EngineNo"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("НомерДвигателяТС", СоответствиеДопРеквизитов1БД["EngineNo"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["VIN-код"] <> Неопределено Тогда	// VIN, VIN2
//		Если ЭлементСсылка.VIN <> СоответствиеДопРеквизитов1БД["VIN-код"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("VIN", СоответствиеДопРеквизитов1БД["VIN-код"]);
//		КонецЕсли;
//		Если ЭлементСсылка.VIN2 <> СоответствиеДопРеквизитов1БД["VIN-код"] 
//			И ЭлементСсылка.VIN2 = "" Тогда		// rarus tenkam 09.07.2020 mantis 16296 +
//			СоответствиеРеквизитовДляЗаписи.Вставить("VIN2", СоответствиеДопРеквизитов1БД["VIN-код"]);
//		КонецЕсли;
//	КонецЕсли;
//	//rarus BProg_Dekin 06.05.2020 mantis 0014916 ++ заполнение доп. реквизита "Топливо"
//	Если СоответствиеДопРеквизитов1БД["Топливо"] <> Неопределено Тогда	// Топливо
//		//rarus vikhle 25.08.2020 mt 14916 +++
//		Если ТипЗнч(СоответствиеДопРеквизитов1БД["Топливо"]) = Тип("СправочникСсылка.Scan_ТипыТопливаДвигателейПродуктов") Тогда
//			ТипТоплива = СоответствиеДопРеквизитов1БД["Топливо"]; 
//		ИначеЕсли ТипЗнч(СоответствиеДопРеквизитов1БД["Топливо"]) = Тип("Строка") Тогда
//			ТипТоплива = Справочники.Scan_ТипыТопливаДвигателейПродуктов.ПустаяСсылка(); 
//			ОтправитьПисьмоОТипеТоплива(ЭлементСсылка.НомерИзделия,СоответствиеДопРеквизитов1БД["Топливо"]);
//		КонецЕсли;
//				
//		Если ЭлементСсылка.ТипТопливаДвигателя <> ТипТоплива Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ТипТопливаДвигателя", ТипТоплива);
//		КонецЕсли;
//		//rarus vikhle 25.08.2020 mt 14916 ---	
//	КонецЕсли;
//	//rarus BProg_Dekin 06.05.2020 mantis 0014916 --
//	
//	//rarus BProg_Dekin 27.05.2020 mantis 0015893 ++ Получение доп. реквизита СегментРынка
//	Если СоответствиеДопРеквизитов1БД["СегментРынка"] <> Неопределено Тогда	// Топливо
//		Если ЭлементСсылка.СегментРынкаПродуктов <> СоответствиеДопРеквизитов1БД["СегментРынка"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("СегментРынкаПродуктов", СоответствиеДопРеквизитов1БД["СегментРынка"]);
//		КонецЕсли;
//	КонецЕсли;
//	//rarus BProg_Dekin 27.05.2020 mantis 0015893 --
//	
//	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке +	
//	Если СоответствиеДопРеквизитов1БД["Product id"] <> Неопределено Тогда	
//		Если ЭлементСсылка.IDПродуктаКП <> СоответствиеДопРеквизитов1БД["Product id"] Тогда  		 
//			СоответствиеРеквизитовДляЗаписи.Вставить("IDПродуктаКП", СоответствиеДопРеквизитов1БД["Product id"]);
//		КонецЕсли;
//	КонецЕсли;
//	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке -
//	
//	//rarus bonmak 14375 07.08.2020 ++
//	Если СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"] <> Неопределено Тогда 
//		Если ЭлементСсылка.БУ <> СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"] Тогда  		 
//			СоответствиеРеквизитовДляЗаписи.Вставить("БУ", СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"]);
//		КонецЕсли;
//	КонецЕсли;
//	//rarus bonmak 14375 07.08.2020 --
//	
//	//rarus agar 14.08.2020 16138 ++
//	Если СоответствиеДопРеквизитов1БД["Уровень токсичности"] <> Неопределено Тогда 
//		Если ЭлементСсылка.ЭкологическийКласс <> СоответствиеДопРеквизитов1БД["Уровень токсичности"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ЭкологическийКласс", СоответствиеДопРеквизитов1БД["Уровень токсичности"]);
//		КонецЕсли;
//	КонецЕсли;
//	Если СоответствиеДопРеквизитов1БД["Цвет кабины ПТС"] <> Неопределено Тогда 
//		Если ЭлементСсылка.ЦветКабиныПТС <> СоответствиеДопРеквизитов1БД["Цвет кабины ПТС"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("ЦветКабиныПТС", СоответствиеДопРеквизитов1БД["Цвет кабины ПТС"]);
//		КонецЕсли;
//	КонецЕсли;
//	//rarus agar 14.08.2020 16138 --
//	
//	//rarus vikhle 02.11.2020 mt 16181 +++
//	Если СоответствиеДопРеквизитов1БД["Quotation number"] <> Неопределено Тогда 
//		Если ЭлементСсылка.НомерКП <> СоответствиеДопРеквизитов1БД["Quotation number"] Тогда
//			СоответствиеРеквизитовДляЗаписи.Вставить("НомерКП", СоответствиеДопРеквизитов1БД["Quotation number"]);
//		КонецЕсли;
//	КонецЕсли;
//	//rarus vikhle 02.11.2020 mt 16181 ---
//	
//	// ЗАПИШЕМ СНАЧАЛА ДАННЫЕ В РЕГИСТРЫ
//	НужноОбновлять = Ложь;
//	БылиИзменения = Ложь;
//	
//	// Запишем все ключевые даты в регистр
//	ЗаписатьКлючевыеДаты(ЭлементСсылка.Ссылка, СоответствиеКлючевыеДатыИзделия, БылиИзменения);
//	
//	//rarus vikhle 11.09.2020 mt 16181 закомментировал +++
//	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке +	
//	//Если СоответствиеДопРеквизитов1БД["Product id"] <> Неопределено Тогда	
//	//	Если ЗначениеЗаполнено(СоответствиеДопРеквизитов1БД["Product id"]) Тогда
//	//			  	
//	//		Запрос = Новый Запрос;
//	//		Запрос.Текст = 
//	//			"ВЫБРАТЬ
//	//			|	Scan_СоставСоглашенийОПоставкеСрезПоследних.Период КАК Период,
//	//			|	Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие КАК Изделие,
//	//			|	Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке КАК СоглашениеОПоставке
//	//			|ИЗ
//	//			|	РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних(, Изделие = &Изделие) КАК Scan_СоставСоглашенийОПоставкеСрезПоследних";
//	//		
//	//		Запрос.УстановитьПараметр("Изделие", ЭлементСсылка);
//	//		
//	//		РезультатЗапроса = Запрос.Выполнить();
//	//		
//	//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	//		
//	//		Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
//	//			СоглашениеОПоставке = ВыборкаДетальныеЗаписи.СоглашениеОпоставке;
//	//		Иначе
//	//			СоглашениеОпоставке = Справочники.Scan_СоглашенияОПоставке.ПустаяСсылка();
//	//		КонецЕсли; 
//	//		
//	//		Если СоглашениеОПоставке.Пустая() Тогда
//	//			
//	//			Запрос = Новый Запрос;
//	//			Запрос.Текст = 
//	//			"ВЫБРАТЬ
//	//			|	Scan_СоглашенияОПоставке.Ссылка КАК Ссылка,
//	//			|	Scan_СоглашенияОПоставке.IDПродуктаКП КАК IDПродуктаКП
//	//			|ИЗ
//	//			|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
//	//			|ГДЕ
//	//			|	Scan_СоглашенияОПоставке.IDПродуктаКП = &IDПродуктаКП
//	//			|	И НЕ (Scan_СоглашенияОПоставке.Статус В (&Статус))
//	//			|	И Scan_СоглашенияОПоставке.ПометкаУдаления = ЛОЖЬ";
//	//			
//	//			Запрос.УстановитьПараметр("IDПродуктаКП", СоответствиеДопРеквизитов1БД["Product id"]);
//	//			МассивСтатусовОтказ = Новый Массив;
//	//			МассивСтатусовОтказ.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.Отказ);
//	//			МассивСтатусовОтказ.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Расторгнут);
//	//			МассивСтатусовОтказ.Добавить(Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Отменен);
//	//			Запрос.УстановитьПараметр("Статус", МассивСтатусовОтказ);
//	//			
//	//			РезультатЗапроса = Запрос.Выполнить();
//	//			
//	//			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	//			
//	//			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//	//				МенеджерЗаписи = РегистрыСведений.Scan_СоставСоглашенийОПоставке.СоздатьМенеджерЗаписи();
//	//				МенеджерЗаписи.Период = ТекущаяДатаСеанса();
//	//				МенеджерЗаписи.Изделие = ЭлементСсылка;
//	//				МенеджерЗаписи.СоглашениеОПоставке = ВыборкаДетальныеЗаписи.Ссылка;
//	//				МенеджерЗаписи.Записать();
//	//				
//	//				Запрос = Новый Запрос;
//	//				Запрос.Текст = 
//	//				"ВЫБРАТЬ
//	//				|	Scan_СпецификацииПродуктов.Ссылка КАК Ссылка
//	//				|ИЗ
//	//				|	Справочник.Scan_СпецификацииПродуктов КАК Scan_СпецификацииПродуктов
//	//				|ГДЕ
//	//				|	Scan_СпецификацииПродуктов.Изделие = &Изделие
//	//				|	И Scan_СпецификацииПродуктов.ПометкаУдаления = ЛОЖЬ";
//	//				
//	//				Запрос.УстановитьПараметр("Изделие", ЭлементСсылка);
//	//				
//	//				Если Запрос.Выполнить().Пустой() Тогда
//	//					Для каждого СтрокаПродукта Из ВыборкаДетальныеЗаписи.Ссылка.КоммерческоеПредложениеSPORT.ПродуктыКП Цикл
//	//						Если СтрокаПродукта.IDПродуктаКП = СоответствиеДопРеквизитов1БД["Product id"] Тогда
//	//							Если ЗначениеЗаполнено(СтрокаПродукта.Спецификация) Тогда
//	//								НоваяСпецификация = СтрокаПродукта.Спецификация.Скопировать();
//	//								НоваяСпецификация.Изделие = ЭлементСсылка;
//	//								НоваяСпецификация.Наименование= СоответствиеДопРеквизитов1БД["Product id"] + " " + ЭлементСсылка.Наименование; 
//	//								НоваяСпецификация.Записать();
//	//
//	//								Запрос = Новый Запрос;
//	//								Запрос.Текст = 
//	//									"ВЫБРАТЬ
//	//									|	Scan_ВерсииБазовыхСпецификаций.Ссылка КАК Ссылка
//	//									|ИЗ
//	//									|	Справочник.Scan_ВерсииБазовыхСпецификаций КАК Scan_ВерсииБазовыхСпецификаций
//	//									|ГДЕ
//	//									|	Scan_ВерсииБазовыхСпецификаций.Владелец = &Владелец
//	//									|	И Scan_ВерсииБазовыхСпецификаций.ПометкаУдаления = ЛОЖЬ";
//	//								
//	//								Запрос.УстановитьПараметр("Владелец",  СтрокаПродукта.Спецификация);
//	//								
//	//								РезультатЗапроса = Запрос.Выполнить();
//	//								
//	//								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	//								
//	//								Если ВыборкаДетальныеЗаписи.Следующий() тогда
//	//									НоваяВерсияСпецификация = ВыборкаДетальныеЗаписи.Ссылка.Скопировать();
//	//									НоваяВерсияСпецификация.Владелец = НоваяСпецификация.ссылка;
//	//									НоваяВерсияСпецификация.Записать();
//	//									
//	//									//rarus ozhnik 15888 14.07.2020 + 
//	//									СтруктураЗаписи = Новый Структура;
//	//									СтруктураЗаписи.Вставить("Спецификация", НоваяВерсияСпецификация.Ссылка);
//	//									СтруктураЗаписи.Вставить("ВидСпецификации", НоваяВерсияСпецификация.ВидСпецификации);
//	//									СтруктураЗаписи.Вставить("ВерсияСпецификации", НоваяВерсияСпецификация.ВерсияСпецификации);
//	//									СтруктураЗаписи.Вставить("Опции", НоваяВерсияСпецификация.Опции);
//	//									СтруктураЗаписи.Вставить("ДатаВерсииСпецификации", НоваяВерсияСпецификация.ДатаСоздания);
//	//									СтруктураЗаписи.Вставить("ПродуктКП", НоваяВерсияСпецификация.Владелец.ПродуктКП);
//	//									СтруктураЗаписи.Вставить("НомерКПSPORT", НоваяВерсияСпецификация.Владелец.НомерКПSPORT); 							
//	//									СтруктураЗаписи.Вставить("IDExternalSystem", "");
//	//									                         
//	//									РегистрыСведений.Scan_ВерсииСпецификаций.ЗаписьЗначенияРегистраСведения(СтруктураЗаписи); 
//	//									РегистрыСведений.Scan_ОпределяемыеПараметрыПоОпциямПродуктов.ОбновитьОпределяемыеПараметры(ЭлементСсылка.ссылка);  										
//	//									//rarus ozhnik 15888 14.07.2020 -

//	//								КонецЕсли;
//	//

//	//							КонецЕсли; 
//	//						КонецЕсли;
//	//					КонецЦикла;
//	//				КонецЕсли;  
//	//			КонецЕсли;  			
//	//
//	//		КонецЕсли; 
//	//	КонецЕсли;
//	//	

//	//КонецЕсли;
//	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке -
//	//rarus vikhle 11.09.2020 mt 16181 закомментировал ---
//	
//	Если БылиИзменения Тогда НужноОбновлять = Истина; КонецЕсли;
//	
//	// ЗАПИШЕМ ИЗМЕНЕНИЯ РЕКВИЗИТОВ (или Дату обновления, если были изменения в регистрах)
//	Если НужноОбновлять ИЛИ СоответствиеРеквизитовДляЗаписи.Количество() <> 0 Тогда	
//		БылиИзменения = Истина;
//		
//		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
//		
//		ТекОбъект.ДатаОбновления = ТекущаяДата();
//		
//		Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписи Цикл
//			ТекОбъект[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
//		КонецЦикла;
//		
//		СформированноеНаименование = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(ТекОбъект);
//		Если СформированноеНаименование <> "" Тогда
//			ТекОбъект.Наименование = СформированноеНаименование;
//		КонецЕсли;
//		
//		Попытка 
//			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
//				ТекМассив = ПолучитьСообщенияПользователю(Истина);
//				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
//			КонецЕсли;
//			
//			ТекОбъект.Записать();
//				
//		Исключение
//			СообщениеОбОшибке = "Не удалось записать изделие ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
//			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
//			Возврат Неопределено;
//		КонецПопытки;
//		
//		Справочники.Scan_КоммерческиеПредложения.ОбновитьТабличныеЧастиКП(ЭлементСсылка); //rarus vikhle 28.09.2020 mt 16181	
//	КонецЕсли;
//	
//	Возврат ЭлементСсылка;
//	
//КонецФункции
//rarus bonmak 09.08.2021 16834 --
#КонецОбласти

Функция СоздатьКонтрагентаНовая(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ГруппаКонтрагента)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetContragents");
	
	НовыйОбъект = Справочники.Scan_Контрагенты.СоздатьЭлемент();
	
	// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
			//rarus bonmak 15.04.2020 14456 ++
			Если ТекРеквизит.ИмяРекв = "Наименование" Тогда
				НовыйОбъект.НаименованиеОсн = ЗначениеРеквизита;
			ИначеЕсли ТекРеквизит.ИмяРекв = "НаименованиеПолное" Тогда
				НовыйОбъект.НаименованиеПолноеОсн = ЗначениеРеквизита;
			КонецЕсли;
			//rarus bonmak 15.04.2020 14456 --
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	Если ЗначениеЗаполнено(ГруппаКонтрагента) Тогда
		НовыйОбъект.Родитель = ГруппаКонтрагента;
	КонецЕсли;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	
	Если СоответствиеДопРеквизитов1БД["Юридический адрес"] <> Неопределено Тогда		// Юридический адрес 
		НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Юридический адрес"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.Страна = "РОССИЯ";
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Почтовый адрес"] <> Неопределено Тогда		// Почтовый адрес 
		НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Почтовый адрес"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.Страна = "РОССИЯ";
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Наименование"] <> Неопределено Тогда		// Наименование 
		НовыйОбъект.Наименование = СоответствиеДопРеквизитов1БД["Наименование"];
		НовыйОбъект.НаименованиеДоп = СоответствиеДопРеквизитов1БД["Наименование"];//rarus bonmak 15.04.2020 14456
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Наименование полное"] <> Неопределено Тогда		// Наименование полное 
		НовыйОбъект.НаименованиеПолное = СоответствиеДопРеквизитов1БД["Наименование полное"];
		НовыйОбъект.НаименованиеПолноеДоп = СоответствиеДопРеквизитов1БД["Наименование полное"];//rarus bonmak 15.04.2020 14456
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Наименование сокращенное"] <> Неопределено Тогда		// Наименование сокращенное //rarus bonmak 15.04.2020 14456 ++ 
		НовыйОбъект.НаименованиеСокращенноеДоп = СоответствиеДопРеквизитов1БД["Наименование сокращенное"];
	КонецЕсли; //rarus bonmak 15.04.2020 14456 --
	НовыйОбъект.Резидент = Истина; //rarus bonmak 15.04.2020 14456
	Если СоответствиеДопРеквизитов1БД["Иностранец"] <> Неопределено Тогда		// Иностранец //rarus bonmak 15.04.2020 14456 ++ 
		НовыйОбъект.Резидент = НЕ СоответствиеДопРеквизитов1БД["Иностранец"];
	КонецЕсли; //rarus bonmak 15.04.2020 14456 --
	Если СоответствиеДопРеквизитов1БД["Контактный телефон"] <> Неопределено Тогда		// Контактный телефон 
		НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.НомерТелефона = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.НомерТелефонаБезКодов = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Адрес электронной почты"] <> Неопределено Тогда		// Адрес электронной почты 
		НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Адрес электронной почты"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.АдресЭП = СоответствиеДопРеквизитов1БД["Адрес электронной почты"];
		Поз = СтрНайти(НоваяКИ.Представление, "@");
		Если Поз <> 0 Тогда
			НоваяКИ.ДоменноеИмяСервера = Сред(НоваяКИ.Представление, Поз+1);
		КонецЕсли;
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать контрагента  (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьКонтрагентаНовая(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetContragents");
	
	СоответствиеРеквизитовДляЗаписи = Новый Соответствие;

	ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
	НужноОбновлять = Ложь;
	
	ИзменилсяGUID = ?(ТекОбъект.IDExternalSystem = XDTOОбъект.GUID И ЗначениеЗаполнено(ТекОбъект.IDExternalSystem), Ложь, Истина);
	
	// ОБРАБОТАЕМ РЕКВИЗИТЫ 1БД
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ТекРеквизит.ИмяРекв <> "Наименование" Тогда //rarus bonmak 03.06.2020 16165 добавил условие
			Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				СоответствиеРеквизитовДляЗаписи.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		//rarus bonmak 15.04.2020 14456 ++
		Если ТекРеквизит.ИмяРекв = "Наименование" Тогда
			Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка["НаименованиеОсн"] Тогда
				СоответствиеРеквизитовДляЗаписи.Вставить("НаименованиеОсн", ЗначениеРеквизита);
			КонецЕсли;
		ИначеЕсли ТекРеквизит.ИмяРекв = "НаименованиеПолное" Тогда
			Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка["НаименованиеПолноеОсн"] Тогда
				СоответствиеРеквизитовДляЗаписи.Вставить("НаименованиеПолноеОсн", ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
		//rarus bonmak 15.04.2020 14456 --
	КонецЦикла;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);

	Если СоответствиеДопРеквизитов1БД["Юридический адрес"] <> Неопределено И НЕ ИзменилсяGUID Тогда		
		НоваяКИ = ТекОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,"Вид");
		Если НоваяКИ = Неопределено Тогда
			НоваяКИ = ТекОбъект.КонтактнаяИнформация.Добавить();
		КонецЕсли;
		Если НоваяКИ.Представление <> СоответствиеДопРеквизитов1БД["Юридический адрес"] Тогда
			НужноОбновлять = Истина;
		КонецЕсли;
		
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Юридический адрес"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.Страна = "РОССИЯ";
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Почтовый адрес"] <> Неопределено И НЕ ИзменилсяGUID Тогда		
		НоваяКИ = ТекОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,"Вид");
		Если НоваяКИ = Неопределено Тогда
			НоваяКИ = ТекОбъект.КонтактнаяИнформация.Добавить();
		КонецЕсли;
		Если НоваяКИ.Представление <> СоответствиеДопРеквизитов1БД["Почтовый адрес"] Тогда
			НужноОбновлять = Истина;
		КонецЕсли;
		
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Почтовый адрес"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.Страна = "РОССИЯ";
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Контактный телефон"] <> Неопределено Тогда		
		НоваяКИ = ТекОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,"Вид");
		Если НоваяКИ = Неопределено Тогда
			НоваяКИ = ТекОбъект.КонтактнаяИнформация.Добавить();
		КонецЕсли;
		Если НоваяКИ.Представление <> СоответствиеДопРеквизитов1БД["Контактный телефон"] Тогда
			НужноОбновлять = Истина;
		КонецЕсли;
		
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.НомерТелефона = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.НомерТелефонаБезКодов = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;		
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Адрес электронной почты"] <> Неопределено Тогда		
		НоваяКИ = ТекОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,"Вид");
		Если НоваяКИ = Неопределено Тогда
			НоваяКИ = ТекОбъект.КонтактнаяИнформация.Добавить();
		КонецЕсли;
		Если НоваяКИ.Представление <> СоответствиеДопРеквизитов1БД["Адрес электронной почты"] Тогда
			НужноОбновлять = Истина;
		КонецЕсли;
		
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Адрес электронной почты"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.АдресЭП = СоответствиеДопРеквизитов1БД["Адрес электронной почты"];
		Поз = СтрНайти(НоваяКИ.Представление, "@");
		Если Поз <> 0 Тогда
			НоваяКИ.ДоменноеИмяСервера = Сред(НоваяКИ.Представление, Поз+1);
		КонецЕсли;
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;		
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Наименование"] <> Неопределено Тогда
		//rarus bonmak 03.06.2020 16165 ++
		//Если ТекОбъект.Наименование <> СоответствиеДопРеквизитов1БД["Наименование"] Тогда
		//	СоответствиеРеквизитовДляЗаписи.Вставить("Наименование", СоответствиеДопРеквизитов1БД["Наименование"]);
		//КонецЕсли;
		//rarus bonmak 03.06.2020 16165 --
		Если ТекОбъект.НаименованиеДоп <> СоответствиеДопРеквизитов1БД["Наименование"] Тогда //rarus bonmak 15.04.2020 14456 ++
			СоответствиеРеквизитовДляЗаписи.Вставить("НаименованиеДоп", СоответствиеДопРеквизитов1БД["Наименование"]);
		КонецЕсли; //rarus bonmak 15.04.2020 14456 --
	КонецЕсли;	
	
	Если СоответствиеДопРеквизитов1БД["Наименование полное"] <> Неопределено Тогда
		Если ТекОбъект.НаименованиеПолное <> СоответствиеДопРеквизитов1БД["Наименование полное"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("НаименованиеПолное", СоответствиеДопРеквизитов1БД["Наименование полное"]);
		КонецЕсли;
		
		Если ТекОбъект.НаименованиеПолноеДоп <> СоответствиеДопРеквизитов1БД["Наименование полное"] Тогда //rarus bonmak 15.04.2020 14456 ++
			СоответствиеРеквизитовДляЗаписи.Вставить("НаименованиеПолноеДоп", СоответствиеДопРеквизитов1БД["Наименование полное"]);
		КонецЕсли; //rarus bonmak 15.04.2020 14456 --
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Наименование сокращенное"] <> Неопределено Тогда //rarus bonmak 15.04.2020 14456 ++
		Если ТекОбъект.НаименованиеСокращенноеДоп <> СоответствиеДопРеквизитов1БД["Наименование сокращенное"] Тогда 
			СоответствиеРеквизитовДляЗаписи.Вставить("НаименованиеСокращенноеДоп", СоответствиеДопРеквизитов1БД["Наименование сокращенное"]);
		КонецЕсли; 
	КонецЕсли; //rarus bonmak 15.04.2020 14456 --
	//rarus bonmak 15.04.2020 14456 ++
	ЗначРезидент = Истина;
	Если СоответствиеДопРеквизитов1БД["Иностранец"] <> Неопределено Тогда 
		ЗначРезидент = НЕ СоответствиеДопРеквизитов1БД["Иностранец"]; 
		//Если ТекОбъект.Резидент <> ЗначИностранец Тогда 
		//	СоответствиеРеквизитовДляЗаписи.Вставить("Резидент", ЗначИностранец);
		//КонецЕсли; 
	КонецЕсли; 
	Если ТекОбъект.Резидент <> ЗначРезидент Тогда 
		СоответствиеРеквизитовДляЗаписи.Вставить("Резидент", ЗначРезидент);
	КонецЕсли;
	//rarus bonmak 15.04.2020 14456 --
	
	Если НужноОбновлять ИЛИ	СоответствиеРеквизитовДляЗаписи.Количество() <> 0 Тогда	
		
		Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписи Цикл
			ТекОбъект[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата(); 		
		
		Попытка 
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать контрагента ("+ЭлементСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);		
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции

//// СПИСОК КОММЕРЧЕСКИХ ПРЕДЛОЖЕНИЙ

//rarus ozhnik 15888 10.06.2020 + 
Функция РазборОтветаСписокКоммерческоеПредложение(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Владелец = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetListOfQuotation" Тогда
		// Получим все элементы из списка
		ОбъектСписокКП = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Quotations", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектСписокКП Цикл
			РазобратьСтатусКП(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция Разобрать(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetListOfStatuses");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_СтатусыКПSPORT.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_СтатусыКПSPORT.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Создадим новый элемент 
		ОбъектСсылка = СоздатьСтатусКП(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	Иначе
		ОбъектСсылка = ОбновитьСтатусКП(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

//Функция СоздатьКП(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
//	
//	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfStatuses");
//	
//	НовыйОбъект = Справочники.Scan_СтатусыКПSPORT.СоздатьЭлемент();
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;
//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//	
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;
//		
//		НовыйОбъект.Записать();
//	Исключение
//		СообщениеОбОшибке = "Не удалось создать статус КП (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
//		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
//		Возврат Неопределено;
//	КонецПопытки;
//	Возврат НовыйОбъект.Ссылка;
//КонецФункции

//Функция ОбновитьусКП(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	
//	МассивКП = Новый Массив;
//	
//	Для Каждого КоммерческоеПредложение Из XDTOОбъект Цикл 
//		СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(КоммерческоеПредложение, Отказ, ИмяСобытияЖурналаРегистрации, "GetListOfQuotation");
//		МассивКП.Добавить(СтруктураРеквизитов);
//	КонецЦикла; 	
//	
//	Возврат МассивКП;
//	
//КонецФункции   
//rarus ozhnik 15888 10.06.2020 -

//// КОММЕРЧЕСКОЕ ПРЕДЛОЖЕНИЕ

//rarus ozhnik 15888 10.06.2020 + 
Функция РазборОтветаКоммерческоеПредложение(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Владелец = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetQuotation" Тогда
		//Получим все элементы из списка
		ОбъектКП = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДанныеQuotation", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		СсылкаНаКП = ПолучитьОбъектКП(ОбъектКП, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, Владелец);
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СсылкаНаКП;
	
КонецФункции

Функция ПолучитьОбъектКП(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Владелец) Экспорт
	
	Отказ = Ложь;
	
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetQuotation");
	
			
КонецФункции   

//rarus ozhnik 15888 10.06.2020 -

//rarus ozhnik 15888 16.06.2020 + 

//// СТАТУСЫ КП
Функция РазборОтветаСправочникСтатусыКП(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ВидСтатуса = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetListOfStatuses" Тогда
		//Получим все элементы из списка
		ОбъектСтатусы = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Статусы", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектСтатусы Цикл
			РазобратьСтатусКП(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;      	
		
КонецФункции

Функция РазобратьСтатусКП(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetListOfStatuses");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_СтатусыКПSPORT.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_СтатусыКПSPORT.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Создадим новый элемент 
		ОбъектСсылка = СоздатьСтатусКП(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	Иначе
		ОбъектСсылка = ОбновитьСтатусКП(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьСтатусКП(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfStatuses");
	
	НовыйОбъект = Справочники.Scan_СтатусыКПSPORT.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "СтатусCOW" или ТекРеквизит.ИмяРекв = "КодСтатуса" Тогда
			// не применимо
			продолжить;	
		КонецЕсли;
					 
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать статус КП (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьСтатусКП(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfStatuses");
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "СтатусCOW" или ТекРеквизит.ИмяРекв = "КодСтатуса" Тогда
			// не применимо
			продолжить;	
		КонецЕсли;

		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			Если ТекРеквизит.ИмяРекв = "СтатусCOW" или ТекРеквизит.ИмяРекв = "КодСтатуса" Тогда
				// не применимо
				продолжить;	
			КонецЕсли;

			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать статус КП (" + ЭлементСсылка + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции
//rarus ozhnik 15888 16.06.2020 -

//rarus ozhnik 15888 17.06.2020 + 

//// ТИПЫ ПРОДУКТОВ КП SPORT
Функция РазборОтветаСправочникТипыПродуктовКПSPORT(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ВидСтатуса = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetListOfProductTypeSPORT" Тогда
		//Получим все элементы из списка
		ОбъектТипыПродуктовКП = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ProductTypeSPORT", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ОбъектТипыПродуктовКП Цикл
			РазобратьТипПродуктаКПSPORT(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;      	
		
КонецФункции

Функция РазобратьТипПродуктаКПSPORT(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetListOfProductTypeSPORT");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ТипыПродуктовКПSPORT.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_ТипыПродуктовКПSPORT.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Создадим новый элемент 
		ОбъектСсылка = СоздатьТипПродуктаКПSPORT(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	Иначе
		ОбъектСсылка = ОбновитьТипПродуктаКПSPORT(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьТипПродуктаКПSPORT(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfProductTypeSPORT");
	
	НовыйОбъект = Справочники.Scan_ТипыПродуктовКПSPORT.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать тип продукта КП SPORT (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьТипПродуктаКПSPORT(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfProductTypeSPORT");
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать тип продукта КП SPORT (" + ЭлементСсылка + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции
//rarus ozhnik 15888 17.06.2020 -

//rarus ozhnik 15888 17.06.2020 + 

//// СПИСОК КП SPORT
Функция РазборОтветаСписокКПSPORT(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ВидСтатуса = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetListOfQuotation" Тогда
		//Получим все элементы из списка
		ОбъектСтатусы = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Quotations", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		МассивКП = Новый Массив;
		Для Каждого ТекЭлемент Из ОбъектСтатусы Цикл
			СсылкаВмассив = РазобратьСписокКПSPORT(ТекЭлемент, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			массивКП.Добавить(СсылкаВмассив);
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;      	
	возврат МассивКП;	
КонецФункции

Функция РазобратьСписокКПSPORT(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetListOfQuotation");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_КоммерческиеПредложения.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_КоммерческиеПредложения.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Создадим новый элемент 
		ОбъектСсылка = СоздатьЭлементСписокКПSPORT(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	Иначе
		ОбъектСсылка = ОбновитьЭлементСписокКПSPORT(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьЭлементСписокКПSPORT(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfQuotation");
	
	НовыйОбъект = Справочники.Scan_КоммерческиеПредложения.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать тип продукта КП SPORT (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьЭлементСписокКПSPORT(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetListOfQuotation");
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать Коммерческое предложение (" + ЭлементСсылка + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции
//rarus ozhnik 15888 17.06.2020 -

 
//// СПИСОК КП SPORT

//rarus ozhnik 15888 19.06.2020 + 
Функция РазборОтветаКПSPORT(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS, ВидСтатуса = Неопределено) Экспорт
	Если ИмяМетодаWS = "GetQuotation" Тогда
		//Получим все элементы из списка
		ОбъектСтатусы = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДанныеQuotation", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетодаWS); 
		Если Отказ Тогда 
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		ссылкаНаОбъект = РазобратьКПSPORT(ОбъектСтатусы, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		
		возврат ссылкаНаОбъект;
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;      	
		
КонецФункции

Функция РазобратьКПSPORT(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) Экспорт
	Отказ = Ложь;
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetQuotation");
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_КоммерческиеПредложения.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент = Справочники.Scan_КоммерческиеПредложения.ПустаяСсылка() Тогда
		//Элемента с таким GUID нет
		//Создадим новый элемент 
		ОбъектСсылка = СоздатьЭлементКПSPORT(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	Иначе
		ОбъектСсылка = ОбновитьЭлементКПSPORT(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
				
КонецФункции

Функция СоздатьЭлементКПSPORT(XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации)
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetQuotation");
	
	НовыйОбъект = Справочники.Scan_ТипыПродуктовКПSPORT.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
		
		НовыйОбъект.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось создать тип продукта КП SPORT (" + СтруктураРеквизитов.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов["Наименование"], СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	Возврат НовыйОбъект.Ссылка;
КонецФункции

Функция ОбновитьЭлементКПSPORT(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации) 
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов("GetQuotation");
	
	НужноОбновлять = Ложь;
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ТекРеквизит.ИмяРекв = "СписокПродуктов" Тогда
			Для каждого ПродуктКП Из СтруктураРеквизитов.СписокПродуктов Цикл
				//rarus ozhnik 16453 14.09.2020 + 
				Если ТипЗНч(ПродуктКП.Individuals) = Тип("СписокXDTO") Тогда
					Для каждого ИзделиеПродуктаКП Из ПродуктКП.Individuals Цикл
						НайденнаяСтрока = ЭлементСсылка.ИзделияПоПродуктам.Найти(ИзделиеПродуктаКП.GUID,"IDПродукта"); 	
						Если НайденнаяСтрока = неопределено Тогда
							НужноОбновлять = Истина;
							прервать;
						КонецЕсли; 
					КонецЦикла; 	
				КонецЕсли; 		 	
				//rarus ozhnik 16453 14.09.2020 -
			КонецЦикла;
			продолжить;
		КонецЕсли; 
		//rarus ozhnik 15888 14.07.2020 + 
		Если ТекРеквизит.ИмяРекв = "СтатусКП" Тогда
			Если   ЭлементСсылка.СтатусКП.IDExternalSystem <> СтруктураРеквизитов[ТекРеквизит.ИмяРекв].GUID тогда
				НужноОбновлять = Истина;
				Прервать;
			Иначе
				продолжить;
			КонецЕсли;
		КонецЕсли;			
		//rarus ozhnik 15888 14.07.2020 -
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
			НужноОбновлять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужноОбновлять Тогда
		ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			
			Если ТекРеквизит.ИмяРекв = "СписокПродуктов" Тогда
				Для каждого ПродуктКП Из СтруктураРеквизитов.СписокПродуктов Цикл
					IDПродуктаКП = ПродуктКП.ProductId;
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("IDПродуктаКП",IDПродуктаКП);
					НайденныеСтроки = ТекОбъект.ПродуктыКП.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество()=0 Тогда
						СтрокаПродукта = ТекОбъект.ПродуктыКП.Добавить();
					Иначе 
						СтрокаПродукта = НайденныеСтроки[0];
					КонецЕсли;
					СтрокаПродукта.ОписаниеПродукта = ПродуктКП.ProductDescription;
					СтрокаПродукта.Количество = ПродуктКП.Quantity;
					//rarus vikhle 09.03.2021 mt 17386 +++
					Если НЕ ПродуктКП.ProductTypeSPORT = Неопределено Тогда 
						СтрокаПродукта.ТипПродуктаSPORT = Справочники.Scan_ТипыПродуктовКПSPORT.НайтиПоРеквизиту("IDExternalSystem", ПродуктКП.ProductTypeSPORT.GUID);
					КонецЕсли;	
					//rarus vikhle 09.03.2021 mt 17386 ---
					СтрокаПродукта.IDПродуктаКП = IDПродуктаКП;
					Для каждого ПродуктКП Из СтруктураРеквизитов.СписокПродуктов Цикл
					//rarus ozhnik 16453 14.09.2020 + 
						Если ТипЗНч(ПродуктКП.Individuals) = Тип("СписокXDTO") Тогда
							текОбъект.ИзделияПоПродуктам.Очистить();
							Для каждого ИзделиеПродуктаКП Из ПродуктКП.Individuals Цикл
								НоваяСтрока = текОбъект.ИзделияПоПродуктам.Добавить(); 	
								НоваяСтрока.IDПродуктаКП = IDПродуктаКП;
								НоваяСтрока.IDПродукта = ИзделиеПродуктаКП.GUID;
								НоваяСтрока.Изделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct",ИзделиеПродуктаКП.GUID);
							КонецЦикла; 	
						КонецЕсли; 
					КонецЦикла;
					//rarus ozhnik 16453 14.09.2020 -
					КонецЦикла; 
				продолжить;
			КонецЕсли;
			
			//rarus ozhnik 15888 14.07.2020 + 
			Если ТекРеквизит.ИмяРекв = "СтатусКП" Тогда
				текОбъект.СтатусКП = Справочники.Scan_СтатусыКПSPORT.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов[ТекРеквизит.ИмяРекв].GUID);
				Продолжить;
			КонецЕсли;			
			//rarus ozhnik 15888 14.07.2020 -
			
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				
				ТекОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
				
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.ДатаОбновления = ТекущаяДатаСеанса(); //Rarus bonmak 01.08.2022 18726 АПК было ТекущаяДата()
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
		Исключение
			СообщениеОбОшибке = "Не удалось записать Коммерческое предложение (" + ЭлементСсылка + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ЭлементСсылка;
	
КонецФункции
//rarus ozhnik 15888 19.06.2020 -

//rarus agar 07.09.2020 15696 ++

#Область ЗаказНаЗавод
//Новые актуальные функции разбора заказа на завод от 23.09.2020

Функция ВызватьМетод_GetOrderToDelivery(ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт //rarus bonmak 16452 23.09.2020 ++
	
	ИмяМетода                    = "GetOrderToDelivery";
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetOrderToDelivery";
	РезультатВозврата = Неопределено; //возвращает Неопределено или ссылка на элемент
	
	ПараметрыМетода = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
	ПараметрыМетода.GUID = ПараметрыВызова.GUID;
		
	РезультатВызова = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, ПараметрыМетода, Отказ, ИмяСобытияЖурналаРегистрации);
	Если Не Отказ Тогда
		РезультатВозврата = РазборОтвета_GetOrderToDelivery(РезультатВызова, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
		Если Отказ Тогда
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, СообщениеОбОшибке);
		КонецЕсли;
	Иначе
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, РезультатВызова);
		Возврат Неопределено;
	КонецЕсли;
	Возврат РезультатВозврата; 	
КонецФункции //rarus bonmak 16452 23.09.2020 --

Функция РазборОтвета_GetOrderToDelivery(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 16452 23.09.2020 ++
	
	ЗаказПродукта = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ЗаказПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;
	
	ТекЗаказНаЗавод = Разобрать_ЗаказНаЗавод(ЗаказПродукта, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода);
	
	Возврат ТекЗаказНаЗавод;
	
КонецФункции //rarus bonmak 16452 23.09.2020 --

Функция Разобрать_ЗаказНаЗавод(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода) Экспорт //rarus bonmak 16452 23.09.2020 ++
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_ЗаказыНаЗавод.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент.Пустая() Тогда
		//Элемента с таким GUID нет
		//Если есть элемент с таким же наименованием, но пустым ID, то запишем в него ID
		НайденныйЭлемент = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(СтруктураРеквизитов.Наименование);
		Если НЕ НайденныйЭлемент.Пустая() И ЗначениеЗаполнено(НайденныйЭлемент.IDExternalSystem) Тогда
			НайденныйЭлемент = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка(); 
		КонецЕсли;
	КонецЕсли;
	
	ОбъектСсылка = СоздатьОбновитьЗаказНаЗавод(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода);
	
	Если Отказ Тогда
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов.Наименование, СтруктураРеквизитов.IDExternalSystem, СообщениеОбОшибке);
		Возврат Неопределено;	
	КонецЕсли;
		
	Возврат ОбъектСсылка;
	
КонецФункции //rarus bonmak 16452 23.09.2020 --

Функция СоздатьОбновитьЗаказНаЗавод(ЗаказНаЗаводСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода) //rarus bonmak 16452 23.09.2020 ++
	
	МассивРеквизитовСправочника     = ПолучитьМассивРеквизитов(ИмяМетода);
	СоответствиеРеквизитовДляЗаписи = Новый Соответствие;
	ТекТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.ПустаяСсылка();
	СоответствиеДопРеквизитов = ПолучитьСоответствиеДополнительныеХарактеристики(ЗаказНаЗаводСсылка);
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	СоответствиеКлючевыеДатыЗаказаНаЗавод = ПолучитьСоответствиеКлючевыеДаты(ЗаказНаЗаводСсылка);
	ЭтоНовыйЭлемент = Ложь;
	Если ЗаказНаЗаводСсылка.Пустая() Тогда
		ЭтоНовыйЭлемент = Истина;
	КонецЕсли;
	НужноОбновлять = Ложь;
	БылиИзменения  = Ложь;
	FFU_No_Confirmed 	= "";
	S_Ord_No_Confirmed 	= "";
	GUIDПродукта = ""; //rarus bonmak 13.11.2020 16797
	
	#Область Реквизиты1БД
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "Продукт" Тогда
			//rarus bonmak 13.11.2020 16797 ++
			Если СтруктураРеквизитов.Свойство(ТекРеквизит.ИмяРекв) Тогда
				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] <> Неопределено Тогда 
					GUIDПродукта = СтруктураРеквизитов[ТекРеквизит.ИмяРекв].GUID;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
			//rarus bonmak 13.11.2020 16797 --
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЗаказНаЗаводСсылка[ТекРеквизит.ИмяРекв] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область КлючевыеДаты
	
	Если СоответствиеДопРеквизитов1БД["ADDate"] <> Неопределено Тогда // ADD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ADD")] = СоответствиеДопРеквизитов1БД["ADDate"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["CDDate"] <> Неопределено Тогда // CDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD")] = СоответствиеДопРеквизитов1БД["CDDate"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["CDDateDeviated"] <> Неопределено Тогда //CDD2
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2")] = СоответствиеДопРеквизитов1БД["CDDateDeviated"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["DCD"] <> Неопределено Тогда //DCD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DCD")] = СоответствиеДопРеквизитов1БД["DCD"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["DDDate"] <> Неопределено ИЛИ СоответствиеДопРеквизитов1БД["DDDate"] <> Неопределено Тогда // DDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DDD")] = ?(СоответствиеДопРеквизитов1БД["DDDate"] = Неопределено, СоответствиеДопРеквизитов1БД["DDDate_Confirmed"], СоответствиеДопРеквизитов1БД["DDDate"]);
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["FactoryInvoiceDate"] <> Неопределено Тогда // Дата инвойса
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаИнвойса")] = СоответствиеДопРеквизитов1БД["FactoryInvoiceDate"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["FinishDate"] <> Неопределено ИЛИ СоответствиеДопРеквизитов1БД["DateOut"] <> Неопределено Тогда // FinishDate
		FinishDateЗначение = ?(СоответствиеДопРеквизитов1БД["FinishDate"] = Неопределено, СоответствиеДопРеквизитов1БД["DateOut"], СоответствиеДопРеквизитов1БД["FinishDate"]);
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate")] = FinishDateЗначение;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["PDDate"] <> Неопределено Тогда // PDD
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.PDD")] = СоответствиеДопРеквизитов1БД["PDDate"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["SDDate"] <> Неопределено Тогда //SDDate
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SDDate")] = СоответствиеДопРеквизитов1БД["SDDate"];
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Характеристики
	
	Если СоответствиеДопРеквизитов1БД["Assembly level"] <> Неопределено Тогда // Комплектность поставки
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.КомплектностьПоставки] = СоответствиеДопРеквизитов1БД["Assembly level"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["OrderType"] <> Неопределено Тогда // Тип заказа на завод
		ТекТипЗаказаНаЗавод = СоответствиеДопРеквизитов1БД["OrderType"];
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод] = ТекТипЗаказаНаЗавод;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["PartPeriod"] <> Неопределено Тогда // Part period
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.PartPeriod] = СоответствиеДопРеквизитов1БД["PartPeriod"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["RetailCustomerName"] <> Неопределено Тогда // Клиент, Market change 
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.Клиент] = СоответствиеДопРеквизитов1БД["RetailCustomerName"];
		СоответствиеДопРеквизитов[Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.MarketChange] = СоответствиеДопРеквизитов1БД["MarketChange"];
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Реквизиты
	
	Если СоответствиеДопРеквизитов1БД["DealerID_COW_Ссылка"] <> Неопределено И СоответствиеДопРеквизитов1БД["Дилер заказчик COW"] <> Неопределено Тогда // Заказчик COW
		ДилерЗаказчик_COW   = СоответствиеДопРеквизитов1БД["Дилер заказчик COW"]; // GUID дилера из 1БД
		DealerID_COW_Ссылка = СоответствиеДопРеквизитов1БД["DealerID_COW_Ссылка"];
		
		Если DealerID_COW_Ссылка.IDExternalSystem <> ДилерЗаказчик_COW Тогда
			ТекстОшибки = Нстр("ru = 'IDExternalSystem у дилера не совпадает со значением из 1ДБ';" +
			"en = 'Dealer IDExternalSystem does not match 1dB value'");
			Scan_ВебСервисы.scЗафиксироватьОшибку(ТекстОшибки, ИмяСобытияЖурналаРегистрации);
		ИначеЕсли ЗаказНаЗаводСсылка.ЗаказчикCOW <> DealerID_COW_Ссылка Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ЗаказчикCOW", DealerID_COW_Ссылка);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"] <> Неопределено Тогда // Код адреса доставки
		Если ЗаказНаЗаводСсылка.КодАдресаДоставки <> СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("КодАдресаДоставки", СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["PRU"] <> Неопределено Тогда // Место производства
		Если ЗаказНаЗаводСсылка.МестоПроизводства <> СоответствиеДопРеквизитов1БД["PRU"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("МестоПроизводства", СоответствиеДопРеквизитов1БД["PRU"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["StatusID"] <> Неопределено Тогда	 // Заводской статус
		Если ЗаказНаЗаводСсылка.ЗаводскойСтатусЗаказа <> СоответствиеДопРеквизитов1БД["StatusID"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ЗаводскойСтатусЗаказа", СоответствиеДопРеквизитов1БД["StatusID"]);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Прочее
	
	// Получение FFU и S-order для дальнейшей обработки
	Если СоответствиеДопРеквизитов1БД["FFU_No_Confirmed"] <> Неопределено Тогда
		Если ЭтоНовыйЭлемент Тогда	
			FFU_No_Confirmed = СоответствиеДопРеквизитов1БД["FFU_No_Confirmed"];
		Иначе
			FFUОпции = Справочники.Scan_ОпцииПродуктов.FFUОпции;
			ТипОпции = Справочники.Scan_ТипыОпций.FFUОпции;
			
			ДополнительнаяИнформацияПоЗаказамНаЗавод = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.FFUНомер;
			ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(СоответствиеДопРеквизитов1БД["FFU_No_Confirmed"], FFUОпции, ТипОпции, ЗаказНаЗаводСсылка, ДополнительнаяИнформацияПоЗаказамНаЗавод);
		КонецЕсли;	
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["S_Ord_No_Confirmed"] <> Неопределено Тогда
		Если ЭтоНовыйЭлемент Тогда	
			S_Ord_No_Confirmed = СоответствиеДопРеквизитов1БД["S_Ord_No_Confirmed"];
		Иначе
			SOrderОпции = Справочники.Scan_ОпцииПродуктов.SOrderОпции;
			ТипОпции    = Справочники.Scan_ТипыОпций.SOrderОпции;
			
			ДополнительнаяИнформацияПоЗаказамНаЗавод = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.SOrderНомер;
			ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(СоответствиеДопРеквизитов1БД["S_Ord_No_Confirmed"], SOrderОпции, ТипОпции, ЗаказНаЗаводСсылка, ДополнительнаяИнформацияПоЗаказамНаЗавод)
		КонецЕсли;
	КонецЕсли;	
	#КонецОбласти
	
	#Область ЗаписьВРегистры
	
	Если ЭтоНовыйЭлемент Тогда	
		НужноОбновлять = Истина;
	Иначе
		ЗаписатьДополнительныеХарактеристики(ЗаказНаЗаводСсылка, СоответствиеДопРеквизитов, БылиИзменения);
		Если БылиИзменения Тогда 
			НужноОбновлять = Истина;
		КонецЕсли;
		// СDDX рассчитываются при записи заказа на завод - заполним их
		СDDX = Справочники.Scan_ЗаказыНаЗавод.РассчитатьCDDX(СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD")],
		СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2")],
		ЗаказНаЗаводСсылка.НапоминаниеДилерамОтправлено);
		
		Если ЗначениеЗаполнено(СDDX) И СDDX <> СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDDX")] Тогда
			СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDDX")] = СDDX;
		КонецЕсли;
		
		// Запишем все ключевый даты в регистр
		ЗаписатьКлючевыеДаты(ЗаказНаЗаводСсылка, СоответствиеКлючевыеДатыЗаказаНаЗавод, БылиИзменения);
		
		Если БылиИзменения Тогда
			НужноОбновлять = Истина;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	Если    НужноОбновлять 
		Или СоответствиеРеквизитовДляЗаписи.Количество() <> 0 
		Тогда
		#Область ЗаписатьОбъект
		Если ЭтоНовыйЭлемент Тогда
			ЗаказНаЗаводОбъект = Справочники.Scan_ЗаказыНаЗавод.СоздатьЭлемент();	
		Иначе
			ЗаказНаЗаводОбъект = ЗаказНаЗаводСсылка.ПолучитьОбъект();	
		КонецЕсли;
		
		Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписи Цикл
			ЗаказНаЗаводОбъект[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
		КонецЦикла;
		
		ЗаказНаЗаводОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если Не ЗаказНаЗаводОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ЗаказНаЗаводОбъект.Записать();
			
			ЗаказНаЗаводСсылка = ЗаказНаЗаводОбъект.Ссылка;
			
			#Область ЗаписьВРегистры
			//если новый элемент, то записываем после объекта
			
			Если ЭтоНовыйЭлемент Тогда	
				// Запишем все доп. характеристики в регистр "История изменений"
				ЗаписатьДополнительныеХарактеристики(ЗаказНаЗаводСсылка, СоответствиеДопРеквизитов);
				
				// СDDX и CDDY рассчитываются при записи заказа на завод - заполним их
				СDDX = Справочники.Scan_ЗаказыНаЗавод.РассчитатьCDDX(СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD")],
				СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDD2")],
				ЗаказНаЗаводСсылка.НапоминаниеДилерамОтправлено);
				СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.CDDX")] = СDDX;
				
				Если ЗначениеЗаполнено(FFU_No_Confirmed) Тогда
					FFUОпции = Справочники.Scan_ОпцииПродуктов.FFUОпции;
					ТипОпции = Справочники.Scan_ТипыОпций.FFUОпции;
					ДополнительнаяИнформацияПоЗаказамНаЗавод = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.FFUНомер;	
					ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(FFU_No_Confirmed, FFUОпции, ТипОпции, ЗаказНаЗаводСсылка, ДополнительнаяИнформацияПоЗаказамНаЗавод);  
				КонецЕсли;
				Если ЗначениеЗаполнено(S_Ord_No_Confirmed) Тогда
					SOrderОпции = Справочники.Scan_ОпцииПродуктов.SOrderОпции;	
					ТипОпции 	= Справочники.Scan_ТипыОпций.SOrderОпции;
					ДополнительнаяИнформацияПоЗаказамНаЗавод = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.SOrderНомер;
					ПриПолученииОтветаИз1ДБОбработатьСвойства_FFUNoConfirmed_И_SOrdNoConfirmed(S_Ord_No_Confirmed, SOrderОпции, ТипОпции, ЗаказНаЗаводСсылка, ДополнительнаяИнформацияПоЗаказамНаЗавод);  
				КонецЕсли;
				
				// Запишем все ключевые даты в регистр
				ЗаписатьКлючевыеДаты(ЗаказНаЗаводСсылка, СоответствиеКлючевыеДатыЗаказаНаЗавод);
			КонецЕсли;
			
			#КонецОбласти	
			
			// Возможно нужно создать поступление на склад (появилась Finish date или Место производства)
			ТекИзделие = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(ЗаказНаЗаводСсылка);
			Если НЕ ТекИзделие.Пустая() Тогда
				FinishDate = СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate")];
				Если ЗначениеЗаполнено(FinishDate) Тогда
					Если НЕ Справочники.Scan_ЗаказыНаЗавод.ПоступлениеУжеЕсть(ТекИзделие, FinishDate) Тогда
						Документы.Scan_ДвижениеИзделий.СформироватьПоступлениеНаСклад(ТекИзделие, FinishDate);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			СообщениеОбОшибке = "Не удалось записать заказ на завод ("+ЗаказНаЗаводСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЗаказНаЗаводСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЗаказНаЗаводСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	//rarus bonmak 13.11.2020 16797 ++
	Если ЗначениеЗаполнено(GUIDПродукта) И НЕ ЗаказНаЗаводСсылка.Пустая() Тогда
		ТекИзделие = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(ЗаказНаЗаводСсылка);
		Если ТекИзделие.Пустая() Тогда
			//Найдем продукт
			НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", GUIDПродукта);
			Если НЕ НайденныйЭлемент.Пустая() Тогда
				ИзделиеОбъект = НайденныйЭлемент.ПолучитьОбъект();
				ИзделиеОбъект.ЗаказНаЗавод = ЗаказНаЗаводСсылка;
				Попытка
					ИзделиеОбъект.Записать();
				Исключение
					СообщениеОбОшибке = "Не удалось связать продукт ("+ GUIDПродукта +") с заказом на завод (" + СтруктураРеквизитов["IDExternalSystem"] + "): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЗаказНаЗаводСсылка);
					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЗаказНаЗаводСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
					Возврат Неопределено;
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	//rarus bonmak 13.11.2020 16797 --
	
	#КонецОбласти
	
	Возврат ЗаказНаЗаводСсылка;
	
КонецФункции //rarus bonmak 16452 23.09.2020 --

#КонецОбласти

#Область Продукт
//Новые актуальные функции разбора продукта от 23.09.2020

Функция ВызватьМетод_GetProduct(ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт //rarus bonmak 16452 23.09.2020 ++
	
	ИмяМетода                    = "GetProduct";
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetProduct";
	РезультатВозврата = Неопределено; //возвращает Неопределено или ссылка на элемент
	
	ПараметрыМетода = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
	ПараметрыМетода.GUID = ПараметрыВызова.GUID;
		
	РезультатВызова = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, ПараметрыМетода, Отказ, ИмяСобытияЖурналаРегистрации);
	Если Не Отказ Тогда
		РезультатВозврата = РазборОтвета_GetProduct(РезультатВызова, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
		Если Отказ Тогда
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, СообщениеОбОшибке);
		КонецЕсли;
	Иначе
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, РезультатВызова);
		Возврат Неопределено;
	КонецЕсли;
	Возврат РезультатВозврата; 	
КонецФункции //rarus bonmak 16452 23.09.2020 --

Функция РазборОтвета_GetProduct(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 16452 23.09.2020 ++	
	ОбъектПродукт = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.Продукт", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;
	
	ТекПродукт = Разобрать_Продукт(ОбъектПродукт, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода);
	
	Возврат ТекПродукт;
	
КонецФункции //rarus bonmak 16452 23.09.2020 --

Функция Разобрать_Продукт(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода) Экспорт //rarus bonmak 16452 23.09.2020 ++
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Если    Отказ 
		ИЛИ СтруктураРеквизитов = Неопределено 
		Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;
	КонецЕсли;
	НомерШассиИзделия = Неопределено;//rarus bonmak 06.08.2021 18073
	Если СтруктураРеквизитов["Изделие"] = Неопределено Тогда
		// Из 1БД не приходит изделие
		GUIDИзделия = Неопределено;
	Иначе	
		ОбъектИзделия = СтруктураРеквизитов["Изделие"].ТранспортноеСредство;
		// rarus tenkam 06.05.2020 mantis 16052 +++
		Если ОбъектИзделия = Неопределено Тогда
			// Возможно это Двигатель
			ОбъектИзделия = СтруктураРеквизитов["Изделие"].Двигатель;
			Если ОбъектИзделия = Неопределено Тогда
				СообщениеОбОшибке = "Неверный предмет продукта!";
				//rarus bonmak 16.04.2021 17643 ++
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
				Отказ = Истина;
				Возврат Неопределено;
			//Иначе
				//СообщениеОбОшибке = "Из 1БД передан двигатель " + ОбъектИзделия.GUID + ", " + ОбъектИзделия.Наименование;
				//rarus bonmak 16.04.2021 17643 --
			КонецЕсли;
			//rarus bonmak 16.04.2021 17643 ++
			//Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
			//Отказ = Истина;
			//Возврат Неопределено;
			//rarus bonmak 16.04.2021 17643 --
		Иначе
			НомерШассиИзделия = ОбъектИзделия.Шасси;//rarus bonmak 06.08.2021 18073	
		КонецЕсли;	
		// rarus tenkam 06.05.2020 mantis 16052 ---	
		GUIDИзделия = ОбъектИзделия.GUID;
	КонецЕсли;
	
	// Найдем изделие по GUID продукта
	НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент.Пустая() Тогда
		Если GUIDИзделия <> Неопределено Тогда		
			НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystem", GUIDИзделия);
			Если НайденныйЭлемент <> Справочники.Scan_Изделия.ПустаяСсылка() Тогда
				Если ЗначениеЗаполнено(НайденныйЭлемент.IDExternalSystemProduct) Тогда
					фСообщениеОбОшибке = "Для изделия " + GUIDИзделия + ", указан другой продукт " + НайденныйЭлемент.IDExternalSystemProduct + ", верный продукт " + СтруктураРеквизитов.IDExternalSystem;
					Scan_ВебСервисы.scЗафиксироватьОшибку(фСообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, НайденныйЭлемент.Наименование, GUIDИзделия, фСообщениеОбОшибке);
					//rarus bonmak 12.11.2020 16696 ++
					//Отказ = Истина;
					//Возврат Неопределено;
					//rarus bonmak 12.11.2020 16696 --
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
	
	ОбъектСсылка = СоздатьОбновитьПродуктИзделие(НайденныйЭлемент, XDTOОбъект,, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода, НомерШассиИзделия); //rarus bonmak 06.08.2021 18073 добавил 9 параметр
	
	Если Отказ Тогда
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов.Наименование, СтруктураРеквизитов.IDExternalSystem, СообщениеОбОшибке);
		Возврат Неопределено;	
	КонецЕсли;
		
	Возврат ОбъектСсылка;	
КонецФункции //rarus bonmak 16452 23.09.2020 --

Функция СоздатьОбновитьПродуктИзделие(ЭлементСсылка, XDTOОбъектПродукт = Неопределено, XDTOОбъектИзделие = Неопределено, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода, НомерШассиИзделия = Неопределено) //rarus bonmak 16452 23.09.2020 ++
	ЭтоНовыйЭлемент = Ложь;
	Если ЭлементСсылка.Пустая() Тогда
		ЭтоНовыйЭлемент = Истина;
	КонецЕсли;
	
	СоответствиеРеквизитовДляЗаписи = Новый Соответствие;
	ЗаказНаЗаводСсылка = ЭлементСсылка.ЗаказНаЗавод;
	СоответствиеКлючевыеДатыИзделия = ПолучитьСоответствиеКлючевыеДаты(ЭлементСсылка);
	СоответствиеДопРеквизитов1БД = Неопределено;
	НужноОбновлять = Ложь;
	СоответствиеРеквизитовДляЗаписиЗаказНаЗавод = Новый Соответствие;	
	
	#Область ОсновныеРеквизитыИзделия
	Если XDTOОбъектИзделие <> Неопределено Тогда
		МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
		
		Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
			Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
				Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
					ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.ПустаяСсылка();
				Иначе
					ЗначениеРеквизита = РазобратьМаркуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
				КонецЕсли;
			Иначе
				ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
			КонецЕсли;
			
			Если ТекРеквизит.ИмяРекв = "Наименование" Тогда
				Если НЕ ЭтоНовыйЭлемент Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> ЭлементСсылка[ТекРеквизит.ИмяРекв] Тогда
				СоответствиеРеквизитовДляЗаписи.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);
			КонецЕсли;
		КонецЦикла;
		СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъектИзделие.ДополнительныеРеквизиты);
		// Rarus tenkam 18.04.2022 mantis 19047 +++
		// Доп. реквизит БУ (Траспортное средство с пробегом) нужно игнорировать в методе GetChassis
		Если СоответствиеДопРеквизитов1БД <> Неопределено Тогда
			СоответствиеДопРеквизитов1БД.Удалить("Транспортное средство с пробегом");
		КонецЕсли;		
		// Rarus tenkam 18.04.2022 mantis 19047 ---
	КонецЕсли;
	#КонецОбласти
	
	#Область ОсновныеРеквизитыПродукта
	Если XDTOОбъектПродукт <> Неопределено Тогда
		Если ЭтоНовыйЭлемент Тогда
			МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода); 	
			
			Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
				Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
					Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
						ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.ПустаяСсылка();
					Иначе
						ЗначениеРеквизита = РазобратьМаркуПродукта(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
					КонецЕсли;
				ИначеЕсли ТекРеквизит.ИмяРекв = "ТипПродукта" Тогда
					Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
						ЗначениеРеквизита = Справочники.Scan_ТипыПродуктов.ПустаяСсылка();
					Иначе
						ЗначениеРеквизита = РазобратьТип(СтруктураРеквизитов[ТекРеквизит.ИмяРекв], СообщениеОбОшибке, "Веб-сервис.GetProductSubType");	
					КонецЕсли;
				// rarus tenkam 11.11.2020 mantis 16790 +++
				ИначеЕсли ТекРеквизит.ИмяРекв = "Наименование" Тогда
					ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
				// rarus tenkam 11.11.2020 mantis 16790 ---				
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					СоответствиеРеквизитовДляЗаписи.Вставить(ТекРеквизит.ИмяРекв, ЗначениеРеквизита);
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		//rarus bonmak 12.11.2020 16696 ++
		//Если Не ЗначениеЗаполнено(ЭлементСсылка.IDExternalSystemProduct) Тогда
		Если XDTOОбъектПродукт.GUID <> ЭлементСсылка.IDExternalSystemProduct Тогда
			//rarus bonmak 12.11.2020 16696 --
			СоответствиеРеквизитовДляЗаписи.Вставить("IDExternalSystemProduct", XDTOОбъектПродукт.GUID);
		КонецЕсли;
		//rarus bonmak 06.08.2021 18073 ++
		Если НомерШассиИзделия <> Неопределено Тогда 
			Если НомерШассиИзделия <> ЭлементСсылка.НомерИзделия Тогда
				//rarus bonmak 12.11.2020 16696 --
				СоответствиеРеквизитовДляЗаписи.Вставить("НомерИзделия", НомерШассиИзделия);
			КонецЕсли;		
		КонецЕсли;
		//rarus bonmak 06.08.2021 18073 --
		
		//Найдем заказ на завод по GUID продукта				
		ИмяМетодаНовое = "GetListOfOrderToDelivery";
		СтруктураПараметровЗаказНаЗавод = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое);
		СтруктураПараметровЗаказНаЗавод.ПродуктGUID =  XDTOОбъектПродукт.GUID;
		ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
		ОтказЗаказНаЗавод = Ложь;
		GUIDЗаказаНаЗавод = "";
		
		ТекЭлементОтветЗаказНаЗавод = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметровЗаказНаЗавод, ОтказЗаказНаЗавод, ИмяНовогоСобытияЖурналаРегистрации);
		Если НЕ ОтказЗаказНаЗавод Тогда
			// Получим список заказов на завод из 1БД (обработаем только первый заказ)
			ОбъектСписокЗаказов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекЭлементОтветЗаказНаЗавод, "Answer.Result.СписокБазовыхОбъектов.ЗаказыНаПродукт", ОтказЗаказНаЗавод, ИмяНовогоСобытияЖурналаРегистрации, ИмяМетодаНовое); 
			Если НЕ ОтказЗаказНаЗавод И ОбъектСписокЗаказов.Количество() <> 0 Тогда 
				GUIDЗаказаНаЗавод = ОбъектСписокЗаказов[0].GUID;
			КонецЕсли;
		Иначе
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяНовогоСобытияЖурналаРегистрации, , СтруктураПараметровЗаказНаЗавод.ПродуктGUID, "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации");	
		КонецЕсли;
		Если ЗначениеЗаполнено(GUIDЗаказаНаЗавод) Тогда
			ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.НайтиПоРеквизиту("IDExternalSystem", GUIDЗаказаНаЗавод);
			Если ЗаказНаЗаводСсылка.Пустая() Тогда
				СообщениеОбОшибкеЗаказНаЗавод = "Для продукта " + XDTOОбъектПродукт.GUID + " не найден заказ на завод " + GUIDЗаказаНаЗавод;
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибкеЗаказНаЗавод, ИмяСобытияЖурналаРегистрации);
				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибкеЗаказНаЗавод);	
				Если ЗначениеЗаполнено(ЭлементСсылка.ЗаказНаЗавод) Тогда
					ЗаказНаЗаводСсылка = ЭлементСсылка.ЗаказНаЗавод; 
				КонецЕсли;
			Иначе
				Если ЭлементСсылка.ЗаказНаЗавод <> ЗаказНаЗаводСсылка Тогда
					СоответствиеРеквизитовДляЗаписи.Вставить("ЗаказНаЗавод", ЗаказНаЗаводСсылка);
				КонецЕсли;
				МестоПроизводстваИзЗаказа = ЗаказНаЗаводСсылка.МестоПроизводства;
				Если ЗначениеЗаполнено(МестоПроизводстваИзЗаказа) Тогда
					Если ЭлементСсылка.МестоПроизводства <> МестоПроизводстваИзЗаказа Тогда				
						СоответствиеРеквизитовДляЗаписи.Вставить("МестоПроизводства", МестоПроизводстваИзЗаказа);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъектПродукт.ДополнительныеРеквизиты);
	КонецЕсли;
	
	
	#КонецОбласти
	
	Если НЕ ЗаказНаЗаводСсылка.Пустая() Тогда
		СоответствиеКлючевыеДатыЗаказаНаЗавод = ПолучитьСоответствиеКлючевыеДаты(ЗаказНаЗаводСсылка);
		
		#Область РеквизитыЗаказаНаЗавод
		Если СоответствиеДопРеквизитов1БД["Менеджер т/с"] <> Неопределено Тогда	 // Продавец заказчика	
			Если ЗаказНаЗаводСсылка.ПродавецЗаказчика <> СоответствиеДопРеквизитов1БД["Менеджер т/с"] Тогда
				СоответствиеРеквизитовДляЗаписиЗаказНаЗавод.Вставить("ПродавецЗаказчика", СоответствиеДопРеквизитов1БД["Менеджер т/с"]);
			КонецЕсли;
		КонецЕсли;
		Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда //Заказчик (из СОП)
			СсылкаНаСОП = СоответствиеДопРеквизитов1БД["СОП"];
			
			Если ЗначениеЗаполнено(СсылкаНаСОП) И ЗаказНаЗаводСсылка.Заказчик <> СсылкаНаСОП.Владелец Тогда
				СоответствиеРеквизитовДляЗаписиЗаказНаЗавод.Вставить("Заказчик", СсылкаНаСОП.Владелец);
				//rarus bonmak 09.08.2021 16834 СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаСОП")] = СсылкаНаСОП.ДатаНачала;
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти

	КонецЕсли;
	
	#Область КлючевыеДаты
	
	Если СоответствиеДопРеквизитов1БД["DeliveryDate"] <> Неопределено Тогда		// SoW 
		СоответствиеКлючевыеДатыИзделия[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.SoW")] = СоответствиеДопРеквизитов1БД["DeliveryDate"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Заводская гарантия, действительна до"] <> Неопределено Тогда		// WED
		СоответствиеКлючевыеДатыИзделия[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.WED")] = СоответствиеДопРеквизитов1БД["Заводская гарантия, действительна до"];	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ДополнительныеРеквизиты
	ПризнакБУ = ЭлементСсылка.БУ; 
	//rarus bonmak 14375 07.08.2020 ++
	Если СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"] <> Неопределено Тогда 
		Если ЭлементСсылка.БУ <> СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"] Тогда  		 
			СоответствиеРеквизитовДляЗаписи.Вставить("БУ", СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"]);
		КонецЕсли;
		ПризнакБУ = СоответствиеДопРеквизитов1БД["Транспортное средство с пробегом"]
	КонецЕсли;
	//rarus bonmak 14375 07.08.2020 --
	#Область КлючевыеДатыЗаказаНаЗавод
	Если НЕ ЗаказНаЗаводСсылка.Пустая() Тогда
		Если СоответствиеДопРеквизитов1БД["Дата передачи клиенту"] <> Неопределено Тогда	// Дата продажи клиенту
			СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту")] = СоответствиеДопРеквизитов1БД["Дата передачи клиенту"];
		КонецЕсли;
		Если СоответствиеДопРеквизитов1БД["Дата продажи дилеру"] <> Неопределено Тогда	// Дата продажи изделия
			// rarus tenkam 14.05.2020 mantis 16084 +++ 		
			ДатаПродажиИзделияСтарая = СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")];
			
			Если НЕ ПризнакБУ Тогда
				Если ДатаПродажиИзделияСтарая = Неопределено ИЛИ ДатаПродажиИзделияСтарая = Дата(1,1,1) Тогда
					СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")] = СоответствиеДопРеквизитов1БД["Дата продажи дилеру"];		
				КонецЕсли;
			КонецЕсли;
			//СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия")] = СоответствиеДопРеквизитов1БД["Дата продажи дилеру"];			
			// rarus tenkam 14.05.2020 mantis 16084 ---
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти	
	Если СоответствиеДопРеквизитов1БД["Вид тахографа"] <> Неопределено Тогда	// Тахограф с завода Скания
		Если ЭлементСсылка.ТахографСЗаводаСкания <> СоответствиеДопРеквизитов1БД["Вид тахографа"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ТахографСЗаводаСкания", СоответствиеДопРеквизитов1БД["Вид тахографа"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"] <> Неопределено Тогда	// Номер ЭРА ГЛОНАСС
		Если ЭлементСсылка.НомерЭРАГЛОНАСС <> СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("НомерЭРАГЛОНАСС", СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Логистический тип продукта"] <> Неопределено Тогда // Тип продукта логистический
		Если ЭлементСсылка.ТипПродуктаЛогистический <> СоответствиеДопРеквизитов1БД["Логистический тип продукта"] Тогда
			Если НЕ ЭлементСсылка.НеОбновлятьЛогистическиеТипыИз1БД Тогда
				СоответствиеРеквизитовДляЗаписи.Вставить("ТипПродуктаЛогистический", СоответствиеДопРеквизитов1БД["Логистический тип продукта"]);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"] <> Неопределено Тогда	// Типы маркетинговые
		Если ЭлементСсылка.ТипыМаркетинговые <> СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ТипыМаркетинговые", СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Модель"] <> Неопределено Тогда	// Модель продукта
		Если ЭлементСсылка.МодельПродукта <> СоответствиеДопРеквизитов1БД["Модель"] Тогда
			Если НЕ ЭлементСсылка.НеОбновлятьМоделиИз1БД Тогда
				СоответствиеРеквизитовДляЗаписи.Вставить("МодельПродукта", СоответствиеДопРеквизитов1БД["Модель"]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Себестоимость логистическая"] <> Неопределено Тогда	// Себестоимость логистическая
		Если ЭлементСсылка.СебестоимостьЛогистическая <> СоответствиеДопРеквизитов1БД["Себестоимость логистическая"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("СебестоимостьЛогистическая", СоответствиеДопРеквизитов1БД["Себестоимость логистическая"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда	// СОП
		СОППродукта = СоответствиеДопРеквизитов1БД["СОП"];
		Если ЭлементСсылка.СОП <> СОППродукта И НЕ ПризнакБУ Тогда	// Для БУ не обновляем			
			СоответствиеРеквизитовДляЗаписи.Вставить("СОП", СОППродукта);
		КонецЕсли;
	КонецЕсли;
	//rarus bonmak 17615 19.05.2021 ++
	//Если СоответствиеДопРеквизитов1БД["Спецификация"] <> Неопределено Тогда	// Спецификация продукта
	//	Если ЭлементСсылка.СпецификацияПродукта <> СоответствиеДопРеквизитов1БД["Спецификация"] Тогда
	//		СоответствиеРеквизитовДляЗаписи.Вставить("СпецификацияПродукта", СоответствиеДопРеквизитов1БД["Спецификация"]);
	//	КонецЕсли;
	//КонецЕсли;
	//rarus bonmak 17615 19.05.2021 --
	Если СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"] <> Неопределено Тогда	// Стоимость продажи
		Если ЭлементСсылка.СтоимостьПродажи <> СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("СтоимостьПродажи", СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип ГИБДД"] <> Неопределено Тогда	// Тип ГИБДД
		Если ЭлементСсылка.ТипГИБДД <> СоответствиеДопРеквизитов1БД["Тип ГИБДД"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ТипГИБДД", СоответствиеДопРеквизитов1БД["Тип ГИБДД"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип кабины"] <> Неопределено Тогда	// Тип кабины
		Если ЭлементСсылка.ТипКабины <> СоответствиеДопРеквизитов1БД["Тип кабины"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ТипКабины", СоответствиеДопРеквизитов1БД["Тип кабины"]);
		КонецЕсли;
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["Тип кузова"] <> Неопределено Тогда	// Тип кузова
		Если ЭлементСсылка.ТипКузова <> СоответствиеДопРеквизитов1БД["Тип кузова"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ТипКузова", СоответствиеДопРеквизитов1БД["Тип кузова"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип продукта"] <> Неопределено Тогда		// Тип продукта
		Если ЭлементСсылка.ТипПродукта <> СоответствиеДопРеквизитов1БД["Тип продукта"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ТипПродукта", СоответствиеДопРеквизитов1БД["Тип продукта"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["EngineNo"] <> Неопределено Тогда	// Номер двигателя ТС
		Если ЭлементСсылка.НомерДвигателяТС <> СоответствиеДопРеквизитов1БД["EngineNo"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("НомерДвигателяТС", СоответствиеДопРеквизитов1БД["EngineNo"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["VIN-код"] <> Неопределено Тогда	// VIN, VIN2
		Если ЭлементСсылка.VIN <> СоответствиеДопРеквизитов1БД["VIN-код"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("VIN", СоответствиеДопРеквизитов1БД["VIN-код"]);
		КонецЕсли;
		Если ЭлементСсылка.VIN2 <> СоответствиеДопРеквизитов1БД["VIN-код"] 
			И ЭлементСсылка.VIN2 = "" Тогда		// rarus tenkam 09.07.2020 mantis 16296 +
			СоответствиеРеквизитовДляЗаписи.Вставить("VIN2", СоответствиеДопРеквизитов1БД["VIN-код"]);
		КонецЕсли;
	КонецЕсли;
	//rarus BProg_Dekin 06.05.2020 mantis 0014916 ++ заполнение доп. реквизита "Топливо"
	Если СоответствиеДопРеквизитов1БД["Топливо"] <> Неопределено Тогда	// Топливо
		//rarus vikhle 25.08.2020 mt 14916 +++
		Если ТипЗнч(СоответствиеДопРеквизитов1БД["Топливо"]) = Тип("СправочникСсылка.Scan_ТипыТопливаДвигателейПродуктов") Тогда
			ТипТоплива = СоответствиеДопРеквизитов1БД["Топливо"]; 
		ИначеЕсли ТипЗнч(СоответствиеДопРеквизитов1БД["Топливо"]) = Тип("Строка") Тогда
			ТипТоплива = Справочники.Scan_ТипыТопливаДвигателейПродуктов.ПустаяСсылка(); 
			ОтправитьПисьмоОТипеТоплива(ЭлементСсылка.НомерИзделия,СоответствиеДопРеквизитов1БД["Топливо"]);
		КонецЕсли;
		
		Если ЭлементСсылка.ТипТопливаДвигателя <> ТипТоплива Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ТипТопливаДвигателя", ТипТоплива);
		КонецЕсли;
		//rarus vikhle 25.08.2020 mt 14916 ---
		//rarus BProg_Dekin 06.05.2020 mantis 0014916 --
	КонецЕсли;
	//rarus BProg_Dekin 27.05.2020 mantis 0015893 ++ Получение доп. реквизита СегментРынка
	Если СоответствиеДопРеквизитов1БД["СегментРынка"] <> Неопределено Тогда	// Топливо
		Если ЭлементСсылка.СегментРынкаПродуктов <> СоответствиеДопРеквизитов1БД["СегментРынка"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("СегментРынкаПродуктов", СоответствиеДопРеквизитов1БД["СегментРынка"]);
		КонецЕсли;
	КонецЕсли;
	//rarus BProg_Dekin 27.05.2020 mantis 0015893 --	
	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке +	
	Если СоответствиеДопРеквизитов1БД["Product id"] <> Неопределено Тогда	
		Если ЭлементСсылка.IDПродуктаКП <> СоответствиеДопРеквизитов1БД["Product id"] Тогда  		 
			СоответствиеРеквизитовДляЗаписи.Вставить("IDПродуктаКП", СоответствиеДопРеквизитов1БД["Product id"]);
		КонецЕсли;
	КонецЕсли;
	//rarus ozhnik 15888 01.07.2020 привязка к соглашению о поставке -
	//rarus agar 14.08.2020 16138 ++
	Если СоответствиеДопРеквизитов1БД["Уровень токсичности"] <> Неопределено Тогда 
		Если ЭлементСсылка.ЭкологическийКласс <> СоответствиеДопРеквизитов1БД["Уровень токсичности"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ЭкологическийКласс", СоответствиеДопРеквизитов1БД["Уровень токсичности"]);
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Цвет кабины ПТС"] <> Неопределено Тогда 
		Если ЭлементСсылка.ЦветКабиныПТС <> СоответствиеДопРеквизитов1БД["Цвет кабины ПТС"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ЦветКабиныПТС", СоответствиеДопРеквизитов1БД["Цвет кабины ПТС"]);
		КонецЕсли;
	КонецЕсли;
	//rarus agar 14.08.2020 16138 --	
	//rarus vikhle 02.11.2020 mt 16181 +++
	Если СоответствиеДопРеквизитов1БД["Quotation number"] <> Неопределено Тогда	
		Если ЭлементСсылка.НомерКП <> СоответствиеДопРеквизитов1БД["Quotation number"] Тогда  		 
			СоответствиеРеквизитовДляЗаписи.Вставить("НомерКП", СоответствиеДопРеквизитов1БД["Quotation number"]);
		КонецЕсли;
	КонецЕсли;
	//rarus vikhle 02.11.2020 mt 16181 ---
	
	Если СоответствиеДопРеквизитов1БД["DLV"] <> Неопределено Тогда //rarus bonmak 16719 04.01.2021 ++ 
		Если ЭлементСсылка.DLV <> СоответствиеДопРеквизитов1БД["DLV"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("DLV", СоответствиеДопРеквизитов1БД["DLV"]);
		КонецЕсли;
	// rarus tenkam 17.02.2021 mantis 17190 +++  	
	Иначе
		Если НЕ ЗначениеЗаполнено(ЭлементСсылка.DLV) Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("DLV", "DDP");
		КонецЕсли;
	// rarus tenkam 17.02.2021 mantis 17190 ---
	КонецЕсли; //rarus bonmak 16719 04.01.2021 --
	
	// rarus agar 17.08.2021 17205 ++
	Если СоответствиеДопРеквизитов1БД["ЭПТС"] <> Неопределено Тогда
		Если ЭлементСсылка.ЭПТС <> СоответствиеДопРеквизитов1БД["ЭПТС"] Тогда
			СоответствиеРеквизитовДляЗаписи.Вставить("ЭПТС", СоответствиеДопРеквизитов1БД["ЭПТС"]);
		КонецЕсли;
	КонецЕсли;
	// rarus agar 17.08.2021 17205 --
	
	#КонецОбласти 	
	
	#Область ЗаписатьКлючевыеДаты
	//если не новый элемент, то записываем до изменения объекта
	
	Если ЭтоНовыйЭлемент Тогда	
		НужноОбновлять = Истина;
	Иначе
		ЗаписатьКлючевыеДаты(ЭлементСсылка.Ссылка, СоответствиеКлючевыеДатыИзделия, НужноОбновлять);
	КонецЕсли;
	
	#КонецОбласти
	
	
	Если НужноОбновлять ИЛИ СоответствиеРеквизитовДляЗаписи.Количество() <> 0 Тогда	
		#Область ЗаписатьОбъект
		Если ЭтоНовыйЭлемент Тогда
			ТекОбъект = Справочники.Scan_Изделия.СоздатьЭлемент();	
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();	
		КонецЕсли;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписи Цикл
			ТекОбъект[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
		КонецЦикла;
		
		СформированноеНаименование = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(ТекОбъект);
		Если СформированноеНаименование <> "" Тогда
			ТекОбъект.Наименование = СформированноеНаименование;
		КонецЕсли;
		
		Попытка 
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			ТекОбъект.ДополнительныеСвойства.Вставить("ИсточникНомерИзделия", ИмяМетода); //rarus bonmak 10.08.2021 18073
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
			#Область ЗаписатьКлючевыеДаты
			//если новый элемент, то записываем после объекта
			
			Если ЭтоНовыйЭлемент Тогда	
				ЗаписатьКлючевыеДаты(ЭлементСсылка, СоответствиеКлючевыеДатыИзделия, НужноОбновлять);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) И ЗначениеЗаполнено(ЭлементСсылка) Тогда
				FinishDate = СоответствиеКлючевыеДатыЗаказаНаЗавод[ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.FinishDate")];  
				Если ЗначениеЗаполнено(FinishDate) Тогда
					Если НЕ Справочники.Scan_ЗаказыНаЗавод.ПоступлениеУжеЕсть(ЭлементСсылка, FinishDate) Тогда
						Документы.Scan_ДвижениеИзделий.СформироватьПоступлениеНаСклад(ЭлементСсылка, FinishDate);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			#КонецОбласти		
		Исключение
			ВыдаватьОшибку = Истина;
			Если НЕ Scan_ПраваИНастройки.Scan_Право("КонтролироватьЗагрузкуПродуктовБезТипаИНаименования") Тогда
				Если НЕ ЗначениеЗаполнено(ТекОбъект.Наименование) ИЛИ НЕ ЗначениеЗаполнено(ТекОбъект.ТипПродукта) Тогда
					ВыдаватьОшибку = Ложь;
				КонецЕсли;	
			КонецЕсли;
			Если ВыдаватьОшибку Тогда //rarus bonmak 14.04.2020 15936 добавил условие 
				СообщениеОбОшибке = "Не удалось записать изделие  (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //rarus bonmak 14773 15.08.2019
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);	
				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ?(XDTOОбъектИзделие = Неопределено, ТекОбъект.IDExternalSystemProduct, 
				ТекОбъект.IDExternalSystem), СообщениеОбОшибке); //rarus bonmak 14773 15.08.2019 изменил параметры 
			КонецЕсли;
			Возврат Неопределено;
		КонецПопытки;
		#КонецОбласти
		
		#Область ОбновитьКоммерческиеПредложения
		Справочники.Scan_КоммерческиеПредложения.ОбновитьТабличныеЧастиКП(ЭлементСсылка); //rarus vikhle 28.09.2020 mt 16181	
		#КонецОбласти
		
	КонецЕсли;
	#Область ЗаписьЗаказаНаЗавод
	Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда
		ЗаписатьКлючевыеДаты(ЗаказНаЗаводСсылка, СоответствиеКлючевыеДатыЗаказаНаЗавод);
		Если СоответствиеРеквизитовДляЗаписиЗаказНаЗавод.Количество() <> 0 Тогда	
			
			ТекОбъектЗаказНаЗавод = ЗаказНаЗаводСсылка.ПолучитьОбъект();	
			
			ТекОбъектЗаказНаЗавод.ДатаОбновления = ТекущаяДата();
			
			Для Каждого ТекДопРеквизит Из СоответствиеРеквизитовДляЗаписиЗаказНаЗавод Цикл
				ТекОбъектЗаказНаЗавод[ТекДопРеквизит.Ключ] = ТекДопРеквизит.Значение;
			КонецЦикла;
			
			Попытка
				Если Не ТекОбъектЗаказНаЗавод.ПроверитьЗаполнение() Тогда
					ТекМассив = ПолучитьСообщенияПользователю(Истина);
					ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
				КонецЕсли;
				
				ТекОбъектЗаказНаЗавод.Записать();
			Исключение
				СообщениеОбОшибкеЗаказНаЗавод = "При обновлении продукта, не удалось записать заказ на завод ("+ЗаказНаЗаводСсылка+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибкеЗаказНаЗавод, ИмяСобытияЖурналаРегистрации, ЗаказНаЗаводСсылка);
				Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЗаказНаЗаводСсылка, ЗаказНаЗаводСсылка.IDExternalSystem, СообщениеОбОшибкеЗаказНаЗавод);
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти

	Возврат ЭлементСсылка;
КонецФункции //rarus bonmak 16452 23.09.2020 --

#КонецОбласти

#Область Шасси
//Новые актуальные функции разбора изделия от 23.09.2020

Функция ВызватьМетод_GetChassis(ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт //rarus bonmak 16452 23.09.2020 ++
	
	ИмяМетода                    = "GetChassis";
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetChassis";
	РезультатВозврата = Неопределено; //возвращает Неопределено или ссылка на элемент
	
	ПараметрыМетода = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
	ПараметрыМетода.GUID = ПараметрыВызова.GUID;
	
	РезультатВызова = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, ПараметрыМетода, Отказ, ИмяСобытияЖурналаРегистрации);
	Если Не Отказ Тогда
		РезультатВозврата = РазборОтвета_GetChassis(РезультатВызова, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
		Если Отказ Тогда
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, СообщениеОбОшибке);
		КонецЕсли;
	Иначе
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, РезультатВызова);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатВозврата;
КонецФункции //rarus bonmak 16452 23.09.2020 --

Функция РазборОтвета_GetChassis(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 16452 23.09.2020 ++
		
	ОбъектИзделие = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ТранспортноеСредствоИнфо", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;
	
	ТекИзделие = Разобрать_Изделие(ОбъектИзделие, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода);
	
	Возврат ТекИзделие;
	
КонецФункции //rarus bonmak 16452 23.09.2020 --

Функция Разобрать_Изделие(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода) Экспорт //rarus bonmak 16452 23.09.2020 ++
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если    Отказ 
		Или СтруктураРеквизитов = Неопределено 
		Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;
	КонецЕсли;

	НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	Если НайденныйЭлемент.Пустая() Тогда
		//Найдем продукт по гуид шасси
		ИмяМетодаНовое = "GetListOfProduct";
		СтруктураПараметровПродукт = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетодаНовое);
		Для Каждого Строка Из СтруктураПараметровПродукт Цикл
			СтруктураПараметровПродукт.Вставить(Строка.Ключ, Неопределено);
		КонецЦикла;
		
		СтруктураПараметровПродукт.Вставить("ТСGUID", СтруктураРеквизитов.IDExternalSystem);
		СтруктураПараметровПродукт.Вставить("Проверка", Ложь);

		ИмяНовогоСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетодаНовое;
		GUIDПродукт = "";
		
		ТекЭлементОтветПродукт = Scan_ВебСервисы.ВызватьМетод(ИмяМетодаНовое, СтруктураПараметровПродукт, Отказ, ИмяНовогоСобытияЖурналаРегистрации);
		Если НЕ Отказ Тогда
			ОбъектСписокПродуктов = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекЭлементОтветПродукт, "Answer.Result.СписокБазовыхОбъектов.Продукты", Отказ, ИмяНовогоСобытияЖурналаРегистрации, ИмяМетодаНовое); 
			Если НЕ Отказ И ОбъектСписокПродуктов.Количество() <> 0 Тогда 
				GUIDПродукт = ОбъектСписокПродуктов[0].GUID;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(GUIDПродукт) Тогда
			НайденныйЭлемент = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct", GUIDПродукт);
			Если НЕ НайденныйЭлемент.Пустая() Тогда
				Если ЗначениеЗаполнено(НайденныйЭлемент.IDExternalSystem) Тогда
					фСообщениеОбОшибке = "Для продукта " + GUIDПродукт + ", указано другое изделие " + НайденныйЭлемент.IDExternalSystem + ", верное изделие " + СтруктураРеквизитов.IDExternalSystem;
					Scan_ВебСервисы.scЗафиксироватьОшибку(фСообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
					Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, НайденныйЭлемент.Наименование, GUIDПродукт, фСообщениеОбОшибке);
					//rarus bonmak 12.11.2020 16696 ++
					//Отказ = Истина;
					//Возврат Неопределено;
					//rarus bonmak 12.11.2020 16696 --
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
		
	ОбъектСсылка = СоздатьОбновитьПродуктИзделие(НайденныйЭлемент,, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода);
	
	Если Отказ Тогда
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов.Наименование, СтруктураРеквизитов.IDExternalSystem, СообщениеОбОшибке);
		Возврат Неопределено;	
	КонецЕсли;
		
	Возврат ОбъектСсылка;	
КонецФункции //rarus bonmak 16452 23.09.2020 --

#КонецОбласти

#Область Регионы
//// РЕГИОНЫ
Процедура ВызватьМетод_GetListOfRegions(ДопПараметры) Экспорт //rarus bonmak 07.01.2021 16625 ++
	ИмяМетода = "GetListOfRegions";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	Если НЕ Отказ Тогда
		РазборОтветаСправочникРегионы(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	КонецЕсли;	
КонецПроцедуры //rarus bonmak 07.01.2021 16625 --

Процедура РазборОтветаСправочникРегионы(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) Экспорт //rarus bonmak 07.01.2021 16625 ++		
	Регионы = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Регион", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода); 
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат;
	КонецЕсли;
	Для Каждого XDTOОбъект Из Регионы Цикл 
		Результат = РазобратьРегион(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ);
	КонецЦикла;
КонецПроцедуры //rarus bonmak 07.01.2021 16625 --

Функция РазобратьРегион(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, Отказ) Экспорт //rarus bonmak 07.01.2021 16625 ++
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.Scan_Регионы.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	
	ЭлементСсылка = СоздатьОбновитьРегион(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат ЭлементСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //rarus bonmak 07.01.2021 16625 --

Функция СоздатьОбновитьРегион(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода) //rarus bonmak 07.01.2021 16625 ++
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "ФедеральныйОкруг" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
				Продолжить;
			КонецЕсли;
			
			ФО = СоздатьОбновитьФО(СтруктураРеквизитов[ТекРеквизит.ИмяРекв]);
			Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = ФО Тогда
				СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
			Иначе
				СтруктураРеквизитов.Вставить(ТекРеквизит.ИмяРекв, ФО);
			КонецЕсли;
		Иначе
			Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв] Тогда
				СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_Регионы.СоздатьЭлемент();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата(); 
				
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать регион (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;	
КонецФункции //rarus bonmak 07.01.2021 16625 --

Функция СоздатьОбновитьФО(XDTOОбъект)//rarus bonmak 07.01.2021 16625 ++
	ЭлементСсылка = Справочники.Scan_ФедеральныеОкруга.НайтиПоРеквизиту("IDExternalSystem", XDTOОбъект.GUID);

	СтруктураРеквизитов = Новый Структура();

	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов();
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ЭлементСсылка[ТекРеквизит.ИмяРекв] <> XDTOОбъект[ТекРеквизит.ИмяXML] Тогда
			СтруктураРеквизитов.Вставить(ТекРеквизит.ИмяРекв, XDTOОбъект[ТекРеквизит.ИмяXML]);
		КонецЕсли;
	КонецЦикла;
	Если ЭлементСсылка["Описание"] <> XDTOОбъект["Описание"] Тогда
		СтруктураРеквизитов.Вставить("Описание", XDTOОбъект["Описание"]);
	КонецЕсли;
	Если ЭлементСсылка["НаименованиеАнглийское"] <> XDTOОбъект["НаименованиеАнглийское"] Тогда
		СтруктураРеквизитов.Вставить("НаименованиеАнглийское", XDTOОбъект["НаименованиеАнглийское"]);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_ФедеральныеОкруга.СоздатьЭлемент();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата(); 
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать ФО (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Федеральные округа", ЭлементСсылка);	
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB("Федеральные округа", ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЭлементСсылка;		
КонецФункции //rarus bonmak 07.01.2021 16625 --
#КонецОбласти

// rarus agar 12.08.2021 17205 ++
#Область ЭПТС

// GetEPTS
Функция ВызватьМетод_GetEPTS(ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ИмяМетода                    = "GetEPTS";
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetEPTS";
	
	РезультатВозврата = Неопределено;
	
	ПараметрыМетода = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
	ПараметрыМетода.GUID = ПараметрыВызова.GUID;
		
	РезультатВызова = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, ПараметрыМетода, Отказ, ИмяСобытияЖурналаРегистрации);
	Если Не Отказ Тогда
		РезультатВозврата = РазборОтвета_GetEPTS(РезультатВызова, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода);
		Если Отказ Тогда
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, СообщениеОбОшибке);
		КонецЕсли;
	Иначе
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, РезультатВызова);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатВозврата;
	
КонецФункции

Функция РазборОтвета_GetEPTS(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода)
	
	ОбъектЭПТС = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДанныеЭПТС", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;
	
	ТекЭПТС = Разобрать_ЭПТС(ОбъектЭПТС, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода);
	
	Возврат ТекЭПТС;
	
КонецФункции

Функция Разобрать_ЭПТС(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода) Экспорт
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Если    Отказ
		Или СтруктураРеквизитов = Неопределено 
		Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;
	КонецЕсли;

	НайденныйЭлемент = Справочники.Scan_ЭПТС.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.IDExternalSystem);
	ОбъектСсылка     = СоздатьОбновитьЭПТС(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода);
	
	Если Отказ Тогда
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов.Наименование, СтруктураРеквизитов.IDExternalSystem, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ОбъектСсылка;
	
КонецФункции

Функция СоздатьОбновитьЭПТС(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода)
	
	ВладелецСсылка = Справочники.Scan_Изделия.ПустаяСсылка();
	
	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов(ИмяМетода);
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "СтатусЭПТС" Тогда
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
				Продолжить;
			КонецЕсли;
			
			СтатусЭПТС = СоздатьОбновитьСтатусЭПТС(СтруктураРеквизитов[ТекРеквизит.ИмяРекв]);
			Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтатусЭПТС Тогда
				СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
			Иначе
				СтруктураРеквизитов.Вставить(ТекРеквизит.ИмяРекв, СтатусЭПТС);
			КонецЕсли;
		ИначеЕсли ТекРеквизит.ИмяРекв = "ТранспортноеСредство" Тогда
			ВладелецСсылка = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.ТранспортноеСредство.GUID);
			
			СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
		Иначе
			Если ЭлементСсылка[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв] Тогда
				СтруктураРеквизитов.Удалить(ТекРеквизит.ИмяРекв);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// rarus agar 17.12.2021 18240 ++
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	
	НаименованиеТСОпределяемоеЕгоНазначением = СоответствиеДопРеквизитов1БД["Наименование ТС, определяемое его назначением"];
	Если НаименованиеТСОпределяемоеЕгоНазначением <> Неопределено Тогда
		Если ЭлементСсылка.НаименованиеТСОпределяемоеЕгоНазначением <> НаименованиеТСОпределяемоеЕгоНазначением Тогда
			СтруктураРеквизитов.Вставить("НаименованиеТСОпределяемоеЕгоНазначением", НаименованиеТСОпределяемоеЕгоНазначением);
		КонецЕсли;
	КонецЕсли;
	
	МаркаПоЭПТС = СоответствиеДопРеквизитов1БД["Марка по ЭПТС"];
	Если МаркаПоЭПТС <> Неопределено Тогда
		Если ЭлементСсылка.МаркаПоЭПТС <> МаркаПоЭПТС Тогда
			СтруктураРеквизитов.Вставить("МаркаПоЭПТС", МаркаПоЭПТС);
		КонецЕсли;
	КонецЕсли;
	
	КоммерческоеНаименование = СоответствиеДопРеквизитов1БД["Коммерческое наименование"];
	Если КоммерческоеНаименование <> Неопределено Тогда
		Если ЭлементСсылка.КоммерческоеНаименование <> КоммерческоеНаименование Тогда
			СтруктураРеквизитов.Вставить("КоммерческоеНаименование", КоммерческоеНаименование);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификационныйНомер = СоответствиеДопРеквизитов1БД["Идентификационный номер"];
	Если ИдентификационныйНомер <> Неопределено Тогда
		Если ЭлементСсылка.ИдентификационныйНомер <> ИдентификационныйНомер Тогда
			СтруктураРеквизитов.Вставить("ИдентификационныйНомер", ИдентификационныйНомер);
		КонецЕсли;
	КонецЕсли;
	
	НомерШассиРамы = СоответствиеДопРеквизитов1БД["Номер шасси (рамы)"];
	Если НомерШассиРамы <> Неопределено Тогда
		Если ЭлементСсылка.НомерШассиРамы <> НомерШассиРамы Тогда
			СтруктураРеквизитов.Вставить("НомерШассиРамы", НомерШассиРамы);
		КонецЕсли;
	КонецЕсли;
	// rarus agar 17.12.2021 18240 --
	
	// rarus agar 17.01.2022 18240 ++
	ИноеНаименованиеТСПоЭПТС = СоответствиеДопРеквизитов1БД["Иное наименование ТС по ЭПТС"];
	Если ИноеНаименованиеТСПоЭПТС <> Неопределено Тогда
		Если ЭлементСсылка.ИноеНаименованиеТСПоЭПТС <> ИноеНаименованиеТСПоЭПТС Тогда
			СтруктураРеквизитов.Вставить("ИноеНаименованиеТСПоЭПТС", ИноеНаименованиеТСПоЭПТС);
		КонецЕсли;
	КонецЕсли;
	// rarus agar 17.01.2022 18240 --
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_ЭПТС.СоздатьЭлемент();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		ТекОбъект.Владелец = ВладелецСсылка;
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать ЭПТС (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

Функция СоздатьОбновитьСтатусЭПТС(XDTOОбъект)
	
	ЭлементСсылка = Справочники.Scan_СтатусыЭПТС.НайтиПоРеквизиту("IDExternalSystem", XDTOОбъект.GUID);

	СтруктураРеквизитов = Новый Структура();

	МассивРеквизитовСправочника = ПолучитьМассивРеквизитов();
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ЭлементСсылка[ТекРеквизит.ИмяРекв] <> XDTOОбъект[ТекРеквизит.ИмяXML] Тогда
			СтруктураРеквизитов.Вставить(ТекРеквизит.ИмяРекв, XDTOОбъект[ТекРеквизит.ИмяXML]);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_СтатусыЭПТС.СоздатьЭлемент();
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			ТекОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение; 
		КонецЦикла;
		
		ТекОбъект.ДатаОбновления = ТекущаяДата();
		
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			ЭлементСсылка = ТекОбъект.Ссылка; 
		Исключение
			СообщениеОбОшибке = "Не удалось записать статус ЭПТС (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Статусы ЭПТС", ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB("Статусы ЭПТС", ТекОбъект.Наименование, ТекОбъект.IDExternalSystem, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

// GetEPTSstatement
Функция ВызватьМетод_GetEPTSstatement(ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ИмяМетода                    = "GetEPTSstatement";
	ИмяСобытияЖурналаРегистрации = "Веб-сервис.GetEPTSstatement";
	
	РезультатВозврата = Неопределено;
	
	ПараметрыМетода = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
	ПараметрыМетода.GUID = ПараметрыВызова.GUID;
	
	РезультатВызова = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, ПараметрыМетода, Отказ, ИмяСобытияЖурналаРегистрации);
	Если Не Отказ Тогда
		РезультатВозврата = РазборОтвета_GetEPTSstatement(РезультатВызова, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ПараметрыВызова.GUID);
		Если Отказ Тогда
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, СообщениеОбОшибке);
		КонецЕсли;
	Иначе
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации,, ПараметрыВызова.GUID, РезультатВызова);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатВозврата;
	
КонецФункции

Функция РазборОтвета_GetEPTSstatement(ТекстОтвета, Отказ, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ИмяМетода, ИдентификаторЭПТС)
	
	ОбъектВыпискаЭПТС = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ВыпискаЭПТС", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Если Отказ Тогда 
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;
	
	ТекВыпискаЭПТС = Разобрать_ВыпискуЭПТС(ОбъектВыпискаЭПТС, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода, ИдентификаторЭПТС);
	
	Возврат ТекВыпискаЭПТС;
	
КонецФункции

Функция Разобрать_ВыпискуЭПТС(XDTOОбъект, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода, ИдентификаторЭПТС) Экспорт
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода);
	
	Если    Отказ
		Или СтруктураРеквизитов = Неопределено 
		Тогда
		СообщениеОбОшибке = "Не удалось получить структуру реквизитов!";
		Возврат Неопределено;
	КонецЕсли;
	
	ЭПТССсылка = Справочники.Scan_ЭПТС.НайтиПоРеквизиту("IDExternalSystem", ИдентификаторЭПТС);
	
	СтруктураРеквизитов.Вставить("ВладелецФайла", ЭПТССсылка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", СтруктураРеквизитов.Наименование);
	Запрос.УстановитьПараметр("П2", ЭПТССсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ЭПТСПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
	|ИЗ
	|	Справочник.Scan_ЭПТСПрисоединенныеФайлы КАК Scan_ЭПТСПрисоединенныеФайлы
	|ГДЕ
	|	Scan_ЭПТСПрисоединенныеФайлы.Наименование = &П1
	|	И Scan_ЭПТСПрисоединенныеФайлы.ВладелецФайла = &П2";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НайденныйЭлемент = Справочники.Scan_ЭПТСПрисоединенныеФайлы.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НайденныйЭлемент = Выборка.ПрисоединенныйФайл;
	КонецЕсли;
	
	ОбъектСсылка = СоздатьОбновитьВыпискуЭПТС(НайденныйЭлемент, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода);
	
	Если Отказ Тогда
		Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, СтруктураРеквизитов.Наименование, СтруктураРеквизитов.Наименование, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ОбъектСсылка;
	
КонецФункции

Функция СоздатьОбновитьВыпискуЭПТС(ЭлементСсылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Отказ, ИмяМетода)
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		Если ЭлементСсылка.Пустая() Тогда
			ТекОбъект = Справочники.Scan_ЭПТСПрисоединенныеФайлы.СоздатьЭлемент();
			ТекОбъект.Наименование     = СтруктураРеквизитов.Наименование;
			ТекОбъект.ВладелецФайла    = СтруктураРеквизитов.ВладелецФайла;
			ТекОбъект.Автор            = Пользователи.АвторизованныйПользователь();
			ТекОбъект.ДатаСоздания     = ТекущаяДатаСеанса();
			ТекОбъект.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе");
		Иначе
			ТекОбъект = ЭлементСсылка.ПолучитьОбъект();
		КонецЕсли;
	
		Попытка
			Если НЕ ТекОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ТекОбъект.Записать();
			
			АдресХранилищаФайла = ПоместитьВоВременноеХранилище(СтруктураРеквизитов.Файл, Новый УникальныйИдентификатор);
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресХранилищаФайла);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ИнформацияОФайле.Вставить("ИмяБезРасширения",               СтруктураРеквизитов.Наименование);
			ИнформацияОФайле.Вставить("Расширение",                     СтруктураРеквизитов.ТипФайла);
			
			РаботаСФайлами.ОбновитьФайл(ТекОбъект.Ссылка, ИнформацияОФайле);
			
			ЭлементСсылка = ТекОбъект.Ссылка;
		Исключение
			СообщениеОбОшибке = "Не удалось записать выписку ЭПТС (" + ТекОбъект.Наименование + "): " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, ЭлементСсылка);
			Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ТекОбъект.Наименование, ТекОбъект.Наименование, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

#КонецОбласти
// rarus agar 12.08.2021 17205 --

#Область ВебСервис1СДО

// Передача заказа на закупку
Функция ВызватьМетод1СДО_setPurchaseOrder(Прокси, ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ЗаказНаЗакупкуXDTO = ПолучитьЗаказНаЗакупкуXDTO(Прокси, ПараметрыВызова);
	
	ТекстЗапроса = Scan_ВебСервисы.СформироватьТекстЗапроса1СДО("setPurchaseOrder", Прокси, ПараметрыВызова, ЗаказНаЗакупкуXDTO);
	
	Попытка
		РезультатВызова = Прокси.setPurchaseOrder(ЗаказНаЗакупкуXDTO);
	Исключение
		Отказ = Истина;
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке  = "Не удалось вызвать метод setPurchaseOrder 1С:ДО:" + ИнформацияОбОшибке;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.setPurchaseOrder", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("setPurchaseOrder", ПараметрыВызова.ЗаказНаЗакупку, ТекстЗапроса, ИнформацияОбОшибке, Ложь);
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
	
	ТекстОтвета = Scan_ВебСервисы.ПолучитьТекстОтвета1СДО(Прокси, РезультатВызова);
	Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("setPurchaseOrder", ПараметрыВызова.ЗаказНаЗакупку, ТекстЗапроса, ТекстОтвета, Истина);
	
	Если  ТипЗнч(РезультатВызова) = Тип("ОбъектXDTO")
		И РезультатВызова.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Error")
		Тогда
		Отказ = Истина;
		
		СообщениеОбОшибке = "Метод setPurchaseOrder 1С:ДО вернул ошибку " + РезультатВызова.Text;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.setPurchaseOrder", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		
		Возврат СообщениеОбОшибке;
	Иначе
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.setPurchaseOrder", УровеньЖурналаРегистрации.Информация,,, "Успешно вызван метод setPurchaseOrder 1С:ДО");
		
		Возврат РезультатВызова;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаказНаЗакупкуXDTO(Прокси, ПараметрыВызова) Экспорт 
	
	КонтрагентXDTO = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Contragent"));
	КонтрагентXDTO.Type = "Contragent";
	КонтрагентXDTO.ID   = ПараметрыВызова.ИдентификаторПоставщика;
	
	ДоговорXDTO =  Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Object"));
	ДоговорXDTO.Type = "Dogovor";
	ДоговорXDTO.ID   = ПараметрыВызова.ИдентификаторДоговора;
	ДоговорXDTO.Name = ПараметрыВызова.НаименованиеДоговора;
	
	ЗаказНаЗакупкуXDTO = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "PurchaseOrder"));
	ЗаказНаЗакупкуXDTO.ID                    = ПараметрыВызова.ИдентификаторЗаказа;
	ЗаказНаЗакупкуXDTO.Type                  = "PurchaseOrder";
	ЗаказНаЗакупкуXDTO.Sorder                = ПараметрыВызова.НестандартныйЗаказ;
	ЗаказНаЗакупкуXDTO.Contragent            = КонтрагентXDTO;
	ЗаказНаЗакупкуXDTO.Dogovor               = ДоговорXDTO;
	ЗаказНаЗакупкуXDTO.DeliveryAddress       = ПараметрыВызова.АдресПоставки;
	ЗаказНаЗакупкуXDTO.DeliveryConditions    = ПараметрыВызова.УсловияПоставки;
	ЗаказНаЗакупкуXDTO.PaymentTerms          = ПараметрыВызова.УсловияОплаты;
	ЗаказНаЗакупкуXDTO.AdditionalInformation = ПараметрыВызова.ДополнительнаяИнформация;
	ЗаказНаЗакупкуXDTO.CostCenter            = ПараметрыВызова.ЦентрЗатрат;
	ЗаказНаЗакупкуXDTO.Responsible           = ПараметрыВызова.Ответственный;
	
	ПродуктыКЗаказу = ПараметрыВызова.ПродуктыКЗаказу;
	Для Каждого СтрокаПродукта Из ПродуктыКЗаказу Цикл
		НоменклатураXDTO =  Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Nomenclature"));
		НоменклатураXDTO.ID       = СтрокаПродукта.ИдентификаторПродукта;
		НоменклатураXDTO.Name     = СтрокаПродукта.Наименование;
		//НоменклатураXDTO.Category = "Надстройки на шасси";
		НоменклатураXDTO.Category = СтрокаПродукта.ТипПродукта;
		НоменклатураXDTO.CodOKEI  = "796";
		НоменклатураXDTO.Type     = "Nomenclature";
		
		ПозицияЗаказаXDTO =  Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "OrderPosition"));
		ПозицияЗаказаXDTO.Nomenclature   = НоменклатураXDTO;
		ПозицияЗаказаXDTO.DateOfDelivery = СтрокаПродукта.ДатаПоставки;
		ПозицияЗаказаXDTO.Count          = СтрокаПродукта.Количество;
		ПозицияЗаказаXDTO.Price          = СтрокаПродукта.Цена;
		ПозицияЗаказаXDTO.CurrencyCode   = СтрокаПродукта.КодВалюты;
		ПозицияЗаказаXDTO.VATRate        = СтрокаПродукта.СтавкаНДС;
		ПозицияЗаказаXDTO.CommentInternal = СтрокаПродукта.КомментарийВнутренний;
		ПозицияЗаказаXDTO.CommentSupplier = СтрокаПродукта.КомментарийДляПоставщика;
		
		ЗаказНаЗакупкуXDTO.OrderPositions.Добавить(ПозицияЗаказаXDTO);
	КонецЦикла;
	
	Возврат ЗаказНаЗакупкуXDTO;
	
КонецФункции

Функция РазборОтвета1СДО_setPurchaseOrder(ОтветСервиса, Отказ, СообщениеОбОшибке) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Отклонен",            ОтветСервиса.Reject);
	СтруктураОтвета.Вставить("СообщениеОбОшибке",   ОтветСервиса.TextError);
	СтруктураОтвета.Вставить("ИдентификаторЗаказа", ОтветСервиса.ID);
	СтруктураОтвета.Вставить("ДатаЗаказа",          ОтветСервиса.DateOrder);
	СтруктураОтвета.Вставить("НомерЗаказа",         ОтветСервиса.Number);
	СтруктураОтвета.Вставить("СтатусЗаказа",        ОтветСервиса.Status);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Запуск процесса согласования заказа на закупку
Функция ВызватьМетод1СДО_setPurchaseOrderApproval(Прокси, ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ТекстЗапроса = Scan_ВебСервисы.СформироватьТекстЗапроса1СДО("setPurchaseOrderApproval", Прокси, ПараметрыВызова);
	
	Попытка
		РезультатВызова = Прокси.setPurchaseOrderApproval(ПараметрыВызова.ИдентификаторЗаказа);
	Исключение
		Отказ = Истина;
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке  = "Не удалось вызвать метод setPurchaseOrderApproval 1С:ДО:" + ИнформацияОбОшибке;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.setPurchaseOrderApproval", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("setPurchaseOrderApproval", , ТекстЗапроса, ИнформацияОбОшибке, Ложь);
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
	
	ТекстОтвета = Scan_ВебСервисы.ПолучитьТекстОтвета1СДО(Прокси, РезультатВызова);
	Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("setPurchaseOrderApproval", , ТекстЗапроса, ТекстОтвета, Истина);
	
	//Если РезультатВызова.Reject Тогда
	Если  ТипЗнч(РезультатВызова) = Тип("ОбъектXDTO")
		И РезультатВызова.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Error")
		Тогда
		Отказ = Истина;
		
		СообщениеОбОшибке = "Метод setPurchaseOrderApproval 1С:ДО вернул ошибку " + РезультатВызова.Text;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.setPurchaseOrderApproval", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		
		Возврат СообщениеОбОшибке;
	Иначе
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.setPurchaseOrderApproval", УровеньЖурналаРегистрации.Информация,,, "Успешно вызван метод setPurchaseOrderApproval 1С:ДО");
		
		Возврат РезультатВызова;
	КонецЕсли;
	
КонецФункции

Функция РазборОтвета1СДО_setPurchaseOrderApproval(ОтветСервиса, Отказ, СообщениеОбОшибке) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Отклонен",          ОтветСервиса.Reject);
	СтруктураОтвета.Вставить("СообщениеОбОшибке", ОтветСервиса.TextError);
	СтруктураОтвета.Вставить("СтатусЗаказа",      ОтветСервиса.Status);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получение статуса заказа на закупку
Функция ВызватьМетод1СДО_GetOrderStatus(Прокси, ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ТекстЗапроса = Scan_ВебСервисы.СформироватьТекстЗапроса1СДО("GetOrderStatus", Прокси, ПараметрыВызова);
	
	Попытка
		РезультатВызова = Прокси.GetOrderStatus(ПараметрыВызова.ИдентификаторЗаказа);
	Исключение
		Отказ = Истина;
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке  = "Не удалось вызвать метод GetOrderStatus 1С:ДО:" + ИнформацияОбОшибке;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetOrderStatus", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetOrderStatus", , ТекстЗапроса, ИнформацияОбОшибке, Ложь);
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
	
	ТекстОтвета = Scan_ВебСервисы.ПолучитьТекстОтвета1СДО(Прокси, РезультатВызова);
	Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetOrderStatus", , ТекстЗапроса, ТекстОтвета, Истина);
	
	//Если РезультатВызова.Reject Тогда
	Если  ТипЗнч(РезультатВызова) = Тип("ОбъектXDTO")
		И РезультатВызова.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Error")
		Тогда
		Отказ = Истина;
		
		СообщениеОбОшибке = "Метод GetOrderStatus 1С:ДО вернул ошибку " + РезультатВызова.Text;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetOrderStatus", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		
		Возврат СообщениеОбОшибке;
	Иначе
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetOrderStatus", УровеньЖурналаРегистрации.Информация,,, "Успешно вызван метод GetOrderStatus 1С:ДО");
		
		Возврат РезультатВызова;
	КонецЕсли;
	
КонецФункции

Функция РазборОтвета1СДО_GetOrderStatus(ОтветСервиса, Отказ, СообщениеОбОшибке) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Отклонен",          ОтветСервиса.Reject);
	СтруктураОтвета.Вставить("СообщениеОбОшибке", ОтветСервиса.TextError);
	СтруктураОтвета.Вставить("ДатаЗаказа",        ОтветСервиса.DateOrder);
	СтруктураОтвета.Вставить("НомерЗаказа",       ОтветСервиса.Number);
	СтруктураОтвета.Вставить("СтатусЗаказа",      ОтветСервиса.Status);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получение списка центров затрат
Функция ВызватьМетод1СДО_GetListOfCostCenters(Прокси, ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ТекстЗапроса = Scan_ВебСервисы.СформироватьТекстЗапроса1СДО("GetListOfCostCenters", Прокси, ПараметрыВызова);
	
	Попытка
		РезультатВызова = Прокси.GetListOfCostCenters();
	Исключение
		Отказ = Истина;
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке  = "Не удалось вызвать метод GetListOfCostCenters 1С:ДО:" + ИнформацияОбОшибке;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfCostCenters", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListOfCostCenters", , ТекстЗапроса, ИнформацияОбОшибке, Ложь);
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
	
	ТекстОтвета = Scan_ВебСервисы.ПолучитьТекстОтвета1СДО(Прокси, РезультатВызова);
	Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListOfCostCenters", , ТекстЗапроса, ТекстОтвета, Истина);
	
	Если  ТипЗнч(РезультатВызова) = Тип("ОбъектXDTO")
		И РезультатВызова.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Error")
		Тогда
		Отказ = Истина;
		
		СообщениеОбОшибке = "Метод GetListOfCostCenters 1С:ДО вернул ошибку " + РезультатВызова.Text;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfCostCenters", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		
		Возврат СообщениеОбОшибке;
	Иначе
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfCostCenters", УровеньЖурналаРегистрации.Информация,,, "Успешно вызван метод GetListOfCostCenters 1С:ДО");
		
		Возврат РезультатВызова;
	КонецЕсли;
	
КонецФункции

Функция РазборОтвета1СДО_GetListOfCostCenters(ОтветСервиса, Отказ, СообщениеОбОшибке) Экспорт
	
	Если Отказ Тогда
		СообщениеОбОшибке = "Не удалось разобрать ответ веб-сервиса. См. журнал регистрации";
		Возврат Неопределено;
	КонецЕсли;
	
	РазобратьЦентрыЗатрат(ОтветСервиса, СообщениеОбОшибке, Отказ);
	
КонецФункции

Функция РазобратьЦентрыЗатрат(ОтветСервиса, СообщениеОбОшибке, Отказ)
	
	ЦентрыЗатрат = Новый Массив;
	
	Если ТипЗнч(ОтветСервиса) = Тип("ОбъектXDTO") Тогда
		Для Каждого ЦентрЗатратXDTO Из ОтветСервиса.CostCenter Цикл
			СтруктураРеквизитов = Новый Структура("КодЦентраЗатрат,НаименованиеЦентраЗатрат,ПодгруппаЦентраЗатрат,ПодразделениеЦентраЗатрат");
			СтруктураРеквизитов.КодЦентраЗатрат           = СокрЛП(ЦентрЗатратXDTO.Code);
			СтруктураРеквизитов.НаименованиеЦентраЗатрат  = СокрЛП(ЦентрЗатратXDTO.Name);
			СтруктураРеквизитов.ПодгруппаЦентраЗатрат     = СокрЛП(ЦентрЗатратXDTO.Subdivision);
			СтруктураРеквизитов.ПодразделениеЦентраЗатрат = СокрЛП(ЦентрЗатратXDTO.Brunch);
			
			Если ПустаяСтрока(СтруктураРеквизитов.КодЦентраЗатрат) Тогда
				Продолжить;
			КонецЕсли;
			
			ЦентрЗатратСсылка = СоздатьОбновитьЦентрЗатрат(ЦентрЗатратXDTO, СтруктураРеквизитов, СообщениеОбОшибке, Отказ);
			
			ЦентрыЗатрат.Добавить(ЦентрЗатратСсылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЦентрыЗатрат;
	
КонецФункции

Функция СоздатьОбновитьЦентрЗатрат(ЦентрЗатратXDTO, СтруктураРеквизитов, СообщениеОбОшибке, Отказ)
	
	НайденныйЭлемент = Справочники.Scan_ЦентрыЗатрат.НайтиПоНаименованию(СтруктураРеквизитов.КодЦентраЗатрат, Истина);
	Если НайденныйЭлемент.Пустая() Тогда
		ЦентрЗатратОбъект = Справочники.Scan_ЦентрыЗатрат.СоздатьЭлемент();
	Иначе
		ЦентрЗатратОбъект = НайденныйЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	Если ЦентрЗатратОбъект.Наименование <> СтруктураРеквизитов.КодЦентраЗатрат Тогда
		ЦентрЗатратОбъект.Наименование = СтруктураРеквизитов.КодЦентраЗатрат;
	КонецЕсли;
	Если ЦентрЗатратОбъект.НаименованиеЦентраЗатрат <> СтруктураРеквизитов.НаименованиеЦентраЗатрат Тогда
		ЦентрЗатратОбъект.НаименованиеЦентраЗатрат = СтруктураРеквизитов.НаименованиеЦентраЗатрат;
	КонецЕсли;
	Если ЦентрЗатратОбъект.Подгруппа <> СтруктураРеквизитов.ПодгруппаЦентраЗатрат Тогда
		ЦентрЗатратОбъект.Подгруппа = СтруктураРеквизитов.ПодгруппаЦентраЗатрат;
	КонецЕсли;
	Если ЦентрЗатратОбъект.Подразделение <> СтруктураРеквизитов.ПодразделениеЦентраЗатрат Тогда
		ЦентрЗатратОбъект.Подразделение = СтруктураРеквизитов.ПодразделениеЦентраЗатрат;
	КонецЕсли;
	
	Попытка
		Если ЦентрЗатратОбъект.Модифицированность() Тогда
			Если Не ЦентрЗатратОбъект.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;
			
			ЦентрЗатратОбъект.Записать();
		КонецЕсли;
		ЦентрЗатратСсылка = ЦентрЗатратОбъект.Ссылка;
	Исключение
		СообщениеОбОшибке = "Не удалось записать центр затрат ("+СтруктураРеквизитов.КодЦентраЗатрат+"): "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "Веб-сервис 1С:ДО.GetListOfCostCenters", СтруктураРеквизитов.КодЦентраЗатрат);
		//!!
		// У центра затрат нет реквизита IDExternalSystem
		//Scan_ВебСервисыРазборОтветов.ЗаписьОшибокОбменаNDB(ИмяСобытияЖурналаРегистрации, ЭлементСсылка, СтруктураРеквизитов["IDExternalSystem"], СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ЦентрЗатратСсылка;
		
КонецФункции

// Получение списка контрагентов
Функция ВызватьМетод1СДО_GetListContragent(Прокси, ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ТекстЗапроса = Scan_ВебСервисы.СформироватьТекстЗапроса1СДО("GetListContragent", Прокси, ПараметрыВызова);
	
	Попытка
		РезультатВызова = Прокси.GetListContragent();
	Исключение
		Отказ = Истина;
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке  = "Не удалось вызвать метод GetListContragent 1С:ДО:" + ИнформацияОбОшибке;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListContragent", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListContragent", , ТекстЗапроса, ИнформацияОбОшибке, Ложь);
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
	
	ТекстОтвета = Scan_ВебСервисы.ПолучитьТекстОтвета1СДО(Прокси, РезультатВызова);
	Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListContragent", , ТекстЗапроса, ТекстОтвета, Истина);
	
	Если  ТипЗнч(РезультатВызова) = Тип("ОбъектXDTO")
		И РезультатВызова.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Error")
		Тогда
		Отказ = Истина;
		
		СообщениеОбОшибке = "Метод GetListContragent 1С:ДО вернул ошибку " + РезультатВызова.Text;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListContragent", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		
		Возврат СообщениеОбОшибке;
	Иначе
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListContragent", УровеньЖурналаРегистрации.Информация,,, "Успешно вызван метод GetListContragent 1С:ДО");
		
		Возврат РезультатВызова;
	КонецЕсли;
	
КонецФункции

Функция РазборОтвета1СДО_GetListContragent(ОтветСервиса, Отказ, СообщениеОбОшибке) Экспорт
	
	Контрагенты = Новый Массив;
	
	Если ТипЗнч(ОтветСервиса) = Тип("ОбъектXDTO") Тогда
		Для Каждого КонтрагентXDTO Из ОтветСервиса.Contragent Цикл
			СтруктураРеквизитов = Новый Структура("Наименование,Идентификатор,ВнешнийКод");
			СтруктураРеквизитов.Наименование  = СокрЛП(КонтрагентXDTO.Name);
			СтруктураРеквизитов.Идентификатор = СокрЛП(КонтрагентXDTO.ID);
			СтруктураРеквизитов.ВнешнийКод    = СокрЛП(КонтрагентXDTO.Cod1CDB);
			
			Контрагенты.Добавить(СтруктураРеквизитов);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Контрагенты;
	
КонецФункции

// Получение списка договоров
Функция ВызватьМетод1СДО_GetListDogovorov(Прокси, ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	КонтрагентXDTO = ПолучитьКонтрагентаXDTO(Прокси, ПараметрыВызова);
	
	ТекстЗапроса = Scan_ВебСервисы.СформироватьТекстЗапроса1СДО("GetListDogovorov", Прокси, ПараметрыВызова, КонтрагентXDTO);
	
	Попытка
		РезультатВызова = Прокси.GetListDogovorov(КонтрагентXDTO);
	Исключение
		Отказ = Истина;
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке  = "Не удалось вызвать метод GetListDogovorov 1С:ДО:" + ИнформацияОбОшибке;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListDogovorov", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListDogovorov", , ТекстЗапроса, ИнформацияОбОшибке, Ложь);
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
	
	ТекстОтвета = Scan_ВебСервисы.ПолучитьТекстОтвета1СДО(Прокси, РезультатВызова);
	Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListDogovorov", , ТекстЗапроса, ТекстОтвета, Истина);
	
	Если  ТипЗнч(РезультатВызова) = Тип("ОбъектXDTO")
		И РезультатВызова.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Error")
		Тогда
		Отказ = Истина;
		
		СообщениеОбОшибке = "Метод GetListDogovorov 1С:ДО вернул ошибку " + РезультатВызова.Text;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListDogovorov", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		
		Возврат СообщениеОбОшибке;
	Иначе
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListDogovorov", УровеньЖурналаРегистрации.Информация,,, "Успешно вызван метод GetListDogovorov 1С:ДО");
		
		Возврат РезультатВызова;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКонтрагентаXDTO(Прокси, ПараметрыВызова) Экспорт 
	
	КонтрагентXDTO =  Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Contragent"));
	КонтрагентXDTO.Type = "Contragent";
	Если     ПараметрыВызова.Свойство("Код1СБД") 
		И Не ПустаяСтрока(ПараметрыВызова.Код1СБД) 
		Тогда
		КонтрагентXDTO.ID      = "00000000-0000-0000-0000-000000000000";
		КонтрагентXDTO.Cod1CDB = ПараметрыВызова.Код1СБД;
	Иначе
		КонтрагентXDTO.ID = ПараметрыВызова.ИдентификаторКонтрагента;
	КонецЕсли;
	
	Возврат КонтрагентXDTO;
	
КонецФункции

Функция РазборОтвета1СДО_GetListDogovorov(ОтветСервиса, Отказ, СообщениеОбОшибке) Экспорт
	
	Договоры = Новый Массив;
	
	Если ТипЗнч(ОтветСервиса) = Тип("ОбъектXDTO") Тогда
		Для Каждого ДоговорXDTO Из ОтветСервиса.Dogovor Цикл
			// rarus agar 09.02.2022 18761 ++
			//СтруктураРеквизитов = Новый Структура("Наименование,Идентификатор,Номер,Дата,ДатаНачала,ДатаОкончания,УсловияПоставки,УсловияОплаты");
			
			//СтруктураРеквизитов.Наименование    = СокрЛП(КонтрагентXDTO.Name);
			//СтруктураРеквизитов.Идентификатор   = СокрЛП(КонтрагентXDTO.ID);
			//СтруктураРеквизитов.Номер           = СокрЛП(КонтрагентXDTO.Number);
			//СтруктураРеквизитов.Дата            = СокрЛП(КонтрагентXDTO.Date);
			//СтруктураРеквизитов.ДатаНачала      = СокрЛП(КонтрагентXDTO.DateBegin);
			//СтруктураРеквизитов.ДатаОкончания   = СокрЛП(КонтрагентXDTO.DateEnd);
			//СтруктураРеквизитов.УсловияПоставки = СокрЛП(КонтрагентXDTO.DeliveryConditions);
			//СтруктураРеквизитов.УсловияОплаты   = СокрЛП(КонтрагентXDTO.TermsOfPayment);
			
			СтруктураРеквизитов = Новый Структура("Наименование,Идентификатор,Номер,Дата,ДатаНачала,ДатаОкончания,УсловияПоставки,УсловияОплаты,Бессрочный");
			
			СвойстваДоговора = ДоговорXDTO.Свойства();
			
			СвойствоName = СвойстваДоговора.Получить("Name");
			Если СвойствоName <> Неопределено Тогда
				СтруктураРеквизитов.Наименование = СокрЛП(ДоговорXDTO.Получить(СвойствоName));
			КонецЕсли;
			
			СвойствоID = СвойстваДоговора.Получить("ID");
			Если СвойствоID <> Неопределено Тогда
				СтруктураРеквизитов.Идентификатор = СокрЛП(ДоговорXDTO.Получить(СвойствоID));
			КонецЕсли;
			
			СвойствоNumber = СвойстваДоговора.Получить("Number");
			Если СвойствоNumber <> Неопределено Тогда
				СтруктураРеквизитов.Номер = СокрЛП(ДоговорXDTO.Получить(СвойствоNumber));
			КонецЕсли;
			
			СвойствоDate = СвойстваДоговора.Получить("Date");
			Если СвойствоDate <> Неопределено Тогда
				СтруктураРеквизитов.Дата = СокрЛП(ДоговорXDTO.Получить(СвойствоDate));
			КонецЕсли;
			
			СвойствоDateBegin = СвойстваДоговора.Получить("DateBegin");
			Если СвойствоDateBegin <> Неопределено Тогда
				СтруктураРеквизитов.ДатаНачала = СокрЛП(ДоговорXDTO.Получить(СвойствоDateBegin));
			КонецЕсли;
			
			СвойствоDateEnd = СвойстваДоговора.Получить("DateEnd");
			Если СвойствоDateEnd <> Неопределено Тогда
				СтруктураРеквизитов.ДатаОкончания = СокрЛП(ДоговорXDTO.Получить(СвойствоDateEnd));
			КонецЕсли;
			
			СвойствоDeliveryConditions = СвойстваДоговора.Получить("DeliveryConditions");
			Если СвойствоDeliveryConditions <> Неопределено Тогда
				СтруктураРеквизитов.УсловияПоставки = СокрЛП(ДоговорXDTO.Получить(СвойствоDeliveryConditions));
			КонецЕсли;
			
			СвойствоTermsOfPayment = СвойстваДоговора.Получить("TermsOfPayment");
			Если СвойствоTermsOfPayment <> Неопределено Тогда
				СтруктураРеквизитов.УсловияОплаты = СокрЛП(ДоговорXDTO.Получить(СвойствоTermsOfPayment));
			КонецЕсли;
			
			СвойствоPermanent = СвойстваДоговора.Получить("Permanent");
			Если СвойствоPermanent <> Неопределено Тогда
				СтруктураРеквизитов.Бессрочный = Булево(ДоговорXDTO.Получить(СвойствоPermanent));
			КонецЕсли;
			// rarus agar 09.02.2022 18761 --
			
			Договоры.Добавить(СтруктураРеквизитов);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Договоры;
	
КонецФункции

// Получение списка категорий продуктов
Функция ВызватьМетод1СДО_GetListOfCategories(Прокси, ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ТекстЗапроса = Scan_ВебСервисы.СформироватьТекстЗапроса1СДО("GetListOfCategories", Прокси, ПараметрыВызова);
	
	Попытка
		РезультатВызова = Прокси.GetListOfCategories();
	Исключение
		Отказ = Истина;
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке  = "Не удалось вызвать метод GetListOfCategories 1С:ДО:" + ИнформацияОбОшибке;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfCategories", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListOfCategories", , ТекстЗапроса, ИнформацияОбОшибке, Ложь);
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
	
	ТекстОтвета = Scan_ВебСервисы.ПолучитьТекстОтвета1СДО(Прокси, РезультатВызова);
	Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListOfCategories", , ТекстЗапроса, ТекстОтвета, Истина);
	
	Если  ТипЗнч(РезультатВызова) = Тип("ОбъектXDTO")
		И РезультатВызова.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Error")
		Тогда
		Отказ = Истина;
		
		СообщениеОбОшибке = "Метод GetListOfCategories 1С:ДО вернул ошибку " + РезультатВызова.Text;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfCategories", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		
		Возврат СообщениеОбОшибке;
	Иначе
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfCategories", УровеньЖурналаРегистрации.Информация,,, "Успешно вызван метод GetListOfCategories 1С:ДО");
		
		Возврат РезультатВызова;
	КонецЕсли;
	
КонецФункции

Функция РазборОтвета1СДО_GetListOfCategories(ОтветСервиса, Отказ, СообщениеОбОшибке) Экспорт
	
	Категории = Новый Массив;
	
	Если ТипЗнч(ОтветСервиса) = Тип("ОбъектXDTO") Тогда
		Для Каждого КатегорияXDTO Из ОтветСервиса.Categories Цикл
			СтруктураРеквизитов = Новый Структура("Наименование");
			СтруктураРеквизитов.Наименование = СокрЛП(КатегорияXDTO.Name);
			
			Категории.Добавить(СтруктураРеквизитов);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Категории;
	
КонецФункции

// Получение списка адресов поставки
Функция ВызватьМетод1СДО_GetListOfDeliveries(Прокси, ПараметрыВызова, Отказ, СообщениеОбОшибке) Экспорт
	
	ТекстЗапроса = Scan_ВебСервисы.СформироватьТекстЗапроса1СДО("GetListOfDeliveries", Прокси, ПараметрыВызова);
	
	Попытка
		РезультатВызова = Прокси.getListOfDeliveries(ПараметрыВызова.Ответственный);
	Исключение
		Отказ = Истина;
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке  = "Не удалось вызвать метод GetListOfDeliveries 1С:ДО:" + ИнформацияОбОшибке;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfDeliveries", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListOfDeliveries", , ТекстЗапроса, ИнформацияОбОшибке, Ложь);
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
	
	ТекстОтвета = Scan_ВебСервисы.ПолучитьТекстОтвета1СДО(Прокси, РезультатВызова);
	Scan_ВебСервисы.ЗаписьЖурналаОбмена1СДО("GetListOfDeliveries", , ТекстЗапроса, ТекстОтвета, Истина);
	
	Если  ТипЗнч(РезультатВызова) = Тип("ОбъектXDTO")
		И РезультатВызова.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/kpd", "Error")
		Тогда
		Отказ = Истина;
		
		СообщениеОбОшибке = "Метод GetListOfDeliveries 1С:ДО вернул ошибку " + РезультатВызова.Text;
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfDeliveries", УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		
		Возврат СообщениеОбОшибке;
	Иначе
		ЗаписьЖурналаРегистрации("Веб-сервис 1С:ДО.GetListOfDeliveries", УровеньЖурналаРегистрации.Информация,,, "Успешно вызван метод GetListOfDeliveries 1С:ДО");
		
		Возврат РезультатВызова;
	КонецЕсли;
	
КонецФункции

Функция РазборОтвета1СДО_GetListOfDeliveries(ОтветСервиса, Отказ, СообщениеОбОшибке) Экспорт
	
	АдресаПоставки = Новый Массив;
	
	Если ТипЗнч(ОтветСервиса) = Тип("ОбъектXDTO") Тогда
		Для Каждого АдресПоставки Из ОтветСервиса.AdresDelivery Цикл
			АдресаПоставки.Добавить(АдресПоставки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресаПоставки;
	
КонецФункции

#КонецОбласти
//rarus agar 07.09.2020 15696 --