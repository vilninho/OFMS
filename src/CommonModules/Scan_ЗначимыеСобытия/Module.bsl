
//// Общий модуль "Значимые события"


//////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает дерево реквизитов объекта метаданных.
//
// Параметры:
//  Ссылка   - ЛюбаяСсылка - ссылка на элемент базы данных, для которого требуется получить результат функции.
//  ИмяКорня - Строка      - название корня дерева с реквизитами.
// 
// Возвращаемое значение:
//  Строка - строка реквизитов объекта метаданных конфигурации, разделенные символом ",".
//
Функция ПолучитьДеревоМетаданныхОбъекта(Источник, ИмяКорня = "Ссылка",ВыводитьРеквизитыТЧ = Истина) Экспорт
	
	// Сформируем дерево полей и структуру его колонок
	ДеревоПолей = Новый ДеревоЗначений;
	ДеревоПолей.Колонки.Добавить("Поле"     , Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ТипМетаданного");
	ДеревоПолей.Колонки.Добавить("ИмяМетаданного", Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ВидМетаданного", Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоПолей.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Число"));
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Источник.ПолноеИмя);
	
	Корень = ДеревоПолей.Строки.Добавить();
	Корень.Поле = Строка(МетаданныеОбъекта);
	Корень.ТипМетаданного = "Корень";
	Корень.ИмяМетаданного = ИмяКорня;
	Корень.ВидМетаданного = "Корень";
	Корень.ЭтоГруппа      = ИСТИНА;
	Корень.Картинка       = 4;
	
	Результат = "";
	
	// если выбрана группа метаданных "Справочники", "документы" и тд.
	Если МетаданныеОбъекта = Неопределено Тогда
		
		Корень.Поле = Строка(Источник);
		
		// Добавим стандартные реквизиты объекта
		Для Каждого Реквизит Из Метаданные[Источник.ПолноеИмя][0].СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				Продолжить;
			КонецЕсли;
			
			Имя = Реквизит.Имя;
			Если Реквизит.Имя = "ПометкаУдаления" Тогда
				Имя = "Пометка удаления";
			ИначеЕсли Реквизит.Имя = "ЭтоГруппа" Тогда
				Имя = "Это группа";
			КонецЕсли;
			
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит.Имя;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Константа";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
	ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеОбъекта) Тогда
		
		Корень.Поле = Строка(МетаданныеОбъекта);
		Корень.ТипМетаданного = МетаданныеОбъекта.Тип;
		Корень.ИмяМетаданного = МетаданныеОбъекта.Имя;
		Корень.ВидМетаданного = "Константа";
		Корень.ЭтоГруппа      = ЛОЖЬ;
		Корень.Картинка       = 0;
	
	ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		
		// Добавим общие реквизиты объекта
		Для Каждого РеквизитОбщий Из Метаданные.ОбщиеРеквизиты Цикл
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта(РеквизитОбщий.Имя, МетаданныеОбъекта) Тогда
				НоваяСтрока                = Корень.Строки.Добавить();
				НоваяСтрока.Поле           = РеквизитОбщий;
				НоваяСтрока.ТипМетаданного = РеквизитОбщий.Тип;
				НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+РеквизитОбщий.Имя;
				НоваяСтрока.ВидМетаданного = "Реквизит";
				НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
				НоваяСтрока.Картинка       = 0;
			КонецЕсли;
		КонецЦикла;
	
		// Добавим стандартные реквизиты объекта
		Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				Продолжить;
			КонецЕсли;
			
			Имя = Реквизит.Имя;
			Если Реквизит.Имя = "ПометкаУдаления" Тогда
				Имя = "Пометка удаления";
			ИначеЕсли Реквизит.Имя = "ЭтоГруппа" Тогда
				Имя = "Это группа";
			КонецЕсли;
			
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит.Имя;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим реквизиты объекта
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим измерения объекта
		Для Каждого Реквизит Из МетаданныеОбъекта.Измерения Цикл
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим ресурсы объекта
		Для Каждого Реквизит Из МетаданныеОбъекта.Ресурсы Цикл
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
	Иначе
		
		// Добавим общие реквизиты объекта
		Для Каждого РеквизитОбщий Из Метаданные.ОбщиеРеквизиты Цикл
			//Если ОбщегоНазначения.ЕстьРеквизитОбъекта(РеквизитОбщий.Имя, МетаданныеОбъекта) Тогда
			//	НоваяСтрока                = Корень.Строки.Добавить();
			//	НоваяСтрока.Поле           = РеквизитОбщий;
			//	НоваяСтрока.ТипМетаданного = РеквизитОбщий.Тип;
			//	НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+РеквизитОбщий.Имя;
			//	НоваяСтрока.ВидМетаданного = "Реквизит";
			//	НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			//	НоваяСтрока.Картинка       = 0;
			//КонецЕсли;
			СоставОбщегоРеквизита = РеквизитОбщий.Состав.Найти(МетаданныеОбъекта); 
			Если СоставОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать 
				Или (СоставОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто И РеквизитОбщий.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать) Тогда 
				НоваяСтрока                = Корень.Строки.Добавить();
				НоваяСтрока.Поле           = РеквизитОбщий;
				НоваяСтрока.ТипМетаданного = РеквизитОбщий.Тип;
				НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+РеквизитОбщий.Имя;
				НоваяСтрока.ВидМетаданного = "Реквизит";
				НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
				НоваяСтрока.Картинка       = 0;
			КонецЕсли; 
		КонецЦикла;
		
		// Добавим стандартные реквизиты объекта
		Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				Продолжить;
			КонецЕсли;
			
			Имя = Реквизит.Имя;
			Если Реквизит.Имя = "ПометкаУдаления" Тогда
				Имя = "Пометка удаления";
			ИначеЕсли Реквизит.Имя = "ЭтоГруппа" Тогда
				Имя = "Это группа";
			КонецЕсли;
			
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Имя;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим реквизиты объекта
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим табличные части
		Если ВыводитьРеквизитыТЧ Тогда
			Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
				
				НоваяСтрока                = Корень.Строки.Добавить();
				НоваяСтрока.Поле           = ТабличнаяЧасть;
				НоваяСтрока.ТипМетаданного = "ТабличнаяЧасть";
				НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+ТабличнаяЧасть.Имя;
				НоваяСтрока.ВидМетаданного = "ТабличнаяЧасть";
				НоваяСтрока.ЭтоГруппа      = ИСТИНА;
				НоваяСтрока.Картинка       = 1;
				
				// Добавим реквизиты текущей табличной части
				Для Каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
					НоваяСтрокаРеквизитов                = НоваяСтрока.Строки.Добавить();
					НоваяСтрокаРеквизитов.Поле           = РеквизитТабличнойЧасти;
					НоваяСтрокаРеквизитов.ТипМетаданного = РеквизитТабличнойЧасти.Тип;
					НоваяСтрокаРеквизитов.ИмяМетаданного = НоваяСтрока.ИмяМетаданного+"."+РеквизитТабличнойЧасти.Имя;
					НоваяСтрокаРеквизитов.ИмяТЧ = ТабличнаяЧасть.Имя;
					НоваяСтрокаРеквизитов.ВидМетаданного = "РеквизитТЧ";
					НоваяСтрокаРеквизитов.ЭтоГруппа      = ЛОЖЬ;
					НоваяСтрокаРеквизитов.Картинка       = 0;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДеревоПолей;
	
КонецФункции //ПолучитьДеревоМетаданныхОбъекта()

// Функция предназначения для преобразования источника в подходящий тип данных, для передачи на сервер.
//
// Параметры:
//  Источник  - Произвольный объект - объект-источник события.
//  ИдентификаторОбъектаМетаданных  - Спарвочник.Ссылка -Ссылка на справочник идентификаторы метаданных.
//  ТипИсточника  - "Строка" - возвращает строковое представление типа источника.
//							   Используется для обратного преобразования на сервере.
//
// Возвращаемое значение:
//   Возвращает преобразованный источник события. 
//   Для ссылочных данных возвращается соответствующая ссылка. Для наборов записей возвращается
//	 структура, позволяющая восстановить этот набор записей.
//   
Функция ПреобразоватьИсточник(Источник, ИдентификаторОбъектаМетаданных, ТипИсточника="")
		
	Класс = ИдентификаторОбъектаМетаданных.Родитель.ПолноеИмя;
	
	Если Класс = "Константы" Тогда
		
		// КонстантуМенеджерЗначения можно передавать на сервер.
		ТипИсточника = "Константы";
		Возврат Источник; 
		
	ИначеЕсли НЕ ИдентификаторОбъектаМетаданных.ЗначениеПустойСсылки = Неопределено Тогда
		
		// Для ссылочных типов передаем ссылки.
		ТипИсточника = "СсылочныйТип";
		Возврат Источник.Ссылка;
		
	ИначеЕсли Класс="РегистрыСведений" Или Класс="РегистрыНакопления" Или Класс="РегистрыБухгалтерии" Или Класс="РегистрыРасчета" Тогда
		//rarus uzeo@1c-tm.com.ua 29.05.2017  ++++
		Возврат ИдентификаторОбъектаМетаданных;
		//Возврат Источник;
		// rarus uzeo@1c-tm.com.ua 29.05.2017  ----
		
	КонецЕсли;
	
КонецФункции // ПреобразоватьИсточник() 

// Функция обрабатывает значимое событие. Проверяет условия и выполняет действия значимого события.
// Если происходит работа в клиент-серверном режиме, то данная функция выполняется на сервере.
//
// Параметры:
//  Источник  - произвольный - преобразованный объект-источник события.
//
//  Событие  - "Строка" - строковое представление события
//
//  ТипИсточника  - "Строка" - строковое представление типа источника ("СсылочныйТип" либо "НаборЗаписей").
//
Процедура ОбработатьЗначимоеСобытие(Источник, ТипИсточника="", Событие = "ПриЗаписи", ЭтоНовый=Ложь,СтруктураПараметровСеанса=Неопределено) Экспорт
	
	Если СтруктураПараметровСеанса<>Неопределено Тогда             
		//ПараметрыСеанса.Организация            = СтруктураПараметровСеанса.Организация;
		//ПараметрыСеанса.ПодразделениеКомпании  = СтруктураПараметровСеанса.ПодразделениеКомпании;
		ПараметрыСеанса.ТекущийПользователь    = СтруктураПараметровСеанса.Пользователь;
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Поищем подходящие элементы справочника "Значимые события"
	ОбъектМетаданных = Источник.Метаданные();
	Имя              = ОбъектМетаданных.Имя;
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначимыеСобытия.Ссылка
	|ИЗ
	|	Справочник.Scan_ЗначимыеСобытия КАК ЗначимыеСобытия
	|ГДЕ
	|	НЕ ЗначимыеСобытия.ЭтоГруппа
	|	И НЕ ЗначимыеСобытия.ПометкаУдаления
	|	И (ЗначимыеСобытия.Источник = &Источник
	|			ИЛИ ЗначимыеСобытия.Источник = &КлассОбъектов)
	|	И ЗначимыеСобытия.Событие = &Событие
	|	И ЗначимыеСобытия.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначимыеСобытия.Код";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Источник", ИдентификаторОбъектаМетаданных);
	Запрос.УстановитьПараметр("КлассОбъектов", ИдентификаторОбъектаМетаданных.Родитель);
	Запрос.УстановитьПараметр("Событие",   Событие);
	
	МассивЗначимыхСобытий       = Новый Массив;
	ВыборкаЗначимыхСобытий = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначимыхСобытий.Следующий() Цикл
		Если ПроверитьУсловияЗначимогоСобытия(ВыборкаЗначимыхСобытий.Ссылка, Источник, ИдентификаторОбъектаМетаданных, Имя,СтруктураПараметровСеанса) Тогда
			МассивЗначимыхСобытий.Добавить(ВыборкаЗначимыхСобытий.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Если условия не выполняются, то продолжать не имеет смысла
	Если МассивЗначимыхСобытий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого ТекСобытие Из МассивЗначимыхСобытий Цикл
		Если ВыполнитьДействияЗначимогоСобытия(ТекСобытие, Источник, ИдентификаторОбъектаМетаданных, Имя, Результат) Тогда
			
			Текст = "Выполнены следующие действия значимого события <" + ТекСобытие + ">:" + Символы.ПС;
			
			Для Каждого ТекТекст Из Результат Цикл
				Текст = " - " + ТекТекст;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Успешно выполнены действия значимого события <" + ТекСобытие + ">.'"),УровеньЖурналаРегистрации.Информация,,ТекСобытие,Текст);
			
		Иначе
			
			ТекстОшибка = "";
			
			Для Каждого ТекОшибка Из Результат Цикл
				ТекстОшибка = " - " + ТекОшибка;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'При выполнении действий значимого события <" + ТекСобытие + "> обнаружены ошибки.'"),УровеньЖурналаРегистрации.Ошибка,,ТекСобытие,ТекстОшибка);
			ВызватьИсключение НСтр("ru='При выполнении значимого события обнаружены ошибки.'");
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЗначимоеСобытие()

// Процедура вызывается из всех обработчиков подписок.
//
// Параметры:
//  Источник  - произвольный объект - объект вызвавший событие.
//  Отказ     - Булево         - В данный параметр передается признак выполнения события.
//  Событие  - "Строка" - вид события.
// 
Процедура РеакцияНаЗначимоеСобытие(Источник,Отказ, Событие)
	
	// Проверим текущее состояние транзакции
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производиться.
	//Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Источник) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// В режиме фонового задания обработка значимых заданий не производиться
	//Если ТехнологическаяПлатформаСервер.ЭтоФоновоеЗадание() Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Отбросим из рассмотрения объекты, попавшие в исключения
	Если Метаданные.ОпределяемыеТипы.Scan_ИсключенияЗначимыеСобытия.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем, нужно ли использовать значимые события для данного объекта
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(Источник.ДополнительныеСвойства, "ИспользоватьЗначимоеСобытие", ПолучитьФункциональнуюОпцию("ИспользоватьЗначимыеСобытия")) Тогда
		Возврат;
	КонецЕсли;
	
		
	КодВыполняетсяНаСервере = НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(типЗнч(Источник));
	ТипИсточника     = "";
	ИсточникНаСервер = ПреобразоватьИсточник(Источник, ИдентификаторОбъектаМетаданных, ТипИсточника);
	
	Если ТипИсточника = "СсылочныйТип" Тогда
		Ключ = СтрЗаменить(Источник.Ссылка.УникальныйИдентификатор(),"-","_");
		Ключ = Ключ + "_" + Событие;
	Иначе
		Ключ = "";
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(ИсточникНаСервер);
	Параметры.Добавить(ТипИсточника);
	Параметры.Добавить(Событие);
	СтруктураПараметровСеанса = Новый Структура;
		
	//rarus FominskiyAS 28.02.2019  mantis 13863 +++
	//СтруктураПараметровСеанса.Вставить("Организация",ПараметрыСеанса.ТекущийПользователь.Организация);
	//СтруктураПараметровСеанса.Вставить("ПодразделениеКомпании",ПараметрыСеанса.ТекущийПользователь.ПодразделениеОрганизации);
	//СтруктураПараметровСеанса.Вставить("Пользователь",ПараметрыСеанса.ТекущийПользователь);

	СтруктураПараметровСеанса.Вставить("Организация",ПользователиСлужебный.АвторизованныйПользователь().Организация);
    СтруктураПараметровСеанса.Вставить("ПодразделениеКомпании",ПользователиСлужебный.АвторизованныйПользователь().ПодразделениеОрганизации);
	СтруктураПараметровСеанса.Вставить("Пользователь",ПользователиСлужебный.АвторизованныйПользователь());
 		
	//rarus FominskiyAS 28.02.2019  mantis 13863 ---


	// Так же необходимо передать на сервер признак того, что объект новый.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Параметры.Добавить(Источник.ДополнительныеСвойства.ЭтоНовый);
		СтруктураПараметровСеанса.Вставить("ЭтоНовый",Источник.ДополнительныеСвойства.ЭтоНовый);
	Иначе
		Параметры.Добавить(Ложь);
		СтруктураПараметровСеанса.Вставить("ЭтоНовый",Ложь);
	КонецЕсли;
	
		Параметры.Добавить(СтруктураПараметровСеанса);
	
	Задание = ФоновыеЗадания.Выполнить("Scan_ЗначимыеСобытия.ОбработатьЗначимоеСобытие", Параметры,, "ЗначимоеСобытие");
	
КонецПроцедуры // РеакцияНаЗначимоеСобытие() 


////////////////////////////////////////////////////////////////////////////////////
//// ПРОВЕРКА УСЛОВИЙ ЗНАЧИМОГО СОБЫТИЯ

// Функция проверяет условия значимого события.
//
// Параметры:
//  ЭлементСсылка  - "СправочникСсылка.ЗначимыеСобытия" - ссылка на элемент справочника,
//					 условия которого нужно проверить.
//
//  Источник  - произвольный объект - объект-источник события.
//
//  Класс  - "Строка" - класс объектов метаданных, которому принадлежит текущий объект-источник.
//
//  Имя  - "Строка" - имя объекта метаданных соответствующего объекту-источнику.
//
//  Событие  - "Строка" - обрабатываемое событие.
//
// Возвращаемое значение:
//   "Булево"   - Если все проверки успешно пройдены, то возвращается Истина, иначе Ложь.
// 
Функция ПроверитьУсловияЗначимогоСобытия(Знач ЭлементСсылка, Знач Источник, Знач ИдентификаторОбъектаМетаданных, Знач Имя,СтруктураПараметров = Неопределено)
	
	// Если у элемента справочника "Значимые события" установлен флаг "Обрабатывать события только для новых объектов", 
	// то необходимо произвести эту проверку.
	Если ЭлементСсылка.ТолькоНовыйОбъект Тогда
		Если СтруктураПараметров.Свойство("ЭтоНовый") Тогда
			Если НЕ СтруктураПараметров.ЭтоНовый Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СсылочныйТип = НЕ (ИдентификаторОбъектаМетаданных.ЗначениеПустойСсылки = Неопределено);
	ЭтоКонстанта = ИдентификаторОбъектаМетаданных.ПорядокКоллекции = 0;
	ИмяТаблицы   = ИдентификаторОбъектаМетаданных.ПолноеИмя;
	    
	// Сначала проверяем простые условия.
	// Проверять будем при помощи запроса. В зависимости от класса объекта-источника, текст запроса будет различен.
	РезультатПроверки = Истина;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Использование", Истина);
	СтруктураПоиска.Вставить("ВидУсловия",    Ложь);
	мсвСтрок = ЭлементСсылка.Условия.НайтиСтроки(СтруктураПоиска);
	Если мсвСтрок.Количество()<>0 Тогда
		Если ЭтоКонстанта Тогда
			РезультатПроверки = ПроверитьПростыеУсловияКонстанты(мсвСтрок, Имя);
		Иначе
			Если СсылочныйТип Тогда
				РезультатПроверки = ПроверитьПростыеУсловияСсылочногоТипа(мсвСтрок, Источник, ИмяТаблицы);
			Иначе
				РезультатПроверки = ПроверитьПростыеУсловияНеСсылочногоТипа(мсвСтрок, Источник, ИмяТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если уже Ложь, то проверять дальше смысла нет.
	Если НЕ РезультатПроверки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверяем произвольные условия
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Использование", Истина);
	СтруктураПоиска.Вставить("ВидУсловия",    Истина);
	мсвСтрок = ЭлементСсылка.Условия.НайтиСтроки(СтруктураПоиска);
	Если мсвСтрок.Количество()<>0 Тогда
		Для Каждого ТекУсловие Из мсвСтрок Цикл
			Результат = Неопределено;
			Объект    = Источник;
			Попытка
				Выполнить(ТекУсловие.ТекстПроизвольногоУсловия);
			Исключение	
				Результат = Неопределено
			КонецПопытки;
			Если ТипЗнч(Результат)=Тип("Булево") Тогда
				Если НЕ Результат Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьУсловияЗначимогоСобытия() 

// Функция проверяет простые условия объекта-источника вида "Константа".
// Проверка выполняется посредством запроса.
//
// Параметры:
//  мсвСтрок  - "Массив" - массив строк табличной части "Условия" элемента справочника "Значимые события",
//						   соответствующих простым условиям.                   
// 
//  ИмяКонстанты  - "Строка" - имя константы.
//
// Возвращаемое значение:
//   "Булево" - в случае успешной проверки всех условий возвращается Истина.
//
Функция ПроверитьПростыеУсловияКонстанты(мсвСтрок, ИмяКонстанты)
	
	ТекстЗапроса = "";	
	
	Для Сч=0 По (мсвСтрок.Количество()-1) Цикл  	
		ТекУсловие = мсвСтрок[Сч];
		
		Если ПустаяСтрока(ТекУсловие.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекстЗапроса="" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	" + ИмяКонстанты +  "
			|ИЗ
			|	Константы 
			|{ГДЕ
			|";			
		Иначе
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС; 			
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекУсловие.ПутьКДанным + ".*";		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "}";
	Запрос = Новый ПостроительЗапроса(ТекстЗапроса);
	Запрос.ЗаполнитьНастройки();
	
	Для Сч=0 По (мсвСтрок.Количество()-1) Цикл
		ОтборИмя = СтрЗаменить(мсвСтрок[Сч].ПутьКДанным,".","");
		
		Если НЕ Запрос.ДоступныеПоля[ОтборИмя] = Неопределено И
			Запрос.ДоступныеПоля[ОтборИмя].ТипЗначения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Отбор.Добавить(ОтборИмя);
		Запрос.Отбор[ОтборИмя].Использование = Истина;
		Запрос.Отбор[ОтборИмя].Значение 	 = мсвСтрок[Сч].ЗначениеСравнения;
		
		Сравнение = ВидСравнения.Равно;
		Если мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.Больше Тогда
			Сравнение = ВидСравнения.Больше;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.БольшеИлиРавно Тогда
			Сравнение = ВидСравнения.БольшеИлиРавно;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.Меньше Тогда
			Сравнение = ВидСравнения.Меньше;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.МеньшеИлиРавно Тогда
			Сравнение = ВидСравнения.МеньшеИлиРавно;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.НеРавно Тогда
			Сравнение = ВидСравнения.НеРавно;
		КонецЕсли;			
		
		Запрос.Отбор[ОтборИмя].ВидСравнения  = Сравнение;
	КонецЦикла;
	
	Запрос.Выполнить();
	
	Если Запрос.Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
КонецФункции // ПроверитьПростыеУсловияКонстанты()

// Функция проверяет простые условия объекта-источника ссылочного вида.
//
// Параметры:
//  мсвСтрок  - "Массив" - массив строк табличной части "Условия" элемента справочника "Значимые события",
//                 		   соответствующих простым условиям.
//  Источник  - произвольный объект - объект-источник события.
//
//  ИмяТаблицы  - "Строка" - имя таблицы БД, соответствующей объекту-источнику.
//
// Возвращаемое значение:
//   "Булево" - в случае успешной проверки всех условий возвращается Истина.
//
Функция ПроверитьПростыеУсловияСсылочногоТипа(мсвСтрок, Источник, ИмяТаблицы)
	
	ТекстЗапроса = "";	
	
	Для Сч=0 По (мсвСтрок.Количество()-1) Цикл  	
		ТекУсловие = мсвСтрок[Сч];
		
		Если ПустаяСтрока(ТекУсловие.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекстЗапроса="" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Ссылка
			|ИЗ
			|	" + ИмяТаблицы + " 
			|{ГДЕ
			|	Ссылка.*,
			|";			
		Иначе
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС; 			
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекУсловие.ПутьКДанным + ".* КАК " + СтрЗаменить(мсвСтрок[Сч].ПутьКДанным,".","");		
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "}";
	Запрос = Новый ПостроительЗапроса(ТекстЗапроса);
	Запрос.ЗаполнитьНастройки();
	
	Запрос.Отбор.Добавить("Ссылка");
	Запрос.Отбор["Ссылка"].Использование = Истина;
	Запрос.Отбор["Ссылка"].Значение 	 = Источник.Ссылка;
	Запрос.Отбор["Ссылка"].ВидСравнения  = ВидСравнения.Равно;
	
	Для Сч=0 По (мсвСтрок.Количество()-1) Цикл
		ОтборИмя = СтрЗаменить(мсвСтрок[Сч].ПутьКДанным,".","");
		
		Если НЕ Запрос.ДоступныеПоля[ОтборИмя] = Неопределено И
			Запрос.ДоступныеПоля[ОтборИмя].ТипЗначения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Отбор.Добавить(ОтборИмя);
		Запрос.Отбор[ОтборИмя].Использование = Истина;
		Запрос.Отбор[ОтборИмя].Значение 	 = мсвСтрок[Сч].ЗначениеСравнения;
		
		Сравнение = ВидСравнения.Равно;
		Если мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.Больше Тогда
			Сравнение = ВидСравнения.Больше;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.БольшеИлиРавно Тогда
			Сравнение = ВидСравнения.БольшеИлиРавно;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.Меньше Тогда
			Сравнение = ВидСравнения.Меньше;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.МеньшеИлиРавно Тогда
			Сравнение = ВидСравнения.МеньшеИлиРавно;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.НеРавно Тогда
			Сравнение = ВидСравнения.НеРавно;
		КонецЕсли;
		
		Запрос.Отбор[ОтборИмя].ВидСравнения  = Сравнение;
	КонецЦикла;
	
	Запрос.Выполнить();
	
	Если Запрос.Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ПроверитьПростыеУсловияСсылочногоТипа() 

// Функция проверяет простые условия объекта-источника не ссылочного вида (наборы записей).
//
// Параметры:
//  мсвСтрок  - "Массив" - массив строк табличной части "Условия" элемента справочника "Значимые события",
//                 		   соответствующих простым условиям.
//  Источник  - произвольный объект - объект-источник события.
//
//  ИмяТаблицы  - "Строка" - имя таблицы БД, соответствующей объекту-источнику.
//
// Возвращаемое значение:
//   "Булево" - в случае успешной проверки всех условий возвращается Истина.
// 
Функция ПроверитьПростыеУсловияНеСсылочногоТипа(мсвСтрок, Источник, ИмяТаблицы)
	
	ТекстЗапроса = "
	| ВЫБРАТЬ *
	| ИЗ
	|" + ИмяТаблицы + "
	|";
	
	ТекстОграничений = ""; 	
	Для Сч=0 По (мсвСтрок.Количество()-1) Цикл  			
		ТекУсловие = мсвСтрок[Сч];
		
		Если ПустаяСтрока(ТекУсловие.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекстОграничений="" Тогда
			ТекстОграничений = "{ ГДЕ ";
		Иначе
			ТекстОграничений = ТекстОграничений + "," + Символы.ПС; 			
		КонецЕсли;
		ТекстОграничений = ТекстОграничений + ТекУсловие.ПутьКДанным + ".* КАК " + СтрЗаменить(мсвСтрок[Сч].ПутьКДанным,".","");	
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОграничений) Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстОграничений + "}";
	КонецЕсли;
	
	Запрос = Новый ПостроительЗапроса(ТекстЗапроса);
	Запрос.ЗаполнитьНастройки();
	
	Для Сч=0 По (мсвСтрок.Количество()-1) Цикл
		ОтборИмя = СтрЗаменить(мсвСтрок[Сч].ПутьКДанным,".","");
		
		Если НЕ Запрос.ДоступныеПоля[ОтборИмя] = Неопределено И
			Запрос.ДоступныеПоля[ОтборИмя].ТипЗначения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Отбор.Добавить(ОтборИмя);
		Запрос.Отбор[ОтборИмя].Использование = Истина;
		Запрос.Отбор[ОтборИмя].Значение 	 = мсвСтрок[Сч].ЗначениеСравнения;
		
		Сравнение = ВидСравнения.Равно;
		Если мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.Больше Тогда
			Сравнение = ВидСравнения.Больше;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.БольшеИлиРавно Тогда
			Сравнение = ВидСравнения.БольшеИлиРавно;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.Меньше Тогда
			Сравнение = ВидСравнения.Меньше;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.МеньшеИлиРавно Тогда
			Сравнение = ВидСравнения.МеньшеИлиРавно;
		ИначеЕсли мсвСтрок[Сч].ВидСравнения = Перечисления.Scan_ВидСравнения.НеРавно Тогда
			Сравнение = ВидСравнения.НеРавно;
		КонецЕсли;			
		
		Запрос.Отбор[ОтборИмя].ВидСравнения  = Сравнение;		
	КонецЦикла; 	
	
	Запрос.Выполнить();
	
	Если Запрос.Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 	
	
КонецФункции // ПроверитьПростыеУсловияНеСсылочногоТипа()


////////////////////////////////////////////////////////////////////////////////////
//// ВЫПОЛНЕНИЕ ДЕЙСТВИЙ ЗНАЧИМОГО СОБЫТИЯ, ПРОШЕДШЕГО ПРОВЕРКУ.
////////////////////////////////////////////////////////////////////////////////////

// Функция выполняет действия значимого события. 
//
// Параметры:
//  СобытиеСсылка  - "СправочникСсылка.ЗначимыеСобытия" - ссылка на элемент справочника "Значимые события", 
//														  действия которого необходимо выполнить.
//  Источник  - Произвольный объект - объект-источник события.
//
//  КлассИсточника  - "Строка" - строковое представление класса объектов метаданных,
//					  которому принадлежит объект-источник.
//
//  ИмяИсточника  - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//
Функция ВыполнитьДействияЗначимогоСобытия(СобытиеСсылка, Источник,Идентификатор,ИмяИсточника,Результат)
	
	// Если задан режим выполнения "в транзакции", то инициализируем транзакцию.
	Если СобытиеСсылка.РежимВыполнения=Перечисления.Scan_РежимыВыполненияДействий.ВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИсточникСобытия", Источник);
	Параметры.Вставить("ПолноеИмя",             Идентификатор.ПолноеИмя);
	Параметры.Вставить("ИмяИсточника",          ИмяИсточника);
	Параметры.Вставить("ЭтоКонстанта",          (Идентификатор.ПорядокКоллекции = 0));
	Параметры.Вставить("СсылочныйТип",          (НЕ Идентификатор.ЗначениеПустойСсылки=Неопределено));
	Параметры.Вставить("ВыполненныеДействия",   Новый Массив);
	Параметры.Вставить("Ошибки",                Новый Массив);
	Параметры.Вставить("СозданныеОбъекты",      Новый Массив);
	ОшибкаСозданияОбъекта = Ложь;
	
	Для каждого СтрокаДействия ИЗ СобытиеСсылка.Действия Цикл
		
		Действие = СтрокаДействия.Действие;
		Если Действие.ВидДействия=Перечисления.Scan_ВидДействияНаЗначимоеСобытие.СоздатьИЗаписатьОбъект Тогда
			
			// СОЗДАНИЕ ПРОИЗВОЛЬНОГО ОБЪЕКТА
			СозданныйОбъект = СоздатьИЗаписатьОбъект(Действие, Параметры);
			
		ИначеЕсли Действие.ВидДействия=Перечисления.Scan_ВидДействияНаЗначимоеСобытие.СоздатьНапоминание Тогда
			
			// СОЗДАТЬ НАПОМИНАНИЕ
			СозданныйОбъект = СоздатьНапоминание(Действие, Параметры);
			
		//ИначеЕсли Действие.ВидДействия=Перечисления.ВидДействияНаЗначимоеСобытие.СоздатьЗаписьЖурналаРегистрации Тогда
		//	
		//	// СОЗДАТЬ ЗАПИСЬ В ЖУРНАЛЕ РЕГИСТРАЦИИ
		//	СозданныйОбъект = СоздатьЗаписьЖурналаРегистрации(Действие, Параметры);
			
		ИначеЕсли Действие.ВидДействия=Перечисления.Scan_ВидДействияНаЗначимоеСобытие.НаписатьЭлектронноеПисьмо Тогда
			
			// НАПИСАТЬ ЭЛЕКТРОННОЕ ПИСЬМО
			СозданныйОбъект = СоздатьЭлектронноеПисьмо(Действие, Параметры);
			
		ИначеЕсли Действие.ВидДействия=Перечисления.Scan_ВидДействияНаЗначимоеСобытие.НаписатьЭлектронноеПисьмоСВложением Тогда
			
			// НАПИСАТЬ ЭЛЕКТРОННОЕ ПИСЬМО С ВЛОЖЕНИЕМ 
			СозданныйОбъект = СоздатьЭлектронноеПисьмоСВложением(Действие, Параметры);
			
		//ИначеЕсли Действие.ВидДействия=Перечисления.ВидДействияНаЗначимоеСобытие.Прочее Тогда
		//	
		//	// ПРОЧЕЕ ДЕЙСТВИЕ
		//	ВыполнитьПрочееДействие(Действие, Параметры);
			
		КонецЕсли;
		
		// Созданный объект сохраняем в массиве для доступа к нему в последующих действиях.
		// Объект "вставляется" в массив под номером равным его порядку.
		// Если текущий объект создать не удалось, то соот-но запишется "Неопределено"
		//Параметры.СозданныеОбъекты.Вставить(Выборка.Порядок, СозданныйОбъект); 
		
		Если СозданныйОбъект=Неопределено Тогда
			ОшибкаСозданияОбъекта = Истина;
			Если СобытиеСсылка.РежимВыполнения=Перечисления.Scan_РежимыВыполненияДействий.ВТранзакции Тогда
				Прервать;
			ИначеЕсли СобытиеСсылка.РежимВыполнения=Перечисления.Scan_РежимыВыполненияДействий.Прерывать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если действия выполнялись в транзакции, то зафиксируем ее (или откатим)
	ОткатТранзакции = Ложь;
	Если СобытиеСсылка.РежимВыполнения=Перечисления.Scan_РежимыВыполненияДействий.ВТранзакции Тогда
		Если ОшибкаСозданияОбъекта Тогда
			ОтменитьТранзакцию();
			// Устанавливаем признак отмены транзакции и очищаем массив сообщений об успешно выполненных действиях.
			ОткатТранзакции = Истина;
			Параметры.ВыполненныеДействия.Очистить();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	// Теперь выводим сообщения с информацией о созданных объектах, а также ругательства.
	Если Параметры.Ошибки.Количество()<>0 Тогда
		
		Результат = Параметры.Ошибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Параметры.ВыполненныеДействия.Количество()<>0 Тогда 
		
		Результат = Параметры.ВыполненныеДействия;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВыполнитьДействияЗначимогоСобытия() 

// Функция выполняет отправку Электронного письма.
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания документа, возвращает объект-документ. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьЭлектронноеПисьмо(Действие, Параметры)
		
	Автор         = Справочники.Пользователи.ПустаяСсылка();
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	Тема          = "";
	Комментарий   = "";
	ТекстПисьма   = "";
	Важность      = Перечисления.Scan_Важность.Средняя;
	ФорматТекста  = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	
	мсвПоляВыборки = Новый Массив;
	
	// Вычисляем значение реквизита Автор
	Если НЕ ПустаяСтрока(Действие.АвторПутьКДанным) Тогда
		РеквизитОбъектаИсточника = СтрЗаменить(Действие.АвторПутьКДанным, "Ссылка.", "");
		мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК Автор");
		
	ИначеЕсли НЕ ПустаяСтрока(Действие.АвторПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Автор            = Неопределено; 
			Выполнить(Действие.АвторПроизвольныйКод);
			Если ТипЗнч(Автор)<>Тип("СправочникСсылка.Пользователи") Тогда
				Автор =  Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Автор электронного письма>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки()+" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Автор)=Тип("СправочникСсылка.Пользователи") Тогда
			Автор = Действие.Автор;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Учетная запись
	Если НЕ ПустаяСтрока(Действие.эпУчетнаяЗаписьПутьКДанным) Тогда
		РеквизитОбъектаИсточника = СтрЗаменить(Действие.эпУчетнаяЗаписьПутьКДанным, "Ссылка.", "");
		мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК УчетнаяЗапись");
		
	ИначеЕсли НЕ ПустаяСтрока(Действие.эпУчетнаяЗаписьПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			УчетнаяЗапись    = Неопределено; 
			Выполнить(Действие.эпУчетнаяЗаписьПроизвольныйКод);
			Если ТипЗнч(УчетнаяЗапись)<>Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
				УчетнаяЗапись =  Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Учетная запись>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки() +" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.эпУчетнаяЗапись)=Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			УчетнаяЗапись = Действие.эпУчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;

	// Вычисляем значение реквизита Тема
	Если НЕ ПустаяСтрока(Действие.ТемаПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Тема             = Неопределено; 
			Выполнить(Действие.ТемаПроизвольныйКод);
			Если ТипЗнч(Тема)<>Тип("Строка") Тогда
				Тема =  Строка(Тема);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Тема>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки()+ " '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Тема)=Тип("Строка") Тогда
			Тема = Действие.Тема;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Комментарий
	Если НЕ ПустаяСтрока(Действие.КомментарийПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Комментарий      = Неопределено; 
			Выполнить(Действие.КомментарийПроизвольныйКод);
			Если ТипЗнч(Комментарий)<>Тип("Строка") Тогда
				Комментарий =  Строка(Комментарий);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Комментарий>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки() +" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Комментарий)=Тип("Строка") Тогда
			Комментарий = Действие.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Важность
	Если НЕ ПустаяСтрока(Действие.ВажностьПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Важность         = Неопределено;
			Выполнить(Действие.ВажностьПроизвольныйКод);
			Если ТипЗнч(Важность)<>Тип("ПеречислениеСсылка.Scan_Важность") Тогда
				Важность =  Перечисления.Scan_Важность.Обычная;
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Важность>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки() +" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Важность)=Тип("ПеречислениеСсылка.Scan_Важность") Тогда
			Важность = Действие.Важность;
		КонецЕсли;
	КонецЕсли; 
	
	// Вычисляем значение реквизита Текст письма
	Если НЕ ПустаяСтрока(Действие.эпТекстПисьмаПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			ТекстПисьма      = Неопределено; 
			Выполнить(Действие.эпТекстПисьмаПроизвольныйКод);
			Если ТипЗнч(ТекстПисьма)<>Тип("Строка") Тогда
				ТекстПисьма =  Строка(ТекстПисьма);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Текст письма>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки() +" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.эпТекстПисьма)=Тип("Строка") Тогда
			ТекстПисьма = Действие.эпТекстПисьма;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Формат текста
	Если НЕ Действие.эпФорматТекста.Пустая() Тогда
		ФорматТекста = Действие.эпФорматТекста;
	КонецЕсли;
	
	// Заполняем реквизиты, которые заполняются по объекту-источнику
	Если мсвПоляВыборки.Количество()<>0 Тогда
		СсылочныйТип = Параметры.СсылочныйТип;
		ЭтоКонстанта = Параметры.ЭтоКонстанта;
		ИмяТаблицы = Параметры.ПолноеИмя;
		Если ЭтоКонстанта или СсылочныйТип Тогда
			ТекстЗапроса = "ВЫБРАТЬ ";
			Для Сч=0 По (мсвПоляВыборки.Количество()-1) Цикл
				ТекстЗапроса = ТекстЗапроса + " " + мсвПоляВыборки[Сч];
				Если Сч<(мсвПоляВыборки.Количество()-1) Тогда
					ТекстЗапроса = ТекстЗапроса + ",";
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
			Если СсылочныйТип Тогда
				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Если СсылочныйТип Тогда
				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			ТекВыборка = Запрос.Выполнить().Выбрать();
			
			Если ТекВыборка.Следующий() Тогда 
				Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
					Если ТекКолонка.Имя="Автор" Тогда
						Если ТипЗнч(ТекВыборка[ТекКолонка.Имя])=Тип("СправочникСсылка.Пользователи") Тогда
							Автор = ТекВыборка[ТекКолонка.Имя];
						КонецЕсли;
					ИначеЕсли ТекКолонка.Имя="УчетнаяЗапись" Тогда
						Если ТипЗнч(ТекВыборка[ТекКолонка.Имя])=Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
							УчетнаяЗапись = ТекВыборка[ТекКолонка.Имя]; 
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем получателей письма
	тзПолучателиПисьма  = Новый ТаблицаЗначений;
	тзПолучателиПисьма.Колонки.Добавить("АдресЭлектроннойПочты");
	тзПолучателиПисьма.Колонки.Добавить("Представление");
	тзПолучателиПисьма.Колонки.Добавить("КодГруппыАдреса");
	тзПолучателиПисьма.Колонки.Добавить("Контакт");
	
	тзПолучателиВыгрузка = Действие.ПолучателиПисьма.Выгрузить();
	Для Каждого ТекСтрока Из тзПолучателиВыгрузка Цикл
		Если ТекСтрока.ВидПравила=Перечисления.Scan_ВидыПравил.ТочноеЗначение Тогда
			Если НЕ ПустаяСтрока(ТекСтрока.АдресЭлектроннойПочты) Тогда
				НоваяСтрока = тзПолучателиПисьма.Добавить();
				НоваяСтрока.АдресЭлектроннойПочты = ТекСтрока.АдресЭлектроннойПочты;
				НоваяСтрока.Представление         = ТекСтрока.Представление;
				НоваяСтрока.КодГруппыАдреса       = ТекСтрока.КодГруппыАдреса;
				НоваяСтрока.Контакт               = ТекСтрока.Контакт;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.ВидПравила=Перечисления.Scan_ВидыПравил.ПроизвольныйКод Тогда
			Попытка
				ОбъектИсточник        = Параметры.ОбъектИсточникСобытия;
				СозданныеОбъекты      = Параметры.СозданныеОбъекты;
				АдресЭлектроннойПочты = Неопределено;
				Выполнить(ТекСтрока.ПроизвольныйКод);
				Если ТипЗнч(АдресЭлектроннойПочты)=Тип("Строка") Тогда
					Если НЕ ПустаяСтрока(АдресЭлектроннойПочты) Тогда
						НоваяСтрока = тзПолучателиПисьма.Добавить();
						НоваяСтрока.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
						НоваяСтрока.Представление         = "";
						НоваяСтрока.Контакт               = ТекСтрока.Контакт;
						НоваяСтрока.КодГруппыАдреса       = ТекСтрока.КодГруппыАдреса;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении получателей электронного письма. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ПолучателиПисьма = Новый ТаблицаЗначений;
	ПолучателиПисьма.Колонки.Добавить("Адрес");
	ПолучателиПисьма.Колонки.Добавить("Представление");
	ПолучателиПисьма.Колонки.Добавить("Контакт");
	
	ПолучателиКопий = Новый ТаблицаЗначений;
	ПолучателиКопий.Колонки.Добавить("Адрес");
	ПолучателиКопий.Колонки.Добавить("Представление");
	ПолучателиКопий.Колонки.Добавить("Контакт");
	
	ПолучателиСкрытыхКопий = Новый ТаблицаЗначений;
	ПолучателиСкрытыхКопий.Колонки.Добавить("Адрес");
	ПолучателиСкрытыхКопий.Колонки.Добавить("Представление");
	ПолучателиСкрытыхКопий.Колонки.Добавить("Контакт");
	
	Для Каждого ТекПолучатель Из тзПолучателиПисьма Цикл
		Если ТекПолучатель.КодГруппыАдреса = "Кому" Тогда
			НоваяСтрока = ПолучателиПисьма.Добавить();
		ИначеЕсли ТекПолучатель.КодГруппыАдреса = "Копия" Тогда
			НоваяСтрока = ПолучателиКопий.Добавить();
		ИначеЕсли ТекПолучатель.КодГруппыАдреса = "СкрытаяКопия" Тогда
			НоваяСтрока = ПолучателиСкрытыхКопий.Добавить();
		КонецЕсли;
		НоваяСтрока.Адрес = ТекПолучатель.АдресЭлектроннойПочты;
		НоваяСтрока.Представление = ТекПолучатель.Представление;
		НоваяСтрока.Контакт       = ТекПолучатель.Контакт;
	КонецЦикла;
	
	// Получим представление отправителя
	ОтправительПредставление = ?(СокрЛП(УчетнаяЗапись.Пользователь) = "", "<", УчетнаяЗапись.Пользователь + " <") + УчетнаяЗапись.АдресЭлектроннойПочты + ">" ;
	/////////////////////////////////
	////////////////////////////////////
	////////////////////////////////
	
	//Создание структуры ПараметрыПисьма
	
	
	ПараметрыПисьма = Новый Структура;

	ДобавитьВПараметрАдресатов(ПолучателиПисьма,ПараметрыПисьма,"Кому");
	ДобавитьВПараметрАдресатов(ПолучателиКопий,ПараметрыПисьма,"Копии");
	ДобавитьВПараметрАдресатов(ПолучателиСкрытыхКопий,ПараметрыПисьма,"СлепыеКопии");
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	ПараметрыПисьма.Вставить("Важность",  ПолучитьВажность(Важность));
	ПараметрыПисьма.Вставить("ТипТекста", ФорматТекста);
	
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
		
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
		
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецФункции // СоздатьЭлектронноеПисьмо() 


// Функция выполняет отправку Электронного письма с вложением.
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания документа, возвращает объект-документ. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьЭлектронноеПисьмоСВложением(Действие, Параметры)
	
	ОбъектИсточникСобытия = Параметры.ОбъектИсточникСобытия; 
	Автор                 = Справочники.Пользователи.ПустаяСсылка();
	УчетнаяЗапись         = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	Тема                  = "";
	Комментарий           = "";
	ТекстПисьма           = "";
	Важность              = Перечисления.Scan_Важность.Средняя;
	ФорматТекста          = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	
	мсвПоляВыборки = Новый Массив;
	
	// Вычисляем значение реквизита Автор
	Если НЕ ПустаяСтрока(Действие.АвторПутьКДанным) Тогда
		РеквизитОбъектаИсточника = СтрЗаменить(Действие.АвторПутьКДанным, "Ссылка.", "");
		мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК Автор");
		
	ИначеЕсли НЕ ПустаяСтрока(Действие.АвторПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Автор            = Неопределено; 
			Выполнить(Действие.АвторПроизвольныйКод);
			Если ТипЗнч(Автор)<>Тип("СправочникСсылка.Пользователи") Тогда
				Автор =  Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Автор электронного письма>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки()+" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Автор)=Тип("СправочникСсылка.Пользователи") Тогда
			Автор = Действие.Автор;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Учетная запись
	Если НЕ ПустаяСтрока(Действие.эпУчетнаяЗаписьПутьКДанным) Тогда
		РеквизитОбъектаИсточника = СтрЗаменить(Действие.эпУчетнаяЗаписьПутьКДанным, "Ссылка.", "");
		мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК УчетнаяЗапись");
		
	ИначеЕсли НЕ ПустаяСтрока(Действие.эпУчетнаяЗаписьПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			УчетнаяЗапись    = Неопределено; 
			Выполнить(Действие.эпУчетнаяЗаписьПроизвольныйКод);
			Если ТипЗнч(УчетнаяЗапись)<>Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
				УчетнаяЗапись =  Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Учетная запись>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки() +" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.эпУчетнаяЗапись)=Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			УчетнаяЗапись = Действие.эпУчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;

	// Вычисляем значение реквизита Тема
	Если НЕ ПустаяСтрока(Действие.ТемаПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Тема             = Неопределено; 
			Выполнить(Действие.ТемаПроизвольныйКод);
			Если ТипЗнч(Тема)<>Тип("Строка") Тогда
				Тема =  Строка(Тема);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Тема>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки()+ " '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Тема)=Тип("Строка") Тогда
			Тема = Действие.Тема;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Комментарий
	Если НЕ ПустаяСтрока(Действие.КомментарийПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Комментарий      = Неопределено; 
			Выполнить(Действие.КомментарийПроизвольныйКод);
			Если ТипЗнч(Комментарий)<>Тип("Строка") Тогда
				Комментарий =  Строка(Комментарий);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Комментарий>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки() +" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Комментарий)=Тип("Строка") Тогда
			Комментарий = Действие.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Важность
	Если НЕ ПустаяСтрока(Действие.ВажностьПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Важность         = Неопределено;
			Выполнить(Действие.ВажностьПроизвольныйКод);
			Если ТипЗнч(Важность)<>Тип("ПеречислениеСсылка.Scan_Важность") Тогда
				Важность =  Перечисления.Scan_Важность.Обычная;
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Важность>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки() +" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Важность)=Тип("ПеречислениеСсылка.Scan_Важность") Тогда
			Важность = Действие.Важность;
		КонецЕсли;
	КонецЕсли; 
	
	// Вычисляем значение реквизита Текст письма
	Если НЕ ПустаяСтрока(Действие.эпТекстПисьмаПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			ТекстПисьма      = Неопределено; 
			Выполнить(Действие.эпТекстПисьмаПроизвольныйКод);
			Если ТипЗнч(ТекстПисьма)<>Тип("Строка") Тогда
				ТекстПисьма =  Строка(ТекстПисьма);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Текст письма>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки() +" '"));
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.эпТекстПисьма)=Тип("Строка") Тогда
			ТекстПисьма = Действие.эпТекстПисьма;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Формат текста
	Если НЕ Действие.эпФорматТекста.Пустая() Тогда
		ФорматТекста = Действие.эпФорматТекста;
	КонецЕсли; 
	
	
	
	// Заполняем реквизиты, которые заполняются по объекту-источнику
	Если мсвПоляВыборки.Количество()<>0 Тогда
		СсылочныйТип = Параметры.СсылочныйТип;
		ЭтоКонстанта = Параметры.ЭтоКонстанта;
		ИмяТаблицы = Параметры.ПолноеИмя;
		Если ЭтоКонстанта или СсылочныйТип Тогда
			ТекстЗапроса = "ВЫБРАТЬ ";
			Для Сч=0 По (мсвПоляВыборки.Количество()-1) Цикл
				ТекстЗапроса = ТекстЗапроса + " " + мсвПоляВыборки[Сч];
				Если Сч<(мсвПоляВыборки.Количество()-1) Тогда
					ТекстЗапроса = ТекстЗапроса + ",";
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
			Если СсылочныйТип Тогда
				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Если СсылочныйТип Тогда
				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			ТекВыборка = Запрос.Выполнить().Выбрать();
			
			Если ТекВыборка.Следующий() Тогда 
				Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
					Если ТекКолонка.Имя="Автор" Тогда
						Если ТипЗнч(ТекВыборка[ТекКолонка.Имя])=Тип("СправочникСсылка.Пользователи") Тогда
							Автор = ТекВыборка[ТекКолонка.Имя];
						КонецЕсли;
					ИначеЕсли ТекКолонка.Имя="УчетнаяЗапись" Тогда
						Если ТипЗнч(ТекВыборка[ТекКолонка.Имя])=Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
							УчетнаяЗапись = ТекВыборка[ТекКолонка.Имя]; 
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем получателей письма
	тзПолучателиПисьма  = Новый ТаблицаЗначений;
	тзПолучателиПисьма.Колонки.Добавить("АдресЭлектроннойПочты");
	тзПолучателиПисьма.Колонки.Добавить("Представление");
	тзПолучателиПисьма.Колонки.Добавить("КодГруппыАдреса");
	тзПолучателиПисьма.Колонки.Добавить("Контакт");
	
	тзПолучателиВыгрузка = Действие.ПолучателиПисьма.Выгрузить();
	Для Каждого ТекСтрока Из тзПолучателиВыгрузка Цикл
		Если ТекСтрока.ВидПравила=Перечисления.Scan_ВидыПравил.ТочноеЗначение Тогда
			Если НЕ ПустаяСтрока(ТекСтрока.АдресЭлектроннойПочты) Тогда
				НоваяСтрока = тзПолучателиПисьма.Добавить();
				НоваяСтрока.АдресЭлектроннойПочты = ТекСтрока.АдресЭлектроннойПочты;
				НоваяСтрока.Представление         = ТекСтрока.Представление;
				НоваяСтрока.КодГруппыАдреса       = ТекСтрока.КодГруппыАдреса;
				НоваяСтрока.Контакт               = ТекСтрока.Контакт;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.ВидПравила=Перечисления.Scan_ВидыПравил.ПроизвольныйКод Тогда
			Попытка
				ОбъектИсточник        = Параметры.ОбъектИсточникСобытия;
				СозданныеОбъекты      = Параметры.СозданныеОбъекты;
				АдресЭлектроннойПочты = Неопределено;
				Выполнить(ТекСтрока.ПроизвольныйКод);
				Если ТипЗнч(АдресЭлектроннойПочты)=Тип("Строка") Тогда
					Если НЕ ПустаяСтрока(АдресЭлектроннойПочты) Тогда
						НоваяСтрока = тзПолучателиПисьма.Добавить();
						НоваяСтрока.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
						НоваяСтрока.Представление         = "";
						НоваяСтрока.Контакт               = ТекСтрока.Контакт;
						НоваяСтрока.КодГруппыАдреса       = ТекСтрока.КодГруппыАдреса;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении получателей электронного письма. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ПолучателиПисьма = Новый ТаблицаЗначений;
	ПолучателиПисьма.Колонки.Добавить("Адрес");
	ПолучателиПисьма.Колонки.Добавить("Представление");
	ПолучателиПисьма.Колонки.Добавить("Контакт");
	
	ПолучателиКопий = Новый ТаблицаЗначений;
	ПолучателиКопий.Колонки.Добавить("Адрес");
	ПолучателиКопий.Колонки.Добавить("Представление");
	ПолучателиКопий.Колонки.Добавить("Контакт");
	
	ПолучателиСкрытыхКопий = Новый ТаблицаЗначений;
	ПолучателиСкрытыхКопий.Колонки.Добавить("Адрес");
	ПолучателиСкрытыхКопий.Колонки.Добавить("Представление");
	ПолучателиСкрытыхКопий.Колонки.Добавить("Контакт");
	
	Для Каждого ТекПолучатель Из тзПолучателиПисьма Цикл
		Если ТекПолучатель.КодГруппыАдреса = "Кому" Тогда
			НоваяСтрока = ПолучателиПисьма.Добавить();
		ИначеЕсли ТекПолучатель.КодГруппыАдреса = "Копия" Тогда
			НоваяСтрока = ПолучателиКопий.Добавить();
		ИначеЕсли ТекПолучатель.КодГруппыАдреса = "СкрытаяКопия" Тогда
			НоваяСтрока = ПолучателиСкрытыхКопий.Добавить();
		КонецЕсли;
		НоваяСтрока.Адрес = ТекПолучатель.АдресЭлектроннойПочты;
		НоваяСтрока.Представление = ТекПолучатель.Представление;
		НоваяСтрока.Контакт       = ТекПолучатель.Контакт;
	КонецЦикла;
	
	// Получим представление отправителя
	ОтправительПредставление = ?(СокрЛП(УчетнаяЗапись.Пользователь) = "", "<", УчетнаяЗапись.Пользователь + " <") + УчетнаяЗапись.АдресЭлектроннойПочты + ">" ;
	//Создание структуры ПараметрыПисьма
	
	//Формируем вложенные файлы
	Если Действие.Вложения.Количество()>0 Тогда
		Для каждого СтрокаВложений Из Действие.Вложения Цикл
			Если СтрокаВложений.Активность= Истина Тогда
				Если ПроверитьВозможностьФормирования(ОбъектИсточникСобытия,СтрокаВложений.ПредставлениеПечатнойФормы) Тогда	
					ПараметрКоманды = Новый Массив;
					ПараметрКоманды.Добавить(ОбъектИсточникСобытия);
					//ИмяМакета = "ПФ_MXL_ЗаявкаПеревозчику";
					//ИменаМакетов = СтрЗаменить(ИмяМакета," ","");
					ИменаМакетов = СтрокаВложений.НаименованиеПечатнойФормы;
					ДополнительныеПараметры = Новый Структура;
					ЗаполнитьДополнительныеПараметры(ДополнительныеПараметры,ОбъектИсточникСобытия);
					ПечатнаяФорма = СформироватьПечатныеФормы(ИменаМакетов,Параметры.ПолноеИмя,ПараметрКоманды,ДополнительныеПараметры);
					ТаблицаФорматов = Новый ТаблицаЗначений;
					МассивВыбранныхФорматов = Новый Массив;
					ЗаполнитьТаблицуФорматов(ТаблицаФорматов);
					ЗаполнитьМассивВыбранныхФорматов(ТаблицаФорматов,МассивВыбранныхФорматов,СтрокаВложений.ФорматПФ);
					УпаковатьВАрхив = СтрокаВложений.УпаковатьВАрхив;
					Результат = ПоместитьТабличныеДокументыВоВременноеХранилище(ТаблицаФорматов,МассивВыбранныхФорматов,УпаковатьВАрхив,ПечатнаяФорма);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 		
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;

	ДобавитьВПараметрАдресатов(ПолучателиПисьма,ПараметрыПисьма,"Кому");
	ДобавитьВПараметрАдресатов(ПолучателиКопий,ПараметрыПисьма,"Копии");
	ДобавитьВПараметрАдресатов(ПолучателиСкрытыхКопий,ПараметрыПисьма,"СлепыеКопии");
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	ПараметрыПисьма.Вставить("Важность",  ПолучитьВажность(Важность));
	ПараметрыПисьма.Вставить("ТипТекста", ФорматТекста);
	ПараметрыПисьма.Вставить("Вложения", Результат);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Ложь);
		
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Ложь);
		
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецФункции // СоздатьЭлектронноеПисьмо() 

Процедура ЗаполнитьМассивВыбранныхФорматов(ТаблицаФорматов,МассивВыбранныхФорматов, СтрокаВыбранныхФорматов)
	МассивСтрокФорматов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаВыбранныхФорматов,",");
	Для каждого Формат Из ТаблицаФорматов Цикл
		Индекс = МассивСтрокФорматов.Найти(строка(Формат.ТипФайлаТабличногоДокумента));		
		Если Индекс<>Неопределено Тогда
			МассивВыбранныхФорматов.Добавить(Формат.ТипФайлаТабличногоДокумента);	
		КонецЕсли; 
	КонецЦикла;	 
КонецПроцедуры


Функция СформироватьПечатныеФормы(ИменаМакетов,ИмяМенеджераПечати,ПараметрКоманды, ДополнительныеПараметры)
	
	ТипыОбъектовПечати = Новый Массив;
	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов,
			ПараметрКоманды, ДополнительныеПараметры, ТипыОбъектовПечати);
	
	//	ОбъектыПечати = ПечатныеФормы.ОбъектыПечати;
	//	ПараметрыВывода = ПечатныеФормы.ПараметрыВывода;
		Результат = ПечатныеФормы.КоллекцияПечатныхФорм;
	//
	
	//// Установка признака сохранения печатной формы в файл (не открывать форму, сразу сохранять в файл).
	//Если ТипЗнч(Параметры.ПараметрыПечати) = Тип("Структура") И Параметры.ПараметрыПечати.Свойство("ФорматСохранения") Тогда
	//	НайденныйФормат = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента().Найти(Параметры.ПараметрыПечати.ФорматСохранения, "ТипФайлаТабличногоДокумента");
	//	Если НайденныйФормат <> Неопределено Тогда
	//		НастройкиФорматаСохранения = Новый Структура("ТипФайлаТабличногоДокумента,Представление,Расширение,Фильтр");
	//		ЗаполнитьЗначенияСвойств(НастройкиФорматаСохранения, НайденныйФормат);
	//		НастройкиФорматаСохранения.Фильтр = НастройкиФорматаСохранения.Представление + "|*." + НастройкиФорматаСохранения.Расширение;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуФорматов(ТаблицаФорматов) Экспорт //rarus sergei 05.12.2016 mantis 7169 +
	ТаблицаФорматов.Колонки.Добавить("ТипФайлаТабличногоДокумента", Новый ОписаниеТипов(), "ТаблицаФорматов");
	ТаблицаФорматов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(), "ТаблицаФорматов");
	ТаблицаФорматов.Колонки.Добавить("Представление", Новый ОписаниеТипов(), "ТаблицаФорматов");
	ТаблицаФорматов.Колонки.Добавить("Расширение", Новый ОписаниеТипов(), "ТаблицаФорматов");
	ТаблицаФорматов.Колонки.Добавить("Картинка", Новый ОписаниеТипов(), "ТаблицаФорматов");
	
	
	// Документ PDF (.pdf)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.PDF;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.PDF;
	НовыйФормат.Расширение = "pdf";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	// Лист Microsoft Excel 2007 (.xlsx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLSX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLSX;
	НовыйФормат.Расширение = "xlsx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel2007;

	// Лист Microsoft Excel 97-2003 (.xls)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLS;
	НовыйФормат.Расширение = "xls";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel;

	// Электронная таблица OpenDocument (.ods).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ODS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ODS;
	НовыйФормат.Расширение = "ods";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	
	// Табличный документ (.mxl)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.MXL;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.MXL;
	НовыйФормат.Расширение = "mxl";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматMXL;

	// Документ Word 2007 (.docx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.DOCX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.DOCX;
	НовыйФормат.Расширение = "docx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматWord2007;
	
	// Веб-страница (.html)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.HTML;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.HTML;
	НовыйФормат.Расширение = "html";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматHTML;
	
	// Текстовый документ UTF-8 (.txt).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.TXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.TXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;
	
	// Текстовый документ ANSI (.txt).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ANSITXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;	
КонецПроцедуры

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(ТаблицаФорматов,ОтмеченныеФорматы,УпаковатьВАрхив,ТабличныеДокументы) Экспорт	//rarus tenkam 02.05.2017 + (экспорт)
	Перем ЗаписьZipФайла;
	Результат = Новый Массив;
	//Результат = Новый СписокЗначений;
	ИспользованныеИменаФайлов = Новый Соответствие;
	// Архив
	Если УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// Каталог временных файлов
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки);
	
	// Сохранение табличных документов.
	Для Каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		
		
		Для Каждого ТипФайла Из ОтмеченныеФорматы Цикл
			ПараметрыФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
			Если ТабличныйДокумент.ТабличныйДокумент.ИспользуемоеИмяФайла<>"" Тогда
				ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ТабличныйДокумент.ТабличныйДокумент.ИспользуемоеИмяФайла,ПараметрыФормата.Расширение,ИспользованныеИменаФайлов);	
			Иначе	
				ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ТабличныйДокумент.ИмяМакета,ПараметрыФормата.Расширение,ИспользованныеИменаФайлов);
			КонецЕсли;
			ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);		
			//ИмяФайла = ТабличныйДокумент.Представление + "." + ПараметрыФормата.Расширение;
			//ПолноеИмяФайла = ПолныйПутьКФайлу + ИмяФайла;
			//
			//ТабличныйДокумент.Значение.Записать(ПолноеИмяФайла, ТипФайла);
			ТабличныйДокумент.ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайла);
			Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
				ВставитьКартинкиВHTML(ПолноеИмяФайла);
			КонецЕсли;
			
			Если ЗаписьZipФайла <> Неопределено Тогда 
				ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
			Иначе
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор());
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("Представление", ИмяФайла);
				ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
				ОписаниеФайла.Вставить("Кодировка", "");
				Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
					ОписаниеФайла.Вставить("Кодировка", "windows-1251");
				КонецЕсли;
				Результат.Добавить(ОписаниеФайла);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//// Если архив подготовлен, записываем и помещаем его во временное хранилище.
	//Если УпаковатьВАрхив Тогда 
	//	ЗаписьZipФайла.Записать();
	//	
	//	ФайлАрхива = Новый Файл(ИмяАрхива);
	//	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
	//	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
	//	ОписаниеФайла = Новый Структура;
	//	ОписаниеФайла.Вставить("Представление", ПолучитьИмяФайлаДляАрхива());
	//	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
	//	Результат.Добавить(ОписаниеФайла);
	//КонецЕсли;
	// Если архив подготовлен, записываем и помещаем его во временное хранилище.
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор());
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ФайлАрхива.Имя);
		ОписаниеФайла.Вставить("Кодировка", "");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		Результат.Добавить(ОписаниеФайла);
	КонецЕсли;
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов) Экспорт //rarus sergei 05.12.2016 mantis 7169 +
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
		
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
							ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
							1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// Если имя уже было ранее использовано, прибавляем счетчик в конце имени.
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, " (" + НомерИспользования + ")", Расширение));
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции


Функция УникальноеИмяФайла(ИмяФайла) Экспорт //rarus sergei 05.12.2016 mantis 7169 +
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;

КонецФункции


Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// Ожидается, что в папке будут только картинки.
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПараметры(ДополнительныеПараметры, Источник)
	Если ТипЗнч(Источник)= Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		ДополнительныеПараметры.Вставить("ЗаголовокФормы", "Печатная форма");                    
		ДополнительныеПараметры.Вставить("ВыводитьСпецификацииИзделий",  Ложь);
		ДополнительныеПараметры.Вставить("ПоказыватьДопУсловия",         Ложь);
				
	Иначе
		ДополнительныеПараметры.Вставить("ЗаголовокФормы","Печатная форма");
		ДополнительныеПараметры.Вставить("ВыводитьГруппировкиИзделий",Ложь);
		ДополнительныеПараметры.Вставить("ВыводитьТаможенноеОформление",Ложь);
		ДополнительныеПараметры.Вставить("ВыводитьСпецификацииИзделий",Ложь);
		ДополнительныеПараметры.Вставить("ПоказыватьДопУсловия",Ложь);
		ДополнительныеПараметры.Вставить("ТОСтранаОтправления","");
		ДополнительныеПараметры.Вставить("ТОСтранаПрибытия","");
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьФормирования(Источник, МакетПФ)
	Если ТипЗнч(Источник)= Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
		Если Строка(Источник.ХозОперация) = МакетПФ Тогда
			Возврат Истина;
		ИначеЕсли Источник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.ПередачаВПроизводство И МакетПФ = "М15" Тогда	
			Возврат Истина;
		ИначеЕсли Источник.ХозОперация = Справочники.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаВПроизводство И МакетПФ = "М15" Тогда	
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 			
КонецФункции

Функция ПолучитьВажность(ВажностьВзаимодействия) Экспорт
	
	Если ВажностьВзаимодействия = Перечисления.Scan_Важность.Высокая Тогда
		Возврат ВажностьИнтернетПочтовогоСообщения.Высокая;
	ИначеЕсли ВажностьВзаимодействия = Перечисления.Scan_Важность.Низкая Тогда
		Возврат ВажностьИнтернетПочтовогоСообщения.Низкая;
	Иначе
		Возврат ВажностьИнтернетПочтовогоСообщения.Обычная;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВПараметрАдресатов(Таблица, ПараметрыПисьма, ИмяПараметра) Экспорт

	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адресаты = Новый Массив;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.Адрес, СтрокаТаблицы.Представление));
	КонецЦикла;
	
	ПараметрыПисьма.Вставить(ИмяПараметра, Адресаты);
	
КонецПроцедуры



// Функция выполняет создание объекта произвольного вида.
// А также ряд дополнительных действий. Например, проведение документа.
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				 к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания объекта возвращает созданный объект. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьИЗаписатьОбъект(Действие, Параметры)
	
	ТипОбъекта = Действие.ТипОбъекта;
	Если ПустаяСтрока(ТипОбъекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем класс объекта метаданных, к которому принадлежит СОЗДАВАЕМЫЙ объект.
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Действие.ТипОбъекта.ПолноеИмя);
	КлассОбъекта     = Действие.ТипОбъекта.Родитель.ПолноеИмя;
	
	Если ОбъектМетаданных=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КлассОбъекта="Константы" Тогда
		НовыйОбъект = Константы[ОбъектМетаданных.Имя].СоздатьМенеджерЗначения();
		
	ИначеЕсли КлассОбъекта="Справочники" Тогда
		НовыйОбъект = Справочники[ОбъектМетаданных.Имя].СоздатьЭлемент();
		
	ИначеЕсли КлассОбъекта="Документы" Тогда
		НовыйОбъект = Документы[ОбъектМетаданных.Имя].СоздатьДокумент();
		
	ИначеЕсли КлассОбъекта="ПланыВидовХарактеристик" Тогда
		НовыйОбъект = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].СоздатьЭлемент();
		
	ИначеЕсли КлассОбъекта="ПланыСчетов" Тогда
		НовыйОбъект = ПланыСчетов[ОбъектМетаданных.Имя].СоздатьСчет();
		
	ИначеЕсли КлассОбъекта="ПланыВидовРасчета" Тогда
		НовыйОбъект = ПланыВидовРасчета[ОбъектМетаданных.Имя].СоздатьВидРасчета();
		
	ИначеЕсли КлассОбъекта="РегистрыСведений" Тогда
		НаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		НовыйОбъект  = НаборЗаписей.Добавить();
		
	ИначеЕсли КлассОбъекта="БизнесПроцессы" Тогда
		НовыйОбъект = БизнесПроцессы[ОбъектМетаданных.Имя].СоздатьБизнесПроцесс();
		
	ИначеЕсли КлассОбъекта="Задачи" Тогда
		НовыйОбъект = Задачи[ОбъектМетаданных.Имя].СоздатьЗадачу();
		
	ИначеЕсли КлассОбъекта="ПланыОбмена" Тогда
		НовыйОбъект = ПланыОбмена[ОбъектМетаданных.Имя].СоздатьУзел();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нужно, задействуем механизм ввода на основании.
	Попытка
		Если Действие.ЗаполнитьРеквизитыПоУмолчанию Тогда
			НовыйОбъект.Заполнить(Неопределено);
		ИначеЕсли Действие.ЗадействоватьВводНаОсновании Тогда
			НовыйОбъект.Заполнить(Параметры.ОбъектИсточникСобытия.Ссылка);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	// ТОЧНЫЕ ЗНАЧЕНИЯ
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидПравила", Перечисления.Scan_ВидыПравил.ТочноеЗначение);
	тзСоответствия = Действие.Соответствия.Выгрузить();
	мсвПравил      = тзСоответствия.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекПравило Из мсвПравил Цикл
		Если КлассОбъекта="Константы" Тогда
			НовыйОбъект.Значение = ТекПравило.Правило;
			Прервать;
		Иначе
			НовыйОбъект[СтрЗаменить(ТекПравило.РеквизитОбъекта, "Ссылка.", "")] = ТекПравило.Правило;
		КонецЕсли;
	КонецЦикла;
	
	// РЕКВИЗИТЫ ОБЪЕКТА-ИСТОЧНИКА
	мсвПоляВыборки = Новый Массив;	
	СтруктураПоиска.Вставить("ВидПравила", Перечисления.Scan_ВидыПравил.РеквизитОбъектаИсточника);
	мсвПравил = тзСоответствия.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекПравило Из мсвПравил Цикл
		Если НЕ ПустаяСтрока(ТекПравило.ПутьКДанным) Тогда
			Если КлассОбъекта="Константы" Тогда
				мсвПоляВыборки.Добавить("" + ТекПравило.ПутьКДанным + " КАК " + "Значение");
				Прервать;
			Иначе
				РеквизитОбъектаИсточника = СтрЗаменить(ТекПравило.ПутьКДанным, "Ссылка.", "");
				РеквизитНовогоОбъекта    = СтрЗаменить(ТекПравило.РеквизитОбъекта, "Ссылка.", "");
				мсвПоляВыборки.Добавить("" + РеквизитОбъектаИсточника + " КАК " + РеквизитНовогоОбъекта);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если мсвПоляВыборки.Количество()<>0 Тогда
		СсылочныйТип = Параметры.СсылочныйТип;
		ЭтоКонстанта = Параметры.ЭтоКонстанта;
		ИмяТаблицы = Параметры.ПолноеИмя;
		Если ЭтоКонстанта или СсылочныйТип Тогда
			ТекстЗапроса = "ВЫБРАТЬ ";
			Для Сч=0 По (мсвПоляВыборки.Количество()-1) Цикл
				ТекстЗапроса = ТекстЗапроса + " " + мсвПоляВыборки[Сч];
				Если Сч<(мсвПоляВыборки.Количество()-1) Тогда
					ТекстЗапроса = ТекстЗапроса + ",";
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
			Если СсылочныйТип Тогда
				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Если СсылочныйТип Тогда
				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
			КонецЕсли;
			
			ТекВыборка = Запрос.Выполнить().Выбрать();
			
			Если ТекВыборка.Следующий() Тогда
				Для Каждого ТекПравило Из мсвПравил Цикл
					Реквизит = СтрЗаменить(ТекПравило.РеквизитОбъекта, "Ссылка.", "");
					Попытка
						Если КлассОбъекта="Константы" Тогда
							НовыйОбъект.Значение = ТекВыборка.Значение;
							Прервать;
						Иначе
							НовыйОбъект[Реквизит] = ТекВыборка[Реквизит];
						КонецЕсли;
					Исключение
						Если КлассОбъекта="Константы" Тогда
							Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при установке значения константы. Неверное значение реквизита объекта-источника: "+ОписаниеОшибки());	
						Иначе
							Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при установке реквизита <" + ТекПравило.ПредставлениеРеквизита + ">. Неверное значение реквизита объекта-источника: "+ОписаниеОшибки());
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ПРОИЗВОЛЬНЫЙ КОД
	СтруктураПоиска.Вставить("ВидПравила", Перечисления.Scan_ВидыПравил.ПроизвольныйКод);
	мсвПравил = тзСоответствия.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекПравило Из мсвПравил Цикл 
		ЗначениеРеквизита = Неопределено;
		ОбъектИсточник    = Параметры.ОбъектИсточникСобытия;
		ТекущийОбъект     = НовыйОбъект;
		СозданныеОбъекты  = Параметры.СозданныеОбъекты;
		
		Реквизит = СтрЗаменить(ТекПравило.РеквизитОбъекта, "Ссылка.", "");
		Попытка
			Выполнить(ТекПравило.ПроизвольныйКод);
			Попытка
				Если КлассОбъекта="Константы" Тогда
					НовыйОбъект.Значение = ЗначениеРеквизита;
					Прервать;
				Иначе
					НовыйОбъект[Реквизит] = ЗначениеРеквизита;
				КонецЕсли;
			Исключение
				Если КлассОбъекта="Константы" Тогда
					Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при установке значения константы. Не соответствие типов: "+ОписаниеОшибки());	
				Иначе
					Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при установке реквизита <" + ТекПравило.ПредставлениеРеквизита + ">. Не соответствие типов: "+ОписаниеОшибки());
				КонецЕсли;
			КонецПопытки;
		Исключение
			Если КлассОбъекта="Константы" Тогда
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при установке значения константы. Ошибка выполнения произвольного кода: "+ОписаниеОшибки());
			Иначе
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при установке реквизита <" + ТекПравило.ПредставлениеРеквизита + ">. Ошибка выполнения произвольного кода: "+ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	// ЗАПИСЬ ОБЪЕКТА
	// Пометим объект, чтобы исключить бесконечную рекурсию.
	Если КлассОбъекта="РегистрыСведений" Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("Scan_ИспользоватьЗначимыеСобытия", Истина);
	Иначе
		НовыйОбъект.ДополнительныеСвойства.Вставить("Scan_ИспользоватьЗначимыеСобытия", Истина);
	КонецЕсли;
	
	Если КлассОбъекта="Документы" Тогда
		Попытка
			НовыйОбъект.Записать(РежимЗаписиДокумента.Запись);
			Параметры.ВыполненныеДействия.Добавить("Записан документ: " + НовыйОбъект);
		Исключение
			Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при записи документа: "+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		Если Действие.ПровестиДокумент Тогда
			Попытка
				НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Параметры.ВыполненныеДействия.Добавить("Проведен документ: " + НовыйОбъект);
			Исключение
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при проведении документа <" + НовыйОбъект + ">: "+ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли КлассОбъекта="РегистрыСведений" Тогда
		
		// Реквизиты записи соответсвующие измерениям должны быть обязательно заполнены, 
		// чтобы по ним можно было установить отбор набора записей.
		Если ОбъектМетаданных.РежимЗаписи<>Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			Если НЕ ЗначениеЗаполнено(НовыйОбъект.Регистратор) Тогда
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - не заполнен реквизит ""Регистратор""");
			Иначе
				НаборЗаписей.Отбор["Регистратор"].Установить(НовыйОбъект.Регистратор);
			КонецЕсли;
		Иначе
			Для Каждого ТекИзмерение Из ОбъектМетаданных.Измерения Цикл
				Если НЕ ЗначениеЗаполнено(НовыйОбъект[ТекИзмерение.Имя]) Тогда
					Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - не заполнен реквизит """ + ТекИзмерение.Представление() + """");
				Иначе
					НаборЗаписей.Отбор[ТекИзмерение.Имя].Установить(НовыйОбъект[ТекИзмерение.Имя]);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектМетаданных.ПериодичностьРегистраСведений<>Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				Если НЕ ЗначениеЗаполнено(НовыйОбъект.Период) Тогда
					Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - не заполнен реквизит ""Период""");
				Иначе
					НаборЗаписей.Отбор["Период"].Установить(НовыйОбъект.Период);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Ошибки.Количество()<>0 Тогда
			Возврат Неопределено;
		Иначе
			Попытка
				НаборЗаписей.Записать();
				Параметры.ВыполненныеДействия.Добавить("Создана запись регистра сведений <" + ОбъектМетаданных.Имя + ">");
			Исключение
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при записи объекта <" + НовыйОбъект + ">: "+ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			НовыйОбъект.Записать();
			Если КлассОбъекта="Константы" Тогда
				Параметры.ВыполненныеДействия.Добавить("Установлено значение константы: " + НовыйОбъект.Метаданные().Представление());	
			Иначе
				Параметры.ВыполненныеДействия.Добавить("Создан объект: " + НовыйОбъект);
			КонецЕсли;
		Исключение
			Если КлассОбъекта="Константы" Тогда
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при установлении значения константы <" + НовыйОбъект.Метаданные().Представление() + ">: "+ОписаниеОшибки());
			Иначе
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при записи объекта <" + НовыйОбъект + ">: "+ОписаниеОшибки());
			КонецЕсли;
			
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции // СоздатьИЗаписатьОбъект()

//// Функция выполняет создание записи в журнале регистрации.
////
//// Параметры:
////  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
////
////  Параметры  - "Структура" - структура необходимых параметров.
////				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
////				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
////				 к которому принадлежит объект-источник.
////               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
////               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
////               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
////               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
////													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
////
//// Возвращаемое значение:
////   В случае успешного создания записи в журнале регистрации возвращает пустую строку. 
////	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
////
//Функция СоздатьЗаписьЖурналаРегистрации(Действие, Параметры)
//	
//	Событие          = "";
//	УровеньВажности  = Неопределено;
//	ОбъектМетаданных = Неопределено;
//	Данные           = Неопределено;
//	Комментарий      = "";
//	Результат        = Истина;
//	
//	// Определяем регистрируемое событие
//	Если НЕ ПустаяСтрока(Действие.жрСобытиеПроизвольныйКод) Тогда
//		Попытка
//			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
//			СозданныеОбъекты = Параметры.СозданныеОбъекты;
//			Событие          = Неопределено;
//			Выполнить(Действие.жрСобытиеПроизвольныйКод);
//			Событие = Строка(Событие);
//		Исключение
//			Событие = "";
//			Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Регистрируемое событие>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
//		КонецПопытки;
//	Иначе
//		Событие = Действие.жрСобытие;
//	КонецЕсли;
//	
//	Если ПустаяСтрока(Событие) Тогда
//		Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - обязательный реквизит <Регистрируемое событие> - не заполнен.");
//		Результат = Ложь;
//	КонецЕсли;
//	
//	// Определяем уровень важности
//	Если Действие.жрУровеньВажности="Информация" Тогда
//		УровеньВажности = УровеньЖурналаРегистрации.Информация;
//	ИначеЕсли Действие.жрУровеньВажности="Ошибка" Тогда
//		УровеньВажности = УровеньЖурналаРегистрации.Ошибка
//	ИначеЕсли Действие.жрУровеньВажности="Предупреждение" Тогда
//		УровеньВажности = УровеньЖурналаРегистрации.Предупреждение
//	ИначеЕсли Действие.жрУровеньВажности="Примечание" Тогда
//		УровеньВажности = УровеньЖурналаРегистрации.Примечание
//	Иначе
//		УровеньВажности = Неопределено;
//	КонецЕсли;
//	
//	// Определяем объект метаданных
//	Если НЕ ПустаяСтрока(Действие.жрОбъектМетаданныхИмяОбъекта) Тогда
//		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Действие.жрОбъектМетаданныхИмяОбъекта);
//	ИначеЕсли НЕ ПустаяСтрока(Действие.жрОбъектМетаданных.ПолноеИмя) Тогда
//		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Действие.жрОбъектМетаданных.ПолноеИмя);
//	ИначеЕсли НЕ ПустаяСтрока(Действие.жрОбъектМетаданныхПроизвольныйКод) Тогда
//		Попытка
//			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
//			СозданныеОбъекты = Параметры.СозданныеОбъекты;
//			ОбъектМетаданных = Неопределено;
//			Выполнить(Действие.жрОбъектМетаданныхПроизвольныйКод);
//			Если ТипЗнч(ОбъектМетаданных)<>Тип("ОбъектМетаданных") Тогда
//				ОбъектМетаданных = Неопределено;
//			КонецЕсли;
//		Исключение
//			ОбъектМетаданных = Неопределено;
//			Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Объект метаданных>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
//		КонецПопытки; 
//	Иначе
//		ОбъектМетаданных = Неопределено;
//	КонецЕсли;
//	
//	// Теперь данные
//	Если НЕ ПустаяСтрока(Действие.жрДанныеПутьКДанным) Тогда
//		
//		// Запрос
//		СсылочныйТип = Параметры.СсылочныйТип;
//		ЭтоКонстанта = Параметры.ЭтоКонстанта;
//		ИмяТаблицы = Параметры.ПолноеИмя;
//		Если ЭтоКонстанта или СсылочныйТип Тогда
//			ТекстЗапроса = "ВЫБРАТЬ 
//			| " + СтрЗаменить(Действие.жрДанныеПутьКДанным, "Ссылка.", "") + " КАК Данные ";
//			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
//			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
//			Если СсылочныйТип Тогда
//				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
//			КонецЕсли;
//			
//			Запрос = Новый Запрос(ТекстЗапроса);
//			Если СсылочныйТип Тогда
//				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
//			КонецЕсли;
//			
//			РезультатЗапроса = Запрос.Выполнить();
//			ТекВыборка = Запрос.Выполнить().Выбрать();
//			
//			Если ТекВыборка.Следующий() Тогда 
//				Данные = ТекВыборка.Данные;
//			КонецЕсли;
//		КонецЕсли;
//	
//	ИначеЕсли НЕ ПустаяСтрока(Действие.жрДанныеПроизвольныйКод) Тогда
//		Попытка
//			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
//			СозданныеОбъекты = Параметры.СозданныеОбъекты;
//			Данные           = Неопределено;
//			Выполнить(Действие.жрДанныеПроизвольныйКод);
//		Исключение
//			Данные = Неопределено;
//			Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Данные>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
//		КонецПопытки;
//	Иначе
//		Данные = Действие.жрДанные;
//	КонецЕсли;
//	
//	// Комментарий
//	Если НЕ ПустаяСтрока(Действие.КомментарийПроизвольныйКод) Тогда
//		Попытка
//			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
//			СозданныеОбъекты = Параметры.СозданныеОбъекты;
//			Комментарий      = Неопределено;
//			Выполнить(Действие.КомментарийПроизвольныйКод);
//			Комментарий = Строка(Комментарий);
//		Исключение
//			Комментарий = "";
//			Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Комментарий>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
//		КонецПопытки; 
//	Иначе
//		Комментарий = Действие.Комментарий;
//	КонецЕсли;
//	
//	// СОЗДАНИЕ ЗАПИСИ
//	Попытка
//		ЗаписьЖурналаРегистрации(Событие, УровеньВажности, ОбъектМетаданных, Данные, Комментарий, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
//		Параметры.ВыполненныеДействия.Добавить("Записано событие <" + Событие + "> в журнал регистрации."); 
//	Исключение
//		Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка записи события в журнал регистрации: "+ОписаниеОшибки()); 
//	КонецПопытки;
//	
//	// Т.к. ссылаться на запись в журнале регистрации нельзя, то просто вернем
//	// пустую строку (а не НЕОПРЕДЕЛЕНО), тогда ошибка не будет зафиксирована.
//	Возврат "";
//	
//КонецФункции // СоздатьЗаписьЖурналаРегистрации() 


//// Выполнение произвольного действия
////
//// Параметры:
////  Действие  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
////
////  Параметры  - "Структура" - структура необходимых параметров.
////				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
////				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
////				 к которому принадлежит объект-источник.
////               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
////               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
////               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
////               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
////													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//Процедура ВыполнитьПрочееДействие(Действие, Параметры)
//	
//	Попытка
//		Выполнить(Действие.ПроизвольныйКод);
//	Исключение
//		Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при записи документа: "+ОписаниеОшибки());
//	КонецПопытки;
//	
//КонецПроцедуры //ВыполнитьПрочееДействие()

// Функция выполняет создание записи регистра сведений "Напоминания".
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				 к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания напоминания возвращает созданный набор записей. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьНапоминание(Действие, Параметры)
	
	мсвПоляВыборки        = Новый Массив;
	ДатаНапоминания       = Дата("00010101");
	Содержание            = "";
	Результат             = Истина;
	
	// Сначала вычислим значение даты начала напоминания
	Если НЕ ПустаяСтрока(Действие.ДатаНапоминанияПутьКДанным) Тогда
		РеквизитОбъектаИсточника = СтрЗаменить(Действие.ДатаНапоминанияПутьКДанным, "Ссылка.", "");
		мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК ДатаНапоминания");
		
	ИначеЕсли НЕ ПустаяСтрока(Действие.ДатаНапоминанияПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			ДатаНапоминания  = Неопределено;
			Выполнить(Действие.ДатаНапоминанияПроизвольныйКод);
			Если ТипЗнч(ДатаНапоминания)<>Тип("Дата") Тогда
				ДатаНапоминания = Дата("00010101");
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Дата начала>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.ДатаНапоминания)=Тип("Дата") Тогда
			ДатаНапоминания = Действие.ДатаНапоминания;
		КонецЕсли;
	КонецЕсли;
	
	// Содержание напоминания
	Если НЕ ПустаяСтрока(Действие.СодержаниеПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник      = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты    = Параметры.СозданныеОбъекты;
			Содержание          = Неопределено;
			Выполнить(Действие.СодержаниеПроизвольныйКод);
		Исключение
			Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита ""Содержание"". Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Содержание = Действие.Содержание;
	КонецЕсли;
	
	// Теперь пользователи-получатели
	тзПолучателиРезультат = Новый ТаблицаЗначений;
	тзПолучателиРезультат.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	тзПолучателиВыгрузка = Действие.ПолучателиНапоминания.Выгрузить();
	Для Каждого ТекСтрока Из тзПолучателиВыгрузка Цикл  	
		Если ТекСтрока.ВидПравила=Перечисления.Scan_ВидыПравил.ТочноеЗначение Тогда
			Если ТипЗнч(ТекСтрока.Значение)=Тип("СправочникСсылка.Пользователи") Тогда
				Если НЕ ТекСтрока.Значение.Пустая() Тогда
					НоваяСтрока = тзПолучателиРезультат.Добавить();
					НоваяСтрока.Пользователь = ТекСтрока.Значение;
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ТекСтрока.ВидПравила=Перечисления.Scan_ВидыПравил.ПроизвольныйКод Тогда
			Попытка
				ОбъектИсточник      = Параметры.ОбъектИсточникСобытия;
				СозданныеОбъекты    = Параметры.СозданныеОбъекты;
				Пользователь        = Неопределено;
				Выполнить(ТекСтрока.ПроизвольныйКод);
				Если ТипЗнч(Пользователь)=Тип("СправочникСсылка.Пользователи") Тогда
					Если НЕ Пользователь.Пустая() Тогда
						НоваяСтрока = тзПолучателиРезультат.Добавить();
						НоваяСтрока.Пользователь = Пользователь;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(Пользователь)=Тип("Массив") Тогда
					Для Каждого ТекПользователь Из Пользователь Цикл
						Если ТипЗнч(ТекПользователь)=Тип("СправочникСсылка.Пользователи") Тогда
							Если НЕ ТекПользователь.Пустая() Тогда
								НоваяСтрока = тзПолучателиРезультат.Добавить();
								НоваяСтрока.Пользователь = ТекПользователь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Исключение
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при заполнении реквизита <Пользователи>. Ошибка при выполнении произвольного кода: "+ОписаниеОшибки());
			КонецПопытки;
		Иначе
			РеквизитОбъектаИсточника = СтрЗаменить(ТекСтрока.ПутьКДанным, "Ссылка.", "");
			мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК Пользователь_" + мсвПоляВыборки.Количество());
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем реквизиты, которые заполняются по объекту-источнику
	Если мсвПоляВыборки.Количество()<>0 Тогда
		СсылочныйТип = Параметры.СсылочныйТип;
		ЭтоКонстанта = Параметры.ЭтоКонстанта;
		ИмяТаблицы = Параметры.ПолноеИмя;
		Если ЭтоКонстанта или СсылочныйТип Тогда
			ТекстЗапроса = "ВЫБРАТЬ ";
			Для Сч=0 По (мсвПоляВыборки.Количество()-1) Цикл
				ТекстЗапроса = ТекстЗапроса + " " + мсвПоляВыборки[Сч];
				Если Сч<(мсвПоляВыборки.Количество()-1) Тогда
					ТекстЗапроса = ТекстЗапроса + ",";
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
			Если СсылочныйТип Тогда
				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Если СсылочныйТип Тогда
				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			ТекВыборка = Запрос.Выполнить().Выбрать();
			
			Если ТекВыборка.Следующий() Тогда 
				Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
					Если Найти(ТекКолонка.Имя, "Пользователь")=0 Тогда
						Выполнить(ТекКолонка.Имя + " = ТекВыборка[ТекКолонка.Имя];");
					Иначе
						НоваяСтрока = тзПолучателиРезультат.Добавить();
						НоваяСтрока.Пользователь = ТекВыборка[ТекКолонка.Имя];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Действие.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени Тогда
		ВремяСобытия = ТекущаяДатаСеанса() + Действие.ИнтервалВремениНапоминания;
		ДатаНапоминания = ВремяСобытия;
		СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;	
		ИнтервалВремениНапоминания = 0;
	Иначе	
		ВремяСобытия = Действие.ВремяСобытия;
		СпособУстановкиВремениНапоминания = Действие.СпособУстановкиВремениНапоминания;
		ИнтервалВремениНапоминания = Действие.ИнтервалВремениНапоминания
	КонецЕсли;
	// Возможно после выполнения запроса, типы значений переменных не соответствуют их назначению.
	Если ТипЗнч(ДатаНапоминания)= Тип("Дата") И НЕ ПустаяСтрока(Действие.ДатаНапоминанияПутьКДанным) Тогда
		Результат = ДатаНапоминания;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ИсходнаяДата > &ТекущаяДата
		|			ТОГДА &ИсходнаяДата
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ИсходнаяДата, ГОД, РАЗНОСТЬДАТ(&ИсходнаяДата, &ТекущаяДата, ГОД))
		|	КОНЕЦ КАК БудущаяДата";
		
		Запрос.УстановитьПараметр("ИсходнаяДата", ДатаНапоминания);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Результат = Выборка.БудущаяДата;
		КонецЕсли;
		ВремяСобытия = Результат;
		ДатаНапоминания = Результат - Действие.ИнтервалВремениНапоминания;
	Иначе
		ДатаНапоминания = Дата("00010101");
	КонецЕсли;
	Если ТипЗнч(Содержание)<>Тип("Строка") Тогда
		Содержание = "";
	КонецЕсли;
	
	
	
	//НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	
	// Исключаем бесконечный цикл
	//НаборЗаписей.ДополнительныеСвойства.Вставить("ИспользоватьЗначимыеСобытия", Истина);
	
	
	// Количество записей будет равно количеству пользователей, которые получат напоминание.
	Для Каждого ЭлементСписка Из тзПолучателиРезультат Цикл
		ПараметрыНапоминания = Новый Структура;
		ПараметрыНапоминания.Вставить("Описание", Содержание);
		ПараметрыНапоминания.Вставить("Пользователь", ЭлементСписка.Пользователь);
		ПараметрыНапоминания.Вставить("ВремяСобытия", ВремяСобытия);
		ПараметрыНапоминания.Вставить("Источник", Параметры.ОбъектИсточникСобытия);
		ПараметрыНапоминания.Вставить("СрокНапоминания", ВремяСобытия);	
		ПараметрыНапоминания.Вставить("СпособУстановкиВремениНапоминания", СпособУстановкиВремениНапоминания);
		ПараметрыНапоминания.Вставить("ИнтервалВремениНапоминания", ИнтервалВремениНапоминания);
		ПараметрыНапоминания.Вставить("Расписание", Действие.Расписание);
				
				
		//rarus FominskiyAS 28.02.2019  mantis 13863 +++
		//ПараметрыНапоминания.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
		ПараметрыНапоминания.Вставить("Автор", ПользователиСлужебный.АвторизованныйПользователь());
		//rarus FominskiyAS 28.02.2019  mantis 13863 ---
		
		
		
		НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыНапоминания.Пользователь);
		НаборЗаписей.Отбор.Источник.Установить(ПараметрыНапоминания.Источник);
		//НаборЗаписей.Отбор.ВремяСобытия.Установить(ПараметрыНапоминания.ВремяСобытия)	;
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыНапоминания);
		Иначе
			ОбновитьСрокНапоминания = Истина;
			Для Каждого Запись Из НаборЗаписей Цикл
				ЗаполнитьЗначенияСвойств(Запись, ПараметрыНапоминания,,?(ОбновитьСрокНапоминания,"","СрокНапоминания"));
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать(Истина);
			Параметры.ВыполненныеДействия.Добавить("Создано напоминание.");
			
		Исключение
			Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при записи: "+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		//НоваяЗапись = НаборЗаписей.Добавить();
		//НоваяЗапись.Пользователь                      = ЭлементСписка.Пользователь;
		//НоваяЗапись.Автор                             = ПараметрыСеанса.ТекущийПользователь;
		//НоваяЗапись.Источник                          = Параметры.ОбъектИсточникСобытия;
		//НоваяЗапись.ВремяСобытия                      = ВремяСобытия;
		//НоваяЗапись.СрокНапоминания                   = ВремяСобытия;
		//НоваяЗапись.Описание                          = Содержание;
		//НоваяЗапись.СпособУстановкиВремениНапоминания = Действие.СпособУстановкиВремениНапоминания;
		//НоваяЗапись.ИнтервалВремениНапоминания        = Действие.ИнтервалВремениНапоминания;
		//НоваяЗапись.Расписание                        = Действие.Расписание;
		
	КонецЦикла;
	
	//Попытка
	//	НаборЗаписей.Записать(Истина);
	//	Параметры.ВыполненныеДействия.Добавить("Создано напоминание.");
	//	ПроверитьТекущиеНапоминания();
	//Исключение
	//	Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование + "> - ошибка при записи: "+ОписаниеОшибки());
	//	Возврат Неопределено;
	//КонецПопытки;
	
	Возврат НаборЗаписей;
	
КонецФункции // СоздатьНапоминание()

//////////////////////////////////////////////////////////////////////////////////
//// Обработчики подписок на события

// Общий обработчик события вызываемый по подписке при записи объекта.
//
// Параметры
//  Источник - произвольный объект - Объект, для которого выполняется обработка события.
//  Отказ    - Булево         - В данный параметр передается признак выполнения события.
//
Процедура ЗначимыеСобытияПриЗаписи(Источник, Отказ) Экспорт
	
	РеакцияНаЗначимоеСобытие(Источник, Отказ, "ПриЗаписи");
	
КонецПроцедуры //ЗначимыеСобытияПриЗаписи()


// Общий обработчик события вызываемый по подписке при записи регистров.
//
// Параметры
//  Источник - произвольный объект - Объект, для которого выполняется обработка события.
//  Отказ    - Булево         - В данный параметр передается признак выполнения события.
//
Процедура ЗначимыеСобытияПриЗаписиРегистры(Источник, Отказ, Замещение) Экспорт
	
	//rarus tenkam 29.11.2017 mantis 10885 +++
	//// Проверим текущее состояние транзакции
	////Если Источник.Записывать Тогда
	//	РеакцияНаЗначимоеСобытие(Источник, Отказ, "ПриЗаписи");
	////КонецЕсли;
	//rarus tenkam 29.11.2017 mantis 10885 ---
	
КонецПроцедуры //ЗначимыеСобытияПриЗаписиРегистры()

// Общий обработчик события вызываемый по подписке перед удалением объекта.
//
// Параметры
//  Источник - произвольный объект - Объект, для которого выполняется обработка события.
//  Отказ    - Булево         - В данный параметр передается признак выполнения события.
//
Процедура ЗначимыеСобытияПередУдалением(Источник, Отказ) Экспорт
	//rarus tenkam 29.11.2017 mantis 10885 +++
	//РеакцияНаЗначимоеСобытие(Источник, Отказ, "ПередУдалением");
	//rarus tenkam 29.11.2017 mantis 10885 ---	
КонецПроцедуры //ЗначимыеСобытияПередУдалением()

// Общий обработчик события вызываемый по подписке при удалении проведения документа.
//
// Параметры
//  Источник - произвольный объект - Объект, для которого выполняется обработка события.
//  Отказ    - Булево         - В данный параметр передается признак выполнения события.
//
Процедура ЗначимыеСобытияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	//rarus tenkam 29.11.2017 mantis 10885 +++	
	//РеакцияНаЗначимоеСобытие(Источник, Отказ, "ОбработкаУдаленияПроведения");
	//rarus tenkam 29.11.2017 mantis 10885 ---
КонецПроцедуры //ЗначимыеСобытияОбработкаУдаленияПроведения()

// Общий обработчик события вызываемый по подписке при проведении документа.
//
// Параметры
//  Источник - произвольный объект - Объект, для которого выполняется обработка события.
//  Отказ    - Булево         - В данный параметр передается признак выполнения события.
//
Процедура ЗначимыеСобытияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	//rarus tenkam 29.11.2017 mantis 10885 +++
	//РеакцияНаЗначимоеСобытие(Источник, Отказ, "ОбработкаПроведения");
	//rarus tenkam 29.11.2017 mantis 10885 ---	
КонецПроцедуры //ЗначимыеСобытияОбработкаПроведения()


