//rarus tenkam 25.03.2019 mantis 13629 +++
////////////
// ЕДИНЫЕ ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ РАЗБОРА ОТВЕТОВ
Процедура ЗаписьЖурналаПроверкиМетодов(ВидЗапросаСтрока, Запрос, КомментарийПоЗапросу, Ответ, КомментарийПоОтвету) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.Scan_Обмен1БДПроверкаМетодовОбменаС1БД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	ТекВидЗапроса = Scan_ВебСервисыРазборОтветов.ПолучитьПеречислениеПоСтрокеВидаЗапроса(ВидЗапросаСтрока);
	МенеджерЗаписи.ВидЗапроса = ТекВидЗапроса; 
	
	МенеджерЗаписи.Запрос = Запрос;
	МенеджерЗаписи.КомментарийПоЗапросу = КомментарийПоЗапросу;
	МенеджерЗаписи.Ответ = Ответ;
	МенеджерЗаписи.КомментарийПоОтвету = КомментарийПоОтвету;
	
	МенеджерЗаписи.Пользователь = ПользователиСлужебный.АвторизованныйПользователь();
		
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка записи данных о проверке методов 1БД", УровеньЖурналаРегистрации.Ошибка, Неопределено,, ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверитьВсеМетоды() Экспорт
	
	ОшибокНетОбщее = Истина;
	
	// rarus tenkam 08.04.2019 mantis 14308 +++
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_Обмен1БДНастройкиПроверкиМетодов.ВидЗапроса КАК ВидЗапроса
	|ИЗ
	|	РегистрСведений.Scan_Обмен1БДНастройкиПроверкиМетодов КАК Scan_Обмен1БДНастройкиПроверкиМетодов
	|ГДЕ
	|	Scan_Обмен1БДНастройкиПроверкиМетодов.Проверять = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОшибокНет = ПроверитьМетод(ВыборкаДетальныеЗаписи.ВидЗапроса);
		ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	КонецЦикла;
	
	//ОшибокНет = ПроверитьМетод("GetListOfProductMark");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetProductMark");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfProductGroup");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetProductGroup");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfProductType");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetProductType");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfProductSubType");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetProductSubType");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfProductModel");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetProductModel");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfSpecifications");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetSpecification");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	////ОшибокНет = ПроверитьМетод("GetListOfChassis");
	////ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetChassis");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfProduct");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetProduct");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	////ОшибокНет = ПроверитьМетод("GetListOfOrderToDelivery");
	////ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetOrderToDelivery");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfDealers");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetDealers");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfContragents");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetContragents");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfManufacturers");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetManufacturers");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetListOfSOP");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	//
	//ОшибокНет = ПроверитьМетод("GetSOP");
	//ОшибокНетОбщее = ОшибокНетОбщее И ОшибокНет;
	// rarus tenkam 08.04.2019 mantis 14308 ---
	
	Возврат ОшибокНетОбщее;
КонецФункции

Функция ПроверитьМетод(ВидЗапроса) Экспорт
	
	ОшибокНет = Истина;
	
	Если ТипЗнч(ВидЗапроса) <> Тип("Строка") Тогда
		ТекВидЗапроса = Scan_ВебСервисыРазборОтветов.ПолучитьИмяПеречисления(ВидЗапроса);
	Иначе
		ТекВидЗапроса = ВидЗапроса;
	КонецЕсли;
	
	Если ТекВидЗапроса = "GetListOfProductMark" ИЛИ ТекВидЗапроса = "GetProductMark" Тогда
		ОшибокНет = ПроверитьМаркиПродуктов(ТекВидЗапроса);	
	ИначеЕсли ТекВидЗапроса = "GetListOfProductGroup" ИЛИ ТекВидЗапроса = "GetProductGroup" Тогда
		ОшибокНет = ПроверитьГруппыПродуктов(ТекВидЗапроса);	
	ИначеЕсли ТекВидЗапроса = "GetListOfProductType" ИЛИ ТекВидЗапроса = "GetProductType" Тогда
		ОшибокНет = ПроверитьВидыПродуктов(ТекВидЗапроса);	
	ИначеЕсли ТекВидЗапроса = "GetListOfProductSubType" ИЛИ ТекВидЗапроса = "GetProductSubType" Тогда
		ОшибокНет = ПроверитьТипыПродуктов(ТекВидЗапроса);	
	ИначеЕсли ТекВидЗапроса = "GetListOfProductModel" ИЛИ ТекВидЗапроса = "GetProductModel" Тогда
		ОшибокНет = ПроверитьМоделиПродуктов(ТекВидЗапроса);	
		// rarus tenkam 09.09.2019 mantis 14841 +++	
	ИначеЕсли ТекВидЗапроса = "GetListOfSpecifications" ИЛИ ТекВидЗапроса = "GetSpecification" Тогда //rarus bonmak 24.09.2019 14177 ++
		ОшибокНет = ПроверитьСпецификацииПродуктов(ТекВидЗапроса);
		//rarus bonmak 24.09.2019 14177 --
		// rarus tenkam 09.09.2019 mantis 14841 ---	
	ИначеЕсли ТекВидЗапроса = "GetListOfChassis" ИЛИ ТекВидЗапроса = "GetChassis" Тогда
		ОшибокНет = ПроверитьИзделия(ТекВидЗапроса);	
	ИначеЕсли ТекВидЗапроса = "GetListOfProduct" ИЛИ ТекВидЗапроса = "GetProduct" Тогда
		ОшибокНет = ПроверитьПродукты(ТекВидЗапроса);	
	ИначеЕсли ТекВидЗапроса = "GetListOfOrderToDelivery" ИЛИ ТекВидЗапроса = "GetOrderToDelivery" Тогда
		ОшибокНет = ПроверитьЗаказыНаЗавод(ТекВидЗапроса);
	//rarus bonmak 15.04.2020 14456 ++
	//ИначеЕсли ТекВидЗапроса = "GetListOfDealers" ИЛИ ТекВидЗапроса = "GetDealers" Тогда
	//	ОшибокНет = ПроверитьДилеры(ТекВидЗапроса);
	ИначеЕсли ТекВидЗапроса = "GetListOfCompany" ИЛИ ТекВидЗапроса = "GetCompany" Тогда
		ОшибокНет = ПроверитьКомпании(ТекВидЗапроса);
	//rarus bonmak 15.04.2020 14456 --
	ИначеЕсли ТекВидЗапроса = "GetListOfContragents" ИЛИ ТекВидЗапроса = "GetContragents" Тогда
		ОшибокНет = ПроверитьКонтрагенты(ТекВидЗапроса);
	//rarus bonmak 14.04.2020 15891 ++
	//ИначеЕсли ТекВидЗапроса = "GetListOfManufacturers" ИЛИ ТекВидЗапроса = "GetManufacturers" Тогда
	//	ОшибокНет = ПроверитьПроизводителиМарок(ТекВидЗапроса);
	//rarus bonmak 14.04.2020 15891 --
	ИначеЕсли ТекВидЗапроса = "GetListOfSOP" ИЛИ ТекВидЗапроса = "GetSOP" Тогда
		ОшибокНет = ПроверитьСОП(ТекВидЗапроса);
	// rarus tenkam 25.04.2019 mantis 14223 +++
	ИначеЕсли ТекВидЗапроса = "GetListOfStatuses" Тогда
		ОшибокНет = ПроверитьЗаводскиеСтатусы(ТекВидЗапроса);
	ИначеЕсли ТекВидЗапроса = "GetListOfOptions" Тогда //rarus bonmak 08.10.2019 14177 ++
		ОшибокНет = ПроверитьОпции(ТекВидЗапроса);
		//rarus bonmak 08.10.2019 14177 --
	ИначеЕсли ТекВидЗапроса = "GetListOfSpecificationType" Тогда //rarus bonmak 08.10.2019 14177 ++
		ОшибокНет = ПроверитьВидыСпецификаций(ТекВидЗапроса);
		//rarus bonmak 08.10.2019 14177 --
	ИначеЕсли ТекВидЗапроса = "GetListOfCompanyType" Тогда //rarus BProg_Dekin 18.02.2020 mantis 0014456 ++
		ОшибокНет = ПроверитьФормыКомпаний(ТекВидЗапроса);
	ИначеЕсли ТекВидЗапроса = "GetListOfCompanyGroup" Тогда
		ОшибокНет = ПроверитьГруппыКомпаний(ТекВидЗапроса);
	ИначеЕсли ТекВидЗапроса = "GetListOfDealerType" Тогда 
		ОшибокНет = ПроверитьТипыДилеров(ТекВидЗапроса);
	ИначеЕсли ТекВидЗапроса = "GetListOfCooperationType" Тогда 
		ОшибокНет = ПроверитьВидыВзаимодействий(ТекВидЗапроса);
	//rarus BProg_Dekin 18.02.2020 mantis 0014456 --
	ИначеЕсли ТекВидЗапроса = "GetUpdatesList" Тогда //rarus bonmak 09.01.2020 15279 ++ 
		ОшибокНет = ПроверитьGetUpdatesList(ТекВидЗапроса);
	//rarus bonmak 09.01.2020 15279 --
	ИначеЕсли ТекВидЗапроса = "GetListOfSpecificationViewType" Тогда //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
		ОшибокНет = ПроверитьВидыПредставленийСпецификаций(ТекВидЗапроса);
	ИначеЕсли ТекВидЗапроса = "GetListOfSpecificationView" Тогда //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
		ОшибокНет = ПроверитьПредставленияСпецификаций(ТекВидЗапроса);	
	ИначеЕсли ТекВидЗапроса = "GetSpecificationView" Тогда //rarus BProg_Dekin 16.03.2020 mantis 0014177 +-
		ОшибокНет = ПроверитьИерархиюОпцийПредставленияСпецификаций(ТекВидЗапроса);
	ИначеЕсли ТекВидЗапроса = "GetListOfRegions" Тогда //rarus bonmak 07.01.2021 16625 ++
		ОшибокНет = ПроверитьРегионы(ТекВидЗапроса);
		//rarus bonmak 07.01.2021 16625 --
	// rarus agar 13.08.2021 17205 ++
	ИначеЕсли ТекВидЗапроса = "GetEPTS" Тогда
		ОшибокНет = ПроверитьGetEPTS(ТекВидЗапроса);
	ИначеЕсли ТекВидЗапроса = "GetEPTSstatement" Тогда
		ОшибокНет = ПроверитьGetEPTSstatement(ТекВидЗапроса);
	// rarus agar 13.08.2021 17205 --
	КонецЕсли;
	
	// rarus tenkam 25.04.2019 mantis 14223 ---	
	Возврат ОшибокНет;
	
КонецФункции

//// МАРКИ ПРОДУКТОВ
Функция ПроверитьМаркиПродуктов(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросМаркиПродуктов(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветМаркиПродуктов(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросМаркиПродуктов(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfProductMark" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetProductMark" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_МаркиПродуктов.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_МаркиПродуктов КАК Scan_МаркиПродуктов
		|ГДЕ
		|	Scan_МаркиПродуктов.IDExternalSystem <> """"
		|	И Scan_МаркиПродуктов.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветМаркиПродуктов(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfProductMark" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.МаркиПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			ПроверитьРазборМаркиПродукта(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetProductMark" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.МаркаПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		ПроверитьРазборМаркиПродукта(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборМаркиПродукта(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_МаркиПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// ГРУППЫ ПРОДУКТОВ
Функция ПроверитьГруппыПродуктов(ИмяМетода)
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросГруппыПродуктов(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветГруппыПродуктов(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросГруппыПродуктов(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfProductGroup" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetProductGroup" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ГруппыПродуктов.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_ГруппыПродуктов КАК Scan_ГруппыПродуктов
		|ГДЕ
		|	Scan_ГруппыПродуктов.IDExternalSystem <> """"
		|	И Scan_ГруппыПродуктов.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветГруппыПродуктов(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfProductGroup" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ГруппыПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			ПроверитьРазборГруппыПродукта(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetProductGroup" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ГруппаПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		ПроверитьРазборГруппыПродукта(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборГруппыПродукта(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ГруппыПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// ВИДЫ ПРОДУКТОВ
Функция ПроверитьВидыПродуктов(ИмяМетода)
		
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросВидыПродуктов(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветВидыПродуктов(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросВидыПродуктов(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfProductType" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetProductType" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ВидыПродуктов.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_ВидыПродуктов КАК Scan_ВидыПродуктов
		|ГДЕ
		|	Scan_ВидыПродуктов.IDExternalSystem <> """"
		|	И Scan_ВидыПродуктов.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветВидыПродуктов(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfProductType" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ВидыПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			ПроверитьРазборВидыПродукта(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetProductType" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ВидПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		ПроверитьРазборВидыПродукта(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборВидыПродукта(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ВидыПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		Если ТекРеквизит.ИмяРекв = "ГруппаПродукта" Тогда
			// Проверка разбора осуществляется отдельным методом, заполним любым значением
			ТекВыборка = Справочники.Scan_ГруппыПродуктов.Выбрать();
			Если ТекВыборка.Следующий() Тогда
				ЗначениеРеквизита = ТекВыборка.Ссылка;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// ТИПЫ ПРОДУКТОВ И  ЛОГИСТИЧЕСКИЕ ТИПЫ
    
Функция ПроверитьТипыПродуктов(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросТипыПродуктов(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветТипыПродуктов(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросТипыПродуктов(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfProductSubType" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetProductSubType" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ТипыПродуктов.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_ТипыПродуктов КАК Scan_ТипыПродуктов
		|ГДЕ
		|	Scan_ТипыПродуктов.IDExternalSystem <> """"
		|	И Scan_ТипыПродуктов.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветТипыПродуктов(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfProductSubType" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ТипыПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		ЭтоГруппа = Ложь;	
		ЭтоЭлемент = Ложь;
		ГруппаПроверена = Ложь;
		ЭлементПроверен = Ложь;
		//ЭлементПроверен = Ложь;
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			ПроверитьРазборТипыПродукта(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации, ЭтоГруппа, ЭтоЭлемент);
			Если ЭтоГруппа Тогда
				ГруппаПроверена = Истина;
				ЭтоГруппа = Ложь;	//сбросим
			Иначе
				ЭлементПроверен = Истина;
				ЭтоЭлемент = Ложь;	//сбросим
			КонецЕсли;
				
			Если ГруппаПроверена И ЭлементПроверен Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetProductSubType" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ТипПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		ПроверитьРазборТипыПродукта(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборТипыПродукта(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации, ЭтоГруппа = Ложь, ЭтоЭлемент = Ложь)
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйЭлемент = Справочники.Scan_ТипыПродуктов.СоздатьЭлемент(); 	
	//НоваяГруппа = Справочники.Scan_ТипыПродуктов.СоздатьГруппу();		// rarus tenkam 24.10.2019 mantis 15052 +
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		Если ТекРеквизит.ИмяРекв = "ВидПродукта" Тогда
			// Есть только у элементов
			
			Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
				ЭтоГруппа = Истина;
				Возврат;	// rarus tenkam 24.10.2019 mantis 15052 +
				Продолжить;
			КонецЕсли;
			
			// Проверка разбора осуществляется отдельным методом, заполним любым значением
			ТекВыборка = Справочники.Scan_ВидыПродуктов.Выбрать();
			Если ТекВыборка.Следующий() Тогда
				ЗначениеРеквизита = ТекВыборка.Ссылка;
				НовыйЭлемент[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита; 
			КонецЕсли;
			Продолжить;
		ИначеЕсли ТекРеквизит.ИмяРекв = "Родитель" Тогда
			// rarus tenkam 24.10.2019 mantis 15052 +++
			//// Есть только у элементов
			//Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] = Неопределено Тогда
			//	ЭтоГруппа = Истина;
			//	Продолжить;
			//КонецЕсли;
			//
			//// родителя установим пустого
			//ЗначениеРеквизита = Справочники.Scan_ТипыПродуктов.ПустаяСсылка();
			//НовыйЭлемент[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
			// rarus tenkam 24.10.2019 mantis 15052 ---
			Продолжить;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйЭлемент[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
			//НоваяГруппа[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;		// rarus tenkam 24.10.2019 mantis 15052 +
		КонецЕсли;
	КонецЦикла;
	НовыйЭлемент.ДатаОбновления = ТекущаяДата();
	//НоваяГруппа.ДатаОбновления = ТекущаяДата();	// rarus tenkam 24.10.2019 mantis 15052 +

	//ЭтоЭлемент = Не ЭтоГруппа;		// rarus tenkam 24.10.2019 mantis 15052 +	
	Попытка 
		//Если ЭтоЭлемент Тогда 	// rarus tenkam 24.10.2019 mantis 15052 +
			Если НЕ НовыйЭлемент.ПроверитьЗаполнение() Тогда
				ТекМассив = ПолучитьСообщенияПользователю(Истина);
				ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
			КонецЕсли;   
		// rarus tenkam 24.10.2019 mantis 15052 +++
		//Иначе
		//	Если НЕ НоваяГруппа.ПроверитьЗаполнение() Тогда
		//		ТекМассив = ПолучитьСообщенияПользователю(Истина);
		//		ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		//	КонецЕсли;	
		//КонецЕсли;
		// rarus tenkam 24.10.2019 mantis 15052 ---
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// МОДЕЛИ
Функция ПроверитьМоделиПродуктов(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросМоделиПродуктов(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветМоделиПродуктов(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросМоделиПродуктов(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfProductModel" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		// Обязательный отбор по марке
		ПредопредМарка = Справочники.Scan_МаркиПродуктов.Scania;
		Если ЗначениеЗаполнено(ПредопредМарка.IDExternalSystem) Тогда
			СтруктураПараметров.МаркаGUID = ПредопредМарка.IDExternalSystem;
		КонецЕсли;
	
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetProductModel" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_МоделиПродуктов.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_МоделиПродуктов КАК Scan_МоделиПродуктов
		|ГДЕ
		|	Scan_МоделиПродуктов.IDExternalSystem <> """"
		|	И Scan_МоделиПродуктов.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветМоделиПродуктов(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfProductModel" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.МоделиПродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			ПроверитьРазборМоделиПродукта(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetProductModel" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.МодельПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		ПроверитьРазборМоделиПродукта(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборМоделиПродукта(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_МоделиПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
			
			// Проверка разбора осуществляется отдельным методом, заполним любым значением
			ТекВыборка = Справочники.Scan_МаркиПродуктов.Выбрать();
			Если ТекВыборка.Следующий() Тогда
				ЗначениеРеквизита = ТекВыборка.Ссылка;
			Иначе
				Продолжить;
			КонецЕсли;
			
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// СПЕЦИФИКАЦИИ     
Функция ПроверитьСпецификацииПродуктов(ИмяМетода)
	
	ОшибокНет = Истина;
	
	// rarus tenkam 09.09.2019 mantis 14841 +++
	//rarus bonmak 24.09.2019 14177 ++
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросСпецификацииПродуктов(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветСпецификацииПродуктов(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	//rarus bonmak 24.09.2019 14177 ++
	// rarus tenkam 09.09.2019 mantis 14841 ---	
		
	Возврат ОшибокНет;	
КонецФункции

// rarus tenkam 09.09.2019 mantis 14841 +++
//rarus bonmak 24.09.2019 14177 ++
Процедура ПроверитьЗапросСпецификацииПродуктов(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfSpecifications" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetSpecification" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ВерсииБазовыхСпецификаций.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_ВерсииБазовыхСпецификаций КАК Scan_ВерсииБазовыхСпецификаций
		|ГДЕ
		|	Scan_ВерсииБазовыхСпецификаций.IDExternalSystem <> """"
		|	И Scan_ВерсииБазовыхСпецификаций.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветСпецификацииПродуктов(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfSpecifications" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.СпецификацияПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.GUID) Тогда
				Отказ = Истина;
				СообщениеОбОшибке = "У элементов списка нет идентификатора";
			КонецЕсли;	
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetSpecification" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СпецификацияПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		ПроверитьРазборСпецификацииПродукта(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборСпецификацииПродукта(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ВерсииБазовыхСпецификаций.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		Если ТекРеквизит.ИмяРекв = "Изделие" Тогда
			// Проверка разбора осуществляется отдельным методом, заполним любым значением
			//ТекВыборка = Справочники.Scan_Изделия.Выбрать();
			//Если ТекВыборка.Следующий() Тогда
			//	ЗначениеРеквизита = ТекВыборка.Ссылка;
			//КонецЕсли;
			Продолжить;
		ИначеЕсли ТекРеквизит.ИмяРекв = "ВидСпецификации" Тогда
			
			// Проверка разбора осуществляется отдельным методом, заполним любым значением
			ТекВыборка = Справочники.Scan_ВидыСпецификацийПродуктов.Выбрать();
			Если ТекВыборка.Следующий() Тогда
				ЗначениеРеквизита = ТекВыборка.Ссылка;
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры
//rarus bonmak 24.09.2019 14177 --
// rarus tenkam 09.09.2019 mantis 14841 ---	
		
//// ИЗДЕЛИЯ 
Функция ПроверитьИзделия(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросИзделия(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветИзделия(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросИзделия(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfChassis" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetChassis" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_Изделия.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.IDExternalSystem <> """"
		|	И Scan_Изделия.ПометкаУдаления = ЛОЖЬ
		|	И Scan_Изделия.ТипПродукта <> ЗНАЧЕНИЕ(Справочник.Scan_ТипыПродуктов.ПустаяСсылка)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветИзделия(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfChassis" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ТранспортныеСредства", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.GUID) Тогда
				Отказ = Истина;
				СообщениеОбОшибке = "У элементов списка нет идентификатора";
			КонецЕсли;	
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetChassis" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ТранспортноеСредствоИнфо", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		// rarus tenkam 17.04.2020 mantis 15797 +++
		//ПроверитьРазборИзделия(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		ПроверитьРазборИзделияНовая(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		// rarus tenkam 17.04.2020 mantis 15797 ---
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//Процедура ПроверитьРазборИзделия(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_Изделия.СоздатьЭлемент();
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		
//		Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
//			ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.Scania;
//		Иначе
//			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если XDTOОбъект.ДополнительныеРеквизиты <> Неопределено Тогда
//		ТипТахографа = Неопределено;
//		РасшифровкаТахографа = "";
//		Для Каждого ТекСвойство Из XDTOОбъект.ДополнительныеРеквизиты.СписокЗначенийСвойств Цикл
//			Если ТекСвойство.Свойство.Наименование = "Вид тахографа" Тогда
//				ТипТахографа = ТекСвойство.Значение.ТипТахографа;
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Тахограф" Тогда
//				РасшифровкаТахографа = ТекСвойство.Значение.Строка;
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Тип кабины" Тогда
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ТипыКабинИзделий.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					НовыйОбъект.ТипКабины = ТекВыборка.Ссылка;
//				КонецЕсли;

//			ИначеЕсли ТекСвойство.Свойство.Наименование = "VIN-код" Тогда
//				НовыйОбъект.VIN = ТекСвойство.Значение.Строка;
//				НовыйОбъект.VIN2 = ТекСвойство.Значение.Строка;
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "EngineNo" Тогда
//				НовыйОбъект.НомерДвигателяТС = ТекСвойство.Значение.Строка;
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Место производства" Тогда
//				//НовыйОбъект.МестоПроизводства = РазобратьМестоПроизводства(ТекСвойство.Значение.Строка);
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Модель" Тогда
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_МоделиПродуктов.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					НовыйОбъект.МодельПродукта = ТекВыборка.Ссылка;
//				КонецЕсли;

//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Спецификация" Тогда
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_СпецификацииПродуктов.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					НовыйОбъект.СпецификацияПродукта = ТекВыборка.Ссылка;
//				КонецЕсли;
//					
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Тип продукта"  Тогда
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				// rarus tenkam 07.09.2019 mantis 15052 +++
//				//ТекВыборка = Справочники.Scan_ТипыПродуктов.Выбрать();
//				//Если ТекВыборка.Следующий() Тогда
//				//	НовыйОбъект.ТипПродукта = ТекВыборка.Ссылка;
//				//КонецЕсли;
//			    
//				Запрос = Новый Запрос;
//				Запрос.Текст = 
//				"ВЫБРАТЬ ПЕРВЫЕ 1
//				|	Scan_Изделия.ТипПродукта КАК ТипПродукта
//				|ИЗ
//				|	Справочник.Scan_Изделия КАК Scan_Изделия
//				|ГДЕ
//				|	Scan_Изделия.IDExternalSystemProduct <> """"";
//				
//				РезультатЗапроса = Запрос.Выполнить();
//				
//				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//				
//				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//					НовыйОбъект.ТипПродукта = ВыборкаДетальныеЗаписи.ТипПродукта;
//				КонецЕсли;                    		
//				// rarus tenkam 07.09.2019 mantis 15052 ---

//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Логистический тип продукта" Тогда
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ТипыПродуктовЛогистика.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					НовыйОбъект.ТипПродуктаЛогистический = ТекВыборка.Ссылка;
//				КонецЕсли;
//				
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Маркетинговый тип продукта" Тогда
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_МаркетинговыеТипыПродуктов.Выбрать(); //rarus bonmak 04.09.2019 14442 было Справочники.Scan_ТипыПродуктов.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					НовыйОбъект.ТипыМаркетинговые = ТекВыборка.Ссылка; //rarus bonmak 04.09.2019 14442 было ТипПродуктаМаркетинговый
//				КонецЕсли;
//			
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Себестоимость логистическая" Тогда
//				НовыйОбъект.СебестоимостьЛогистическая = ТекСвойство.Значение.Число; 
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Сумма продажи дилеру" Тогда
//				НовыйОбъект.СтоимостьПродажи = ТекСвойство.Значение.Число; 
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Контрольные приборы. Серийный №, текущий" ИЛИ 
//				ТекСвойство.Свойство.GUID = "082e6b2e-fd0f-11e7-8107-001dd8b71c6f" Тогда
//				НовыйОбъект.НомерЭРАГЛОНАСС = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("ICCID:", ТекСвойство.Значение.Строка,""); 
//			КонецЕсли;
//		КонецЦикла;
//		Если ТипТахографа <> Неопределено Тогда
//			// Проверка разбора осуществляется отдельным методом, заполним любым значением
//			ТекВыборка = Справочники.Scan_ВидыТахографов.Выбрать();
//			Если ТекВыборка.Следующий() Тогда
//				НовыйОбъект.ТахографСЗаводаСкания = ТекВыборка.Ссылка;
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если НЕ ЗначениеЗаполнено(НовыйОбъект.ТипПродукта) Тогда
//		// Проверка разбора осуществляется отдельным методом, заполним любым значением
//		ТекВыборка = Справочники.Scan_ТипыПродуктов.Выбрать();
//		Если ТекВыборка.Следующий() Тогда
//			НовыйОбъект.ТипПродукта = ТекВыборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//	
//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//	
//	СформированноеНаименование = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(НовыйОбъект);
//	Если СформированноеНаименование <> "" Тогда
//		НовыйОбъект.Наименование = СформированноеНаименование;
//	КонецЕсли;
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

Процедура ПроверитьРазборИзделияНовая(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)	// rarus tenkam 17.04.2020 mantis 15797 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_Изделия.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
			ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.Scania;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = Неопределено;
	//rarus bonmak 17468 23.09.2021 ++
	//ВсеОК = ПроверитьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
	ВсеОК = Scan_ВебСервисыРазборОтветов.ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД, Истина);
	//rarus bonmak 17468 23.09.2021 --
	//Rarus bonmak 18748 13.01.2022 ++
	//Если НЕ ВсеОК Тогда
	//	СообщениеОбОшибке = "Не удалось разобрать дополнительные реквизиты";
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Rarus bonmak 18748 13.01.2022 --
	// РЕКВИЗИТЫ
	
	Если СоответствиеДопРеквизитов1БД["Вид тахографа"] <> Неопределено Тогда	// Тахограф с завода Скания
		НовыйОбъект.ТахографСЗаводаСкания = СоответствиеДопРеквизитов1БД["Вид тахографа"];			
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"] <> Неопределено Тогда	// Номер ЭРА ГЛОНАСС
		НовыйОбъект.НомерЭРАГЛОНАСС = СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"]; 
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Логистический тип продукта"] <> Неопределено Тогда // Тип продукта логистический
		НовыйОбъект.ТипПродуктаЛогистический = СоответствиеДопРеквизитов1БД["Логистический тип продукта"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"] <> Неопределено Тогда	// Типы маркетинговые
		НовыйОбъект.ТипыМаркетинговые = СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Модель"] <> Неопределено Тогда	// Модель продукта
		НовыйОбъект.МодельПродукта = СоответствиеДопРеквизитов1БД["Модель"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Себестоимость логистическая"] <> Неопределено Тогда	// Себестоимость логистическая
		НовыйОбъект.СебестоимостьЛогистическая = СоответствиеДопРеквизитов1БД["Себестоимость логистическая"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда	// СОП
		СОППродукта = СоответствиеДопРеквизитов1БД["СОП"];
		НовыйОбъект.СОП = СОППродукта;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Спецификация"] <> Неопределено Тогда	// Спецификация продукта
		НовыйОбъект.СпецификацияПродукта = СоответствиеДопРеквизитов1БД["Спецификация"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"] <> Неопределено Тогда	// Стоимость продажи
		НовыйОбъект.СтоимостьПродажи = СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип ГИБДД"] <> Неопределено Тогда	// Тип ГИБДД
		НовыйОбъект.ТипГИБДД = СоответствиеДопРеквизитов1БД["Тип ГИБДД"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип кабины"] <> Неопределено Тогда	// Тип кабины
		НовыйОбъект.ТипКабины = СоответствиеДопРеквизитов1БД["Тип кабины"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["Тип кузова"] <> Неопределено Тогда	// Тип кузова
		НовыйОбъект.ТипКузова = СоответствиеДопРеквизитов1БД["Тип кузова"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип продукта"] <> Неопределено Тогда		// Тип продукта
		НовыйОбъект.ТипПродукта = СоответствиеДопРеквизитов1БД["Тип продукта"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["EngineNo"] <> Неопределено Тогда	// Номер двигателя ТС
		НовыйОбъект.НомерДвигателяТС = СоответствиеДопРеквизитов1БД["EngineNo"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["VIN-код"] <> Неопределено Тогда	// VIN, VIN2
		НовыйОбъект.VIN = СоответствиеДопРеквизитов1БД["VIN-код"];
		НовыйОбъект.VIN2 = НовыйОбъект.VIN;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.ТипПродукта) Тогда
		// Проверка разбора осуществляется отдельным методом, заполним любым значением
		ТекВыборка = Справочники.Scan_ТипыПродуктов.Выбрать();
		Если ТекВыборка.Следующий() Тогда
			НовыйОбъект.ТипПродукта = ТекВыборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	СформированноеНаименование = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(НовыйОбъект);
	Если СформированноеНаименование <> "" Тогда
		НовыйОбъект.Наименование = СформированноеНаименование;
	КонецЕсли;
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// ПРОДУКТЫ
Функция ПроверитьПродукты(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросПродукты(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветПродукты(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросПродукты(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfProduct" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		// rarus tenkam 03.06.2020 mantis 16177 ++
		//КоличествоЧасов = Scan_ПраваИНастройки.Scan_Право("КоличествоЧасовПериодаИзменений");
		//Если НЕ ЗначениеЗаполнено(КоличествоЧасов) Тогда
		//	КоличествоЧасов = 24;
		//КонецЕсли;
		КоличествоЧасов = 0.15; //rarus bonmak 07.01.2021 16625 уменьшил время с 12 часов
		СтруктураПараметров["Проверка"] = Истина;
		// rarus tenkam 03.06.2020 mantis 16177 ---
		СтруктураПараметров["ДатаНачала"] = ТекущаяДата() - 60*60*КоличествоЧасов;
		СтруктураПараметров["ДатаОкончания"] = ТекущаяДата();

		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetProduct" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		// rarus tenkam 14.08.2019 mantis 14427 +++
		//|	Scan_Продукты.IDExternalSystem КАК IDExternalSystem
		//|ИЗ
		//|	Справочник.Scan_Продукты КАК Scan_Продукты
		//|ГДЕ
		//|	Scan_Продукты.IDExternalSystem <> """"
		//|	И Scan_Продукты.ПометкаУдаления = ЛОЖЬ";
		|	Scan_Изделия.IDExternalSystemProduct КАК IDExternalSystemProduct
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.IDExternalSystemProduct <> """"
		|	И Scan_Изделия.ПометкаУдаления = ЛОЖЬ";
	
		// rarus tenkam 14.08.2019 mantis 14427 ---
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			// rarus tenkam 14.08.2019 mantis 14427 +++
			//GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystemProduct;
			// rarus tenkam 14.08.2019 mantis 14427 ---
		Иначе
			// rarus tenkam 14.08.2019 mantis 14427 +++
			//СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystemProduct для проверки метода " + ИмяМетода;
			// rarus tenkam 14.08.2019 mantis 14427 ---
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветПродукты(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfProduct" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Продукты", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.GUID) Тогда
				Отказ = Истина;
				СообщениеОбОшибке = "У элементов списка нет идентификатора";
			КонецЕсли;	
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetProduct" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.Продукт", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		// rarus tenkam 17.04.2020 mantis 15797 +++
		//ПроверитьРазборПродукты(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		ПроверитьРазборПродуктыНовая(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		// rarus tenkam 17.04.2020 mantis 15797 ---
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//Процедура ПроверитьРазборПродукты(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	// rarus tenkam 14.08.2019 mantis 14427 +++
//	//НовыйОбъект = Справочники.Scan_Продукты.СоздатьЭлемент();
//	НовыйОбъект = Справочники.Scan_Изделия.СоздатьЭлемент();
//	// rarus tenkam 14.08.2019 mantis 14427 ---
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
//			ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.Scania;
//		ИначеЕсли ТекРеквизит.ИмяРекв = "ТипПродукта" Тогда
//			
//			// Проверка разбора осуществляется отдельным методом, заполним любым значением
//			
//			// rarus tenkam 07.09.2019 mantis 15052 +++
//			//ТекВыборка = Справочники.Scan_ТипыПродуктов.Выбрать();
//			//Если ТекВыборка.Следующий() Тогда
//			//	ЗначениеРеквизита = ТекВыборка.Ссылка;
//			//КонецЕсли; 
//			
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Scan_Изделия.ТипПродукта КАК ТипПродукта
//			|ИЗ
//			|	Справочник.Scan_Изделия КАК Scan_Изделия
//			|ГДЕ
//			|	Scan_Изделия.IDExternalSystemProduct <> """"";
//			
//			РезультатЗапроса = Запрос.Выполнить();
//			
//			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//			
//			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//				ЗначениеРеквизита = ВыборкаДетальныеЗаписи.ТипПродукта;
//			КонецЕсли;                    		
//			// rarus tenkam 07.09.2019 mantis 15052 ---

//			// rarus tenkam 14.08.2019 mantis 14427 +++ИначеЕсли ТекРеквизит.ИмяРекв = "Изделие" Тогда
//			//// Проверка разбора осуществляется отдельным методом, заполним любым значением
//			//ТекВыборка = Справочники.Scan_Изделия.Выбрать();
//			//Если ТекВыборка.Следующий() Тогда
//			//	ЗначениеРеквизита = ТекВыборка.Ссылка;
//			//КонецЕсли;
//			// rarus tenkam 14.08.2019 mantis 14427 ---
//			
//		Иначе
//			// rarus tenkam 14.08.2019 mantis 14427 +++
//			//ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//			Продолжить;
//			// rarus tenkam 14.08.2019 mantis 14427 ---
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;
//	
//	// Получим "Заказ на завод"
//	// Проверка разбора осуществляется отдельным методом, заполним любым значением
//	ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка();
//	ТекВыборка = Справочники.Scan_ЗаказыНаЗавод.Выбрать();
//	Если ТекВыборка.Следующий() Тогда
//		НовыйОбъект.ЗаказНаЗавод = ТекВыборка.Ссылка;
//	КонецЕсли;
//		
//	СебестоимостьПродукта = 0;
//	СсылкаНаСОП = Справочники.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка();
//	//Получим дополнительные реквизиты
//	Если XDTOОбъект.ДополнительныеРеквизиты <> Неопределено Тогда
//		Для Каждого ТекСвойство Из XDTOОбъект.ДополнительныеРеквизиты.СписокЗначенийСвойств Цикл
//			Если ТекСвойство.Свойство.Наименование = "Модель" Тогда
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_МоделиПродуктов.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					НовыйОбъект.МодельПродукта = ТекВыборка.Ссылка;
//				КонецЕсли;

//			// rarus tenkam 14.08.2019 mantis 14427 +++
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "Дата продажи дилеру" Тогда
//			//	НовыйОбъект.ДатаПродажиИзделия = ТекСвойство.Значение.Дата;
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "Спецификация" Тогда
//			//	// Проверка разбора осуществляется отдельным методом, заполним любым значением
//			//	ТекВыборка = Справочники.Scan_СпецификацииПродуктов.Выбрать();
//			//	Если ТекВыборка.Следующий() Тогда
//			//		НовыйОбъект.СпецификацияПродукта = ТекВыборка.Ссылка;
//			//	КонецЕсли;
//			// rarus tenkam 14.08.2019 mantis 14427 ---
//				
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Тип продукта"  Тогда
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				
//				// rarus tenkam 07.09.2019 mantis 15052 +++
//				//ТекВыборка = Справочники.Scan_ТипыПродуктов.Выбрать();
//				//Если ТекВыборка.Следующий() Тогда
//				//	НовыйОбъект.ТипПродукта = ТекВыборка.Ссылка;
//				//КонецЕсли;
//				
//				Запрос = Новый Запрос;
//				Запрос.Текст = 
//				"ВЫБРАТЬ ПЕРВЫЕ 1
//				|	Scan_Изделия.ТипПродукта КАК ТипПродукта
//				|ИЗ
//				|	Справочник.Scan_Изделия КАК Scan_Изделия
//				|ГДЕ
//				|	Scan_Изделия.IDExternalSystemProduct <> """"";
//				
//				РезультатЗапроса = Запрос.Выполнить();
//				
//				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//				
//				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//					НовыйОбъект.ТипПродукта = ВыборкаДетальныеЗаписи.ТипПродукта;
//				КонецЕсли;                    		
//				// rarus tenkam 07.09.2019 mantis 15052 ---

//				
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Логистический тип продукта" Тогда
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ТипыПродуктовЛогистика.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					// rarus tenkam 14.08.2019 mantis 14427 +++
//					//НовыйОбъект.ТипЛогистический = ТекВыборка.Ссылка;
//					НовыйОбъект.ТипПродуктаЛогистический = ТекВыборка.Ссылка; 					
//					// rarus tenkam 14.08.2019 mantis 14427 ---
//				КонецЕсли;

//			ИначеЕсли ТекСвойство.Свойство.Наименование = "СОП" Тогда				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ДоговорыВзаиморасчетов.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					СсылкаНаСОП = ТекВыборка.Ссылка;
//				КонецЕсли;
//				НовыйОбъект.СОП = СсылкаНаСОП;
//			// rarus tenkam 14.08.2019 mantis 14427 +++
//				//НовыйОбъект.Заказчик = СсылкаНаСОП.Владелец;
//				
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "Клиент покупатель т/с" ИЛИ ТекСвойство.Свойство.Наименование = "RetailCustomerName" Тогда
//			//	НовыйОбъект.Клиент = ТекСвойство.Значение.Строка;
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "Менеджер т/с" Тогда
//			//	//НовыйОбъект.ПродавецЗаказчика = РазобратьПродавцаЗаказчика(ТекСвойство.Значение.Строка);
//			// rarus tenkam 14.08.2019 mantis 14427 ---
//			КонецЕсли; 						
//		КонецЦикла;
//	КонецЕсли;

//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//	// rarus tenkam 14.08.2019 mantis 14427 +++
//	НовыйОбъект.Наименование = "Тестовое изделие"; // При обмене наименование будет формироваться из данных изделия и продукта по настройке. Можем записать произвольную строку
//	//Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) И ЗначениеЗаполнено(ЗаказНаЗаводСсылка.CDD) И НЕ ЗначениеЗаполнено(НовыйОбъект.Заказчик) Тогда
//	//	НовыйОбъект.Заказчик = Справочники.Scan_Контрагенты.СканияРусь;
//	//КонецЕсли;		
//	// rarus tenkam 14.08.2019 mantis 14427 ---	
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

Процедура ПроверитьРазборПродуктыНовая(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)	// rarus tenkam 17.04.2020 mantis 15797 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_Изделия.СоздатьЭлемент();
		
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "МаркаПродукта" Тогда
			ЗначениеРеквизита = Справочники.Scan_МаркиПродуктов.Scania;
		ИначеЕсли ТекРеквизит.ИмяРекв = "ТипПродукта" Тогда     			
			// Проверка разбора осуществляется отдельным методом, заполним любым значением			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Scan_Изделия.ТипПродукта КАК ТипПродукта
			|ИЗ
			|	Справочник.Scan_Изделия КАК Scan_Изделия
			|ГДЕ
			|	Scan_Изделия.IDExternalSystemProduct <> """"";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ЗначениеРеквизита = ВыборкаДетальныеЗаписи.ТипПродукта;
			КонецЕсли;                    		
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	// Получим "Заказ на завод"
	// Проверка разбора осуществляется отдельным методом, заполним любым значением
	ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка();
	ТекВыборка = Справочники.Scan_ЗаказыНаЗавод.Выбрать();
	Если ТекВыборка.Следующий() Тогда
		НовыйОбъект.ЗаказНаЗавод = ТекВыборка.Ссылка;
	КонецЕсли;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = Неопределено;
	//rarus bonmak 17468 23.09.2021 ++
	//ВсеОК = ПроверитьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
	ВсеОК = Scan_ВебСервисыРазборОтветов.ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД, Истина);
	//rarus bonmak 17468 23.09.2021 --
	//Rarus bonmak 18748 13.01.2022 ++
	//Если НЕ ВсеОК Тогда
	//	СообщениеОбОшибке = "Не удалось разобрать дополнительные реквизиты";
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Rarus bonmak 18748 13.01.2022 --
	
	// РЕКВИЗИТЫ
	
	Если СоответствиеДопРеквизитов1БД["Вид тахографа"] <> Неопределено Тогда	// Тахограф с завода Скания
		НовыйОбъект.ТахографСЗаводаСкания = СоответствиеДопРеквизитов1БД["Вид тахографа"];			
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"] <> Неопределено Тогда	// Номер ЭРА ГЛОНАСС
		НовыйОбъект.НомерЭРАГЛОНАСС = СоответствиеДопРеквизитов1БД["Контрольные приборы. Серийный №, текущий"]; 
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Логистический тип продукта"] <> Неопределено Тогда // Тип продукта логистический
		НовыйОбъект.ТипПродуктаЛогистический = СоответствиеДопРеквизитов1БД["Логистический тип продукта"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"] <> Неопределено Тогда	// Типы маркетинговые
		НовыйОбъект.ТипыМаркетинговые = СоответствиеДопРеквизитов1БД["Маркетинговый тип продукта"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Модель"] <> Неопределено Тогда	// Модель продукта
		НовыйОбъект.МодельПродукта = СоответствиеДопРеквизитов1БД["Модель"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Себестоимость логистическая"] <> Неопределено Тогда	// Себестоимость логистическая
		НовыйОбъект.СебестоимостьЛогистическая = СоответствиеДопРеквизитов1БД["Себестоимость логистическая"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда	// СОП
		СОППродукта = СоответствиеДопРеквизитов1БД["СОП"];
		НовыйОбъект.СОП = СОППродукта;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Спецификация"] <> Неопределено Тогда	// Спецификация продукта
		НовыйОбъект.СпецификацияПродукта = СоответствиеДопРеквизитов1БД["Спецификация"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"] <> Неопределено Тогда	// Стоимость продажи
		НовыйОбъект.СтоимостьПродажи = СоответствиеДопРеквизитов1БД["Сумма продажи дилеру"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип ГИБДД"] <> Неопределено Тогда	// Тип ГИБДД
		НовыйОбъект.ТипГИБДД = СоответствиеДопРеквизитов1БД["Тип ГИБДД"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип кабины"] <> Неопределено Тогда	// Тип кабины
		НовыйОбъект.ТипКабины = СоответствиеДопРеквизитов1БД["Тип кабины"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["Тип кузова"] <> Неопределено Тогда	// Тип кузова
		НовыйОбъект.ТипКузова = СоответствиеДопРеквизитов1БД["Тип кузова"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Тип продукта"] <> Неопределено Тогда		// Тип продукта
		НовыйОбъект.ТипПродукта = СоответствиеДопРеквизитов1БД["Тип продукта"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["EngineNo"] <> Неопределено Тогда	// Номер двигателя ТС
		НовыйОбъект.НомерДвигателяТС = СоответствиеДопРеквизитов1БД["EngineNo"];			
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["VIN-код"] <> Неопределено Тогда	// VIN, VIN2
		НовыйОбъект.VIN = СоответствиеДопРеквизитов1БД["VIN-код"];
		НовыйОбъект.VIN2 = НовыйОбъект.VIN;
	КонецЕсли;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	НовыйОбъект.Наименование = "Тестовое изделие"; // При обмене наименование будет формироваться из данных изделия и продукта по настройке. Можем записать произвольную строку
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// ЗАКАЗЫ НА ЗАВОД
Функция ПроверитьЗаказыНаЗавод(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросЗаказыНаЗавод(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветЗаказыНаЗавод(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросЗаказыНаЗавод(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	ПродуктGUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfOrderToDelivery" Тогда  
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		// rarus tenkam 15.08.2019 mantis 14427 +++
		//"ВЫБРАТЬ ПЕРВЫЕ 1
		//|	Scan_Продукты.IDExternalSystem КАК IDExternalSystem
		//|ИЗ
		//|	Справочник.Scan_Продукты КАК Scan_Продукты
		//|ГДЕ
		//|	Scan_Продукты.IDExternalSystem <> """"
		//|	И Scan_Продукты.ПометкаУдаления = ЛОЖЬ
		//|	И Scan_Продукты.ЗаказНаЗавод.IDExternalSystem <> """"";
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_Изделия.IDExternalSystemProduct КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_Изделия КАК Scan_Изделия
		|ГДЕ
		|	Scan_Изделия.IDExternalSystemProduct <> """"
		|	И Scan_Изделия.ПометкаУдаления = ЛОЖЬ
		|	И Scan_Изделия.ЗаказНаЗавод.IDExternalSystem <> """"";
		// rarus tenkam 15.08.2019 mantis 14427 ---
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ПродуктGUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		СтруктураПараметров.ПродуктGUID =  ПродуктGUID;
	
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetOrderToDelivery" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ЗаказыНаЗавод.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|ГДЕ
		|	Scan_ЗаказыНаЗавод.IDExternalSystem <> """"
		|	И Scan_ЗаказыНаЗавод.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветЗаказыНаЗавод(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfOrderToDelivery" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ЗаказыНаПродукт", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.GUID) Тогда
				Отказ = Истина;
				СообщениеОбОшибке = "У элементов списка нет идентификатора";
			КонецЕсли;	
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetOrderToDelivery" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ЗаказПродукта", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		// rarus tenkam 17.04.2020 mantis 15797 +++
		//ПроверитьРазборЗаказыНаЗавод(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		ПроверитьРазборЗаказыНаЗаводНовая(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		// rarus tenkam 17.04.2020 mantis 15797 ---
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//Процедура ПроверитьРазборЗаказыНаЗавод(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_ЗаказыНаЗавод.СоздатьЭлемент();
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		
//		Если ТекРеквизит.ИмяРекв = "Продукт" Тогда
//			Продолжить;
//		Иначе
//			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если XDTOОбъект.ДополнительныеРеквизиты <> Неопределено Тогда
//		Для Каждого ТекСвойство Из XDTOОбъект.ДополнительныеРеквизиты.СписокЗначенийСвойств Цикл
//			// rarus tenkam 24.04.2019 mantis 14223 +++
//			Если ТекСвойство.Свойство.Наименование = "StatusID" Тогда
//				НовыйОбъект.ЗаводскойСтатусЗаказа = Справочники.Scan_ЗаводскиеСтатусыЗаказаНаЗавод.НайтиПоРеквизиту("СтатусCOW",ТекСвойство.Значение.Число);
//			КонецЕсли;
//			// rarus tenkam 24.04.2019 mantis 14223 ---
//			
//			//rarus BProg_Gladkov 19.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
//			//Если ТекСвойство.Свойство.Наименование = "CDDate" Тогда
//			//	НовыйОбъект.CDD = ТекСвойство.Значение.Дата;
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "CDDateDeviated" Тогда
//			//	ТекДатаCDD2 = ТекСвойство.Значение.Дата;
//			//	ДопустимаяДата = ДобавитьМесяц(ТекущаяДата(), Scan_ПраваИНастройки.Scan_Право("ДопустимыйДиапазонДатыCDD2"));
//			//	Если ТекДатаCDD2 <> Неопределено И ТекДатаCDD2 <= ДопустимаяДата Тогда 
//			//		НовыйОбъект.CDD2 = ТекДатаCDD2;
//			//	КонецЕсли;
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "FinishDate" Тогда
//			//	НовыйОбъект.ПродуктДатаГотовности = ТекСвойство.Значение.Дата;
//			//	Если ЗначениеЗаполнено(НовыйОбъект.ПродуктДатаГотовности) Тогда
//			//		НовыйОбъект.ПродуктГотов = Истина;
//			//	КонецЕсли;
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "Продукт готов к продаже" Тогда
//			//	НовыйОбъект.ПродуктГотовКПродаже = ТекСвойство.Значение.Дата; 
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "Поступил машинокомплект" Тогда
//			//	НовыйОбъект.ПоступилМашинокомплект = ТекСвойство.Значение.Дата; 
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "Автомобиль продан со Скания Русь" Тогда
//			//	НовыйОбъект.АвтомобильПроданСоСканияРусь = ТекСвойство.Значение.Дата;
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "DeliveryAdrCode_Confirmed" Тогда
//			//	// Проверка разбора осуществляется отдельным методом, заполним любым значением
//			//	ТекВыборка = Справочники.Scan_КодыАдресовДоставки.Выбрать();
//			//	Если ТекВыборка.Следующий() Тогда
//			//		ЗначениеРеквизита = ТекВыборка.Ссылка;
//			//	КонецЕсли;
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "DateOut" Тогда
//			//	//Если Не ЗначениеЗаполнено(НовыйОбъект.ПродуктДатаГотовности) Тогда
//			//	//	НовыйОбъект.ПродуктДатаГотовности = ТекСвойство.Значение.Дата;
//			//	//КонецЕсли;
//			//	//Если ЗначениеЗаполнено(НовыйОбъект.ПродуктДатаГотовности) Тогда
//			//	//	НовыйОбъект.ПродуктГотов = Истина;
//			//	//КонецЕсли;
//			//ИначеЕсли ТекСвойство.Свойство.Наименование = "ADDate" Тогда
//			//	НовыйОбъект.ADD = ТекСвойство.Значение.Дата; 
//			//КонецЕсли;
//			//rarus BProg_Gladkov 19.11.2019 0014452 -- 
//		КонецЦикла;
//	КонецЕсли;

//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

Процедура ПроверитьРазборЗаказыНаЗаводНовая(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)	// rarus tenkam 17.04.2020 mantis 15797 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ЗаказыНаЗавод.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		Если ТекРеквизит.ИмяРекв = "Продукт" Тогда
			Продолжить;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = Неопределено;
	//rarus bonmak 17468 23.09.2021 ++
	//ВсеОК = ПроверитьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
	ВсеОК = Scan_ВебСервисыРазборОтветов.ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД, Истина);
	//rarus bonmak 17468 23.09.2021 --
	//Rarus bonmak 18748 13.01.2022 ++
	//Если НЕ ВсеОК Тогда
	//	СообщениеОбОшибке = "Не удалось разобрать дополнительные реквизиты";
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Rarus bonmak 18748 13.01.2022 -- 
	
	// РЕКВИЗИТЫ
	
	Если СоответствиеДопРеквизитов1БД["DealerID_COW_Ссылка"] <> Неопределено И СоответствиеДопРеквизитов1БД["Дилер заказчик COW"] <> Неопределено Тогда	// Заказчик COW
		ДилерЗаказчик_COW = СоответствиеДопРеквизитов1БД["Дилер заказчик COW"]; // GUID дилера из 1БД 
		DealerID_COW_Ссылка = СоответствиеДопРеквизитов1БД["DealerID_COW_Ссылка"];
		
		Если DealerID_COW_Ссылка.IDExternalSystem <> ДилерЗаказчик_COW Тогда
			ТекстОшибки = Нстр("ru = 'IDExternalSystem у дилера не совпадает со значением из 1ДБ';" +
			"en = 'Dealer IDExternalSystem does not match 1dB value'");
			Scan_ВебСервисы.scЗафиксироватьОшибку(ТекстОшибки, ИмяСобытияЖурналаРегистрации);
		Иначе			
			НовыйОбъект.ЗаказчикCOW = DealerID_COW_Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"] <> Неопределено Тогда	// Код адреса доставки
		НовыйОбъект.КодАдресаДоставки = СоответствиеДопРеквизитов1БД["DeliveryAdrCode_Confirmed"];
	КонецЕсли;	
	Если СоответствиеДопРеквизитов1БД["PRU"] <> Неопределено Тогда		// Место производства
		НовыйОбъект.МестоПроизводства = СоответствиеДопРеквизитов1БД["PRU"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["StatusID"] <> Неопределено Тогда		// Заводской статус
		НовыйОбъект.ЗаводскойСтатусЗаказа = СоответствиеДопРеквизитов1БД["StatusID"];
	КонецЕсли;					
	Если СоответствиеДопРеквизитов1БД["Менеджер т/с"] <> Неопределено Тогда		// Продавец заказчика	
		НовыйОбъект.ПродавецЗаказчика = СоответствиеДопРеквизитов1БД["Менеджер т/с"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["СОП"] <> Неопределено Тогда		//Заказчик (из СОП)
		СсылкаНаСОП = СоответствиеДопРеквизитов1БД["СОП"];
		
		Если ЗначениеЗаполнено(СсылкаНаСОП) Тогда
			НовыйОбъект.Заказчик = СсылкаНаСОП.Владелец;
		КонецЕсли;
	КонецЕсли;	
	
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

////КОМПАНИИ
//rarus bonmak 15.04.2020 14456 ++
Функция ПроверитьКомпании(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросКомпании(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветКомпании(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросКомпании(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfCompany" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		ВыборкаСправочника = Справочники.Scan_ВидыВзаимодействий.Выбрать();
		ВыборкаСправочника.Следующий();
		//rarus agar 08.09.2020 16540 ++
		//ДопПараметры = Новый Структура;
		//ДопПараметры.Вставить("ВидВзаимодействия", ВыборкаСправочника.IDExternalSystem);
		СтруктураПараметров.ВидВзаимодействия = ВыборкаСправочника.IDExternalSystem;
		//rarus agar 08.09.2020 16540 --
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetCompany" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос; 
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_Компании.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_Компании КАК Scan_Компании
		|ГДЕ
		|	Scan_Компании.IDExternalSystem <> """"
		|	И Scan_Компании.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветКомпании(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfCompany" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Компании", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.GUID) Тогда
				Отказ = Истина;
				СообщениеОбОшибке = "У элементов списка нет идентификатора";
			КонецЕсли;	
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetCompany" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДанныеКомпании", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		ПроверитьРазборКомпании(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборКомпании(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)		// rarus tenkam 17.04.2020 mantis 15797 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_Компании.СоздатьЭлемент(); 
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = Неопределено;
	//rarus bonmak 17468 23.09.2021 ++
	//ВсеОК = ПроверитьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
	ВсеОК = Scan_ВебСервисыРазборОтветов.ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД, Истина);
	//rarus bonmak 17468 23.09.2021 --
	//Rarus bonmak 18748 13.01.2022 ++
	//Если НЕ ВсеОК Тогда
	//	СообщениеОбОшибке = "Не удалось разобрать дополнительные реквизиты";
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Rarus bonmak 18748 13.01.2022 -- 
	
	Если СоответствиеДопРеквизитов1БД["Код дилера SOWA"] <> Неопределено Тогда
		НовыйОбъект.КодДилераSOWA = СоответствиеДопРеквизитов1БД["Код дилера SOWA"];
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Статус компании"] <> Неопределено Тогда
		НовыйОбъект.СтатусыКомпаний = СоответствиеДопРеквизитов1БД["Статус компании"];
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Тип дилера"] <> Неопределено Тогда
		НовыйОбъект.ТипыДилеров = СоответствиеДопРеквизитов1БД["Тип дилера"];
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Форма компании"] <> Неопределено Тогда
		НовыйОбъект.ФормыКомпаний = СоответствиеДопРеквизитов1БД["Форма компании"];
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Группа компаний"] <> Неопределено Тогда
		НовыйОбъект.ГруппыКомпаний = СоответствиеДопРеквизитов1БД["Группа компаний"];
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Наименование английское"] <> Неопределено Тогда
		НовыйОбъект.НаименованиеАнглийское = СоответствиеДопРеквизитов1БД["Наименование английское"];
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["DealerID_COW"] <> Неопределено Тогда
		НовыйОбъект.DealerID_COW = СоответствиеДопРеквизитов1БД["DealerID_COW"];
	КонецЕсли;
	
	Если СоответствиеДопРеквизитов1БД["Код дилера"] <> Неопределено Тогда
		НовыйОбъект.КодДилера = СоответствиеДопРеквизитов1БД["Код дилера"];
	КонецЕсли;
	
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры
//rarus bonmak 15.04.2020 14456 --

//// КОНТРАГЕНТЫ
Функция ПроверитьКонтрагенты(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросКонтрагенты(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветКонтрагенты(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросКонтрагенты(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	ИНН = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	// Получим любой ИНН и GUID
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_Контрагенты.IDExternalSystem КАК IDExternalSystem,
	|	Scan_Контрагенты.ИНН КАК ИНН,
	|	Scan_Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Scan_Контрагенты КАК Scan_Контрагенты
	|ГДЕ
	|	Scan_Контрагенты.IDExternalSystem <> """"
	|	И Scan_Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Scan_Контрагенты.ИНН <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		ИНН = ВыборкаДетальныеЗаписи.ИНН;
	Иначе
		СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem и ИНН для проверки метода " + ИмяМетода;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИмяМетода = "GetListOfContragents" Тогда
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);		
		СтруктураПараметров.Вставить("ИНН", ИНН);
	
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetContragents" Тогда		                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветКонтрагенты(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfContragents" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Контрагенты", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.GUID) Тогда
				Отказ = Истина;
				СообщениеОбОшибке = "У элементов списка нет идентификатора";
			КонецЕсли;	
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetContragents" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДанныеКонтрагента", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		// rarus tenkam 17.04.2020 mantis 15797 +++
		//ПроверитьРазборКонтрагенты(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		ПроверитьРазборКонтрагентыНовая(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		// rarus tenkam 17.04.2020 mantis 15797 ---
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//Процедура ПроверитьРазборКонтрагенты(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_Контрагенты.СоздатьЭлемент();
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		
//		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;
//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//	
//	Если XDTOОбъект.ДополнительныеРеквизиты <> Неопределено Тогда
//		Для Каждого ТекСвойство Из XDTOОбъект.ДополнительныеРеквизиты.СписокЗначенийСвойств Цикл
//			Если ТекСвойство.Свойство.Наименование = "Юридический адрес" Тогда
//				НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
//				НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
//				НоваяКИ.Представление = ТекСвойство.Значение.Строка;
//				НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
//				НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
//				НоваяКИ.Страна = "РОССИЯ";
//				НоваяКИ.Тип = НоваяКИ.Вид.Тип;
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Почтовый адрес" Тогда
//				НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
//				НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
//				НоваяКИ.Представление = ТекСвойство.Значение.Строка;
//				НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
//				НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
//				НоваяКИ.Страна = "РОССИЯ";
//				НоваяКИ.Тип = НоваяКИ.Вид.Тип;	
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Наименование" Тогда
//				НовыйОбъект.Наименование = ТекСвойство.Значение.Строка;	
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Наименование полное" Тогда
//				НовыйОбъект.НаименованиеПолное = ТекСвойство.Значение.Строка	
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Контактный телефон" Тогда
//				НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
//				НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
//				НоваяКИ.Представление = ТекСвойство.Значение.Строка;
//				НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
//				НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
//				НоваяКИ.НомерТелефона = ТекСвойство.Значение.Строка;
//				НоваяКИ.НомерТелефонаБезКодов = ТекСвойство.Значение.Строка;
//				НоваяКИ.Тип = НоваяКИ.Вид.Тип;	
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Адрес электронной почты" Тогда
//				НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
//				НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
//				НоваяКИ.Представление = ТекСвойство.Значение.Строка;
//				НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
//				НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
//				НоваяКИ.АдресЭП = ТекСвойство.Значение.Строка;
//				Поз = СтрНайти(НоваяКИ.Представление, "@");
//				Если Поз <> 0 Тогда
//					НоваяКИ.ДоменноеИмяСервера = Сред(НоваяКИ.Представление, Поз+1);
//				КонецЕсли;
//				НоваяКИ.Тип = НоваяКИ.Вид.Тип;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

Процедура ПроверитьРазборКонтрагентыНовая(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)	// rarus tenkam 17.04.2020 mantis 15797 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_Контрагенты.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = Неопределено;
	//rarus bonmak 17468 23.09.2021 ++
	//ВсеОК = ПроверитьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
	ВсеОК = Scan_ВебСервисыРазборОтветов.ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД, Истина);
	//rarus bonmak 17468 23.09.2021 --
	//Rarus bonmak 18748 13.01.2022 ++
	//Если НЕ ВсеОК Тогда
	//	СообщениеОбОшибке = "Не удалось разобрать дополнительные реквизиты";
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Rarus bonmak 18748 13.01.2022 -- 

	Если СоответствиеДопРеквизитов1БД["Юридический адрес"] <> Неопределено Тогда		// Юридический адрес 
		НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Юридический адрес"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.Страна = "РОССИЯ";
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Почтовый адрес"] <> Неопределено Тогда		// Почтовый адрес 
		НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Почтовый адрес"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.Страна = "РОССИЯ";
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Наименование"] <> Неопределено Тогда		// Наименование 
		НовыйОбъект.Наименование = СоответствиеДопРеквизитов1БД["Наименование"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Наименование полное"] <> Неопределено Тогда		// Наименование полное 
		НовыйОбъект.НаименованиеПолное = СоответствиеДопРеквизитов1БД["Наименование полное"];
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Контактный телефон"] <> Неопределено Тогда		// Контактный телефон 
		НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.НомерТелефона = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.НомерТелефонаБезКодов = СоответствиеДопРеквизитов1БД["Контактный телефон"];
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
	Если СоответствиеДопРеквизитов1БД["Адрес электронной почты"] <> Неопределено Тогда		// Адрес электронной почты 
		НоваяКИ = НовыйОбъект.КонтактнаяИнформация.Добавить();	
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		НоваяКИ.Представление = СоответствиеДопРеквизитов1БД["Адрес электронной почты"];
		НоваяКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
		НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяКИ.Значение);
		НоваяКИ.АдресЭП = СоответствиеДопРеквизитов1БД["Адрес электронной почты"];
		Поз = СтрНайти(НоваяКИ.Представление, "@");
		Если Поз <> 0 Тогда
			НоваяКИ.ДоменноеИмяСервера = Сред(НоваяКИ.Представление, Поз+1);
		КонецЕсли;
		НоваяКИ.Тип = НоваяКИ.Вид.Тип;
	КонецЕсли;
			
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// СОП
Функция ПроверитьСОП(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросСОП(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветСОП(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросСОП(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	ДилерGUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfSOP" Тогда             		
		
		// Получим любую компанию
		Запрос = Новый Запрос; //rarus bonmak 04.12.2019 14456 изменил наименование справочника
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_Компании.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_Компании КАК Scan_Компании
		|ГДЕ
		|	Scan_Компании.IDExternalSystem <> """"
		|	И Scan_Компании.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ДилерGUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет дилера с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		СтруктураПараметров.Вставить("ДилерGUID", ДилерGUID);
				
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	ИначеЕсли ИмяМетода = "GetSOP" Тогда		
		
		// Получим любой GUID
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ДоговорыВзаиморасчетов.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_ДоговорыВзаиморасчетов КАК Scan_ДоговорыВзаиморасчетов
		|ГДЕ
		|	Scan_ДоговорыВзаиморасчетов.IDExternalSystem <> """"
		|	И Scan_ДоговорыВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ДоговорыВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДоговоров.Соглашение)
		|	И Scan_ДоговорыВзаиморасчетов.СОП_СтатусОплаты <> ЗНАЧЕНИЕ(Перечисление.Scan_СтатусыОплатПоСОП.ПустаяСсылка)";	// rarus tenkam 21.09.2020 mantis 16181 +
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
		Иначе
			СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
			Отказ = Истина;
			Возврат;
		КонецЕсли;                     		
		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода ,Ложь);
		СтруктураПараметров.Вставить("GUID", GUID);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветСОП(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfSOP" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.СОППродуктов", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.GUID) Тогда
				Отказ = Истина;
				СообщениеОбОшибке = "У элементов списка нет идентификатора";
			КонецЕсли;	
			Возврат;
		КонецЦикла;
		
	ИначеЕсли ИмяМетода = "GetSOP" Тогда
		//Получим однин элемент
		ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СОП", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		// rarus tenkam 17.04.2020 mantis 15797 +++
		//ПроверитьРазборСОП(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		ПроверитьРазборСОПНовая(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
		// rarus tenkam 17.04.2020 mantis 15797 ---
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// rarus agar 13.08.2021 17205 ++

// ЭПТС
Функция ПроверитьGetEPTS(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	ПроверитьЗапросGetEPTS(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветGetEPTS(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	
	Возврат ОшибокНет;
	
КонецФункции

Процедура ПроверитьЗапросGetEPTS(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_ЭПТС.IDExternalSystem КАК IDExternalSystem
	|ИЗ
	|	Справочник.Scan_ЭПТС КАК Scan_ЭПТС
	|ГДЕ
	|	Scan_ЭПТС.IDExternalSystem <> """"
	|	И Scan_ЭПТС.ПометкаУдаления = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
	Иначе
		СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
	СтруктураПараметров.Вставить("GUID", GUID);
	
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветGetEPTS(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ДанныеЭПТС", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРазборЭПТС(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	
КонецПроцедуры

Процедура ПроверитьРазборЭПТС(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
	
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ЭПТС.СоздатьЭлемент();
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "СтатусЭПТС" Тогда
			ТекВыборка = Справочники.Scan_СтатусыЭПТС.Выбрать();
			Если ТекВыборка.Следующий() Тогда
				ЗначениеРеквизита = ТекВыборка.Ссылка;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТекРеквизит.ИмяРекв = "ТранспортноеСредство" Тогда
			НовыйОбъект.Владелец = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystem", СтруктураРеквизитов.ТранспортноеСредство.GUID);
			Продолжить;
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	// rarus agar 17.12.2021 18240 ++
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = Scan_ВебСервисыРазборОтветов.ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты);
	
	НаименованиеТСОпределяемоеЕгоНазначением = СоответствиеДопРеквизитов1БД["Наименование ТС, определяемое его назначением"];
	Если НаименованиеТСОпределяемоеЕгоНазначением <> Неопределено Тогда
		НовыйОбъект.НаименованиеТСОпределяемоеЕгоНазначением = НаименованиеТСОпределяемоеЕгоНазначением;
	КонецЕсли;
	
	МаркаПоЭПТС = СоответствиеДопРеквизитов1БД["Марка по ЭПТС"];
	Если МаркаПоЭПТС <> Неопределено Тогда
		НовыйОбъект.МаркаПоЭПТС = МаркаПоЭПТС;
	КонецЕсли;
	
	КоммерческоеНаименование = СоответствиеДопРеквизитов1БД["Коммерческое наименование"];
	Если КоммерческоеНаименование <> Неопределено Тогда
		НовыйОбъект.КоммерческоеНаименование = КоммерческоеНаименование;
	КонецЕсли;
	
	ИдентификационныйНомер = СоответствиеДопРеквизитов1БД["Идентификационный номер"];
	Если ИдентификационныйНомер <> Неопределено Тогда
		НовыйОбъект.ИдентификационныйНомер = ИдентификационныйНомер;
	КонецЕсли;
	
	НомерШассиРамы = СоответствиеДопРеквизитов1БД["Номер шасси (рамы)"];
	Если НомерШассиРамы <> Неопределено Тогда
		НовыйОбъект.НомерШассиРамы = НомерШассиРамы;
	КонецЕсли;
	// rarus agar 17.12.2021 18240 --
	
	// rarus agar 17.01.2022 18240 ++
	ИноеНаименованиеТСПоЭПТС = СоответствиеДопРеквизитов1БД["Иное наименование ТС по ЭПТС"];
	Если ИноеНаименованиеТСПоЭПТС <> Неопределено Тогда
		НовыйОбъект.ИноеНаименованиеТСПоЭПТС = ИноеНаименованиеТСПоЭПТС;
	КонецЕсли;
	// rarus agar 17.01.2022 18240 --

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если Не НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверитьGetEPTSstatement(ИмяМетода)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	ПроверитьЗапросGetEPTSstatement(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		ПроверитьОтветGetEPTSstatement(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету);
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	
	Возврат ОшибокНет;
	
КонецФункции

Процедура ПроверитьЗапросGetEPTSstatement(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_ЭПТС.IDExternalSystem КАК IDExternalSystem
	|ИЗ
	|	Справочник.Scan_ЭПТС КАК Scan_ЭПТС
	|ГДЕ
	|	Scan_ЭПТС.IDExternalSystem <> """"
	|	И Scan_ЭПТС.ПометкаУдаления = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		GUID = ВыборкаДетальныеЗаписи.IDExternalSystem;
	Иначе
		СообщениеОбОшибке = "В базе нет элементов с IDExternalSystem для проверки метода " + ИмяМетода;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Ложь);
	СтруктураПараметров.Вставить("GUID", GUID);
	
	ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветGetEPTSstatement(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	ТекОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ВыпискаЭПТС", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРазборВыпискиЭПТС(ТекОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
	
КонецПроцедуры

Процедура ПроверитьРазборВыпискиЭПТС(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
	
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Scan_ЭПТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Scan_ЭПТС КАК Scan_ЭПТС
	|ГДЕ
	|	Scan_ЭПТС.ПометкаУдаления = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВладелецФайла = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		СообщениеОбОшибке = "В базе нет ЭПТС для проверки метода " + ИмяМетода;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НовыйОбъект = Справочники.Scan_ЭПТСПрисоединенныеФайлы.СоздатьЭлемент();
	
	НовыйОбъект.Наименование     = СтруктураРеквизитов.Наименование;
	НовыйОбъект.ВладелецФайла    = ВладелецФайла;
	НовыйОбъект.Автор            = Пользователи.АвторизованныйПользователь();
	НовыйОбъект.ДатаСоздания     = ТекущаяДатаСеанса();
	НовыйОбъект.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе");
	
	Попытка
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// rarus agar 13.08.2021 17205 --

//Процедура ПроверитьРазборСОП(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_ДоговорыВзаиморасчетов.СоздатьЭлемент();
//	НовыйОбъект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение;
//	НовыйОбъект.Бессрочный = Истина;
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		Если ТекРеквизит.ИмяРекв = "Дилер" Тогда
//			// Проверка разбора осуществляется отдельным методом, заполним любым значением
//			ТекВыборка = Справочники.Scan_Компании.Выбрать();//rarus bonmak 04.12.2019 14456
//			Если ТекВыборка.Следующий() Тогда
//				//rarus bonmak 15.04.2020 14456 ++
//				//НовыйОбъект.Владелец = ТекВыборка.Контрагент;
//				ЗначениеВладельца = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьДилераПоКомпании(ТекВыборка.Ссылка);
//				НовыйОбъект.Владелец = ЗначениеВладельца;
//				//rarus bonmak 15.04.2020 14456 --
//				
//			КонецЕсли;
//			Продолжить;
//		ИначеЕсли ТекРеквизит.ИмяРекв = "Продукты" Тогда
//			//rarus bonmak 09.08.2021 16834 ++
//			//Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] <> Неопределено Тогда
//			//	Для Каждого ЭлПродукт Из СтруктураРеквизитов[ТекРеквизит.ИмяРекв].ПродуктСОП Цикл
//			//		// Проверка разбора осуществляется отдельным методом, заполним любым значением
//			//		// rarus tenkam 28.06.2019 mantis 14427 +++
//			//		//ТекВыборка = Справочники.Scan_Продукты.Выбрать();
//			//		//Если ТекВыборка.Следующий() Тогда
//			//		//	НайденныйПродукт = ТекВыборка.Ссылка;
//			//		ТекВыборка = Справочники.Scan_Изделия.Выбрать();
//			//		Если ТекВыборка.Следующий() Тогда
//			//			НайденноеИзделие = ТекВыборка.Ссылка;
//			//		// rarus tenkam 28.06.2019 mantis 14427 ---
//			//			
//			//		Иначе
//			//			Продолжить;
//			//		КонецЕсли;  
//			//		НоваяСтрокаТЧ = НовыйОбъект.СпецификацияКСОП.Добавить();
//			//		// rarus tenkam 28.06.2019 mantis 14427 +++
//			//		//НоваяСтрокаТЧ.СОП_Продукт = НайденныйПродукт;
//			//		НоваяСтрокаТЧ.СОП_Изделие = НайденноеИзделие;
//			//		// rarus tenkam 28.06.2019 mantis 14427 ---
//			//		НоваяСтрокаТЧ.СОП_МестоДоставки = ЭлПродукт.МестоДоставки;
//			//		НоваяСтрокаТЧ.СОП_ЦенаПродажиБезНДС = ЭлПродукт.Цена;
//			//		НоваяСтрокаТЧ.СОП_СрокПоставки = ЭлПродукт.СрокПоставки;
//			//		НоваяСтрокаТЧ.СОП_Количество = 1;
//			//		// rarus tenkam 28.06.2019 mantis 14427 +++
//			//		//Если ЗначениеЗаполнено(НайденныйПродукт.Изделие) Тогда
//			//		//	НоваяСтрокаТЧ.СОП_СебестоимостьБезНДС = НайденныйПродукт.Изделие.СебестоимостьЛогистическая;
//			//		//КонецЕсли;
//			//		НоваяСтрокаТЧ.СОП_СебестоимостьБезНДС = НайденноеИзделие.СебестоимостьЛогистическая;
//			//		// rarus tenkam 28.06.2019 mantis 14427 ---
//			//		НоваяСтрокаТЧ.СОП_СуммаПродажиБезНДС = ЭлПродукт.Цена * НоваяСтрокаТЧ.СОП_Количество;	
//			//	КонецЦикла;	
//			//КонецЕсли;
//			//rarus bonmak 09.08.2021 16834 --
//			Продолжить;			
//		Иначе
//			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;
//	
//	//rarus bonmak 09.08.2021 16834 НовыйОбъект.СОП_ОсновнойДоговор = Scan_ВспомогательныеФункцииСервер.ПолучитьОсновнойДоговорКонграгента(НовыйОбъект.Владелец);
//	НовыйОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//	НовыйОбъект.СОП_ДатаОбновления = ТекущаяДата();
//	ТекНаименование = "";
//	Если ЗначениеЗаполнено(НовыйОбъект.НомерДоговора) Тогда
//		ТекНаименование = ТекНаименование + "№ " + СокрЛП(НовыйОбъект.НомерДоговора);
//	КонецЕсли;
//	Если ЗначениеЗаполнено(НовыйОбъект.ДатаНачала) Тогда
//		ТекНаименование = ТекНаименование + " от " + Формат(НовыйОбъект.ДатаНачала,"ДЛФ=Д");
//	КонецЕсли;
//	НовыйОбъект.Наименование = ТекНаименование;
//	
//	Если XDTOОбъект.ДополнительныеРеквизиты <> Неопределено Тогда
//		Для Каждого ТекСвойство Из XDTOОбъект.ДополнительныеРеквизиты.СписокЗначенийСвойств Цикл
//			Если ТекСвойство.Свойство.Наименование = "Статус предоплаты" Тогда
//				Если ТекСвойство.Значение.Строка = "ВнесенаПолностью" Тогда
//					НовыйОбъект.СОП_СтатусОплаты = Перечисления.Scan_СтатусыОплатПоСОП.Оплачено;
//				ИначеЕсли ТекСвойство.Значение.Строка = "ВнесенаЧастично" Тогда
//					НовыйОбъект.СОП_СтатусОплаты = Перечисления.Scan_СтатусыОплатПоСОП.ОплаченоЧастично;	
//				ИначеЕсли ТекСвойство.Значение.Строка = "НеВнесена" Тогда
//					НовыйОбъект.СОП_СтатусОплаты = Перечисления.Scan_СтатусыОплатПоСОП.НеОплачено;
//				Иначе 
//					СообщениеОбОшибке = "";
//				КонецЕсли;
//			ИначеЕсли ТекСвойство.Свойство.Наименование = "Основной договор" Тогда
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

Процедура ПроверитьРазборСОПНовая(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)	// rarus tenkam 17.04.2020 mantis 15797 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// rarus tenkam 23.09.2020 mantis 16181 +++
	
	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьНовыйАлгоритмСозданияДоговоров") Тогда
		// Проверим получение только Статуса оплаты
		СоответствиеДопРеквизитов1БД = Неопределено;
		//rarus bonmak 17468 23.09.2021 ++
		//ВсеОК = ПроверитьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
		ВсеОК = Scan_ВебСервисыРазборОтветов.ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД, Истина);
		//rarus bonmak 17468 23.09.2021 --
		//Rarus bonmak 18748 13.01.2022 ++
		//Если НЕ ВсеОК Тогда
		//	СообщениеОбОшибке = "Не удалось разобрать дополнительные реквизиты";
		//	Отказ = Истина;
		//	Возврат;
		//КонецЕсли;
		//Rarus bonmak 18748 13.01.2022 -- 
		
		Если СоответствиеДопРеквизитов1БД["Статус предоплаты"] <> Неопределено Тогда	// СОП_СтатусОплаты
			СОП_СтатусОплаты = СоответствиеДопРеквизитов1БД["Статус предоплаты"];
			Если НЕ ЗначениеЗаполнено(СОП_СтатусОплаты) Тогда
				СообщениеОбОшибке = "Не удалось найти соответствие статусу предоплаты";
				Отказ = Истина;
				Возврат;	
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = "Не удалось проверить получение Статуса предоплаты";
			Отказ = Истина;
			Возврат;	
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	// rarus tenkam 23.09.2020 mantis 16181 ---
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ДоговорыВзаиморасчетов.СоздатьЭлемент();
	НовыйОбъект.ВидДоговора = Перечисления.Scan_ВидыДоговоров.Соглашение;
	НовыйОбъект.Бессрочный = Истина;
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "Дилер" Тогда
			// Проверка разбора осуществляется отдельным методом, заполним любым значением
			ТекВыборка = Справочники.Scan_Компании.Выбрать();
			Если ТекВыборка.Следующий() Тогда
				//rarus bonmak 15.04.2020 14456 ++
				//НовыйОбъект.Владелец = ТекВыборка.Контрагент;
				ЗначениеВладельца = РегистрыСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.ПолучитьДилераПоКомпании(ТекВыборка.Ссылка);
				НовыйОбъект.Владелец = ЗначениеВладельца;
				//rarus bonmak 15.04.2020 14456 --
			КонецЕсли;
			Продолжить;
		ИначеЕсли ТекРеквизит.ИмяРекв = "Продукты" Тогда
			//rarus bonmak 09.08.2021 16834 ++
			//Если СтруктураРеквизитов[ТекРеквизит.ИмяРекв] <> Неопределено Тогда
			//	Для Каждого ЭлПродукт Из СтруктураРеквизитов[ТекРеквизит.ИмяРекв].ПродуктСОП Цикл
			//		// Проверка разбора осуществляется отдельным методом, заполним любым значением
			//		ТекВыборка = Справочники.Scan_Изделия.Выбрать();
			//		Если ТекВыборка.Следующий() Тогда
			//			НайденноеИзделие = ТекВыборка.Ссылка;
			//			Иначе
			//			Продолжить;
			//		КонецЕсли;  
			//		НоваяСтрокаТЧ = НовыйОбъект.СпецификацияКСОП.Добавить();
			//		НоваяСтрокаТЧ.СОП_Изделие = НайденноеИзделие;
			//		НоваяСтрокаТЧ.СОП_МестоДоставки = ЭлПродукт.МестоДоставки;
			//		НоваяСтрокаТЧ.СОП_ЦенаПродажиБезНДС = ЭлПродукт.Цена;
			//		НоваяСтрокаТЧ.СОП_СрокПоставки = ЭлПродукт.СрокПоставки;
			//		НоваяСтрокаТЧ.СОП_Количество = 1;
			//		НоваяСтрокаТЧ.СОП_СебестоимостьБезНДС = НайденноеИзделие.СебестоимостьЛогистическая;
			//		НоваяСтрокаТЧ.СОП_СуммаПродажиБезНДС = ЭлПродукт.Цена * НоваяСтрокаТЧ.СОП_Количество;	
			//	КонецЦикла;	
			//КонецЕсли;
			//rarus bonmak 09.08.2021 16834 --
			Продолжить;			
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	//rarus bonmak 09.08.2021 16834 НовыйОбъект.СОП_ОсновнойДоговор = Scan_ВспомогательныеФункцииСервер.ПолучитьОсновнойДоговорКонграгента(НовыйОбъект.Владелец);
	НовыйОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
	НовыйОбъект.ДатаОбновления = ТекущаяДата();
	НовыйОбъект.СОП_ДатаОбновления = ТекущаяДата();
	ТекНаименование = "";
	Если ЗначениеЗаполнено(НовыйОбъект.НомерДоговора) Тогда
		ТекНаименование = ТекНаименование + "№ " + СокрЛП(НовыйОбъект.НомерДоговора);
	КонецЕсли;
	Если ЗначениеЗаполнено(НовыйОбъект.ДатаНачала) Тогда
		ТекНаименование = ТекНаименование + " от " + Формат(НовыйОбъект.ДатаНачала,"ДЛФ=Д");
	КонецЕсли;
	НовыйОбъект.Наименование = ТекНаименование;
	
	// ОБРАБОТАЕМ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ 1БД
	
	// Заполним соответствие с доп. реквизитами
	СоответствиеДопРеквизитов1БД = Неопределено;
	//rarus bonmak 17468 23.09.2021 ++
	//ВсеОК = ПроверитьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД);
	ВсеОК = Scan_ВебСервисыРазборОтветов.ОбработатьДополнительныеРеквизиты(XDTOОбъект.ДополнительныеРеквизиты, СоответствиеДопРеквизитов1БД, Истина);
	//rarus bonmak 17468 23.09.2021 --
	//Rarus bonmak 18748 13.01.2022 ++
	//Если НЕ ВсеОК Тогда
	//	СообщениеОбОшибке = "Не удалось разобрать дополнительные реквизиты";
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Rarus bonmak 18748 13.01.2022 -- 

	Если СоответствиеДопРеквизитов1БД["Статус предоплаты"] <> Неопределено Тогда	// СОП_СтатусОплаты
		НовыйОбъект.СОП_СтатусОплаты = СоответствиеДопРеквизитов1БД["Статус предоплаты"];
	КонецЕсли;
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры
//rarus tenkam 25.03.2019 mantis 13629 ---

// rarus tenkam 25.04.2019 mantis 14223 +++

//// ЗАВОДСКИЕ СТАТУСЫ НА ЗАВОД
Функция ПроверитьЗаводскиеСтатусы(ИмяМетода, ВидСтатуса = Неопределено)
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросЗаводскиеСтатусы(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветЗаводскиеСтатусы(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросЗаводскиеСтатусы(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfStatuses" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		СтруктураПараметров.ВидСтатуса = "СтатусыЗаказовАМ";
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветЗаводскиеСтатусы(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfStatuses" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Статусы", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			ПроверитьРазборЗаводскиеСтатусы(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборЗаводскиеСтатусы(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ЗаводскиеСтатусыЗаказаНаЗавод.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			// rarus tenkam 01.10.2019 mantis 15052 +++
			// Код статуса только у локальных статусов
			Если ТекРеквизит.ИмяРекв = "КодСтатуса" Тогда
				Продолжить;
			КонецЕсли;
			// rarus tenkam 01.10.2019 mantis 15052 ---
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

// rarus tenkam 25.04.2019 mantis 14223 ---

//// ОПЦИИ СПЕЦИФИКАЦИЙ ПРОДУКТА ТС
Функция ПроверитьОпции(ИмяМетода, ВидСтатуса = Неопределено) //rarus bonmak 08.10.2019 14177 ++
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросОпции(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветОпции(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции //rarus bonmak 08.10.2019 14177 --

Процедура ПроверитьЗапросОпции(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus bonmak 08.10.2019 14177 ++
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfOptions" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры //rarus bonmak 08.10.2019 14177 --

Процедура ПроверитьОтветОпции(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus bonmak 08.10.2019 14177 ++
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfOptions" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Опции", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			ПроверитьРазборОпции(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //rarus bonmak 08.10.2019 14177 --

Процедура ПроверитьРазборОпции(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus bonmak 08.10.2019 14177 ++
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ОпцииПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры //rarus bonmak 08.10.2019 14177 --

//// ВИДЫ СПЕЦИФИКАЦИЙ ПРОДУКТА ТС
Функция ПроверитьВидыСпецификаций(ИмяМетода, ВидСтатуса = Неопределено) //rarus bonmak 08.10.2019 14177 ++
	
	ОшибокНет = Истина;
	
	ОтказЗапрос = Ложь;
	КомментарийПоЗапросу = "";
	ОтказОтвет = Ложь;
	КомментарийПоОтвету = "";
	ТекстОтвета = "";
	
	// Проверим запрос	
	ПроверитьЗапросВидыСпецификаций(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	// Проверить ответ
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветВидыСпецификаций(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции //rarus bonmak 08.10.2019 14177 --

Процедура ПроверитьЗапросВидыСпецификаций(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus bonmak 08.10.2019 14177 ++
	
	GUID = "";
	СообщениеОбОшибке = "";
	Отказ = Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfSpecificationType" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры //rarus bonmak 08.10.2019 14177 --

Процедура ПроверитьОтветВидыСпецификаций(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus bonmak 08.10.2019 14177 ++
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfSpecificationType" Тогда
		//Получим все элементы из списка
		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ВидыСпецификаций", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			// Если не удалось разобрать xml, то сразу возвращаем ошибку
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
			ПроверитьРазборВидыСпецификаций(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //rarus bonmak 08.10.2019 14177 --

Процедура ПроверитьРазборВидыСпецификаций(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus bonmak 08.10.2019 14177 ++
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ВидыСпецификацийПродуктов.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры //rarus bonmak 08.10.2019 14177 --

//// ФОРМЫ КОМПАНИЙ
Функция ПроверитьФормыКомпаний(ИмяМетода, ВидСтатуса = Неопределено) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	КомментарийПоОтвету 	= "";
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросФормыКомпаний(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветФормыКомпаний(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросФормыКомпаний(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfCompanyType" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ПроверитьОтветФормыКомпаний(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfCompanyType" Тогда
		//Получим все элементы из списка
		СписокОбъектовXDTO = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ФормыКомпаний", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			Возврат; // Если не удалось разобрать xml, то сразу возвращаем ошибку
		КонецЕсли;
		
		Для Каждого XDTOОбъект Из СписокОбъектовXDTO Цикл
			ПроверитьРазборФормыКомпаний(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборФормыКомпаний(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ФормыКомпаний.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1ДБ не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// ГРУППЫ КОМПАНИЙ
Функция ПроверитьГруппыКомпаний(ИмяМетода, ВидСтатуса = Неопределено) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	КомментарийПоОтвету 	= "";
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросГруппыКомпаний(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветГруппыКомпаний(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции 

Процедура ПроверитьЗапросГруппыКомпаний(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfCompanyGroup" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ПроверитьОтветГруппыКомпаний(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfCompanyGroup" Тогда
		//Получим все элементы из списка
		СписокОбъектовXDTO = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ГруппыКомпаний", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			Возврат; // Если не удалось разобрать xml, то сразу возвращаем ошибку
		КонецЕсли;
		
		Для Каждого XDTOОбъект Из СписокОбъектовXDTO Цикл
			ПроверитьРазборГруппыКомпаний(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборГруппыКомпаний(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ГруппыКомпаний.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1ДБ не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// ТИПЫ ДИЛЕРОВ
Функция ПроверитьТипыДилеров(ИмяМетода, ВидСтатуса = Неопределено) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	КомментарийПоОтвету 	= "";
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросТипыДилеров(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветТипыДилеров(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции 

Процедура ПроверитьЗапросТипыДилеров(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfDealerType" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОтветТипыДилеров(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfDealerType" Тогда
		//Получим все элементы из списка
		СписокОбъектовXDTO = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ТипыДилеров", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			Возврат; // Если не удалось разобрать xml, то сразу возвращаем ошибку
		КонецЕсли;
		
		Для Каждого XDTOОбъект Из СписокОбъектовXDTO Цикл
			ПроверитьРазборФормыКомпаний(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//Процедура ПроверитьРазборТипыДилеров(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_ТипыДилеров.СоздатьЭлемент();
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
//		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;

//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1ДБ не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

//// РЕГИОНЫ
Функция ПроверитьРегионы(ИмяМетода, ВидСтатуса = Неопределено) //rarus bonmak 07.01.2021 16625 ++
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	КомментарийПоОтвету 	= "";
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросРегионы(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветРегионы(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции //rarus bonmak 07.01.2021 16625 -- 

Процедура ПроверитьЗапросРегионы(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus bonmak 07.01.2021 16625 ++
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfRegions" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры //rarus bonmak 07.01.2021 16625 --

Процедура ПроверитьОтветРегионы(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus bonmak 07.01.2021 16625 ++
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfRegions" Тогда
		//Получим все элементы из списка
		СписокОбъектовXDTO = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Регион", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			Возврат; // Если не удалось разобрать xml, то сразу возвращаем ошибку
		КонецЕсли;
		
		Для Каждого XDTOОбъект Из СписокОбъектовXDTO Цикл
			ПроверитьРазборРегионы(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //rarus bonmak 07.01.2021 16625 --

Процедура ПроверитьРазборРегионы(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus bonmak 07.01.2021 16625 ++
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_Регионы.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
		Если ТекРеквизит.ИмяРекв = "ФедеральныйОкруг" Тогда
			Если ТекРеквизит.ИмяРекв = Неопределено Тогда
				ЗначениеРеквизита = Неопределено;
			Иначе
				GUIDФО = СтруктураРеквизитов[ТекРеквизит.ИмяРекв].GUID;
				Если ЗначениеЗаполнено(GUIDФО) Тогда
					ТекВыборка = Справочники.Scan_ФедеральныеОкруга.Выбрать();
					Если ТекВыборка.Следующий() Тогда
						ЗначениеРеквизита = ТекВыборка.Ссылка;
					КонецЕсли;	
				Иначе
					ЗначениеРеквизита = Неопределено;
				КонецЕсли;	
			КонецЕсли;	
		Иначе
			ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1ДБ не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры //rarus bonmak 07.01.2021 16625 --

//// ВИДЫ ВЗАИМОДЕЙСТВИЙ
Функция ПроверитьВидыВзаимодействий(ИмяМетода, ВидСтатуса = Неопределено) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	КомментарийПоОтвету 	= "";
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросВидыВзаимодействий(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветВидыВзаимодействий(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросВидыВзаимодействий(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfCooperationType" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ПроверитьОтветВидыВзаимодействий(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfCooperationType" Тогда
		//Получим все элементы из списка
		СписокОбъектовXDTO = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ВидыВзаимодействия", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			Возврат; // Если не удалось разобрать xml, то сразу возвращаем ошибку
		КонецЕсли;
		
		Для Каждого XDTOОбъект Из СписокОбъектовXDTO Цикл
			ПроверитьРазборВидыВзаимодействий(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборВидыВзаимодействий(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ВидыВзаимодействий.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1ДБ не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

//// ВИДЫ ПРЕДСТАВЛЕНИЙ СПЕЦИФИКАЦИЙ
Функция ПроверитьВидыПредставленийСпецификаций(ИмяМетода, ВидСтатуса = Неопределено) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	КомментарийПоОтвету 	= "";
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросВидыПредставленийСпецификаций(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветВидыПредставленийСпецификаций(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросВидыПредставленийСпецификаций(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfSpecificationViewType" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ПроверитьОтветВидыПредставленийСпецификаций(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfSpecificationViewType" Тогда
		//Получим все элементы из списка
		СписокОбъектовXDTO = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ВидыПредставленияСпецификаций", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			Возврат; // Если не удалось разобрать xml, то сразу возвращаем ошибку
		КонецЕсли;
		
		Для Каждого XDTOОбъект Из СписокОбъектовXDTO Цикл
			ПроверитьРазборВидыПредставленийСпецификаций(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборВидыПредставленийСпецификаций(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ВидыПредставленийСпецификаций.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
		НовыйОбъект[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1ДБ не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

//// ПРЕДСТАВЛЕНИЯ СПЕЦИФИКАЦИЙ
Функция ПроверитьПредставленияСпецификаций(ИмяМетода, ВидСтатуса = Неопределено) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	КомментарийПоОтвету 	= "";
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросПредставленияСпецификаций(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветПредставленияСпецификаций(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросПредставленияСпецификаций(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetListOfSpecificationView" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ПроверитьОтветПредставленияСпецификаций(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetListOfSpecificationView" Тогда
		//Получим все элементы из списка
		СписокОбъектовXDTO = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ПредставленияСпецификаций", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			Возврат; // Если не удалось разобрать xml, то сразу возвращаем ошибку
		КонецЕсли;
		
		Для Каждого XDTOОбъект Из СписокОбъектовXDTO Цикл
			ПроверитьРазборПредставленияСпецификаций(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборПредставленияСпецификаций(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ПредставленияСпецификаций.СоздатьЭлемент();
	
	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
		НовыйОбъект[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1ДБ не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;		
КонецПроцедуры

////ИЕРАРХИЯ ОПЦИЙ ПРЕДСТАВЛЕНИЙ СПЕЦИФИКАЦИИ
Функция ПроверитьИерархиюОпцийПредставленияСпецификаций(ИмяМетода, ВидСтатуса = Неопределено) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	КомментарийПоОтвету 	= "";
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросИерархияОпцийПредставленийСпецификации(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
	
	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
		// Проверим ответ
		ПроверитьОтветИерархияОпцийПредставленийСпецификации(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
	Иначе
		ОтказОтвет = Истина;
		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
	КонецЕсли;
		
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции

Процедура ПроверитьЗапросИерархияОпцийПредставленийСпецификации(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetSpecificationView" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ПроверитьОтветИерархияОпцийПредставленийСпецификации(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		
	Если ИмяМетода = "GetSpecificationView" Тогда
		//Получим все элементы из списка
		СписокОбъектовXDTO = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.ПредставлениеСпецификации.ГруппыОпций", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
		Если Отказ Тогда 
			Возврат; // Если не удалось разобрать xml, то сразу возвращаем ошибку
		КонецЕсли;
		
		Для Каждого XDTOОбъект Из СписокОбъектовXDTO Цикл
			ПроверитьРазборИерархияОпцийПредставленийСпецификации(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
			Возврат;
		КонецЦикла;
		
	Иначе
		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазборИерархияОпцийПредставленийСпецификации(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации) //rarus BProg_Dekin 18.02.2020 mantis 0014456 +-
	Отказ = Ложь;
	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверим разбор реквизитов
	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
	
	НовыйОбъект = Справочники.Scan_ИерархияОпцийПредставленийСпецификации.СоздатьЭлемент();

	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл			
		НовыйОбъект[ТекРеквизит.ИмяРекв] = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
	КонецЦикла;

	НовыйОбъект.ДатаОбновления = ТекущаяДата();
		
	Попытка 
		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
			ТекМассив = ПолучитьСообщенияПользователю(Истина);
			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
		КонецЕсли;                  		
	Исключение
		СообщениеОбОшибке = "Из 1ДБ не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

//МЕХАНИЗМ ЗАДАЧ

Функция ПроверитьGetUpdatesList(ИмяМетода, ВидСтатуса = Неопределено) //rarus bonmak 09.01.2020 15279 ++
	
	ОшибокНет = Истина;
	
	ОтказЗапрос 			= Ложь;
	КомментарийПоЗапросу 	= "";
	ОтказОтвет 				= Ложь;
	ТекстОтвета 			= "";
	
	// Проверим запрос	
	ПроверитьЗапросGetUpdatesList(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
			
	// Запишем результат в регистр	
	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, "Ответ не проверяется");
	
	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
		ОшибокНет = Ложь;
	КонецЕсли;
	Возврат ОшибокНет;
КонецФункции //rarus bonmak 09.01.2020 15279 --

Процедура ПроверитьЗапросGetUpdatesList(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "") //rarus bonmak 09.01.2020 15279 ++
	
	GUID 				= "";
	СообщениеОбОшибке 	= "";
	Отказ 				= Ложь;
	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	
	Если ИмяМетода = "GetUpdatesList" Тогда             		
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		
		ТипИзменяемогоОбъекта1БД = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Автомобиль;
		//Заполним структуру для отбора объекта	
		ИндексЗначенияПеречисления = Перечисления.Scan_ТипыИзмененныхОбъектов1БД.Индекс(ТипИзменяемогоОбъекта1БД);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.Scan_ТипыИзмененныхОбъектов1БД.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("UpdateSubject",ИмяЗначенияПеречисления);
		
		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = ТекстОтвета;
	КонецЕсли; 
	
КонецПроцедуры //rarus bonmak 09.01.2020 15279 --

// УНИФИКАЦИЯ ОБРАБОТКИ ДОП. РЕКВИЗИТОВ 
#Область Удалить
//Функция ПроверитьДополнительныеРеквизиты(СписокДопРеквизитов, СоответствиеДопРеквизитов = Неопределено) Экспорт		// rarus tenkam 16.04.2020 mantis 15797 +-
//	
//	Если СоответствиеДопРеквизитов = Неопределено Тогда
//		СоответствиеДопРеквизитов = Новый Соответствие;	
//	КонецЕсли;
//	
//	Попытка
//		// Для определения тахографа используем два доп. реквизита
//		ТипТахографа = Неопределено;
//		РасшифровкаТахографа = "";			
//				
//		Для Каждого ТекСвойство Из СписокДопРеквизитов.СписокЗначенийСвойств Цикл
//			
//			// Если у доп. реквизита не установлен флаг использования, то не обрабатывать
//			// Если доп. реквизита нет в справочнике, то он создается   		
//			Если НЕ Scan_ВебСервисыРазборОтветов.ДопРеквизитИспользуется(ТекСвойство.Свойство.GUID) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			НаименованиеДопРеквизита = ТекСвойство.Свойство.Наименование;
//			ЗначениеДопРеквизита = Неопределено;
//			
//			// Получим значение доп. реквизита
//			Если НаименованиеДопРеквизита = "ADDate" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "Assembly level" Тогда
//				// Получим ссылку на перечисление "Scan_КомплектностьПоставкиЗначения" по синониму
//				ЗначениеДопРеквизита = Scan_ОбщегоНазначенияТиповые.ВернутьЗначениеПеречисленияПоСинониму("Scan_КомплектностьПоставкиЗначения", СокрЛП(ТекСвойство.Значение.Строка));		
//			ИначеЕсли НаименованиеДопРеквизита = "CDDate" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "CDDateDeviated" Тогда
//				// CDD2 устанавливается только при условии, что она меньше допустимой (см. настройку 61008 "Допустимый диапазон даты CDD2")
//				ТекДатаCDD2 = ТекСвойство.Значение.Дата;
//				ДопустимаяДата = ДобавитьМесяц(ТекущаяДата(), Scan_ПраваИНастройки.Scan_Право("ДопустимыйДиапазонДатыCDD2"));
//				Если ТекДатаCDD2 <> Неопределено И ТекДатаCDD2 <= ДопустимаяДата Тогда 
//					ЗначениеДопРеквизита = ТекДатаCDD2;
//				КонецЕсли;				
//			ИначеЕсли НаименованиеДопРеквизита = "DateOut" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "DCD" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "DDDate" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "DDDate_Confirmed" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "DealerID" Тогда
//				
//			ИначеЕсли НаименованиеДопРеквизита = "DealerID_COW" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;				
//				// Поиск компании по реквизиту DealerID_COW для ЗаказчикCOW
//				DealerID_COW_Ссылка = Справочники.Scan_Компании.НайтиПоРеквизиту("DealerID_COW", ТекСвойство.Значение.Строка);
//				Если НЕ ЗначениеЗаполнено(DealerID_COW_Ссылка) Тогда
//					ТекстОшибки = Нстр("ru = 'НЕ найден дилер в справочнике «Компании» по реквизиту «DealerID_COW» со значением «%1»';" +
//					"en = 'The dealer was not found in the directory of the «Company»  at the requisite «DealerID_COW» with the value «%1»'");
//					ТекстОшибки = СтрШаблон(ТекстОшибки, ТекСвойство.Значение.Строка);
//					//Scan_ВебСервисы.scЗафиксироватьОшибку(ТекстОшибки, ИмяСобытияЖурналаРегистрации);
//				Иначе
//					СоответствиеДопРеквизитов.Вставить("DealerID_COW_Ссылка", DealerID_COW_Ссылка);		
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "DeliveryAdrCode_Confirmed" Тогда
//				// Поиск/создание кода адреса доставки в справочнике "Scan_КодыАдресовДоставки" по наименованию
//				ЗначениеДопРеквизита = Scan_ВебСервисыРазборОтветов.РазобратьКодАдресаДоставки(ТекСвойство.Значение.Строка);				
//			ИначеЕсли НаименованиеДопРеквизита = "DeliveryDate" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "EngineNo" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "FactoryInvoiceDate" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "FFU_No_Confirmed" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "FinishDate" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "OrderType" Тогда
//				// Получение значения перечисления "Scan_ТипыЗаказовНаЗавод" по символу
//				ЗначениеДопРеквизита = Справочники.Scan_ЗаказыНаЗавод.ПолучитьТипЗаказаНаЗаводПоСимволу(ТекСвойство.Значение.Строка);		
//			ИначеЕсли НаименованиеДопРеквизита = "PartPeriod" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Число;
//			ИначеЕсли НаименованиеДопРеквизита = "PDDate" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "PRU" Тогда
//				// Поиск места производства по буквенному коду
//				ЗначениеДопРеквизита = Справочники.Scan_МестаХранения.НайтиПоРеквизиту("БуквенныйКод",ТекСвойство.Значение.Строка);						
//			ИначеЕсли НаименованиеДопРеквизита = "RetailCustomerName" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;			
//				// Будем учитывать "Market Change", "MarketChange", "market Change" и т.п.
//				ТекЗначениеКлиент = СтрЗаменить(НРег(ЗначениеДопРеквизита)," ", ""); 
//				СоответствиеДопРеквизитов.Вставить("MarketChange", ?(ТекЗначениеКлиент = "marketchange", Истина, Ложь));			
//			ИначеЕсли НаименованиеДопРеквизита = "S_Ord_No_Confirmed" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "SDDate" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "StatusID" Тогда
//				// Поиск заводского статуса заказа на завод по числовому реквизиту "СтатусCOW"
//				ЗначениеДопРеквизита = Справочники.Scan_ЗаводскиеСтатусыЗаказаНаЗавод.НайтиПоРеквизиту("СтатусCOW",ТекСвойство.Значение.Число);			
//			ИначеЕсли НаименованиеДопРеквизита = "VIN-код" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "Адрес электронной почты" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "Вид тахографа" Тогда
//				// Получим тип тахографа для создания/обновления тахографа с завода Скании
//				ТипТахографа = ТекСвойство.Значение.ТипТахографа;						
//			ИначеЕсли НаименованиеДопРеквизита = "Дата передачи клиенту" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "Дата продажи дилеру" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "Дилер заказчик COW" Тогда
//				// Получим GUID для проверки
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дилер.GUID
//			ИначеЕсли НаименованиеДопРеквизита = "Заводская гарантия, действительна до" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Дата;
//			ИначеЕсли НаименованиеДопРеквизита = "Код дилера SOWA" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "Контактный телефон" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "Контрагент" Тогда
//				// Поиск/создание контрагента 			
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_Контрагенты.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Контрольные приборы. Серийный №, текущий" Тогда
//				ЗначениеДопРеквизита = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("ICCID:", ТекСвойство.Значение.Строка,"");
//			ИначеЕсли НаименованиеДопРеквизита = "Логистический тип продукта" Тогда
//				// Поиск/создание/обновление типа
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ТипыПродуктовЛогистика.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Маркетинговый тип продукта" Тогда
//				// Поиск/создание/обновление типа
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_МаркетинговыеТипыПродуктов.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Менеджер т/с" Тогда
//				// Поиск/создание cотрудника по наименоавнию
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_Сотрудники.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Модель" Тогда
//				// Поиск/создание/обновление модели продукта
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_МоделиПродуктов.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Наименование" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "Наименование полное" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "Основной договор" Тогда
//			ИначеЕсли НаименованиеДопРеквизита = "Почтовый адрес" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;
//			ИначеЕсли НаименованиеДопРеквизита = "Себестоимость логистическая" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Число;
//			ИначеЕсли НаименованиеДопРеквизита = "СОП" Тогда
//				// Поиск/создание/обновление СОП
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ДоговорыВзаиморасчетов.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Статус" Тогда
//				// Если из 1БД возвращается статус с наименованием "Закрыт", то значение = Истина, иначе Ложь
//				ЗначениеДопРеквизита = (ТекСвойство.Значение.Статус.Наименование = "Закрыт");				
//			ИначеЕсли НаименованиеДопРеквизита = "Статус предоплаты" Тогда
//				// Получение ссылки на перечисление Scan_СтатусыОплатПоСОП
//				ЗначениеДопРеквизита = Scan_ВебСервисыРазборОтветов.ПолучитьСтатусОплатыПоСОП(ТекСвойство.Значение.Строка);
//			ИначеЕсли НаименованиеДопРеквизита = "Сумма продажи дилеру" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Число;
//			ИначеЕсли НаименованиеДопРеквизита = "Тахограф" Тогда
//				// Расшифровка нужна для создания/обновления тахографа
//				РасшифровкаТахографа = ТекСвойство.Значение.Строка;			
//			ИначеЕсли НаименованиеДопРеквизита = "Тип ГИБДД" Тогда			
//				// Поиск/создание/обновление типа
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ТипыГИБДД.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Тип кабины" Тогда
//				// Поиск/создание/обновление типа кабины
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ТипыКабинИзделий.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Тип кузова" Тогда			
//				// Поиск/создание/обновление типа
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				ТекВыборка = Справочники.Scan_ТипыКузова.Выбрать();
//				Если ТекВыборка.Следующий() Тогда
//					ЗначениеДопРеквизита = ТекВыборка.Ссылка;
//				КонецЕсли;
//			ИначеЕсли НаименованиеДопРеквизита = "Тип продукта" Тогда
//				// Поиск/создание/обновление типа
//				
//				// Проверка разбора осуществляется отдельным методом, заполним любым значением
//				Запрос = Новый Запрос;
//				Запрос.Текст = 
//				"ВЫБРАТЬ ПЕРВЫЕ 1
//				|	Scan_Изделия.ТипПродукта КАК ТипПродукта
//				|ИЗ
//				|	Справочник.Scan_Изделия КАК Scan_Изделия
//				|ГДЕ
//				|	Scan_Изделия.IDExternalSystemProduct <> """"";
//				
//				РезультатЗапроса = Запрос.Выполнить();
//				
//				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//				
//				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//					ЗначениеДопРеквизита = ВыборкаДетальныеЗаписи.ТипПродукта;
//				КонецЕсли;                  

//			ИначеЕсли НаименованиеДопРеквизита = "Юридический адрес" Тогда
//				ЗначениеДопРеквизита = ТекСвойство.Значение.Строка;			
//			Иначе
//				// Нет обработки такого реквизита
//			КонецЕсли;

//			// Установим значение доп. реквизита по наименованию-ключу
//			// Если элемент с таким наименование существует, то его значение заменяется, иначе добавляется новый
//			СоответствиеДопРеквизитов.Вставить(НаименованиеДопРеквизита, ЗначениеДопРеквизита);
//		КонецЦикла;
//		
//		// Обработаем тахограф
//		Если ТипТахографа <> Неопределено Тогда
//			// Проверка разбора осуществляется отдельным методом, заполним любым значением
//			ТекВыборка = Справочники.Scan_ВидыТахографов.Выбрать();
//			Если ТекВыборка.Следующий() Тогда
//				ТахографСЗаводаСкания = ТекВыборка.Ссылка;
//				СоответствиеДопРеквизитов.Вставить("Вид тахографа", ТахографСЗаводаСкания);
//			КонецЕсли;
//		КонецЕсли;
//	Исключение	
//		Возврат Ложь;
//	КонецПопытки;
//	
//	Возврат Истина;
//КонецФункции
#КонецОбласти
//rarus ozhnik 15888 16.06.2020 + 

//// СТАТУСЫ КП
//Функция ПроверитьСтатусыКП(ИмяМетода, ВидСтатуса = Неопределено)
//	
//	ОшибокНет = Истина;
//	
//	ОтказЗапрос = Ложь;
//	КомментарийПоЗапросу = "";
//	ОтказОтвет = Ложь;
//	КомментарийПоОтвету = "";
//	ТекстОтвета = "";
//	
//	// Проверим запрос	
//	ПроверитьЗапросСтатусыКП(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
//	
//	// Проверить ответ
//	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
//		// Проверим ответ
//		ПроверитьОтветСтатусыКП(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
//	Иначе
//		ОтказОтвет = Истина;
//		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
//	КонецЕсли;
//		
//	// Запишем результат в регистр	
//	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
//	
//	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
//		ОшибокНет = Ложь;
//	КонецЕсли;
//	Возврат ОшибокНет;
//КонецФункции

//Процедура ПроверитьЗапросСтатусыКП(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
//	
//	GUID = "";
//	СообщениеОбОшибке = "";
//	Отказ = Ложь;
//	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//	
//	Если ИмяМетода = "GetListOfStatuses" Тогда             		
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
//		СтруктураПараметров.ВидСтатуса = "СтатусыQuotation";
//		
//		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
//		
//	КонецЕсли;
//	
//	Если Отказ Тогда
//		СообщениеОбОшибке = ТекстОтвета;
//	КонецЕсли; 
//	
//КонецПроцедуры

//Процедура ПроверитьОтветСтатусыКП(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
//	
//	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//		
//	Если ИмяМетода = "GetListOfStatuses" Тогда
//		//Получим все элементы из списка
//		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Статусы", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
//		Если Отказ Тогда 
//			// Если не удалось разобрать xml, то сразу возвращаем ошибку
//			Возврат;
//		КонецЕсли;
//		
//		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
//			ПроверитьРазборСтатусыКП(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
//			Возврат;
//		КонецЦикла;
//		
//	Иначе
//		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ПроверитьРазборСтатусыКП(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_СтатусыКПSPORT.СоздатьЭлемент();
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		
//		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;

//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

//rarus ozhnik 15888 16.06.2020 -


//rarus ozhnik 15888 17.06.2020 + 

//// ТИПЫ ПРОДУКТА КП SPORT
//Функция ПроверитьТипыПродуктовКПSPORT(ИмяМетода, ВидСтатуса = Неопределено)
//	
//	ОшибокНет = Истина;
//	
//	ОтказЗапрос = Ложь;
//	КомментарийПоЗапросу = "";
//	ОтказОтвет = Ложь;
//	КомментарийПоОтвету = "";
//	ТекстОтвета = "";
//	
//	// Проверим запрос	
//	ПроверитьЗапросТипыПродуктовКПSPORT(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
//	
//	// Проверить ответ
//	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
//		// Проверим ответ
//		ПроверитьОтветТипыПродуктовКПSPORT(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
//	Иначе
//		ОтказОтвет = Истина;
//		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
//	КонецЕсли;
//		
//	// Запишем результат в регистр	
//	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
//	
//	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
//		ОшибокНет = Ложь;
//	КонецЕсли;
//	Возврат ОшибокНет;
//КонецФункции

//Процедура ПроверитьЗапросТипыПродуктовКПSPORT(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
//	
//	GUID = "";
//	СообщениеОбОшибке = "";
//	Отказ = Ложь;
//	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//	
//	Если ИмяМетода = "GetListOfProductTypeSPORT" Тогда             		
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
//		
//		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
//		
//	КонецЕсли;
//	
//	Если Отказ Тогда
//		СообщениеОбОшибке = ТекстОтвета;
//	КонецЕсли; 
//	
//КонецПроцедуры

//Процедура ПроверитьОтветТипыПродуктовКПSPORT(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
//	
//	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//		
//	Если ИмяМетода = "GetListOfProductTypeSPORT" Тогда
//		//Получим все элементы из списка
//		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ProductTypeSPORT", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
//		Если Отказ Тогда 
//			// Если не удалось разобрать xml, то сразу возвращаем ошибку
//			Возврат;
//		КонецЕсли;
//		
//		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
//			ПроверитьРазборТипыПродуктовКПSPORT(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
//			Возврат;
//		КонецЦикла;
//		
//	Иначе
//		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ПроверитьРазборТипыПродуктовКПSPORT(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_ТипыПродуктовКПSPORT.СоздатьЭлемент();
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		
//		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;

//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

//rarus ozhnik 15888 17.06.2020 -


//rarus ozhnik 15888 17.06.2020 + 

//// СПИСОК КП SPORT
//Функция ПроверитьСписокКПSPORT(ИмяМетода, ВидСтатуса = Неопределено)
//	
//	ОшибокНет = Истина;
//	
//	ОтказЗапрос = Ложь;
//	КомментарийПоЗапросу = "";
//	ОтказОтвет = Ложь;
//	КомментарийПоОтвету = "";
//	ТекстОтвета = "";
//	
//	// Проверим запрос	
//	ПроверитьЗапросСписокКПSPORT(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
//	
//	// Проверить ответ
//	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
//		// Проверим ответ
//		ПроверитьОтветСписокКПSPORT(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
//	Иначе
//		ОтказОтвет = Истина;
//		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
//	КонецЕсли;
//		
//	// Запишем результат в регистр	
//	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
//	
//	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
//		ОшибокНет = Ложь;
//	КонецЕсли;
//	Возврат ОшибокНет;
//КонецФункции

//Процедура ПроверитьЗапросСписокКПSPORT(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
//	
//	GUID = "";
//	СообщениеОбОшибке = "";
//	Отказ = Ложь;
//	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//	
//	Если ИмяМетода = "GetListOfQuotation" Тогда             		
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
//		
//		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
//		
//	КонецЕсли;
//	
//	Если Отказ Тогда
//		СообщениеОбОшибке = ТекстОтвета;
//	КонецЕсли; 
//	
//КонецПроцедуры

//Процедура ПроверитьОтветСписокКПSPORT(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
//	
//	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//		
//	Если ИмяМетода = "GetListOfQuotation" Тогда
//		//Получим все элементы из списка
//		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.Quotations", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
//		Если Отказ Тогда 
//			// Если не удалось разобрать xml, то сразу возвращаем ошибку
//			Возврат;
//		КонецЕсли;
//		
//		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
//			ПроверитьРазборСписокКПSPORT(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
//			Возврат;
//		КонецЦикла;
//		
//	Иначе
//		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ПроверитьРазборСписокКПSPORT(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_КоммерческиеПредложения.СоздатьЭлемент();
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		
//		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;

//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

//rarus ozhnik 15888 17.06.2020 -

//rarus ozhnik 15888 17.06.2020 + 

//// КП SPORT
//Функция ПроверитьКПSPORT(ИмяМетода, ВидСтатуса = Неопределено)
//	
//	ОшибокНет = Истина;
//	
//	ОтказЗапрос = Ложь;
//	КомментарийПоЗапросу = "";
//	ОтказОтвет = Ложь;
//	КомментарийПоОтвету = "";
//	ТекстОтвета = "";
//	
//	// Проверим запрос	
//	ПроверитьЗапросКПSPORT(ИмяМетода, ОтказЗапрос, КомментарийПоЗапросу, ТекстОтвета);	
//	
//	// Проверить ответ
//	Если НЕ ОтказЗапрос И ТекстОтвета <> "" Тогда
//		// Проверим ответ
//		ПроверитьОтветКПSPORT(ИмяМетода, ТекстОтвета, ОтказОтвет, КомментарийПоОтвету );		
//	Иначе
//		ОтказОтвет = Истина;
//		КомментарийПоОтвету = "Не удалось проверить ответ из-за ошибки при отправке запроса";
//	КонецЕсли;
//		
//	// Запишем результат в регистр	
//	ЗаписьЖурналаПроверкиМетодов(ИмяМетода, НЕ ОтказЗапрос, КомментарийПоЗапросу, НЕ ОтказОтвет, КомментарийПоОтвету);
//	
//	Если ОтказЗапрос ИЛИ ОтказОтвет Тогда
//		ОшибокНет = Ложь;
//	КонецЕсли;
//	Возврат ОшибокНет;
//КонецФункции

//Процедура ПроверитьЗапросКПSPORT(ИмяМетода, Отказ, СообщениеОбОшибке, ТекстОтвета = "")
//	
//	GUID = "";
//	СообщениеОбОшибке = "";
//	Отказ = Ложь;
//	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//	
//	Если ИмяМетода = "GetQuotation" Тогда             		
//		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
//		
//		ТекстОтвета = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
//		
//	КонецЕсли;
//	
//	Если Отказ Тогда
//		СообщениеОбОшибке = ТекстОтвета;
//	КонецЕсли; 
//	
//КонецПроцедуры

//Процедура ПроверитьОтветКПSPORT(ИмяМетода, ТекстОтвета, Отказ, СообщениеОбОшибке)
//	
//	ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
//		
//	Если ИмяМетода = "GetQuotation" Тогда
//		//Получим все элементы из списка
//		ТекОбъекты = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекстОтвета, "Answer.Result.СписокБазовыхОбъектов.ProductTypeSPORT", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке); 
//		Если Отказ Тогда 
//			// Если не удалось разобрать xml, то сразу возвращаем ошибку
//			Возврат;
//		КонецЕсли;
//		
//		Для Каждого ТекЭлемент Из ТекОбъекты Цикл
//			ПроверитьРазборКПSPORT(ТекЭлемент, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации);
//			Возврат;
//		КонецЦикла;
//		
//	Иначе
//		СообщениеОбОшибке = "Некорректное имя метода. Проверьте правильность вызова процедуры разбора!";
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ПроверитьРазборКПSPORT(XDTOОбъект, Отказ, СообщениеОбОшибке, ИмяМетода, ИмяСобытияЖурналаРегистрации)
//	Отказ = Ложь;
//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);
//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Проверим разбор реквизитов
//	МассивРеквизитовСправочника = Scan_ВебСервисыРазборОтветов.ПолучитьМассивРеквизитов(ИмяМетода);
//	
//	НовыйОбъект = Справочники.Scan_КоммерческиеПредложения.СоздатьЭлемент(); //rarus bonmak 09.08.2021 16834 исправил ошибку в названии справочника
//	
//	Для Каждого ТекРеквизит Из МассивРеквизитовСправочника Цикл
//		
//		ЗначениеРеквизита = СтруктураРеквизитов[ТекРеквизит.ИмяРекв];
//		
//		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
//			НовыйОбъект[ТекРеквизит.ИмяРекв] = ЗначениеРеквизита;
//		КонецЕсли;
//	КонецЦикла;

//	НовыйОбъект.ДатаОбновления = ТекущаяДата();
//		
//	Попытка 
//		Если НЕ НовыйОбъект.ПроверитьЗаполнение() Тогда
//			ТекМассив = ПолучитьСообщенияПользователю(Истина);
//			ВызватьИсключение(Scan_ВебСервисыРазборОтветов.СформироватьСообщениеИзМассива(ТекМассив));
//		КонецЕсли;                  		
//	Исключение
//		СообщениеОбОшибке = "Из 1БД не возвращаются обязательные для заполнения реквизиты " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		Отказ = Истина;
//		Возврат;
//	КонецПопытки;	
//	
//КонецПроцедуры

//rarus ozhnik 15888 17.06.2020 -