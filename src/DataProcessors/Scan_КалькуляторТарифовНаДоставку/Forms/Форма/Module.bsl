
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ГруппаДетализация.Видимость = Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь");
	Элементы.СтоимостьДоставки.Видимость = ЛОЖЬ;	//Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь");		//30.08.2017
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ЗагрузитьПараметрыКалькуляцииНаСервере();		
	Scan_СборСтатистики.Scan_ПриОткрытииОбработки(РеквизитФормыВЗначение("Объект").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +

КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	ДетализацияРасчета.Очистить();
	АктуальныеУслуги.Очистить();
	СтоимостьДоставки = 0;
	ПакетыУслуг.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	СообщениеОбОшибке = "";
	Если НЕ ЗначениеЗаполнено(ДатаДоставки) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + " Поле 'Дата доставки' не заполнено." + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СпособДоставки) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + " Поле 'Способ доставки' не заполнено." + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЛогистическийТип) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + " Поле 'Логистический тип' не заполнено." + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АдресПолучения) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + " Поле 'Адрес получения' не заполнено." + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
		//rarus FominskiyAS 08.07.2019  mantis 14191 +++
		//СообщениеОбОшибке = СообщениеОбОшибке + " Поле 'Адрес доставки' не заполнено." + Символы.ПС;
		СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru = 'Поле ''Адрес доставки'' не заполнено.'; en = 'Field ""Delivery Address"" not filled'") + Символы.ПС;
		//rarus FominskiyAS 08.07.2019  mantis 14191 ---  	
	КонецЕсли;    	

	Если НЕ ЗначениеЗаполнено(КолеснаяФормула) Тогда
		//rarus tenkam 26.01.2018 mantis 12581 +++
		//СообщениеОбОшибке = СообщениеОбОшибке + " Поле 'Колесная формула' не заполнено." + Символы.ПС;
		Если НЕ (ЗначениеЗаполнено(ЛогистическийТип) И ЭтоПрицеп(ЛогистическийТип))Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + " Поле 'Колесная формула' не заполнено." + Символы.ПС;
		КонецЕсли;
		//rarus tenkam 26.01.2018 mantis 12581 ---
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Не удалось расчитать стоимость услуг! По причине: " + Символы.ПС + СообщениеОбОшибке);
		Сообщить(НСтр("ru = 'Не удалось расчитать стоимость услуг! По причине: '; en = 'Failed to calculate the cost of services! Because of: '") + Символы.ПС + СообщениеОбОшибке);
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		Возврат;
	КонецЕсли;

	РассчитатьНаСервере();
КонецПроцедуры

//rarus tenkam 26.01.2018 mantis 12581 +++
Функция ЭтоПрицеп(ТекЛогистическийТип)
	Если СтрНайти(НРег(ТекЛогистическийТип.Наименование),"прицеп") <> 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//rarus tenkam 26.01.2018 mantis 12581 ---

&НаСервере
Процедура РассчитатьНаСервере()
	ЗаполнитьУслуги();
	ЗаполнитьПакеты();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслуги()
	СтоимостьДоставки = 0;
	ПакетУслуг = Справочники.Scan_ПакетыУслугДоставки.ПустаяСсылка();
	АктуальныеУслуги.Очистить();
	
	// Получим полную и льготные услуги
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ // Rarus tenkam 18.10.2021 mantis 17628
	|	Scan_МатрицаТарифовДляДилеровПоДоставкеИзделийСрезПоследних.УслугаПакета КАК Услуга,
	|	Scan_МатрицаТарифовДляДилеровПоДоставкеИзделийСрезПоследних.Стоимость КАК Стоимость,
	|	Scan_МатрицаТарифовДляДилеровПоДоставкеИзделийСрезПоследних.ТарифУказанВручную КАК ТарифУказанВручную
	|ИЗ
	|	РегистрСведений.Scan_МатрицаТарифовДляДилеровПоДоставкеИзделий.СрезПоследних(
	|			&ДатаДоставки,
	|			СпособДоставки = &СпособДоставки
	|				И АдресДоставки = &АдресДоставки
	|				И АдресПолучения = &АдресПолучения
	|				И КолеснаяФормула = &КолеснаяФормула
	|				И ЛогистическийТип = &ЛогистическийТип) КАК Scan_МатрицаТарифовДляДилеровПоДоставкеИзделийСрезПоследних";
	Запрос.УстановитьПараметр("АдресДоставки", АдресДоставки);
	Запрос.УстановитьПараметр("АдресПолучения", АдресПолучения);
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	Запрос.УстановитьПараметр("КолеснаяФормула", КолеснаяФормула);
	Запрос.УстановитьПараметр("ЛогистическийТип", ЛогистическийТип);
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяУслуга = АктуальныеУслуги.Добавить();
		НоваяУслуга.Услуга = ВыборкаДетальныеЗаписи.Услуга;
		// rarus tenkam 31.03.2021 mantis 17101 +++
		Если ВМатрицеПоДоставкеНетАктуальныхТарифов() Тогда
			НоваяУслуга.Стоимость = 0;
		Иначе	// rarus tenkam 31.03.2021 mantis 17101 ---
			НоваяУслуга.Стоимость = ВыборкаДетальныеЗаписи.Стоимость; 
		КонецЕсли;	// rarus tenkam 31.03.2021 mantis 17101 +
		НоваяУслуга.ТарифУказанВручную = ВыборкаДетальныеЗаписи.ТарифУказанВручную;
	КонецЦикла;

	// Получим основную и доп. услуги	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Услуга КАК Услуга,
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Стоимость КАК Стоимость,
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.ОсновнаяУслуга КАК ОсновнаяУслуга
	|ИЗ
	|	РегистрСведений.Scan_СтоимостьУслугДляРасчетаСтоимостиДоставки.СрезПоследних(
	|			&ДатаДоставки,
	|			Услуга <> ЗНАЧЕНИЕ(Справочник.Scan_НоменклатураУслуг.УслугаПлатон)
	|				И Услуга <> ЗНАЧЕНИЕ(Справочник.Scan_НоменклатураУслуг.ПолисОСАГО)
	|				И Услуга <> ЗНАЧЕНИЕ(Справочник.Scan_НоменклатураУслуг.ПолучениеТранзитныхНомеров)) КАК Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних";	//08.09	
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяУслуга = АктуальныеУслуги.Добавить();
		НоваяУслуга.Услуга = ВыборкаДетальныеЗаписи.Услуга;
		НоваяУслуга.ОсновнаяУслуга = ВыборкаДетальныеЗаписи.ОсновнаяУслуга;
		// rarus tenkam 24.12.2018 mantis 13896 +++
		//НоваяУслуга.Стоимость = ?(ВыборкаДетальныеЗаписи.ОсновнаяУслуга, ВыборкаДетальныеЗаписи.Стоимость * 1.18, ВыборкаДетальныеЗаписи.Стоимость);
	    НоваяУслуга.Стоимость = ?(ВыборкаДетальныеЗаписи.ОсновнаяУслуга, ВыборкаДетальныеЗаписи.Стоимость * (1 + Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС.Ставка / 100), ВыборкаДетальныеЗаписи.Стоимость);
		// rarus tenkam 24.12.2018 mantis 13896 ---
	КонецЦикла;
	
	// Получим Платона
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Услуга,
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Стоимость
	|ИЗ
	|	РегистрСведений.Scan_СтоимостьУслугДляРасчетаСтоимостиДоставки.СрезПоследних(
	|			&ДатаДоставки,
	|			Услуга = ЗНАЧЕНИЕ(Справочник.Scan_НоменклатураУслуг.УслугаПлатон)
	|				И СпособДоставки = &СпособДоставки
	|				И АдресПолучения = &АдресПолучения
	|				И АдресДоставки = &АдресДоставки) КАК Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних";	
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	Запрос.УстановитьПараметр("АдресПолучения", АдресПолучения);
	Запрос.УстановитьПараметр("АдресДоставки", АдресДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НоваяУслуга = АктуальныеУслуги.Добавить();
		НоваяУслуга.Услуга = ВыборкаДетальныеЗаписи.Услуга;
		НоваяУслуга.Стоимость = ВыборкаДетальныеЗаписи.Стоимость;
	КонецЕсли;
	
	// Получим ОСАГО
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Услуга,
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Стоимость
	|ИЗ
	|	РегистрСведений.Scan_СтоимостьУслугДляРасчетаСтоимостиДоставки.СрезПоследних(
	|			&ДатаДоставки,
	|			Услуга = ЗНАЧЕНИЕ(Справочник.Scan_НоменклатураУслуг.ПолисОСАГО)
	|				И СпособДоставки = &СпособДоставки) КАК Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних";	
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НоваяУслуга = АктуальныеУслуги.Добавить();
		НоваяУслуга.Услуга = ВыборкаДетальныеЗаписи.Услуга;
		НоваяУслуга.Стоимость = ВыборкаДетальныеЗаписи.Стоимость;
	КонецЕсли;    
	
	// Получим Транзитные услуги 08.09
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Услуга,
	|	Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Стоимость
	|ИЗ
	|	РегистрСведений.Scan_СтоимостьУслугДляРасчетаСтоимостиДоставки.СрезПоследних(
	|			&ДатаДоставки,
	|			Услуга = ЗНАЧЕНИЕ(Справочник.Scan_НоменклатураУслуг.ПолучениеТранзитныхНомеров)
	|				И СпособДоставки = &СпособДоставки) КАК Scan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних";	
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НоваяУслуга = АктуальныеУслуги.Добавить();
		НоваяУслуга.Услуга = ВыборкаДетальныеЗаписи.Услуга;
		НоваяУслуга.Стоимость = ВыборкаДетальныеЗаписи.Стоимость;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ВМатрицеПоДоставкеНетАктуальныхТарифов()	//rarus tenkam 26.01.2018 mantis 17101 +
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Стоимость1Км КАК Стоимость1Км,
	|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Контрагент КАК Контрагент,
	|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Сумма КАК Сумма,
	|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Период КАК Период,
	|	ВЫБОР
	|		КОГДА Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ДоговорКонтрагента.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ДоговорКонтрагента.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияДоговора,
	|	ВЫБОР
	|		КОГДА Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ДоговорКонтрагента.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ДоговорКонтрагента.ДатаОкончанияДействия
	|	КОНЕЦ КАК ДатаОкончанияДействияДоговора,
	|	ВЫБОР
	|		КОГДА Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Контрагент.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Контрагент.ДатаОкончанияДействия
	|	КОНЕЦ КАК ДатаОкончанияДействияКонтрагента
	|ПОМЕСТИТЬ ДанныеПоКонтрагентам
	|ИЗ
	|	РегистрСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СрезПоследних(
	|			&ДатаДоставки,
	|			АдресПолучения = &АдресПолучения
	|				И АдресДоставки = &АдресДоставки
	|				И ЛогистическийТип = &ЛогистическийТип
	|				И СпособДоставки = &СпособДоставки
	|				И КолеснаяФормула = &КолеснаяФормула) КАК Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоКонтрагентам.Стоимость1Км КАК Стоимость1Км,
	|	ДанныеПоКонтрагентам.Контрагент КАК Контрагент,
	|	ДанныеПоКонтрагентам.Сумма КАК Сумма,
	|	ДанныеПоКонтрагентам.Период КАК Период
	|ПОМЕСТИТЬ ДанныеПоКонтрагентамДействительные
	|ИЗ
	|	ДанныеПоКонтрагентам КАК ДанныеПоКонтрагентам
	|ГДЕ
	|	ДанныеПоКонтрагентам.ДатаОкончанияДоговора >= &ДатаДоставки
	|	И ДанныеПоКонтрагентам.ДатаОкончанияДействияДоговора >= &ДатаДоставки
	|	И ДанныеПоКонтрагентам.ДатаОкончанияДействияКонтрагента >= &ДатаДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоКонтрагентамДействительные.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ДанныеПоКонтрагентамДействительные.Период) КАК Период
	|ПОМЕСТИТЬ МаксПериодыКонтрагентов
	|ИЗ
	|	ДанныеПоКонтрагентамДействительные КАК ДанныеПоКонтрагентамДействительные
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоКонтрагентамДействительные.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоКонтрагентамДействительные.Стоимость1Км КАК Стоимость1Км,
	|	МаксПериодыКонтрагентов.Контрагент КАК Контрагент,
	|	ДанныеПоКонтрагентамДействительные.Сумма КАК Сумма
	|ИЗ
	|	МаксПериодыКонтрагентов КАК МаксПериодыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоКонтрагентамДействительные КАК ДанныеПоКонтрагентамДействительные
	|		ПО МаксПериодыКонтрагентов.Контрагент = ДанныеПоКонтрагентамДействительные.Контрагент
	|			И МаксПериодыКонтрагентов.Период = ДанныеПоКонтрагентамДействительные.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	Запрос.УстановитьПараметр("АдресДоставки", АдресДоставки);
	Запрос.УстановитьПараметр("АдресПолучения", АдресПолучения);
	Запрос.УстановитьПараметр("ЛогистическийТип", ЛогистическийТип);
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	Запрос.УстановитьПараметр("КолеснаяФормула", КолеснаяФормула);
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаСтоимостейПеревозчиков = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаСтоимостейПеревозчиков.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
	
&НаСервере
Процедура ЗаполнитьПакеты()
	ПакетыУслуг.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ПакетыУслугДоставки.Ссылка
		|ИЗ
		|	Справочник.Scan_ПакетыУслугДоставки КАК Scan_ПакетыУслугДоставки
		|ГДЕ
		|	Scan_ПакетыУслугДоставки.ПометкаУдаления = ЛОЖЬ
		|	И Scan_ПакетыУслугДоставки.Ссылка <> ЗНАЧЕНИЕ(Справочник.Scan_ПакетыУслугДоставки.НетУслуг)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйПакет = ПакетыУслуг.Добавить();
		НовыйПакет.Пакет = ВыборкаДетальныеЗаписи.Ссылка;
		НовыйПакет.Стоимость = ПолучитьСтоимостьПакета(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьДоставки()
	СтоимостьДоставки = 0;
	Для Каждого ТекСтрокаУслуги Из АктуальныеУслуги Цикл
		Если ТекСтрокаУслуги.Выбрать Тогда
			СтоимостьДоставки = СтоимостьДоставки + ТекСтрокаУслуги.Стоимость;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьДетализациюРасчета();
КонецПроцедуры

&НаКлиенте
Процедура АктуальныеУслугиВыбратьПриИзменении(Элемент)
	ПакетУслуг = ПредопределенноеЗначение("Справочник.Scan_ПакетыУслугДоставки.ПустаяСсылка");
	
	СтруктураПоиска = Новый Структура("Услуга",ПредопределенноеЗначение("Справочник.Scan_НоменклатураУслуг.ДоставкаПолная"));
	НайденныеСтроки = АктуальныеУслуги.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ДоставкаПолная = НайденныеСтроки[0];
	КонецЕсли;
	
	СтруктураПоиска.Услуга = ПредопределенноеЗначение("Справочник.Scan_НоменклатураУслуг.ДоставкаЛьготная");
	НайденныеСтроки = АктуальныеУслуги.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ДоставкаЛьготная = НайденныеСтроки[0];
	КонецЕсли;
	
	// rarus tenkam 20.12.2018 mantis 13736 +++ 	
	СтруктураПоиска.Услуга = ПредопределенноеЗначение("Справочник.Scan_НоменклатураУслуг.ДоставкаЛьготнаяПоСкидке");
	НайденныеСтроки = АктуальныеУслуги.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ДоставкаЛьготнаяПоСкидке = НайденныеСтроки[0];
	КонецЕсли;                 	
	
	//Если ДоставкаПолная <> Неопределено И ДоставкаЛьготная <> Неопределено Тогда
		////Если устанавливаем галочку на льготной услуге, то уберем с полной
		//Если Элементы.АктуальныеУслуги.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.Scan_НоменклатураУслуг.ДоставкаЛьготная") И
		
	Если ДоставкаПолная <> Неопределено И (ДоставкаЛьготная <> Неопределено ИЛИ ДоставкаЛьготнаяПоСкидке <> Неопределено)Тогда 	
		//Если устанавливаем галочку на льготной услуге, то уберем с полной
		Если (Элементы.АктуальныеУслуги.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.Scan_НоменклатураУслуг.ДоставкаЛьготная") ИЛИ
			Элементы.АктуальныеУслуги.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.Scan_НоменклатураУслуг.ДоставкаЛьготнаяПоСкидке")) И
	// rarus tenkam 20.12.2018 mantis 13736 ---
			Элементы.АктуальныеУслуги.ТекущиеДанные.Выбрать Тогда
			ДоставкаПолная.Выбрать = Ложь;
		КонецЕсли;
		//Если устанавливаем галочку на полной услуге, то уберем с льготной
		Если Элементы.АктуальныеУслуги.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.Scan_НоменклатураУслуг.ДоставкаПолная") И
			Элементы.АктуальныеУслуги.ТекущиеДанные.Выбрать Тогда
			// rarus tenkam 20.12.2018 mantis 13726 +++
			//ДоставкаЛьготная.Выбрать = Ложь;
			
			// rarus tenkam 20.12.2018 mantis 13726 ---
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСтоимостьДоставки();
КонецПроцедуры

&НаКлиенте
Процедура ПакетУслугПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПакетУслуг) Тогда
		ВыбратьУслугиПоПакету();
	КонецЕсли;
	РассчитатьСтоимостьДоставки();
КонецПроцедуры

&НаСервере
Процедура ВыбратьУслугиПоПакету()
	Если НЕ ЗначениеЗаполнено(ПакетУслуг) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрокаУслуг Из АктуальныеУслуги Цикл
		ТекСтрокаУслуг.Выбрать = Ложь;
	КонецЦикла;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Услуга");
	Для Каждого ТекУслуга Из ПакетУслуг.СоставУслугПакета Цикл
		СтруктураПоиска.Услуга = ТекУслуга.Услуга;
		НайденныеСтроки = АктуальныеУслуги.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденнаяУслуга = НайденныеСтроки[0];
			НайденнаяУслуга.Выбрать = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтоимостьПакета(ПакетУслугСсылка)
	Если НЕ ЗначениеЗаполнено(ПакетУслугСсылка) Тогда
		Возврат 0;
	КонецЕсли;
	//rarus tenkam 24.11.2017 mantis 12223 +++
	Если НЕ ЗаданТарифНаДоставку(ПакетУслугСсылка) Тогда
		Возврат 0;
	КонецЕсли;
	//rarus tenkam 24.11.2017 mantis 12223 ---
	
	СтоимостьПакета = 0;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Услуга");
	Для Каждого ТекУслуга Из ПакетУслугСсылка.СоставУслугПакета Цикл
		СтруктураПоиска.Услуга = ТекУслуга.Услуга;
		НайденныеСтроки = АктуальныеУслуги.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденнаяУслуга = НайденныеСтроки[0];
			СтоимостьПакета = СтоимостьПакета + НайденнаяУслуга.Стоимость;
		КонецЕсли;
	КонецЦикла;	
	Возврат Окр(СтоимостьПакета,-2);	// добавлено округление до сотых
КонецФункции

&НаСервере
Процедура ЗаполнитьДетализациюРасчета()
	ДетализацияРасчета.Очистить();
	
	НайденныеУслуги = АктуальныеУслуги.НайтиСтроки(Новый Структура("Выбрать", Истина));
	Если НайденныеУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = 1 + Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100;	// rarus tenkam 21.12.2018 mantis 13726 +++
	
	СтрокаОсновнойУслуги = Неопределено;
	СтоимостьОсновнойУслуги = 0;
	СтрокаПлатона = Неопределено;
	СтрокаОСАГО = Неопределено;
	СтрокаТранзитныхУслуг = Неопределено;	//08.09
	СтрокаДоставкиПолной = Неопределено;
	СтрокаДоставкиЛьготной = Неопределено;
	СтрокаДоставкиЛьготнойПоСкидке = Неопределено; 		// rarus tenkam 20.12.2018 mantis 13736 +
	МассивДопУслуг = Новый Массив;
	
	Для Каждого ТекСтрока Из НайденныеУслуги Цикл
		Если ТекСтрока.ОсновнаяУслуга Тогда
			СтрокаОсновнойУслуги = ТекСтрока;
		ИначеЕсли ТекСтрока.Услуга = Справочники.Scan_НоменклатураУслуг.УслугаПлатон Тогда
			СтрокаПлатона = ТекСтрока;
		ИначеЕсли ТекСтрока.Услуга = Справочники.Scan_НоменклатураУслуг.ПолисОСАГО Тогда
			СтрокаОСАГО = ТекСтрока;
		ИначеЕсли ТекСтрока.Услуга = Справочники.Scan_НоменклатураУслуг.ПолучениеТранзитныхНомеров Тогда	//08.09
			СтрокаТранзитныхУслуг = ТекСтрока;
		ИначеЕсли ТекСтрока.Услуга = Справочники.Scan_НоменклатураУслуг.ДоставкаПолная Тогда
			СтрокаДоставкиПолной = ТекСтрока;
		ИначеЕсли ТекСтрока.Услуга = Справочники.Scan_НоменклатураУслуг.ДоставкаЛьготная Тогда
			СтрокаДоставкиЛьготной = ТекСтрока;
		// rarus tenkam 21.12.2018 mantis 13736 +++
		ИначеЕсли ТекСтрока.Услуга = Справочники.Scan_НоменклатураУслуг.ДоставкаЛьготнаяПоСкидке Тогда
			СтрокаДоставкиЛьготнойПоСкидке = ТекСтрока;  		
		// rarus tenkam  21.12.2018 mantis 13736 ---
		Иначе
			МассивДопУслуг.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	СтрокаДоставкаПолнаяЛьготная = ?(СтрокаДоставкиПолной <> Неопределено, СтрокаДоставкиПолной, СтрокаДоставкиЛьготной);
	
	// rarus tenkam 20.12.2018 mantis 13726 +++
	СтрокаДоставкаПолнаяЛьготная = ?(СтрокаДоставкаПолнаяЛьготная <> Неопределено, СтрокаДоставкаПолнаяЛьготная, СтрокаДоставкиЛьготнойПоСкидке);
	// rarus tenkam 20.12.2019 mantis 13726 ---
	
	// Добавим сначала основную услугу 
	Если СтрокаОсновнойУслуги <> Неопределено Тогда
		СтруктураОтбора = Новый Структура("Услуга", СтрокаОсновнойУслуги.Услуга);
		СтруктураСведений = РегистрыСведений.Scan_СтоимостьУслугДляРасчетаСтоимостиДоставки.ПолучитьПоследнее(ДатаДоставки, СтруктураОтбора);
		НоваяСтрока = ДетализацияРасчета.Добавить();	
	    НоваяСтрока.Составляющая = СтрокаОсновнойУслуги.Услуга.Наименование +  " (осн.) (без НДС)";
		НоваяСтрока.Значение = СтруктураСведений.Стоимость;
		СтоимостьОсновнойУслуги = СтруктураСведений.Стоимость;
	КонецЕсли;
	
	// Добавим дополнительные услуги
	Для Каждого ТекДопУслуга Из МассивДопУслуг Цикл
		НоваяСтрока = ДетализацияРасчета.Добавить();	
	    НоваяСтрока.Составляющая = ТекДопУслуга.Услуга.Наименование;
		НоваяСтрока.Значение = ТекДопУслуга.Стоимость; 	
	КонецЦикла;
	
	// Добавим Полис ОСАГО
	Если СтрокаОСАГО <> Неопределено Тогда
		НоваяСтрока = ДетализацияРасчета.Добавить();	
	    НоваяСтрока.Составляющая = СтрокаОСАГО.Услуга.Наименование;
		НоваяСтрока.Значение = СтрокаОСАГО.Стоимость;
	КонецЕсли;
	
	// Добавим Транзитные услуги	08.09
	Если СтрокаТранзитныхУслуг <> Неопределено Тогда
		НоваяСтрока = ДетализацияРасчета.Добавить();	
	    НоваяСтрока.Составляющая = СтрокаТранзитныхУслуг.Услуга.Наименование;
		НоваяСтрока.Значение = СтрокаТранзитныхУслуг.Стоимость;
	КонецЕсли; 
		
	// рассчитаем расстояние между адресами
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("АдресПолучения", АдресПолучения);
	СтруктураОтбора.Вставить("АдресДоставки", АдресДоставки);	
	СтруктураСведений = РегистрыСведений.Scan_РасстояниеМеждуАдресами.Получить(СтруктураОтбора);
	ТекРасстояние = ?(ЗначениеЗаполнено(СтруктураСведений.Расстояние), СтруктураСведений.Расстояние, 0);

	// Добавим Платона
	Если СтрокаПлатона <> Неопределено Тогда
		СтруктураСведений = РегистрыСведений.Scan_ЗначенияДанныхДляРасчетаУслугиПлатон.ПолучитьПоследнее(ДатаДоставки,Новый Структура("Услуга", Справочники.Scan_НоменклатураУслуг.УслугаПлатон));
		КоэффициентВзиманияПлаты = СтруктураСведений.КоэффициентВзиманияПлаты;
		ТарифОплатыЗа1Км = СтруктураСведений.ТарифОплатыЗа1Км;
			
		НоваяСтрокаПлатона = ДетализацияРасчета.Добавить();	
		НоваяСтрокаПлатона.Составляющая = СтрокаПлатона.Услуга.Наименование;
		НоваяСтрокаПлатона.Значение = СтрокаПлатона.Стоимость; 
		НоваяСтрокаПлатона.Формула = "";
		
		Если ЗначениеЗаполнено(КоэффициентВзиманияПлаты) И ЗначениеЗаполнено(ТарифОплатыЗа1Км) Тогда
			НоваяСтрока = ДетализацияРасчета.Добавить();	
			НоваяСтрока.Составляющая = "     Коэффициент взимания платы";
			НоваяСтрока.Значение = КоэффициентВзиманияПлаты;  
			
			НоваяСтрока = ДетализацияРасчета.Добавить();	
			НоваяСтрока.Составляющая = "     Тариф оплаты за 1 км, руб";
			НоваяСтрока.Значение = ТарифОплатыЗа1Км;  
			
			ДействующийРазмерПлаты = Окр(ТарифОплатыЗа1Км * КоэффициентВзиманияПлаты,1);
			НоваяСтрока = ДетализацияРасчета.Добавить();	
			НоваяСтрока.Составляющая = "     Действующий размер платы за 1 км, руб";
			НоваяСтрока.Значение = ДействующийРазмерПлаты;
			НоваяСтрока.Формула = "Действующий размер платы за 1 км = " + КоэффициентВзиманияПлаты + " * " + ТарифОплатыЗа1Км + " = " + ДействующийРазмерПлаты;
			
			НоваяСтрокаПлатона.Формула = "Стоимость услуги Платон = " + ДействующийРазмерПлаты + " * " + ТекРасстояние + " = " + СтрокаПлатона.Стоимость; 
		КонецЕсли;
	КонецЕсли;
	
	// Добавим расстояние между адресами
	НоваяСтрока = ДетализацияРасчета.Добавить();
	НоваяСтрока.Составляющая = "Расстояние между адресами, км";
	НоваяСтрока.Значение = ТекРасстояние;
	
	// Проверим может дальнейшие расчеты не нужны
	// rarus tenkam 20.12.2018 mantis 13726 +++
	//Если СтрокаДоставкиЛьготной = Неопределено И СтрокаДоставкиПолной = Неопределено Тогда
	Если СтрокаДоставкиЛьготной = Неопределено И СтрокаДоставкиПолной = Неопределено И СтрокаДоставкиЛьготнойПоСкидке = Неопределено Тогда
	// rarus tenkam 20.12.2018 mantis 13726 ---
		НоваяСтрока = ДетализацияРасчета.Добавить();
		НоваяСтрока.Составляющая = "Стоимость доставки для дилера";
		НоваяСтрока.Значение = Окр(СтоимостьДоставки,-2);
		ФормулаДоставки = "Стоимость доставки = ";
		Если СтрокаОсновнойУслуги <> Неопределено Тогда
			// rarus tenkam 24.12.2018 mantis 13896 +++
			//ФормулаДоставки = ФормулаДоставки + СтоимостьОсновнойУслуги + " * 1.18 + ";
			ФормулаДоставки = ФормулаДоставки + СтоимостьОсновнойУслуги + " * " + СтавкаНДС + " + ";
			// rarus tenkam 24.12.2018 mantis 13896 ---
		КонецЕсли;
		Если СтрокаПлатона <> Неопределено Тогда
			ФормулаДоставки = ФормулаДоставки + СтрокаПлатона.Стоимость + " + ";
		КонецЕсли;
		Если СтрокаТранзитныхУслуг <> Неопределено Тогда	//08.09
			ФормулаДоставки = ФормулаДоставки + СтрокаТранзитныхУслуг.Стоимость + " + ";	
		КонецЕсли;
		Если СтрокаОСАГО <> Неопределено Тогда
			ФормулаДоставки = ФормулаДоставки + СтрокаОСАГО.Стоимость + " + ";	
		КонецЕсли;
		Для Каждого ТекДопУслуга Из МассивДопУслуг Цикл
			ФормулаДоставки = ФормулаДоставки + ТекДопУслуга.Стоимость + " + "; 	
		КонецЦикла;
		ФормулаДоставки = СокрЛП(ФормулаДоставки);
		Если Прав(ФормулаДоставки,1) = "+" Тогда
			ФормулаДоставки = Лев(ФормулаДоставки,СтрДлина(ФормулаДоставки)-1);
		КонецЕсли;
		НоваяСтрока.Формула = ФормулаДоставки;
		
		//rarus tenkam 24.11.2017 mantis 12223 +++
		Если НЕ ЗаданТарифНаДоставку(ПакетУслуг) Тогда
			НоваяСтрока = ДетализацияРасчета.Добавить();
			НоваяСтрока.Составляющая = "Не задан тариф на доставку";
			НоваяСтрока.Значение = 0;
			НоваяСтрока.Формула = "Стоимость доставки = 0";
			
			СтоимостьДоставки = 0;     	
		КонецЕсли;       	
		//rarus tenkam 24.11.2017 mantis 12223 --- 
		Возврат;
	КонецЕсли;
	
	// Добавим льготное расстояние
	Если СтрокаДоставкиЛьготной = Неопределено Тогда
		//Полная доставка
		Перегон = 0;
	Иначе
		Перегон = Scan_ПраваИНастройки.Scan_Право("ЛьготноеРасстояниеПриДоставке");
	КонецЕсли;
	НоваяСтрока = ДетализацияРасчета.Добавить();
	НоваяСтрока.Составляющая = "Льготное расстояние, км";
	НоваяСтрока.Значение = Перегон;	
	
	// rarus tenkam 21.12.2018 mantis 13726 +++
	//Если ТекРасстояние < Перегон Тогда
	//	Сообщить("Расстояние между ""Адресом получения"" и ""Адресом доставки"" меньше ""Льготного расстояния"" при доставке. Рассчет не может быть произведен.");
	//	ДетализацияРасчета.Очистить();
	//	Возврат;
	//КонецЕсли;
	
	Если СтрокаДоставкиЛьготнойПоСкидке <> Неопределено Тогда
		// Выведем размер льготы от Скании-Русь
		ЛьготаСканииРусь = Scan_Тарифы.ПолучитьЛьготуСканииРусь(ДатаДоставки);
		НоваяСтрока = ДетализацияРасчета.Добавить();
		НоваяСтрока.Составляющая = "Льгота Скании-Русь";
		НоваяСтрока.Значение = ЛьготаСканииРусь;
	Иначе 
		ЛьготаСканииРусь = 0;
	КонецЕсли;

	// rarus tenkam 21.12.2018 mantis 13726 ---
	
	// Добавим стоимости 1 км и тарифы перевозчиков	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// rarus tenkam 21.09.2018 mantis 13597 +++  (срез берется в разрезе измерений, а договор контрагента и ставка НДС не учитывалась ранее)
	//"ВЫБРАТЬ
	//|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Стоимость1Км,
	//|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Контрагент КАК Контрагент,
	//|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Сумма
	//|ИЗ
	//|	РегистрСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СрезПоследних(&ДатаДоставки, ) КАК Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних
	//|ГДЕ
	//|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.АдресПолучения = &АдресПолучения
	//|	И Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.АдресДоставки = &АдресДоставки
	//|	И Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ЛогистическийТип = &ЛогистическийТип
	//|	И Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.СпособДоставки = &СпособДоставки
	//|	И Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.КолеснаяФормула = &КолеснаяФормула
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Контрагент УБЫВ";
	
	// rarus tenkam 26.03.2021 mantis 17101 +++
	
	//"ВЫБРАТЬ
	//|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Стоимость1Км КАК Стоимость1Км,
	//|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Контрагент КАК Контрагент,
	//|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Сумма КАК Сумма,
	//|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Период КАК Период
	//|ПОМЕСТИТЬ ДанныеПоКонтрагентам
	//|ИЗ
	//|	РегистрСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СрезПоследних(
	//|			&ДатаДоставки,
	//|			АдресПолучения = &АдресПолучения
	//|				И АдресДоставки = &АдресДоставки
	//|				И ЛогистическийТип = &ЛогистическийТип
	//|				И СпособДоставки = &СпособДоставки
	//|				И КолеснаяФормула = &КолеснаяФормула) КАК Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Контрагент,
	//|	Период
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ДанныеПоКонтрагентам.Контрагент КАК Контрагент,
	//|	МАКСИМУМ(ДанныеПоКонтрагентам.Период) КАК Период
	//|ПОМЕСТИТЬ МаксПериодыКонтрагентов
	//|ИЗ
	//|	ДанныеПоКонтрагентам КАК ДанныеПоКонтрагентам
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ДанныеПоКонтрагентам.Контрагент
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Контрагент,
	//|	Период
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ДанныеПоКонтрагентам.Стоимость1Км КАК Стоимость1Км,
	//|	МаксПериодыКонтрагентов.Контрагент КАК Контрагент,
	//|	ДанныеПоКонтрагентам.Сумма КАК Сумма
	//|ИЗ
	//|	МаксПериодыКонтрагентов КАК МаксПериодыКонтрагентов
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоКонтрагентам КАК ДанныеПоКонтрагентам
	//|		ПО МаксПериодыКонтрагентов.Контрагент = ДанныеПоКонтрагентам.Контрагент
	//|			И МаксПериодыКонтрагентов.Период = ДанныеПоКонтрагентам.Период";
	//// rarus tenkam 21.09.2018 mantis 13597 ---
	
	"ВЫБРАТЬ
	|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Стоимость1Км КАК Стоимость1Км,
	|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Контрагент КАК Контрагент,
	|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Сумма КАК Сумма,
	|	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Период КАК Период,
	|	ВЫБОР
	|		КОГДА Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ДоговорКонтрагента.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ДоговорКонтрагента.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияДоговора,
	|	ВЫБОР
	|		КОГДА Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ДоговорКонтрагента.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ДоговорКонтрагента.ДатаОкончанияДействия
	|	КОНЕЦ КАК ДатаОкончанияДействияДоговора,
	|	ВЫБОР
	|		КОГДА Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Контрагент.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Контрагент.ДатаОкончанияДействия
	|	КОНЕЦ КАК ДатаОкончанияДействияКонтрагента
	|ПОМЕСТИТЬ ДанныеПоКонтрагентам
	|ИЗ
	|	РегистрСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СрезПоследних(
	|			&ДатаДоставки,
	|			АдресПолучения = &АдресПолучения
	|				И АдресДоставки = &АдресДоставки
	|				И ЛогистическийТип = &ЛогистическийТип
	|				И СпособДоставки = &СпособДоставки
	|				И КолеснаяФормула = &КолеснаяФормула) КАК Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоКонтрагентам.Стоимость1Км КАК Стоимость1Км,
	|	ДанныеПоКонтрагентам.Контрагент КАК Контрагент,
	|	ДанныеПоКонтрагентам.Сумма КАК Сумма,
	|	ДанныеПоКонтрагентам.Период КАК Период
	|ПОМЕСТИТЬ ДанныеПоКонтрагентамДействительные
	|ИЗ
	|	ДанныеПоКонтрагентам КАК ДанныеПоКонтрагентам
	|ГДЕ
	|	ДанныеПоКонтрагентам.ДатаОкончанияДоговора >= &ДатаДоставки
	|	И ДанныеПоКонтрагентам.ДатаОкончанияДействияДоговора >= &ДатаДоставки
	|	И ДанныеПоКонтрагентам.ДатаОкончанияДействияКонтрагента >= &ДатаДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоКонтрагентамДействительные.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ДанныеПоКонтрагентамДействительные.Период) КАК Период
	|ПОМЕСТИТЬ МаксПериодыКонтрагентов
	|ИЗ
	|	ДанныеПоКонтрагентамДействительные КАК ДанныеПоКонтрагентамДействительные
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоКонтрагентамДействительные.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоКонтрагентамДействительные.Стоимость1Км КАК Стоимость1Км,
	|	МаксПериодыКонтрагентов.Контрагент КАК Контрагент,
	|	ДанныеПоКонтрагентамДействительные.Сумма КАК Сумма
	|ИЗ
	|	МаксПериодыКонтрагентов КАК МаксПериодыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоКонтрагентамДействительные КАК ДанныеПоКонтрагентамДействительные
	|		ПО МаксПериодыКонтрагентов.Контрагент = ДанныеПоКонтрагентамДействительные.Контрагент
	|			И МаксПериодыКонтрагентов.Период = ДанныеПоКонтрагентамДействительные.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	// rarus tenkam 26.03.2021 mantis 17101 ---
	Запрос.УстановитьПараметр("АдресДоставки", АдресДоставки);
	Запрос.УстановитьПараметр("АдресПолучения", АдресПолучения);
	Запрос.УстановитьПараметр("ЛогистическийТип", ЛогистическийТип);
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	Запрос.УстановитьПараметр("КолеснаяФормула", КолеснаяФормула);
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаСтоимостейПеревозчиков = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаСтоимостейПеревозчиков.Количество() = 0 Тогда
		
		Если (СтрокаДоставкиПолной <> Неопределено И СтрокаДоставкиПолной.ТарифУказанВручную) ИЛИ
			(СтрокаДоставкиЛьготной <> Неопределено И СтрокаДоставкиЛьготной.ТарифУказанВручную) ИЛИ
			(СтрокаДоставкиЛьготнойПоСкидке <> Неопределено И СтрокаДоставкиЛьготнойПоСкидке.ТарифУказанВручную) Тогда	// rarus tenkam 21.12.2018 mantis 13726 +
			// Добавим тариф, указанный вручную

			НоваяСтрока = ДетализацияРасчета.Добавить();
			НоваяСтрока.Составляющая = "Стоимость тарифа, указанная вручную";
			НоваяСтрока.Значение = СтрокаДоставкаПолнаяЛьготная.Стоимость;
			
			// Добавим итоговую стоимость доставки
			НоваяСтрока = ДетализацияРасчета.Добавить();
			НоваяСтрока.Составляющая = "Стоимость доставки для дилера";
			
			// rarus tenkam 24.12.2018 mantis 13896 +++
			//ЗначениеТарифа = СтрокаДоставкаПолнаяЛьготная.Стоимость + СтоимостьОсновнойУслуги * 1.18;
			//ФормулаТарифа = "Стоимость доставки = " + СтрокаДоставкаПолнаяЛьготная.Стоимость + " + " + СтоимостьОсновнойУслуги + " * 1.18";
			ЗначениеТарифа = СтрокаДоставкаПолнаяЛьготная.Стоимость + СтоимостьОсновнойУслуги * СтавкаНДС;
			ФормулаТарифа = "Стоимость доставки = " + СтрокаДоставкаПолнаяЛьготная.Стоимость + " + " + СтоимостьОсновнойУслуги + " * " + СтавкаНДС;
			// rarus tenkam 24.12.2018 mantis 13896 ---
			
			Если СтрокаПлатона <> Неопределено Тогда
				ЗначениеТарифа = ЗначениеТарифа + СтрокаПлатона.Стоимость;
				ФормулаТарифа = ФормулаТарифа + " + " + СтрокаПлатона.Стоимость;		
			КонецЕсли;
			Если СтрокаТранзитныхУслуг <> Неопределено Тогда	//08.09
				ЗначениеТарифа = ЗначениеТарифа + СтрокаТранзитныхУслуг.Стоимость;
				ФормулаТарифа = ФормулаТарифа + " + " + СтрокаТранзитныхУслуг.Стоимость;	
			КонецЕсли;
			Если СтрокаОСАГО <> Неопределено Тогда
				ЗначениеТарифа = ЗначениеТарифа + СтрокаОСАГО.Стоимость;
				ФормулаТарифа = ФормулаТарифа + " + " + СтрокаОСАГО.Стоимость;	
			КонецЕсли; 			
			Для Каждого СтУслуги ИЗ МассивДопУслуг Цикл
				ЗначениеТарифа = ЗначениеТарифа + СтУслуги.Стоимость;
				ФормулаТарифа = ФормулаТарифа + " + " + СтУслуги.Стоимость;
			КонецЦикла;  
			ЗначениеТарифа = Окр(ЗначениеТарифа, -2);
			ФормулаТарифа = ФормулаТарифа + "     ,стоимость округлена до сотен рублей.";
			
			НоваяСтрока.Значение = ЗначениеТарифа;
			НоваяСтрока.Формула = ФормулаТарифа;
			Возврат;			
		Иначе
			 //rarus FominskiyAS 24.04.2019  mantis 14191 +++
			 //Сообщить("Не найден ни один тариф перевозчика с искомыми параметрами.");
			 Сообщить(НСтр("ru = 'Не найден ни один тариф перевозчика с искомыми параметрами.'; en = 'Unable to find any carrier''s tariff with the desired parameters.'"));
			 //rarus FominskiyAS 24.04.2019  mantis 14191 ---  
			ДетализацияРасчета.Очистить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Добавим тарифы и стоимости 1км. по перевозчикам
	ТаблицаДанныхПоПеревозчикам = Новый ТаблицаЗначений;
	ТаблицаДанныхПоПеревозчикам.Колонки.Добавить("Составляющая");
	ТаблицаДанныхПоПеревозчикам.Колонки.Добавить("Значение");
	ТаблицаДанныхПоПеревозчикам.Колонки.Добавить("Перевозчик");
	ТаблицаДанныхПоПеревозчикам.Колонки.Добавить("Формула");
	
	Для Каждого ТарифПеревозчика из ТаблицаСтоимостейПеревозчиков Цикл
		НоваяСтрока = ТаблицаДанныхПоПеревозчикам.Добавить();
		НоваяСтрока.Составляющая = "Стоимость 1 км";
		НоваяСтрока.Значение = ТарифПеревозчика.Стоимость1км;
		НоваяСтрока.Перевозчик = ТарифПеревозчика.Контрагент;
		НоваяСтрока.Формула = "Стоимость 1 км = " + ТарифПеревозчика.Сумма + "/" + ТекРасстояние + " = " + ТарифПеревозчика.Стоимость1км; 
		
		НоваяСтрока = ТаблицаДанныхПоПеревозчикам.Добавить();
		НоваяСтрока.Составляющая = "Тариф перевозчика";
		НоваяСтрока.Значение = ТарифПеревозчика.Сумма;
		НоваяСтрока.Перевозчик = ТарифПеревозчика.Контрагент;
		НоваяСтрока.Формула = "";
	КонецЦикла;
	
	ТаблицаДанныхПоПеревозчикам.Сортировать("Составляющая, Перевозчик");
	Для Каждого Строка из ТаблицаДанныхПоПеревозчикам Цикл
		НоваяСтрока = ДетализацияРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	
	// Добавим полные стоимости доставки по перевозчикам
	МассивСтоимостейПеревозчиков = Новый Массив;
	Для Каждого ТарифПеревозчика из ТаблицаСтоимостейПеревозчиков Цикл
		// rarus tenkam 21.12.2018 mantis 13736 +++
		Если СтрокаДоставкиЛьготнойПоСкидке <> Неопределено Тогда
			ЗначениеТарифа = Окр((ТарифПеревозчика.Сумма - ЛьготаСканииРусь) * СтавкаНДС,-2) + СтоимостьОсновнойУслуги * СтавкаНДС;
			ФормулаТарифа = "Стоимость доставки = ((" + ТарифПеревозчика.Сумма + " - " + ЛьготаСканииРусь + ") * " + СтавкаНДС + " + " + СтоимостьОсновнойУслуги + " * " + СтавкаНДС;
		Иначе	
		// rarus tenkam 21.12.2018 mantis 13736 ---		
			// rarus tenkam 24.12.2018 mantis 13896 +++
			//ЗначениеТарифа = Окр((ТекРасстояние - Перегон) * ТарифПеревозчика.Стоимость1км * 1.18,-2) + СтоимостьОсновнойУслуги * 1.18;
			////ЗначениеТарифа = ((ТекРасстояние - Перегон) * ТарифПеревозчика.Стоимость1км + СтоимостьОсновнойУслуги) * 1.18;
			//ФормулаТарифа = "Стоимость доставки = ((" + ТекРасстояние + " - " + Перегон + ") * " + ТарифПеревозчика.Стоимость1км + " + " + СтоимостьОсновнойУслуги + ") * 1.18";
			ЗначениеТарифа = Окр((ТекРасстояние - Перегон) * ТарифПеревозчика.Стоимость1км * СтавкаНДС,-2) + СтоимостьОсновнойУслуги * СтавкаНДС;
			ФормулаТарифа = "Стоимость доставки = ((" + ТекРасстояние + " - " + Перегон + ") * " + ТарифПеревозчика.Стоимость1км + " + " + СтоимостьОсновнойУслуги + ") * " + СтавкаНДС;
			// rarus tenkam 24.12.2018 mantis 13896 ---
		КонецЕсли;	// rarus tenkam 21.12.2018 mantis 13736 +
		Если СтрокаПлатона <> Неопределено Тогда
			ЗначениеТарифа = ЗначениеТарифа + СтрокаПлатона.Стоимость;
			ФормулаТарифа = ФормулаТарифа + " + " + СтрокаПлатона.Стоимость;		
		КонецЕсли;
		Если СтрокаТранзитныхУслуг <> Неопределено Тогда	//08.09
			ЗначениеТарифа = ЗначениеТарифа + СтрокаТранзитныхУслуг.Стоимость;
			ФормулаТарифа = ФормулаТарифа + " + " + СтрокаТранзитныхУслуг.Стоимость;	
		КонецЕсли; 
		Если СтрокаОСАГО <> Неопределено Тогда
			ЗначениеТарифа = ЗначениеТарифа + СтрокаОСАГО.Стоимость;
			ФормулаТарифа = ФормулаТарифа + " + " + СтрокаОСАГО.Стоимость;	
		КонецЕсли;      
		Для Каждого СтУслуги ИЗ МассивДопУслуг Цикл
			ЗначениеТарифа = ЗначениеТарифа + СтУслуги.Стоимость;
			ФормулаТарифа = ФормулаТарифа + " + " + СтУслуги.Стоимость;
		КонецЦикла;  
		ЗначениеТарифа = Окр(ЗначениеТарифа, -2);
		ФормулаТарифа = ФормулаТарифа + "     ,стоимость округлена до сотен рублей (округляется каждая составляющая).";
		
		НоваяСтрока = ДетализацияРасчета.Добавить();
		НоваяСтрока.Составляющая = "Стоимость доставки";
		НоваяСтрока.Значение = ЗначениеТарифа;
		НоваяСтрока.Формула = ФормулаТарифа;
		НоваяСтрока.Перевозчик = ТарифПеревозчика.Контрагент;
		
		МассивСтоимостейПеревозчиков.Добавить(ЗначениеТарифа);
	КонецЦикла;
	
	// Добавим итоговую стоимость доставки
	Если (СтрокаДоставкиПолной <> Неопределено И СтрокаДоставкиПолной.ТарифУказанВручную) ИЛИ
		(СтрокаДоставкиЛьготной <> Неопределено И СтрокаДоставкиЛьготной.ТарифУказанВручную) ИЛИ
		(СтрокаДоставкиЛьготнойПоСкидке <> Неопределено И СтрокаДоставкиЛьготнойПоСкидке.ТарифУказанВручную) Тогда	// rarus tenkam 26.12.2018 mantis 13736 +
		// Добавим тариф, указанный вручную
		
		НоваяСтрока = ДетализацияРасчета.Добавить();
		НоваяСтрока.Составляющая = "Стоимость тарифа, указанная вручную";
		НоваяСтрока.Значение = СтрокаДоставкаПолнаяЛьготная.Стоимость;
		
		// Добавим итоговую стоимость, равную ручной
		// rarus tenkam 24.12.2018 mantis 13896 +++
		//ЗначениеТарифа = СтрокаДоставкаПолнаяЛьготная.Стоимость + СтоимостьОсновнойУслуги * 1.18;
		//ФормулаТарифа = "Стоимость доставки = " + СтрокаДоставкаПолнаяЛьготная.Стоимость + " + " + СтоимостьОсновнойУслуги + " * 1.18";
		ЗначениеТарифа = СтрокаДоставкаПолнаяЛьготная.Стоимость + СтоимостьОсновнойУслуги * СтавкаНДС;
		ФормулаТарифа = "Стоимость доставки = " + СтрокаДоставкаПолнаяЛьготная.Стоимость + " + " + СтоимостьОсновнойУслуги + " * " + СтавкаНДС;
		// rarus tenkam 24.12.2018 mantis 13896 ---      		
		Если СтрокаПлатона <> Неопределено Тогда
			ЗначениеТарифа = ЗначениеТарифа + СтрокаПлатона.Стоимость;
			ФормулаТарифа = ФормулаТарифа + " + " + СтрокаПлатона.Стоимость;		
		КонецЕсли;
		Если СтрокаТранзитныхУслуг <> Неопределено Тогда	//08.09
			ЗначениеТарифа = ЗначениеТарифа + СтрокаТранзитныхУслуг.Стоимость;
			ФормулаТарифа = ФормулаТарифа + " + " + СтрокаТранзитныхУслуг.Стоимость;	
		КонецЕсли;       
		Если СтрокаОСАГО <> Неопределено Тогда
			ЗначениеТарифа = ЗначениеТарифа + СтрокаОСАГО.Стоимость;
			ФормулаТарифа = ФормулаТарифа + " + " + СтрокаОСАГО.Стоимость;	
		КонецЕсли;
		Для Каждого СтУслуги ИЗ МассивДопУслуг Цикл
			ЗначениеТарифа = ЗначениеТарифа + СтУслуги.Стоимость;
			ФормулаТарифа = ФормулаТарифа + " + " + СтУслуги.Стоимость;
		КонецЦикла;  
		ЗначениеТарифа = Окр(ЗначениеТарифа, -2);
		ФормулаТарифа = ФормулаТарифа + "     ,стоимость округлена до сотен рублей.";
		
		НоваяСтрока = ДетализацияРасчета.Добавить();
		НоваяСтрока.Составляющая = "Стоимость доставки для тарифа, указанного вручную";
		НоваяСтрока.Значение = ЗначениеТарифа;
		НоваяСтрока.Формула = ФормулаТарифа;
		
		// Итого
		НоваяСтрока = ДетализацияРасчета.Добавить();
		НоваяСтрока.Составляющая = "Стоимость доставки для дилера";
		НоваяСтрока.Значение = ЗначениеТарифа;
		НоваяСтрока.Формула = "Стоимость доставки = Стоимость доставки для тарифа, указанного вручную";
		
		СтоимостьДоставки = ЗначениеТарифа;
		
	Иначе
		Максимум = 0;
		ФормулаСтоимости = "Стоимость доставки = Максимум(";
		Для Каждого ТекСтоимость из МассивСтоимостейПеревозчиков Цикл
			ФормулаСтоимости = ФормулаСтоимости + ТекСтоимость + ", ";
			Если ТекСтоимость > Максимум Тогда
				Максимум = ТекСтоимость
			КонецЕсли;
		КонецЦикла;
		ФормулаСтоимости = Лев(ФормулаСтоимости, СтрДлина(ФормулаСтоимости) - 2) + ")";
		
		НоваяСтрока = ДетализацияРасчета.Добавить();
		НоваяСтрока.Составляющая = "Стоимость доставки для дилера";
		НоваяСтрока.Значение = Максимум;
		НоваяСтрока.Формула = ФормулаСтоимости;
		
		СтоимостьДоставки = Максимум;
		
	КонецЕсли;
	
КонецПроцедуры	
//rarus tenkam 09.08.2017 mantis 10589 ---

//rarus tenkam 24.11.2017 mantis 12223 +++
&НаСервере
Функция ЗаданТарифНаДоставку(ПакетУслугСсылка)
	
	//Проверим есть ли у пакета доставка льготная
	НайденнаяСтрока = ПакетУслугСсылка.СоставУслугПакета.Найти(Справочники.Scan_НоменклатураУслуг.ДоставкаЛьготная,"Услуга");
	Если НайденнаяСтрока = Неопределено Тогда
		//Проверим может есть доставка полная
		НайденнаяСтрока = ПакетУслугСсылка.СоставУслугПакета.Найти(Справочники.Scan_НоменклатураУслуг.ДоставкаПолная,"Услуга");
		Если НайденнаяСтрока = Неопределено Тогда
			// rarus tenkam 14.12.2018 mantis 13736 +++
			//Возврат Истина;
			// Проверим, есть ли доставка льготная расчет по скидке
			НайденнаяСтрока = ПакетУслугСсылка.СоставУслугПакета.Найти(Справочники.Scan_НоменклатураУслуг.ДоставкаЛьготнаяПоСкидке,"Услуга");
			Если НайденнаяСтрока = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			// rarus tenkam 14.12.2018 mantis 13736 ---
		КонецЕсли;   
	КонецЕсли;	
	
	ЕстьСтоимостьДоставкиЛьготнойПоСкидке = Истина;	// rarus tenkam 14.12.2018 mantis 13736 +
	ЕстьСтоимостьДоставкиЛьготной = Истина;
	ЕстьСтоимостьДоставкиПолной = Истина;
	
	// rarus tenkam 14.12.2018 mantis 13736 +++
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Услуга",Справочники.Scan_НоменклатураУслуг.ДоставкаЛьготнаяПоСкидке);
	НайденныеСтроки = АктуальныеУслуги.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		//Есть льготная доставка, проверим стоимость
		НайденнаяУслуга = НайденныеСтроки[0];
		Если НайденнаяУслуга.Стоимость = 0 Тогда
			ЕстьСтоимостьДоставкиЛьготнойПоСкидке = Ложь;
		КонецЕсли;
	Иначе
		ЕстьСтоимостьДоставкиЛьготнойПоСкидке = Ложь;	
	КонецЕсли;
	// rarus tenkam 14.12.2018 mantis 13736 ---
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Услуга",Справочники.Scan_НоменклатураУслуг.ДоставкаЛьготная);
	НайденныеСтроки = АктуальныеУслуги.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		//Есть льготная доставка, проверим стоимость
		НайденнаяУслуга = НайденныеСтроки[0];
		Если НайденнаяУслуга.Стоимость = 0 Тогда
			ЕстьСтоимостьДоставкиЛьготной = Ложь;
		КонецЕсли;
	Иначе
		ЕстьСтоимостьДоставкиЛьготной = Ложь;	
	КонецЕсли;      	
	
	СтруктураПоиска.Услуга = Справочники.Scan_НоменклатураУслуг.ДоставкаПолная;
	НайденныеСтроки = АктуальныеУслуги.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		//Есть полная доставка
		НайденнаяУслуга = НайденныеСтроки[0];
		Если НайденнаяУслуга.Стоимость = 0 Тогда
			ЕстьСтоимостьДоставкиПолной = Ложь;
		КонецЕсли;
	Иначе
		ЕстьСтоимостьДоставкиПолной = Ложь;
	КонецЕсли;
	
	Если НЕ ЕстьСтоимостьДоставкиЛьготной И НЕ ЕстьСтоимостьДоставкиПолной 
		И НЕ ЕстьСтоимостьДоставкиЛьготнойПоСкидке Тогда	// rarus tenkam 14.12.2018 mantis 13736 +
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ПакетыУслугВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ПакетыУслугПакет Тогда // Проверка, что кликнули по нужной нам колонке
		// rarus tenkam 10.04.2019 mantis 14195 +++
		//ОткрытьЗначение(Элементы.ПакетыУслуг.ТекущиеДанные.Пакет);
		ПоказатьЗначение(,Элементы.ПакетыУслуг.ТекущиеДанные.Пакет);
		// rarus tenkam 10.04.2019 mantis 14195 ---		       
	КонецЕсли; 
КонецПроцедуры
//rarus tenkam 24.11.2017 mantis 12223 ---

//rarus tenkam 05.11.2017 mantis 11477 +++
&НаСервере
Процедура СохранитьПараметрыКалькуляцииНаСервере()
	Если НЕ ЗначениеЗаполнено(АдресДоставки) И НЕ ЗначениеЗаполнено(АдресПолучения) И НЕ ЗначениеЗаполнено(КолеснаяФормула) 
		И НЕ ЗначениеЗаполнено(ЛогистическийТип) И НЕ ЗначениеЗаполнено(СпособДоставки) Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Не удалось сохранить вариант калькуляции. Параметры не заполнены!");
		Сообщить(НСтр("ru = 'Не удалось сохранить вариант калькуляции. Параметры не заполнены!'; en = 'Unable to save calculation. The parameters are not filled!'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.НаименованиеВарианта КАК НаименованиеВарианта
		|ИЗ
		|	РегистрСведений.Scan_ПараметрыКалькулятораТарифовНаДоставку КАК Scan_ПараметрыКалькулятораТарифовНаДоставку
		|ГДЕ
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.Пользователь = &Пользователь
		|	И Scan_ПараметрыКалькулятораТарифовНаДоставку.СпособДоставки = &СпособДоставки
		|	И Scan_ПараметрыКалькулятораТарифовНаДоставку.ЛогистическийТип = &ЛогистическийТип
		|	И Scan_ПараметрыКалькулятораТарифовНаДоставку.АдресПолучения = &АдресПолучения
		|	И Scan_ПараметрыКалькулятораТарифовНаДоставку.АдресДоставки = &АдресДоставки
		|	И Scan_ПараметрыКалькулятораТарифовНаДоставку.КолеснаяФормула = &КолеснаяФормула
		|	И Scan_ПараметрыКалькулятораТарифовНаДоставку.НаименованиеВарианта <> """"";
	
	Запрос.УстановитьПараметр("АдресДоставки", АдресДоставки);
	Запрос.УстановитьПараметр("АдресПолучения", АдресПолучения);
	Запрос.УстановитьПараметр("КолеснаяФормула", КолеснаяФормула);
	Запрос.УстановитьПараметр("ЛогистическийТип", ЛогистическийТип);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Вариант с текущими калькуляциями уже существует!");
		Сообщить(НСтр("ru = 'Вариант с текущими калькуляциями уже существует!'; en = 'Option with the current calculation already exists!'"));		
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
	Иначе
		НаборЗаписей = РегистрыСведений.Scan_ПараметрыКалькулятораТарифовНаДоставку.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		НаборЗаписей.Прочитать();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь = ТекущийПользователь;
		НоваяЗапись.СпособДоставки = СпособДоставки;
		НоваяЗапись.ЛогистическийТип = ЛогистическийТип;
		НоваяЗапись.АдресПолучения = АдресПолучения;
		НоваяЗапись.АдресДоставки = АдресДоставки;
		НоваяЗапись.КолеснаяФормула = КолеснаяФормула;
		НоваяЗапись.НаименованиеВарианта = "" +СпособДоставки + ", " + АдресПолучения + ", " + АдресДоставки + ", " + ЛогистическийТип + ", " + КолеснаяФормула;
		Попытка
			НаборЗаписей.Записать();
			ЗагрузитьПараметрыКалькуляцииНаСервере();
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СохранитьПараметрыКалькуляции(Команда)
	СохранитьПараметрыКалькуляцииНаСервере();
КонецПроцедуры   

&НаСервере
Процедура ЗагрузитьПараметрыКалькуляцииНаСервере()
	ВариантыКалькуляции.Очистить();	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.Пользователь КАК Пользователь,
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.СпособДоставки КАК СпособДоставки,
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.ЛогистическийТип КАК ЛогистическийТип,
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.АдресПолучения КАК АдресПолучения,
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.АдресДоставки КАК АдресДоставки,
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.КолеснаяФормула КАК КолеснаяФормула,
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.НаименованиеВарианта КАК НаименованиеВарианта
		|ИЗ
		|	РегистрСведений.Scan_ПараметрыКалькулятораТарифовНаДоставку КАК Scan_ПараметрыКалькулятораТарифовНаДоставку
		|ГДЕ
		|	Scan_ПараметрыКалькулятораТарифовНаДоставку.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);  	
	РезультатЗапроса = Запрос.Выполнить();  	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ВариантыКалькуляции.Добавить();
		НоваяСтрока.СпособДоставки = ВыборкаДетальныеЗаписи.СпособДоставки;
		НоваяСтрока.ЛогистическийТип = ВыборкаДетальныеЗаписи.ЛогистическийТип;
		НоваяСтрока.АдресПолучения = ВыборкаДетальныеЗаписи.АдресПолучения;
		НоваяСтрока.АдресДоставки = ВыборкаДетальныеЗаписи.АдресДоставки;
		НоваяСтрока.КолеснаяФормула = ВыборкаДетальныеЗаписи.КолеснаяФормула;
		НоваяСтрока.НаименованиеВарианта = ВыборкаДетальныеЗаписи.НаименованиеВарианта;
	КонецЦикла;
		
КонецПроцедуры       

&НаКлиенте
Процедура ЗагрузитьПараметрыКалькуляции(Команда)
	
	ТекДанные = элементы.ВариантыКалькуляции.ТекущиеДанные;
	СпособДоставки = ТекДанные.СпособДоставки;
	ЛогистическийТип = ТекДанные.ЛогистическийТип;
	АдресПолучения = ТекДанные.АдресПолучения;
	АдресДоставки = ТекДанные.АдресДоставки;
	КолеснаяФормула = ТекДанные.КолеснаяФормула;
	
	//ЗагрузитьПараметрыКалькуляцииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПересохранитьВариантыКалькуляции()
	ТекТЗ = ВариантыКалькуляции.Выгрузить();
	НаборЗаписей = РегистрыСведений.Scan_ПараметрыКалькулятораТарифовНаДоставку.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	Для Каждого ТекВариант Из ТекТЗ Цикл	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь = ТекущийПользователь;
		НоваяЗапись.СпособДоставки = ТекВариант.СпособДоставки;
		НоваяЗапись.ЛогистическийТип = ТекВариант.ЛогистическийТип;
		НоваяЗапись.АдресПолучения = ТекВариант.АдресПолучения;
		НоваяЗапись.АдресДоставки = ТекВариант.АдресДоставки;
		НоваяЗапись.КолеснаяФормула = ТекВариант.КолеснаяФормула;
		НоваяЗапись.НаименованиеВарианта = "" + ТекВариант.СпособДоставки + ", " + ТекВариант.АдресПолучения + ", " + 
										ТекВариант.АдресДоставки + ", " + ТекВариант.ЛогистическийТип + ", " + ТекВариант.КолеснаяФормула;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПриЗакрытии(ЗавершениеРаботы)
//	ТекТЗ = ВариантыКалькуляции.Выгрузить();
//	ПересохранитьВариантыКалькуляции(ТекТЗ);
//КонецПроцедуры

&НаКлиенте
Процедура ВариантыКалькуляцииПослеУдаления(Элемент)
	ПересохранитьВариантыКалькуляции();
КонецПроцедуры


//rarus tenkam 05.11.2017 mantis 11477 ---
