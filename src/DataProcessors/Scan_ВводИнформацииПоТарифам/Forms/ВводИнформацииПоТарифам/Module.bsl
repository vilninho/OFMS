//rarus tenkam 16.02.2017 mantis 7177 +++
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Договор") Тогда
		Контрагент = Параметры.Договор.Владелец;
		Договор = Параметры.Договор;	
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		Элементы.Договор.ТолькоПросмотр = Истина;
	КонецЕсли;
	Услуга = Справочники.Scan_НоменклатураУслуг.Доставка;
	ДатаУстановкиТарифа = ТекущаяДата();
	
	ЗаполнитьТаблицуАдресов();
	Scan_СборСтатистики.Scan_ПриОткрытииОбработки(РеквизитФормыВЗначение("Объект").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ЗначениеОтбора = Новый Структура("Владелец",Контрагент);
		ПараметрыОткрытия = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.Scan_ДоговорыВзаиморасчетов.ФормаВыбора",ПараметрыОткрытия, Элементы.Договор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуАдресатов(Команда)
	Если ПроверитьЗаполнениеПолей() Тогда
		ЗаполнитьТаблицуАдресов();
	КонецЕсли;
КонецПроцедуры

// Функция - Проверить заполнение полей
// 
// Возвращаемое значение:
//   - 
//
&НаСервере
Функция ПроверитьЗаполнениеПолей()
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДатаУстановкиТарифа) Тогда
		Сообщение = Новый СообщениеПользователю();
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщение.Текст = "Дата установки тарифа не заполнена!";
		Сообщение.Текст = НСтр("ru = 'Дата установки тарифа не заполнена!'; en = 'Rate setting date is not filled!'");
		//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
		Сообщение.Поле = "Контрагент";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю();
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщение.Текст = "Контрагент не заполнен!";
		Сообщение.Текст = НСтр("ru = 'Контрагент не заполнен!'; en = 'The counterparty is not filled!'");
		//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
		Сообщение.Поле = "Контрагент";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Сообщение = Новый СообщениеПользователю();
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщение.Текст = "Договор не заполнен!";
		Сообщение.Текст = НСтр("ru = 'Договор не заполнен!'; en = 'The contract is not filled!'");
		//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
		Сообщение.Поле = "Договор";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Услуга) Тогда
		Сообщение = Новый СообщениеПользователю();
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщение.Текст = "Услуга не заполнена!";
		Сообщение.Текст = НСтр("ru = 'Услуга не заполнена!'; en = 'The service is not filled!'");
		//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
		Сообщение.Поле = "Услуга";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;


	Если НЕ ЗначениеЗаполнено(ГруппаПродукта) Тогда
		Сообщение = Новый СообщениеПользователю();
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщение.Текст = "ГруппаПродукта не заполнена!";
		Сообщение.Текст = НСтр("ru = 'Группа продукта не заполнена!'; en = 'Product group is not filled!'");
		//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
		Сообщение.Поле = "ГруппаПродукта";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор.СтавкаНДС) Тогда
		Сообщение = Новый СообщениеПользователю();
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщение.Текст = "СтавкаНДС в договоре не заполнена!";
		Сообщение.Текст = НСтр("ru = 'Ставка НДС в договоре не заполнена!'; en = 'VAT rate in the contract is not filled!'");
		//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
		Сообщение.Поле = "СтавкаНДС";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли; 
	
	Если ГруппаПродукта = ПредопределенноеЗначение("Справочник.Scan_ГруппыПродуктов.ТранспортныеСредства") Тогда
		Если НЕ ЗначениеЗаполнено(СпособДоставки) Тогда
			Сообщение = Новый СообщениеПользователю();
			//rarus FominskiyAS 25.04.2019  mantis 14191 +++
			//Сообщение.Текст = "СпособДоставки не заполнен!";
			Сообщение.Текст = НСтр("ru = 'Способ доставки не заполнен!'; en = 'Delivery method is not filled!'");
			//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
			Сообщение.Поле = "СпособДоставки";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;  
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Выбрано", Истина);
		НайденныеСтроки = ЛогистическиеТипы.НайтиСтроки(ПараметрыОтбора); 
		Если НайденныеСтроки.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю();
			//rarus FominskiyAS 25.04.2019  mantis 14191 +++
			//Сообщение.Текст = "Не выбран ни один логистический тип!";
			Сообщение.Текст = НСтр("ru = 'Не выбран ни один логистический тип!'; en = 'Please select logistics type!'");
			//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
			Сообщение.Поле = "ЛогистическиеТипы";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		//rarus tenkam 26.01.2018 mantis 12581 +++
		МассивЛогТиповБезПрицепов = Новый Массив;
		МассивЛогТиповПрицепов = Новый Массив;
		Для Каждого ТекЛогТип Из НайденныеСтроки Цикл
			Если СтрНайти(НРег(ТекЛогТип.ЛогистическийТип.Наименование), "прицеп") <> 0 Тогда
				МассивЛогТиповПрицепов.Добавить(ТекЛогТип.ЛогистическийТип);
			Иначе
				МассивЛогТиповБезПрицепов.Добавить(ТекЛогТип.ЛогистическийТип);
			КонецЕсли;		
		КонецЦикла;
		
		Если МассивЛогТиповПрицепов.Количество() <> 0 И МассивЛогТиповБезПрицепов.Количество() <> 0 Тогда
			Сообщение = Новый СообщениеПользователю();
			//rarus FominskiyAS 25.04.2019  mantis 14191 +++
			//Сообщение.Текст = "Тарифы по полуприцепам и прицепам необходимо указать отдельно от остальных логистических типов!";
			Сообщение.Текст = НСтр("ru = 'Тарифы по полуприцепам и прицепам необходимо указать отдельно от остальных логистических типов!'; en = 'Specify tariffs for trailers and semi-trailers separately from another logistics types!'");
			//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
			Сообщение.Поле = "ЛогистическиеТипы";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;	
		ИначеЕсли МассивЛогТиповПрицепов.Количество() = 0 И МассивЛогТиповБезПрицепов.Количество() <> 0 Тогда 
		//rarus tenkam 26.01.2018 mantis 12581 ---
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Выбрано", Истина);
			НайденныеСтроки = КолесныеФормулы.НайтиСтроки(ПараметрыОтбора); 
			Если НайденныеСтроки.Количество() = 0 Тогда
				Сообщение = Новый СообщениеПользователю();
				//rarus FominskiyAS 25.04.2019  mantis 14191 +++
				//Сообщение.Текст = "Не выбрана ни одна колесная формула!";
				Сообщение.Текст = НСтр("ru = 'Не выбрана ни одна колесная формула!'; en = 'Wheel configuration is not selected!'");
				//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
				Сообщение.Поле = "КолесныеФормулы";
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
			КонецЕсли;  			
		КонецЕсли;	//rarus tenkam 26.01.2018 mantis 12581 +	
	// rarus tenkam 14.10.2019 mantis 14442 +++	
	//ИначеЕсли ГруппаПродукта = ПредопределенноеЗначение("Справочник.Scan_ГруппыПродуктов.ДизельныеЭлектростанции") Тогда
	//	Если НЕ ЗначениеЗаполнено(СпособДоставки) Тогда
	//		Сообщение = Новый СообщениеПользователю();
	//		//rarus FominskiyAS 08.07.2019  mantis 14191 +++
	//		//Сообщение.Текст = "СпособДоставки не заполнен!";
	//		Сообщение.Текст = НСтр("ru = 'СпособДоставки не заполнен!'; en = 'Delivery method is not filled!'");
	//		//rarus FominskiyAS 08.07.2019  mantis 14191 ---  
	//		Сообщение.Поле = "СпособДоставки";
	//		Сообщение.УстановитьДанные(ЭтотОбъект);
	//		Сообщение.Сообщить();
	//		ЕстьОшибки = Истина;
	//	КонецЕсли;
	// rarus tenkam 14.10.2019 mantis 14442 ---
	КонецЕсли;
	
	// rarus tenkam 21.02.2019 mantis 14109 +++
	Если НЕ Договор.Бессрочный И ДатаУстановкиТарифа > Договор.ДатаОкончания Тогда
		Сообщение = Новый СообщениеПользователю();
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщение.Текст = "Дата установки тарифа не может быть больше даты окончания договора!";
		Сообщение.Текст = НСтр("ru = 'Дата установки тарифа не может быть больше даты окончания договора!'; en = 'Tariff setting date can not be older than the contract expiration date!'");
		//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
		Сообщение.Поле = "Договор";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;
	// rarus tenkam 21.02.2019 mantis 14109 ---
	
	// rarus tenkam 29.07.2021 mantis 17628 +++
	ДатаОкончанияДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ДатаОкончанияДействия");
	
	Если ЗначениеЗаполнено(ДатаОкончанияДействия) И ДатаУстановкиТарифа > ДатаОкончанияДействия Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Дата установки тарифа не может быть больше даты окончания действия договора!'; en = 'Tariff setting date can not be older than the contract expiration date!'");
		Сообщение.Поле = "Договор";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;	
	// rarus tenkam 29.07.2021 mantis 17628 ---
	
	Возврат НЕ ЕстьОшибки;
КонецФункции

// Процедура - Заполнить таблицу адресов
//
&НаСервере
Процедура ЗаполнитьТаблицуАдресов()
	//Объект.ТаблицаЛогистическихАдресов.Очистить();
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический КАК АдресПолучения,
	//               |	Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический КАК АдресДоставки
	//               |ПОМЕСТИТЬ ВсеМаршруты
	//               |ИЗ
	//               |	Справочник.Scan_МестаХранения КАК Scan_МестаХранения
	//               |ГДЕ
	//               |	Scan_МестаХранения.Маршрут = ИСТИНА
	//               |	И Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический <> ЗНАЧЕНИЕ(Справочник.Scan_АдресаХранения.ПустаяСсылка)
	//               |	И Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический <> ЗНАЧЕНИЕ(Справочник.Scan_АдресаХранения.ПустаяСсылка)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический,
	//               |	Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.АдресПолучения,
	//               |	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.АдресДоставки,
	//               |	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Сумма,
	//               |	Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.СуммаСНДС
	//               |ПОМЕСТИТЬ ДанныеРегистра
	//               |ИЗ
	//               |	РегистрСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СрезПоследних(
	//               |			&НаДату,
	//               |			Контрагент = &Контрагент
	//               |				И ДоговорКонтрагента = &Договор
	//               |				И НоменклатураУслуги = &Услуга
	//               |				И ГруппаПродукта = &ГруппаПродукта
	//               |				И СпособДоставки = &СпособДоставки) КАК Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВсеМаршруты.АдресПолучения,
	//               |	ВсеМаршруты.АдресДоставки,
	//               |	ЕСТЬNULL(ДанныеРегистра.Сумма, 0) КАК Цена,
	//               |	ЕСТЬNULL(ДанныеРегистра.СуммаСНДС, 0) КАК СуммаСНДС
	//               |ИЗ
	//               |	ВсеМаршруты КАК ВсеМаршруты
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегистра КАК ДанныеРегистра
	//               |		ПО ВсеМаршруты.АдресПолучения = ДанныеРегистра.АдресПолучения
	//               |			И ВсеМаршруты.АдресДоставки = ДанныеРегистра.АдресДоставки";
	//Запрос.УстановитьПараметр("НаДату", ДатаУстановкиТарифа);
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//Запрос.УстановитьПараметр("Договор", Договор);
	//Запрос.УстановитьПараметр("Услуга", Услуга);
	//Запрос.УстановитьПараметр("ГруппаПродукта", ГруппаПродукта);
	//Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	////Запрос.УстановитьПараметр("СтавкаНДС", Договор.СтавкаНДС);
	//ТабРезультат = Запрос.Выполнить().Выгрузить();
	//Для Каждого ТекМаршрут Из ТабРезультат Цикл
	//	НовыйМаршрут = Объект.ТаблицаЛогистическихАдресов.Добавить();
	//	НовыйМаршрут.АдресПолучения = ТекМаршрут.АдресПолучения;
	//	НовыйМаршрут.АдресДоставки = ТекМаршрут.АдресДоставки;
	//	Если Договор.ВключаетНДС Тогда
	//		НовыйМаршрут.Цена = ТекМаршрут.СуммаСНДС;	
	//	Иначе
	//		НовыйМаршрут.Цена = ТекМаршрут.Цена;
	//	КонецЕсли;
	//КонецЦикла;
	////ЗаполнитьЗначенияСвойств(Объект.ТаблицаЛогистическихАдресов,ТабРезультат);	
	
	
	Объект.ТаблицаЛогистическихАдресов.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_РасстояниеМеждуАдресами.АдресПолучения КАК АдресПолучения,
	               |	Scan_РасстояниеМеждуАдресами.АдресДоставки КАК АдресДоставки,
	               |	Scan_РасстояниеМеждуАдресами.АдресПолучения.Наименование КАК АдресПолученияНаименование
	               |ИЗ
	               |	РегистрСведений.Scan_РасстояниеМеждуАдресами КАК Scan_РасстояниеМеждуАдресами
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_РасстояниеМеждуАдресами.АдресПолучения,
	               |	Scan_РасстояниеМеждуАдресами.АдресДоставки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	АдресПолученияНаименование";
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический КАК АдресПолучения,
	//               |	Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический КАК АдресДоставки
	//               |ИЗ
	//               |	Справочник.Scan_МестаХранения КАК Scan_МестаХранения
	//               |ГДЕ
	//               |	Scan_МестаХранения.Маршрут = ИСТИНА
	//               |	И Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический <> ЗНАЧЕНИЕ(Справочник.Scan_АдресаХранения.ПустаяСсылка)
	//               |	И Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический <> ЗНАЧЕНИЕ(Справочник.Scan_АдресаХранения.ПустаяСсылка)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический,
	//               |	Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический";
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекМаршрут Из ТабРезультат Цикл
		НовыйМаршрут = Объект.ТаблицаЛогистическихАдресов.Добавить();
		НовыйМаршрут.АдресПолучения = ТекМаршрут.АдресПолучения;
		НовыйМаршрут.АдресДоставки = ТекМаршрут.АдресДоставки;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТарифы(Команда)
	Если ПроверитьЗаполнениеПолей() И Объект.ТаблицаЛогистическихАдресов.Количество() <> 0 Тогда
		СохранитьТарифыНаСервере();
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Данные о тарифах сохранены.");
		Сообщить(НСтр("ru = 'Данные о тарифах сохранены.'; en = 'Tariff saved.'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		ЗаполнитьТаблицуАдресов();	// rarus tenkam 22.03.2017 9061 +
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьТарифыНаСервере()
	//rarus tenkam 10.08.2017 mantis 10589 +++
	БылиЗаписи = Ложь;
	//rarus tenkam 10.08.2017 mantis 10589 ---
	Если НЕ ЗначениеЗаполнено(ДатаУстановкиТарифа) Тогда
		ДатаЗаписи = ТекущаяДата();
	Иначе
		ДатаЗаписи = ДатаУстановкиТарифа;
	КонецЕсли; 
	
	Если ГруппаПродукта = ПредопределенноеЗначение("Справочник.Scan_ГруппыПродуктов.ТранспортныеСредства") Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Выбрано", Истина);
		НайденныеЛогистическиеТипы = ЛогистическиеТипы.НайтиСтроки(ПараметрыОтбора); 
		НайденныеКолесныеФормулы = КолесныеФормулы.НайтиСтроки(ПараметрыОтбора); 
		
		Для Каждого ТекСтрока Из Объект.ТаблицаЛогистическихАдресов Цикл
			
			Для Каждого ТекЛогТип Из НайденныеЛогистическиеТипы Цикл
				//rarus tenkam 25.01.2018 mantis 12581 +++
				Если НайденныеКолесныеФормулы.Количество() = 0 Тогда
					//Чтение старого значения регистра
						СтруктураОтбора = Новый Структура("Контрагент,ДоговорКонтрагента,НоменклатураУслуги,ГруппаПродукта,СтавкаНДС,СпособДоставки,АдресПолучения,АдресДоставки,ЛогистическийТип", Контрагент, Договор, Услуга, ГруппаПродукта, Договор.СтавкаНДС, СпособДоставки, ТекСтрока.АдресПолучения, ТекСтрока.АдресДоставки, ТекЛогТип.ЛогистическийТип);
						
						СтруктураСведений = РегистрыСведений.Scan_МатрицаТарифовПоДоставкеИзделий.ПолучитьПоследнее(ДатаЗаписи, СтруктураОтбора);
						СуммаСтарое = СтруктураСведений.Сумма;
						Записывать = Ложь;
						
						//Введено значение, а старое отсутствует
						Если ЗначениеЗаполнено(ТекСтрока.Цена) И СуммаСтарое = 0 Тогда 
							Записывать = Истина; 
						КонецЕсли; 
						//Введено значение и было введено старое
						Если ЗначениеЗаполнено(ТекСтрока.Цена) И СуммаСтарое <> 0 Тогда
							//Значение изменилось
							Если ТекСтрока.Цена <> СуммаСтарое Тогда 
								Записывать = Истина; 
							КонецЕсли; 
						КонецЕсли; 
						Если Записывать Тогда
							// rarus tenkam 02.08.2021 mantis 17628 +++
							// тариф действует в рамках дня, если на дату уже есть тариф, 
							// то не добавлять новую запись с тарифом перевозчика, а изменять имеющуюся
							ДатаСуществующейЗаписи = ПолучитьЗаписьДатуВремяАналогичнойЗаписи(ДатаЗаписи, СтруктураОтбора);
							Если ДатаЗаписи <> ДатаСуществующейЗаписи Тогда
								ДатаЗаписи = ДатаСуществующейЗаписи;	
							КонецЕсли;
							// rarus tenkam 02.08.2021 mantis 17628 ---
							
							//Значение суммы изменилось
							ЗаписьРегСведений = РегистрыСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СоздатьМенеджерЗаписи();
							ЗаписьРегСведений.Контрагент	  		= Контрагент;
							ЗаписьРегСведений.ДоговорКонтрагента 	= Договор;
							ЗаписьРегСведений.НоменклатураУслуги    = Услуга;
							ЗаписьРегСведений.ГруппаПродукта    	= ГруппаПродукта;
							ЗаписьРегСведений.СтавкаНДС    			= Договор.СтавкаНДС;
							ЗаписьРегСведений.СпособДоставки    	= СпособДоставки;
							ЗаписьРегСведений.АдресПолучения    	= ТекСтрока.АдресПолучения;
							ЗаписьРегСведений.АдресДоставки    		= ТекСтрока.АдресДоставки;
							ЗаписьРегСведений.ЛогистическийТип		= ТекЛогТип.ЛогистическийТип;
							
							Если Договор.ВключаетНДС Тогда
								СуммаСНДС = ТекСтрока.Цена;
								Сумма = ТекСтрока.Цена / (100 + Договор.СтавкаНДС.Ставка) * 100;
								СуммаНДС = СуммаСНДС - Сумма;
							Иначе
								СуммаСНДС = ТекСтрока.Цена + (ТекСтрока.Цена / 100 * Договор.СтавкаНДС.Ставка);
								Сумма = ТекСтрока.Цена;
								СуммаНДС = СуммаСНДС - Сумма;
							КонецЕсли;
							ЗаписьРегСведений.Сумма    				= Сумма;
							ЗаписьРегСведений.СуммаНДС    			= СуммаНДС;
							ЗаписьРегСведений.СуммаСНДС				= СуммаСНДС;	
							ЗаписьРегСведений.Период      			= ДатаЗаписи;
							ЗаписьРегСведений.Пользователь 			= ПользователиКлиентСервер.ТекущийПользователь();
							Расстояние = ПолучитьРасстояние(ТекСтрока.АдресДоставки, ТекСтрока.АдресПолучения);
							ЗаписьРегСведений.Стоимость1км			= ?(Расстояние = 0, 0, Сумма/Расстояние);
							
							Попытка
								ЗаписьРегСведений.Записать();
								БылиЗаписи = Истина;   							
							Исключение
								//rarus FominskiyAS 24.04.2019  mantis 14191 +++
								//Сообщить(НСтр("ru = 'Ошибка записи цены тарифа в регистр сведений'"));
								Сообщить(НСтр("ru = 'Ошибка записи цены тарифа в регистр сведений'; en = 'Action failed'"));
								//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
								Отказ = Истина;
							КонецПопытки; 
						КонецЕсли; 
	
				Иначе	//rarus tenkam 25.01.2018 mantis 12581 ---
					
					Для Каждого ТекКолФормула Из НайденныеКолесныеФормулы Цикл
						//Чтение старого значения регистра
						СтруктураОтбора = Новый Структура("Контрагент,ДоговорКонтрагента,НоменклатураУслуги,ГруппаПродукта,СтавкаНДС,СпособДоставки,АдресПолучения,АдресДоставки,ЛогистическийТип,КолеснаяФормула", Контрагент, Договор, Услуга, ГруппаПродукта, Договор.СтавкаНДС, СпособДоставки, ТекСтрока.АдресПолучения, ТекСтрока.АдресДоставки, ТекЛогТип.ЛогистическийТип, ТекКолФормула.КолеснаяФормула);
						
						СтруктураСведений = РегистрыСведений.Scan_МатрицаТарифовПоДоставкеИзделий.ПолучитьПоследнее(ДатаЗаписи, СтруктураОтбора); 
						СуммаСтарое = СтруктураСведений.Сумма;
						Записывать = Ложь;
						//Введено значение, а старое отсутствует
						Если ЗначениеЗаполнено(ТекСтрока.Цена) И СуммаСтарое = 0 Тогда 
							Записывать = Истина; 
						КонецЕсли; 
						//rarus tenkam 22.03.2017 mantis 7177 +++
						////Значение стерто, а старое значение было введено
						//Если НЕ ЗначениеЗаполнено(ТекСтрока.Цена) И СуммаСтарое <> 0 Тогда 
						//	Записывать = Истина; 
						//КонецЕсли; 
						//rarus tenkam 22.03.2017 mantis 7177 ---
						//Введено значение и было введено старое
						Если ЗначениеЗаполнено(ТекСтрока.Цена) И СуммаСтарое <> 0 Тогда
							//Значение изменилось
							Если ТекСтрока.Цена <> СуммаСтарое Тогда 
								Записывать = Истина; 
							КонецЕсли; 
						КонецЕсли; 
						Если Записывать Тогда
							// rarus tenkam 02.08.2021 mantis 17628 +++
							// тариф действует в рамках дня, если на дату уже есть тариф, 
							// то не добавлять новую запись с тарифом перевозчика, а изменять имеющуюся
							ДатаСуществующейЗаписи = ПолучитьЗаписьДатуВремяАналогичнойЗаписи(ДатаЗаписи, СтруктураОтбора);
							Если ДатаЗаписи <> ДатаСуществующейЗаписи Тогда
								ДатаЗаписи = ДатаСуществующейЗаписи;	
							КонецЕсли;
							// rarus tenkam 02.08.2021 mantis 17628 ---
							
							//Значение суммы изменилось
							ЗаписьРегСведений = РегистрыСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СоздатьМенеджерЗаписи();
							ЗаписьРегСведений.Контрагент	  		= Контрагент;
							ЗаписьРегСведений.ДоговорКонтрагента 	= Договор;
							ЗаписьРегСведений.НоменклатураУслуги    = Услуга;
							ЗаписьРегСведений.ГруппаПродукта    	= ГруппаПродукта;
							ЗаписьРегСведений.СтавкаНДС    			= Договор.СтавкаНДС;
							ЗаписьРегСведений.СпособДоставки    	= СпособДоставки;
							ЗаписьРегСведений.АдресПолучения    	= ТекСтрока.АдресПолучения;
							ЗаписьРегСведений.АдресДоставки    		= ТекСтрока.АдресДоставки;
							ЗаписьРегСведений.ЛогистическийТип		= ТекЛогТип.ЛогистическийТип;
							ЗаписьРегСведений.КолеснаяФормула		= ТекКолФормула.КолеснаяФормула;
							
							Если Договор.ВключаетНДС Тогда
								СуммаСНДС = ТекСтрока.Цена;
								Сумма = ТекСтрока.Цена / (100 + Договор.СтавкаНДС.Ставка) * 100;
								СуммаНДС = СуммаСНДС - Сумма;
							Иначе
								СуммаСНДС = ТекСтрока.Цена + (ТекСтрока.Цена / 100 * Договор.СтавкаНДС.Ставка);
								Сумма = ТекСтрока.Цена;
								СуммаНДС = СуммаСНДС - Сумма;
							КонецЕсли;
							ЗаписьРегСведений.Сумма    				= Сумма;
							ЗаписьРегСведений.СуммаНДС    			= СуммаНДС;
							ЗаписьРегСведений.СуммаСНДС				= СуммаСНДС;	
							ЗаписьРегСведений.Период      			= ДатаЗаписи;
							ЗаписьРегСведений.Пользователь 			= ПользователиКлиентСервер.ТекущийПользователь();
							//rarus abrant 07.06.2017 mantis 9146 +++
							Расстояние = ПолучитьРасстояние(ТекСтрока.АдресДоставки, ТекСтрока.АдресПолучения);
							//rarus tenkam 09.09.2017 mantis 10589 +++
							//ЗаписьРегСведений.Стоимость1км			= ?(Расстояние = 0, 0, СуммаСНДС/Расстояние);
							ЗаписьРегСведений.Стоимость1км			= ?(Расстояние = 0, 0, Сумма/Расстояние);
							//rarus tenkam 09.09.2017 mantis 10589 ---
							//rarus abrant 07.06.2017 mantis 9146 ---
							
							Попытка
								ЗаписьРегСведений.Записать();
								//rarus tenkam 10.08.2017 mantis 10589 +++
								БылиЗаписи = Истина;
								//rarus tenkam 10.08.2017 mantis 10589 ---   							
							Исключение
								//rarus FominskiyAS 24.04.2019  mantis 14191 +++
								//Сообщить(НСтр("ru = 'Ошибка записи цены тарифа в регистр сведений'"));
								Сообщить(НСтр("ru = 'Ошибка записи цены тарифа в регистр сведений'; en = 'Action failed'"));
								//rarus FominskiyAS 24.04.2019  mantis 14191 --- 
								Отказ = Истина;
							КонецПопытки; 
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли;	//rarus tenkam 25.01.2018 mantis 12581 +
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		Для Каждого ТекСтрока Из Объект.ТаблицаЛогистическихАдресов Цикл
			//Чтение старого значения регистра
			// rarus tenkam 14.10.2019 mantis 14442 +++ 
			//Если ГруппаПродукта = ПредопределенноеЗначение("Справочник.Scan_ГруппыПродуктов.ДизельныеЭлектростанции") Тогда
			//	СтруктураОтбора = Новый Структура("Контрагент,ДоговорКонтрагента,НоменклатураУслуги,ГруппаПродукта,СтавкаНДС,СпособДоставки,АдресПолучения,АдресДоставки", Контрагент, Договор, Услуга, ГруппаПродукта, Договор.СтавкаНДС, СпособДоставки, ТекСтрока.АдресПолучения, ТекСтрока.АдресДоставки);
			//Иначе
			// rarus tenkam 14.10.2019 mantis 14442 --- 
				СтруктураОтбора = Новый Структура("Контрагент,ДоговорКонтрагента,НоменклатураУслуги,ГруппаПродукта,СтавкаНДС,АдресПолучения,АдресДоставки", Контрагент, Договор, Услуга, ГруппаПродукта, Договор.СтавкаНДС, ТекСтрока.АдресПолучения, ТекСтрока.АдресДоставки);
			//КонецЕсли;	// rarus tenkam 14.10.2019 mantis 14442 + 
			
			СтруктураСведений = РегистрыСведений.Scan_МатрицаТарифовПоДоставкеИзделий.ПолучитьПоследнее(ДатаЗаписи, СтруктураОтбора); 
			СуммаСтарое = СтруктураСведений.Сумма;
			Записывать = Ложь;
			//Введено значение, а старое отсутствует
			Если ЗначениеЗаполнено(ТекСтрока.Цена) И СуммаСтарое = 0 Тогда 
				Записывать = Истина; 
			КонецЕсли; 
			//Значение стерто, а старое значение было введено
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Цена) И СуммаСтарое <> 0 Тогда 
				Записывать = Истина; 
			КонецЕсли; 
			//Введено значение и было введено старое
			Если ЗначениеЗаполнено(ТекСтрока.Цена) И СуммаСтарое <> 0 Тогда
				//Значение изменилось
				Если ТекСтрока.Цена <> СуммаСтарое Тогда 
					Записывать = Истина; 
				КонецЕсли; 
			КонецЕсли; 
			Если Записывать Тогда
				// rarus tenkam 02.08.2021 mantis 17628 +++
				// тариф действует в рамках дня, если на дату уже есть тариф, 
				// то не добавлять новую запись с тарифом перевозчика, а изменять имеющуюся
				ДатаСуществующейЗаписи = ПолучитьЗаписьДатуВремяАналогичнойЗаписи(ДатаЗаписи, СтруктураОтбора);
				Если ДатаЗаписи <> ДатаСуществующейЗаписи Тогда
					ДатаЗаписи = ДатаСуществующейЗаписи;	
				КонецЕсли;
				// rarus tenkam 02.08.2021 mantis 17628 ---
				
				//Значение суммы изменилось
				ЗаписьРегСведений = РегистрыСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СоздатьМенеджерЗаписи();
				ЗаписьРегСведений.Контрагент	  		= Контрагент;
				ЗаписьРегСведений.ДоговорКонтрагента 	= Договор;
				ЗаписьРегСведений.НоменклатураУслуги    = Услуга;
				ЗаписьРегСведений.ГруппаПродукта    	= ГруппаПродукта;
				ЗаписьРегСведений.СтавкаНДС    			= Договор.СтавкаНДС;
				ЗаписьРегСведений.СпособДоставки    	= СпособДоставки;
				ЗаписьРегСведений.АдресПолучения    	= ТекСтрока.АдресПолучения;
				ЗаписьРегСведений.АдресДоставки    		= ТекСтрока.АдресДоставки;
				
				Если Договор.ВключаетНДС Тогда
					СуммаСНДС = ТекСтрока.Цена;
					Сумма = ТекСтрока.Цена / (100 + Договор.СтавкаНДС.Ставка) * 100;
					СуммаНДС = СуммаСНДС - Сумма;
				Иначе
					СуммаСНДС = ТекСтрока.Цена + (ТекСтрока.Цена / 100 * Договор.СтавкаНДС.Ставка);
					Сумма = ТекСтрока.Цена;
					СуммаНДС = СуммаСНДС - Сумма;
				КонецЕсли;
				ЗаписьРегСведений.Сумма    				= Сумма;
				ЗаписьРегСведений.СуммаНДС    			= СуммаНДС;
				ЗаписьРегСведений.СуммаСНДС				= СуммаСНДС;	
				ЗаписьРегСведений.Период      			= ДатаЗаписи;
				ЗаписьРегСведений.Пользователь 			= ПользователиКлиентСервер.ТекущийПользователь();
				//rarus abrant 07.06.2017 mantis 9146 +++
				Расстояние = ПолучитьРасстояние(ТекСтрока.АдресДоставки, ТекСтрока.АдресПолучения);
				// rarus tenkam 27.12.2018 mantis 13896 +++
				//ЗаписьРегСведений.Стоимость1км			= ?(Расстояние = 0, 0, СуммаСНДС/Расстояние);
				ЗаписьРегСведений.Стоимость1км			= ?(Расстояние = 0, 0, Сумма/Расстояние);
				// rarus tenkam 27.12.2018 mantis 13896 ---
				//rarus abrant 07.06.2017 mantis 9146 ---
						
				Попытка
					ЗаписьРегСведений.Записать();
					//rarus tenkam 10.08.2017 mantis 10589 +++
					БылиЗаписи = Истина;
					//rarus tenkam 10.08.2017 mantis 10589 ---
					
				Исключение
					//rarus FominskiyAS 24.04.2019  mantis 14191 +++
					//Сообщить(НСтр("ru = 'Ошибка записи цены тарифа в регистр сведений'"));
					Сообщить(НСтр("ru = 'Ошибка записи цены тарифа в регистр сведений'; en = 'Action failed'"));
					//rarus FominskiyAS 24.04.2019  mantis 14191 --- 
					Отказ = Истина;
				КонецПопытки; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	//rarus tenkam 10.08.2017 mantis 10589 +++
	Если БылиЗаписи Тогда
		//rarus FominskiyAS 19.04.2019  mantis 14191 +++
		//Сообщить("Запущен фоновый пересчет тарифов.");
		Сообщить(НСтр("ru = 'Запущен фоновый пересчет тарифов.'; en = 'Tariff recalculation'"));
		//rarus FominskiyAS 19.04.2019  mantis 14191 ---  
		ПараметрыФоновогоЗадания = Новый Массив;
		//ПараметрыФоновогоЗадания.Добавить("Изменение тарифов перевозчиков");
		// rarus tenkam 24.08.2021 mantis 17628 +++
		//ПараметрыФоновогоЗадания.Добавить(ДатаУстановкиТарифа);
		СтруктураПараметров = Новый Структура;
		МассивСпособовДоставки = Новый Массив;
		МассивСпособовДоставки.Добавить(СпособДоставки);
		СтруктураПараметров.Вставить("СпособДоставки", МассивСпособовДоставки);
		Если ГруппаПродукта = ПредопределенноеЗначение("Справочник.Scan_ГруппыПродуктов.ТранспортныеСредства") Тогда
			МассивЛогистическихТипов = Новый Массив;
			Для Каждого ТекЭлемент Из НайденныеЛогистическиеТипы Цикл
				МассивЛогистическихТипов.Добавить(ТекЭлемент.ЛогистическийТип);
			КонецЦикла;
			МассивКолесныхФормул = Новый Массив;
			Для Каждого ТекЭлемент Из НайденныеКолесныеФормулы Цикл
				МассивКолесныхФормул.Добавить(ТекЭлемент.КолеснаяФормула);
			КонецЦикла;
			СтруктураПараметров.Вставить("ЛогистическийТип", МассивЛогистическихТипов);
			СтруктураПараметров.Вставить("КолеснаяФормула", МассивКолесныхФормул);			
		КонецЕсли;
		СтруктураАдресов = ПолучитьМассивыСАдресами();
		СтруктураПараметров.Вставить("АдресПолучения", СтруктураАдресов.МассивАдресовПолучения);
		СтруктураПараметров.Вставить("АдресДоставки", СтруктураАдресов.МассивАдресовДоставки);		
		СтруктураПараметров.Вставить("ДатаУстановкиТарифа", ДатаУстановкиТарифа);		
		ПараметрыФоновогоЗадания.Добавить(СтруктураПараметров);
		// rarus tenkam 24.08.2021 mantis 17628 ---
		
		ФоновыеЗадания.Выполнить("Scan_Тарифы.ПересчитатьДоставкуПолнуюЛьготную", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор,	"Пересчет полной и льготной доставки");	
	КонецЕсли;
	//rarus tenkam 10.08.2017 mantis 10589 ---

КонецПроцедуры

&НаКлиенте
Процедура ГруппаПродуктаПриИзменении(Элемент)
	//Если Объект.ТаблицаЛогистическихАдресов.Количество() <> 0 Тогда
	//	Объект.ТаблицаЛогистическихАдресов.Очистить();	
	//КонецЕсли;
	
	Если ГруппаПродукта = ПредопределенноеЗначение("Справочник.Scan_ГруппыПродуктов.ТранспортныеСредства") Тогда
		Элементы.КолесныеФормулы.Видимость = Истина;
		Элементы.ЛогистическиеТипы.Видимость = Истина;
		Элементы.СпособДоставки.Видимость = Истина;
		ЗаполнитьЛогистическиеТипы();
		ЗаполнитьКолесныеФормулы();
	// rarus tenkam 14.10.2019 mantis 14442 +++ 
	//ИначеЕсли ГруппаПродукта = ПредопределенноеЗначение("Справочник.Scan_ГруппыПродуктов.ДизельныеЭлектростанции") Тогда
	//	Элементы.КолесныеФормулы.Видимость = Ложь;
	//	Элементы.ЛогистическиеТипы.Видимость = Ложь;
	//	Элементы.СпособДоставки.Видимость = Истина;
	//	ЛогистическиеТипы.Очистить();
	//	КолесныеФормулы.Очистить();
	// rarus tenkam 14.10.2019 mantis 14442 ---
	Иначе
		Элементы.КолесныеФормулы.Видимость = Ложь;
		Элементы.ЛогистическиеТипы.Видимость = Ложь;
		Элементы.СпособДоставки.Видимость = Ложь;
		СпособДоставки = ПредопределенноеЗначение("Перечисление.Scan_СпособыДоставкиПродуктов.ПустаяСсылка");
		ЛогистическиеТипы.Очистить();
		КолесныеФормулы.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛогистическиеТипы()
	ЛогистическиеТипы.Очистить();
	ВыборкаТипов = Справочники.Scan_ТипыПродуктовЛогистика.Выбрать();
	Пока ВыборкаТипов.Следующий() Цикл
		НоваяСтрока = ЛогистическиеТипы.Добавить();
		НоваяСтрока.ЛогистическийТип = ВыборкаТипов.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолесныеФормулы()
	КолесныеФормулы.Очистить();
	ВыборкаФормул = Справочники.Scan_КолесныеФормулыИзделий.Выбрать();
	Пока ВыборкаФормул.Следующий() Цикл
		НоваяСтрока = КолесныеФормулы.Добавить();
		НоваяСтрока.КолеснаяФормула = ВыборкаФормул.Ссылка;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура КолесныеФормулыВыбратьВсе(Команда)
	Для Каждого ТекСтрока Из КолесныеФормулы Цикл
		ТекСтрока.Выбрано = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КолесныеФормулыУбратьФлажки(Команда)
	Для Каждого ТекСтрока Из КолесныеФормулы Цикл
		ТекСтрока.Выбрано = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЛогТипыСнятьФлажки(Команда)
	Для Каждого ТекСтрока Из ЛогистическиеТипы Цикл
		ТекСтрока.Выбрано = Ложь;
	КонецЦикла;     
КонецПроцедуры

&НаКлиенте
Процедура ЛогТипыУстановитьФлажки(Команда)
	Для Каждого ТекСтрока Из ЛогистическиеТипы Цикл
		ТекСтрока.Выбрано = Истина;
	КонецЦикла;   
КонецПроцедуры

//rarus tenkam 16.02.2017 mantis 7177 ---

//rarus abrant 07.06.2017 mantis 9146 +++
&НаСервере
Функция ПолучитьРасстояние(АдресДоставки, АдресПолучения)
	
	РасстояниеМеждуАдресами = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_РасстояниеМеждуАдресами.Расстояние
		|ИЗ
		|	РегистрСведений.Scan_РасстояниеМеждуАдресами КАК Scan_РасстояниеМеждуАдресами
		|ГДЕ
		|	(Scan_РасстояниеМеждуАдресами.АдресПолучения = &АдресПолучения
		|				И Scan_РасстояниеМеждуАдресами.АдресДоставки = &АдресДоставки
		|			ИЛИ Scan_РасстояниеМеждуАдресами.АдресДоставки = &АдресПолучения
		|				И Scan_РасстояниеМеждуАдресами.АдресПолучения = &АдресДоставки)";
	
	Запрос.УстановитьПараметр("АдресДоставки", АдресДоставки);
	Запрос.УстановитьПараметр("АдресПолучения", АдресПолучения);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		РасстояниеМеждуАдресами = Результат[0].Расстояние; 
	КонецЕсли;
	
	Возврат РасстояниеМеждуАдресами;
	
КонецФункции
//rarus abrant 07.06.2017 mantis 9146 ---

//rarus tenkam 25.09.2017 mantis 10589 +++
&НаКлиенте
Процедура ТаблицаЛогистическихАдресовЦенаПриИзменении(Элемент)
	ТекЦена = Элементы.ТаблицаЛогистическихАдресов.ТекущиеДанные.Цена;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("АдресПолучения", Элементы.ТаблицаЛогистическихАдресов.ТекущиеДанные.АдресДоставки);
	ПараметрыОтбора.Вставить("АдресДоставки", Элементы.ТаблицаЛогистическихАдресов.ТекущиеДанные.АдресПолучения);
	НайденныеСтроки = Объект.ТаблицаЛогистическихАдресов.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		ТекСтрока.Цена = ТекЦена;
	КонецЦикла;                   	
КонецПроцедуры
//rarus tenkam 25.09.2017 mantis 10589 ---      

&НаСервере
Функция ПолучитьЗаписьДатуВремяАналогичнойЗаписи(ДатаЗаписи, СтруктураОтбора)	// rarus tenkam 02.08.2021 mantis 17628 +++
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_МатрицаТарифовПоДоставкеИзделий.Период КАК Период
		|ИЗ
		|	РегистрСведений.Scan_МатрицаТарифовПоДоставкеИзделий КАК Scan_МатрицаТарифовПоДоставкеИзделий
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Scan_МатрицаТарифовПоДоставкеИзделий.Период, ДЕНЬ) = &НачалоДня
		|	И Scan_МатрицаТарифовПоДоставкеИзделий.АдресПолучения = &АдресПолучения
		|	И Scan_МатрицаТарифовПоДоставкеИзделий.АдресДоставки = &АдресДоставки";
	
	Запрос.УстановитьПараметр("АдресДоставки", СтруктураОтбора.АдресДоставки);
	Запрос.УстановитьПараметр("АдресПолучения", СтруктураОтбора.АдресПолучения);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаЗаписи));
	Если СтруктураОтбора.Свойство("ГруппаПродукта") Тогда
		Запрос.Текст = Запрос.Текст + "	И Scan_МатрицаТарифовПоДоставкеИзделий.ГруппаПродукта = &ГруппаПродукта";
		Запрос.УстановитьПараметр("ГруппаПродукта", СтруктураОтбора.ГруппаПродукта);
	КонецЕсли;
	Если СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
		Запрос.Текст = Запрос.Текст + "	И Scan_МатрицаТарифовПоДоставкеИзделий.ДоговорКонтрагента = &ДоговорКонтрагента";
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураОтбора.ДоговорКонтрагента);
	КонецЕсли;
	Если СтруктураОтбора.Свойство("КолеснаяФормула") Тогда
		Запрос.Текст = Запрос.Текст + "	И Scan_МатрицаТарифовПоДоставкеИзделий.КолеснаяФормула = &КолеснаяФормула";
		Запрос.УстановитьПараметр("КолеснаяФормула", СтруктураОтбора.КолеснаяФормула);
	КонецЕсли;
	Если СтруктураОтбора.Свойство("Контрагент") Тогда
		Запрос.Текст = Запрос.Текст + "	И Scan_МатрицаТарифовПоДоставкеИзделий.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент", СтруктураОтбора.Контрагент);
	КонецЕсли;
	Если СтруктураОтбора.Свойство("ЛогистическийТип") Тогда
		Запрос.Текст = Запрос.Текст + "	И Scan_МатрицаТарифовПоДоставкеИзделий.ЛогистическийТип = &ЛогистическийТип";
		Запрос.УстановитьПараметр("ЛогистическийТип", СтруктураОтбора.ЛогистическийТип);
	КонецЕсли;
	Если СтруктураОтбора.Свойство("НоменклатураУслуги") Тогда
		Запрос.Текст = Запрос.Текст + "	И Scan_МатрицаТарифовПоДоставкеИзделий.НоменклатураУслуги = &НоменклатураУслуги";
		Запрос.УстановитьПараметр("НоменклатураУслуги", СтруктураОтбора.НоменклатураУслуги);
	КонецЕсли;
	Если СтруктураОтбора.Свойство("СпособДоставки") Тогда
		Запрос.Текст = Запрос.Текст + "	И Scan_МатрицаТарифовПоДоставкеИзделий.СпособДоставки = &СпособДоставки";
		Запрос.УстановитьПараметр("СпособДоставки", СтруктураОтбора.СпособДоставки);
	КонецЕсли;  		
	Если СтруктураОтбора.Свойство("СтавкаНДС") Тогда
		Запрос.Текст = Запрос.Текст + "		И Scan_МатрицаТарифовПоДоставкеИзделий.СтавкаНДС = &СтавкаНДС";
		Запрос.УстановитьПараметр("СтавкаНДС", СтруктураОтбора.СтавкаНДС);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Период;
	КонецЕсли;
	
	Возврат ДатаЗаписи;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции // rarus tenkam 02.08.2021 mantis 17628 ---

&НаСервере
Функция ПолучитьМассивыСАдресами() // rarus tenkam 31.08.2021 mantis 17628 +++
	МассивАдресовПолучения = Новый Массив;
	МассивАдресовДоставки = Новый Массив;
	
	Для Каждого ТекСтрока Из Объект.ТаблицаЛогистическихАдресов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			Если МассивАдресовПолучения.Найти(ТекСтрока.АдресПолучения) = Неопределено Тогда
				МассивАдресовПолучения.Добавить(ТекСтрока.АдресПолучения);
			КонецЕсли;
			Если МассивАдресовДоставки.Найти(ТекСтрока.АдресДоставки) = Неопределено Тогда
				МассивАдресовДоставки.Добавить(ТекСтрока.АдресДоставки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("МассивАдресовПолучения", МассивАдресовПолучения);
	ВозвращаемаяСтруктура.Вставить("МассивАдресовДоставки", МассивАдресовДоставки);
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции // rarus tenkam 31.08.2021 mantis 17628 ---

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент) // Rarus tenkam 17.05.2022 mantis 17628 +++
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры   // Rarus tenkam 17.05.2022 mantis 17628 ---

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере() // Rarus tenkam 17.05.2022 mantis 17628 +++
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Договор) Тогда
		ВладелецДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Владелец");
		Если ВладелецДоговора <> Контрагент Тогда
			Договор = ПредопределенноеЗначение("Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры