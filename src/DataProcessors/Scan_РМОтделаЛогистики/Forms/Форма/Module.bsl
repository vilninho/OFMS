// rarus tenkam 17.04.2020 mantis 15715 +++

&НаКлиенте
Перем мВыбраныСсылкиИзделияНаМестахХранения;
&НаКлиенте
Перем мВыбраныСсылкиПолныйСписокИзделий;
&НаКлиенте
Перем мВыбраныСсылкиБУ;                
&НаКлиенте
Перем мВыбраныСсылкиДемоТест;        
&НаКлиенте
Перем мВыбраныСсылкиАренда;
&НаКлиенте
Перем мВыбраныGUIDРаспределениеЗаявок;
&НаКлиенте
Перем мВыбраныСсылкиМестаХранения;
&НаКлиенте
Перем мВыбраныСсылкиАрхив;
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//rarus agar 31.08.2020 15696 ++
	МассивТиповПродуктовНадстроекИУслуг = Справочники.Scan_ТипыПродуктов.ПолучитьТипыПродуктовНадстроекИУслуг();
	СписокИзделияНаМестахХранения.Параметры.УстановитьЗначениеПараметра("МассивТиповПродуктовНадстроекИУслуг", МассивТиповПродуктовНадстроекИУслуг);
	СписокПолныйСписокИзделий.Параметры.УстановитьЗначениеПараметра("МассивТиповПродуктовНадстроекИУслуг", МассивТиповПродуктовНадстроекИУслуг);
	СписокБУ.Параметры.УстановитьЗначениеПараметра("МассивТиповПродуктовНадстроекИУслуг", МассивТиповПродуктовНадстроекИУслуг);
	СписокДемоТест.Параметры.УстановитьЗначениеПараметра("МассивТиповПродуктовНадстроекИУслуг", МассивТиповПродуктовНадстроекИУслуг);
	СписокАренда.Параметры.УстановитьЗначениеПараметра("МассивТиповПродуктовНадстроекИУслуг", МассивТиповПродуктовНадстроекИУслуг);
	СписокАрхив.Параметры.УстановитьЗначениеПараметра("МассивТиповПродуктовНадстроекИУслуг", МассивТиповПродуктовНадстроекИУслуг);
	СписокНадстройки.Параметры.УстановитьЗначениеПараметра("МассивТиповПродуктовНадстроекИУслуг", МассивТиповПродуктовНадстроекИУслуг);
	//rarus agar 31.08.2020 15696 --
	
	//rarus agar 13.11.2020 16526 ++
	//rarus agar 19.01.2021 16981 ++
	РазрешатьУстанавливатьЗапретНаИзменениеСкладаПродажи = Scan_ПраваИНастройки.Scan_Право("РазрешатьУстанавливатьЗапретНаИзменениеСкладаПродажи");
	Элементы.СписокИзделияНаМестахХраненияЗапретитьИзменятьСкладПродажи.Видимость = РазрешатьУстанавливатьЗапретНаИзменениеСкладаПродажи;
	Элементы.СписокПолныйСписокИзделийЗапретитьИзменятьСкладПродажи.Видимость     = РазрешатьУстанавливатьЗапретНаИзменениеСкладаПродажи;
	//rarus agar 19.01.2021 16981 --
	//rarus agar 13.11.2020 16526 --
	ПанельЗаявкиНаДействие_ДобавитьКомандыПечати(); // rarus kabany 14.05.2021 17657 +++
	Scan_СборСтатистики.Scan_ПриОткрытииОбработки(РеквизитФормыВЗначение("Объект").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьЗакладокПоНастройкам();
	
	Scan_ВспомогательныеФункцииКлиент.ПроверитьПользователяПортала();	// 15695
	ИнициализироватьПеременныеИПараметрыСписков();
	ОбновитьКоличествоПоТекущейСтранице();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьСписокЗаявокНаДействие" Тогда 
		Элементы.СписокЗаявкиНаДействие.Обновить(); 
	ИначеЕсли ИмяСобытия = "ОбновитьСписокЗаявокПеревозчику" Тогда 
		Элементы.СписокЗаявкиПеревозчику.Обновить();		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице();	
	ТЗ = СписокВТЗнаСервере(ИмяСписка);
	Для Каждого СтрокаТЗ Из ТЗ Цикл	
		ДобавитьВМассивВыбранныхПоТекущейСтранице(СтрокаТЗ);
	КонецЦикла;
	ОбновитьКоличествоВыбранныхПоТекущейСтранице();
	УстановитьМассивВыбранныхПоТекущейСтранице();
КонецПроцедуры

&НаСервере
Функция СписокВТЗнаСервере(ИмяСписка)

	ТаблицаРезультат = ДинамическийСписокВТаблицуЗначений(Элементы[ИмяСписка]);
	
	КолонкаСсылок = ?(ИмяСписка = "СписокРаспределениеЗаявок", ТаблицаРезультат.ВыгрузитьКолонку("GuidСтроки"), ТаблицаРезультат.ВыгрузитьКолонку("Продукт"));
		
	Возврат КолонкаСсылок;
КонецФункции

&НаКлиенте
Процедура СнятьФлажки(Команда)

	ОчиститьМассивВыбранныхПоТекущейСтранице();
	ОбновитьКоличествоВыбранныхПоТекущейСтранице();
	УстановитьМассивВыбранныхПоТекущейСтранице();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице();	
	ИмяФлаг = ИмяСписка + "Флаг";
	Если Поле.Имя = ИмяФлаг Тогда
		ВключитьОтключитьФлагВМассивеВыбранныхПоТекущейСтранице(ВыбраннаяСтрока);
	ИначеЕсли Поле.Имя = "СписокРаспределениеЗаявокИзделие" Тогда
		СсылкаИзделие = ПолучитьСсылкуНаИзделие(ВыбраннаяСтрока);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",СсылкаИзделие);
		ПараметрыФормы.Вставить("Доступность",Ложь);
		ОткрытьФорму("Справочник.Scan_Изделия.ФормаОбъекта",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = "СписокРаспределениеЗаявокЗаявкаПеревозчику"  Тогда
		Документ = ПолучитьСсылкуНаДокументЗаявкаПеревозчику(ВыбраннаяСтрока);
		Если Документ <> Неопределено Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Доступность",Ложь);
			ПараметрыФормы.Вставить("Ключ",Документ);
			ОткрытьФорму("Документ.Scan_ЗаявкаПеревозчику.ФормаОбъекта",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		КонецЕсли;
	ИначеЕсли Поле.Имя = "СписокРаспределениеЗаявокЗаявкаНаДействие" Тогда
		СсылкаДокумент = ПолучитьСсылкуНаДокумент(ВыбраннаяСтрока);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Доступность",Ложь);
		ПараметрыФормы.Вставить("Ключ",СсылкаДокумент);
		ОткрытьФорму("Документ.Scan_ЗаявкаНаДействие.ФормаОбъекта",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	ИначеЕсли ТекущаяСтраницаСоСпискомИзделий() Тогда
		ПоказатьЗначение(,ПолучитьСсылкуНаПродукт(ВыбраннаяСтрока));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзделияПриАктивизацииСтроки(Элемент)
	
	ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице();
	ТекущаяСтрокаСписка = Элементы[ИмяСписка].ТекущаяСтрока;
	
	Если ТекущаяСтрокаСписка = Неопределено Тогда
		//Возврат;
		//ТекущееИзделие = ПредопределенноеЗначение("Справочник.Scan_Изделия.ПустаяСсылка");
		ПанельЗаявкиНаДействие.Отбор.Элементы.Очистить();
		ПанельИнформацияПоАКБ.Отбор.Элементы.Очистить();
		ПанельИсторияПеремещений.Отбор.Элементы.Очистить();		
	Иначе
		ТекущееИзделие = ПолучитьСсылкуНаПродукт(ТекущаяСтрокаСписка);		
	КонецЕсли;    	
		
	Если Элементы.КП_ПанельЗаявокНаДействие.Пометка Тогда		
		ПанельЗаявкиНаДействие.Отбор.Элементы.Очистить();
		ЭлементОтбора = ПанельЗаявкиНаДействие.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПродуктыПоЗаявке.Изделие");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущееИзделие;
	КонецЕсли;
	
	Если Элементы.КП_ИнформацияПоАКБ.Пометка Тогда
		ПанельИнформацияПоАКБ.Отбор.Элементы.Очистить();
		ЭлементОтбора = ПанельИнформацияПоАКБ.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Изделие");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущееИзделие;
		ОбновлениеУсловногоОформленияСостояний();
	КонецЕсли;
	
	Если Элементы.КП_ИсторияПеремещений.Пометка Тогда
		//rarus kabany 02.04.2021 17222 +++
		//ПанельИсторияПеремещений.Отбор.Элементы.Очистить();
		//ЭлементОтбора = ПанельИсторияПеремещений.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Изделие");
		//ЭлементОтбора.Использование  = Истина;
		//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		//ЭлементОтбора.ПравоеЗначение = ТекущееИзделие;
		СформироватьИсториюПеремещений(ТекущееИзделие);
		//rarus kabany 02.04.2021 17222 ---
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)	// rarus tenkam 25.05.2021 mantis 17812 +
	УстановитьОформлениеЯчейкиЦветКабины(Строки);
КонецПроцедуры

&НаСервере
Процедура ОбновлениеУсловногоОформленияСостояний()
	Scan_УправлениеДиалогомСервер.СформироватьУсловноеОформление(ЭтаФорма, Справочники.Scan_СостоянияАКБ,"Состояние",,,"ПанельИнформацияПоАКБ");		
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьПоступлениеНаСклад(Команда)
	мВыбраныСсылки = ПолучитьМассивВыбранныхПоТекущейСтранице();
	
	Если НЕ ЗначениеЗаполнено(мВыбраныСсылки) Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select the product'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивИзделий", мВыбраныСсылки); 
	ПараметрыФормы.Вставить("ХозОперация", ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПоступлениеНаСклад"));
	
	Описание = Новый ОписаниеОповещения("ОкончаниеОчиститьВыбранныеСсылки",ЭтотОбъект);
	ОткрытьФорму("Документ.Scan_ДвижениеИзделий.Форма.ФормаДокумента",ПараметрыФормы,,,,,Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
////rarus kabany 02.04.2021 17222 +++
&НаКлиенте
Процедура ИсторияПеремещенийОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)	
СтандартнаяОбработка = Ложь;
Данные = ПолучитьНастройкиРасшифровки(Расшифровка);
ПоказатьЗначение(,Данные);	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиРасшифровки(Расшифровка)
Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);

Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") тогда
	ЭлементРасшифровки = Данные.Элементы[Расшифровка];
Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
Возврат Поле.Значение;
КонецЦикла;
КонецЕсли;
КонецЕсли;

КонецФункции
////rarus kabany 02.04.2021 17222 ---

&НаКлиенте
Процедура ОткрытьМониторПродаж(Команда) //rarus bonmak 17664 01.06.2021 ++
	ПараметрыОткрытия = Новый Структура("ОткрытьБезПродажиКлиенту", Истина);
	ОткрытьФорму("Обработка.Scan_МониторыПродаж.Форма",ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры //rarus bonmak 17664 01.06.2021 --

//// СМЕНА СТРАНИЦ

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)	
	Если НЕ ТекущаяСтраницаСоСпискомИзделий() Тогда
		УправлениеВидимостьюКоманднойПанелиИзделий(Ложь);
	Иначе
		ИмяКнопки = ПолучитьКнопкуДействиеИПоискТекущейСтраницы();
		ЗначениеПометки = Элементы[ИмяКнопки].Пометка;
		УправлениеВидимостьюКоманднойПанелиИзделий(ЗначениеПометки);
		
		СписокИзделияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
	ЗакрытьКонтрольныеТочкиИПоискПоКритериям();
	ЗакрытьВспомогательныеПанели();
	ОчиститьОтборыСписковИзделий();	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонтрольныеТочкиИПоискПоКритериям()
	Если Элементы.КП_КонтрольныеТочки.Пометка Тогда
		// Снимем пометку, закроем группу
		Элементы.КП_КонтрольныеТочки.Пометка = Ложь;
		
		Элементы.ИзделияНаМестахХранения_КонтрольныеТочки.Видимость = Ложь;
		Элементы.ПолныйСписокИзделий_КонтрольныеТочки.Видимость = Ложь;
		Элементы.БУ_КонтрольныеТочки.Видимость = Ложь;
		Элементы.ДемоТест_КонтрольныеТочки.Видимость = Ложь;
		Элементы.Аренда_КонтрольныеТочки.Видимость = Ложь;
		Элементы.МестаХранения_КонтрольныеТочки.Видимость = Ложь;
		Элементы.Архив_КонтрольныеТочки.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.КП_ПоискПоКритериям.Пометка Тогда
		// Снимем пометку, закроем группу
		Элементы.КП_ПоискПоКритериям.Пометка = Ложь;
		
		Элементы.ИзделияНаМестахХранения_ПоискПоКритериям.Видимость = Ложь;
		Элементы.ПолныйСписокИзделий_ПоискПоКритериям.Видимость = Ложь;
		Элементы.БУ_ПоискПоКритериям.Видимость = Ложь;
		Элементы.ДемоТест_ПоискПоКритериям.Видимость = Ложь;
		Элементы.Аренда_ПоискПоКритериям.Видимость = Ложь;
		Элементы.МестаХранения_ПоискПоКритериям.Видимость = Ложь;
		Элементы.Архив_ПоискПоКритериям.Видимость = Ложь;
		
		ПоискПоКритериям_ПолеВвода = "";
		ПоискПоКритериям_КритерийПоиска = ПредопределенноеЗначение("Перечисление.Scan_КритерииПоискаАРМ.ПустаяСсылка");
		ПоискПоКритериям_ПолеС = "";
		ПоискПоКритериям_ПолеПо = "";
		ПоискПоКритериям_ПолеОтбораПоПериоду = ""
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВспомогательныеПанели()
	Если Элементы.КП_ПанельЗаявокНаДействие.Пометка Тогда
		// Снимем пометку, закроем группу
		Элементы.КП_ПанельЗаявокНаДействие.Пометка = Ложь;
		
		Элементы.ИзделияНаМестахХранения_ПанельЗаявкиНаДействие.Видимость = Ложь;
		Элементы.ПолныйСписокИзделий_ПанельЗаявкиНаДействие.Видимость = Ложь;
		Элементы.БУ_ПанельЗаявкиНаДействие.Видимость = Ложь;
		Элементы.ДемоТест_ПанельЗаявкиНаДействие.Видимость = Ложь;
		Элементы.Аренда_ПанельЗаявкиНаДействие.Видимость = Ложь;
		Элементы.МестаХранения_ПанельЗаявкиНаДействие.Видимость = Ложь;
		Элементы.Архив_ПанельЗаявкиНаДействие.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.КП_ИнформацияПоАКБ.Пометка Тогда
		// Снимем пометку, закроем группу
		Элементы.КП_ИнформацияПоАКБ.Пометка = Ложь;
		
		Элементы.ИзделияНаМестахХранения_ПанельИнформацияПоАКБ.Видимость = Ложь;
		Элементы.ПолныйСписокИзделий_ПанельИнформацияПоАКБ.Видимость = Ложь;
		Элементы.БУ_ПанельИнформацияПоАКБ.Видимость = Ложь;
		Элементы.ДемоТест_ПанельИнформацияПоАКБ.Видимость = Ложь;
		Элементы.Аренда_ПанельИнформацияПоАКБ.Видимость = Ложь;
		Элементы.МестаХранения_ПанельИнформацияПоАКБ.Видимость = Ложь;
		Элементы.Архив_ПанельИнформацияПоАКБ.Видимость = Ложь;
	КонецЕсли;
		
	Если Элементы.КП_ИсторияПеремещений.Пометка Тогда
		// Снимем пометку, закроем группу
		Элементы.КП_ИсторияПеремещений.Пометка = Ложь;
		
		Элементы.ИзделияНаМестахХранения_ПанельИсторияПеремещений.Видимость = Ложь;
		Элементы.ПолныйСписокИзделий_ПанельИсторияПеремещений.Видимость = Ложь;
		Элементы.БУ_ПанельИсторияПеремещений.Видимость = Ложь;
		Элементы.ДемоТест_ПанельИсторияПеремещений.Видимость = Ложь;
		Элементы.Аренда_ПанельИсторияПеремещений.Видимость = Ложь;
		Элементы.МестаХранения_ПанельИсторияПеремещений.Видимость = Ложь;
		Элементы.Архив_ПанельИсторияПеремещений.Видимость = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыСписковИзделий()
	ЭтотОбъект.СписокИзделияНаМестахХранения.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ЭтотОбъект.СписокПолныйСписокИзделий.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ЭтотОбъект.СписокБУ.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ЭтотОбъект.СписокДемоТест.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ЭтотОбъект.СписокАренда.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ЭтотОбъект.СписокМестаХранения.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ЭтотОбъект.СписокАрхив.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

&НаКлиенте
Процедура ИнициализироватьПеременныеИПараметрыСписков()
	
	//// ИЗДДЕЛИЯ НА МЕСТАХ ХРАНЕНИЯ
	мВыбраныСсылкиИзделияНаМестахХранения = Новый Массив;
	ОбновитьКоличествоВыбранныхПоТекущейСтранице("ИзделияНаМестахХранения");
	УстановитьМассивВыбранныхПоТекущейСтранице("ИзделияНаМестахХранения");
	
	//// ПОЛНЫЙ СПИСОК ИЗДЕЛИЙ
	мВыбраныСсылкиПолныйСписокИзделий = Новый Массив;
	ОбновитьКоличествоВыбранныхПоТекущейСтранице("ПолныйСписокИзделий");
	УстановитьМассивВыбранныхПоТекущейСтранице("ПолныйСписокИзделий");
	
	//// Б/У
	мВыбраныСсылкиБУ = Новый Массив;                
	ОбновитьКоличествоВыбранныхПоТекущейСтранице("БУ");
	УстановитьМассивВыбранныхПоТекущейСтранице("БУ");
	
	//// ДЕМО/ТЕСТ
	мВыбраныСсылкиДемоТест = Новый Массив;        
	ОбновитьКоличествоВыбранныхПоТекущейСтранице("ДемоТест");
	УстановитьМассивВыбранныхПоТекущейСтранице("ДемоТест");
	
	//// АРЕНДА
	мВыбраныСсылкиАренда = Новый Массив;
	ОбновитьКоличествоВыбранныхПоТекущейСтранице("Аренда");
	УстановитьМассивВыбранныхПоТекущейСтранице("Аренда");
	
	//// РАСПРЕДЕЛЕНИЕ ЗАЯВОК
	мВыбраныGUIDРаспределениеЗаявок = Новый Массив;
	ОбновитьКоличествоВыбранныхПоТекущейСтранице("РаспределениеЗаявок");
	УстановитьМассивВыбранныхПоТекущейСтранице("РаспределениеЗаявок");
	
	//// МЕСТА ХРАНЕНИЯ
	мВыбраныСсылкиМестаХранения = Новый Массив;
	ОбновитьКоличествоВыбранныхПоТекущейСтранице("МестаХранения");
	УстановитьМассивВыбранныхПоТекущейСтранице("МестаХранения");
	
	//// АРХИВ
	мВыбраныСсылкиАрхив = Новый Массив;
	ОбновитьКоличествоВыбранныхПоТекущейСтранице("Архив");
	УстановитьМассивВыбранныхПоТекущейСтранице("Архив"); 	
	
	// rarus tenkam 07.05.2021 mantis 17715 +++
	//СписокХО = Новый Массив;
	//СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.Доставка"));
	//СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение"));
	//СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство"));
	//СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК"));
	//СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК"));
	//СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК")); 		//rarus tenkam 26.09.2017 mantis 10742 +
	//СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК"));
	//СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК"));
	//
	//СписокИзделияНаМестахХранения.Параметры.УстановитьЗначениеПараметра("СписокХО",СписокХО);
	//СписокПолныйСписокИзделий.Параметры.УстановитьЗначениеПараметра("СписокХО",СписокХО);
	//СписокБУ.Параметры.УстановитьЗначениеПараметра("СписокХО",СписокХО);
	//СписокДемоТест.Параметры.УстановитьЗначениеПараметра("СписокХО",СписокХО);
	//СписокАренда.Параметры.УстановитьЗначениеПараметра("СписокХО",СписокХО);
	//СписокАрхив.Параметры.УстановитьЗначениеПараметра("СписокХО",СписокХО);
	// rarus tenkam 07.05.2021 mantis 17715 ---
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическийСписокПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		Элементы.СписокИзделияНаМестахХранения.Обновить();
		// rarus tenkam 17.03.2021 mantis 17455 +++
		Если Элементы.ИзделияНаМестахХранения_ПанельЗаявкиНаДействие.Видимость Тогда
			Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.Обновить();
		КонецЕсли;
		// rarus tenkam 17.03.2021 mantis 17455 ---
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		Элементы.СписокПолныйСписокИзделий.Обновить();
		// rarus tenkam 17.03.2021 mantis 17455 +++
		Если Элементы.ПолныйСписокИзделий_ПанельЗаявкиНаДействие.Видимость Тогда
			Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.Обновить();
		КонецЕсли;
		// rarus tenkam 17.03.2021 mantis 17455 ---
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		Элементы.СписокБУ.Обновить();
		// rarus tenkam 17.03.2021 mantis 17455 +++
		Если Элементы.БУ_ПанельЗаявкиНаДействие.Видимость Тогда
			Элементы.БУ_ЗаявкиНаДействие.Обновить();
		КонецЕсли;
		// rarus tenkam 17.03.2021 mantis 17455 ---
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		Элементы.СписокДемоТест.Обновить();
		// rarus tenkam 17.03.2021 mantis 17455 +++
		Если Элементы.ДемоТест_ПанельЗаявкиНаДействие.Видимость Тогда
			Элементы.ДемоТест_ПанельЗаявкиНаДействие.Обновить();
		КонецЕсли;
		// rarus tenkam 17.03.2021 mantis 17455 ---
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		Элементы.СписокАренда.Обновить();
		// rarus tenkam 17.03.2021 mantis 17455 +++
		Если Элементы.Аренда_ПанельЗаявкиНаДействие.Видимость Тогда
			Элементы.Аренда_ЗаявкиНаДействие.Обновить();
		КонецЕсли;
		// rarus tenkam 17.03.2021 mantis 17455 ---
	ИначеЕсли ИмяСтраницы = "ЗаявкиНаДействие" Тогда
		Элементы.СписокЗаявкиНаДействие.Обновить();
	ИначеЕсли ИмяСтраницы = "ЗаявкиПеревозчику" Тогда
		Элементы.СписокЗаявкиПеревозчику.Обновить();
	ИначеЕсли ИмяСтраницы = "ПеремещенияИзделий" Тогда
		Элементы.СписокПеремещенияИзделий.Обновить();	 		
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		Элементы.СписокРаспределениеЗаявок.Обновить();
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		Элементы.СписокМестаХранения.Обновить();
		// rarus tenkam 17.03.2021 mantis 17455 +++
		Если Элементы.МестаХранения_ПанельЗаявкиНаДействие.Видимость Тогда
			Элементы.МестаХранения_ЗаявкиНаДействие.Обновить();
		КонецЕсли;
		// rarus tenkam 17.03.2021 mantis 17455 ---
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		Элементы.СписокАрхив.Обновить();
		// rarus tenkam 17.03.2021 mantis 17455 +++
		Если Элементы.Архив_ПанельЗаявкиНаДействие.Видимость Тогда
			Элементы.Архив_ЗаявкиНаДействие.Обновить();
		КонецЕсли;
		// rarus tenkam 17.03.2021 mantis 17455 ---
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыбранныхПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		мВыбраны = мВыбраныСсылкиИзделияНаМестахХранения;
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		мВыбраны = мВыбраныСсылкиПолныйСписокИзделий;
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		мВыбраны = мВыбраныСсылкиБУ;
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		мВыбраны = мВыбраныСсылкиДемоТест;
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		мВыбраны = мВыбраныСсылкиАренда;
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		мВыбраны = мВыбраныGUIDРаспределениеЗаявок;
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		мВыбраны = мВыбраныСсылкиМестаХранения;
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		мВыбраны = мВыбраныСсылкиАрхив;
	КонецЕсли;
	
	Возврат мВыбраны;
КонецФункции

&НаКлиенте
Процедура ОчиститьМассивВыбранныхПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		мВыбраныСсылкиИзделияНаМестахХранения.Очистить();
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		мВыбраныСсылкиПолныйСписокИзделий.Очистить();
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		мВыбраныСсылкиБУ.Очистить();
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		мВыбраныСсылкиДемоТест.Очистить();
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		мВыбраныСсылкиАренда.Очистить();
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		мВыбраныGUIDРаспределениеЗаявок.Очистить();
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		мВыбраныСсылкиМестаХранения.Очистить();
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		мВыбраныСсылкиАрхив.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМассивВыбранныхПоТекущейСтранице(ЭлементДобавления, ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		Если мВыбраныСсылкиИзделияНаМестахХранения.Найти(ЭлементДобавления) = Неопределено Тогда
			мВыбраныСсылкиИзделияНаМестахХранения.Добавить(ЭлементДобавления);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		Если мВыбраныСсылкиПолныйСписокИзделий.Найти(ЭлементДобавления) = Неопределено Тогда
			мВыбраныСсылкиПолныйСписокИзделий.Добавить(ЭлементДобавления);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		Если мВыбраныСсылкиБУ.Найти(ЭлементДобавления) = Неопределено Тогда
			мВыбраныСсылкиБУ.Добавить(ЭлементДобавления);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		Если мВыбраныСсылкиДемоТест.Найти(ЭлементДобавления) = Неопределено Тогда
			мВыбраныСсылкиДемоТест.Добавить(ЭлементДобавления);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		Если мВыбраныСсылкиАренда.Найти(ЭлементДобавления) = Неопределено Тогда
			мВыбраныСсылкиАренда.Добавить(ЭлементДобавления);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		Если мВыбраныGUIDРаспределениеЗаявок.Найти(ЭлементДобавления) = Неопределено Тогда
			мВыбраныGUIDРаспределениеЗаявок.Добавить(ЭлементДобавления);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		Если мВыбраныСсылкиМестаХранения.Найти(ЭлементДобавления) = Неопределено Тогда
			мВыбраныСсылкиМестаХранения.Добавить(ЭлементДобавления);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		Если мВыбраныСсылкиАрхив.Найти(ЭлементДобавления) = Неопределено Тогда
			мВыбраныСсылкиАрхив.Добавить(ЭлементДобавления);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМассивВыбранныхПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	мВыбраны = ПолучитьМассивВыбранныхПоТекущейСтранице(ИмяСтраницы);
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		СписокИзделияНаМестахХранения.Параметры.УстановитьЗначениеПараметра("мВыбраны",мВыбраны);
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		СписокПолныйСписокИзделий.Параметры.УстановитьЗначениеПараметра("мВыбраны",мВыбраны);
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		СписокБУ.Параметры.УстановитьЗначениеПараметра("мВыбраны",мВыбраны);
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		СписокДемоТест.Параметры.УстановитьЗначениеПараметра("мВыбраны",мВыбраны);
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		СписокАренда.Параметры.УстановитьЗначениеПараметра("мВыбраны",мВыбраны);
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		СписокРаспределениеЗаявок.Параметры.УстановитьЗначениеПараметра("мВыбраны",мВыбраны);
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		СписокМестаХранения.Параметры.УстановитьЗначениеПараметра("мВыбраны",мВыбраны);
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		СписокАрхив.Параметры.УстановитьЗначениеПараметра("мВыбраны",мВыбраны);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоВыбранныхПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли; 	
		
	мВыбраны = ПолучитьМассивВыбранныхПоТекущейСтранице(ИмяСтраницы);
	КоличествоВыбранных = мВыбраны.Количество();
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		КоличествоВыбранныхИзделияНаМестахХранения = КоличествоВыбранных;
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		КоличествоВыбранныхПолныйСписокИзделий = КоличествоВыбранных;
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		КоличествоВыбранныхБУ = КоличествоВыбранных;
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		КоличествоВыбранныхДемоТест = КоличествоВыбранных;
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		КоличествоВыбранныхАренда = КоличествоВыбранных;
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		КоличествоВыбранныхРаспределениеЗаявок = КоличествоВыбранных;
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		КоличествоВыбранныхМестаХранения = КоличествоВыбранных;
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		КоличествоВыбранныхАрхив = КоличествоВыбранных;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяСпискаПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли; 	
		
	ИмяСписка = "";
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		ИмяСписка = "СписокИзделияНаМестахХранения";
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		ИмяСписка = "СписокПолныйСписокИзделий";
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		ИмяСписка = "СписокБУ";
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		ИмяСписка = "СписокДемоТест";
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		ИмяСписка = "СписокАренда";
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		ИмяСписка = "СписокРаспределениеЗаявок";
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		ИмяСписка = "СписокМестаХранения";
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		ИмяСписка = "СписокАрхив";
	КонецЕсли;
	Возврат ИмяСписка;
КонецФункции

&НаКлиенте
Функция ПолучитьИмяСпискаЗаявокНаДействиеПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли; 	
		
	ИмяСписка = "";
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		ИмяСписка = "ИзделияНаМестахХранения_ЗаявкиНаДействие";
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		ИмяСписка = "ПолныйСписокИзделий_ЗаявкиНаДействие";
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		ИмяСписка = "БУ_ЗаявкиНаДействие";
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		ИмяСписка = "ДемоТест_ЗаявкиНаДействие";
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		ИмяСписка = "Аренда_ЗаявкиНаДействие";
	ИначеЕсли ИмяСтраницы = "ЗаявкиНаДействие" Тогда
		ИмяСписка = "СписокЗаявкиНаДействие";
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		ИмяСписка = "МестаХранения_ЗаявкиНаДействие";
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		ИмяСписка = "Архив_ЗаявкиНаДействие";
	КонецЕсли;
	Возврат ИмяСписка;
КонецФункции

&НаКлиенте
Процедура ВключитьОтключитьФлагВМассивеВыбранныхПоТекущейСтранице(ВыбраннаяСтрока, ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли; 	   		
		
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		//	мИндекс = мВыбраныСсылкиИзделияНаМестахХранения.Найти(ВыбраннаяСтрока);
		//
		//	Если мИндекс = Неопределено Тогда
		//		мВыбраныСсылкиИзделияНаМестахХранения.Добавить(ВыбраннаяСтрока);
		//	Иначе 
		//		мВыбраныСсылкиИзделияНаМестахХранения.Удалить(мИндекс);
		//  КонецЕсли;
		ПродуктСсылка = ПолучитьСсылкуНаПродукт(ВыбраннаяСтрока);
		мИндекс = мВыбраныСсылкиИзделияНаМестахХранения.Найти(ПродуктСсылка);
		Если мИндекс = Неопределено Тогда
			мВыбраныСсылкиИзделияНаМестахХранения.Добавить(ПродуктСсылка);
		Иначе 
			мВыбраныСсылкиИзделияНаМестахХранения.Удалить(мИндекс);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		ПродуктСсылка = ПолучитьСсылкуНаПродукт(ВыбраннаяСтрока);
		мИндекс = мВыбраныСсылкиПолныйСписокИзделий.Найти(ПродуктСсылка);
		Если мИндекс = Неопределено Тогда
			мВыбраныСсылкиПолныйСписокИзделий.Добавить(ПродуктСсылка);
		Иначе 
			мВыбраныСсылкиПолныйСписокИзделий.Удалить(мИндекс);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		ПродуктСсылка = ПолучитьСсылкуНаПродукт(ВыбраннаяСтрока);
		мИндекс = мВыбраныСсылкиБУ.Найти(ПродуктСсылка);
		Если мИндекс = Неопределено Тогда
			мВыбраныСсылкиБУ.Добавить(ПродуктСсылка);
		Иначе 
			мВыбраныСсылкиБУ.Удалить(мИндекс);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		ПродуктСсылка = ПолучитьСсылкуНаПродукт(ВыбраннаяСтрока);
		мИндекс = мВыбраныСсылкиДемоТест.Найти(ПродуктСсылка);
		Если мИндекс = Неопределено Тогда
			мВыбраныСсылкиДемоТест.Добавить(ПродуктСсылка);
		Иначе 
			мВыбраныСсылкиДемоТест.Удалить(мИндекс);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		ПродуктСсылка = ПолучитьСсылкуНаПродукт(ВыбраннаяСтрока);
		мИндекс = мВыбраныСсылкиАренда.Найти(ПродуктСсылка);
		Если мИндекс = Неопределено Тогда
			мВыбраныСсылкиАренда.Добавить(ПродуктСсылка);
		Иначе 
			мВыбраныСсылкиАренда.Удалить(мИндекс);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		СсылкаGuid = ПолучитьСсылкуGuid(ВыбраннаяСтрока);
		мИндекс = мВыбраныGUIDРаспределениеЗаявок.Найти(СсылкаGuid);
		Если мИндекс = Неопределено Тогда
			мВыбраныGUIDРаспределениеЗаявок.Добавить(СсылкаGuid);
		Иначе 
			мВыбраныGUIDРаспределениеЗаявок.Удалить(мИндекс);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		ПродуктСсылка = ПолучитьСсылкуНаПродукт(ВыбраннаяСтрока);
		мИндекс = мВыбраныСсылкиМестаХранения.Найти(ПродуктСсылка);
		Если мИндекс = Неопределено Тогда
			мВыбраныСсылкиМестаХранения.Добавить(ПродуктСсылка);
		Иначе 
			мВыбраныСсылкиМестаХранения.Удалить(мИндекс);
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		ПродуктСсылка = ПолучитьСсылкуНаПродукт(ВыбраннаяСтрока);
		мИндекс = мВыбраныСсылкиАрхив.Найти(ПродуктСсылка);
		Если мИндекс = Неопределено Тогда
			мВыбраныСсылкиАрхив.Добавить(ПродуктСсылка);
		Иначе 
			мВыбраныСсылкиАрхив.Удалить(мИндекс);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьКоличествоВыбранныхПоТекущейСтранице(ИмяСтраницы);
	УстановитьМассивВыбранныхПоТекущейСтранице(ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыделенныхПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		мВыбраны = Элементы.СписокИзделияНаМестахХранения.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		мВыбраны = Элементы.СписокПолныйСписокИзделий.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		мВыбраны = Элементы.СписокБУ.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		мВыбраны = Элементы.СписокДемоТест.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		мВыбраны = Элементы.СписокАренда.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "РаспределениеЗаявок" Тогда
		мВыбраны = Элементы.СписокРаспределениеЗаявок.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		мВыбраны = Элементы.СписокМестаХранения.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		мВыбраны = Элементы.СписокАрхив.ВыделенныеСтроки;
	КонецЕсли;
	
	Возврат ПолучитьМассивСсылокНаПродукт(мВыбраны);
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьЗакладокПоНастройкам()
	МассивНастроек = ПолучитьМассивНастроекНаСервере();
	Для Каждого ТекНастройка Из МассивНастроек Цикл		
		Элементы[ТекНастройка.Закладка].Видимость = ТекНастройка.Значение;
	КонецЦикла;
	
	// Если нет закладок с изделиями, то скроем командную панель и отожмем кнопку "Действие и поиск"
	Если НЕ Элементы.ИзделияНаМестахХранения.Видимость 
		И НЕ Элементы.ПолныйСписокИзделий.Видимость
		И НЕ Элементы.БУ.Видимость
		И НЕ Элементы.ДемоТест.Видимость
		И НЕ Элементы.Аренда.Видимость
		И НЕ Элементы.МестаХранения.Видимость
		И НЕ Элементы.Архив.Видимость
		И Элементы.ИзделияНаМестахХранения_ДействияИПоиск.Пометка Тогда
		
		УправлениеВидимостьюКоманднойПанелиИзделий(Ложь);
		ИзменитьПометкуКнопокДействиеИПоиск(Ложь);
		ЗакрытьКонтрольныеТочкиИПоискПоКритериям();
		ЗакрытьВспомогательныеПанели();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивНастроекНаСервере()
	Возврат Обработки.Scan_РМОтделаЛогистики.ПолучитьНастройкиОтображенияЗакладок();
	
КонецФункции

// rarus kabany 17.05.2021 17657 +++
&НаКлиенте
Процедура ЗаявкаНаДействиеВидимостьКомандПечати(Элемент, МножественноеВыделение = Ложь)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		СписокКомандПечати = Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.КоманднаяПанель.ПодчиненныеЭлементы.ИзделияНаМестахХранения_ЗаявкиНаДействиеГруппаПечать.ПодчиненныеЭлементы; 	
		//ГруппаКомандПечати = Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.КоманднаяПанель.ПодчиненныеЭлементы.ИзделияНаМестахХранения_ЗаявкиНаДействиеГруппаПечать; // rarus kabany 18.05.2021 17657 +
	Иначе
		СписокКомандПечати = Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.КоманднаяПанель.ПодчиненныеЭлементы.ПолныйСписокИзделий_ЗаявкиНаДействиеГруппаПечать.ПодчиненныеЭлементы; 		
		//ГруппаКомандПечати = Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.КоманднаяПанель.ПодчиненныеЭлементы.ПолныйСписокИзделий_ЗаявкиНаДействиеГруппаПечать; // rarus kabany 18.05.2021 17657 +
	КонецЕсли;
	мКомандПечати = Новый Массив;
	
	Для каждого коман из СписокКомандПечати ЦИКЛ	
		мКомандПечати.Добавить(Новый Структура("ИмяКоманды, Видимость", коман.ИмяКоманды , коман.Видимость));	
	КонецЦикла;
	
	Если НЕ МножественноеВыделение Тогда
		мКомандПечати = Scan_ВспомогательныеФункцииСервер.ЗаявкаНаДействиеОтображениеКомандПечатиОтХозОпераций(мКомандПечати, Элемент.ТекущаяСтрока);
		//ГруппаКомандПечати.Видимость = Истина; // rarus kabany 18.05.2021 17657 +
		ФПечатнаяФормаДоступна = Ложь;
		Для каждого элем из СписокКомандПечати ЦИКЛ 		
			Для каждого коман из мКомандПечати ЦИКЛ			
				Если элем.ИмяКоманды = коман.ИмяКоманды  Тогда				
					элем.видимость = коман.Видимость; 							
					// rarus kabany 18.05.2021 17657 +++
					Если элем.видимость Тогда
						ФПечатнаяФормаДоступна = Истина;
					КонецЕсли;						
				КонецЕсли;
				Если элем.ИмяКоманды = "ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна" Тогда
					элем.Видимость = Истина;	
				КонецЕсли;
				// rarus kabany 18.05.2021 17657 ---
			КонецЦикла;	
		КонецЦикла;
		
		Для каждого элем из СписокКомандПечати ЦИКЛ
			Если элем.ИмяКоманды = "ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна" и ФПечатнаяФормаДоступна  Тогда
				элем.видимость = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		// rarus kabany 18.05.2021 17657 +++
		Для каждого элем из СписокКомандПечати ЦИКЛ 		
			элем.видимость = Ложь; 		
			Если элем.ИмяКоманды = "ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна" Тогда
				элем.видимость = Истина;
			КонецЕсли;
		КонецЦикла;
		// rarus kabany 18.05.2021 17657 ---
	КонецЕсли;
	
КонецПроцедуры
// rarus kabany 17.05.2021 17657 ---

&НаСервереБезКонтекста
Процедура УстановитьОформлениеЯчейкиЦветКабины(Строки)	// rarus tenkam 25.05.2021 mantis 17812 +
	
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	Для Каждого СтрокаСписка Из Строки Цикл
		Если Не СтрокаСписка.Значение.Данные.ПродуктЦветКабиныПТС.Пустая() Тогда
			ЦветФона = СтрокаСписка.Значение.Данные.ПродуктЦветКабиныПТС.ЦветФона.Получить();
			Если ЦветФона <> ЧерныйЦвет И НЕ СтрокаСписка.Значение.Оформление.Получить("ПродуктЦветКабиныПТС") = Неопределено Тогда
				СтрокаСписка.Значение.Оформление["ПродуктЦветКабиныПТС"].УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;   	
КонецПроцедуры

#КонецОбласти

#Область СобытияКомандФормы
&НаКлиенте
Процедура КорректироватьЗаявку(Команда)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
		
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		мВыбраны = Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		мВыбраны = Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		мВыбраны = Элементы.БУ_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		мВыбраны = Элементы.ДемоТест_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		мВыбраны = Элементы.Аренда_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ЗаявкиНаДействие" Тогда
		мВыбраны = Элементы.СписокЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		мВыбраны = Элементы.МестаХранения_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		мВыбраны = Элементы.Архив_ЗаявкиНаДействие.ВыделенныеСтроки;
	КонецЕсли;
	
	ИмяСписка = ПолучитьИмяСпискаЗаявокНаДействиеПоТекущейСтранице(ИмяСтраницы);	// rarus tenkam 17.03.2021 mantis 17455 +
	Для Каждого ТекСтрока Из мВыбраны Цикл
		Scan_ВспомогательныеФункцииКлиент.ОбработатьИзменениеЗаявкиНаДействие(Истина, ТекСтрока, ЭтаФорма, ИмяСписка); 	// rarus tenkam 17.03.2021 mantis 17455 + (ИмяСписка)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЗаявку(Команда)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
		
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		мВыбраны = Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		мВыбраны = Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		мВыбраны = Элементы.БУ_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		мВыбраны = Элементы.ДемоТест_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		мВыбраны = Элементы.Аренда_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ЗаявкиНаДействие" Тогда
		мВыбраны = Элементы.СписокЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		мВыбраны = Элементы.МестаХранения_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		мВыбраны = Элементы.Архив_ЗаявкиНаДействие.ВыделенныеСтроки;
	КонецЕсли;
	
	ИмяСписка = ПолучитьИмяСпискаЗаявокНаДействиеПоТекущейСтранице(ИмяСтраницы);	// rarus tenkam 17.03.2021 mantis 17455 +
	Для Каждого ТекСтрока Из мВыбраны Цикл
		Scan_ВспомогательныеФункцииКлиент.ОбработатьИзменениеЗаявкиНаДействие(Ложь, ТекСтрока, ЭтаФорма, ИмяСписка);	// rarus tenkam 17.03.2021 mantis 17455 + (ИмяСписка)
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КоманднаяПанельИзделий

/// ПОИСК ПО КРИТЕРИЯМ

&НаКлиенте
Процедура КП_ПоискПоКритериям(Команда)
	Элементы.КП_ПоискПоКритериям.Пометка = НЕ Элементы.КП_ПоискПоКритериям.Пометка;
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя; 	
	Элементы[ИмяСтраницы + "_ПоискПоКритериям"].Видимость = Элементы.КП_ПоискПоКритериям.Пометка;

	Если Элементы.КП_ПоискПоКритериям.Пометка Тогда		
		ПоискПоКритериям_ТумблерПоиск = "0";
		НастроитьОтображениеПоискаПоТумблеру(); 
	Иначе
		ОчиститьОтборыСпискаПоТекущейСтранице();
		ПоискПоКритериям_ПолеВвода = "";
		ПоискПоКритериям_КритерийПоиска = ПредопределенноеЗначение("Перечисление.Scan_КритерииПоискаАРМ.ПустаяСсылка");
		ПоискПоКритериям_ПолеС = "";
		ПоискПоКритериям_ПолеПо = "";
		ПоискПоКритериям_ПолеОтбораПоПериоду = ""
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КП_ПоискПоКритериям_Подобрать(Команда)
	// Проверка заполнения данных
	Если ПоискПоКритериям_ТумблерПоиск = "0" Тогда	// Поиск по списку		
		Если НЕ ЗначениеЗаполнено(ПоискПоКритериям_КритерийПоиска) Тогда
			Сообщить(НСтр("ru = 'Выберите критерий поиска!'; en = 'Select your search criteria!'"));
			Возврат;
		КонецЕсли;
		
		Если СокрЛП(ПоискПоКритериям_ПолеВвода) = "" Тогда
			Сообщить(НСтр("ru = 'Список данных для поиска пустой!'; en = 'The search data list is empty!'"));
			Возврат;
		КонецЕсли;
	Иначе	// Поиск по коридору значений
		Если НЕ ЗначениеЗаполнено(ПоискПоКритериям_ПолеОтбораПоПериоду) Тогда
			Сообщить(НСтр("ru = 'Выберите критерий поиска!'; en = 'Select your search criteria!'"));
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ПоискПоКритериям_ПолеПо) = ТипЗнч(ПоискПоКритериям_ПолеС) 
			И ПоискПоКритериям_ПолеПо <= ПоискПоКритериям_ПолеС Тогда
			Сообщить(НСтр("ru = 'Конечное значение коридора периода не может быть меньше начального!'; en = 'Final value cannot be lower that starting point of the period corridor!'"));
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	СнятьФлажки(Команды.СнятьФлажки); //rarus agar 22.03.2021 17501 +-
	
	ПоискПоКритериям_Подобрать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоКритериям_Подобрать()
	
	ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице();
	
	ОчиститьОтборыСпискаПоТекущейСтранице();
	ОбъектНастройки = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
	
	Если ПоискПоКритериям_ТумблерПоиск = "0" Тогда	// Поиск по списку
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоискПоКритериям_ПолеВвода, Символы.ПС, Истина);
		
		Если ПоискПоКритериям_КритерийПоиска = ПредопределенноеЗначение("Перечисление.Scan_КритерииПоискаАРМ.НомерИзделия") Тогда
			ЛевоеЗначение = "ПродуктНомерИзделия";
		ИначеЕсли ПоискПоКритериям_КритерийПоиска = ПредопределенноеЗначение("Перечисление.Scan_КритерииПоискаАРМ.VIN") Тогда
			ЛевоеЗначение = "ПродуктVIN";
			//rarus agar 06.11.2020 16526 ++
		ИначеЕсли ПоискПоКритериям_КритерийПоиска = ПредопределенноеЗначение("Перечисление.Scan_КритерииПоискаАРМ.НомерЗаказа") Тогда
			ЛевоеЗначение = "ЗаказНаЗавод.Наименование";
			
			МассивПодстрокКопия = Новый ФиксированныйМассив(МассивПодстрок);
			Для Каждого ПодстрокаКопия Из МассивПодстрокКопия Цикл
				ДобавляемаяПодстрока = "";
				
				Если Лев(ПодстрокаКопия, 1) = "0" Тогда
					ФорматнаяСтрока = "ЧДЦ=0; ЧГ=0";
				Иначе
					ФорматнаяСтрока = "ЧЦ=9; ЧДЦ=0; ЧВН=; ЧГ=0";
				КонецЕсли;
				
				Попытка
					ДобавляемаяПодстрока = Формат(Число(ПодстрокаКопия), ФорматнаяСтрока);
				Исключение КонецПопытки;
				
				Если Не ПустаяСтрока(ДобавляемаяПодстрока)
					И   МассивПодстрок.Найти(ДобавляемаяПодстрока) = Неопределено 
					Тогда
					МассивПодстрок.Добавить(ДобавляемаяПодстрока);
				КонецЕсли;
			КонецЦикла;
			//rarus agar 06.11.2020 16526 --
		КонецЕсли;
		
		НовыйОтбор = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование  = Истина;
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = МассивПодстрок;
	Иначе	// Поиск по коридору значений
		
		Если ПоискПоКритериям_ПолеОтбораПоПериоду = "ПродуктНомерИзделия" ИЛИ
			ПоискПоКритериям_ПолеОтбораПоПериоду = "ПродуктVIN" Тогда
			
			СообщениеОбОшибке = "";
			ОтборУстановлен = Scan_ОбщегоНазначенияКлиентСервер.УстановитьОтборДинамическогоСпискаПоНомеруОбъекта(ЭтотОбъект[ИмяСписка], ПоискПоКритериям_ПолеОтбораПоПериоду, ПоискПоКритериям_ПолеС, ПоискПоКритериям_ПолеПо,,СообщениеОбОшибке);
			Если НЕ ОтборУстановлен Тогда
				Сообщить(СообщениеОбОшибке);
			КонецЕсли;
		Иначе
			НовыйОтбор = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.Использование  = Истина;
			НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПоискПоКритериям_ПолеОтбораПоПериоду);
			НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			НовыйОтбор.ПравоеЗначение = ПоискПоКритериям_ПолеС;
			
			НовыйОтбор = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.Использование  = Истина;
			НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПоискПоКритериям_ПолеОтбораПоПериоду);
			НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			НовыйОтбор.ПравоеЗначение = ПоискПоКритериям_ПолеПо;  
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КП_ПоискПоКритериям_Отменить(Команда)
	ОчиститьОтборыСпискаПоТекущейСтранице();
	ПоискПоКритериям_ПолеВвода = "";
	// rarus agar 02.02.2021 17091 ++
	ПоискПоКритериям_ПолеС = "";
	ПоискПоКритериям_ПолеПо = "";
	// rarus agar 02.02.2021 17091 --
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыСпискаПоТекущейСтранице()
	ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице();
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеПоискаПоТумблеру()
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя; 	
	ИмяГруппы = ИмяСтраницы + "_ПоискПоКритериям";
	
	Если ПоискПоКритериям_ТумблерПоиск = "0" Тогда	// Поиск по списку
		Элементы[ИмяГруппы + "_ПоСписку"].Видимость = Истина;
		Элементы[ИмяГруппы + "_ПоКоридоруЗначений"].Видимость = Ложь;
		ПоискПоКритериям_КритерийПоиска = ПредопределенноеЗначение("Перечисление.Scan_КритерииПоискаАРМ.НомерИзделия");
		
		ПоискПоКритериям_ПолеС = "";
		ПоискПоКритериям_ПолеПо = "";
		ПоискПоКритериям_ПолеОтбораПоПериоду = ""
	Иначе	// Поиск по коридору значений
		Элементы[ИмяГруппы + "_ПоСписку"].Видимость = Ложь;
		Элементы[ИмяГруппы + "_ПоКоридоруЗначений"].Видимость = Истина;
		
		ПоискПоКритериям_ПолеВвода = "";
		ПоискПоКритериям_КритерийПоиска = ПредопределенноеЗначение("Перечисление.Scan_КритерииПоискаАРМ.ПустаяСсылка");
		
		ИнициализироватьДанныеДляПоискаПоКоридоруЗначений();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоКритериям_ТумблерПоискПриИзменении(Элемент)
	ОчиститьОтборыСпискаПоТекущейСтранице();
	НастроитьОтображениеПоискаПоТумблеру();	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДанныеДляПоискаПоКоридоруЗначений(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли;
	ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице(ИмяСтраницы);	
	ИмяГруппы = ИмяСтраницы + "_ПоискПоКритериям";
	
	МассивКолонокОтбора = Новый Массив;
	СписокЗаголовковКолонокОтбора = Новый СписокЗначений;
	
	ОтборСКД = Неопределено;
	Для Каждого ЭлементКомпоновщика Из ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтборСКД = ЭлементКомпоновщика;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЭлементыОтбора = ОтборСКД.Элементы;
	Для Каждого ТекЭлемент Из ЭлементыОтбора Цикл
		Если ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Дата") ИЛИ
			ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") ИЛИ
			ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Строка") ИЛИ
			ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Число") Тогда
			
			МассивКолонокОтбора.Добавить(ТекЭлемент.ЛевоеЗначение);
			СписокЗаголовковКолонокОтбора.Добавить(ТекЭлемент.ПредставлениеПользовательскойНастройки);
		КонецЕсли;
	КонецЦикла;
	
	Элементы[ИмяГруппы + "_ПолеОтбораПоПериоду"].СписокВыбора.ЗагрузитьЗначения(МассивКолонокОтбора);
	Для Каждого ЭлементСпискаВыбора из Элементы[ИмяГруппы + "_ПолеОтбораПоПериоду"].СписокВыбора Цикл		
		ЭлементСпискаВыбора.Представление = СписокЗаголовковКолонокОтбора.НайтиПоИдентификатору(ЭлементСпискаВыбора.ПолучитьИдентификатор()%Элементы[ИмяГруппы + "_ПолеОтбораПоПериоду"].СписокВыбора.Количество());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоКритериям_КритерийПоискаПриИзменении(Элемент)
	ПоискПоКритериям_ПолеВвода = "";
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоКритериям_ПолеОтбораПоПериодуПриИзменении(Элемент)
	ЗаполнитьТипыПолейПериода(ПоискПоКритериям_ПолеОтбораПоПериоду);
	ПоискПоКритериям_ПолеС = "";
	ПоискПоКритериям_ПолеПо = "";
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипыПолейПериода(ИмяЛевогоЗначения)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице(ИмяСтраницы);
	
	ОтборСКД = Неопределено;
	Для Каждого ЭлементКомпоновщика Из ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтборСКД = ЭлементКомпоновщика;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЭлементыОтбора = ОтборСКД.Элементы;
	Для Каждого ТекЭлемент Из ЭлементыОтбора Цикл
		Если ТекЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЛевогоЗначения) Тогда
			МассивТипов = Новый  Массив;
			ТипПравогоЗначения = ТипЗнч(ТекЭлемент.ПравоеЗначение);
			Если ТипПравогоЗначения = Тип("СтандартнаяДатаНачала") Тогда
				ТипПравогоЗначения = Тип("Дата");
			КонецЕсли;
			МассивТипов.Добавить(ТипПравогоЗначения);
			ОписаниеТиповПоля = Новый ОписаниеТипов(МассивТипов);
			Элементы[ИмяСтраницы +"_ПоискПоКритериям_ПолеС"].ВыбиратьТип = Ложь;     
			Элементы[ИмяСтраницы +"_ПоискПоКритериям_ПолеС"].ОграничениеТипа = ОписаниеТиповПоля;
			Элементы[ИмяСтраницы +"_ПоискПоКритериям_ПолеПо"].ВыбиратьТип = Ложь;
			Элементы[ИмяСтраницы +"_ПоискПоКритериям_ПолеПо"].ОграничениеТипа = ОписаниеТиповПоля;
			Возврат;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

//// ЗАПОЛНИТЬ ЗАЯВКУ

&НаКлиенте
Процедура КП_ЗаполнитьЗаявкуНаДействие(Команда)
	мВыбраныСсылки = ПолучитьМассивВыбранныхПоТекущейСтранице();
	
	Если НЕ ЗначениеЗаполнено(мВыбраныСсылки) Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select the product'"));
		Возврат;
	КонецЕсли;
	
	Если ЕстьИзделияВАрхиве(мВыбраныСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Изделия", мВыбраныСсылки); 
	
	Описание = Новый ОписаниеОповещения("ОкончаниеОчиститьВыбранныеСсылки",ЭтотОбъект);
	ОткрытьФорму("Документ.Scan_ЗаявкаНаДействие.Форма.ФормаДокумента",ПараметрыФормы,,,,,Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьИзделияВАрхиве(мВыбраныСсылки)
	
	ЕстьИзделияВАрхиве = Ложь;
	Для каждого ТекИзделие Из мВыбраныСсылки Цикл
		фПродуктВАрхиве = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(ТекИзделие, Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве"));
		Если ЗначениеЗаполнено(фПродуктВАрхиве) Тогда
			Сообщить(НСтр("ru = 'Выбран продукт: '; en = 'Selected product: '") +ТекИзделие+ НСтр("ru = ', который находится в архиве. Документ не может быть создан""'; en = ' is in archive. Document cannot be created'"));
			ЕстьИзделияВАрхиве = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ЕстьИзделияВАрхиве;	
КонецФункции

&НаКлиенте
Процедура ОкончаниеОчиститьВыбранныеСсылки(СтруктураВозврДанные,ДополнительныеПараметры) Экспорт	
	ОчиститьМассивВыбранныхПоТекущейСтранице();
	ОбновитьКоличествоВыбранныхПоТекущейСтранице();
	УстановитьМассивВыбранныхПоТекущейСтранице();	
КонецПроцедуры

//// ЗАПОЛНИТЬ ЗАЯВКУ НА СЕРВИСНЫЕ РАБОТЫ

&НаКлиенте
Процедура КП_ЗаполнитьЗаявкуНаСервис(Команда)
	мВыбраныСсылки = ПолучитьМассивВыбранныхПоТекущейСтранице();
	
	Если НЕ ЗначениеЗаполнено(мВыбраныСсылки) Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select the product'"));
		Возврат;
	КонецЕсли;
	
	Если ЕстьИзделияВАрхиве(мВыбраныСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("Изделия", мВыбраныСсылки);
	
	Описание = Новый ОписаниеОповещения("ОкончаниеОчиститьВыбранныеСсылки",ЭтотОбъект);
	ОткрытьФорму("Обработка.Scan_ВводДанныхПоЗаявкеНаСервис.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , НавигационнаяСсылка, Описание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

//// ЗАПОЛНИТЬ ХАРАКТЕРИСТИКИ АКБ

&НаКлиенте
Процедура КП_ЗаполнитьХарактеристикиАКБ(Команда)
	мВыбраныСсылки = ПолучитьМассивВыбранныхПоТекущейСтранице();
	
	Если мВыбраныСсылки.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Для заполнения характеристик АКБ необходимо выбрать хотя бы один продукт!'; en = 'To add battery characteristics, please select a product!'"));
		Возврат	
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("МассивИзделий", мВыбраныСсылки);
	Описание = Новый ОписаниеОповещения("ОкончаниеОчиститьВыбранныеСсылки",ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.Scan_ДанныеПоАКБИзделий.Форма.ФормаЗаполнения", ПараметрыОткрытия,,,,, Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//// ЗАМЕЧАНИЯ ПО АКТАМ

&НаКлиенте
Процедура КП_ЗамечанияПоАктам(Команда)
	мВыбраныСсылки = ПолучитьМассивВыбранныхПоТекущейСтранице();
	
	Если мВыбраныСсылки.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Для заполнения замечаний по актам необходимо выбрать хотя бы один продукт!'; en = 'Please select a product, to add comments!'")); //rarus bonmak 05.08.2019 14427
		Возврат;
	КонецЕсли;
	
	Если мВыбраныСсылки.Количество() = 1 Тогда
		// Открываем форму элемента	
		ПараметрыИзделия = Новый Структура("Ключ", мВыбраныСсылки[0]);
		ПараметрыИзделия.Вставить("ОткрытьЗамечания",  Истина);
		Описание = Новый ОписаниеОповещения("ОкончаниеОчиститьВыбранныеСсылки",ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Scan_Изделия.Форма.ФормаЭлемента", ПараметрыИзделия,,,,, Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		// Открываем вспомогательную форму			
		ПараметрыОткрытия = Новый Структура("МассивИзделий", мВыбраныСсылки);
		Описание = Новый ОписаниеОповещения("ОкончаниеОчиститьВыбранныеСсылки",ЭтотОбъект);
		
		ОткрытьФорму("Обработка.Scan_РМОтделаЛогистики.Форма.ФормаЗамечанияПоАктам", ПараметрыОткрытия,,,,, Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
КонецПроцедуры

//// ПРИКРЕПИТЬ ПТС

&НаКлиенте
Процедура КП_ПрикрепитьПТС(Команда)
	мВыделенныеСтроки = ПолучитьМассивВыделенныхПоТекущейСтранице();
	
	Если мВыделенныеСтроки.Количество()<> 1 Тогда
		Сообщить(НСтр("ru = 'Для прикрепления ПТС необходимо спозиционироваться на одной строке продукта!'; en = 'To attach PTS please select only one line!'")); //rarus bonmak 05.08.2019 14427
		Возврат;
	КонецЕсли;
	Если мВыделенныеСтроки.Количество() = 1 Тогда
		Изделие = мВыделенныеСтроки[0];
		
		ПараметрыИзделия = Новый Структура("Ключ", Изделие);
		ФормаИзделия = ПолучитьФорму("Справочник.Scan_Изделия.Форма.ФормаЭлемента",ПараметрыИзделия);
		
		ДопПараметры = Новый Структура("Изделие", Изделие);
		ДопПараметры.Вставить("ФормаИзделия", ФормаИзделия);
		
		ОбработчикРезультата = Новый ОписаниеОповещения("ПрикреплениеПТСЗавершение", ЭтотОбъект, ДопПараметры);
		РаботаСФайламиКлиент.ДобавитьФайлы(Изделие, ФормаИзделия.УникальныйИдентификатор, , , ОбработчикРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПрикреплениеПТСЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() <> 0 Тогда
		ДополнительныеПараметры.ФормаИзделия.Открыть();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  ДополнительныеПараметры.Изделие);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ДополнительныеПараметры.ФормаИзделия.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ДополнительныеПараметры.ФормаИзделия, Истина, ДополнительныеПараметры.ФормаИзделия.Окно);
	КонецЕсли;	
КонецФункции

//// ПАНЕЛЬ ЗАЯВОК (НА ДЕЙСТВИЕ)

&НаКлиенте
Процедура КП_ПанельЗаявокНаДействие(Команда)
	Элементы.КП_ПанельЗаявокНаДействие.Пометка = НЕ Элементы.КП_ПанельЗаявокНаДействие.Пометка;
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя; 	
	Элементы[ИмяСтраницы + "_ПанельЗаявкиНаДействие"].Видимость = Элементы.КП_ПанельЗаявокНаДействие.Пометка;
КонецПроцедуры

//// ПАНЕЛЬ ИНФОРМАЦИЯ ПО АКБ

&НаКлиенте
Процедура КП_ИнформацияПоАКБ(Команда)
	Элементы.КП_ИнформацияПоАКБ.Пометка = НЕ Элементы.КП_ИнформацияПоАКБ.Пометка;
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя; 	
	Элементы[ИмяСтраницы + "_ПанельИнформацияПоАКБ"].Видимость = Элементы.КП_ИнформацияПоАКБ.Пометка; 
КонецПроцедуры

//// ПАНЕЛЬ ИСТОРИЯ ПЕРЕМЕЩЕНИЙ

&НаКлиенте
Процедура КП_ИсторияПеремещений(Команда)
	Элементы.КП_ИсторияПеремещений.Пометка = НЕ Элементы.КП_ИсторияПеремещений.Пометка;
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя; 	
	Элементы[ИмяСтраницы + "_ПанельИсторияПеремещений"].Видимость = Элементы.КП_ИсторияПеремещений.Пометка;
	//rarus kabany 07.04.2021 17222 +++
	Если Элементы.КП_ИсторияПеремещений.Пометка Тогда 
		ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице();
		Если Элементы[ИмяСписка].ТекущиеДанные <> неопределено Тогда
			Продукт = ПолучитьСсылкуНаПродукт(Элементы[ИмяСписка].ТекущаяСтрока);
			СформироватьИсториюПеремещений(Продукт);
		КонецЕсли;
	КонецЕсли;
	//rarus kabany 07.04.2021 17222 ---	
КонецПроцедуры

//// КОНТРОЛЬНЫЕ ТОЧКИ

&НаКлиенте
Процедура КП_КонтрольныеТочки(Команда)
	Элементы.КП_КонтрольныеТочки.Пометка = НЕ Элементы.КП_КонтрольныеТочки.Пометка;
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя; 	
	Элементы[ИмяСтраницы + "_КонтрольныеТочки"].Видимость = Элементы.КП_КонтрольныеТочки.Пометка;
	
	ОбновитьСписокКонтрольныхТочек(Элементы.КП_КонтрольныеТочки.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура КП_КонтрольныеТочки_Установить(Команда)
	мВыбраныСсылки = ПолучитьМассивВыбранныхПоТекущейСтранице();
	
	Если мВыбраныСсылки.Количество() <> 0 И ЕстьЗаполненныеКТ() Тогда
		УстановитьЗначенияКонтрольныхТочек(мВыбраныСсылки);	
	КонецЕсли;
КонецПроцедуры

// rarus agar 16.03.2022 15689 ++
&НаКлиенте
Процедура КП_ПечатьДетАкт(Команда)
	
	МассивПродуктов = ПолучитьМассивВыбранныхПоТекущейСтранице();
	Если МассивПродуктов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не удалось сформировать детализированный акт - не выбран ни один продукт'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ПредопределенноеЗначение("Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка"));
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("МассивПродуктов", МассивПродуктов);
	ПараметрыПечати.Вставить("ЗаполнятьКонтрагентов", Ложь);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.Scan_ЗаявкаПеревозчику",         //Менеджер печати
																"ПФ_MXL_ДетализированныйАкт", //Идентификатор
																МассивОбъектов,               //Объекты печати
																ЭтотОбъект,                   //Владелец формы - форма из которой вызывается печать
																ПараметрыПечати);             //Параметры печати - произвольные параметры для передачи в менеджер печати

КонецПроцедуры
// rarus agar 16.03.2022 15689 --

&НаКлиенте
Процедура ОбновитьСписокКонтрольныхТочек(КП_КонтрольныеТочки_Пометка)
	ТаблицаКонтрольныхТочек.Очистить();
	Если НЕ КП_КонтрольныеТочки_Пометка Тогда
		Возврат;
	КонецЕсли;
	
	МассивКТ = ПолучитьМассивКТ();
	
	Для Каждого СтрокаКТ Из МассивКТ Цикл
		СтрокаТаблицы = ТаблицаКонтрольныхТочек.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаКТ);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивКТ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_КонтрольныеТочкиАРМ.КонтрольнаяТочка КАК КонтрольнаяТочка,
	|	Scan_КонтрольныеТочкиАРМ.КонтрольнаяТочка.РеквизитОбъекта КАК РеквизитКТ
	|ИЗ
	|	РегистрСведений.Scan_КонтрольныеТочкиАРМ КАК Scan_КонтрольныеТочкиАРМ
	|ГДЕ
	|	Scan_КонтрольныеТочкиАРМ.АРМОтделаЛогистики = ИСТИНА";
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
КонецФункции

&НаКлиенте
Процедура ТаблицаКонтрольныхТочекПриАктивизацииЯчейки(Элемент)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = ИмяСтраницы + "_ТаблицаКонтрольныхТочек";
	ИмяКолонкиЗначения = ИмяТаблицы + "Значение";
	
	Если Элемент.ТекущийЭлемент.Имя = ИмяКолонкиЗначения Тогда
		ТекДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = ТекДанные.Очистить;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрольныхТочекПередНачаломИзменения(Элемент, Отказ)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = ИмяСтраницы + "_ТаблицаКонтрольныхТочек";
	ИмяКолонкиЗначения = ИмяТаблицы + "Значение";
	
	ТипКонтрольнойТочки = ПолучитьТипКТ(Элементы[ИмяТаблицы].ТекущиеДанные.КонтрольнаяТочка);
	
	Элемент.ПодчиненныеЭлементы[ИмяКолонкиЗначения].ВыбиратьТип = Ложь;
	Элемент.ПодчиненныеЭлементы[ИмяКолонкиЗначения].ОграничениеТипа = ТипКонтрольнойТочки;	
	
	Если ТипКонтрольнойТочки = Новый ОписаниеТипов("Булево") Тогда
		Элемент.ПодчиненныеЭлементы[ИмяКолонкиЗначения].КнопкаОчистки = Истина;
	Иначе
		Элемент.ПодчиненныеЭлементы[ИмяКолонкиЗначения].КнопкаОчистки = Ложь;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрольныхТочекОчиститьПриИзменении(Элемент)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = ИмяСтраницы + "_ТаблицаКонтрольныхТочек";
	ТекДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекДанные.Очистить Тогда
		ТипКонтрольнойТочки = ПолучитьТипКТ(ТекДанные.КонтрольнаяТочка);
		ТекДанные.Значение = ТипКонтрольнойТочки.ПривестиЗначение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрольныхТочекЗначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = ИмяСтраницы + "_ТаблицаКонтрольныхТочек";
	ТекДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");	
	ТекДанные.Значение = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипКТ(КонтрольнаяТочка)
	Если КонтрольнаяТочка.ОбъектМетаданных = "Scan_ЗаказыНаЗавод" Тогда
		РеквизитыСправочника = Метаданные.НайтиПоПолномуИмени("Справочник.Scan_ЗаказыНаЗавод").Реквизиты;
		РеквизитКарточки = РеквизитыСправочника.Найти(КонтрольнаяТочка.РеквизитОбъекта);
	ИначеЕсли КонтрольнаяТочка.ОбъектМетаданных = "Scan_Изделия" Тогда
		РеквизитыСправочника = Метаданные.НайтиПоПолномуИмени("Справочник.Scan_Изделия").Реквизиты;
		РеквизитКарточки = РеквизитыСправочника.Найти(КонтрольнаяТочка.РеквизитОбъекта);
	ИначеЕсли КонтрольнаяТочка.ОбъектМетаданных = "Scan_КлючевыеДатыРегистрСведений" Тогда
		РеквизитКарточки = Метаданные.РегистрыСведений.Scan_КлючевыеДатыПроцессов.Ресурсы.Значение;
	КонецЕсли;
	Возврат РеквизитКарточки.Тип;
КонецФункции

&НаКлиенте
Функция ЕстьЗаполненныеКТ()
		
	ЕстьЗаполненные = Ложь;
	Для Каждого СтрокаКТ Из ТаблицаКонтрольныхТочек Цикл
		Если ЗначениеЗаполнено(СтрокаКТ.Значение) ИЛИ СтрокаКТ.Очистить Тогда 
			ЕстьЗаполненные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьЗаполненные;	
КонецФункции

&НаКлиенте
Процедура УстановитьЗначенияКонтрольныхТочек(МассивСсылок)

	СтруктураКТ = Новый Структура;
	Для Каждого СтрокаКТ Из ТаблицаКонтрольныхТочек Цикл
		Если ЗначениеЗаполнено(СтрокаКТ.Значение) ИЛИ СтрокаКТ.Очистить Тогда
			СтруктураКТ.Вставить(СтрокаКТ.РеквизитКТ, СтрокаКТ.Значение);
		КонецЕсли;
	КонецЦикла;
	
	//rarus vikhle 12.02.2021 mt 17220 +++
	Если СтруктураКТ.Свойство("DD2")  
		И (НЕ СтруктураКТ.Свойство("DDDeviation") ИЛИ НЕ ЗначениеЗаполнено(СтруктураКТ.DDDeviation)) Тогда
		СтруктураКТ.Удалить("DD2");
		СтруктураКТ.Удалить("DDDeviation");
		ВывестиСообщениеПол(Нстр("ru = 'При указании даты DD2 необходимо также указать DD deviation. Дата DD2 не была установлена.'"));
	ИначеЕсли СтруктураКТ.Свойство("DDDeviation") И НЕ Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьDDDeviationВЗаказеНаЗавод") Тогда
		СтруктураКТ.Удалить("DDDeviation");
		//rarus vikhle 12.03.2021 mt 17411 +++
		Если СтруктураКТ.Свойство("DD2") Тогда
			СтруктураКТ.Удалить("DD2");
			ВывестиСообщениеПол(Нстр("ru = 'Нет права на установку DD deviation в заказах на завод. DD2 не была установлена.'"));	
		Иначе	
			ВывестиСообщениеПол(Нстр("ru = 'Нет права на установку DD deviation в заказах на завод.'"));	
		КонецЕсли;	
		//rarus vikhle 12.03.2021 mt 17411 ---
	КонецЕсли;	
	Если СтруктураКТ.Свойство("EDD") И НЕ Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьEDDиRDB") Тогда
		СтруктураКТ.Удалить("EDD");	
		ВывестиСообщениеПол(Нстр("ru = 'Нет права на редактирование ключевой даты <EDD>. Не удалось установить контрольную точку.'"));
	КонецЕсли;
	Если СтруктураКТ.Свойство("RDB") И НЕ Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьEDDиRDB") Тогда
		СтруктураКТ.Удалить("RDB");	
		ВывестиСообщениеПол(Нстр("ru = 'Нет права на редактирование ключевой даты <RDB>. Не удалось установить контрольную точку.'"));
	КонецЕсли;
	Если СтруктураКТ.Свойство("ПродуктВАрхиве") И НЕ Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьДатуПродуктВАрхиве") Тогда
		Сообщить(НСтр("ru = 'Нет права на редактирование ключевой даты <Продукт в архиве>. Не удалось установить контрольную точку.'; en = 'Product in archive can not be set. Not enough permissions!'"));
	КонецЕсли;		
	//rarus vikhle 12.02.2021 mt 17220 ---
	
	//rarus vikhle 04.03.2021 mt 17339 +++
	Если СтруктураКТ.Свойство("DDPriority") И НЕ Scan_ПраваИНастройки.Scan_Право("РазрешитьРедактироватьDDPriorityВЗаказеНаЗавод") Тогда
		СтруктураКТ.Удалить("DDPriority");
		ВывестиСообщениеПол(Нстр("ru = 'Нет права на установку DD priority в заказах на завод.'"));	
	КонецЕсли;	
	//rarus vikhle 04.03.2021 mt 17339 ---
	
	Если НЕ Scan_ПраваИНастройки.Scan_Право("ИспользоватьЗадачиСНакладными") Тогда //rarus bonmak 07.08.2020 14375 ++ добавил условие	
		Если СтруктураКТ.Свойство("БУ") И СтруктураКТ.БУ = Истина Тогда
			ПараметрыФормы = Новый Структура("МассивИзделий", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивСсылок));
			ПараметрыФормы.Вставить("ХозОперация", ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПоступлениеНаСклад"));
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеСозданияПоступленияБУ", ЭтотОбъект, ПараметрыФормы);
			
			ПоказатьВопрос(ОписаниеОповещения, "Необходимо создать поступление на склад?", РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
	КонецЕсли; //rarus bonmak 07.08.2020 14375 --
	
	//rarus vikhle 11.03.2021 mt 17411 +++
	Если СтруктураКТ.Свойство("DD") ИЛИ СтруктураКТ.Свойство("DD2") Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСсылок",МассивСсылок);
		ДопПараметры.Вставить("СтруктураКТ",СтруктураКТ);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаDDИнформер",ЭтотОбъект,ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения,Нстр("ru = 'Удалить заказы из DD-информера?'"),РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьЗначениеКТПродолжение(МассивСсылок,СтруктураКТ);	
	КонецЕсли;	
		
	//ЗаписатьКТПоСтруктуре(МассивСсылок, СтруктураКТ,УдалитьИзDDИнформера);
	//
	//ОчиститьМассивВыбранныхПоТекущейСтранице();
	//ОбновитьКоличествоВыбранныхПоТекущейСтранице();
	//УстановитьМассивВыбранныхПоТекущейСтранице();
	//ОбновитьДинамическийСписокПоТекущейСтранице();
	//ОчиститьЗначенияКонтрольныхТочек();//rarus vikhle 15.02.2021 mt 17209
	//rarus vikhle 11.03.2021 mt 17411 ---
	
КонецПроцедуры

//rarus vikhle 11.03.2021 mt 17411 +++
&НаКлиенте
Процедура УстановитьЗначениеКТПродолжение(МассивСсылок,СтруктураКТ,УдалитьИзDDИнформера = Ложь)
	ЗаписатьКТПоСтруктуре(МассивСсылок, СтруктураКТ,УдалитьИзDDИнформера);
	
	ОчиститьМассивВыбранныхПоТекущейСтранице();
	ОбновитьКоличествоВыбранныхПоТекущейСтранице();
	УстановитьМассивВыбранныхПоТекущейСтранице();
	ОбновитьДинамическийСписокПоТекущейСтранице();
	ОчиститьЗначенияКонтрольныхТочек();	
КонецПроцедуры	
//rarus vikhle 11.03.2021 mt 17411 ---

&НаСервереБезКонтекста
Процедура ЗаписатьКТПоСтруктуре(МассивСсылок, СтруктураКТ,УдалитьИзDDИнформера = Ложь) //rarus vikhle 11.03.2021 mt 17411 добавил УдалитьИзDDИнформера 
	Для Каждого СтрокаИзделия Из МассивСсылок Цикл 
		Для Каждого СтрокаКТ Из СтруктураКТ Цикл
			ЗаписатьКТНаСервере(СтрокаКТ.Ключ, СтрокаКТ.Значение, СтрокаИзделия,УдалитьИзDDИнформера); 
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьКТНаСервере(ТекРеквизит, ЗначениеРеквизита, ИзделиеСсылка,УдалитьИзDDИнформера) 
	
	Если НЕ ЗначениеЗаполнено(ИзделиеСсылка) Тогда			
		Возврат;
	КонецЕсли;

	НайденнаяКТ = Справочники.Scan_КонтрольныеТочкиБизнесПроцессов.НайтиПоРеквизиту("РеквизитОбъекта", ТекРеквизит);
	Если ЗначениеЗаполнено(НайденнаяКТ) Тогда
		ОбъектМетаданных = НайденнаяКТ.ОбъектМетаданных;
	Иначе	
		Возврат;
	КонецЕсли; 	

	Если ОбъектМетаданных = "Scan_ЗаказыНаЗавод" Тогда
		ЗаказНаЗаводСсылка = ИзделиеСсылка.ЗаказНаЗавод;
		Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда
			ЗаказНаЗаводОбъект = ЗаказНаЗаводСсылка.ПолучитьОбъект();
			ЗаказНаЗаводОбъект[ТекРеквизит] = ЗначениеРеквизита;
			ЗаказНаЗаводОбъект.Записать();
			Справочники.Scan_ЗаказыНаЗавод.ЗаписатьЛогКонтрольныхТочек(ЗаказНаЗаводОбъект);
		Иначе
			Сообщить(НСтр("ru='Контрольная точка " + ТекРеквизит + " не была установлена! У продукта " + ИзделиеСсылка + " не указан заказ на завод.'; en = 'Error! No factory order!'"));
		КонецЕсли;
	ИначеЕсли ОбъектМетаданных = "Scan_Изделия" Тогда
		ИзделиеОбъект = ИзделиеСсылка.ПолучитьОбъект();
		Если ТекРеквизит = "ТипПродуктаЛогистический" Тогда	
			ИзделиеОбъект.НеОбновлятьЛогистическиеТипыИз1БД = Истина;
		КонецЕсли;
		
		Если ТекРеквизит = "МодельПродукта" Тогда
			ИзделиеОбъект.НеОбновлятьМоделиИз1БД = Истина;	
		КонецЕсли;
		
		//rarus bonmak 07.08.2020 14375 ++
		Если ТекРеквизит = "БУ" Тогда
			ИзделиеОбъект.ДополнительныеСвойства.Вставить("ОтправитьРеквизитБУВ1БД", ИСТИНА); 	
		КонецЕсли;
		//rarus bonmak 07.08.2020 14375 --
		
		//rarus agar 22.01.2021 16981 ++
		Если  ТекРеквизит = "СкладПродажи" 
			И ИзделиеОбъект.ЗапретИзмененияСкладаПродажи
			Тогда
			ВывестиСообщениеПол(Нстр("ru = 'У продукта %1 установлен запрет на изменение склада продажи. Склад продажи не был изменен.'"),,,,,Строка(ИзделиеСсылка));//rarus vikhle 17.02.2021 mt 17209
			Возврат;
		КонецЕсли;
		//rarus agar 22.01.2021 16981 --
		
		//rarus vikhle 16.02.2021 mt 17209 +++
		Если ТекРеквизит = "СкладПродажи" Тогда
			ТипПродукта 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИзделиеСсылка,"ТипПродукта"); 
			ТипСНадстройкой = Справочники.Scan_ТипыПродуктов.ПолучитьПризнакНаличияНастройки(ТипПродукта);
			Если ТипСНадстройкой = Неопределено Тогда
				ВывестиСообщениеПол(Нстр("ru = 'Не удалось определить наличие надстройки у продукта %1. Склад продажи не был изменен'"),,,,,Строка(ИзделиеСсылка));
				Возврат;
			ИначеЕсли ТипСНадстройкой И Не Scan_ПраваИНастройки.Scan_Право("РазрешитьИзменятьСкладПродажиДляПродуктовСНадстройкой") Тогда
				ВывестиСообщениеПол(Нстр("ru = 'Нет права на изменение склада продажи для продуктов с надстройкой. Склад продажи у продукта %1 не был изменен'"),,,,,Строка(ИзделиеСсылка));
				Возврат;
			ИначеЕсли Не ТипСНадстройкой И Не Scan_ПраваИНастройки.Scan_Право("РазрешитьИзменятьСкладПродажиДляПродуктовБезНадстройки") Тогда
				ВывестиСообщениеПол(Нстр("ru = 'Нет права на изменение склада продажи для продуктов без надстройки. Склад продажи у продукта %1 не был изменен'"),,,,,Строка(ИзделиеСсылка));
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		//rarus vikhle 16.02.2021 mt 17209 ---
		
		ИзделиеОбъект[ТекРеквизит] = ЗначениеРеквизита;
		
		НаименованиеИзделия = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(ИзделиеОбъект,ТекРеквизит);
		Если НаименованиеИзделия <> Неопределено Тогда
			ИзделиеОбъект.Наименование = НаименованиеИзделия;
		КонецЕсли;
		
		ИзделиеОбъект.Записать();
		
	ИначеЕсли ОбъектМетаданных = "Scan_КлючевыеДатыРегистрСведений" Тогда 
		ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты[ТекРеквизит];
		ПеречислениеОбъектКлючДаты = Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(ВидКлючевойДаты);
		Если ПеречислениеОбъектКлючДаты = Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод Тогда
			ЗаказНаЗаводСсылка = ИзделиеСсылка.ЗаказНаЗавод;			
			Если НЕ ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда
				Сообщить(НСтр("ru='Контрольная точка " + ТекРеквизит + " не была установлена! У продукта " + ИзделиеСсылка + " не указан заказ на завод.'; en = 'Error! No factory order!'"));
				Возврат;
			КонецЕсли;			
			СсылкаСпр = ЗаказНаЗаводСсылка;
		ИначеЕсли ПеречислениеОбъектКлючДаты = Перечисления.Scan_ОбъектыКлючевыхДат.Изделие Тогда
			СсылкаСпр = ИзделиеСсылка;
		Иначе
			Возврат;
		КонецЕсли;
		//rarus vikhle 15.02.2021 mt 17209 +- перенес в УстановитьЗначенияКонтрольныхТочек
		//Если ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве И НЕ Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьДатуПродуктВАрхиве") Тогда
		//	Сообщить(НСтр("ru = 'Нет права на редактирование ключевой даты <Продукт в архиве>. Не удалось установить контрольную точку.'; en = 'Product in archive can not be set. Not enough permissions!'"));
		//Иначе 			
		РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(СсылкаСпр, ПеречислениеОбъектКлючДаты, ЗначениеРеквизита, ВидКлючевойДаты);
		//КонецЕсли;
		//rarus vikhle 11.03.2021 mt 17411 +++
		Если УдалитьИзDDИнформера 
			И (ТекРеквизит = "DD" ИЛИ ТекРеквизит = "DD2") Тогда
			УдалитьЗаказИзDDИнформера(СсылкаСпр);
		КонецЕсли;	
		//rarus vikhle 11.03.2021 mt 17411 ---
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеСозданияПоступленияБУ(ЗначениеВозвращаемыхДанных, ДополнительныеПараметры) Экспорт
	Если ЗначениеВозвращаемыхДанных <> Неопределено И ЗначениеВозвращаемыхДанных = КодВозвратаДиалога.Да Тогда
		// Откроем документ поступления на склад
		ОткрытьФорму("Документ.Scan_ДвижениеИзделий.Форма.ФормаДокумента",ДополнительныеПараметры,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗначенияКонтрольныхТочек();
	//rarus vikhle 15.02.2021 mt 17209 +++
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрольныхТочек Цикл
		СтрокаТаблицы.Значение = Неопределено;
		СтрокаТаблицы.Очистить = Ложь;
	КонецЦикла;	
	//rarus vikhle 15.02.2021 mt 17209 ---
КонецПроцедуры

//rarus vikhle 11.03.2021 mt 17411 +++
&НаКлиенте
Процедура ПослеВопросаDDИнформер(Результат,ДопПараметры) Экспорт 
	
	УдалитьИзDDИнформера = Результат = КодВозвратаДиалога.Да;
	УстановитьЗначениеКТПродолжение(ДопПараметры.МассивСсылок,ДопПараметры.СтруктураКТ,УдалитьИзDDИнформера);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УдалитьЗаказИзDDИнформера(ЗаказНаЗавод)
	
	РегистрыСведений.Scan_ОчередьDDИнформера.УдалитьЗаписьПоЗаказу(ЗаказНаЗавод);	
	
КонецПроцедуры
//rarus vikhle 11.03.2021 mt 17411 ---	
	
#КонецОбласти


#Область ОбщиеФункцииДляСписковСИзделиями

//// ДЕЙСТВИЯ И ПОИСК

&НаКлиенте
Процедура ДействияИПоиск(Команда)
	ИмяКнопки = ПолучитьКнопкуДействиеИПоискТекущейСтраницы();
	НовоеЗначениеПометки = НЕ Элементы[ИмяКнопки].Пометка;
	УправлениеВидимостьюКоманднойПанелиИзделий(НовоеЗначениеПометки);
	ИзменитьПометкуКнопокДействиеИПоиск(НовоеЗначениеПометки);
	
	Если НовоеЗначениеПометки = Ложь Тогда
		ЗакрытьКонтрольныеТочкиИПоискПоКритериям();
		ЗакрытьВспомогательныеПанели();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКоманднойПанелиИзделий(Видимость = Неопределено)
	Если Видимость <> Неопределено Тогда
		Элементы.КоманднаяПанельИзделий.Видимость = Видимость;
	Иначе
		Элементы.КоманднаяПанельИзделий.Видимость = НЕ Элементы.КоманднаяПанельИзделий.Видимость;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтраницаСоСпискомИзделий()
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ИзделияНаМестахХранения" 
		ИЛИ Элементы.Страницы.ТекущаяСтраница.Имя = "ПолныйСписокИзделий" 
		ИЛИ Элементы.Страницы.ТекущаяСтраница.Имя = "БУ" 
		ИЛИ Элементы.Страницы.ТекущаяСтраница.Имя = "ДемоТест" 
		ИЛИ Элементы.Страницы.ТекущаяСтраница.Имя = "Аренда" 
		ИЛИ Элементы.Страницы.ТекущаяСтраница.Имя = "МестаХранения" 
		ИЛИ Элементы.Страницы.ТекущаяСтраница.Имя = "Архив" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;		
КонецФункции

&НаКлиенте
Функция ПолучитьКнопкуДействиеИПоискТекущейСтраницы()
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ИзделияНаМестахХранения" Тогда
		Возврат "ИзделияНаМестахХранения_ДействияИПоиск";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "ПолныйСписокИзделий" Тогда 
		Возврат "ПолныйСписокИзделий_ДействияИПоиск";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "БУ" Тогда 
		Возврат "БУ_ДействияИПоиск";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "ДемоТест" Тогда 
		Возврат "ДемоТест_ДействияИПоиск";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "Аренда" Тогда 
		Возврат "Аренда_ДействияИПоиск";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "МестаХранения" Тогда 
		Возврат "МестаХранения_ДействияИПоиск";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "Архив" Тогда
		Возврат "Архив_ДействияИПоиск";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ИзменитьПометкуКнопокДействиеИПоиск(ЗначениеПометки)
	Элементы.ИзделияНаМестахХранения_ДействияИПоиск.Пометка = ЗначениеПометки;
	Элементы.ПолныйСписокИзделий_ДействияИПоиск.Пометка = ЗначениеПометки;
	Элементы.БУ_ДействияИПоиск.Пометка = ЗначениеПометки;
	Элементы.ДемоТест_ДействияИПоиск.Пометка = ЗначениеПометки;
	Элементы.Аренда_ДействияИПоиск.Пометка = ЗначениеПометки;
	Элементы.МестаХранения_ДействияИПоиск.Пометка = ЗначениеПометки;
	Элементы.Архив_ДействияИПоиск.Пометка = ЗначениеПометки;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаПродукт(СтрокаРС)
	
	// rarus agar 03.11.2020 16010 ++
	ПродуктСсылка = Справочники.Scan_Изделия.ПустаяСсылка();
	Если ТипЗнч(СтрокаРС) = Тип("РегистрСведенийКлючЗаписи.Scan_СводнаяИнформацияПоПродукту") Тогда
		ПродуктСсылка = СтрокаРС.Продукт;
	КонецЕсли;
	// rarus agar 03.11.2020 16010 --
	
	Возврат ПродуктСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивСсылокНаПродукт(МассивСтрокРС)
	МассивСсылокНаПродукт = Новый Массив;
	Для Каждого ТекСтрока Из МассивСтрокРС Цикл
		МассивСсылокНаПродукт.Добавить(ТекСтрока.Продукт);
	КонецЦикла;
	Возврат МассивСсылокНаПродукт;
КонецФункции

//// ОБНОВИТЬ КОЛИЧЕСТВО ИЗДЕЛИЙ

&НаКлиенте
Процедура ОбновитьКоличество(Команда)
	ОбновитьКоличествоПоТекущейСтранице();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоПоТекущейСтранице(ИмяСтраницы = "")
	Если ИмяСтраницы = "" Тогда
		ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	КонецЕсли;		

	ИмяСписка = ПолучитьИмяСпискаПоТекущейСтранице(ИмяСтраницы);
	Если ИмяСписка = "" Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = РассчитатьКоличествоСтрок(ИмяСписка);
	
	ИмяКнопкиКоличество = ИмяСписка + "ОбновитьКоличество";
	Элементы[ИмяКнопкиКоличество].Заголовок = НСтр("ru = 'Количество продуктов: '; en = 'Product quantity: '") + КоличествоСтрок;
КонецПроцедуры

&НаСервере
Функция РассчитатьКоличествоСтрок(ИмяСписка)
	
	Схема = Элементы[ИмяСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы[ИмяСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТаблицаРезультат.Колонки.Найти("Продукт") = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ТаблицаРезультат.Свернуть("Продукт");
	НайденнаяСтрока = ТаблицаРезультат.Найти(Неопределено, "Продукт");
	Если НайденнаяСтрока <> Неопределено Тогда
		ТаблицаРезультат.Удалить(НайденнаяСтрока);
	КонецЕсли;
	
	Возврат ТаблицаРезультат.Количество();
КонецФункции

//rarus agar 09.11.2020 16526 ++
&НаКлиенте
Процедура ЗапретитьИзменятьСкладПродажи(Команда) //rarus agar 19.01.2021 16981 +-
	
	ВыбранныеПродукты = ПолучитьМассивВыбранныхПоТекущейСтранице();
	ЗапретитьИзменятьСкладПродажиНаСервере(ВыбранныеПродукты); //rarus agar 19.01.2021 16981 +-
	ОбновитьДинамическийСписокПоТекущейСтранице();
	
	СнятьФлажки(Команды.Найти("СнятьФлажки"));
	
КонецПроцедуры

&НаСервере
Процедура ЗапретитьИзменятьСкладПродажиНаСервере(ВыбранныеПродукты)
	
	Для Каждого ВыбранныйПродукт Из ВыбранныеПродукты Цикл
		//rarus agar 19.01.2021 16981 ++
		//ЗаказПродуктаСсылка = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьЗаказПоИзделию(ВыбранныйПродукт);
		//Если ЗаказПродуктаСсылка.Пустая() Тогда
		//	Продолжить;
		//КонецЕсли;
		//	
		//ЗаказПродуктаОбъект = ЗаказПродуктаСсылка.ПолучитьОбъект();
		//Если Не ЗаказПродуктаОбъект.ЗапретНаИзменениеСкладаОтгрузки Тогда
		//	ЗаказПродуктаОбъект.ЗапретНаИзменениеСкладаОтгрузки = Истина;
		//	Попытка
		//		ЗаказПродуктаОбъект.Записать();
		//	Исключение 
		//		ВызватьИсключение ОписаниеОшибки();
		//	КонецПопытки;
		//КонецЕсли;
		
		Если ВыбранныйПродукт.Пустая() Тогда
			Продолжить;
		КонецЕсли;
			
		ПродуктОбъект = ВыбранныйПродукт.ПолучитьОбъект();
		Если Не ПродуктОбъект.ЗапретИзмененияСкладаПродажи Тогда
			ПродуктОбъект.ЗапретИзмененияСкладаПродажи = Истина;
			Попытка
				ПродуктОбъект.Записать();
			Исключение 
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
		//rarus agar 19.01.2021 16981 --
	КонецЦикла;
	
КонецПроцедуры
//rarus agar 09.11.2020 16526 ++

//rarus kabany 02.04.2021 17222 +++
&НаСервере
Процедура СформироватьИсториюПеремещений(Продукт) 
	
	//rarus kabany 07.04.2021 17222 +++
	Если Продукт = Неопределено ТОГДА
		ИсторияПеремещений.Очистить();
		Возврат;
	КонецЕсли;
	//rarus kabany 07.04.2021 17222 ---
	
	СхемаКомпоновкиДанных = Отчеты.Scan_ИсторияПеремещенийИзделий.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	Отчет = Отчеты.Scan_ИсторияПеремещенийИзделий.Создать();
	НастройкаВарианта= Неопределено;	
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого вариант ИЗ пВарианты Цикл
		Если вариант.Представление = "История перемещений с невыполненными заявками" 
			Тогда НастройкаВарианта = вариант 
		КонецЕсли;
	КонецЦикла;
	Если НастройкаВарианта = Неопределено Тогда
		
		ТекстСообщения = Нстр("ru = 'Вариант отчета ""История перемещений с невыполненными заявками"" не найден!'; en = 'The variant of the report "" History of transfers with unfulfilled orders "" was not found!';");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(ТекстСообщения,УровеньЖурналаРегистрации.Ошибка,,,);
		Возврат;
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаВарианта.Настройки);
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	Если Продукт <> Неопределено Тогда
		Отборы = Настройки.Отбор.Элементы;
		Для каждого отбор из Отборы Цикл 
			Если отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Изделие") Тогда
				отбор.ПравоеЗначение = Продукт;
				отбор.Использование = ИСТИНА;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровкиОбъект =  Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,ДанныеРасшифровкиОбъект);	
	
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровкиОбъект,Истина);
	
	//Очищаем поле табличного документа
	ИсторияПеремещений.Очистить();
	ИсторияПеремещений.ТолькоПросмотр = ИСТИНА;
	
	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ИсторияПеремещений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//// После окончания процессором вывода отчета, поместим расшифровку во временное хранилище
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиОбъект, УникальныйИдентификатор);
		
КонецПроцедуры
//rarus kabany 02.04.2021 17222 ---


#КонецОбласти

#Область Страница_ИзделияНаМестахХранения

// rarus kabany 14.05.2021 17657 +++
&НаКлиенте
Процедура ИзделияНаМестахХранения_ЗаявкиНаДействиеПриАктивизацииСтроки(Элемент)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		Если Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.ВыделенныеСтроки.Количество() > 1 Тогда
			ЗаявкаНаДействиеВидимостьКомандПечати(Элемент, Истина);
			Возврат;
		КонецЕсли;
	Иначе	
		Если Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.ВыделенныеСтроки.Количество() > 1 Тогда
			ЗаявкаНаДействиеВидимостьКомандПечати(Элемент, Истина);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		ЗаявкаНаДействиеВидимостьКомандПечати(Элемент, Ложь);	
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ПанельЗаявкиНаДействие_ДобавитьКомандыПечати();
	
	МассивИменКоманд = Scan_ВспомогательныеФункцииСервер.ЗаявкаНаДействие_СписокИменКомандПечати();	
	
	Для каждого коман из МассивИменКоманд ЦИКЛ 
		НоваяКоманда = Команды.Добавить(коман.ИмяКоманды);
		НоваяКоманда.Действие = "ПанельЗаявкиНаДействие_ОбработкаДействияКомандПечати";
		НоваяКоманда.Заголовок = коман.Синоним;
		
		НовыйЭлемент = Элементы.Добавить(коман.ИмяКоманды,
		Тип("КнопкаФормы"),
		Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.КоманднаяПанель.ПодчиненныеЭлементы.ИзделияНаМестахХранения_ЗаявкиНаДействиеГруппаПечать);
		НовыйЭлемент.ИмяКоманды = коман.ИмяКоманды;
		НовыйЭлемент.Видимость = ложь;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Печать; // rarus kabany 18.05.2021 17657 +
		
		НовыйЭлемент = Элементы.Добавить(коман.ИмяКоманды+"_",
		Тип("КнопкаФормы"),
		Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.КоманднаяПанель.ПодчиненныеЭлементы.ПолныйСписокИзделий_ЗаявкиНаДействиеГруппаПечать);
		НовыйЭлемент.ИмяКоманды = коман.ИмяКоманды;
		НовыйЭлемент.Видимость = ложь;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Печать;  // rarus kabany 18.05.2021 17657 +
	КонецЦикла;

	// rarus kabany 18.05.2021 17657 +++
	НоваяКоманда = Команды.Добавить("ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна");
		НоваяКоманда.Действие = "ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна";
		НоваяКоманда.Заголовок = "Печатная форма недоступна";
		
		НовыйЭлемент = Элементы.Добавить("ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна",
		Тип("КнопкаФормы"),
		Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.КоманднаяПанель.ПодчиненныеЭлементы.ИзделияНаМестахХранения_ЗаявкиНаДействиеГруппаПечать);
		НовыйЭлемент.ИмяКоманды = "ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна";
		НовыйЭлемент.Видимость = ложь;
		НовыйЭлемент.Доступность = ложь; // rarus kabany 18.05.2021 17657 +
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Печать;
		
		НовыйЭлемент = Элементы.Добавить("ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна"+"_",
		Тип("КнопкаФормы"),
		Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.КоманднаяПанель.ПодчиненныеЭлементы.ПолныйСписокИзделий_ЗаявкиНаДействиеГруппаПечать);
		НовыйЭлемент.ИмяКоманды = "ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна";
		НовыйЭлемент.Видимость = ложь;
		НовыйЭлемент.Доступность = ложь; // rarus kabany 18.05.2021 17657 +
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Печать;
	   // rarus kabany 18.05.2021 17657 ---
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельЗаявкиНаДействие_ПечатнаяФормаНедоступна()
Сообщить(НСтр("ru = 'Печатная форма недоступна!'; en = 'Printable not available!'"));		
	КонецПроцедуры

&НаКлиенте
Процедура ПанельЗаявкиНаДействие_ОбработкаДействияКомандПечати(Команда);
	
	ПараметрКоманды = Новый Массив;
	
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;

	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
	ПараметрКоманды.Добавить(Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.ТекущаяСтрока);	
	Иначе
	ПараметрКоманды.Добавить(Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.ТекущаяСтрока);	
	КонецЕсли;
	
	Scan_ВспомогательныеФункцииКлиент.ЗаявкаНаДействие_ВыполнитьПечать(Команда.Имя, ПараметрКоманды );
	
КонецПроцедуры
// rarus kabany 14.05.2021 17657 ---

#КонецОбласти

#Область Страница_ПолныйСписокИзделий
// rarus kabany 17.05.2021 17657 +++
&НаКлиенте
Процедура ПолныйСписокИзделий_ЗаявкиНаДействиеПриАктивизацииСтроки(Элемент)
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		Если Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.ВыделенныеСтроки.Количество() > 1 Тогда
			ЗаявкаНаДействиеВидимостьКомандПечати(Элемент, Истина);
			Возврат;
		КонецЕсли;
	Иначе	
		Если Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.ВыделенныеСтроки.Количество() > 1 Тогда
			ЗаявкаНаДействиеВидимостьКомандПечати(Элемент, Истина);
			Возврат;
		КонецЕсли;	
	КонецЕсли;

	Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		ЗаявкаНаДействиеВидимостьКомандПечати(Элемент, Ложь);	
	КонецЕсли;
КонецПроцедуры
// rarus kabany 17.05.2021 17657 ---
#КонецОбласти

#Область Страница_БУ

#КонецОбласти

#Область Страница_ДемоТест

#КонецОбласти

#Область Страница_Аренда

#КонецОбласти

#Область Страница_ЗаявкиНаДействие

&НаСервереБезКонтекста
Процедура СписокЗаявкиНаДействиеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Справочник.Ссылка,
	|	Справочник.Цвет КАК Цвет
	|ИЗ
	|	Справочник.Scan_СтатусыЗаявокНаДействие КАК Справочник";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокиКлючи = Строки.ПолучитьКлючи(); 
	Пока Выборка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_ЗаявкаНаДействие.Ссылка КАК СсылкаДокумент
			|ИЗ
			|	Документ.Scan_ЗаявкаНаДействие КАК Scan_ЗаявкаНаДействие
			|ГДЕ
			|	Scan_ЗаявкаНаДействие.СтатусЗаявки = &СтатусЗаявки
			|	И Scan_ЗаявкаНаДействие.Ссылка В(&Строки)";
		
		Запрос.УстановитьПараметр("СтатусЗаявки", Выборка.Ссылка);
		Запрос.УстановитьПараметр("Строки", СтрокиКлючи); 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаСписка = Строки[ВыборкаДетальныеЗаписи.СсылкаДокумент];
			Для Каждого КолонкаСписка Из СтрокаСписка.Оформление Цикл
				КолонкаСписка.Значение.УстановитьЗначениеПараметра("ЦветФона", Выборка.Цвет.Получить());
			КонецЦикла;
		КонецЦикла;       		
	КонецЦикла;
КонецПроцедуры

#Область Страница_ЗаявкиНаДействие_Команды

&НаКлиенте
Процедура ПрикрепитьМХиМ15(Команда)
	// rarus tenkam 17.03.2021 mantis 17455 +++
	//Если Элементы.СписокЗаявкиНаДействие.ВыделенныеСтроки.Количество() <> 0 Тогда
	//	РаботаСФайламиКлиент.ДобавитьФайлы(Элементы.СписокЗаявкиНаДействие.ВыделенныеСтроки, ЭтаФорма.УникальныйИдентификатор, , );
	//	ОбновитьДинамическийСписокПоТекущейСтранице();
	//КонецЕсли;
	
	ИмяСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
	Если ИмяСтраницы = "ИзделияНаМестахХранения" Тогда
		текВыделенныеСтроки = Элементы.ИзделияНаМестахХранения_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ПолныйСписокИзделий" Тогда
		текВыделенныеСтроки = Элементы.ПолныйСписокИзделий_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "БУ" Тогда
		текВыделенныеСтроки = Элементы.БУ_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ДемоТест" Тогда
		текВыделенныеСтроки = Элементы.ДемоТест_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "Аренда" Тогда
		текВыделенныеСтроки = Элементы.Аренда_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "ЗаявкиНаДействие" Тогда
		текВыделенныеСтроки = Элементы.СписокЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "МестаХранения" Тогда
		текВыделенныеСтроки = Элементы.МестаХранения_ЗаявкиНаДействие.ВыделенныеСтроки;
	ИначеЕсли ИмяСтраницы = "Архив" Тогда
		текВыделенныеСтроки = Элементы.Архив_ЗаявкиНаДействие.ВыделенныеСтроки;
	КонецЕсли;             
	
	Если текВыделенныеСтроки.Количество() <> 0 Тогда
		РаботаСФайламиКлиент.ДобавитьФайлы(текВыделенныеСтроки, ЭтаФорма.УникальныйИдентификатор, , );
		ОбновитьДинамическийСписокПоТекущейСтранице(ИмяСтраницы);
	КонецЕсли;   
	
	// rarus tenkam 17.03.2021 mantis 17455 ---
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Страница_ЗаявкиПеревозчику

&НаСервереБезКонтекста
Процедура СписокЗаявкиПеревозчикуПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Справочник.Ссылка,
	|	Справочник.Цвет КАК Цвет
	|ИЗ
	|	Справочник.Scan_СтатусыЗаявокНаДействие КАК Справочник";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокиКлючи = Строки.ПолучитьКлючи(); 
	Пока Выборка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_ЗаявкаПеревозчику.Ссылка КАК СсылкаДокумент
			|ИЗ
			|	Документ.Scan_ЗаявкаПеревозчику КАК Scan_ЗаявкаПеревозчику
			|ГДЕ
			|	Scan_ЗаявкаПеревозчику.СтатусЗаявки = &СтатусЗаявки
			|	И Scan_ЗаявкаПеревозчику.Ссылка В(&Строки)";
		
		Запрос.УстановитьПараметр("СтатусЗаявки", Выборка.Ссылка);
		Запрос.УстановитьПараметр("Строки", СтрокиКлючи);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаСписка = Строки[ВыборкаДетальныеЗаписи.СсылкаДокумент];
			Для Каждого КолонкаСписка Из СтрокаСписка.Оформление Цикл
				КолонкаСписка.Значение.УстановитьЗначениеПараметра("ЦветФона", Выборка.Цвет.Получить());
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

#Область Страница_ЗаявкиПеревозчику_Команды

//// ПОДТВЕРДИТЬ ЗАЯВКУ

&НаКлиенте
Процедура ПодтвержденаПеревозчиком(Команда)
	МассивВыбранныхСтрок = Элементы.СписокЗаявкиПеревозчику.ВыделенныеСтроки;
	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один документ'; en = 'Select document'"));                                                                       
		Возврат;
	ИначеЕсли МассивВыбранныхСтрок.Количество() > 1 Тогда
		Сообщить(НСтр("ru = 'Выберите один документ'; en = 'Select one document'"));                            
	Иначе
		ПодтвержденаПеревозчикомНаСервере(МассивВыбранныхСтрок[0]);
	КонецЕсли;
	ОбновитьДинамическийСписокПоТекущейСтранице();
КонецПроцедуры                                              

&НаСервереБезКонтекста
Процедура ПодтвержденаПеревозчикомНаСервере(ЗаявкаПеревозчику)
	СообщениеОбОшибке = "";
	ВсеОк = Документы.Scan_ЗаявкаПеревозчику.УстановитьПодтверждениеПеревозчиком(ЗаявкаПеревозчику, СообщениеОбОшибке);
	Если НЕ ВсеОк И ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Сообщить(СообщениеОбОшибке);
	Иначе
		ТекСообщение = НСтр("ru = 'У документа " + ЗаявкаПеревозчику.Номер + " от " + ТекущаяДата() + " установлен признак подтверждена.'; en = 'Confirmed successfully'");
		Сообщить(ТекСообщение);
	КонецЕсли;
КонецПроцедуры

//// СНЯТЬ ПОДТВЕРЖДЕНИЕ

&НаКлиенте
Процедура СнятьПодтверждение(Команда)
	МассивВыбранныхСтрок = Элементы.СписокЗаявкиПеревозчику.ВыделенныеСтроки;
	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один документ'; en = 'Select document'"));                                                                       
		Возврат;
	ИначеЕсли МассивВыбранныхСтрок.Количество() > 1 Тогда
		Сообщить(НСтр("ru = 'Выберите один документ'; en = 'Select one document'"));                            
	Иначе
		СнятьПодтверждениеНаСервере(МассивВыбранныхСтрок[0]);
	КонецЕсли;
	ОбновитьДинамическийСписокПоТекущейСтранице();	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СнятьПодтверждениеНаСервере(ЗаявкаПеревозчику) 	
	СообщениеОбОшибке = "";
	ВсеОк = Документы.Scan_ЗаявкаПеревозчику.СнятьПодтверждениеПеревозчиком(ЗаявкаПеревозчику, СообщениеОбОшибке);
	Если НЕ ВсеОк Тогда
		Сообщить(СообщениеОбОшибке);
	Иначе
		ТекСообщение = НСтр("ru = 'У документа " + ЗаявкаПеревозчику.Номер + " от " + ТекущаяДата() + " снят признак подтверждена.'; en = 'Confirmation canceled successfully'");
		Сообщить(ТекСообщение);
	 КонецЕсли;
КонецПроцедуры

//// АННУЛИРОВАТЬ ЗАЯВКУ

&НаКлиенте
Процедура АннулироватьЗаявкуПеревозчику(Команда)
	МассивВыделенныхСтрок = Элементы.СписокЗаявкиПеревозчику.ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбрана ни одна заявка'; en = 'Select document'"));                                                                       
		Возврат;                                
	ИначеЕсли МассивВыделенныхСтрок.Количество()>1 Тогда
		Сообщить(НСтр("ru = 'Выберите одну заявку'; en = 'Select one document'"));                            
	Возврат;
	Иначе
		АннулироватьЗаявкуПеревозчикуНаСервере(МассивВыделенныхСтрок[0]);
		ОбновитьДинамическийСписокПоТекущейСтранице();
		Оповестить("ОбновитьСписокЗаявокНаДействие");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АннулироватьЗаявкуПеревозчикуНаСервере(ЗаявкаПеревозчику);
	
	Если ЗаявкаПеревозчику.ПометкаУдаления И ЗаявкаПеревозчику.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Аннулирована Тогда
		// Для исправления ошибок по старому коду
		УстановитьПривилегированныйРежим(Истина);
		ДокОбъект = ЗаявкаПеревозчику.ПолучитьОбъект();
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.Сторнирован = Истина;
		ДокОбъект.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Аннулирована;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если ЗаявкаПеревозчику.Сторнирован Тогда
		Сообщить(НСтр("ru = 'Документ " + ЗаявкаПеревозчику.Ссылка + " уже аннулирован!'; en = 'Document is already canceled'"));
	ИначеЕсли ЗаявкаПеревозчику.СтатусЗаявки = Справочники.Scan_СтатусыЗаявокНаДействие.Исполнена Тогда
		Сообщить(НСтр("ru = 'Не удалось аннулировать документ " + ЗаявкаПеревозчику.Ссылка + ", т.к. он исполнен!'; en = 'Error! Document is executed'"));
	ИначеЕсли ЗаявкаПеревозчику.ПодтвержденаПеревозчиком Тогда
		Сообщить(НСтр("ru = 'Не удалось аннулировать документ " + ЗаявкаПеревозчику.Ссылка + ", т.к. он подтвержден перевозчиком!'; en = 'Error! Document is confimed'"));
	Иначе	
		Scan_ВспомогательныеФункцииСервер.СторнироватьДокумент(ЗаявкаПеревозчику);	
		Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеОбАннулировании(ЗаявкаПеревозчику);
	КонецЕсли;   				
КонецПроцедуры

//// ВЫГРУЗИТЬ ДАННЫЕ ТК

&НаКлиенте
Процедура ВыгрузитьЗаявкуТК(Команда)
	МассивВыбранныхСтрок = Элементы.СписокЗаявкиПеревозчику.ВыделенныеСтроки;
	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один документ'; en = 'Select document'"));                                                                       
		Возврат;
	ИначеЕсли МассивВыбранныхСтрок.Количество() > 1 Тогда
		Сообщить(НСтр("ru = 'Выберите один документ'; en = 'Select one document'"));                            
		Возврат;
	Иначе
		ИмяФайла = ПолучитьИмяФайла(МассивВыбранныхСтрок[0]);

		// Вызываем диалог выбора файла для сохранения XLS-таблицы
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		Текст = "ru = ""Таблица XLS""; en = ""XLS table""";
		Фильтр = НСтр(Текст)+"(*.xls)|*.xls";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Выберите путь для сохранения";
		ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайла;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяФайла", ИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииДиалогаВыбораФайла", ЭтотОбъект, ДопПараметры);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);	   				
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФайла(ЗаявкаПеревозчику)
	ИмяФайла = Строка(ЗаявкаПеревозчику.Перевозчик)+" заявка № "+ Строка(ЗаявкаПеревозчику.Номер) + " от " + Строка(Формат(ЗаявкаПеревозчику.Дата,"ДЛФ=D"));
	Возврат ИмяФайла;
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииДиалогаВыбораФайла(ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла; 
	
	ПолноеИмяФайла = ВыбранныйФайл[0];
	ПутьКФайлу = ПолноеИмяФайла;
	
	Если ПутьКФайлу = "" Тогда
		Сообщить(НСтр("ru = 'Путь сохранения не выбран!'; en = 'Way of saving does not selected!'"));
		Возврат;	
	КонецЕсли;	
	ТабДокумент = ПолучитьТабДокументТранспортнойКомпании();
	ЗаявкаТКСохранитьДанныеВExcel(ТабДокумент, ПутьКФайлу);
	
КонецПроцедуры    

&НаСервере
Функция ПолучитьТабДокументТранспортнойКомпании()
	МассивВыбранныхСтрок = Элементы.СписокЗаявкиПеревозчику.ВыделенныеСтроки;
	ЗаявкаПеревозчику = МассивВыбранныхСтрок[0];
	ТаблицаСохранение = Новый ТабличныйДокумент;
	Макет = Документы.Scan_ЗаявкаПеревозчику.ПолучитьМакет("ЗаявкаТК");
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");

	ТаблицаСохранение.Вывести(ОбластьШапка);
	Для Каждого Стр Из ЗаявкаПеревозчику.СоставЗаявки Цикл
		ОбластьСтрока.Параметры.НомерСтроки= Стр.НомерСтроки;
		ОбластьСтрока.Параметры.НомерЗаявки = ЗаявкаПеревозчику.Номер;
		ОбластьСтрока.Параметры.НомерШасси = Стр.Изделие.НомерИзделия;
		ТаблицаСохранение.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	Возврат ТаблицаСохранение;

КонецФункции

&НаКлиенте
Процедура ЗаявкаТКСохранитьДанныеВExcel(ТаблицаСохранение, ПутьКФайлу)
	ТаблицаСохранение.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	Сообщить(НСтр("ru = 'Данные выгружены в файл '; en = 'Data uploaded into the file '") + ПутьКФайлу);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Страница_ПеремещенияИзделий

#КонецОбласти

#Область Страница_РаспределениеЗаявок

&НаСервереБезКонтекста
Функция ПолучитьСсылкуGuid(КлючЗаписи)
	ИдентификаторСтроки = КлючЗаписи.GuidСтроки;
	Возврат ИдентификаторСтроки;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаДокумент(КлючЗаписи)
	ИдентификаторСтроки = КлючЗаписи.ЗаявкаНаДействие;
	Возврат ИдентификаторСтроки;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаДокументЗаявкаПеревозчику(КлючЗаписи)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки = &СсылкаGuid";
	Запрос.УстановитьПараметр("СсылкаGuid", КлючЗаписи.GuidСтроки);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТЗ = Результат.Выгрузить();
		Если ТЗ[0].ЗаявкаПеревозчику <> Документы.Scan_ЗаявкаПеревозчику.ПустаяСсылка() Тогда
			Возврат ТЗ[0].ЗаявкаПеревозчику;	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КОнецЕсли;
	Возврат Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаИзделие(КлючЗаписи)
	ИдентификаторСтроки = КлючЗаписи.Изделие;
	Возврат ИдентификаторСтроки;
КонецФункции

#Область Страница_РаспределениеЗаявок_Команды

//// СОЗДАНИЕ НОВОЙ ЗАЯВКИ ПЕРЕВОЗЧИКУ

&НаКлиенте
Процедура СоздатьЗаявкуПеревозчику(Команда)
	Если мВыбраныGUIDРаспределениеЗаявок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбрано ни один продукт'; en = 'Please select the product'"));
		Возврат;
	КонецЕсли;
	ЕстьЗаявка = ЕстьЗаявкаПеревозчику(мВыбраныGUIDРаспределениеЗаявок);
	Если ЕстьЗаявка Тогда
		Сообщить(НСтр("ru = 'У выбранных продуктов имеется документ ""Заявка Перевозчику""'; en = 'Selected items have a document ""Request to carrier""'"));
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивВыбранныхСтрок",мВыбраныGUIDРаспределениеЗаявок);
		
	Результат = ОткрытьФорму("Документ.Scan_ЗаявкаПеревозчику.Форма.ФормаДокумента",ПараметрыФормы,,,,,Новый ОписаниеОповещения("Подключаемый_ОбработкаЗакрытияФормыДокумента",ЭтаФорма,"ЗаявкаПеревозчику"));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗаявкаПеревозчику(ВыбранныеСтроки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В(&СписокGuid)
	               |	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику <> ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка)";
	Запрос.УстановитьПараметр("СписокGuid",ВыбранныеСтроки);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаЗакрытияФормыДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	ОчиститьМассивВыбранныхПоТекущейСтранице();
	ОбновитьКоличествоВыбранныхПоТекущейСтранице();
	УстановитьМассивВыбранныхПоТекущейСтранице();
	ОбновитьДинамическийСписокПоТекущейСтранице();	
КонецПроцедуры

//// ДОБАВЛЕНИЕ ИЗДЕЛИЯ В ЗАЯВКУ ПЕРЕВОЗЧИКУ

&НаКлиенте
Процедура ДобавитьВЗаявкуПеревозчику(Команда)
	Если мВыбраныGUIDРаспределениеЗаявок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select a product'"));
		Возврат;
	КонецЕсли;
	ЕстьЗаявка = ЕстьЗаявкаПеревозчику(мВыбраныGUIDРаспределениеЗаявок);
	Если ЕстьЗаявка Тогда
		Сообщить(НСтр("ru = 'У выбранных продуктов имеется документ ""Заявка Перевозчику""'; en = 'Selected items have a document ""Request to carrier""'"));
		Возврат;
	ИначеЕсли НЕ ПроверитьВыбранныеСсылки(мВыбраныGUIDРаспределениеЗаявок) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивВыбранныхСтрок",мВыбраныGUIDРаспределениеЗаявок);
	ОткрытьФорму("Документ.Scan_ЗаявкаПеревозчику.Форма.ФормаПодбораДокумента",ПараметрыФормы,,,,,Новый ОписаниеОповещения("Подключаемый_ОбработкаЗакрытияФормыВыбора",ЭтаФорма,"ЗаявкаПеревозчику"),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВыбранныеСсылки(ВыбранныеСтроки)
	Возврат Документы.Scan_ЗаявкаПеревозчику.ПроверитьВыбранныеСсылки(ВыбранныеСтроки);
КонецФункции 

&НаКлиенте
Процедура Подключаемый_ОбработкаЗакрытияФормыВыбора(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	Если РезультатОповещения <> Неопределено И 
		РезультатОповещения.Свойство("ЗаявкаПеревозчику") Тогда
		СтруктураПараметров = Новый Структура("ДобавитьИзделия", мВыбраныGUIDРаспределениеЗаявок);
		Scan_ВспомогательныеФункцииКлиент.КорректироватьЗаявкуПеревозчикуНаКлиенте(РезультатОповещения.ЗаявкаПеревозчику, СтруктураПараметров);
	КонецЕсли;
	ОчиститьМассивВыбранныхПоТекущейСтранице();
	ОбновитьКоличествоВыбранныхПоТекущейСтранице();
	УстановитьМассивВыбранныхПоТекущейСтранице();
	ОбновитьДинамическийСписокПоТекущейСтранице();
КонецПроцедуры

//// ИСКЛЮЧИТЬ ИЗДЕЛИЕ ИЗ ЗАЯВКИ НА ДЕЙСТВИЕ

&НаКлиенте
Процедура ИсключитьИзделиеИзЗаявкиНаДействие(Команда)
	Если мВыбраныGUIDРаспределениеЗаявок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select a product'"));
		Возврат;
	КонецЕсли;
	Если ВсеИзделияОднойЗаявкиНаДействие(мВыбраныGUIDРаспределениеЗаявок) Тогда
		ДанныеДляКорректировки = ПолучитьДанныеДляКорректировки(мВыбраныGUIDРаспределениеЗаявок);
		Scan_ВспомогательныеФункцииКлиент.КорректироватьЗаявкуНаКлиенте(ДанныеДляКорректировки.ЗаявкаНаДействие, ДанныеДляКорректировки.МассивИзделий);
	Иначе
		Сообщить(НСтр("ru = 'Выбранные продукты принадлежат нескольким заявкам на действие!'; en = 'Selected products belong to several requests for action!'"));
	КонецЕсли;
	СнятьФлажки(Команда);
	Оповестить("ОбновитьСписокЗаявокНаДействие");
	Оповестить("ОбновитьСписокЗаявокПеревозчику");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеИзделияОднойЗаявкиНаДействие(ВыбранныеСтроки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В(&ВыбранныеСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие";
	
	Запрос.УстановитьПараметр("ВыбранныеСтроки", ВыбранныеСтроки);
	РезультатЗапроса = Запрос.Выполнить();
	ТабРезультата = РезультатЗапроса.Выгрузить();
	Если ТабРезультата.Количество() = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляКорректировки(ВыбранныеСтроки) 
	
	СтруктураДанных = Новый Структура;
	МассивИзделий = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие,
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие КАК ЗаявкаНаДействие
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В(&ВыбранныеСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие,
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявкаНаДействие";
	
	Запрос.УстановитьПараметр("ВыбранныеСтроки", ВыбранныеСтроки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИзделий.Добавить(ВыборкаДетальныеЗаписи.Изделие);
		СтруктураДанных.Вставить("ЗаявкаНаДействие", ВыборкаДетальныеЗаписи.ЗаявкаНаДействие);	
	КонецЦикла;
	СтруктураДанных.Вставить("МассивИзделий", МассивИзделий);
	
	Возврат СтруктураДанных;

КонецФункции

//// ИСКЛЮЧИТЬ ИЗДЕЛИЙ ИЗ ЗАЯВКИ ПЕРЕВОЗЧИКУ

&НаКлиенте
Процедура ИсключитьИзделиеИзЗаявкиПеревозчику(Команда)
	Если мВыбраныGUIDРаспределениеЗаявок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select a product'"));
		Возврат;
	КонецЕсли;
	ЗаявкаПеревозчикуНаКорректировку = ПредопределенноеЗначение("Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка");
	СообщениеОбОшибке = "";
	Если МожноИсключать(мВыбраныGUIDРаспределениеЗаявок, ЗаявкаПеревозчикуНаКорректировку, СообщениеОбОшибке) Тогда
		СтруктураПараметров = Новый Структура("ИсключитьИзделия", мВыбраныGUIDРаспределениеЗаявок);
		Scan_ВспомогательныеФункцииКлиент.КорректироватьЗаявкуПеревозчикуНаКлиенте(ЗаявкаПеревозчикуНаКорректировку, СтруктураПараметров);
	Иначе
		Сообщить(СообщениеОбОшибке);	
	КонецЕсли;
	СнятьФлажки(Команда);  
	Оповестить("ОбновитьСписокЗаявокНаДействие");
	Оповестить("ОбновитьСписокЗаявокПеревозчику");
КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноИсключать(ВыбранныеСтроки, ЗаявкаПеревозчикуСсылка, СообщениеОбОшибке = "")
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику <> ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка)
	               |	И Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В (&ВыбранныеСтроки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику";
	Запрос.УстановитьПараметр("ВыбранныеСтроки",ВыбранныеСтроки);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru = 'Нельзя выполнить операцию. У выбранных продуктов нет ""Заявок перевозчику""!'; en = 'No request to carrier'");
		Возврат Ложь;	
	Иначе
		ТЗ = Результат.Выгрузить();
		Если ТЗ.Количество() <> 1 Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нельзя выполнить операцию. У выбранных продуктов разные ""Заявки перевозчику""!'; en = 'Different requests to carrier'");		
			Возврат Ложь;	
		Иначе
			ЗаявкаПеревозчикуСсылка = ТЗ[0].ЗаявкаПеревозчику;
			Если ЗаявкаПеревозчикуСсылка.ПодтвержденаПеревозчиком Тогда
				СообщениеОбОшибке = НСтр("ru = 'Нельзя выполнить операцию. У выбранных продуктов ""Заявка перевозчику"" подтверждена перевозчиком!'; en = 'Request to carrier is confirmed'");
				Возврат Ложь;
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

//// ОТОБРАЖЕНИЕ ДОП. КОЛОНОК ПО ИЗДЕЛИЮ

&НаКлиенте
Процедура ОтображениеДопКолонокПоИзделию(Команда)
	Элементы.СписокРаспределениеЗаявокРаспределениеЗаявок_ОтображениеДопКолонокПоИзделию.Пометка = НЕ Элементы.СписокРаспределениеЗаявокРаспределениеЗаявок_ОтображениеДопКолонокПоИзделию.Пометка;
	Элементы.СписокРаспределениеЗаявок_ДопКолонкиПоИзделию.Видимость = Элементы.СписокРаспределениеЗаявокРаспределениеЗаявок_ОтображениеДопКолонокПоИзделию.Пометка;
КонецПроцедуры

// СТРУКТУРА ДОКУМЕНТОВ

&НаКлиенте
Процедура ПоказатьСтруктуруДокументовПоИзделию(Команда)
	Если мВыбраныGUIDРаспределениеЗаявок.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select a product'"));
		Возврат;
	ИначеЕсли мВыбраныGUIDРаспределениеЗаявок.Количество() > 1 Тогда
	    Сообщить(НСтр("ru = 'Выберите один продукт '; en = 'Select one item'"));
		Возврат;
	Иначе
		Документ = ПолучитьДокумент(мВыбраныGUIDРаспределениеЗаявок[0]);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектОтбора",Документ);
		ОткрытьФорму("ОбщаяФорма.СтруктураПодчиненности",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	СнятьФлажки(Команда);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокумент(ВыбраннаяСтрока)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику,
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки = &ВыбраннаяСтрока";
	Запрос.УстановитьПараметр("ВыбраннаяСтрока",ВыбраннаяСтрока);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаПеревозчику) Тогда
			Возврат ВыборкаДетальныеЗаписи.ЗаявкаПеревозчику;
		Иначе
			Возврат ВыборкаДетальныеЗаписи.ЗаявкаНаДействие;	
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Страница_МестаХранения

&НаКлиенте
Процедура ОткрытьМестаХранения(Команда)
	Элементы.СписокМестаХранения_ОткрытьМестаХранения.Пометка = НЕ Элементы.СписокМестаХранения_ОткрытьМестаХранения.Пометка;
	Элементы.МестаХранения_МестаХранения.Видимость = Элементы.СписокМестаХранения_ОткрытьМестаХранения.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияИзделийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//Если Элемент.ТекущийЭлемент.Имя = "МестаХраненияИзделийМестоХранения" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.МестоХранения) Тогда 
	//	ПоказатьЗначение(,Элемент.ТекущиеДанные.МестоХранения);
	//ИначеЕсли Элемент.ТекущийЭлемент.Имя = "МестаХраненияИзделийКоличество" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Количество) Тогда
		СписокМестаХранения.Отбор.Элементы.Очистить();
		УстановитьОтборПоМестуХранения(Элемент.ТекущиеДанные.МестоХранения);
	//КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоМестуХранения(МестоХранения)
	ОбъектНастройки = СписокМестаХранения.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы; 
	ОбъектНастройки.Очистить();
	НовыйОтбор = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("МестоХранения");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = МестоХранения;	
	
	// Обновим заголовок группы
	МестаХранения_Отбор = МестоХранения;
	Элементы.МестаХранения_МестаХранения.Заголовок = "Места хранения (" + МестаХранения_Отбор.Наименование + ")";
	
	// Добавим условное оформление
	ОбъектУО = МестаХраненияИзделий.УсловноеОформление.Элементы;
	ОбъектУО.Очистить();
	
	НовоеУО = ОбъектУО.Добавить();
	НовоеУО.Использование = Истина;
	
	УООтбор = НовоеУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	УООтбор.Использование = Истина;
	УООтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МестоХранения");
	УООтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	УООтбор.ПравоеЗначение = МестаХранения_Отбор;
	
	НовоеУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(28,85,174));
	НовоеУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));

КонецПроцедуры


#КонецОбласти

#Область Страница_Архив

#КонецОбласти

//rarus agar 06.11.2020 15696 ++
#Область Страница_СоглашенияОПоставке

//rarus vikhle 15.11.2021 m 18471 +++ удалил команду
//&НаКлиенте
//Процедура СоздатьНаОснованииСоглашенияЗапрос(Команда)
//	
//	МассивВыбранныхСтрок = Элементы.СписокСоглашенияОПоставке.ВыделенныеСтроки;
//	
//	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
//		Сообщить(НСтр("ru = 'Выберите документ'; en = 'Select document'"));
//		Возврат;
//	ИначеЕсли МассивВыбранныхСтрок.Количество() > 1 Тогда
//		Сообщить(НСтр("ru = 'Выберите один документ'; en = 'Select one document'"));
//		Возврат;
//	Иначе
//		ТекущийДокСоглашениеОПоставке = Элементы.СписокСоглашенияОПоставке.ТекущаяСтрока;
//		ПараметрыФормы = Новый Структура("Основание", ТекущийДокСоглашениеОПоставке);
//		ОткрытьФорму("Документ.Scan_ЗапросНаНадстройки.ФормаОбъекта", ПараметрыФормы);
//	КонецЕсли;
//	
//КонецПроцедуры
//rarus agar 06.11.2020 15696 --
//rarus vikhle 15.11.2021 m 18471 ---

#КонецОбласти

#Область Страница_ОтчетыИРегламенты

////////////////////////////////////////////////////////////////////////////////
//// ОТЧЕТЫ

&НаКлиенте
Процедура Отчеты_ЕженедельныйОтчет(Команда)
	ОткрытьФорму("Отчет.Scan_ЕженедельныйОтчет.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_ИсторияЗаявокНаИзделия(Команда)
	ОткрытьФорму("Отчет.Scan_ИсторияЗаявокНаИзделия.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_ИсторияПеремещенийИзделий(Команда)
	ОткрытьФорму("Отчет.Scan_ИсторияПеремещенийИзделий.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_ОбщийСписокДоставок(Команда)
	ОткрытьФорму("Отчет.Scan_ОбщийСписокДоставок.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_РеестрОказаныхУслугПоЛогистике(Команда)
	ОткрытьФорму("Отчет.Scan_РеестрОказаныхУслугПоЛогистике.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СтатистикаПорт(Команда)
	ОткрытьФорму("Отчет.Scan_СтатистикаПорт.Форма.ФормаОтчета");
КонецПроцедуры

//rarus vikhle 26.08.2020 mt 16274
&НаКлиенте
Процедура Отчеты_СписокОтгрузок(Команда)
	ОткрытьФорму("Отчет.Scan_СписокОтгрузок.Форма");
КонецПроцедуры
//rarus vikhle 26.08.2020 mt 16274---

// rarus kabany 31.08.2021 18199 +++
&НаКлиенте
Процедура Отчеты_ПокупкаПродуктовУСканияПитер(Команда)
	ОткрытьФорму("Отчет.Scan_ПокупкаПродуктовУСканияПитер.Форма.ФормаОтчета");	
КонецПроцедуры
// rarus kabany 31.08.2021 18199 ---

//rarus agar 01.02.2021 17178 ++
&НаКлиенте
Процедура Отчеты_OrderDeviation(Команда)
	ОткрытьФорму("Отчет.Scan_OrderDeviation.Форма");
КонецПроцедуры
//rarus agar 01.02.2021 17178 --

//rarus ozhnik 17212 04.06.2021 + 
&НаКлиенте
Процедура Отчеты_DD_DDS(Команда)
	ОткрытьФорму("Отчет.Scan_DD_DDS.Форма");
КонецПроцедуры
//rarus ozhnik 17212 04.06.2021 -

// rarus agar 17758 20.08.2021 ++
&НаКлиенте
Процедура Отчеты_LeadTimeReport(Команда)
	
	ОткрытьФорму("Отчет.Scan_LeadTimeReport.Форма");
	
КонецПроцедуры
// rarus agar 17758 20.08.2021 --

////////////////////////////////////////////////////////////////////////////////
//// РЕГЛАМЕНТЫ

//// Statistics port

&НаКлиенте
Процедура РО_СформироватьStatisticsПортСклад(Команда)
	ОткрытьФорму("Обработка.Scan_РМОтделаЛогистики.Форма.ФормаВыбораГода",,,,,, Новый ОписаниеОповещения("СформироватьStatisticsПортСкладЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьStatisticsПортСкладЗавершение(СтруктураВозврДанные, ДополнительныеПараметры) Экспорт
	Если СтруктураВозврДанные = Неопределено Тогда
		Сообщить(НСтр("ru = 'Не выбран год формирования документа!'; en = 'Please select year of the document!'"));
		Возврат
	КонецЕсли;
	
	ИмяФайла = "statistics_порт-склад_" + Формат(СтруктураВозврДанные.ГодStatistics,"ЧГ=");

	// Вызываем диалог выбора файла для сохранения XLS-таблицы
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	Текст = "ru = ""Таблица XLS""; en = ""XLS table""";
	Фильтр = НСтр(Текст)+"(*.xls)|*.xls";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите путь для сохранения";
	ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайла;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ГодStatistics", СтруктураВозврДанные.ГодStatistics);
	ОписаниеВыборПути = Новый ОписаниеОповещения("ВыборФайлаСатистикаПортЗавершение",ЭтотОбъект, ДополнительныеПараметры);
	ДиалогОткрытияФайла.Показать(ОписаниеВыборПути); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаСатистикаПортЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		ТабДокумент = ПолучитьТабДокументСтатистики(ДополнительныеПараметры.ГодStatistics);	
		СохранитьДанныеВExcel(ТабДокумент, Результат[0]);
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Путь сохранения не выбран!'; en = 'Way of saving does not selected!'");
		Сообщение.Сообщить();   
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабДокументСтатистики(ГодКарточек) 	
	
	ТаблицаСохранение = Новый ТабличныйДокумент;
	Макет = Обработки.Scan_РМОтделаЛогистики.ПолучитьМакет("StatisticsПорт");
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");

	ТаблицаСохранение.Вывести(ОбластьШапка);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие КАК Изделие,
		|	МИНИМУМ(Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие) КАК ЗаявкаНаДействие
		|ПОМЕСТИТЬ ПерваяЗаявкаДоставка
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	(Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.Доставка)
		|			ИЛИ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство)
		|			ИЛИ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение))
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПерваяЗаявкаДоставка.Изделие КАК Изделие,
		|	ПерваяЗаявкаДоставка.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		|	ПерваяЗаявкаДоставка.ЗаявкаНаДействие.МестоДоставки.АдресСкладаЛогистический КАК АдресДоставки,
		|	ПерваяЗаявкаДоставка.ЗаявкаНаДействие.ДатаПолучения КАК ДатаОтгрузкиПлан,
		|	ПерваяЗаявкаДоставка.ЗаявкаНаДействие.ДатаДоставкиПлановая КАК ДатаДоставкиПлан,
		|	ЕСТЬNULL(Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику, ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка)) КАК ЗаявкаПеревозчику
		|ПОМЕСТИТЬ ДанныеЗаявок
		|ИЗ
		|	ПерваяЗаявкаДоставка КАК ПерваяЗаявкаДоставка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|		ПО ПерваяЗаявкаДоставка.Изделие = Scan_КорректировкаИнформацииПоЗаявкам.Изделие
		|			И ПерваяЗаявкаДоставка.ЗаявкаНаДействие = Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗаявок.Изделие КАК Изделие,
		|	ДанныеЗаявок.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		|	ДанныеЗаявок.ЗаявкаПеревозчику КАК ЗаявкаПеревозчику,
		|	ДанныеЗаявок.ЗаявкаПеревозчику.Перевозчик КАК Перевозчик,
		|	ДанныеЗаявок.АдресДоставки КАК АдресДоставки,
		|	ДанныеЗаявок.ДатаОтгрузкиПлан КАК ДатаОтгрузкиПлан,
		|	ДанныеЗаявок.ДатаДоставкиПлан КАК ДатаДоставкиПлан,
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.ДатаУходаФакт КАК ДатаОтгрузкиФакт,
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.ДатаДоставкиФакт КАК ДатаДоставкиФакт
		|ПОМЕСТИТЬ ПолныеДанныеЗавокПоИзделию
		|ИЗ
		|	ДанныеЗаявок КАК ДанныеЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|		ПО ДанныеЗаявок.ЗаявкаПеревозчику = Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка
		|			И ДанныеЗаявок.Изделие = Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие
		|;
		|
		|ВЫБРАТЬ
		|	Scan_ЗаказыНаЗавод.Ссылка КАК ЗаказНаЗавод,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDD2,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDD,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Значение, ДАТАВРЕМЯ(1, 1, 1))
		|		ИНАЧЕ ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК АктуальнаяCDD
		|ПОМЕСТИТЬ ЗаказыНаЗаводСКлючевымиДатами
		|ИЗ
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD2)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Объект,
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ЗаказыНаЗаводСКлючевымиДатами.АктуальнаяCDD КАК АктуальнаяCDD
		|ПОМЕСТИТЬ ЗаказыИИзделия
		|ИЗ
		|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних,
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаЗаводСКлючевымиДатами КАК ЗаказыНаЗаводСКлючевымиДатами
		|   ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = ЗаказыНаЗаводСКлючевымиДатами.ЗаказНаЗавод
		|ГДЕ
		|	ГОД(ЗаказыНаЗаводСКлючевымиДатами.АктуальнаяCDD) = &ГодКарточек
		|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.НомерБукингЛиста <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыИИзделия.Изделие КАК Изделие,
		|	ЗаказыИИзделия.Изделие.НомерИзделия КАК НомерШасси,
		|	ЗаказыИИзделия.Изделие.МодельПродукта КАК МодельПродукта,
		|	ЗаказыИИзделия.Изделие.ТахографСЗаводаСкания КАК ТахографСЗаводаСкания,
		|	Scan_ХарактеристикиИзделияСрезПоследнихВес.Значение КАК Вес,
		|	Scan_ХарактеристикиИзделияСрезПоследнихДлина.Значение КАК Длина,
		|	ЗаказыИИзделия.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ЗаказыИИзделия.АктуальнаяCDD КАК CDD,
		|	ЗаказыИИзделия.ЗаказНаЗавод.НомерБукингЛиста КАК НомерПартии,
		|	ПолныеДанныеЗавокПоИзделию.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		|	ПолныеДанныеЗавокПоИзделию.ЗаявкаПеревозчику КАК ЗаявкаПеревозчику,
		|	ПолныеДанныеЗавокПоИзделию.Перевозчик КАК Перевозчик,
		|	ПолныеДанныеЗавокПоИзделию.АдресДоставки КАК АдресДоставки,
		|	ПолныеДанныеЗавокПоИзделию.ДатаОтгрузкиПлан КАК ДатаОтгрузкиПлан,
		|	ПолныеДанныеЗавокПоИзделию.ДатаДоставкиПлан КАК ДатаДоставкиПлан,
		|	ПолныеДанныеЗавокПоИзделию.ДатаОтгрузкиФакт КАК ДатаОтгрузкиФакт,
		|	ПолныеДанныеЗавокПоИзделию.ДатаДоставкиФакт КАК ДатаДоставкиФакт,
		|	ЗаказыИИзделия.Изделие.ПортОтправки КАК ИзделиеПортОтправки,
		|	ЗаказыИИзделия.Изделие.ПортПрихода КАК ИзделиеПортПрихода
		|ИЗ
		|	ЗаказыИИзделия КАК ЗаказыИИзделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПолныеДанныеЗавокПоИзделию КАК ПолныеДанныеЗавокПоИзделию
		|		ПО ЗаказыИИзделия.Изделие = ПолныеДанныеЗавокПоИзделию.Изделие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиИзделия.СрезПоследних(&НаДату, ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.Вес)) КАК Scan_ХарактеристикиИзделияСрезПоследнихВес
		|		ПО ЗаказыИИзделия.Изделие = Scan_ХарактеристикиИзделияСрезПоследнихВес.Изделие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиИзделия.СрезПоследних(&НаДату, ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.Длина)) КАК Scan_ХарактеристикиИзделияСрезПоследнихДлина
		|		ПО ЗаказыИИзделия.Изделие = Scan_ХарактеристикиИзделияСрезПоследнихДлина.Изделие
		|УПОРЯДОЧИТЬ ПО
		|	НомерШасси";
	
	Запрос.УстановитьПараметр("ГодКарточек", ГодКарточек);
	Запрос.УстановитьПараметр("НаДату", Дата(ГодКарточек,12,31,23,59,59));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабРезультат = РезультатЗапроса.Выгрузить();

	НомерПартии = "";
	Для Каждого Стр Из ТабРезультат Цикл

		ОбластьСтрока.Параметры.КоличествоВПартии = Scan_ВспомогательныеФункцииСервер.ПолучитьКоличествоВПартии(Стр.НомерПартии);
		ОбластьСтрока.Параметры.CDD = Стр.CDD;
		ОбластьСтрока.Параметры.ПорядковыйНомер = Scan_ВспомогательныеФункцииСервер.ПолучитьНомерВПартии(Стр.НомерПартии, Стр.Изделие);

		ОбластьСтрока.Параметры.НомерШасси = Стр.НомерШасси;
		ОбластьСтрока.Параметры.МодельПродукта = Стр.МодельПродукта;
		ОбластьСтрока.Параметры.ВесПродукта = Стр.Вес;
		ОбластьСтрока.Параметры.ДлинаПродукта = Стр.Длина;
		ОбластьСтрока.Параметры.ТахографСЗаводаСкания = Стр.ТахографСЗаводаСкания.Расшифровка;
		ОбластьСтрока.Параметры.АдресДоставки = Стр.АдресДоставки;
		ОбластьСтрока.Параметры.Перевозчик = Стр.Перевозчик;
		ОбластьСтрока.Параметры.ДатаОтгрузкиПлан = Стр.ДатаОтгрузкиПлан;
		ОбластьСтрока.Параметры.ДатаОтгрузкиФакт = Стр.ДатаОтгрузкиФакт;
		ОбластьСтрока.Параметры.ДатаДоставкиПлан = Стр.ДатаДоставкиПлан;
		ОбластьСтрока.Параметры.ДатаДоставкиФакт = Стр.ДатаДоставкиФакт;

		ОбластьСтрока.Параметры.ПортОтгрузки = Стр.ИзделиеПортОтправки;
		ОбластьСтрока.Параметры.ПортПрихода = Стр.ИзделиеПортПрихода;

		ТаблицаСохранение.Вывести(ОбластьСтрока);

	КонецЦикла;

	Возврат ТаблицаСохранение;

КонецФункции
//rarus bonmak 09.08.2021 16834 ++
//&НаСервереБезКонтекста
//Функция ПолучитьКоличествоВПартии(НомерБукингЛиста) 
//	Если НЕ ЗначениеЗаполнено(НомерБукингЛиста) Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста,
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаказыНаЗавод.Ссылка) КАК КоличествоЗаказов
//		|ИЗ
//		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
//		|ГДЕ
//		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста = &НомерБукингЛиста
//		|	И Scan_ЗаказыНаЗавод.ПометкаУдаления = ЛОЖЬ
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста";
//	Запрос.УстановитьПараметр("НомерБукингЛиста", НомерБукингЛиста);	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//		Возврат ВыборкаДетальныеЗаписи.КоличествоЗаказов;
//	Иначе
//		Возврат 0;
//	КонецЕсли;

//КонецФункции
//rarus bonmak 09.08.2021 16834 --
&НаКлиенте
Процедура СохранитьДанныеВExcel(ТаблицаСохранение, ПутьКФайлу)
	ТаблицаСохранение.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	Сообщить(НСтр("ru = 'Данные выгружены в файл '; en = 'Data uploaded into the file '") + ПутьКФайлу);
КонецПроцедуры

//// Загрузить файл от поставщика

&НаКлиенте
Процедура РО_ЗагрузитьФайлОтПоставщика(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайлНовый", ЭтотОбъект);	
	ПараметрыКоманды = Новый Структура("ИмяКоманды", СтрЗаменить(Команда.Имя, "РО_", ""));
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла",ПараметрыКоманды, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранныйФайлНовый(ЗначенияВыбранныхПараметров, Параметры) Экспорт	
	Если ЗначенияВыбранныхПараметров = Неопределено ИЛИ
		ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'")+" "+ТекущаяДата());

	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если НЕ ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьВыбранныйФайлНовыйФрагмент(ЗначенияВыбранныхПараметров);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайлНовыйЗавершение", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, ,Ложь, УникальныйИдентификатор);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранныйФайлНовыйФрагмент(Знач ЗначенияВыбранныхПараметров)
	
	ПрочитатьCOMОбъект(ЗначенияВыбранныхПараметров);	
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранныйФайлНовыйЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьВыбранныйФайлНовыйФрагмент(ЗначенияВыбранныхПараметров);

КонецПроцедуры

&наСервере	
Процедура ПрочитатьCOMОбъект(ЗначенияВыбранныхПараметров)

	//Попытка
	//    Эксель = Новый COMОбъект("Excel.Application");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	
	ВремИмяФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЗначенияВыбранныхПараметров.АдресВХранилище);
	ДвоичныеДанные.Записать(ВремИмяФайла);
	
	ФайлНаДиске = Новый Файл(ВремИмяФайла);
	Если Не ФайлНаДиске.Существует() Тогда
		Возврат;
	КонецЕсли;	
	
	//Книга = Эксель.WorkBooks.Open(СокрЛП(ВремИмяФайла)); 	
	
	//Лист = Книга.WorkSheets(1);
	//
	//Если ЗначенияВыбранныхПараметров.Свойство("ИмяКоманды") И ЗначенияВыбранныхПараметров.ИмяКоманды = "ЗагрузитьФайлОтПоставщика" Тогда
	//	МассивИзделий = Новый Массив;
	//	
	//	КолвоСтрокДокумента = Лист.Cells(1,1).SpecialCells(11).Row;; 
	//	НомерНачальнойСтроки = ЗначенияВыбранныхПараметров.НомерСтроки;
	//	
	//	нНомерШасси						= ЗначенияВыбранныхПараметров.НомерШасси;
	//	нМодель 						= ЗначенияВыбранныхПараметров.Модель;
	//	нВес 							= ЗначенияВыбранныхПараметров.Вес;
	//	нДлина 							= ЗначенияВыбранныхПараметров.Длина;
	//	нВысота 						= ЗначенияВыбранныхПараметров.Высота;
	//	нШирина 						= ЗначенияВыбранныхПараметров.Ширина;
	//	НомерБукингЛиста 				= ЗначенияВыбранныхПараметров.НомерБукингЛиста;
	//	МодельиНомерДвигателяИзделия 	= "";
	//	
	//	Для нСтрока=НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
	//		Изделие = Новый Массив(6);
	//		Если СокрЛП(Лист.Cells(нСтрока,нНомерШасси).Text) = "" И
	//			СокрЛП(Лист.Cells(нСтрока,нМодель).Text) = "" Тогда
	//			Прервать;
	//		КонецЕсли;
	//		Изделие[0] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нНомерШасси).Text,Символы.НПП, ""));
	//		Изделие[1] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нМодель).Text, Символы.НПП, ""));
	//		Изделие[2] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нВес).Text, Символы.НПП, ""));
	//		Изделие[3] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нДлина).Text, Символы.НПП, ""));
	//		Изделие[4] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нВысота).Text, Символы.НПП, ""));
	//		Изделие[5] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нШирина).Text, Символы.НПП, ""));
	//		МассивИзделий.Добавить(Изделие);
	//	КонецЦикла;
	//	ПрочитатьCOMОбъектЗагрузкаФайлаОтПоставщика(МассивИзделий, ЗначенияВыбранныхПараметров);	
	//КонецЕсли;
	
	//Эксель.Quit();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ВремИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);  
	Исключение		
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Возврат;
	КонецЕсли; 	
	
	// rarus tenkam 24.01.2021 mantis 18781 +++
	//ТекстTotal = ОбластьДанных.НайтиТекст("Total");
	//Если ТекстTotal = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	// rarus tenkam 24.01.2021 mantis 18781 ---
	
	МассивИзделий = Новый Массив;
		
	// rarus tenkam 24.01.2021 mantis 18781 +++
	//КолвоСтрокДокумента = ТекстTotal.Верх - 1; 
	КолвоСтрокДокумента = ТабличныйДокумент.ВысотаТаблицы;
	// rarus tenkam 24.01.2021 mantis 18781 ---
	НомерНачальнойСтроки = ЗначенияВыбранныхПараметров.НомерСтроки;
	
	нНомерШасси					 = ЗначенияВыбранныхПараметров.НомерШасси;
	нМодель 					 = ЗначенияВыбранныхПараметров.Модель;
	нВес 						 = ЗначенияВыбранныхПараметров.Вес;
	нДлина 						 = ЗначенияВыбранныхПараметров.Длина;
	// rarus tenkam 24.01.2021 mantis 18781 +++
	//нВысота 					 = ЗначенияВыбранныхПараметров.Высота;
	//нШирина 					 = ЗначенияВыбранныхПараметров.Ширина;
	// rarus tenkam 24.01.2021 mantis 18781 +++
	НомерБукингЛиста 			 = ЗначенияВыбранныхПараметров.НомерБукингЛиста;
	МодельиНомерДвигателяИзделия = "";
		
	Для нСтрока = НомерНачальнойСтроки По КолвоСтрокДокумента Цикл
		ОбластьШасси  = ОбластьДанных.Область(нСтрока, нНомерШасси, нСтрока, нНомерШасси);
		ОбластьМодель = ОбластьДанных.Область(нСтрока, нМодель,     нСтрока, нМодель);
		ОбластьВес    = ОбластьДанных.Область(нСтрока, нВес,        нСтрока, нВес);
		ОбластьДлина  = ОбластьДанных.Область(нСтрока, нДлина,      нСтрока, нДлина);
		// rarus tenkam 24.01.2021 mantis 18781 +++
		//ОбластьВысота = ОбластьДанных.Область(нСтрока, нВысота, нСтрока, нВысота);
		//ОбластьШирина = ОбластьДанных.Область(нСтрока, нШирина, нСтрока, нШирина);
		// rarus tenkam 24.01.2021 mantis 18781 ---
	
		ТекстШасси  = СокрЛП(СтрЗаменить(ОбластьШасси.Текст,  Символы.НПП, ""));
		ТекстМодель = СокрЛП(СтрЗаменить(ОбластьМодель.Текст, Символы.НПП, ""));
		ТекстВес    = СокрЛП(СтрЗаменить(ОбластьВес.Текст,    Символы.НПП, ""));
		ТекстДлина  = СокрЛП(СтрЗаменить(ОбластьДлина.Текст,  Символы.НПП, ""));
		// rarus tenkam 24.01.2021 mantis 18781 +++
		//ТекстВысота = СокрЛП(СтрЗаменить(ОбластьВысота.Текст, Символы.НПП, ""));
		//ТекстШирина = СокрЛП(СтрЗаменить(ОбластьШирина.Текст, Символы.НПП, ""));
		// rarus tenkam 24.01.2021 mantis 18781 ---
		
		Если  ТекстШасси  = "" 
			И ТекстМодель = "" 
			Тогда
			Прервать;
		КонецЕсли;   		
		
		Изделие = Новый Массив(6);
		Изделие[0] = ТекстШасси;
		Изделие[1] = ТекстМодель;
		Изделие[2] = ТекстВес;
		Изделие[3] = ТекстДлина;
		// rarus tenkam 24.01.2021 mantis 18781 +++
		//Изделие[4] = ТекстВысота;
		//Изделие[5] = ТекстШирина;
		// rarus tenkam 24.01.2021 mantis 18781 ---
		МассивИзделий.Добавить(Изделие);
	КонецЦикла;
	
	ПрочитатьCOMОбъектЗагрузкаФайлаОтПоставщика(МассивИзделий, ЗначенияВыбранныхПараметров);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьCOMОбъектЗагрузкаФайлаОтПоставщика(МассивИзделий, ЗначенияВыбранныхПараметров)	
	//[0] = НомерШасси [1] = Модель [2] = Вес [3] = Длина [4] = Высота [5] = Ширина
	
	МассивПродуктов 	= Новый Массив; // будут ссылки на изделия
	
	НомерБукингЛиста 				= ЗначенияВыбранныхПараметров.НомерБукингЛиста;
	МодельиНомерДвигателяИзделия 	= "";
	
	Для нСтрока=0 ПО МассивИзделий.Количество()-1 Цикл	
		Если СокрЛП(МассивИзделий[нСтрока][0]) <> "" Тогда
			ИскомоеИзделие = ПолучитьИзделиеПоШасси(СокрЛП(МассивИзделий[нСтрока][0]));
			Если ЗначениеЗаполнено(ИскомоеИзделие)  Тогда
				ИзделиеОбъект 	= ИскомоеИзделие.ПолучитьОбъект();
				МодельИзделия 	= СтрЗаменить(МассивИзделий[нСтрока][1], Символы.НПП, "");
				ТекВес 			= СтрЗаменить(МассивИзделий[нСтрока][2], Символы.НПП, "");
				ВесИзделия 		= ?(ЗначениеЗаполнено(ТекВес), Число(ТекВес),0);
				ТекДлина 		= СтрЗаменить(МассивИзделий[нСтрока][3], Символы.НПП, "");
				ДлинаИзделия 	= ?(ЗначениеЗаполнено(ТекДлина), Число(ТекДлина),0);
				// rarus tenkam 24.01.2021 mantis 18781 +++
				//ТекВысота 		= СтрЗаменить(МассивИзделий[нСтрока][4], Символы.НПП, "");
				//ВысотаИзделия 	= ?(ЗначениеЗаполнено(ТекВысота), Число(ТекВысота),0);
				//ТекШирина 		= СтрЗаменить(МассивИзделий[нСтрока][5], Символы.НПП, "");
				//ШиринаИзделия 	= ?(ЗначениеЗаполнено(ТекШирина), Число(ТекШирина),0);
				// rarus tenkam 24.01.2021 mantis 18781 ---
				// перевод значений в миллиметры
				Если ДлинаИзделия < 1000 Тогда
					ДлинаИзделия = ДлинаИзделия*1000;
				КонецЕсли;
				// rarus tenkam 24.01.2021 mantis 18781 +++
				//Если ВысотаИзделия < 1000 Тогда
				//	ВысотаИзделия = ВысотаИзделия*1000;
				//КонецЕсли;
				//Если ШиринаИзделия < 1000 Тогда
				//	ШиринаИзделия = ШиринаИзделия*1000;
				//КонецЕсли;
				// rarus tenkam 24.01.2021 mantis 18781 ---
		
				// rarus tenkam 24.01.2021 mantis 18781 +++  				
				//ИзделиеОбъект.ПортОтправки = ЗначенияВыбранныхПараметров.ПортОтправки;
				//ИзделиеОбъект.ПортПрихода = ЗначенияВыбранныхПараметров.ПортПрихода;
				//ПроверитьКарточкуЗаказаНаСоответствие(ИзделиеОбъект,МодельИзделия,МодельиНомерДвигателяИзделия,ВесИзделия,ДлинаИзделия,ВысотаИзделия,ШиринаИзделия,НомерБукингЛиста,ЗначенияВыбранныхПараметров);
				//ИзделиеОбъект.Записать();
				//ТекИзделие = ИзделиеОбъект.Ссылка;
				
				ТекИзделие = ОбновитьДанныеИзделияИЗаказа(ИскомоеИзделие,МодельИзделия,ВесИзделия,ДлинаИзделия,ЗначенияВыбранныхПараметров);
				// rarus tenkam 24.01.2021 mantis 18781 ---
				 
				Если ЗначениеЗаполнено(ТекИзделие) Тогда 
					МассивПродуктов.Добавить(ТекИзделие);
				КонецЕсли;
				
				// rarus tenkam 24.01.2021 mantis 18781 +++  				
				//ПаромнаяЛиния = ЗначенияВыбранныхПараметров.ПаромнаяЛиния;
				//ВидЗначения = ПредопределенноеЗначение("Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.ПаромнаяЛиния");
				//Если ЗначениеЗаполнено(ПаромнаяЛиния)Тогда
				//	ЗаписатьРегистрНаСервере(ТекИзделие,ВидЗначения,ПаромнаяЛиния, ПараметрыСеанса.ТекущийПользователь);
				//КонецЕсли;
				// rarus tenkam 24.01.2021 mantis 18781 ---  				
				
			Иначе
				Сообщить(НСтр("ru = 'Продукт с номером шасси '; en = 'Product with Chassis '")+МассивИзделий[нСтрока][0]+ НСтр("ru = ' не найден в базе'; en = ' not found'"));
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НомерБукингЛиста) Тогда
		
		ТекстНапоминания = " № " + НомерБукингЛиста + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДФ=""дд.ММ.гггг' г.'""") +
		" Дата CDD поставщика = " + Формат(ЗначенияВыбранныхПараметров.CDD, "ДФ=""дд.ММ.гггг' г.'""") + ", Количество продуктов - " + МассивПродуктов.Количество() + ".";
		Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОЗагрузкеБукингЛиста", "Загружен файл от поставщика по букинг листу" + ТекстНапоминания);					
		                                                              		
		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
			ПараметрыОтправки = Новый Структура("ДополнительныйТекст", ТекстНапоминания);	
			РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонЗагрузкаБукингЛиста", , ПараметрыОтправки);
		Иначе	
			Текст = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаУведомленияОЗагрузкеБукингЛиста") + ТекстНапоминания;
			Тема = Scan_ПраваИНастройки.Scan_Право("ТемаПисьмаУведомленияОЗагрузкеБукингЛиста"); 
			ПисьмоБукингЛист= Scan_ВспомогательныеФункцииСервер.ОтправитьПисьмоОЗагрузкеПоПраву("УведомлятьОЗагрузкеБукингЛиста", Текст, Тема);
		КонецЕсли; 	
		
	КонецЕсли;
	
	Если ЗначенияВыбранныхПараметров.Свойство("МестоДоставки") И МассивПродуктов.Количество() <> 0 Тогда
		СформированноеПеремещение = СформироватьЗаписатьПеремещение(ЗначенияВыбранныхПараметров.МестоДоставки, ЗначенияВыбранныхПараметров.CDD, МассивПродуктов);
		Если ЗначениеЗаполнено(СформированноеПеремещение) Тогда			
			Сообщить(НСтр("ru = 'Записан документ '; en = 'Document saved '") + СформированноеПеремещение); 			
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеИзделияИЗаказа(ИзделиеСсылка,Модель,Вес,Длина,ЗначенияВыбранныхПараметров) // rarus tenkam 24.01.2021 mantis 18781 +++
	НаДату = ТекущаяДатаСеанса(); // Rarus tenkam 28.01.2021 АПК вместо ТекущаяДата()
	НомерБукингЛиста = ЗначенияВыбранныхПараметров.НомерБукингЛиста;
	
	// Записываем в регистр Вес и Длину
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(ИзделиеСсылка, Вес, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Вес, НаДату);	
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(ИзделиеСсылка, Длина, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Длина, НаДату);	

	ПаромнаяЛиния = ЗначенияВыбранныхПараметров.ПаромнаяЛиния;
	ВидЗначения = ПредопределенноеЗначение("Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.ПаромнаяЛиния");
	Если ЗначениеЗаполнено(ПаромнаяЛиния)Тогда
		Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(ИзделиеСсылка, ПаромнаяЛиния, ВидЗначения, НаДату);	
	КонецЕсли;
				
	// БукингЛист
	ЗаказНаЗавод = ИзделиеСсылка.ЗаказнаЗавод;

	Если ЗначениеЗаполнено(ЗаказНаЗавод) Тогда	

		//Проверяем НомерБукингЛиста
		Если ЗначениеЗаполнено(ЗаказНаЗавод.НомерБукингЛиста) И
			ЗаказНаЗавод.НомерБукингЛиста <> НомерБукингЛиста Тогда // (если такой же номер, то перезапишем)
	
			Сообщить(НСтр("ru = 'Ошибка: в заказе на завод '; en = 'Error: in order '")+ЗаказНаЗавод+НСтр("ru = ' номер букинг листа уже заполнен'; en = ' booking list number already filled in'"));

		Иначе
			ЗаказНаЗаводОбъект = ЗаказНаЗавод.ПолучитьОбъект();
			ЗаказНаЗаводОбъект.НомерБукингЛиста = НомерБукингЛиста;
			ЗаказНаЗаводОбъект.ЕстьБукингЛист = Истина;
			
			ЗаказНаЗаводОбъект.ДатаБукингЛиста = ЗначенияВыбранныхПараметров.ДатаБукингЛиста;
			
			ЗаказНаЗаводОбъект.ДополнительныеСвойства.Вставить("ЭтоФайлОтПоставщика", Истина);
			        			
			Попытка
				ЗаказНаЗаводОбъект.Записать();
			Исключение
				ВывестиСообщениеПол(НСтр("ru='Не удалось записать заказ на завод %1. Ошибка: %2'"),,,,,ЗаказНаЗаводОбъект.Ссылка, ОписаниеОшибки());
			КонецПопытки;

			// Запишем ключевую дату
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ЗаказНаЗаводОбъект.Ссылка, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначенияВыбранныхПараметров.ДатаБукингЛиста,
									Перечисления.Scan_КлючевыеДаты.ДатаБукингЛиста, ТекущаяДатаСеанса()); // Rarus tenkam 28.01.2021 АПК вместо ТекущаяДата()			
			
			// Запишем ключевую дату
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ЗаказНаЗаводОбъект.Ссылка, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначенияВыбранныхПараметров.CDD,
									Перечисления.Scan_КлючевыеДаты.CDDПоставщик, ТекущаяДатаСеанса()); // Rarus tenkam 28.01.2021 АПК вместо ТекущаяДата()			

		КонецЕсли;
	Иначе 
		ВывестиСообщениеПол(НСтр("ru='У продкта %1 нет заказа на завод'"),,,,,ИзделиеСсылка);
	КонецЕсли; 
	
	ИзделиеОбъект = ИзделиеСсылка.ПолучитьОбъект();
	ИзделиеОбъект.ПортОтправки = ЗначенияВыбранныхПараметров.ПортОтправки;
	ИзделиеОбъект.ПортПрихода = ЗначенияВыбранныхПараметров.ПортПрихода;
	
	Попытка
		ИзделиеОбъект.Записать();
	Исключение
		ВывестиСообщениеПол(НСтр("ru='Не удалось записать продукт %1. Ошибка: %2'"),,,,,ИзделиеСсылка, ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ИзделиеОбъект.Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзделиеПоШасси(НомерШасси)
	Попытка
		СсылкаНомерШасси = Формат(Число(НомерШасси), "ЧГ=");
	Исключение
	КонецПопытки;

	СсылкаНаИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("НомерИзделия",СсылкаНомерШасси);
	Возврат СсылкаНаИзделие;	
КонецФункции

// rarus tenkam 24.01.2021 mantis 18781 +++
//&НаСервере
//Процедура ПроверитьКарточкуЗаказаНаСоответствие(Изделие,Модель,МодельИНомерДвигателя = "",Вес,Длина,Высота,Ширина,НомерБукингЛиста,ЗначенияВыбранныхПараметров)
//	НаДату = ТекущаяДата();

//	// Обработаем только Модель двигателя ТС, т.к. Номер двигателя ТС приходит из 1БД
//	МодельДвигателя = Формат(Лев(МодельИНомерДвигателя,стрДлина(МодельИНомерДвигателя)-8),"ЧГ=");
//	МодельДвигателя = ?(МодельДвигателя = "", Справочники.Scan_МоделиПродуктов.ПустаяСсылка(), МодельДвигателя);	
//	
//	Если ЗначениеЗаполнено(МодельДвигателя) Тогда
//		НайденнаяСсылка = Справочники.Scan_МоделиПродуктов.НайтиПоНаименованию(МодельДвигателя);
//		Если НайденнаяСсылка = Справочники.Scan_МоделиПродуктов.ПустаяСсылка() Тогда
//			НоваяМодельДвигателя = Справочники.Scan_МоделиПродуктов.СоздатьЭлемент();
//			НоваяМодельДвигателя.Наименование = МодельДвигателя;
//			НоваяМодельДвигателя.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania;
//			НоваяМодельДвигателя.Записать();
//			НайденнаяСсылка = НоваяМодельДвигателя.Ссылка;

//			Сообщить(НСтр("ru = 'В справочнике ""Модели продуктов"" создана новая модель: '; en = 'In ""Models"" catalogue new model was created: '")+ НоваяМодельДвигателя.Ссылка);
//		КонецЕсли; 
//		Если Изделие.МодельДвигателяТС <> НайденнаяСсылка Тогда
//			Изделие.МодельДвигателяТС = НайденнаяСсылка;
//		КонецЕсли;
//	КонецЕсли;

//	// Записываем в регистр Вес и Длину
//	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Вес, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Вес, НаДату);	
//	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Длина, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Длина, НаДату);	

//	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Высота, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Высота, НаДату);
//	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Ширина, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Ширина, НаДату);

//	// БукингЛист
//	ЗаказНаЗавод = Изделие.ЗаказнаЗавод;

//	Если ЗначениеЗаполнено(ЗаказНаЗавод) Тогда	

//		//Проверяем НомерБукингЛиста
//		Если ЗначениеЗаполнено(ЗаказНаЗавод.НомерБукингЛиста) И
//			ЗаказНаЗавод.НомерБукингЛиста <> НомерБукингЛиста Тогда // (если такой же номер, то перезапишем)
//	
//			Сообщить(НСтр("ru = 'Ошибка: в заказе на завод '; en = 'Error: in order '")+ЗаказНаЗавод+НСтр("ru = ' номер букинг листа уже заполнен'; en = ' booking list number already filled in'"));

//		Иначе
//			ЗаказНаЗаводОбъект = ЗаказНаЗавод.ПолучитьОбъект();
//			ЗаказНаЗаводОбъект.НомерБукингЛиста = НомерБукингЛиста;
//			ЗаказНаЗаводОбъект.ЕстьБукингЛист = Истина;
//	
//			ЗаказНаЗаводОбъект.ДатаБукингЛиста = ЗначенияВыбранныхПараметров.ДатаБукингЛиста;

//			ЗаказНаЗаводОбъект.ДополнительныеСвойства.Вставить("ЭтоФайлОтПоставщика", Истина);

//			ЗаказНаЗаводОбъект.Записать();
//			
//			// Запишем ключевую дату
//			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ЗаказНаЗаводОбъект.Ссылка, 
//									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначенияВыбранныхПараметров.ДатаБукингЛиста,
//									Перечисления.Scan_КлючевыеДаты.ДатаБукингЛиста, ТекущаяДата());			
//			
//			// Запишем ключевую дату
//			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ЗаказНаЗаводОбъект.Ссылка, 
//									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначенияВыбранныхПараметров.CDD,
//									Перечисления.Scan_КлючевыеДаты.CDDПоставщик, ТекущаяДата());			

//		КонецЕсли;
//	Иначе 
//		Сообщить("У продукта "+Изделие.Ссылка+ " нет заказа на завод");
//	КонецЕсли; 
//КонецПроцедуры

//&НаСервере
//Процедура ЗаписатьРегистрНаСервере(Изделие,ВидЗначения,Значение,Пользователь)
//	ДатаСеанса = ТекущаяДатаСеанса();
//	Запись = РегистрыСведений.Scan_ХарактеристикиИзделия.СоздатьМенеджерЗаписи();
//	Запись.Период = ДатаСеанса;
//	Запись.Изделие = Изделие;
//	Запись.ВидЗначения = ПредопределенноеЗначение("Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.ПаромнаяЛиния");
//	Запись.Прочитать();
//	Если Не Запись.Выбран() Тогда
//		Запись.Период = ДатаСеанса;
//		Запись.Изделие = Изделие;
//		Запись.ВидЗначения = ВидЗначения;
//		Запись.Значение = Значение;
//		Запись.Пользователь = Пользователь;
//		Попытка
//			Запись.Записать();
//		Исключение
//			ВызватьИсключение ОписаниеОшибки();
//		КонецПопытки;
//	Иначе
//		Запись.Период = ДатаСеанса;
//		Запись.Изделие = Изделие;
//		Запись.ВидЗначения = ВидЗначения;
//		Запись.Значение = Значение;
//		Запись.Пользователь = Пользователь;
//		Попытка
//			Запись.Записать(Ложь);
//		Исключение
//			ВызватьИсключение ОписаниеОшибки();
//		КонецПопытки;
//	КонецЕсли;
//	Если Scan_ПраваИНастройки.Scan_Право("ЗаполнятьРегистрСводнаяИнформацияПоПродукту") Тогда
//		РегистрыСведений.Scan_СводнаяИнформацияПоПродукту.ЗаписьЗначенияРегистраСводнаяИнформацияПоПродукту(Изделие, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Изделие,"ЗаказНаЗавод") ,ВидЗначения,Значение);	// rarus tenkam 29.06.2021 mantis 17871 + (добавлен заказ на завод)
//	КонецЕсли;
//КонецПроцедуры

// rarus tenkam 24.01.2021 mantis 18781 ---

&НаСервереБезКонтекста
Функция СформироватьЗаписатьПеремещение(МестоДоставки, CDDПоставщик, МассивПродуктов)
	Возврат Документы.Scan_ПеремещениеИзделий.СформироватьЗаписатьПеремещение(МестоДоставки, CDDПоставщик, МассивПродуктов);		
КонецФункции

//// Загрузить данные по полисам ОСАГО

&НаКлиенте
Процедура РО_ЗагрузитьДанныеПоПолисамОСАГО(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайл", ЭтотОбъект);
	ПараметрыКоманды = Новый Структура("ИмяКоманды", СтрЗаменить(Команда.Имя, "РО_", ""));
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла",ПараметрыКоманды, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранныйФайл(ЗначенияВыбранныхПараметров, Параметры) Экспорт

	Если ЗначенияВыбранныхПараметров = Неопределено ИЛИ
		ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;

	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'")+" "+ТекущаяДата());

	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если НЕ ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", АдресВХранилище);
		ПрочитатьТабличныйДокумент(АдресВХранилище,ЗначенияВыбранныхПараметров);	
	   		
		Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());

	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайлЗавершение", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, ,Ложь, УникальныйИдентификатор);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранныйФайлЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ПрочитатьТабличныйДокумент(ПомещенныеФайлы[0].Хранение,ЗначенияВыбранныхПараметров);	
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
	
КонецПроцедуры

Процедура ПрочитатьТабличныйДокумент(Адрес,ЗначенияВыбранныхПараметров)  

	Если ЗначенияВыбранныхПараметров.ФорматФайла = "xls" Тогда
		ФайлПриемник = ПолучитьИмяВременногоФайла("xls");
	ИначеЕсли ЗначенияВыбранныхПараметров.ФорматФайла = "xlsx" Тогда
		ФайлПриемник = ПолучитьИмяВременногоФайла("xlsx");
	КонецЕсли;

	ДанныеХранилища = ПолучитьИзВременногоХранилища(Адрес);
    ДанныеХранилища.Записать(ФайлПриемник);
	ТабДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабДокумент.Прочитать(ФайлПриемник, СпособЧтенияЗначенийТабличногоДокумента.Значение); 

	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	Попытка
		УдалитьФайлы(ФайлПриемник);
	Исключение
	КонецПопытки;
		
	Если ЗначенияВыбранныхПараметров.Свойство("ИмяКоманды") И ЗначенияВыбранныхПараметров.ИмяКоманды = "ЗагрузитьДанныеПоПолисамОСАГО" Тогда
		ПрочитатьТабличныйДокументЗагрузкаПоПолисамОСАГО(ТабДокумент, ЗначенияВыбранныхПараметров);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьТабличныйДокументЗагрузкаПоПолисамОСАГО(ТабДокумент, ЗначенияВыбранныхПараметров)
	КолвоСтрокДокумента = ТабДокумент.ВысотаТаблицы; 
	НомерНачальнойСтроки = ЗначенияВыбранныхПараметров.НомерСтроки;
	// Заполним номера искомых колонок
	нНачало = ЗначенияВыбранныхПараметров.ДатаНачалаОСАГО;
	нКонец = ЗначенияВыбранныхПараметров.ДатаОкончанияОСАГО;
	нСерия = ЗначенияВыбранныхПараметров.СерияОСАГО;
	нНомер = Число(нСерия)+1;
	нVIN = ЗначенияВыбранныхПараметров.VINИзделия;
	Для нСтрока=НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
		Если СокрЛП(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст) = "" И
			 СокрЛП(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нСерия, Символы.НПП, "")).Текст) = "" И
			 СокрЛП(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНомер, Символы.НПП, "")).Текст) = "" Тогда
			 Прервать;
		Иначе	
		Если ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст <> "" Тогда
			ИскомоеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("VIN",ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст);
			Если ЗначениеЗаполнено(ИскомоеИзделие)  Тогда
			    ИзделиеОбъект = ИскомоеИзделие.ПолучитьОбъект();
				ИзделиеОбъект.ДатаНачалаДействияПолиса 	= Дата(ПреобразоватьДату(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНачало, Символы.НПП, "")).Текст)); 
				ИзделиеОбъект.ДатаИстеченияПолиса 		= Дата(ПреобразоватьДату(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нКонец, Символы.НПП, "")).Текст));
				ИзделиеОбъект.НомерПолисаОСАГО = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нСерия, Символы.НПП, "")).Текст + ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНомер, Символы.НПП, "")).Текст;
				ИзделиеОбъект.Записать();
			Иначе 
				Сообщить(НСтр("ru = 'Продукт с VIN - номером '; en = 'Product with VIN '")+ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст+НСтр("ru = ' не найден в базе'; en = ' not found'"));
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьДату (СтараяДата)
	ДатаБезТочек = СтрЗаменить(СтараяДата,".","");
	День = Лев(ДатаБезТочек,2);
	Год = "20"+Прав(ДатаБезТочек,2);
	Месяц = Прав(Лев(ДатаБезТочек,4),2);
	
	НоваяДата = Год+Месяц+День;
	Возврат НоваяДата;
КонецФункции	

//// Загрузить данные от Скания-Питер

&НаКлиенте
Процедура РО_ЗагрузитьДанныеОтСканияПитер(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьФайлОтСканияПитер",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиДанныхОтСканияПитер",, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьФайлОтСканияПитер(ЗначенияВыбранныхПараметров, Параметры) Экспорт  
		  
	Если ЗначенияВыбранныхПараметров = Неопределено ИЛИ
		ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'")+" "+ТекущаяДата());
	
	#Если НЕ ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ЗначенияВыбранныхПараметров.ПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные, Новый УникальныйИдентификатор);
		ЗагрузитьФайлОтСканияПитерНаСервере(АдресВХранилище, ЗначенияВыбранныхПараметров);	
		
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ЗначенияВыбранныхПараметров.ПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьФайлОтСканияПитерЗавершение", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, ,Ложь, УникальныйИдентификатор);
	#КонецЕсли
		
	Сообщить(Нстр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьФайлОтСканияПитерНаСервере(Адрес,ЗначенияВыбранныхПараметров) Экспорт
	ФайлПриемник = ПолучитьИмяВременногоФайла("xlsx");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(Адрес);
	ДанныеХранилища.Записать(ФайлПриемник);
	ТабДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабДокумент.Прочитать(ФайлПриемник, СпособЧтенияЗначенийТабличногоДокумента.Значение); 
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	Попытка
		УдалитьФайлы(ФайлПриемник);
	Исключение
	КонецПопытки;
	SR = "KD Stock refill";
	NSR = "KD Non Stock Refill";
	УстанавливаемыйПризнак = Ложь;
	МассивИзмененныхИзделий = Новый Массив;
	КолвоСтрокДокумента = ТабДокумент.ВысотаТаблицы; 
	НомерНачальнойСтроки = 2;
	
	Для нСтрока = НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
		СтрокаЗаказаНаЗавод = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C1").Текст; 
		
		// rarus agar 05.11.2020 16010 ++
		//НомерЗаказаНаЗавод = СтрЗаменить(СтрокаЗаказаНаЗавод,Символы.НПП,"");
		СтрокаЗаказаНаЗавод = СтрЗаменить(СтрокаЗаказаНаЗавод, Символы.НПП, "");
		
		Попытка
			ЧислоСтроки = Число(СтрокаЗаказаНаЗавод);
			НомерЗаказаЧисло  = Истина;
		Исключение 
			НомерЗаказаЧисло  = Ложь;
		КонецПопытки;
		
		НомерЗаказаНаЗавод = СокрЛП(СтрЗаменить(СтрокаЗаказаНаЗавод, Символ(8203),""));
		Если НомерЗаказаЧисло Тогда
			КолВоЗнаковЧисло = СтрДлина(ЧислоСтроки);
			Для нПрефикса = 0 По (9 - КолВоЗнаковЧисло) Цикл
				НомерЗаказаНаЗавод = "0" + НомерЗаказаНаЗавод;
			КонецЦикла;
		КонецЕсли;
		// rarus agar 05.11.2020 16010 --
		
		СтрокаШасси = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C3").Текст;
		НомерШасси = СтрЗаменить(СтрокаШасси,Символы.НПП,"");
		
		НаименованиеСпецификации = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C5").Текст;
		
		ПризнакSR = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C6").Текст;

		Если ПризнакSR = SR Тогда
			УстанавливаемыйПризнак = Истина;
		ИначеЕсли ПризнакSR = NSR Тогда
			УстанавливаемыйПризнак = ложь;
		Иначе	
			Сообщить("Не удалось распознать признак KD Stock Refill. Проверьте загружаемый файл");
			Продолжить;
		КонецЕсли;
		
		ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(НомерЗаказаНаЗавод);
		
		Если ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка() Тогда
			Сообщить(Нстр("ru = 'Заказ на завод №  '; en = 'Order '")+ НомерЗаказаНаЗавод +Нстр("ru = ' не найден'; en = 'not found'"));
			Продолжить;
		КонецЕсли;
		
		Изделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("НомерИзделия",НомерШасси);
		Если Изделие = Справочники.Scan_Изделия.ПустаяСсылка() Тогда			
			Сообщить(Нстр("ru = 'Шасси № '; en = 'Chassis '")+ НомерШасси +Нстр("ru = ' не найдено'; en = ' not found'"));
			Продолжить;
		КонецЕсли; 
		
		Если Изделие.ЗаказНаЗавод <> ЗаказНаЗавод Тогда
			Сообщить("Указанный в файле Заказ на завод № "+НомерЗаказаНаЗавод + " не соответствует Шасси № "+НомерШасси);
			Продолжить;
		КонецЕсли;
		
		Спецификация = Справочники.Scan_СпецификацииПродуктов.НайтиПоНаименованию(НаименованиеСпецификации);
		Если Спецификация = Справочники.Scan_СпецификацииПродуктов.ПустаяСсылка() Тогда
			Сообщить("Спецификация № "+ НаименованиеСпецификации  +" не найдена");
			Продолжить;
		КонецЕсли;
		
		Если Изделие.СпецификацияПродукта <> Спецификация Тогда
			Сообщить("Указанная в файле спецификация "+НаименованиеСпецификации+" не соответствует шасси № "+НомерШасси);
			Продолжить;
		КонецЕсли;
		
		Если Спецификация.SR<>УстанавливаемыйПризнак Тогда
			СпецификацияОб = Спецификация.ПолучитьОбъект();
			Спецификацияоб.SR = УстанавливаемыйПризнак;
			Попытка
				СпецификацияОб.Записать();
				Если УстанавливаемыйПризнак = Истина Тогда
					Сообщить("У спецификации "+ НаименованиеСпецификации + " установлен признак "+SR);
				Иначе
					Сообщить("У спецификации "+ НаименованиеСпецификации + " установлен признак "+NSR);
				КонецЕсли;
			Исключение
				Сообщить("У спецификации "+ НаименованиеСпецификации + " не удалось установить признак SR/NSR");
				Продолжить;
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры  

&НаКлиенте
Процедура ЗагрузитьФайлОтСканияПитерЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьФайлОтСканияПитерНаСервере(ПомещенныеФайлы[0].Хранение,ЗначенияВыбранныхПараметров);	
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
	
КонецПроцедуры

//rarus vikhle 28.10.2020 mt 16328 +++
&НаКлиенте
Процедура РО_ОткрытьDDИнформер(Команда)
	
	ОткрытьФорму("Обработка.Scan_DDИнформер.Форма");
	
КонецПроцедуры
//rarus vikhle 28.10.2020 mt 16328 ---

//// Настройки отображения закладок

&НаКлиенте
Процедура РО_НастройкиОтображенияЗакладок(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь()); 
	
	Описание = Новый ОписаниеОповещения("ОкончаниеОбновитьОтображение",ЭтотОбъект);
	ОткрытьФорму("Обработка.Scan_РМОтделаЛогистики.Форма.ФормаНастройкиОтображенияЗакладок",ПараметрыФормы,,,,,Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеОбновитьОтображение(ЗначениеВозвращаемыхДанных, Параметры) Экспорт
	УстановитьВидимостьЗакладокПоНастройкам();		
КонецПроцедуры

#КонецОбласти
// rarus tenkam 17.04.2020 mantis 15715 ---

#Область Страница_ЗаявкиНаОтгрузку
&НаКлиенте
Процедура ПерейтиВМонитор(Команда)//rarus pechek 01.07.2020 mantis 16234 +++
	
	МассивВыбранныхСтрок = Элементы.ЗаявкиНаОтгрузку.ВыделенныеСтроки;
	
	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		ДатаОтгрузки = ТекущаяДата();
	ИначеЕсли МассивВыбранныхСтрок.Количество() > 1 Тогда
		Сообщить(НСтр("ru = 'Выберите один документ'; en = 'Select one document'"));                            
		Возврат;
	Иначе
		ДатаОтгрузки = Элементы.ЗаявкиНаОтгрузку.ТекущиеДанные.ДатаОтгрузки;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ДатаОтгрузки", ДатаОтгрузки);
	ОткрытьФорму("Обработка.Scan_МониторБронированияОтгрузок.Форма",ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаявкиНаОтгрузкуПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) //rarus pechek 01.07.2020 mantis 16234 +++
	
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	МассивСсылок = Строки.ПолучитьКлючи();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_СтатусыЗаявокНаОтгрузку.Ссылка КАК Ссылка,
	               |	Scan_СтатусыЗаявокНаОтгрузку.ЦветФона КАК ЦветФона,
	               |	Scan_СтатусыЗаявокНаОтгрузку.ЦветТекста КАК ЦветТекста,
	               |	Scan_СтатусыЗаявокНаОтгрузку.Шрифт КАК Шрифт
	               |ИЗ
	               |	Справочник.Scan_СтатусыЗаявокНаОтгрузку КАК Scan_СтатусыЗаявокНаОтгрузку";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Scan_ЗаявкаНаОтгрузку.Ссылка КАК СсылкаДокумент
		               |ИЗ
		               |	Документ.Scan_ЗаявкаНаОтгрузку КАК Scan_ЗаявкаНаОтгрузку
		               |ГДЕ
		               |	Scan_ЗаявкаНаОтгрузку.Статус = &Статус
		               |	И Scan_ЗаявкаНаОтгрузку.Ссылка В(&МассивСсылок)";
		
		Запрос.УстановитьПараметр("Статус",       Выборка.Ссылка);
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаСписка = Строки[ВыборкаДетальныеЗаписи.СсылкаДокумент];
			Для Каждого КолонкаСписка Из СтрокаСписка.Оформление Цикл
				ЦветФона = Выборка.ЦветФона.Получить();
				Если ЦветФона <> ЧерныйЦвет Тогда
					КолонкаСписка.Значение.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
				КонецЕсли;
				КолонкаСписка.Значение.УстановитьЗначениеПараметра("ЦветТекста", Выборка.ЦветТекста.Получить());
				КолонкаСписка.Значение.УстановитьЗначениеПараметра("Шрифт",      Выборка.Шрифт.Получить());
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область Страница_ДвижениеИзделий

&НаКлиенте
Процедура ПакетноеПроведениеДвиженийИзделий(Команда) //rarus bonmak 18.05.2020 14375 ++
	ПараметрыФормы = Новый Структура;	      
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокДвижениеИзделий.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0], "НакладнаяТС");
	Если МассивЭлементовОтбора.Количество() > 0 И МассивЭлементовОтбора[0].Использование
		И ЗначениеЗаполнено(МассивЭлементовОтбора[0].ПравоеЗначение) Тогда
		ПараметрыФормы.Вставить("НомерНакладной",МассивЭлементовОтбора[0].ПравоеЗначение);
	КонецЕсли;
	//rarus bonmak 17.08.2020 14375 ++
	ТекДанныеСтрока = Элементы.СписокДвижениеИзделий.ТекущиеДанные; 
	Если ТекДанныеСтрока <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ТекДанныеСтрока.НакладнаяТС) Тогда 
			ПараметрыФормы.Вставить("НомерНакладной", ТекДанныеСтрока.НакладнаяТС);
		КонецЕсли;
	КонецЕсли;
	//rarus bonmak 17.08.2020 14375 --
	ОткрытьФорму("Обработка.Scan_РМОтделаЛогистики.Форма.ФормаПакетноеПроведениеДокументов",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры //rarus bonmak 18.05.2020 14375 --

#КонецОбласти
