//rarus sergei 29.06.2016 mantis 7167 ++
&НаКлиенте
Перем мВыбраныСсылки, мВыбраныДокументы, мВыбраныGuid;

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГОМ

&НаКлиенте
Процедура СтокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если Поле.Имя = "СтокФлаг" Тогда
		//СтандартнаяОбработка = Ложь;
		//СсылкаИзделие = ПолучитьСсылкуНаИзделие(ВыбраннаяСтрока);
		//СсылкаДокумент = ПолучитьСсылкуНаДокумент(ВыбраннаяСтрока);
		СсылкаGuid = ПолучитьСсылкуGuid(ВыбраннаяСтрока);
		//мИндекс = мВыбраныСсылки.Найти(СсылкаИзделие);
		мИндекс = мВыбраныGuid.Найти(СсылкаGuid);
		Если мИндекс = Неопределено Тогда
			//мВыбраныСсылки.Добавить(СсылкаИзделие);
			//мВыбраныДокументы.Добавить(СсылкаДокумент);
			мВыбраныGuid.Добавить(СсылкаGuid);
		Иначе
			//мВыбраныСсылки.Удалить(мИндекс);
			//мВыбраныДокументы.Удалить(мИндекс);
			мВыбраныGuid.Удалить(мИндекс);
		КонецЕсли;
		//ркКоличествоВыбранных = мВыбраныСсылки.Количество();
		ркКоличествоВыбранных = мВыбраныGuid.Количество();
		//Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки); 
		//Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныДокументы",мВыбраныДокументы);
		Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныGuid",мВыбраныGuid);
		//ОбновитьОтображениеДанных();	    anch
		
	//ркКоличествоВыбранных = мВыбраныСсылки.Количество();
	//Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки); 
	ИначеЕсли Поле.Имя = "СтокИзделие" Тогда
		//или Поле.Имя = "СтокИзделиеНомерИзделия" или Поле.Имя = "СтокИзделиеVIN" или Поле.Имя = "СтокИзделиеНомерНадстройки" ИЛИ Поле.Имя = "СтокИзделиеТипПродуктаЛогистический" ИЛИ Поле.Имя = "СтокИзделиеМодельПродукта"
		СсылкаИзделие = ПолучитьСсылкуНаИзделие(ВыбраннаяСтрока);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",СсылкаИзделие);
		ПараметрыФормы.Вставить("Доступность",Ложь);
		ОткрытьФорму("Справочник.Scan_Изделия.ФормаОбъекта",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ИначеЕсли Поле.Имя = "СтокЗаявкаПеревозчику"  Тогда
		Документ = ПолучитьСсылкуНаДокументЗаявкаПеревозчику(ВыбраннаяСтрока);
		Если Документ <> Неопределено Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Доступность",Ложь);
			ПараметрыФормы.Вставить("Ключ",Документ);
			ОткрытьФорму("Документ.Scan_ЗаявкаПеревозчику.ФормаОбъекта",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		КонецЕсли;
	ИначеЕсли Поле.Имя = "СтокЗаявкаНаДействие" Тогда
			СсылкаДокумент = ПолучитьСсылкуНаДокумент(ВыбраннаяСтрока);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Доступность",Ложь);
			ПараметрыФормы.Вставить("Ключ",СсылкаДокумент);
			ОткрытьФорму("Документ.Scan_ЗаявкаНаДействие.ФормаОбъекта",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуGuid(КлючЗаписи)
	ИдентификаторСтроки = КлючЗаписи.GuidСтроки;
	Возврат ИдентификаторСтроки;
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаДокумент(КлючЗаписи)
	ИдентификаторСтроки = КлючЗаписи.ЗаявкаНаДействие;
	Возврат ИдентификаторСтроки;
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаДокументЗаявкаПеревозчику(КлючЗаписи)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки = &СсылкаGuid";
	Запрос.УстановитьПараметр("СсылкаGuid", КлючЗаписи.GuidСтроки);
	Результат = Запрос.Выполнить();
	//rarus sergei 11.11.2016 mantis 7629 ++	
	Если НЕ Результат.Пустой() Тогда
		ТЗ = Результат.Выгрузить();
		Если ТЗ[0].ЗаявкаПеревозчику <> Документы.Scan_ЗаявкаПеревозчику.ПустаяСсылка() Тогда
			Возврат ТЗ[0].ЗаявкаПеревозчику;	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КОнецЕсли;
	Возврат Неопределено;
	//rarus sergei 11.11.2016 mantis 7629 --
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаИзделие(КлючЗаписи)
	ИдентификаторСтроки = КлючЗаписи.Изделие;
	Возврат ИдентификаторСтроки;
КонецФункции

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	ТЗ = СписокВТЗнаСервере();
	//Для Каждого СтрокаТЗ Из ТЗ[0] Цикл
	//
	//	Если мВыбраныСсылки.Найти(СтрокаТЗ) = Неопределено Тогда
	//		мВыбраныСсылки.Добавить(СтрокаТЗ);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого СтрокаТЗ Из ТЗ[1] Цикл
	//
	//	Если мВыбраныДокументы.Найти(СтрокаТЗ) = Неопределено Тогда
	//		мВыбраныДокументы.Добавить(СтрокаТЗ);
	//	КонецЕсли;
	//КонецЦикла;

	//ркКоличествоВыбранных = мВыбраныСсылки.Количество();
	//Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки);
	//Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныДокументы", мВыбраныДокументы);
	Для Каждого СтрокаТЗ Из ТЗ Цикл
	
		Если мВыбраныGuid.Найти(СтрокаТЗ) = Неопределено Тогда
			мВыбраныGuid.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	ркКоличествоВыбранных = мВыбраныGuid.Количество();
	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныGuid", мВыбраныGuid);

КонецПроцедуры

&НаСервере
Функция СписокВТЗнаСервере()

    Схема = Элементы.Сток.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.Сток.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//МассивИдентификаторов = Новый Массив;
	//КолонкаСсылок = ТаблицаРезультат.ВыгрузитьКолонку("Изделие");
	//КолонкаДокументов = ТаблицаРезультат.ВыгрузитьКолонку("ЗаявкаНаДействие");
	//МассивИдентификаторов.Добавить(КолонкаСсылок);
	//МассивИдентификаторов.Добавить(КолонкаДокументов);
	//Возврат МассивИдентификаторов;
	КолонкаGuid = ТаблицаРезультат.ВыгрузитьКолонку("GuidСтроки");
	Возврат КолонкаGuid;
КонецФункции

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	мВыбраныGuid.Очистить();	
	ркКоличествоВыбранных = мВыбраныGuid.Количество();
	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныGuid",мВыбраныGuid);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТБОРОМ

&НаСервере
Процедура НастроитьПолеОтбора()
	
		// заполним быстрые отборы
	ДеревоОтбор = ЭтотОбъект.Отбор.ПолучитьЭлементы();   
	
	ОбъектНастройки 	= Сток.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ДоступныеНастройки	= Сток.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
	
	Для Каждого ЭлементОтбора Из ОбъектНастройки Цикл
		
		//Если ОтборПоВидуНоменклатуры <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоВидуНоменклатуры Тогда
		//	ЭлементОтбора.Использование = Истина;
		//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//	ЭлементОтбора.ПравоеЗначение = ОтборПоВидуНоменклатуры;
		//ИначеЕсли ОтборПоЗапретуЗакупки <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоЗапретуЗакупки Тогда
		//	ЭлементОтбора.Использование = Истина;
		//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//	ЭлементОтбора.ПравоеЗначение = ОтборПоЗапретуЗакупки;
		//ИначеЕсли ОтборПоЗапретуПродажи <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоЗапретуПродажи Тогда
		//	ЭлементОтбора.Использование = Истина;
		//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//	ЭлементОтбора.ПравоеЗначение = ОтборПоЗапретуПродажи;
		//КонецЕсли;
		
		ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
		// Имя поля изменилось или поле было удалено.
		Если ДоступноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ДоступноеПоле);
		
		НовыйОтбор = ДеревоОтбор.Добавить();
		НовыйОтбор.Использование  = ЭлементОтбора.Использование;
		НовыйОтбор.ЛевоеЗначение  = ЭлементОтбора.ЛевоеЗначение;
		НовыйОтбор.ВидСравнения   = ЭлементОтбора.ВидСравнения;
		НовыйОтбор.ПравоеЗначение = ?(ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение), ЭлементОтбора.ПравоеЗначение, ДоступноеПоле.ТипЗначения.ПривестиЗначение(ЭлементОтбора.ПравоеЗначение));
		НовыйОтбор.Заголовок      = ПолучитьПредставлениеЭлементаОтбора(ЗаголовокПоля, ЭлементОтбора.ВидСравнения);
		
	КонецЦикла;
	
	////пробежимся по метаданным справочника Номенклатура, чтобы отделить доп. реквизиты и сведения от обычных реквизитов
	//ЭлементОтбораСсылка = ДоступныеНастройки.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка"));
	//Если ЭлементОтбораСсылка<>Неопределено Тогда
	//	
	//	//ссылка есть, смотрим, какие у нее есть доступные поля
	//	РеквизитыСправочника 			= Метаданные.Справочники.Номенклатура.Реквизиты;
	//	ТЧСправочника 					= Метаданные.Справочники.Номенклатура.ТабличныеЧасти;
	//	СтандартныеРеквизиты 			= Метаданные.Справочники.Номенклатура.СтандартныеРеквизиты;
	//	МассивСтандартныхРеквизитов 	= Новый Массив;
	//	
	//	Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
	//		МассивСтандартныхРеквизитов.Добавить(СтандартныйРеквизит.Имя);
	//	КонецЦикла;
	//	
	//	Для Каждого ДоступноеПолеОтбораКомпоновкиДанныхСсылки Из ЭлементОтбораСсылка.Элементы Цикл
	//		
	//		ПолеКомпоновкиСсылки 		= ДоступноеПолеОтбораКомпоновкиДанныхСсылки.Поле;
	//		СтроковоеПредставлениеПоля 	= СтрЗаменить(Строка(ПолеКомпоновкиСсылки), "Ссылка.", "");
	//		
	//		Если СтроковоеПредставлениеПоля = "Наименование" 
	//			ИЛИ СтроковоеПредставлениеПоля = "Код" 
	//			ИЛИ СтроковоеПредставлениеПоля = "ВерсияДанных"
	//			ИЛИ РеквизитыСправочника.Найти(СтроковоеПредставлениеПоля)<>Неопределено 
	//			ИЛИ ТЧСправочника.Найти(СтроковоеПредставлениеПоля)<>Неопределено
	//			ИЛИ МассивСтандартныхРеквизитов.Найти(СтроковоеПредставлениеПоля)<>Неопределено
	//			ИЛИ Метаданные.ОбщиеРеквизиты.Найти(СтроковоеПредставлениеПоля)<>Неопределено Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//		ЗаголовокПоля = ПолучитьЗаголовокПоля(ДоступноеПолеОтбораКомпоновкиДанныхСсылки);
	//		
	//		НовыйОтбор = ДеревоОтбор.Добавить();
	//		НовыйОтбор.Использование  = Ложь;
	//		НовыйОтбор.ЛевоеЗначение  = ПолеКомпоновкиСсылки;
	//		НовыйОтбор.ВидСравнения   = ДоступноеПолеОтбораКомпоновкиДанныхСсылки.ДоступныеВидыСравнения[0];
	//		НовыйОтбор.ПравоеЗначение = ДоступноеПолеОтбораКомпоновкиДанныхСсылки.ТипЗначения.ПривестиЗначение();
	//		НовыйОтбор.Заголовок      = ПолучитьПредставлениеЭлементаОтбора(ЗаголовокПоля, НовыйОтбор.ВидСравнения);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	////добавим сюда же поставщика
	//НовыйОтбор = ДеревоОтбор.Добавить();
	//НовыйОтбор.Использование  = Ложь;
	//НовыйОтбор.ЛевоеЗначение  = "Поставщик";
	//НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	//НовыйОтбор.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();
	//НовыйОтбор.Заголовок      = "Поставщик";
	//
	////+Альфа-Авто
	//// и модель
	//НовыйОтбор = ДеревоОтбор.Добавить();
	//НовыйОтбор.Использование  = Ложь;
	//НовыйОтбор.ЛевоеЗначение  = "Модель";
	//НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	//НовыйОтбор.ПравоеЗначение = Справочники.Модели.ПустаяСсылка();
	//НовыйОтбор.Заголовок      = "Модель";
	////-Альфа-Авто
	//
	//// Уберем дублирущий отбор
	//Если РежимПодбора Тогда
	//	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
	//КонецЕсли;
	
КонецПроцедуры // НастроитьПолеОтбора()

// Получает заголовок для поля отбора
//
&НаСервере
Функция ПолучитьЗаголовокПоля(ДоступноеПоле) Экспорт
	
	ЗаголовокПоля = "";
	Если ДоступноеПоле.Родитель = Неопределено Тогда
		ЗаголовокПоля     = ДоступноеПоле.Заголовок;
	Иначе
		ЗаголовокРодителя = ДоступноеПоле.Родитель.Заголовок;
		ЗаголовокПоля     = СтрЗаменить(ДоступноеПоле.Заголовок, ЗаголовокРодителя+".", "")+ " (" + (ЗаголовокРодителя)+ ")";
	КонецЕсли;
	
	Возврат ЗаголовокПоля;
	
КонецФункции

// Получает представление элемента отбора
//
&НаСервере
Функция ПолучитьПредставлениеЭлементаОтбора(ПредставлениеПоля, ВидСравнения)
	
	ПредставлениеСравнения = "";
	// Производим формирование секции выдов сравнения
	Если ВидСравнения=Неопределено ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.Равно ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		// Формирование представлений для прямых видов условий производить не будем
		
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
		ПредставлениеСравнения = "(>)";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ПредставлениеСравнения = "(>=)";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
		ПредставлениеСравнения = "(<)";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ПредставлениеСравнения = "(<=)";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		ПредставлениеСравнения = "(НЕ)";
	Иначе
		ПредставлениеСравнения = "("+Строка(ВидСравнения)+")";
	КонецЕсли;
	
	ПредставлениеСравнения = ПредставлениеПоля + ПредставлениеСравнения;
	
	// Возвращаем сформированное представление текущего элемента отбора
	Возврат ПредставлениеСравнения;
	
КонецФункции // ПолучитьПредставлениеЭлементаОтбора()

// Функция определения того, что отбор выполняетсяпо списку значений
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	Результат = Ложь;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ 
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ 
		ВидСравненияОтбора= ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Установка для поля формы выбора
//
&НаСервере
Процедура УстановитьФормуВыбора(Элемент, ФормаВыбора)
	
	Элемент.ФормаВыбора = ФормаВыбора;
	
КонецПроцедуры

// Обновление отбора списка
//
&НаСервере
Процедура ОбновитьНастройкиОтбора()
	
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	ОтборСКД    = Неопределено;
	Для Каждого ЭлементКомпоновщика Из Сток.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтборСКД = ЭлементКомпоновщика;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
	Если ОтборСКД<>Неопределено Тогда
		
		//СтрокаОтбораПоПоставщику 				= Неопределено;
		//ОтборПоПоставщикуИспользуется 			= Ложь;
		//
		////+Альфа-Авто
		//СтрокаОтборПоМодели						= Неопределено;
		//ОтборПоМоделиИспользуется 				= Ложь;
		////-Альфа-Авто
		
		ОбъектНастройки = ОтборСКД.Элементы;
		
		Для Каждого СтрокаОтбора Из ДеревоОтбор Цикл
			
			////пока пропустим поставщика, с ними разберемся позже
			//Если СтрокаОтбора.ЛевоеЗначение = "Поставщик" Тогда
			//	СтрокаОтбораПоПоставщику = СтрокаОтбора;
			//	ОтборПоПоставщикуИспользуется = СтрокаОтбора.Использование; 
			//	Продолжить;
			////+Альфа-Авто
			//ИначеЕсли СтрокаОтбора.ЛевоеЗначение = "Модель" Тогда
			//	СтрокаОтборПоМодели = СтрокаОтбора;
			//	ОтборПоМоделиИспользуется = СтрокаОтбора.Использование; 
			//	Продолжить;
			////-Альфа-Авто
			//КонецЕсли;
			
			//заполним отборы компоновщика
			СписокЭлементовОтбора = Новый СписокЗначений;
			Для Каждого ЭлементОбъекта Из ОбъектНастройки Цикл
				Если ЭлементОбъекта.ЛевоеЗначение = СтрокаОтбора.ЛевоеЗначение Тогда
					СписокЭлементовОтбора.Добавить(ЭлементОбъекта);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокЭлементовОтбора.Количество() = 0 Тогда
				СписокЭлементовОтбора.Добавить(ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")));
			КонецЕсли;
			
			Для Каждого ЭлементСписка Из СписокЭлементовОтбора Цикл
				ЭлементОтбора 				 = ЭлементСписка.Значение;
				ЭлементОтбора.Использование  = СтрокаОтбора.Использование;
				ЭлементОтбора.ЛевоеЗначение  = СтрокаОтбора.ЛевоеЗначение;
				ЭлементОтбора.ВидСравнения   = СтрокаОтбора.ВидСравнения;
				ЭлементОтбора.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
			КонецЦикла;
			
		КонецЦикла;
		
		////+Альфа-Авто
		////Теперь посмотрим, что у нас с отбором по поставщику и модели
		//Если ОтборПоПоставщикуИспользуется ИЛИ ОтборПоМоделиИспользуется Тогда
		//	УстановитьОтборТоваровПоСсылке(ОбъектНастройки, ОтборПоПоставщикуИспользуется, СтрокаОтбораПоПоставщику, ОтборПоМоделиИспользуется, СтрокаОтборПоМодели);
		////-Альфа-Авто
		//Иначе
			//сбросим отбор по ссылке
			ПолеКомпоновкиСсылка = Новый ПолеКомпоновкиДанных("Ссылка");
			Для Каждого ЭлементОбъекта Из ОбъектНастройки Цикл
				Если ЭлементОбъекта.ЛевоеЗначение = ПолеКомпоновкиСсылка Тогда
					ЭлементОбъекта.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
		//КонецЕсли;
		
	КонецЕсли;
	УправлениеОтображениемКнопкиОтбор(); //rarus sergei 02.12.2016 mantis 8057 +
КонецПроцедуры

//rarus sergei 02.12.2016 mantis 8057 ++
Процедура УправлениеОтображениемКнопкиОтбор()
	флаг = ложь;
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	Для каждого элементОтбора Из ДеревоОтбор Цикл
		Если элементОтбора.Использование = Истина Тогда
			флаг = истина;
			прервать;
		КонецЕсли;
	КонецЦикла;
	Если флаг Тогда
		Элементы.ФормаРежимЛевойПанелиПоиск.Картинка = БиблиотекаКартинок.ОтборКомпоновкиДанныхВключен ;
		Элементы.ДекорацияОтбор.Видимость = Истина;
	Иначе 
		Элементы.ФормаРежимЛевойПанелиПоиск.Картинка = БиблиотекаКартинок.ОтборКомпоновкиДанных;	
		Элементы.ДекорацияОтбор.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры
//rarus sergei 02.12.2016 mantis 8057 --

// Обработчик окончания выбора значения отбора
//
&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

//Обработчик команды отображения вида сравнения
//
&НаКлиенте
Процедура ОтображатьВидСравнения(Команда)
	
	Элементы.ОтборВидСравнения.Видимость                        = НЕ Элементы.ОтборВидСравнения.Видимость;
	Элементы.ОтборКонтекстноеМенюОтображатьВидСравнения.Пометка = Элементы.ОтборВидСравнения.Видимость;
	
КонецПроцедуры

// Обработчик изменения поля "Вид сравнения" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.Заполнено") ИЛИ 
		ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.НеЗаполнено") Тогда
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Истина;
	Иначе
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры

// Обработчик начала выбора поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//rarus sergei 06.10.2016 mantis 7629 ++
	Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СправочникСсылка.Scan_МестаХранения") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЭтаГруппа",Ложь);
		ПараметрыОТбора.Вставить("Родитель",ПредопределенноеЗначение("Справочник.Scan_МестаХранения.МестаХранения"));
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОТбора);
		Результат = ОткрытьФорму("Справочник.Scan_МестаХранения.ФормаВыбора",ПараметрыФормы,Элементы.ОтборПравоеЗначение);
	КонецЕсли;
	//rarus sergei 06.10.2016 mantis 7629 --
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ 
		ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		////+Альфа-Авто
		//Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
		//	СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", ТекущиеДанные.ПравоеЗначение, Новый ОписаниеТипов(?(ТекущиеДанные.ЛевоеЗначение = "Модель", "СправочникСсылка.Модели", "СправочникСсылка.Контрагенты")), Неопределено, Ложь);
		////-Альфа-Авто
		//Иначе
			
			ДоступноеПоле = Сток.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			
			Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ
				ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ТолькоГруппы = Истина;
			Иначе
				ТолькоГруппы = Ложь;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", ТекущиеДанные.ПравоеЗначение, ДоступноеПоле.ТипЗначения, ДоступноеПоле.ДоступныеЗначения, ТолькоГруппы);
		КонецЕсли;
		//ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		//ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	ОбновитьНастройкиОтбора();
КонецПроцедуры

// Обработчик события возникающего на клиенте при двойном щелчке мыши (нажатии Enter) в ячейке таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если Поле.Имя = "ОтборВидСравнения" Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокВыбора = Элементы.ОтборВидСравнения.СписокВыбора;
		СписокВыбора.Очистить();
		
		////+Альфа-Авто
		//Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
		////-Альфа-Авто
		//	СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно, 		Строка(ВидСравненияКомпоновкиДанных.Равно));
		//	СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеРавно, 	Строка(ВидСравненияКомпоновкиДанных.НеРавно));
		//	СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке, 	Строка(ВидСравненияКомпоновкиДанных.ВСписке));
		//	СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке, 	Строка(ВидСравненияКомпоновкиДанных.НеВСписке));
		//Иначе
			ДоступноеПолеОтбора = Сток.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			Если НЕ ДоступноеПолеОтбора = Неопределено Тогда
				Для Каждого ДоступноеСравнения Из ДоступноеПолеОтбора.ДоступныеВидыСравнения Цикл
					СписокВыбора.Добавить(ДоступноеСравнения.Значение, Строка(ДоступноеСравнения.Значение));
				КонецЦикла;
			КонецЕсли;
		//КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		////+Альфа-Авто
		//Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
		//	Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
		//	Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов(?(ТекущиеДанные.ЛевоеЗначение = "Модель", "СправочникСсылка.Модели", "СправочникСсылка.Контрагенты"));
		//	Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
		//	Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		////-Альфа-Авто
		//Иначе
			
			ДоступноеПоле = Сток.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			
			Если ДоступноеПоле = Неопределено Тогда
				Элементы.ОтборПравоеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
			Иначе
				
				Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ 
					ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
				ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
				ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				Иначе
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
				КонецЕсли;
				
				
				Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = ДоступноеПоле.БыстрыйВыбор;
				Элементы.ОтборПравоеЗначение.Маска                = ДоступноеПоле.Маска;
				Элементы.ОтборПравоеЗначение.ФорматРедактирования = ДоступноеПоле.ФорматРедактирования;
				
				Если НЕ ДоступноеПоле.ФормаВыбора = "" Тогда
					УстановитьФормуВыбора(Элементы.ОтборПравоеЗначение, ДоступноеПоле.ФормаВыбора);
				КонецЕсли;
				
				
				Элементы.ОтборПравоеЗначение.ОграничениеТипа      = ДоступноеПоле.ТипЗначения;
				
				Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
				МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
				Если МассивТипов.Количество()> 0 Тогда
					Если МассивТипов[0] = Тип("Строка") Тогда
						Элементы.ОтборПравоеЗначение.КнопкаВыбора = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте перед началом изменения таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" ИЛИ Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик окончания редактирования таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьНастройкиОтбора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОМАНДНОЙ ПАНЕЛЬЮ

&НаСервере
Процедура РежимЛевойПанелиПоискНаСервере(РежимОтображения)
	Элементы.ФормаРежимЛевойПанелиПоиск.Пометка = НЕ Элементы.ФормаРежимЛевойПанелиПоиск.Пометка;
	УправлениеДиалогом();

КонецПроцедуры

&НаКлиенте
Процедура РежимЛевойПанелиПоиск(Команда)
	РежимЛевойПанелиПоискНаСервере(Команда.Имя);
КонецПроцедуры

&НаСервере 
Процедура УправлениеДиалогом()
	Элементы.Отбор.Видимость = Элементы.ФормаРежимЛевойПанелиПоиск.Пометка;
	Элементы.СтокГруппаДопКолонкиПоИзделию.Видимость = Элементы.ФормаОтображениеДопКолонокПоИзделию.Пометка;	
КонецПроцедуры

&НаСервере
Процедура ОтображениеДопКолонокПоИзделиюНаСервере(РежимОтображения)
	Элементы.ФормаОтображениеДопКолонокПоИзделию.Пометка = НЕ Элементы.ФормаОтображениеДопКолонокПоИзделию.Пометка;
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеДопКолонокПоИзделию(Команда)
	ОтображениеДопКолонокПоИзделиюНаСервере(Команда.Имя);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ОБРАБОТЧИКИ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	УправлениеДиалогом();
	НастроитьПолеОтбора();
	Scan_СборСтатистики.Scan_ПриОткрытииОбработки(РеквизитФормыВЗначение("Объект").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +


КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыделеныВсе = Ложь;
	//мВыбраныСсылки = Новый Массив;
	//мВыбраныДокументы = Новый Массив;
	мВыбраныGuid = Новый Массив; 
	ркКоличествоВыбранных = 0;
	//Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки);
	//Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныДокументы",мВыбраныДокументы);
	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныGuid", мВыбраныGuid);
	Сток.Параметры.УстановитьЗначениеПараметра("НаТекДату", КонецДня(ТекущаяДата()));	// rarus tenkam 11.10.2016 mantis 7670 +

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Сток.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ НОВОЙ ЗАЯВКИ ПЕРЕВОЗЧИКУ

&НаКлиенте
Процедура СоздатьЗаявкуПеревозчику(Команда)
	Если мВыбраныGuid.Количество() = 0 Тогда
		//rarus FominskiyAS 21.04.2019  mantis 14191 +++
		//Сообщить("Не выбрано ни одно изделие");
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select the product'"));
		//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
		Возврат;
	КонецЕсли;
	ЕстьЗаявка = ЕстьЗаявкаПеревозчику(мВыбраныGuid);
	Если ЕстьЗаявка Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("У выбранных изделий имеется документ ""Заявка Перевозчику""");
		Сообщить(НСтр("ru = 'У выбранных продуктов имеется документ ""Заявка Перевозчику""'; en = 'Selected items have a document ""Request to carrier""'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 --- 
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивВыбранныхСтрок",мВыбраныGuid);
		
	Результат = ОткрытьФорму("Документ.Scan_ЗаявкаПеревозчику.Форма.ФормаДокумента",ПараметрыФормы,,,,,Новый ОписаниеОповещения("Подключаемый_ОбработкаЗакрытияФормыДокумента",ЭтаФорма,"ЗаявкаПеревозчику"));
	 //rarus sergei 11.11.2016 mantis 7937 + 
КонецПроцедуры

&НаСервере
Функция ЕстьЗаявкаПеревозчику(ВыбранныеСтроки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В(&СписокGuid)
	               |	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику <> ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка)";
	Запрос.УстановитьПараметр("СписокGuid",ВыбранныеСтроки);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаЗакрытияФормыДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	мВыбраныGuid.Очистить();	
	ркКоличествоВыбранных = мВыбраныGuid.Количество();
	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныGuid",мВыбраныGuid);
	Элементы.Сток.Обновить();	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДОБАВЛЕНИЕ ИЗДЕЛИЯ В ЗАЯВКУ ПЕРЕВОЗЧИКУ

&НаКлиенте
Процедура ДобавитьВЗаявкуПеревозчику(Команда)
	Если мВыбраныGuid.Количество() = 0 Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Не выбрано не одно изделие");
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select a product'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---                                                                         
		Возврат;
	КонецЕсли;
	ЕстьЗаявка = ЕстьЗаявкаПеревозчику(мВыбраныGuid);
	Если ЕстьЗаявка Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("У выбранных изделий имеется документ ""Заявка Перевозчику""");
		Сообщить(НСтр("ru = 'У выбранных продуктов имеется документ ""Заявка Перевозчику""'; en = 'Selected items have a document ""Request to carrier""'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		Возврат;
	ИначеЕсли НЕ ПроверитьВыбранныеСсылки(мВыбраныGuid) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивВыбранныхСтрок",мВыбраныGuid);
	ОткрытьФорму("Документ.Scan_ЗаявкаПеревозчику.Форма.ФормаПодбораДокумента",ПараметрыФормы,,,,,Новый ОписаниеОповещения("Подключаемый_ОбработкаЗакрытияФормыВыбора",ЭтаФорма,"ЗаявкаПеревозчику"),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ПроверитьВыбранныеСсылки(ВыбранныеСтроки)
	Возврат Документы.Scan_ЗаявкаПеревозчику.ПроверитьВыбранныеСсылки(ВыбранныеСтроки);
КонецФункции 

&НаКлиенте
Процедура Подключаемый_ОбработкаЗакрытияФормыВыбора(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	Если РезультатОповещения <> Неопределено И 
		РезультатОповещения.Свойство("ЗаявкаПеревозчику") Тогда		//rarus tenkam 06.02.2017 mantis 7750 +	 	
		//rarus tenkam 06.02.2017 mantis 7750 +++
		//ДобавитьВЗаявкуПеревозчикуНаСервере(РезультатОповещения,мВыбраныGuid);
		СтруктураПараметров = Новый Структура("ДобавитьИзделия", мВыбраныGuid);
		Scan_ВспомогательныеФункцииКлиент.КорректироватьЗаявкуПеревозчикуНаКлиенте(РезультатОповещения.ЗаявкаПеревозчику, СтруктураПараметров);
		//rarus tenkam 06.02.2017 mantis 7750 ---
	КонецЕсли;
	//rarus sergei 11.11.2016 mantis 7937 ++
	мВыбраныGuid.Очистить();	
	ркКоличествоВыбранных = мВыбраныGuid.Количество();
	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныGuid",мВыбраныGuid);
	Элементы.Сток.Обновить();
	//rarus sergei 11.11.2016 mantis 7937 --
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЕ ИЗДЕЛИЯ ИЗ ЗАЯВКИ НА ДЕЙСТВИЕ

&НаКлиенте
Процедура ИсключитьИзделиеИзЗаявкиНаДействие(Команда)
	Если мВыбраныGuid.Количество() = 0 Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Не выбрано не одно изделие");
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select a product'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---                                                                            
		Возврат;
	КонецЕсли;
	//rarus tenkam 07.02.2016 mantis 7750 +++
	//ИсключитьИзделиеИзЗаявкиНаДействиеНаСервере(мВыбраныGuid);
	Если ВсеИзделияОднойЗаявкиНаДействие(мВыбраныGuid) Тогда
		ДанныеДляКорректировки = ПолучитьДанныеДляКорректировки(мВыбраныGuid);
		Scan_ВспомогательныеФункцииКлиент.КорректироватьЗаявкуНаКлиенте(ДанныеДляКорректировки.ЗаявкаНаДействие, ДанныеДляКорректировки.МассивИзделий);
	Иначе
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Выбранные изделия принадлежат нескольким заявкам на действие!");
		Сообщить(НСтр("ru = 'Выбранные продукты принадлежат нескольким заявкам на действие!'; en = 'Selected products belong to several requests for action!'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
	КонецЕсли;
	//rarus tenkam 07.02.2017 mantis 7750 ---
	СнятьФлажки(Команда);
	Оповестить("ОбновитьСписокЗаявокНаДействие");
	Оповестить("ОбновитьСписокЗаявокПеревозчику");
КонецПроцедуры

//rarus tenkam 07.02.2017 mantis 7750 +++
&НаСервереБезКонтекста
Функция ПолучитьДанныеДляКорректировки(ВыбранныеСтроки) 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие,
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие КАК ЗаявкаНаДействие
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В(&ВыбранныеСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие,
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявкаНаДействие";
	
	Запрос.УстановитьПараметр("ВыбранныеСтроки", ВыбранныеСтроки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабРезультат = РезультатЗапроса.Выгрузить();
	СтруктураДанных = Новый Структура;
	МассивИзделий = Новый Массив;
	ТекЗаявка = Документы.Scan_ЗаявкаНаДействие.ПустаяСсылка();
	Если ТабРезультат.Количество() <> 0 Тогда
		Для Каждого ТекИзделие Из ТабРезультат Цикл
			МассивИзделий.Добавить(ТекИзделие.Изделие);
		КонецЦикла;
		СтруктураДанных.Вставить("МассивИзделий", МассивИзделий);
		СтруктураДанных.Вставить("ЗаявкаНаДействие", ТабРезультат[0].ЗаявкаНаДействие); 
	КонецЕсли;		
	
	Возврат СтруктураДанных;
КонецФункции

&НаСервереБезКонтекста
Функция ВсеИзделияОднойЗаявкиНаДействие(ВыбранныеСтроки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В(&ВыбранныеСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие";
	
	Запрос.УстановитьПараметр("ВыбранныеСтроки", ВыбранныеСтроки);
	РезультатЗапроса = Запрос.Выполнить();
	ТабРезультата = РезультатЗапроса.Выгрузить();
	Если ТабРезультата.Количество() = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЕ ИЗДЕЛИЯ ИЗ ЗАЯВКИ ПЕРЕВОЗЧИКУ

&НаКлиенте
Процедура ИсключитьИзделиеИзЗаявкиПеревозчику(Команда)
	Если мВыбраныGuid.Количество() = 0 Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Не выбрано не одно изделие");
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select a product'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---                                                                            
		Возврат;
	КонецЕсли;
	//rarus tenkam 07.02.2017 mantis 7750 +++
	//ИсключитьИзделиеИзЗаявкиПеревозчикуНаСервере(мВыбраныGuid); 	
	ЗаявкаПеревозчикуНаКорректировку = ПредопределенноеЗначение("Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка");
	СообщениеОбОшибке = "";
	Если МожноИсключать(мВыбраныGuid, ЗаявкаПеревозчикуНаКорректировку, СообщениеОбОшибке) Тогда
		СтруктураПараметров = Новый Структура("ИсключитьИзделия", мВыбраныGuid);
		Scan_ВспомогательныеФункцииКлиент.КорректироватьЗаявкуПеревозчикуНаКлиенте(ЗаявкаПеревозчикуНаКорректировку, СтруктураПараметров);
	Иначе
		Сообщить(СообщениеОбОшибке);	
	КонецЕсли;
	//rarus tenkam 07.02.2017 mantis 7750 ---
	СнятьФлажки(Команда);  
	Оповестить("ОбновитьСписокЗаявокНаДействие"); //rarus sergei 02.12.2016 mantis 8057 +
	Оповестить("ОбновитьСписокЗаявокПеревозчику"); //rarus sergei 02.12.2016 mantis 8057 +
КонецПроцедуры

//rarus tenkam 07.02.2017 mantis 7750 +++

// Функция - Проверяет, можно ли исключать изделия из заявки перевозчику
//
// Параметры:
//  ВыбранныеСтроки			 - Массив - Массив GUID-ов на записи регистра "Корректировки по заявкам"
//  ЗаявкаПеревозчикуСсылка	 - ДокументСсылка.Scan_ЗаявкаПеревозчику - Возвращает ссылку на заявку перевозчику, из которое исключаются изделия 
//  СообщениеОбОшибке		 - Строка - Текст ошибки
// 
// Возвращаемое значение:
//  Булево - Истина, если не найдено ошибок, иначе Ложь
//
&НаСервереБезКонтекста
Функция МожноИсключать(ВыбранныеСтроки, ЗаявкаПеревозчикуСсылка, СообщениеОбОшибке = "")
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику <> ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка)
	               |	И Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки В (&ВыбранныеСтроки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику";
	Запрос.УстановитьПараметр("ВыбранныеСтроки",ВыбранныеСтроки);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СообщениеОбОшибке = "Нельзя выполнить операцию. У выбранных изделий нет ""Заявок перевозчику""!";
		Возврат Ложь;	
	Иначе
		ТЗ = Результат.Выгрузить();
		Если ТЗ.Количество() <> 1 Тогда
			СообщениеОбОшибке = "Нельзя выполнить операцию. У выбранных изделий разные ""Заявки перевозчику""!";		
			Возврат Ложь;	
		Иначе
			ЗаявкаПеревозчикуСсылка = ТЗ[0].ЗаявкаПеревозчику;
			Если ЗаявкаПеревозчикуСсылка.ПодтвержденаПеревозчиком Тогда
				СообщениеОбОшибке = "Нельзя выполнить операцию. У выбранных изделий ""Заявка перевозчику"" подтверждена перевозчиком!";
				Возврат Ложь;
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

//rarus tenkam 07.02.2017 mantis 7750 ---

////////////////////////////////////////////////////////////////////////////////
// СТРУКТУРА ДОКУМЕНТОВ

&НаКлиенте
Процедура ПоказатьСтруктуруДокументовПоИзделию(Команда)
	Если мВыбраныGuid.Количество() = 0 Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Не выбрано не одно изделие");
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select a product'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---                                                                            
		Возврат;
	ИначеЕсли мВыбраныGuid.Количество()>1 Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Выберите одно изделие");
		// rarus tenkam 21.08.2019 mantis 14794 +++
		//Сообщить("ru = 'Выберите одно изделие '; en = 'Select one item'");
	    Сообщить(НСтр("ru = 'Выберите один продукт '; en = 'Select one item'"));
	    // rarus tenkam 21.08.2019 mantis 14794 ---
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		Возврат;
	Иначе
		Документ = ПолучитьДокумент(мВыбраныGuid[0]);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектОтбора",Документ);
		ОткрытьФорму("ОбщаяФорма.СтруктураПодчиненности",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	СнятьФлажки(Команда);	

КонецПроцедуры

&НаСервере
Функция ПолучитьДокумент(ВыбраннаяСтрока)
	Запрос = Новый Запрос;
	ЗАпрос.Текст = "ВЫБРАТЬ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику,
	               |	Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие
	               |ИЗ
	               |	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
	               |ГДЕ
	               |	Scan_КорректировкаИнформацииПоЗаявкам.GuidСтроки = &ВыбраннаяСтрока";
	Запрос.УстановитьПараметр("ВыбраннаяСтрока",ВыбраннаяСтрока);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(ТЗ[0].ЗаявкаПеревозчику) Тогда
		Возврат ТЗ[0].ЗаявкаПеревозчику;
	Иначе
		Возврат ТЗ[0].ЗаявкаНаДействие;
		
	
	КонецЕсли; 
КонецФункции
