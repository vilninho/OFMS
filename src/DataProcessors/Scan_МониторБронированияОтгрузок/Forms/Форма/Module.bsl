#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНастройкиМонитораНаСервере();
	
	Если Параметры.Свойство("ДатаОтгрузки") Тогда
		ДатаМонитора = Параметры.ДатаОтгрузки;
	//rarus agar 16.04.2021 17656 ++
	Иначе
		ДатаМонитора = ТекущаяДата();
	//rarus agar 16.04.2021 17656 --
	КонецЕсли;
	
	УстановитьПериодОтображенияМонитораНаСервере();
	ЗаполнитьОтборСкладОтгрузкиНаСервере();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаявкиНаОтгрузку, "ДатаОтгрузки", ДатаМонитора, ВидСравненияКомпоновкиДанных.Равно);
	
	Если РежимТабличныйДокумент Тогда
		ОбновитьМониторТабличныйДокументНаСервере();
	Иначе
		ОбновитьМониторНаСервере();
	КонецЕсли;
	
	ЗаполнитьПараметрыВидимости();
	УправлениеДиалогомНаСервере();
	Scan_СборСтатистики.Scan_ПриОткрытииОбработки(РеквизитФормыВЗначение("Объект").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДатаМонитора.ВыделенныеДаты.Добавить(ДатаМонитора);
	
	Если ИнтервалАвтообновления = 0 Тогда
		ОтключитьОбработчикОжидания("ОбновитьМониторНаКлиенте");
	Иначе
		ПодключитьОбработчикОжидания("ОбновитьМониторНаКлиенте", ИнтервалАвтообновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройкиМонитораНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиСобытийМонитора

&НаКлиенте
Процедура МониторПриАктивизации(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МониторПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Сообщить(""+Начало+"---"+Конец+"---"+Значения["ДатаОтгрузки"]);
	
КонецПроцедуры

&НаКлиенте
Процедура МониторВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МониторПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		ОбновитьДатыЗаявкиНаОтгрузку(ВыделенныйЭлемент.Значение, ВыделенныйЭлемент.ЗначенияИзмерений["ДатаОтгрузки"], ВыделенныйЭлемент.Начало, ВыделенныйЭлемент.Конец);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МониторПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МониторПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаявкаНаОтгрузку = Элементы.Монитор.ВыделенныеЭлементы[0].Значение;
	//rarus bonmak 25.01.2021 17090 ++
	ДокументДоступен = ДоступностьЗаявкиДилеруНаСервере(ЗаявкаНаОтгрузку);
	//rarus bonmak 25.01.2021 17090 --
	Если ДокументДоступен Тогда //rarus bonmak 25.01.2021 17090 добавил условие 
		ПараметрыФормы = Новый Структура("Ключ", ЗаявкаНаОтгрузку);
		ОткрытьФорму("Документ.Scan_ЗаявкаНаОтгрузку.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КомпанииПользователя() //rarus bonmak 25.01.2021 17090 ++
	КомпанииСКонтрагентами = РегистрыСведений.Scan_КомпанииПользователей.ПолучитьКомпаниюДилераПользователя(ПараметрыСеанса.ТекущийПользователь);
	КомпанииПользователя = КомпанииСКонтрагентами.ВыгрузитьКолонку("Компания");
	Возврат КомпанииПользователя;
КонецФункции //rarus bonmak 25.01.2021 17090 --

#КонецОбласти

&НаКлиенте
Процедура ДатаМонитораПриИзменении(Элемент)
	
	УстановитьПериодОтображенияМонитораНаКлиенте();
	ОбновитьМониторНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаМонитораПриАктивизацииДаты(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаявкиНаОтгрузку, "ДатаОтгрузки", ДатаМонитора, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаМонитораПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для Каждого ДатаОформленияПериода Из ОформлениеПериода.Даты Цикл
		Если  ДатаОформленияПериода.Дата >= ДатаНачалаОтображения
			И ДатаОформленияПериода.Дата <= ДатаОкончанияОтображения
			Тогда
			ДатаОформленияПериода.Шрифт    = Новый Шрифт(,,Истина);
			ДатаОформленияПериода.ЦветФона = Новый Цвет(240, 240, 240);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПродуктаПриИзменении(Элемент)
	
	ОбновитьМониторНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладОтгрузкиПриИзменении(Элемент)
	
	ОбновитьМониторНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельНастроек(Элемент)
	
	Элементы.ГруппаМониторНастройки.Видимость = Не Элементы.ГруппаМониторНастройки.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимТабличныйДокументПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	//ОбработкаПараметровВидимости();
	Scan_ПараметрыВидимостиОбъектовСервер.ОбработкаПараметровВидимости(ЭтотОбъект);
	
	Элементы.Монитор.Видимость                  = Не РежимТабличныйДокумент;
	Элементы.МониторТабличныйДокумент.Видимость = РежимТабличныйДокумент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВидимости()
	
	ОбъектНастройки = Метаданные.Обработки.Scan_МониторБронированияОтгрузок.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РольИсполнителя = Выборка.РольИсполнителя;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(РольИсполнителя) Тогда
		Если Не ПараметрыСеанса.ТекущийПользователь.ПользовательСотрудник Тогда
			РольИсполнителя = Справочники.РолиИсполнителей.НайтиПоНаименованию("Дилер");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//rarus bonmak 09.08.2021 16834 ++
//&НаСервере
//Процедура ОбработкаПараметровВидимости()
//	
//	Scan_ПараметрыВидимостиОбъектовСервер.ОбработкаПараметровВидимости(ЭтотОбъект);
//	
//	//Запрос = Новый Запрос;
//	//Запрос.УстановитьПараметр("ТаблицаЗаписей",  Обработки.Scan_МониторБронированияОтгрузок.ПолучитьСписокЭлементовДляНастройки());
//	//Запрос.УстановитьПараметр("ОбъектНастройки", ОбъектНастройки);
//	//Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);

//	//Запрос.Текст ="ВЫБРАТЬ
//	//|	ТЗ.ИмяЭлемента КАК ИмяЭлемента
//	//|ПОМЕСТИТЬ ВТ_ТЗ
//	//|ИЗ
//	//|	&ТаблицаЗаписей КАК ТЗ
//	//|;
//	//|
//	//|////////////////////////////////////////////////////////////////////////////////
//	//|ВЫБРАТЬ
//	//|	Scan_ПараметрыВидимостиОбъектов.ИмяЭлемента КАК ИмяЭлемента,
//	//|	Scan_ПараметрыВидимостиОбъектов.Видимость КАК Видимость,
//	//|	Scan_ПараметрыВидимостиОбъектов.Доступность КАК Доступность
//	//|ПОМЕСТИТЬ ВТ_СохраненныеНастройки
//	//|ИЗ
//	//|	РегистрСведений.Scan_ПараметрыВидимостиОбъектов КАК Scan_ПараметрыВидимостиОбъектов
//	//|ГДЕ
//	//|	Scan_ПараметрыВидимостиОбъектов.ОбъектНастройки = &ОбъектНастройки
//	//|	И Scan_ПараметрыВидимостиОбъектов.РольИсполнителя = &РольИсполнителя
//	//|;
//	//|
//	//|////////////////////////////////////////////////////////////////////////////////
//	//|ВЫБРАТЬ
//	//|	ВТ_ТЗ.ИмяЭлемента КАК ИмяЭлемента,
//	//|	ЕСТЬNULL(ВТ_СохраненныеНастройки.Видимость, ИСТИНА) КАК Видимость,
//	//|	ЕСТЬNULL(ВТ_СохраненныеНастройки.Доступность, ИСТИНА) КАК Доступность
//	//|ИЗ
//	//|	ВТ_ТЗ КАК ВТ_ТЗ
//	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СохраненныеНастройки КАК ВТ_СохраненныеНастройки
//	//|		ПО ВТ_ТЗ.ИмяЭлемента = ВТ_СохраненныеНастройки.ИмяЭлемента";
//	//
//	//Выборка = Запрос.Выполнить().Выбрать();
//	//
//	//Пока Выборка.Следующий() Цикл
//	//	НайденныйЭлемент = Элементы.Найти(Выборка.ИмяЭлемента);
//	//	Если НайденныйЭлемент <> Неопределено Тогда
//	//		Элементы[Выборка.ИмяЭлемента].Видимость = Выборка.Видимость;
//	//		Если    ТипЗнч(Элементы[Выборка.ИмяЭлемента]) = Тип("КнопкаФормы")
//	//			Или ТипЗнч(Элементы[Выборка.ИмяЭлемента]) = Тип("ГруппаФормы")
//	//			Или ТипЗнч(Элементы[Выборка.ИмяЭлемента]) = Тип("ДекорацияФормы")
//	//			Тогда
//	//			Элементы[Выборка.ИмяЭлемента].Доступность = Выборка.Доступность;
//	//		Иначе
//	//			Элементы[Выборка.ИмяЭлемента].ТолькоПросмотр = Не Выборка.Доступность;
//	//		КонецЕсли;
//	//	Иначе
//	//		ВывестиСообщениеПол("Не найден элемент формы с именем %1. Обратитесь к администратору",,,,,Выборка.ИмяЭлемента);
//	//		Элементы.ГруппаФон.Видимость = Ложь;
//	//	КонецЕсли;
//	//КонецЦикла;
//	
//КонецПроцедуры
//rarus bonmak 09.08.2021 16834 --
&НаСервере
Процедура СохранитьНастройкиМонитораНаСервере()
	
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ГруппаМониторНастройкиВидимость", Элементы.ГруппаМониторНастройки.Видимость,,);
	
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ДатаМонитора",           ДатаМонитора);
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "РежимТабличныйДокумент", РежимТабличныйДокумент);
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "КоличествоДнейВНеделе",  КоличествоДнейВНеделе);
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ОтображатьВыходныеДни",  ОтображатьВыходныеДни);
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "КратностьШкалыВремени",  КратностьШкалыВремени);
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ИнтервалАвтообновления", ИнтервалАвтообновления);
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ОтборСкладОтгрузки",     ОтборСкладОтгрузки);
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ОтборВидПродукта",       ОтборВидПродукта);
	
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ПредставлениеИнтервала",     ПредставлениеИнтервала.Выгрузить());
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ИспользуемыеСкладыОтгрузки", ИспользуемыеСкладыОтгрузки.Выгрузить());
	ХранилищеНастроекДанныхФорм.Сохранить("МониторБронированияОтгрузок", "ИспользуемыеСтатусыЗаявок",  ИспользуемыеСтатусыЗаявок.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиМонитораНаСервере()
	
	ЗначениеГруппаМониторНастройкиВидимость = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ГруппаМониторНастройкиВидимость");
	Если ЗначениеЗаполнено(ЗначениеГруппаМониторНастройкиВидимость) Тогда
		Элементы.ГруппаМониторНастройки.Видимость = ЗначениеГруппаМониторНастройкиВидимость;
	Иначе
		Элементы.ГруппаМониторНастройки.Видимость = Ложь;
	КонецЕсли;
	
	ЗначениеДатаМонитора = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ДатаМонитора");
	Если ЗначениеЗаполнено(ЗначениеДатаМонитора) Тогда
		ДатаМонитора = ЗначениеДатаМонитора;
	Иначе
		ДатаМонитора = ТекущаяДата();
	КонецЕсли;
	
	ЗначениеРежимТабличныйДокумент = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "РежимТабличныйДокумент");
	Если ЗначениеЗаполнено(ЗначениеРежимТабличныйДокумент) Тогда
		РежимТабличныйДокумент = ЗначениеРежимТабличныйДокумент;
	Иначе
		РежимТабличныйДокумент = Истина;
	КонецЕсли;
	
	ЗначениеКоличествоДнейВНеделе = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "КоличествоДнейВНеделе");
	Если ЗначениеЗаполнено(ЗначениеКоличествоДнейВНеделе) Тогда
		КоличествоДнейВНеделе = ЗначениеКоличествоДнейВНеделе;
	Иначе
		КоличествоДнейВНеделе = 7;
	КонецЕсли;
	
	ЗначениеОтображатьВыходныеДни = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ОтображатьВыходныеДни");
	Если ЗначениеЗаполнено(ЗначениеОтображатьВыходныеДни) Тогда
		ОтображатьВыходныеДни = ЗначениеОтображатьВыходныеДни;
	Иначе
		ОтображатьВыходныеДни = Ложь;
	КонецЕсли;
	
	ЗначениеКратностьШкалыВремени = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "КратностьШкалыВремени");
	Если ЗначениеЗаполнено(ЗначениеКратностьШкалыВремени) Тогда
		КратностьШкалыВремени = ЗначениеКратностьШкалыВремени;
	Иначе
		КратностьШкалыВремени = 2;
	КонецЕсли;
	
	ЗначениеИнтервалАвтообновления = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ИнтервалАвтообновления");
	Если ЗначениеЗаполнено(ЗначениеИнтервалАвтообновления) Тогда
		ИнтервалАвтообновления = ЗначениеИнтервалАвтообновления;
	Иначе
		ИнтервалАвтообновления = 60;
	КонецЕсли;
	
	ЗначениеОтборСкладОтгрузки = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ОтборСкладОтгрузки");
	Если ЗначениеЗаполнено(ЗначениеОтборСкладОтгрузки) Тогда
		ОтборСкладОтгрузки = ЗначениеОтборСкладОтгрузки;
	Иначе
		ОтборСкладОтгрузки = Справочники.Scan_Склады.ПустаяСсылка();
	КонецЕсли;
	
	ЗначениеОтборВидПродукта = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ОтборВидПродукта");
	Если ЗначениеЗаполнено(ЗначениеОтборВидПродукта) Тогда
		ОтборВидПродукта = ЗначениеОтборВидПродукта;
	Иначе
		ОтборВидПродукта = "Все";
	КонецЕсли;
	
	ЗначениеПредставлениеИнтервала = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ПредставлениеИнтервала");
	Если ЗначениеЗаполнено(ЗначениеПредставлениеИнтервала) Тогда
		ПредставлениеИнтервала.Загрузить(ЗначениеПредставлениеИнтервала);
	Иначе
		ЭлементПредставления = ПредставлениеИнтервала.Добавить();
		ЭлементПредставления.Поле          = "КоличествоИзделий";
		ЭлементПредставления.Представление = "Количество продуктов";
		ЭлементПредставления.НоваяСтрока   = Ложь;
		
		ЭлементПредставления = ПредставлениеИнтервала.Добавить();
		ЭлементПредставления.Поле          = "КодДилера";
		ЭлементПредставления.Представление = "Код дилера";
		ЭлементПредставления.НоваяСтрока   = Ложь;
		
		//rarus agar 21.01.2021 16981 ++
		//ЭлементПредставления = ПредставлениеИнтервала.Добавить();
		//ЭлементПредставления.Поле          = "МестоДоставки";
		//ЭлементПредставления.Представление = "Место доставки";
		//ЭлементПредставления.НоваяСтрока   = Истина;
		//rarus agar 21.01.2021 16981 --
	КонецЕсли;
	
	ЗначениеИспользуемыеСкладыОтгрузки = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ИспользуемыеСкладыОтгрузки");
	Если ЗначениеЗаполнено(ЗначениеИспользуемыеСкладыОтгрузки) Тогда
		ИспользуемыеСкладыОтгрузки.Загрузить(ЗначениеИспользуемыеСкладыОтгрузки);
	КонецЕсли;
	
	ЗначениеИспользуемыеСтатусыЗаявок = ХранилищеНастроекДанныхФорм.Загрузить("МониторБронированияОтгрузок", "ИспользуемыеСтатусыЗаявок");
	Если ЗначениеЗаполнено(ЗначениеИспользуемыеСтатусыЗаявок) Тогда
		ИспользуемыеСтатусыЗаявок.Загрузить(ЗначениеИспользуемыеСтатусыЗаявок);
	Иначе
		ЭлементСтатуса = ИспользуемыеСтатусыЗаявок.Добавить();
		ЭлементСтатуса.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Одобрена");
	КонецЕсли;
	
	УстановитьПериодОтображенияМонитораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодОтображенияМонитораНаКлиенте()
	
	ДатаНачалаОтображения    = НачалоНедели(ДатаМонитора);
	ДатаОкончанияОтображения = КонецНедели(ДатаМонитора);
	
	Элементы.ДатаМонитора.Обновить();
	
	Монитор.ТекущиеПериодыОтображения.Очистить();
	Монитор.ТекущиеПериодыОтображения.Добавить(НачалоДня(ДатаМонитора), КонецДня(ДатаМонитора));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОтображенияМонитораНаСервере()
	
	ДатаНачалаОтображения    = НачалоНедели(ДатаМонитора);
	ДатаОкончанияОтображения = КонецНедели(ДатаМонитора);
	
	Монитор.ТекущиеПериодыОтображения.Очистить();
	Монитор.ТекущиеПериодыОтображения.Добавить(НачалоДня(ДатаМонитора), КонецДня(ДатаМонитора));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборСкладОтгрузкиНаСервере()
	
	Элементы.ОтборСкладОтгрузки.СписокВыбора.Очистить();
	
	Элементы.ОтборСкладОтгрузки.СписокВыбора.Добавить(Справочники.Scan_Склады.ПустаяСсылка(), "Все");
	
	Для Каждого СтрокаСкладаОтгрузки Из ИспользуемыеСкладыОтгрузки Цикл
		Элементы.ОтборСкладОтгрузки.СписокВыбора.Добавить(СтрокаСкладаОтгрузки.СкладОтгрузки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМониторНаКлиенте()
	
	Если РежимТабличныйДокумент Тогда
		ОбновитьМониторТабличныйДокументНаСервере();
	Иначе
		ОбновитьМониторНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМониторТабличныйДокументНаСервере()
	
	МакетМонитора = Обработки.Scan_МониторБронированияОтгрузок.ПолучитьМакет("МониторБронирования");
	
	ПериодыМонитора = Новый Массив;
	
	МониторТабличныйДокумент.Очистить();
	
	Для Счетчик = 0 По 6 Цикл
		ПериодМонитора = НачалоДня(ДатаНачалаОтображения + Счетчик*86400);
		
		Если Не ОтображатьВыходныеДни 
			И ДатаОтгрузкиЯвляетсяВыходным(ПериодМонитора)
			Тогда
			Продолжить;
		КонецЕсли;
		
		ПериодыМонитора.Добавить(ПериодМонитора);
	КонецЦикла;
	
	ДанныеМонитора = ПолучитьДанныеМонитора();
	
	ОбластьШапкаПериодаВертикальныйОтступ = МакетМонитора.ПолучитьОбласть("ШапкаПериода|ВертикальныйОтступ");
	МониторТабличныйДокумент.Вывести(ОбластьШапкаПериодаВертикальныйОтступ);
	
	ВыборкаДатыОтгрузки = ДанныеМонитора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаОтгрузки");
	
	Для Каждого ПериодМонитора Из ПериодыМонитора Цикл
		КоличествоНовые = 0;
		КоличествоБУ    = 0;
		КоличествоДемо  = 0;
		
		ОбластьСтрокаШапкаКолонкаОтступ = МакетМонитора.ПолучитьОбласть("ШапкаПериода|Период");
		ОбластьСтрокаШапкаКолонкаОтступ.Параметры.Период = ПериодМонитора;
		
		Если ВыборкаДатыОтгрузки.НайтиСледующий(Новый Структура("ДатаОтгрузки", ПериодМонитора)) Тогда
			КоличествоНовые = ВыборкаДатыОтгрузки.КоличествоНовые;
			КоличествоБУ    = ВыборкаДатыОтгрузки.КоличествоБУ;
			КоличествоДемо  = ВыборкаДатыОтгрузки.КоличествоДемо;
		КонецЕсли;
		
		ОбластьСтрокаШапкаКолонкаОтступ.Параметры.КоличествоНовые = КоличествоНовые;
		ОбластьСтрокаШапкаКолонкаОтступ.Параметры.КоличествоБУ    = КоличествоБУ;
		ОбластьСтрокаШапкаКолонкаОтступ.Параметры.КоличествоДемо  = КоличествоДемо;
		
		МониторТабличныйДокумент.Присоединить(ОбластьСтрокаШапкаКолонкаОтступ);
		МониторТабличныйДокумент.Присоединить(ОбластьШапкаПериодаВертикальныйОтступ);
		
		ВыборкаДатыОтгрузки.Сбросить();
	КонецЦикла;
	
	ОбластьГоризонтальныйОтступ = МакетМонитора.ПолучитьОбласть("ГоризонтальныйОтступ|ВертикальныйОтступ");
	МониторТабличныйДокумент.Вывести(ОбластьГоризонтальныйОтступ);
	
	//rarus agar 03.08.2021 18080 ++
	МаксимальныйПорядокЗаявок = 0;
	Для Каждого ПериодМонитора Из ПериодыМонитора Цикл
		Если ВыборкаДатыОтгрузки.НайтиСледующий(Новый Структура("ДатаОтгрузки", ПериодМонитора)) Тогда
			ВыборкаПорядок = ВыборкаДатыОтгрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Порядок");
			Пока ВыборкаПорядок.Следующий() Цикл
				МаксимальныйПорядокЗаявок = Макс(МаксимальныйПорядокЗаявок, ВыборкаПорядок.Порядок);
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаДатыОтгрузки.Сбросить();
	КонецЦикла;
	//rarus agar 03.08.2021 18080 --
	
	ОбластьИнтервалВертикальныйОтступ = МакетМонитора.ПолучитьОбласть("Интервал|ВертикальныйОтступ");
	
	ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	
	//rarus agar 03.08.2021 18080 ++
	Для Каждого ПериодМонитора Из ПериодыМонитора Цикл
		ТабличныйДокументКолонка = Новый ТабличныйДокумент;
		
		Если ВыборкаДатыОтгрузки.НайтиСледующий(Новый Структура("ДатаОтгрузки", ПериодМонитора)) Тогда
			Для Счетчик = 1 По МаксимальныйПорядокЗаявок Цикл
				ВыборкаПорядок = ВыборкаДатыОтгрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Порядок");
				Если ВыборкаПорядок.НайтиСледующий(Новый Структура("Порядок", Счетчик)) Тогда
					ВыборкаСкладОтгрузки = ВыборкаПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкладОтгрузки");
					Пока ВыборкаСкладОтгрузки.Следующий() Цикл
						Выборка = ВыборкаСкладОтгрузки.Выбрать();
						Пока Выборка.Следующий() Цикл
							ТабличныйДокументКолонка.Вывести(ОбластьИнтервалВертикальныйОтступ);
							
							ОбластьИнтервалПериод = МакетМонитора.ПолучитьОбласть("Интервал|Период");
							ОбластьИнтервалПериод.Параметры.ПредставлениеИнтервала = СформироватьТекстИнтервала(Выборка);
							ОбластьИнтервалПериод.Параметры.ЗаявкаНаОтгрузку       = Выборка.ЗаявкаНаОтгрузку;
							
							ПрисоединеннаяОбласть = ТабличныйДокументКолонка.Присоединить(ОбластьИнтервалПериод);
							ПрисоединеннаяОбласть.ЦветРамки = Новый Цвет(4, 30, 66);
							
							Если Выборка.ТребуетсяХранение = "Хранение требуется" Тогда
								ПрисоединеннаяОбласть.Картинка = БиблиотекаКартинок.ЗанятьФайл;
							КонецЕсли;
							
							ЦветФонаСтатуса = Выборка.Статус.ЦветФона.Получить();
							Если ЦветФонаСтатуса <> Неопределено Тогда
								ПрисоединеннаяОбласть.ЦветФона = ЦветФонаСтатуса;
							Иначе
								ПрисоединеннаяОбласть.ЦветФона = Новый Цвет(255, 255, 255);
							КонецЕсли;
							ЦветТекстаСтатуса = Выборка.Статус.ЦветТекста.Получить();
							Если ЦветТекстаСтатуса <> Неопределено Тогда
								ПрисоединеннаяОбласть.ЦветТекста = ЦветТекстаСтатуса;
							Иначе
								ПрисоединеннаяОбласть.ЦветТекста = Новый Цвет(0, 0, 0);
							КонецЕсли;
							ШрифтСтатуса = Выборка.Статус.Шрифт.Получить();
							Если ШрифтСтатуса <> Неопределено Тогда
								ПрисоединеннаяОбласть.Шрифт = ШрифтСтатуса;
							КонецЕсли;
							
							ТабличныйДокументКолонка.Вывести(ОбластьГоризонтальныйОтступ);
						КонецЦикла;
					КонецЦикла;
					
					ВыборкаПорядок.Сбросить();
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТабличныйДокументКолонка.Вывести(ОбластьИнтервалВертикальныйОтступ);
			
			ОбластьИнтервалПериод = МакетМонитора.ПолучитьОбласть("Интервал|Период");
			ПрисоединеннаяОбласть = ТабличныйДокументКолонка.Присоединить(ОбластьИнтервалПериод);
			ПрисоединеннаяОбласть.ЦветРамки = Новый Цвет(255, 255, 255);
			
			ТабличныйДокументКолонка.Вывести(ОбластьГоризонтальныйОтступ);
		КонецЕсли;
		
		ВыборкаДатыОтгрузки.Сбросить();
		
		ТабличныйДокументКолонки.Присоединить(ТабличныйДокументКолонка);
	КонецЦикла;
	//rarus agar 03.08.2021 18080 --
	
	МониторТабличныйДокумент.Вывести(ТабличныйДокументКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМониторНаСервере()
	
	ОчиститьМонитор();
	ЗаполнитьИзмеренияМонитора();
	
	Для Каждого ЭлементШкалыВремени Из Монитор.ШкалаВремени.Элементы Цикл
		ЭлементШкалыВремени.Кратность = КратностьШкалыВремени;
	КонецЦикла;
	
	КартинкаВосклицательныйЗнакКрасный = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	ИзмерениеДатаОтгрузки = Монитор.Измерения[0];
	ДанныеМонитора        = ПолучитьДанныеМонитора();
		
	ВыборкаДатыОтгрузки = ДанныеМонитора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаОтгрузки");
	Пока ВыборкаДатыОтгрузки.Следующий() Цикл
		Если Не ОтображатьВыходныеДни 
			И ДатаОтгрузкиЯвляетсяВыходным(ВыборкаДатыОтгрузки.ДатаОтгрузки)
			Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементИзмеренияМонитора = ИзмерениеДатаОтгрузки.Элементы.Найти(ВыборкаДатыОтгрузки.ДатаОтгрузки);
		Если ЭлементИзмеренияМонитора = Неопределено Тогда
			ЭлементИзмеренияМонитора = ИзмерениеДатаОтгрузки.Элементы.Добавить(ВыборкаДатыОтгрузки.ДатаОтгрузки);
		КонецЕсли;
		
		СтруктураПолейТекста = Новый Структура;
		СтруктураПолейТекста.Вставить("ДатаОтгрузки",    ВыборкаДатыОтгрузки.ДатаОтгрузки);
		СтруктураПолейТекста.Вставить("КоличествоНовые", ВыборкаДатыОтгрузки.КоличествоНовые);
		СтруктураПолейТекста.Вставить("КоличествоБУ",    ВыборкаДатыОтгрузки.КоличествоБУ);
		СтруктураПолейТекста.Вставить("КоличествоДемо",  ВыборкаДатыОтгрузки.КоличествоДемо);
		
		ЭлементИзмеренияМонитора.Текст = СформироватьТекстЭлементаИзмерения(СтруктураПолейТекста);
		
		Выборка = ВыборкаДатыОтгрузки.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеЗначений = Новый Соответствие;
			СоответствиеЗначений.Вставить("ДатаОтгрузки", Выборка.ДатаОтгрузки);
			
			НачалоЭлемента = Дата(Год(ДатаМонитора),Месяц(ДатаМонитора),День(ДатаМонитора),Час(Выборка.НачалоОтгрузки),Минута(Выборка.НачалоОтгрузки),Секунда(Выборка.НачалоОтгрузки));
			КонецЭлемента  = Дата(Год(ДатаМонитора),Месяц(ДатаМонитора),День(ДатаМонитора),Час(Выборка.ОкончаниеОтгрузки),Минута(Выборка.ОкончаниеОтгрузки),Секунда(Выборка.ОкончаниеОтгрузки));
			
			НовыйЭлемент = Монитор.Элементы.Добавить(НачалоЭлемента, КонецЭлемента);
			НовыйЭлемент.Текст = СформироватьТекстИнтервала(Выборка);
			НовыйЭлемент.ЦветРамки = Новый Цвет(4, 30, 66);
			НовыйЭлемент.Значение = Выборка.ЗаявкаНаОтгрузку;
			НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначений);
			
			ЦветФонаСтатуса = Выборка.Статус.ЦветФона.Получить();
			Если ЦветФонаСтатуса <> Неопределено Тогда
				НовыйЭлемент.ЦветФона = ЦветФонаСтатуса;
			Иначе
				НовыйЭлемент.ЦветФона = Новый Цвет(255, 255, 255);
			КонецЕсли;
			ЦветТекстаСтатуса = Выборка.Статус.ЦветТекста.Получить();
			Если ЦветТекстаСтатуса <> Неопределено Тогда
				НовыйЭлемент.ЦветТекста = ЦветТекстаСтатуса;
			Иначе
				НовыйЭлемент.ЦветТекста = Новый Цвет(0, 0, 0);
			КонецЕсли;
			ШрифтСтатуса = Выборка.Статус.Шрифт.Получить();
			Если ШрифтСтатуса <> Неопределено Тогда
				НовыйЭлемент.Шрифт = ШрифтСтатуса;
			КонецЕсли;
			
			//rarus agar 21.01.2021 16981 ++
			//Если Выборка.ТребуетсяПерегон = "Перегон требуется" Тогда
			//	НовыйЭлемент.Картинка = КартинкаВосклицательныйЗнакКрасный;
			//КонецЕсли;
			//rarus agar 21.01.2021 16981 --
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьМонитор()
	
	Монитор.Элементы.Очистить();
	Монитор.Измерения.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмеренияМонитора()
	
	ИзмерениеДатаОтгрузки = Монитор.Измерения.Добавить("ДатаОтгрузки");
	
	Для Счетчик = 0 По 6 Цикл
		ДатаИзмерения = НачалоДня(ДатаНачалаОтображения + Счетчик*86400);
		
		Если Не ОтображатьВыходныеДни 
			И ДатаОтгрузкиЯвляетсяВыходным(ДатаИзмерения)
			Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементИзмеренияМонитора = ИзмерениеДатаОтгрузки.Элементы.Добавить(ДатаИзмерения);
		ЭлементИзмеренияМонитора.ЦветФона = Новый Цвет(240, 240, 240);
		ЭлементИзмеренияМонитора.ЦветТекста = Новый Цвет(4, 30, 66);
		ЭлементИзмеренияМонитора.Шрифт = Новый Шрифт(,,Истина);
		
		СтруктураПолейТекста = Новый Структура;
		СтруктураПолейТекста.Вставить("ДатаОтгрузки", ДатаИзмерения);
		
		ЭлементИзмеренияМонитора.Текст = СформироватьТекстЭлементаИзмерения(СтруктураПолейТекста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеМонитора()
	
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ПроектЗаявкиНаОтгрузку"));
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.Отменена"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаОтгрузки",    ДатаНачалаОтображения);
	Запрос.УстановитьПараметр("ДатаОкончанияОтгрузки", ДатаОкончанияОтображения);
	Запрос.УстановитьПараметр("ОтборПоСкладуОтгрузки", ЗначениеЗаполнено(ОтборСкладОтгрузки));
	Запрос.УстановитьПараметр("СкладОтгрузки",         ОтборСкладОтгрузки);
	Запрос.УстановитьПараметр("ИспользуемыеСтатусы",   ИспользуемыеСтатусыЗаявок.Выгрузить().ВыгрузитьКолонку("Статус"));
	
	//rarus agar 03.08.2021 18080 ++
	ТекстЗапроса = "ВЫБРАТЬ
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка КАК ЗаявкаНаОтгрузку,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Номер КАК Номер,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Статус КАК Статус,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Дилер КАК Дилер,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Дилер.КодДилераSOWA КАК КодДилера,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.СоглашениеОПоставке КАК ЗаявкаНаСОП,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.НачалоОтгрузки КАК НачалоОтгрузки,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ОкончаниеОтгрузки КАК ОкончаниеОтгрузки,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ТребуетсяХранение
	|			ТОГДА ""Хранение требуется""
	|		ИНАЧЕ ""Хранение не требуется""
	|	КОНЕЦ КАК ТребуетсяХранение,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.СкладПродажи КАК СкладОтгрузки,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Комментарий КАК Комментарий,
	|	СУММА(1) КАК КоличествоИзделий,
	|	СУММА(ВЫБОР
	|			КОГДА 
	|                 НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.БУ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНовые,
	|	СУММА(ВЫБОР
	|			КОГДА Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.БУ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоБУ,
	|	СУММА(ВЫБОР
	|			КОГДА Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Аренда
	//Rarus bonmak 16.05.2022 19158 ++
	//|					ИЛИ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.ДемоИТест
	|					ИЛИ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Демо
	|					ИЛИ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Тест
	//Rarus bonmak 16.05.2022 19158 --
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДемо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.МаркаПродукта = ЗНАЧЕНИЕ(Справочник.Scan_МаркиПродуктов.Scania)
	|				ТОГДА ПОДСТРОКА(Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.МодельПродукта.Наименование, 1, 10)
	|			ИНАЧЕ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.МодельПродукта.Наименование
	|		КОНЕЦ) КАК МодельПродукта
	|ИЗ
	|	Документ.Scan_ЗаявкаНаОтгрузку.Продукты КАК Scan_ЗаявкаНаОтгрузкуПродукты
	|ГДЕ
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Статус В (&ИспользуемыеСтатусы)
	|	И Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ДатаОтгрузки >= &ДатаНачалаОтгрузки
	|	И Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ДатаОтгрузки <= &ДатаОкончанияОтгрузки
	|	И (НЕ &ОтборПоСкладуОтгрузки
	|			ИЛИ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.СкладПродажи = &СкладОтгрузки)
	|	%ОтборПоВидуПродукта%
	|СГРУППИРОВАТЬ ПО
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Номер,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Дилер,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Дилер.КодДилераSOWA,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ОкончаниеОтгрузки,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.СкладПродажи,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Комментарий,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ДатаОтгрузки,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.НачалоОтгрузки,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Порядок,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Статус,
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.СоглашениеОПоставке,
	|	ВЫБОР
	|		КОГДА Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.ТребуетсяХранение
	|			ТОГДА ""Хранение требуется""
	|		ИНАЧЕ ""Хранение не требуется""
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка.Порядок
	|ИТОГИ
	|	СУММА(КоличествоИзделий),
	|	СУММА(КоличествоНовые),
	|	СУММА(КоличествоБУ),
	|	СУММА(КоличествоДемо)
	|ПО
	|	ДатаОтгрузки,Порядок,СкладОтгрузки";
	//rarus agar 03.08.2021 18080 --
	
	Если    ОтборВидПродукта = "Все" 
		Или ОтборВидПродукта = ""
		Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоВидуПродукта%", "");
	ИначеЕсли ОтборВидПродукта = "Новые" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоВидуПродукта%", "И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Аренда
																		  //Rarus bonmak 16.05.2022 19158 ++
		                                                                  //|И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.ДемоИТест
																		  |И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Демо
																		  |И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Тест
																		  //Rarus bonmak 16.05.2022 19158 --
																		  |И НЕ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.БУ");
	ИначеЕсли ОтборВидПродукта = "БУ" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоВидуПродукта%", "И Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.БУ");
	ИначеЕсли ОтборВидПродукта = "Демо" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоВидуПродукта%", "И (Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Аренда
																		  //Rarus bonmak 16.05.2022 19158 ++
																		  //|ИЛИ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.ДемоИТест
																		  |ИЛИ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Демо
		                                                                  |ИЛИ Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.Тест)");
																		  //Rarus bonmak 16.05.2022 19158 --
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Функция СформироватьТекстЭлементаИзмерения(ПоляТекста)
	
	ДатаОтгрузки = ПоляТекста.ДатаОтгрузки;
	
	КоличествоНовые = 0;
	Если Не ПоляТекста.Свойство("КоличествоНовые", КоличествоНовые) Тогда 
		КоличествоНовые = 0;
	КонецЕсли;
	
	КоличествоБУ = 0;
	Если Не ПоляТекста.Свойство("КоличествоБУ", КоличествоБУ) Тогда 
		КоличествоБУ = 0;
	КонецЕсли;
	
	КоличествоДемо = 0;
	Если Не ПоляТекста.Свойство("КоличествоДемо", КоличествоДемо) Тогда 
		КоличествоДемо = 0;
	КонецЕсли;
	
	ТекстИзмерения = "%1"+ Символы.ПС
	         +"Новые: %2"+ Символы.ПС
			 +"Б/У: %3"+ Символы.ПС
			 +"Демо/Тест: %4"+ Символы.ПС;
	
	Возврат СтрШаблон(ТекстИзмерения, 
	                  Формат(ДатаОтгрузки, "ДЛФ=DD"),
					  КоличествоНовые,
					  КоличествоБУ,
					  КоличествоДемо);
	
КонецФункции

&НаСервере
Функция СформироватьТекстИнтервала(ПоляТекста)
	
	ТекстИнтервала = "";
	
	//rarus agar 03.08.2021 18080 ++
	ДанныеПродуктовЗаявки = ПолучитьДанныеПродуктовЗаявки(ПоляТекста.ЗаявкаНаОтгрузку, ПоляТекста.СкладОтгрузки);
	//rarus agar 03.08.2021 18080 --
	
	Для Каждого ПолеПредставления Из ПредставлениеИнтервала Цикл
		Если ПолеПредставления.НоваяСтрока Тогда
			ТекстИнтервала = ТекстИнтервала + Символы.ПС;
		Иначе
			ТекстИнтервала = ТекстИнтервала + " ";
		КонецЕсли;
		
		//rarus agar 18.02.2021 17229 ++
		Если ПолеПредставления.Поле = "НомераПродуктов" Тогда
			МассивНомеровПродуктов = ДанныеПродуктовЗаявки.ВыгрузитьКолонку("НомерПродукта");
			
			НомераПродуктов = "Продукты: "+ СтрСоединить(МассивНомеровПродуктов, ",");
			ТекстИнтервала  = ТекстИнтервала + НомераПродуктов;
		//rarus agar 18.02.2021 17229 --
		//rarus agar 19.02.2021 17217 ++
		ИначеЕсли ПолеПредставления.Поле = "Перегон" Тогда
			МассивМестПередачи = Новый Массив;
			Для Каждого ДанныеПродукта Из ДанныеПродуктовЗаявки Цикл
				Если  ДанныеПродукта.МестоПередачи <> Справочники.Scan_Склады.ПустаяСсылка() 
					И МассивМестПередачи.Найти(ДанныеПродукта.МестоПередачи) = Неопределено
					Тогда
					МассивМестПередачи.Добавить(ДанныеПродукта.МестоПередачи);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивМестПередачи.Количество() <> 0 Тогда
				//Перегоны   = "Перегон в "+ СтрСоединить(МассивМестПередачи, ",");
				Перегоны   = "Перегон в "+ СтрСоединить(МассивМестПередачи, Символы.ПС);
			Иначе
				Перегоны   = "Без перегона";
			КонецЕсли;
			ТекстИнтервала = ТекстИнтервала + Перегоны;
		Иначе
		//rarus agar 19.02.2021 17217 --
			Попытка
				ТекстИнтервала = ТекстИнтервала + ПоляТекста[ПолеПредставления.Поле];
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(ТекстИнтервала);
	
КонецФункции

//rarus agar 19.02.2021 17217 ++
&НаСервере
Функция ПолучитьДанныеПродуктовЗаявки(ЗаявкаНаОтгрузку, СкладОтгрузки) //rarus agar 03.08.2021 18080 +-
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаОтгрузку",      ЗаявкаНаОтгрузку);
	//rarus agar 03.08.2021 18080 ++
	Запрос.УстановитьПараметр("СкладОтгрузки",         СкладОтгрузки);
	//rarus agar 03.08.2021 18080 --
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.НомерИзделия КАК НомерПродукта,
	|	ВЫБОР
	|		КОГДА Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.МестоПередачи <> ЗНАЧЕНИЕ(Справочник.Scan_Склады.ПустаяСсылка)
	|				И Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.СкладПродажи <> Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.МестоПередачи
	|			ТОГДА Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.МестоПередачи
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Scan_Склады.ПустаяСсылка)
	|	КОНЕЦ КАК МестоПередачи
	|ИЗ
	|	Документ.Scan_ЗаявкаНаОтгрузку.Продукты КАК Scan_ЗаявкаНаОтгрузкуПродукты
	|ГДЕ
	|	Scan_ЗаявкаНаОтгрузкуПродукты.Ссылка = &ЗаявкаНаОтгрузку
	//rarus agar 03.08.2021 18080 ++
	|	И Scan_ЗаявкаНаОтгрузкуПродукты.Продукт.СкладПродажи = &СкладОтгрузки";
	//rarus agar 03.08.2021 18080 --
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
//rarus agar 19.02.2021 17217 --

&НаКлиенте
Процедура ПредставлениеИнтервалаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокПолей = ПолучитьСписокПолейПредставленияИнтервала();
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВыборПоляПредставленияИнтервала", ЭтотОбъект), СписокПолей, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияВыборПоляПредставленияИнтервала(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения <> Неопределено Тогда
		Элементы.ПредставлениеИнтервала.ТекущиеДанные.Поле = РезультатОповещения.Значение;
		Элементы.ПредставлениеИнтервала.ТекущиеДанные.Представление = РезультатОповещения.Представление;
		Элементы.ПредставлениеИнтервала.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПолейПредставленияИнтервала()
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Номер",     "Номер заявки");
	СписокПолей.Добавить("Статус",    "Статус заявки");
	СписокПолей.Добавить("Дилер",     "Дилер");
	СписокПолей.Добавить("КодДилера", "Код дилера");
	СписокПолей.Добавить("ДатаОтгрузки", "Дата отгрузки");
	//СписокПолей.Добавить("СоглашениеОПоставке", "Соглашение о поставке");
	СписокПолей.Добавить("ЗаявкаНаСОП", "Заявка на СОП"); //rarus vikhle 05.11.2020 mt 16723	
	//rarus agar 21.01.2021 16981 ++
	//СписокПолей.Добавить("СкладОтгрузки", "СкладОтгрузки");
	//СписокПолей.Добавить("СкладОтгрузки", "Запрашиваемое место передачи");
	СписокПолей.Добавить("СкладОтгрузки", "Склад продажи");
	//СписокПолей.Добавить("ТребуетсяПерегон", "Требуется перегон");
	//СписокПолей.Добавить("МестоДоставки", "Место доставки");
	//rarus agar 21.01.2021 16981 --
	СписокПолей.Добавить("ТребуетсяХранение", "Требуется хранение");
	СписокПолей.Добавить("КоличествоИзделий", "Количество продуктов");
	СписокПолей.Добавить("НомераПродуктов", "№№ продуктов"); //rarus agar 18.02.2021 17229 +-
	СписокПолей.Добавить("МодельПродукта", "Модель"); //rarus agar 18.02.2021 17229 +-
	СписокПолей.Добавить("Перегон", "Перегон"); //rarus agar 19.02.2021 17217 +-
	СписокПолей.Добавить("Комментарий", "Комментарий");
	
	Возврат СписокПолей;
	
КонецФункции

&НаСервере
Процедура ОбновитьДатыЗаявкиНаОтгрузку(ЗаявкаНаОтгрузку, ДатаИзмерения, ДатаНачала, ДатаОкончания)
	
	ЗаявкаНаОтгрузкуОбъект = ЗаявкаНаОтгрузку.ПолучитьОбъект();
	
	НачалоОтгрузки    = Дата(Год(ДатаИзмерения),Месяц(ДатаИзмерения),День(ДатаИзмерения),Час(ДатаНачала),Минута(ДатаНачала),Секунда(ДатаНачала));
	ОкончаниеОтгрузки = Дата(Год(ДатаИзмерения),Месяц(ДатаИзмерения),День(ДатаИзмерения),Час(ДатаОкончания),Минута(ДатаОкончания),Секунда(ДатаОкончания));
	
	ЗаявкаНаОтгрузкуОбъект.ДатаОтгрузки      = ДатаИзмерения;
	ЗаявкаНаОтгрузкуОбъект.НачалоОтгрузки    = НачалоОтгрузки;
	ЗаявкаНаОтгрузкуОбъект.ОкончаниеОтгрузки = ОкончаниеОтгрузки;
	
	Попытка
		ЗаявкаНаОтгрузкуОбъект.Записать();
	Исключение КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалАвтообновленияПриИзменении(Элемент)
	
	Если ИнтервалАвтообновления = 0 Тогда
		ОтключитьОбработчикОжидания("ОбновитьМониторНаКлиенте");
	Иначе
		ПодключитьОбработчикОжидания("ОбновитьМониторНаКлиенте", ИнтервалАвтообновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	ОбновитьМониторНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеСкладыОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьОтборСкладОтгрузкиНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ДатаОтгрузкиЯвляетсяВыходным(ДатаОтгрузки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год",         Год(ДатаОтгрузки));
	Запрос.УстановитьПараметр("ДатаГрафика", ДатаОтгрузки);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Не Выборка.ДеньВключенВГрафик;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДоступностьЗаявкиДилеруНаСервере(ДокументЗаявка) //rarus bonmak 25.01.2021 17090 ++
	
	Если ДокументЗаявка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Scan_ПраваИНастройки.Scan_Право("ПользовательЯвляетсяСотрудникомСканияРусь") 
		ИЛИ РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	КомпанииПользователя = КомпанииПользователя();
	фДилер = ДокументЗаявка.Дилер;
	Индекс = КомпанииПользователя.Найти(фДилер);
	Если Индекс = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции //rarus bonmak 25.01.2021 17090 --

&НаКлиенте
Процедура МониторТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка) //rarus bonmak 25.01.2021 17090 ++
	ДокументДоступен = ДоступностьЗаявкиДилеруНаСервере(Область.Расшифровка);
	Если НЕ ДокументДоступен Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры //rarus bonmak 25.01.2021 17090 --

#КонецОбласти
