//rarus tenkam 9.06.2016 mantis 6925 ++
&НаКлиенте
Перем мВыбраныСсылки;
&НаКлиенте
Перем СтруктураКТ;		//rarus tenkam 24.02.2017 TLMS 011 (модальность) +

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастроитьОтображениеКолонокСтока();		//rarus tenkam 12.09.2016 mantis 7355 +	
	//УправлениеДиалогом(); 	//rarus tenkam 22.03.2017 mantis 7623 +
	НастроитьПолеОтбора();
	ТумблерПоиск = "0";	//rarus tenkam 9073 +
	//ЗаполнитьСписокКонтрольныхТочек();
	Scan_СборСтатистики.Scan_ПриОткрытииОбработки(РеквизитФормыВЗначение("Объект").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Scan_ВспомогательныеФункцииКлиент.ПроверитьПользователяПортала();//rarus vikhle 07.05.2020 mt 15695
	ВыделеныВсе = Ложь;
	мВыбраныСсылки = Новый Массив;
	ркКоличествоВыбранных = 0;
	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки);
	//rarus tenkam 06.10.2016 mantis 7183 ++
	СписокХО = Новый Массив;
	СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.Доставка"));
	//rarus tenkam 08.02.2017 mantis 8331 +++
	СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение"));
	СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство"));
	//rarus tenkam 08.02.2017 mantis 8331 ---
	СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаИПередачаТК"));
	СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПокупкаУПоставщикаПродажаТретьемуЛицуИПередачаТК"));
	СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.ПродажаТретьемуЛицуСоСкладаСканияРусьИПередачаТК")); 		//rarus tenkam 26.09.2017 mantis 10742 +
	СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияИПередачаТК"));
	СписокХО.Добавить(ПредопределенноеЗначение("Справочник.Scan_ХозяйственныеОперации.СнятиеСХраненияПродажаТретьемуЛицуИПередачаТК"));
	
	Сток.Параметры.УстановитьЗначениеПараметра("СписокХО", СписокХО);
	//Сток.Параметры.УстановитьЗначениеПараметра("НаТекДату", КонецДня(ТекущаяДата()));		//rarus tenkam 28.11.2017 mantis 10885 +		
	//rarus tenkam 05.10.2016 mantis 7183 --
	ОбновитьНастройкиОтбора();
	
	УправлениеДиалогом(); 	//rarus tenkam 22.03.2017 mantis 7623 +
	
	//rarus abrant 26.04.2017 011 +++
	Элементы.ПересчитатьКоличество.Видимость = Scan_ПраваИНастройки.Scan_Право("ИспользоватьПодсчетКоличестваСтрокВАРМ");	
	//rarus tenkam 21.04.2017 011 +++
	Если Элементы.ПересчитатьКоличество.Видимость Тогда
	//Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьПодсчетКоличестваСтрокВАРМ") Тогда
	//rarus abrant 26.04.2017 011 ---
		//rarus uzeo@1c-tm.com.ua 29.05.2017  ++++
		//Элементы.НадписьКоличествоСтрок.Заголовок = "Количество продуктов: " + РассчитатьКоличествоСтрок(сток);
		Элементы.НадписьКоличествоСтрок.Заголовок = "Количество изделий: " + РассчитатьКоличествоСтрок(); //rarus bonmak 05.08.2019 14427
		// rarus uzeo@1c-tm.com.ua 29.05.2017  ----
		
	КонецЕсли;
	//rarus tenkam 21.04.2017 011 ---
КонецПроцедуры

//rarus tenkam 05.08.2016 mantis 7219 ++ (баг с отборами)
&НаКлиенте
Процедура ПриЗакрытии()
	Сток.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();
КонецПроцедуры
//rarus tenkam 05.08.2016 mantis 7219 --

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГОМ

&НаКлиенте
Процедура СтокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СтокФлаг" Тогда
		СтандартнаяОбработка = Ложь;
		
		//rarus bonmak 15.08.2019 14576 ++
		Результат = ЛокальныйСтатусЗаполненОчищен();
		Если Результат Тогда
			ТекстОшибки = Нстр("ru = 'Значение контрольной точки Локальный статус очищено'; en = 'The checkpoint value Local status cleared'");		
			Сообщить(ТекстОшибки);
		КонецЕсли;
		//rarus bonmak 15.08.2019 14576 --
		
		мИндекс = мВыбраныСсылки.Найти(ВыбраннаяСтрока);
		Если мИндекс = Неопределено Тогда
			мВыбраныСсылки.Добавить(ВыбраннаяСтрока);
		Иначе
			мВыбраныСсылки.Удалить(мИндекс);
		КонецЕсли;
	КонецЕсли;
	
	ркКоличествоВыбранных = мВыбраныСсылки.Количество();
	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	ТЗ = СписокВТЗнаСервере();
	Для Каждого СтрокаТЗ Из ТЗ Цикл
	
		Если мВыбраныСсылки.Найти(СтрокаТЗ) = Неопределено Тогда
			мВыбраныСсылки.Добавить(СтрокаТЗ);
		КонецЕсли;
		ркКоличествоВыбранных = мВыбраныСсылки.Количество();
		Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция СписокВТЗнаСервере()

    Схема = Элементы.Сток.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.Сток.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	КолонкаСсылок = ТаблицаРезультат.ВыгрузитьКолонку("Ссылка");
	Возврат КолонкаСсылок;

КонецФункции

&НаКлиенте
Процедура СнятьФлажки(Команда)
	мВыбраныСсылки.Очистить();
	ркКоличествоВыбранных = мВыбраныСсылки.Количество();
	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОМАНДНОЙ ПАНЕЛЬЮ СТОКА

&НаКлиенте
Процедура СоздатьНовоеИзделие(Команда)
	ОткрытьФорму("Справочник.Scan_Изделия.Форма.ФормаЭлемента",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

//rarus tenkam 16.11.2016 mantis 7092 ++
&НаСервере
Процедура ОбновитьСОПНаСервере()
	
	СписокСОПДляОбновления = Справочники.Scan_ДоговорыВзаиморасчетов.ПолучитьСписокСОП(Элементы.Сток.ВыделенныеСтроки[0].Ссылка);
	Для Каждого ТекСтрокаСОП Из СписокСОПДляОбновления Цикл
		
		Если ЗначениеЗаполнено(ТекСтрокаСОП.IDExternalSystem) Тогда
			ИмяМетода = "GetSOP";
			СообщениеОбОшибке = "";
			Отказ = Ложь;
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода,Ложь);
			СтруктураПараметров.Вставить("GUID", ТекСтрокаСОП.IDExternalSystem);
			ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
			Если НЕ Отказ Тогда
				СсылкаЭлемента = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Элементы.Сток.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСОП(Команда)
	Если Элементы.Сток.ВыделенныеСтроки.Количество() = 1 Тогда
		ОбновитьСОПНаСервере();
	Иначе
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщить("Для обновления СОП необходимо спозиционироваться на строке продукта!");
		Сообщить(НСтр("ru = 'Для обновления СОП необходимо спозиционироваться на строке продукта!'; en = 'To update the SOP please select only one line!'")); //rarus bonmak 05.08.2019 14427
		//rarus FominskiyAS 25.04.2019  mantis 14191 ---  
	КонецЕсли;
КонецПроцедуры

//rarus tenkam 16.11.2016 mantis 7092 --

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОМАНДНОЙ ПАНЕЛЬЮ

&НаКлиенте
Процедура РежимЛевойПанелиПоиск(Команда)
	ИзменитьРежимЛевойПанелиНаСервере(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура ИзменитьРежимЛевойПанелиНаСервере(РежимОтображеиия)
	
	Элементы.РежимЛевойПанелиПоиск.Пометка = НЕ Элементы.РежимЛевойПанелиПоиск.Пометка;
	УправлениеДиалогом();
	
КонецПроцедуры

&НаСервере 
Процедура УправлениеДиалогом()
	Элементы.Отбор.Видимость 					= Элементы.РежимЛевойПанелиПоиск.Пометка;	
	Элементы.ГруппаОтборПоСписку.Видимость 		= Элементы.ПоискПоКритериям.Пометка;
	Элементы.ГруппаКонтрольныеТочки.Видимость 	= Элементы.КонтрольныеТочки.Пометка;
	Элементы.ГруппаЗаявки.Видимость 			= Элементы.ПанельЗаявок.Пометка; 	//rarus tenkam 23.11.2016 mantis 7750 +
	Элементы.ГруппаИнформацияПоАКБ.Видимость 	= Элементы.ИнформацияПоАКБ.Пометка;		//rarus tenkam 06.09.2017 mantis 9425 +
	
	Если Элементы.КонтрольныеТочки.Пометка Тогда
		ЗаполнитьСписокКонтрольныхТочек();
	Иначе
		ТаблицаКонтрольныхТочек.Очистить();
	КонецЕсли;
	
	//rarus tenkam 16.06.2016 mantis 6960 ++
	Если Элементы.ПоискПоКритериям.Пометка Тогда
		ОтключитьОтборы();
	Иначе
		Сток.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
		ПолеВвода = "";
		КритерийПоиска = Перечисления.Scan_КритерииПоискаАРМ.ПустаяСсылка();
	КонецЕсли;
	//rarus tenkam 16.06.2016 mantis 6960 --
	
	//rarus tenkam 12.09.2016 mantis 7355 ++
	
	Элементы.СтокГруппаВнутренняяЛогистика.Видимость = Элементы.ФормаОтобразитьВнутренняяЛогистика.Пометка;
	Элементы.СтокГруппаИмпорт.Видимость = Элементы.ФормаОтобразитьИмпорт.Пометка; 
	Элементы.СтокГруппаПрочиеДанные.Видимость = Элементы.ФормаОтобразитьПрочиеДанные.Пометка;
	
	Если Элементы.СтокГруппаВнутренняяЛогистика.Видимость = Элементы.СтокГруппаИмпорт.Видимость И Элементы.СтокГруппаИмпорт.Видимость = Истина Тогда
		Элементы.СтокМестонахождение1.Видимость = Ложь;
		Элементы.СтокМестоДоставки1.Видимость = Ложь;
		Элементы.СтокПланируемаяДатаДоставки1.Видимость = Ложь;
		Элементы.СтокДатаПродажиИзделия1.Видимость = Ложь;
		Элементы.СтокДилер1.Видимость = Ложь;
		Элементы.СтокНомерСОП1.Видимость = Ложь;
		Элементы.СтокКлиент1.Видимость = Ложь;
	Иначе
		Элементы.СтокМестонахождение1.Видимость = Истина;
		Элементы.СтокМестоДоставки1.Видимость = Истина;
		Элементы.СтокПланируемаяДатаДоставки1.Видимость = Истина;
		Элементы.СтокДатаПродажиИзделия1.Видимость = Истина;
		Элементы.СтокДилер1.Видимость = Истина;
		Элементы.СтокНомерСОП1.Видимость = Истина;
		Элементы.СтокКлиент1.Видимость = Истина;
	КонецЕсли;
	//rarus tenkam 12.09.2016 mantis 7355 --
	
	//rarus tenkam 02.11.2016 mantis 7092 ++
	Элементы.ФормаГруппаИнтеграция.Видимость = Scan_ПраваИНастройки.Scan_Право("ОбменСПредставительством");
	//rarus tenkam 02.11.2016 mantis 7092 --
	
	//rarus tenkam 03.04.2017 mantis 9073 +++
	Если Элементы.ПоискПоКритериям.Пометка Тогда
		Если ТумблерПоиск = "0" Тогда
			Элементы.ГруппаПоСписку.Видимость = Истина;
			Элементы.ГруппаПоКоридоруЗначений.Видимость = Ложь;
			ПолеС = "";
			ПолеПо = "";
			ПолеОтбораПоПериоду = ""
		Иначе
			Элементы.ГруппаПоСписку.Видимость = Ложь;
			Элементы.ГруппаПоКоридоруЗначений.Видимость = Истина;
			Сток.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
			ПолеВвода = "";
			КритерийПоиска = Перечисления.Scan_КритерииПоискаАРМ.ПустаяСсылка();
		КонецЕсли;  
	КонецЕсли;
	//rarus tenkam 03.04.2017 mantis 9073 ---
	
	//rarus tenkam 21.04.2017 011 +++
	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьПодсчетКоличестваСтрокВАРМ") Тогда
		Элементы.НадписьКоличествоСтрок.Видимость = Истина;
	Иначе
		Элементы.НадписьКоличествоСтрок.Видимость = Ложь;
	КонецЕсли;
	//rarus tenkam 21.04.2017 011 ---
	
КонецПроцедуры

//rarus tenkam 17.06.2016 mantis 6960 ++
&НаСервере 
Процедура ОтключитьОтборы()
	//Отключим отборы левой панели
	ДеревоОтбор = ЭтотОбъект.Отбор.ПолучитьЭлементы();   
	Для Каждого ЭлементОтбора Из ДеревоОтбор Цикл
		ЭлементОтбора.Использование = Ложь;
	КонецЦикла;
	ОбновитьНастройкиОтбора();
КонецПроцедуры
//rarus tenkam 17.06.2016 mantis 6960 --

&НаКлиенте
Процедура ПоискПоКритериям(Команда)
	Элементы.ПоискПоКритериям.Пометка = НЕ Элементы.ПоискПоКритериям.Пометка;
	УправлениеДиалогом();
	
	//rarus abrant 26.04.2017 011 +++
	Если Элементы.ПересчитатьКоличество.Видимость Тогда
	//Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьПодсчетКоличестваСтрокВАРМ") Тогда
	//rarus abrant 26.04.2017 011 ---
		//rarus samkir 17.04.2017 011 ++
		//rarus uzeo@1c-tm.com.ua 29.05.2017  ++++
		//Элементы.НадписьКоличествоСтрок.Заголовок = "Количество продуктов: " + РассчитатьКоличествоСтрок(сток);
		Элементы.НадписьКоличествоСтрок.Заголовок = "Количество изделий: " + РассчитатьКоличествоСтрок(); //rarus bonmak 05.08.2019 14427
		// rarus uzeo@1c-tm.com.ua 29.05.2017  ----//rarus samkir 17.04.2017 011 --
	КонецЕсли;
	//rarus tenkam 21.04.2017 011 ---
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеТочки(Команда)
	Элементы.КонтрольныеТочки.Пометка = НЕ Элементы.КонтрольныеТочки.Пометка;
	УправлениеДиалогом();
КонецПроцедуры

//rarus tenkam 23.11.2016 mantis 7750 ++
&НаКлиенте
Процедура ПанельЗаявок(Команда)
	Элементы.ПанельЗаявок.Пометка = НЕ Элементы.ПанельЗаявок.Пометка;
	УправлениеДиалогом();
КонецПроцедуры
//rarus tenkam 23.11.2016 mantis 7750 --

//rarus tenkam 06.09.2017 mantis 9425 +++
&НаКлиенте
Процедура ИнформацияПоАКБ(Команда)
	Элементы.ИнформацияПоАКБ.Пометка = НЕ Элементы.ИнформацияПоАКБ.Пометка;
	УправлениеДиалогом(); 
КонецПроцедуры
//rarus tenkam 06.09.2017 mantis 9425 ---


///ФОРМИРОВАНИЕ STATISTICS PORT
&НаКлиенте
Процедура СформироватьStatisticsПортСклад(Команда)
	
	//rarus tenkam 31.10/2016 TLMS 011 ++ (отказ от модальности)	
	ОткрытьФорму("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаВыбораГода",,,,,, Новый ОписаниеОповещения("СформироватьStatisticsПортСкладЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	//СтруктураВозврДанные = ОткрытьФормуМодально("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаВыбораГода",,,);
	//Если СтруктураВозврДанные = Неопределено Тогда
	//	Сообщить("Не выбран год формирования документа!");
	//	Возврат
	//КонецЕсли;
	//
	//ИмяФайла = "statistics_порт-склад_" + Формат(СтруктураВозврДанные.ГодStatistics,"ЧГ=");

	//ПутьКФайлу = ПолучитьПутьКФайлуВыгрузки(ИмяФайла);
	//Если ПутьКФайлу = "" Тогда
	//	Сообщить("Путь сохранения не выбран!");
	//	Возврат;	
	//КонецЕсли;
	//
	//ПродуктыДляВыгрузки = ПолучитьПродуктыПоГоду(СтруктураВозврДанные.ГодStatistics);
	////rarus tenkam 06.07.2016 mantis 6925 ++ (баг)
	////ВыгрузитьДанныеВExcel(КарточкиДляВыгрузки,ПутьКФайлу);
	//ТабДокумент = ПолучитьТабДокументСтатистики(ПродуктыДляВыгрузки);
	//СохранитьДанныеВExcel(ТабДокумент, ПутьКФайлу);
	////rarus tenkam 06.07.2016 mantis 6925 -- (раньше сохранялось на сервере, а не на клиенте!)

	//rarus tenkam 31.10.2016 TLMS 011 --

КонецПроцедуры

//rarus tenkam 31.10.2016 TLMS 011 ++
&НаКлиенте
Процедура СформироватьStatisticsПортСкладЗавершение(СтруктураВозврДанные, ДополнительныеПараметры) Экспорт
	Если СтруктураВозврДанные = Неопределено Тогда
		//rarus FominskiyAS 08.07.2019  mantis 14191 +++
		//Сообщить("Не выбран год формирования документа!");
		Сообщить(НСтр("ru = 'Не выбран год формирования документа!'; en = 'Please select year of the document!'"));
		//rarus FominskiyAS 08.07.2019  mantis 14191 ---  
		Возврат
	КонецЕсли;
	
	ИмяФайла = "statistics_порт-склад_" + Формат(СтруктураВозврДанные.ГодStatistics,"ЧГ=");

	// rarus tenkam 10.04.2019 mantis 14195 +++
	
	//ПутьКФайлу = ПолучитьПутьКФайлуВыгрузки(ИмяФайла);
	//Если ПутьКФайлу = "" Тогда
	//	Сообщить("Путь сохранения не выбран!");
	//	Возврат;	
	//КонецЕсли;
	//
	////rarus tenkam 10.03.2017 mantis 7617 +++
	////ПродуктыДляВыгрузки = ПолучитьПродуктыПоГоду(СтруктураВозврДанные.ГодStatistics);
	//////rarus tenkam 06.07.2016 mantis 6925 ++ (баг)
	//////ВыгрузитьДанныеВExcel(КарточкиДляВыгрузки,ПутьКФайлу);
	////ТабДокумент = ПолучитьТабДокументСтатистики(ПродуктыДляВыгрузки);
	//ТабДокумент = ПолучитьТабДокументСтатистики(СтруктураВозврДанные.ГодStatistics);	
	////rarus tenkam 10.03.2017 mantis 7617 ---
	//СохранитьДанныеВExcel(ТабДокумент, ПутьКФайлу);
	////rarus tenkam 06.07.2016 mantis 6925 -- (раньше сохранялось на сервере, а не на клиенте!)

	// Вызываем диалог выбора файла для сохранения XLS-таблицы
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	Текст = "ru = ""Таблица XLS""; en = ""XLS table""";
	Фильтр = НСтр(Текст)+"(*.xls)|*.xls";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите путь для сохранения";
	ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайла;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ГодStatistics", СтруктураВозврДанные.ГодStatistics);
	ОписаниеВыборПути = Новый ОписаниеОповещения("ВыборФайлаСатистикаПортЗавершение",ЭтотОбъект, ДополнительныеПараметры);
	ДиалогОткрытияФайла.Показать(ОписаниеВыборПути); 	
	
	// rarus tenkam 10.04.2019 mantis 14195 ---
	
КонецПроцедуры

//&НаКлиенте
//Функция ПолучитьПутьКФайлуВыгрузки(ПолноеИмяФайла)
//	
//	// Вызываем диалог выбора файла для сохранения XLS-таблицы
//	Режим = РежимДиалогаВыбораФайла.Сохранение;
//	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
//	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
//	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
//	Текст = "ru = ""Таблица XLS""; en = ""XLS table""";
//	Фильтр = НСтр(Текст)+"(*.xls)|*.xls";
//	ДиалогОткрытияФайла.Фильтр = Фильтр;
//	ДиалогОткрытияФайла.Заголовок = "Выберите путь для сохранения";
//	ДиалогОткрытияФайла.ПолноеИмяФайла = ПолноеИмяФайла;
//	
//	Если ДиалогОткрытияФайла.Выбрать() Тогда
//		Возврат ДиалогОткрытияФайла.ПолноеИмяФайла;
//	Иначе
//		Возврат "";
//	КонецЕсли;
//КонецФункции

// rarus tenkam 10.04.2019 mantis 14195 ---

//rarus tenkam 10.03.2017 mantis 7617 +++ 
//&НаСервереБезКонтекста
//Функция ПолучитьПродуктыПоГоду(ГодКарточки)
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	Scan_Продукты.Ссылка КАК Ссылка
//	               |ИЗ
//	               |	Справочник.Scan_Продукты КАК Scan_Продукты
//	               |ГДЕ
//	               |	ГОД(Scan_Продукты.ЗаказНаЗавод.CDD) = &ГодКарточек
//	               |
//				   //rarus tenkam 17.08.2016 mantis 6925 ++
//	               |УПОРЯДОЧИТЬ ПО
//	               |	Scan_Продукты.Изделие.НомерИзделия";
//				   //rarus tenkam 17.08.2016 mantis 6925 --
//	Запрос.УстановитьПараметр("ГодКарточек",ГодКарточки);
//	Результат = Запрос.Выполнить().Выгрузить();
//	КолонкаСсылок = Результат.ВыгрузитьКолонку("Ссылка");
//	Возврат КолонкаСсылок;
//КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоВПартии(НомерБукингЛиста) 
	Если НЕ ЗначениеЗаполнено(НомерБукингЛиста) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Scan_ЗаказыНаЗавод.Ссылка) КАК КоличествоЗаказов
		|ИЗ
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|ГДЕ
		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста = &НомерБукингЛиста
		|	И Scan_ЗаказыНаЗавод.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_ЗаказыНаЗавод.НомерБукингЛиста";
	Запрос.УстановитьПараметр("НомерБукингЛиста", НомерБукингЛиста);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КоличествоЗаказов;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции
//rarus tenkam 10.03.2017 mantis 7617 ---

&НаСервереБезКонтекста
Функция ПолучитьТабДокументСтатистики(ГодКарточек) 	//rarus tenkam 10.03.2017 mantis 7617 +
//Функция ПолучитьТабДокументСтатистики(ПродуктыДляВыгрузки)

	ТаблицаСохранение = Новый ТабличныйДокумент;
	Макет = Обработки.Scan_АРМОтделЛогистики.ПолучитьМакет("StatisticsПорт");
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");

	ТаблицаСохранение.Вывести(ОбластьШапка);
	//rarus tenkam 10.03.2017 mantis 7617 +++ 
	//	Сч = 1;
	//	Для Каждого Стр Из ПродуктыДляВыгрузки Цикл
	//		ОбластьСтрока.Параметры.ПортСПБ = Стр.Ссылка.ЗаказНаЗавод.ПортСПБ;
	//		ОбластьСтрока.Параметры.ПорядковыйНомер = Сч;
	//		ОбластьСтрока.Параметры.НомерШасси = Стр.Ссылка.Изделие.НомерИзделия;
	//		ОбластьСтрока.Параметры.МодельПродукта = Стр.Ссылка.Изделие.МодельПродукта;
	//		ОбластьСтрока.Параметры.ВесПродукта = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Стр.Ссылка.Изделие,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Вес, ТекущаяДата());
	//		ОбластьСтрока.Параметры.ДлинаПродукта = Справочники.Scan_Изделия.ЧтениеЗначенияРегистраСведения(Стр.Ссылка.Изделие, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Длина, ТекущаяДата());
	//		//rarus sergei 10.08.2016 mantis 6925 ++
	//		ОбластьСтрока.Параметры.ПортСПБ = Стр.Ссылка.ЗаказНаЗавод.CDD;
	//		//rarus sergei 10.08.2016 mantis 6925 --
	//		//ОбластьСтрока.Параметры.ДатаДоставкиПланДилер = Стр.ДатаДоставкиПланДилер;
	//		//ОбластьСтрока.Параметры.МестоДоставки = Стр.МестоДоставки;

	//		ТаблицаСохранение.Вывести(ОбластьСтрока);
	//		Сч = Сч + 1;
	//	КонецЦикла;
	//rarus bonmak 05.08.2019 14427 заменил на новый регистр
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие КАК Изделие,
		|	МИНИМУМ(Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие) КАК ЗаявкаНаДействие
		|ПОМЕСТИТЬ ПерваяЗаявкаДоставка
		|ИЗ
		|	РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|ГДЕ
		|	(Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.Доставка)
		|			ИЛИ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ДоставкаИПередачаВПроизводство)
		|			ИЛИ Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ДоставкаИПостановкаНаХранение))
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.ПометкаУдаления = ЛОЖЬ
		|	И Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие.СтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыЗаявокНаДействие.Аннулирована)
		|
		|СГРУППИРОВАТЬ ПО
		|	Scan_КорректировкаИнформацииПоЗаявкам.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПерваяЗаявкаДоставка.Изделие КАК Изделие,
		|	ПерваяЗаявкаДоставка.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		|	ПерваяЗаявкаДоставка.ЗаявкаНаДействие.МестоДоставки.АдресСкладаЛогистический КАК АдресДоставки,
		|	ПерваяЗаявкаДоставка.ЗаявкаНаДействие.ДатаПолучения КАК ДатаОтгрузкиПлан,
		|	ПерваяЗаявкаДоставка.ЗаявкаНаДействие.ДатаДоставкиПлановая КАК ДатаДоставкиПлан,
		|	ЕСТЬNULL(Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаПеревозчику, ЗНАЧЕНИЕ(Документ.Scan_ЗаявкаПеревозчику.ПустаяСсылка)) КАК ЗаявкаПеревозчику
		|ПОМЕСТИТЬ ДанныеЗаявок
		|ИЗ
		|	ПерваяЗаявкаДоставка КАК ПерваяЗаявкаДоставка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КорректировкаИнформацииПоЗаявкам КАК Scan_КорректировкаИнформацииПоЗаявкам
		|		ПО ПерваяЗаявкаДоставка.Изделие = Scan_КорректировкаИнформацииПоЗаявкам.Изделие
		|			И ПерваяЗаявкаДоставка.ЗаявкаНаДействие = Scan_КорректировкаИнформацииПоЗаявкам.ЗаявкаНаДействие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗаявок.Изделие КАК Изделие,
		|	ДанныеЗаявок.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		|	ДанныеЗаявок.ЗаявкаПеревозчику КАК ЗаявкаПеревозчику,
		|	ДанныеЗаявок.ЗаявкаПеревозчику.Перевозчик КАК Перевозчик,
		|	ДанныеЗаявок.АдресДоставки КАК АдресДоставки,
		|	ДанныеЗаявок.ДатаОтгрузкиПлан КАК ДатаОтгрузкиПлан,
		|	ДанныеЗаявок.ДатаДоставкиПлан КАК ДатаДоставкиПлан,
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.ДатаУходаФакт КАК ДатаОтгрузкиФакт,
		|	Scan_ЗаявкаПеревозчикуСоставЗаявки.ДатаДоставкиФакт КАК ДатаДоставкиФакт
		|ПОМЕСТИТЬ ПолныеДанныеЗавокПоИзделию
		|ИЗ
		|	ДанныеЗаявок КАК ДанныеЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Scan_ЗаявкаПеревозчику.СоставЗаявки КАК Scan_ЗаявкаПеревозчикуСоставЗаявки
		|		ПО ДанныеЗаявок.ЗаявкаПеревозчику = Scan_ЗаявкаПеревозчикуСоставЗаявки.Ссылка
		|			И ДанныеЗаявок.Изделие = Scan_ЗаявкаПеревозчикуСоставЗаявки.Изделие
		|;
		|
	    //rarus BProg_Gladkov 22.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|ВЫБРАТЬ
		|	Scan_ЗаказыНаЗавод.Ссылка КАК ЗаказНаЗавод,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDD2,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК CDD,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Значение, ДАТАВРЕМЯ(1, 1, 1))
		|		ИНАЧЕ ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Значение, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК АктуальнаяCDD
		|ПОМЕСТИТЬ ЗаказыНаЗаводСКлючевымиДатами
		|ИЗ
		|	Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD2)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD2.Объект,
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|				,
		|				ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод)
		|					И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.CDD)) КАК Scan_КлючевыеДатыПроцессовСрезПоследнихCDD
		|		ПО Scan_ЗаказыНаЗавод.Ссылка = Scan_КлючевыеДатыПроцессовСрезПоследнихCDD.Объект
		|;
		|
		//rarus BProg_Gladkov 22.11.2019 0014452 --
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
		|	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод,
		//rarus BProg_Gladkov 22.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	ЗаказыНаЗаводСКлючевымиДатами.АктуальнаяCDD КАК АктуальнаяCDD
		//rarus BProg_Gladkov 22.11.2019 0014452 -- 
		|ПОМЕСТИТЬ ЗаказыИИзделия
		|ИЗ
		|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних,
		//rarus BProg_Gladkov 22.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаЗаводСКлючевымиДатами КАК ЗаказыНаЗаводСКлючевымиДатами
		|   ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = ЗаказыНаЗаводСКлючевымиДатами.ЗаказНаЗавод
		|ГДЕ
		|	ГОД(ЗаказыНаЗаводСКлючевымиДатами.АктуальнаяCDD) = &ГодКарточек
		//|	(ГОД(Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDD2) = &ГодКарточек
		//|			ИЛИ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDD2 = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|				И ГОД(Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.CDD) = &ГодКарточек)
		//rarus BProg_Gladkov 22.11.2019 0014452 -- 
		|	И Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод.НомерБукингЛиста <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыИИзделия.Изделие КАК Изделие,
		|	ЗаказыИИзделия.Изделие.НомерИзделия КАК НомерШасси,
		|	ЗаказыИИзделия.Изделие.МодельПродукта КАК МодельПродукта,
		|	ЗаказыИИзделия.Изделие.ТахографСЗаводаСкания КАК ТахографСЗаводаСкания,
		|	Scan_ХарактеристикиИзделияСрезПоследнихВес.Значение КАК Вес,
		|	Scan_ХарактеристикиИзделияСрезПоследнихДлина.Значение КАК Длина,
		|	ЗаказыИИзделия.ЗаказНаЗавод КАК ЗаказНаЗавод,
		//rarus BProg_Gladkov 22.11.2019 0014452 ++ Ключевые даты перенесены в регистр.
		|	ЗаказыИИзделия.АктуальнаяCDD КАК CDD,
		//|	ВЫБОР
		//|		КОГДА ЗаказыИИзделия.ЗаказНаЗавод.CDD2 <> NULL
		//|				ИЛИ ЗаказыИИзделия.ЗаказНаЗавод.CDD2 <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|			ТОГДА ЗаказыИИзделия.ЗаказНаЗавод.CDD2
		//|		ИНАЧЕ ЗаказыИИзделия.ЗаказНаЗавод.CDD
		//|	КОНЕЦ КАК CDD,
		//rarus BProg_Gladkov 22.11.2019 0014452 -- 
		|	ЗаказыИИзделия.ЗаказНаЗавод.НомерБукингЛиста КАК НомерПартии,
		|	ПолныеДанныеЗавокПоИзделию.ЗаявкаНаДействие КАК ЗаявкаНаДействие,
		|	ПолныеДанныеЗавокПоИзделию.ЗаявкаПеревозчику КАК ЗаявкаПеревозчику,
		|	ПолныеДанныеЗавокПоИзделию.Перевозчик КАК Перевозчик,
		|	ПолныеДанныеЗавокПоИзделию.АдресДоставки КАК АдресДоставки,
		|	ПолныеДанныеЗавокПоИзделию.ДатаОтгрузкиПлан КАК ДатаОтгрузкиПлан,
		|	ПолныеДанныеЗавокПоИзделию.ДатаДоставкиПлан КАК ДатаДоставкиПлан,
		|	ПолныеДанныеЗавокПоИзделию.ДатаОтгрузкиФакт КАК ДатаОтгрузкиФакт,
		|	ПолныеДанныеЗавокПоИзделию.ДатаДоставкиФакт КАК ДатаДоставкиФакт,
		|	ЗаказыИИзделия.Изделие.ПортОтправки КАК ИзделиеПортОтправки,
		|	ЗаказыИИзделия.Изделие.ПортПрихода КАК ИзделиеПортПрихода
		|ИЗ
		|	ЗаказыИИзделия КАК ЗаказыИИзделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПолныеДанныеЗавокПоИзделию КАК ПолныеДанныеЗавокПоИзделию
		|		ПО ЗаказыИИзделия.Изделие = ПолныеДанныеЗавокПоИзделию.Изделие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиИзделия.СрезПоследних(&НаДату, ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.Вес)) КАК Scan_ХарактеристикиИзделияСрезПоследнихВес
		|		ПО ЗаказыИИзделия.Изделие = Scan_ХарактеристикиИзделияСрезПоследнихВес.Изделие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиИзделия.СрезПоследних(&НаДату, ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.Длина)) КАК Scan_ХарактеристикиИзделияСрезПоследнихДлина
		|		ПО ЗаказыИИзделия.Изделие = Scan_ХарактеристикиИзделияСрезПоследнихДлина.Изделие
		|УПОРЯДОЧИТЬ ПО
		|	НомерШасси";
	
	Запрос.УстановитьПараметр("ГодКарточек", ГодКарточек);
	Запрос.УстановитьПараметр("НаДату", Дата(ГодКарточек,12,31,23,59,59));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабРезультат = РезультатЗапроса.Выгрузить();
	//Сч = 1;	//rarus tenkam 03.05.2017 mantis 7617 +
	НомерПартии = "";
	Для Каждого Стр Из ТабРезультат Цикл
		//rarus tenkam 03.05.2017 mantis 7617 +++
		//Если Стр.НомерПартии <> НомерПартии Тогда
		//	//Следующая партия
		//	Сч = 1;
		//КонецЕсли;
		//rarus tenkam 03.05.2017 mantis 7617 +++
		//ОбластьСтрока.Параметры.КоличествоВПартии = ПолучитьКоличествоВПартии(Стр.НомерПартии);
		//ОбластьСтрока.Параметры.ПортСПБ = Стр.ПортСПБ;
		//ОбластьСтрока.Параметры.ПорядковыйНомер = Сч;
		ОбластьСтрока.Параметры.КоличествоВПартии = Scan_ВспомогательныеФункцииСервер.ПолучитьКоличествоВПартии(Стр.НомерПартии);
		ОбластьСтрока.Параметры.CDD = Стр.CDD;
		ОбластьСтрока.Параметры.ПорядковыйНомер = Scan_ВспомогательныеФункцииСервер.ПолучитьНомерВПартии(Стр.НомерПартии, Стр.Изделие);
		//rarus tenkam 03.05.2017 mantis 7617 ---
		ОбластьСтрока.Параметры.НомерШасси = Стр.НомерШасси;
		ОбластьСтрока.Параметры.МодельПродукта = Стр.МодельПродукта;
		ОбластьСтрока.Параметры.ВесПродукта = Стр.Вес;
		ОбластьСтрока.Параметры.ДлинаПродукта = Стр.Длина;
		ОбластьСтрока.Параметры.ТахографСЗаводаСкания = Стр.ТахографСЗаводаСкания.Расшифровка;
		ОбластьСтрока.Параметры.АдресДоставки = Стр.АдресДоставки;
		ОбластьСтрока.Параметры.Перевозчик = Стр.Перевозчик;
		ОбластьСтрока.Параметры.ДатаОтгрузкиПлан = Стр.ДатаОтгрузкиПлан;
		ОбластьСтрока.Параметры.ДатаОтгрузкиФакт = Стр.ДатаОтгрузкиФакт;
		ОбластьСтрока.Параметры.ДатаДоставкиПлан = Стр.ДатаДоставкиПлан;
		ОбластьСтрока.Параметры.ДатаДоставкиФакт = Стр.ДатаДоставкиФакт;
		//rarus abrant 17.04.2017 mantis 7617 +++
		ОбластьСтрока.Параметры.ПортОтгрузки = Стр.ИзделиеПортОтправки;
		ОбластьСтрока.Параметры.ПортПрихода = Стр.ИзделиеПортПрихода;
		//rarus abrant 17.04.2017 mantis 7617 ---
		
		ТаблицаСохранение.Вывести(ОбластьСтрока);
		//rarus tenkam 03.05.2017 mantis 7617 +++
		//Сч = Сч + 1;	
		//НомерПартии = Стр.НомерПартии;
		//rarus tenkam 03.05.2017 mantis 7617 ---
	КонецЦикла;


	//rarus tenkam 10.03.2017 mantis 7617 ---	
	Возврат ТаблицаСохранение;

КонецФункции

&НаКлиенте
Процедура СохранитьДанныеВExcel(ТаблицаСохранение, ПутьКФайлу)
	ТаблицаСохранение.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	//rarus FominskiyAS 21.04.2019  mantis 14191 +++
	//Сообщить("Данные выгружены в файл " + ПутьКФайлу);
	Сообщить(НСтр("ru = 'Данные выгружены в файл '; en = 'Data uploaded into the file '") + ПутьКФайлу);
	//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
КонецПроцедуры
//rarus tenkam 06.07.2016 mantis 6925 --

//rarus tenkam 12.09.2016 mantis 7355 ++
/// ПОДМЕНЮ ОТОБРАЖЕНИЕ

&НаКлиенте
Процедура ОтобразитьВнутренняяЛогистика(Команда)
	Элементы.ФормаОтобразитьВнутренняяЛогистика.Пометка = НЕ Элементы.ФормаОтобразитьВнутренняяЛогистика.Пометка;
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИмпорт(Команда)
	Элементы.ФормаОтобразитьИмпорт.Пометка = НЕ Элементы.ФормаОтобразитьИмпорт.Пометка;
	УправлениеДиалогом();

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПрочиеДанные(Команда)
	Элементы.ФормаОтобразитьПрочиеДанные.Пометка = НЕ Элементы.ФормаОтобразитьПрочиеДанные.Пометка;
	УправлениеДиалогом();

КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеКолонокСтока()
	//Элементы.СтокГруппаОтображатьВсегда.Видимость = Истина;		//всегда истина
	Элементы.СтокГруппаВнутренняяЛогистика.Видимость = Scan_ПраваИНастройки.Scan_Право("ОтображатьВнутренняяЛогистикаАРМ");
	Элементы.СтокГруппаИмпорт.Видимость = Scan_ПраваИНастройки.Scan_Право("ОтображатьИмпортАРМ");
	Элементы.СтокГруппаПрочиеДанные.Видимость = Scan_ПраваИНастройки.Scan_Право("ОтображатьПрочиеДанныеАРМ");
	
	Элементы.ФормаОтобразитьВнутренняяЛогистика.Пометка = Элементы.СтокГруппаВнутренняяЛогистика.Видимость;
	Элементы.ФормаОтобразитьИмпорт.Пометка = Элементы.СтокГруппаИмпорт.Видимость;
	Элементы.ФормаОтобразитьПрочиеДанные.Пометка = Элементы.СтокГруппаПрочиеДанные.Видимость;

КонецПроцедуры

//rarus tenkam 12.09.2016 mantis 7355 --

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТБОРОМ

&НаСервере
Процедура НастроитьПолеОтбора()
	// заполним быстрые отборы
	ДеревоОтбор = ЭтотОбъект.Отбор.ПолучитьЭлементы();   
	
	ОбъектНастройки 	= Сток.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ДоступныеНастройки	= Сток.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
	
	Для Каждого ЭлементОтбора Из ОбъектНастройки Цикл
		
		//Если ОтборПоВидуНоменклатуры <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоВидуНоменклатуры Тогда
		//	ЭлементОтбора.Использование = Истина;
		//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//	ЭлементОтбора.ПравоеЗначение = ОтборПоВидуНоменклатуры;
		//ИначеЕсли ОтборПоЗапретуЗакупки <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоЗапретуЗакупки Тогда
		//	ЭлементОтбора.Использование = Истина;
		//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//	ЭлементОтбора.ПравоеЗначение = ОтборПоЗапретуЗакупки;
		//ИначеЕсли ОтборПоЗапретуПродажи <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоЗапретуПродажи Тогда
		//	ЭлементОтбора.Использование = Истина;
		//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//	ЭлементОтбора.ПравоеЗначение = ОтборПоЗапретуПродажи;
		//КонецЕсли;
		
		ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
		// Имя поля изменилось или поле было удалено.
		Если ДоступноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//rarus abrant 11.04.2017 mantis 9073 +++
		ЗаголовокПоля = ЭлементОтбора.Представление; 
		Если НЕ ЗначениеЗаполнено(ЗаголовокПоля) Тогда
			ЗаголовокПоля = ПолучитьЗаголовокПоля(ДоступноеПоле);
		КонецЕсли;
		//rarus abrant 11.04.2017 mantis 9073 ---
		НовыйОтбор = ДеревоОтбор.Добавить();
		НовыйОтбор.Использование  = ЭлементОтбора.Использование;
		НовыйОтбор.ЛевоеЗначение  = ЭлементОтбора.ЛевоеЗначение;
		НовыйОтбор.ВидСравнения   = ЭлементОтбора.ВидСравнения;
		НовыйОтбор.ПравоеЗначение = ?(ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение), ЭлементОтбора.ПравоеЗначение, ДоступноеПоле.ТипЗначения.ПривестиЗначение(ЭлементОтбора.ПравоеЗначение));
		НовыйОтбор.Заголовок      = ПолучитьПредставлениеЭлементаОтбора(ЗаголовокПоля, ЭлементОтбора.ВидСравнения);
		
	КонецЦикла;
	
		
	////добавим сюда же отбор по интервалу
	//НовыйОтбор = ДеревоОтбор.Добавить();
	//НовыйОтбор.Использование  = Ложь;
	//НовыйОтбор.ЛевоеЗначение  = "ЗаказНаЗаводCDD";
	//НовыйОтбор.ВидСравнения   = ВидСравнения.ИнтервалВключаяГраницы;
	//НовыйОтбор.ЗначениеС = Дата('00010101');
	//НовыйОтбор.ЗначениеДо = Дата('00010101');

	////НовыйОтбор.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();
	//НовыйОтбор.Заголовок      = "ЗаказНаЗаводCDD";
	//
	////+Альфа-Авто
	//// и модель
	//НовыйОтбор = ДеревоОтбор.Добавить();
	//НовыйОтбор.Использование  = Ложь;
	//НовыйОтбор.ЛевоеЗначение  = "Модель";
	//НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	//НовыйОтбор.ПравоеЗначение = Справочники.Модели.ПустаяСсылка();
	//НовыйОтбор.Заголовок      = "Модель";
	////-Альфа-Авто
	//
	//// Уберем дублирущий отбор
	//Если РежимПодбора Тогда
	//	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
	//КонецЕсли;
	
КонецПроцедуры // НастроитьПолеОтбора()

// Получает заголовок для поля отбора
//
&НаСервере
Функция ПолучитьЗаголовокПоля(ДоступноеПоле) Экспорт
	
	ЗаголовокПоля = "";
	Если ДоступноеПоле.Родитель = Неопределено Тогда
		ЗаголовокПоля     = ДоступноеПоле.Заголовок;
	Иначе
		ЗаголовокРодителя = ДоступноеПоле.Родитель.Заголовок;
		//rarus tenkam 15.11.2016 mantis 7822 ++
		Если ЗаголовокРодителя = "Заявка на действие.Дата доставки (плановая).Даты начала" Тогда
			ЗаголовокПоля = "Заявка на действие.Дата доставки (плановая)";
		Иначе	//rarus tenkam 15.11.2016 mantis 7822 --
			ЗаголовокПоля = СтрЗаменить(ДоступноеПоле.Заголовок, ЗаголовокРодителя+".", "")+ " (" + (ЗаголовокРодителя)+ ")";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаголовокПоля;
	
КонецФункции

// Получает представление элемента отбора
//
&НаСервере
Функция ПолучитьПредставлениеЭлементаОтбора(ПредставлениеПоля, ВидСравнения)
	
	ПредставлениеСравнения = "";
	// Производим формирование секции выдов сравнения
	Если ВидСравнения=Неопределено ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.Равно ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		// Формирование представлений для прямых видов условий производить не будем
		
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
		ПредставлениеСравнения = "(>)";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ПредставлениеСравнения = "(>=)";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
		ПредставлениеСравнения = "(<)";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ПредставлениеСравнения = "(<=)";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		ПредставлениеСравнения = "(НЕ)";
	Иначе
		ПредставлениеСравнения = "("+Строка(ВидСравнения)+")";
	КонецЕсли;
	
	ПредставлениеСравнения = ПредставлениеПоля + ПредставлениеСравнения;
	
	// Возвращаем сформированное представление текущего элемента отбора
	Возврат ПредставлениеСравнения;
	
КонецФункции // ПолучитьПредставлениеЭлементаОтбора()

// Функция определения того, что отбор выполняетсяпо списку значений
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	Результат = Ложь;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ 
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ 
		ВидСравненияОтбора= ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Установка для поля формы выбора
//
&НаСервере
Процедура УстановитьФормуВыбора(Элемент, ФормаВыбора)
	
	Элемент.ФормаВыбора = ФормаВыбора;
	
КонецПроцедуры

// Обновление отбора списка
//
&НаСервере
Процедура ОбновитьНастройкиОтбора()
	
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	ОтборСКД    = Неопределено;
	Для Каждого ЭлементКомпоновщика Из Сток.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтборСКД = ЭлементКомпоновщика;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
	Если ОтборСКД<>Неопределено Тогда
		
		//СтрокаОтбораПоПоставщику 				= Неопределено;
		//ОтборПоПоставщикуИспользуется 			= Ложь;
		//
		////+Альфа-Авто
		//СтрокаОтборПоМодели						= Неопределено;
		//ОтборПоМоделиИспользуется 				= Ложь;
		////-Альфа-Авто
		
		ОбъектНастройки = ОтборСКД.Элементы;
		
		Для Каждого СтрокаОтбора Из ДеревоОтбор Цикл
			
			////пока пропустим поставщика, с ними разберемся позже
			//Если СтрокаОтбора.ЛевоеЗначение = "Поставщик" Тогда
			//	СтрокаОтбораПоПоставщику = СтрокаОтбора;
			//	ОтборПоПоставщикуИспользуется = СтрокаОтбора.Использование; 
			//	Продолжить;
			////+Альфа-Авто
			//ИначеЕсли СтрокаОтбора.ЛевоеЗначение = "Модель" Тогда
			//	СтрокаОтборПоМодели = СтрокаОтбора;
			//	ОтборПоМоделиИспользуется = СтрокаОтбора.Использование; 
			//	Продолжить;
			////-Альфа-Авто
			//КонецЕсли;
			
			//заполним отборы компоновщика
			СписокЭлементовОтбора = Новый СписокЗначений;
			Для Каждого ЭлементОбъекта Из ОбъектНастройки Цикл
				Если ЭлементОбъекта.ЛевоеЗначение = СтрокаОтбора.ЛевоеЗначение Тогда
					СписокЭлементовОтбора.Добавить(ЭлементОбъекта);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокЭлементовОтбора.Количество() = 0 Тогда
				СписокЭлементовОтбора.Добавить(ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")));
			КонецЕсли;
			
			Для Каждого ЭлементСписка Из СписокЭлементовОтбора Цикл
				ЭлементОтбора 				 = ЭлементСписка.Значение;
				ЭлементОтбора.Использование  = СтрокаОтбора.Использование;
				ЭлементОтбора.ЛевоеЗначение  = СтрокаОтбора.ЛевоеЗначение;
				ЭлементОтбора.ВидСравнения   = СтрокаОтбора.ВидСравнения;
				ЭлементОтбора.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
			КонецЦикла;
			
		КонецЦикла;
		
		////+Альфа-Авто
		////Теперь посмотрим, что у нас с отбором по поставщику и модели
		//Если ОтборПоПоставщикуИспользуется ИЛИ ОтборПоМоделиИспользуется Тогда
		//	УстановитьОтборТоваровПоСсылке(ОбъектНастройки, ОтборПоПоставщикуИспользуется, СтрокаОтбораПоПоставщику, ОтборПоМоделиИспользуется, СтрокаОтборПоМодели);
		////-Альфа-Авто
		//Иначе
			//сбросим отбор по ссылке
			ПолеКомпоновкиСсылка = Новый ПолеКомпоновкиДанных("Ссылка");
			Для Каждого ЭлементОбъекта Из ОбъектНастройки Цикл
				Если ЭлементОбъекта.ЛевоеЗначение = ПолеКомпоновкиСсылка Тогда
					ЭлементОбъекта.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
		//КонецЕсли;
		
	КонецЕсли;
	УправлениеОтображениемКнопкиОтбор(); //rarus sergei 02.12.2016 mantis 8057 +
КонецПроцедуры

//rarus sergei 02.12.2016 mantis 8057 ++
Процедура УправлениеОтображениемКнопкиОтбор()
	флаг = ложь;
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ПродуктВАрхиве");
	Для каждого элементОтбора Из ДеревоОтбор Цикл
		Если элементОтбора.Использование = Истина И элементОтбора.ЛевоеЗначение <> ПолеКомпоновки Тогда
			флаг = истина;
			прервать;
		КонецЕсли;
	КонецЦикла;
	Если флаг Тогда
		Элементы.РежимЛевойПанелиПоиск.Картинка = БиблиотекаКартинок.ОтборКомпоновкиДанныхВключен ;
		Элементы.ДекорацияОтбор.Видимость = Истина;
	Иначе 
		Элементы.РежимЛевойПанелиПоиск.Картинка = БиблиотекаКартинок.ОтборКомпоновкиДанных;	
		Элементы.ДекорацияОтбор.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры
//rarus sergei 02.12.2016 mantis 8057 --


// Обработчик окончания выбора значения отбора
//
&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

//Обработчик команды отображения вида сравнения
//
&НаКлиенте
Процедура ОтображатьВидСравнения(Команда)
	
	Элементы.ОтборВидСравнения.Видимость                        = НЕ Элементы.ОтборВидСравнения.Видимость;
	Элементы.ОтборКонтекстноеМенюОтображатьВидСравнения.Пометка = Элементы.ОтборВидСравнения.Видимость;
	
КонецПроцедуры

// Обработчик изменения поля "Вид сравнения" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.Заполнено") ИЛИ 
		ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.НеЗаполнено") Тогда
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Истина;
	Иначе
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Ложь;
	КонецЕсли;
	
	// rarus tenkam 19.07.2018 mantis 13346 +++
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		Элементы.ОтборПравоеЗначение.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		Элементы.ОтборПравоеЗначение.РежимВыбораИзСписка = Истина;
	Иначе
		Элементы.ОтборПравоеЗначение.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
		Элементы.ОтборПравоеЗначение.РежимВыбораИзСписка = Ложь;  	
	КонецЕсли;
	// rarus tenkam 19.07.2018 mantis 13346 ---
	
КонецПроцедуры

// Обработчик изменения поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры

// Обработчик начала выбора поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ 
		ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		////+Альфа-Авто
		//Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
		//	СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", ТекущиеДанные.ПравоеЗначение, Новый ОписаниеТипов(?(ТекущиеДанные.ЛевоеЗначение = "Модель", "СправочникСсылка.Модели", "СправочникСсылка.Контрагенты")), Неопределено, Ложь);
		////-Альфа-Авто
		//Иначе
			
			ДоступноеПоле = Сток.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			
			Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ
				ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ТолькоГруппы = Истина;
			Иначе
				ТолькоГруппы = Ложь;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", ТекущиеДанные.ПравоеЗначение, ДоступноеПоле.ТипЗначения, ДоступноеПоле.ДоступныеЗначения, ТолькоГруппы);
			
			// rarus tenkam 19.07.2018 mantis 13346 +++ 
			ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			// rarus tenkam 19.07.2018 mantis 13346 ---
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	ОбновитьНастройкиОтбора();
	
	//rarus abrant 26.04.2017 011 +++
	Если Элементы.ПересчитатьКоличество.Видимость Тогда
	//Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьПодсчетКоличестваСтрокВАРМ") Тогда
	//rarus abrant 26.04.2017 011 ---
		//rarus samkir 17.04.2017 011 ++
		//rarus uzeo@1c-tm.com.ua 29.05.2017  ++++
		//Элементы.НадписьКоличествоСтрок.Заголовок = "Количество продуктов: " + РассчитатьКоличествоСтрок(сток);
		//Элементы.НадписьКоличествоСтрок.Заголовок = "Количество продуктов: " + РассчитатьКоличествоСтрок();	//rarus tenkam 29.11.2017 mantis 10885 +
		// rarus uzeo@1c-tm.com.ua 29.05.2017  ----
		//rarus samkir 17.04.2017 011 --
	КонецЕсли;
	//rarus tenkam 21.04.2017 011 ---
	СнятьФлажки(Неопределено);	//rarus tenkam 21.04.2017 mantis 9275 +
КонецПроцедуры

//rarus samkir 17.04.2017 011++
&НаСервере
//rarus uzeo@1c-tm.com.ua 29.05.2017  ++++
//Функция РассчитатьКоличествоСтрок(ДинамическийСписок)
Функция РассчитатьКоличествоСтрок()
// rarus uzeo@1c-tm.com.ua 29.05.2017  ----
	
	//rarus tenkam 04.05.2017 TLMS 011 +++
	//СхемаКомпоновкиДанных = Элементы.Сток.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	//НКД   = Элементы.Сток.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	//// Заполнение выводимых полей и группировок
	//ВыбранноеПолеКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	//ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	//ГруппировкаКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	//
	//АвтоВыбранноеПолеКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	//
	////Заполнение параметров
	//Если ДинамическийСписок.Параметры.Элементы.Количество() > 0 Тогда
	//	ПараметрыДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.ПараметрыДанных.Элементы;
	//	Для каждого СтрокаПараметров Из ДинамическийСписок.Параметры.Элементы Цикл
	//		ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Добавить();
	//		ПараметрСКД.Имя = Строка(СтрокаПараметров.Параметр);
	//		ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
	//		ПараметрСКД.ОграничениеИспользования = Ложь;
	//		ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
	//		
	//		ЗаполнитьЗначенияСвойств(ПараметрыДанных.Добавить(), СтрокаПараметров);
	//	КонецЦикла;
	//КонецЕсли; 
	//
	//// Сформируем настройки КД
	//ИсточникДоступныхНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	//КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	//КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	//КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	//
	//Для Каждого ЭлементОтбора Из НКД.Отбор.Элементы Цикл 
	//	Если ЭлементОтбора.Использование ТОгда
	//		СоздатьЭлементОтбора(КомпоновщикНастроекКомпоновкиДанных.ФиксированныеНастройки.Отбор.Элементы,ЭлементОтбора);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//// Получим итоговые настройки и макет
	//НастройкиКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
	//
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных).Количество();
	
	Схема = Элементы.Сток.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.Сток.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	ТаблицаРезультат.Свернуть("Ссылка");
	НайденнаяСтрока = ТаблицаРезультат.Найти(Неопределено, "Ссылка");
	Если НайденнаяСтрока <> Неопределено Тогда
		ТаблицаРезультат.Удалить(НайденнаяСтрока);
	КонецЕсли;
	
	Возврат ТаблицаРезультат.Количество();
	//rarus tenkam 04.05.2017 TLMS 011 ---
КонецФункции

&НаСервере
Процедура СоздатьЭлементОтбора(ЭлементыОтбора,ЭлементОтбораИсточник)
Если Тип(ЭлементОтбораИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбораИсточник.Элементы.Количество() > 0 Тогда		
		Для Каждого ЭлементОтбора Из ЭлементОтбораИсточник.Элементы Цикл			
			СоздатьЭлементОтбора(ЭлементыОтбора,ЭлементОтбора)			
		КонецЦикла;		
	иначе
		НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,ЭлементОтбораИсточник);	
	КонецЕсли;
КонецПроцедуры // СоздатьЭлементОтбора()
//rarus samkir 17.04.2017 011---


// Обработчик события возникающего на клиенте при двойном щелчке мыши (нажатии Enter) в ячейке таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если Поле.Имя = "ОтборВидСравнения" Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокВыбора = Элементы.ОтборВидСравнения.СписокВыбора;
		СписокВыбора.Очистить();
		
		////+Альфа-Авто
		//Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
		////-Альфа-Авто
		//	СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно, 		Строка(ВидСравненияКомпоновкиДанных.Равно));
		//	СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеРавно, 	Строка(ВидСравненияКомпоновкиДанных.НеРавно));
		//	СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке, 	Строка(ВидСравненияКомпоновкиДанных.ВСписке));
		//	СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке, 	Строка(ВидСравненияКомпоновкиДанных.НеВСписке));
		//Иначе
		// rarus tenkam 20.07.2018 mantis 13346 +++
			//ДоступноеПолеОтбора = Сток.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			//Если НЕ ДоступноеПолеОтбора = Неопределено Тогда
			//	Для Каждого ДоступноеСравнения Из ДоступноеПолеОтбора.ДоступныеВидыСравнения Цикл
			//		СписокВыбора.Добавить(ДоступноеСравнения.Значение, Строка(ДоступноеСравнения.Значение));
			//	КонецЦикла;
			//КонецЕсли;
			
		// rarus tenkam 20.07.2018 mantis 13346 ---					
		//КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		////+Альфа-Авто
		//Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
		//	Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
		//	Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов(?(ТекущиеДанные.ЛевоеЗначение = "Модель", "СправочникСсылка.Модели", "СправочникСсылка.Контрагенты"));
		//	Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
		//	Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		////-Альфа-Авто
		//Иначе
			
			ДоступноеПоле = Сток.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			
			Если ДоступноеПоле = Неопределено Тогда
				Элементы.ОтборПравоеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
			Иначе
				
				Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ 
					ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
				ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
				ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				Иначе
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
				КонецЕсли;
				
				
				Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = ДоступноеПоле.БыстрыйВыбор;
				Элементы.ОтборПравоеЗначение.Маска                = ДоступноеПоле.Маска;
				Элементы.ОтборПравоеЗначение.ФорматРедактирования = ДоступноеПоле.ФорматРедактирования;
				
				Если НЕ ДоступноеПоле.ФормаВыбора = "" Тогда
					УстановитьФормуВыбора(Элементы.ОтборПравоеЗначение, ДоступноеПоле.ФормаВыбора);
				КонецЕсли;
				
				
				Элементы.ОтборПравоеЗначение.ОграничениеТипа      = ДоступноеПоле.ТипЗначения;
				
				Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
				МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
				Если МассивТипов.Количество()> 0 Тогда
					Если МассивТипов[0] = Тип("Строка") Тогда
						Элементы.ОтборПравоеЗначение.КнопкаВыбора = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте перед началом изменения таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" ИЛИ Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик окончания редактирования таблицы "Отбор"
//

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОИСКОМ ПО КРИТЕРИЯМ

//rarus tenkam 17.06.2016 mantis 6960 ++

&НаКлиенте
Процедура КритерийПоискаПриИзменении(Элемент)
	Сток.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ПолеВвода = "";
КонецПроцедуры

&НаКлиенте
Процедура ОкПоискПоКритериям(Команда)
	
	Если ТумблерПоиск = "0" Тогда 	//rarus tenkam 03.04.2017 mantis 9073 +
			
		Если НЕ ЗначениеЗаполнено(КритерийПоиска) Тогда
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Выберите критерий поиска!");
			Сообщить(НСтр("ru = 'Выберите критерий поиска!'; en = 'Select your search criteria!'"));
			//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
			Возврат;
		КонецЕсли;
		
		Если СокрЛП(ПолеВвода) = "" Тогда
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Список данных для поиска пустой!");
			Сообщить(НСтр("ru = 'Список данных для поиска пустой!'; en = 'The search data list is empty!'"));
			//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
			Возврат;
		КонецЕсли;
	//rarus tenkam 03.04.2017 mantis 9073 +++
	Иначе
		Если НЕ ЗначениеЗаполнено(ПолеОтбораПоПериоду) Тогда
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Выберите критерий поиска!");
			Сообщить(НСтр("ru = 'Выберите критерий поиска!'; en = 'Select your search criteria!'"));
			//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
			Возврат;
		КонецЕсли;
		//rarus abrant 13.04.2017 mantis 9073 +++
		Если ТипЗнч(ПолеПо)=ТипЗнч(ПолеС) И ПолеПо <= ПолеС Тогда
		//rarus abrant 13.04.2017 mantis 9073 ---
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Конечное значение коридора периода не может быть меньше начального!");
			Сообщить(НСтр("ru = 'Конечное значение коридора периода не может быть меньше начального!'; en = 'Final value cannot be lower that starting point of the period corridor!'"));
			//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	//rarus tenkam 03.04.2017 mantis 9073 ---	
		
	ПоискПоКритериямНаСервере();
	
	//rarus abrant 26.04.2017 011 +++
	Если Элементы.ПересчитатьКоличество.Видимость Тогда
	//Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьПодсчетКоличестваСтрокВАРМ") Тогда
	//rarus abrant 26.04.2017 011 ---
		//rarus samkir 17.04.2017 011 ++
		//rarus uzeo@1c-tm.com.ua 29.05.2017  ++++
		//Элементы.НадписьКоличествоСтрок.Заголовок = "Количество продуктов: " + РассчитатьКоличествоСтрок(сток);
		Элементы.НадписьКоличествоСтрок.Заголовок = "Количество изделий: " + РассчитатьКоличествоСтрок(); //rarus bonmak 05.08.2019 14427
		// rarus uzeo@1c-tm.com.ua 29.05.2017  ----//rarus samkir 17.04.2017 011 --
	КонецЕсли;
	//rarus tenkam 21.04.2017 011 ---
КонецПроцедуры

&НаСервере
Процедура ПоискПоКритериямНаСервере()
	
	ОтключитьОтборы();
	Если ТумблерПоиск = "0" Тогда  //rarus tenkam 03.04.2017 mantis 9073 +++
	
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеВвода, Символы.ПС, Истина);
		
		Если КритерийПоиска = Перечисления.Scan_КритерииПоискаАРМ.НомерИзделия Тогда
			ЛевоеЗначение = "ИзделиеНомерИзделия";
		ИначеЕсли КритерийПоиска = Перечисления.Scan_КритерииПоискаАРМ.МодельПродукта Тогда
			ЛевоеЗначение = "ИзделиеМодельПродукта.Наименование";
		ИначеЕсли КритерийПоиска = Перечисления.Scan_КритерииПоискаАРМ.VIN Тогда
			ЛевоеЗначение = "ИзделиеVIN";
		ИначеЕсли КритерийПоиска = Перечисления.Scan_КритерииПоискаАРМ.НомерЗаказа Тогда
			ЛевоеЗначение = "ЗаказНаЗаводНаименование";
		ИначеЕсли КритерийПоиска = Перечисления.Scan_КритерииПоискаАРМ.МестоХранения Тогда
			//rarus tenkm 05.10.2016 mantis 7183 ++
			ЛевоеЗначение = "МестоХранения.Наименование";
			//Сообщить("Поиск по данному критерию пока не реализован");
			//Возврат;
			//rarus tenkam 05.10.2016 mantis 7183 --
		ИначеЕсли КритерийПоиска = Перечисления.Scan_КритерииПоискаАРМ.Дилер Тогда
			ЛевоеЗначение = "Заказчик.Наименование";
			ЛевоеЗначениеДилера = "Заказчик.КодДилераSOWA";		
		КонецЕсли;
		
		ОбъектНастройки 	= Сток.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
		ОбъектНастройки.Очистить();

		Если КритерийПоиска <> Перечисления.Scan_КритерииПоискаАРМ.Дилер Тогда
			
			НовыйОтбор = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.Использование  = Истина;
			НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
			НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтбор.ПравоеЗначение = МассивПодстрок;
		Иначе
			//поиск дилера выполнять по двум критериям – наименованию и коду дилера SOWA
			НоваяГруппаОтбора = ОбъектНастройки.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			НовыйОтбор = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.Использование  = Истина;
			НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
			НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтбор.ПравоеЗначение = МассивПодстрок;
			
			НовыйОтбор = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.Использование  = Истина;
			НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЛевоеЗначениеДилера);
			НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтбор.ПравоеЗначение = МассивПодстрок;
			
			НоваяГруппаОтбора.Использование = Истина;
			
		КонецЕсли;
		//rarus tenkam 03.04.2017 mantis 9073 +++
	Иначе
		ОбъектНастройки = Сток.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
		ОбъектНастройки.Очистить();
		
		НовыйОтбор = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование  = Истина;
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПолеОтбораПоПериоду);
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		НовыйОтбор.ПравоеЗначение = ПолеС;
		
		НовыйОтбор = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование  = Истина;
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПолеОтбораПоПериоду);
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		НовыйОтбор.ПравоеЗначение = ПолеПо;
		         		
	КонецЕсли;
	//rarus tenkam 03.04.2017 mantis 9073 ---	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПоискПоКритериям(Команда)
	Сток.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	
	//rarus abrant 26.04.2017 011 +++
	Если Элементы.ПересчитатьКоличество.Видимость Тогда
	//Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьПодсчетКоличестваСтрокВАРМ") Тогда
	//rarus abrant 26.04.2017 011 ---
		//rarus samkir 17.04.2017 011 ++
		//rarus uzeo@1c-tm.com.ua 29.05.2017  ++++
		//Элементы.НадписьКоличествоСтрок.Заголовок = "Количество продуктов: " + РассчитатьКоличествоСтрок(сток);
		Элементы.НадписьКоличествоСтрок.Заголовок = "Количество изделий: " + РассчитатьКоличествоСтрок(); //rarus bonmak 05.08.2019 14427
		// rarus uzeo@1c-tm.com.ua 29.05.2017  ----
		//rarus samkir 17.04.2017 011 --
	КонецЕсли;
	//rarus tenkam 21.04.2017 011 ---
КонецПроцедуры

//rarus tenkam 17.06.2016 mantis 6960 --

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОНТРОЛЬНЫМИ ТОЧКАМИ

&НаСервере
Процедура ЗаполнитьСписокКонтрольныхТочек()
	ТаблицаКонтрольныхТочек.Очистить();
	СписокКТ = ПолучитьСписокКТ();
	//rarus bonmak 15.08.2019 14576 ++
	
	//rarus BProg_Dekin 18.05.2020 mantis 0015999 ++
	//ОтображатьЛокальныйСтатус = Scan_ПраваИНастройки.Scan_Право("РазрешатьИзменениеСтатусовЗаказовНаЗавод");
	//ИмяРеквизитаЛокальныйСтатус = Метаданные.Справочники.Scan_ЗаказыНаЗавод.Реквизиты.СтатусЗаказаЛокальный.Имя;
	
	ОтображатьЛокальныйСтатус = Scan_ПраваИНастройки.Scan_Право("РазрешатьИзменениеСтатусовПродуктов"); 
	ИмяРеквизитаЛокальныйСтатус = Метаданные.Справочники.Scan_Изделия.Реквизиты.ЛокальныйСтатусПродукта.Имя;		
	//rarus BProg_Dekin 18.05.2020 mantis 0015999 --
	
	//rarus bonmak 15.08.2019 14576 --
	Для Каждого СтрокаКТ Из СписокКТ Цикл
		//rarus bonmak 15.08.2019 14576 ++
		Если СтрокаКТ.КонтрольнаяТочка.РеквизитОбъекта = ИмяРеквизитаЛокальныйСтатус И НЕ ОтображатьЛокальныйСтатус Тогда
			Продолжить;	
		КонецЕсли;
		//rarus bonmak 15.08.2019 14576 --
		СтрокаТаблицы = ТаблицаКонтрольныхТочек.Добавить();
		СтрокаТаблицы.КонтрольнаяТочка = СтрокаКТ.КонтрольнаяТочка;
		СтрокаТаблицы.РеквизитКТ = СтрокаКТ.КонтрольнаяТочка.РеквизитОбъекта;	//rarus tenkam 24.02.2017 TLMS 011 (модальность) +
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКТ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_КонтрольныеТочкиАРМ.КонтрольнаяТочка
	               |ИЗ
	               |	РегистрСведений.Scan_КонтрольныеТочкиАРМ КАК Scan_КонтрольныеТочкиАРМ
	               |ГДЕ
	               |	Scan_КонтрольныеТочкиАРМ.АРМОтделаЛогистики = ИСТИНА";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипКТ(КонтрольнаяТочка)
	//rarus sergei 15.08.2016 mantis 7110 ++ наложил условие на объект методанных
	Если КонтрольнаяТочка.ОбъектМетаданных = "Scan_ЗаказыНаЗавод" Тогда
		РеквизитыСправочника = Метаданные.НайтиПоПолномуИмени("Справочник.Scan_ЗаказыНаЗавод").Реквизиты;
		РеквизитКарточки = РеквизитыСправочника.Найти(КонтрольнаяТочка.РеквизитОбъекта);
		//rarus bonmak 05.08.2019 14427 ++
		//ИначеЕсли КонтрольнаяТочка.ОбъектМетаданных = "Scan_Продукты" Тогда
	//	РеквизитыСправочника = Метаданные.НайтиПоПолномуИмени("Справочник.Scan_Продукты").Реквизиты;
	//	РеквизитКарточки = РеквизитыСправочника.Найти(КонтрольнаяТочка.РеквизитОбъекта);
	//rarus bonmak 05.08.2019 14427 --
	//rarus tenkam 03.04.2017 mantis 9191 +++
	ИначеЕсли КонтрольнаяТочка.ОбъектМетаданных = "Scan_Изделия" Тогда
		РеквизитыСправочника = Метаданные.НайтиПоПолномуИмени("Справочник.Scan_Изделия").Реквизиты;
		РеквизитКарточки = РеквизитыСправочника.Найти(КонтрольнаяТочка.РеквизитОбъекта);
	ИначеЕсли КонтрольнаяТочка.ОбъектМетаданных = "Scan_КлючевыеДатыРегистрСведений" Тогда //rarus bonmak 05.08.2019 14427
		РеквизитКарточки = Метаданные.РегистрыСведений.Scan_КлючевыеДатыПроцессов.Ресурсы.Значение;
	КонецЕсли;
	//rarus tenkam 03.04.2017 mantis 9191 ---
	Возврат РеквизитКарточки.Тип;
	//rarus sergei 15.08.2016 mantis 7110 ++
КонецФункции

&НаСервере
Функция ЕстьЗаполненныеКТ()
	ЕстьЗаполненные = Ложь;
	Для Каждого СтрокаКТ Из ТаблицаКонтрольныхТочек Цикл
		Если ЗначениеЗаполнено(СтрокаКТ.Значение) ИЛИ СтрокаКТ.Очистить Тогда //rarus bonmak 12.08.2019 14433 второй параметр
			ЕстьЗаполненные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьЗаполненные;	
КонецФункции

&НаКлиенте
Процедура ТаблицаКонтрольныхТочекПередНачаломИзменения(Элемент, Отказ)
	ТипКонтрольнойТочки = ПолучитьТипКТ(Элементы.ТаблицаКонтрольныхТочек.ТекущиеДанные.КонтрольнаяТочка);
	
	Элемент.ПодчиненныеЭлементы.ТаблицаКонтрольныхТочекЗначение.ВыбиратьТип = Ложь;
	Элемент.ПодчиненныеЭлементы.ТаблицаКонтрольныхТочекЗначение.ОграничениеТипа = ТипКонтрольнойТочки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкКонтрольныеТочки(Команда)
	Если мВыбраныСсылки.Количество() <> 0  И ЕстьЗаполненныеКТ() Тогда
		УстановитьЗначенияКонтрольныхТочек(мВыбраныСсылки);	
	КонецЕсли;
	//rarus tenkam 24.02.2017 TLMS 011 (модальность) +++
	//СнятьФлажки(Команда); //rarus sergei 17.10.2016 mantis 6925 +
	//Элементы.Сток.Обновить();
	//rarus tenkam 24.02.2017 TLMS 011 (модальность) ---
КонецПроцедуры

//rarus tenkam 24.06.2016 mantis 6825 ++ (доп. требование)
&НаКлиенте
Процедура УстановитьЗначенияКонтрольныхТочек(МассивСсылок)

	//rarus tenkam 24.02.2017 TLMS 011 (модальность) +++
	//ИспользуемыеКТ = ПолучитьСтруктуруКТ(ТаблицаКонтрольныхТочек);	
	//Для Каждого СтрокаПродукта Из МассивСсылок Цикл
	//	Для Каждого СтрокаКТ Из ИспользуемыеКТ Цикл
	//		ЗаписатьКТНаСервере(СтрокаКТ.Ключ,СтрокаКТ.Значение, СтрокаПродукта);
	//	КонецЦикла;
	//КонецЦикла;
	УстановкаВОбрабочике = Ложь;
	ОбрабатыватьГрузовойБилет = Истина;
	СтруктураКТ = Новый Структура;
	Для Каждого СтрокаКТ из ТаблицаКонтрольныхТочек Цикл
		Если ЗначениеЗаполнено(СтрокаКТ.Значение) ИЛИ СтрокаКТ.Очистить Тогда //rarus bonmak 12.08.2019 14433
			СтруктураКТ.Вставить(СтрокаКТ.РеквизитКТ, СтрокаКТ.Значение);
		КонецЕсли;
	КонецЦикла;
	Если СтруктураКТ.Свойство("ЕстьБукингЛист") Тогда
		Если СтруктураКТ["ЕстьБукингЛист"] = Ложь Тогда
			СтруктураКТ.Вставить("НомерБукингЛиста", "");
			СтруктураКТ.Вставить("ДатаБукингЛиста", Дата('00010101'));
		Иначе
			УстановкаВОбрабочике = Истина;
			ПараметрыОткрытия = Новый Структура("МассивСсылок", МассивСсылок);
			//rarus BProg_Gladkov 22.11.2019 0014452 ++ Удален ГрузовойБилет
			//Если СтруктураКТ.Свойство("ПолученГрузовойБилет") Тогда
			//	Если СтруктураКТ["ПолученГрузовойБилет"] = Ложь Тогда
			//		СтруктураКТ.Вставить("НомерГрузовогоБилета", "");
			//		СтруктураКТ.Вставить("ДатаГрузовогоБилета", Дата('00010101'));
			//	Иначе
			//		ПараметрыОткрытия.Вставить("ОбработатьГрузовойЛист", Истина);
			//		ОбрабатыватьГрузовойБилет = Ложь;
			//	КонецЕсли;
			//КонецЕсли;
			//rarus BProg_Gladkov 22.11.2019 0014452 -- 
			Обработчик = Новый ОписаниеОповещения("УстановитьКТПослеВыбораБукингЛиста", ЭтотОбъект, ПараметрыОткрытия);
			ОткрытьФорму("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаБукингЛист",ПараметрыОткрытия,,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	//rarus BProg_Gladkov 22.11.2019 0014452 ++ Удален ГрузовойБилет 
	//Если СтруктураКТ.Свойство("ПолученГрузовойБилет") И ОбрабатыватьГрузовойБилет Тогда
	//	Если СтруктураКТ["ПолученГрузовойБилет"] = Ложь Тогда
	//		СтруктураКТ.Вставить("НомерГрузовогоБилета", "");
	//		СтруктураКТ.Вставить("ДатаГрузовогоБилета", Дата('00010101'));
	//	Иначе
	//		УстановкаВОбрабочике = Истина;
	//		ПараметрыОткрытия = Новый Структура("МассивСсылок", МассивСсылок);
	//		Обработчик = Новый ОписаниеОповещения("УстановитьКТПослеВыбораГрузовогоБилета", ЭтотОбъект, ПараметрыОткрытия);
	//		ОткрытьФорму("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаГрузовогоБилета",,,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//	КонецЕсли;
	//КонецЕсли;
	//rarus BProg_Gladkov 22.11.2019 0014452 -- 
	
	// rarus tenkam 10.07.2018 mantis 13210 +++
	Если НЕ Scan_ПраваИНастройки.Scan_Право("ИспользоватьЗадачиСНакладными") Тогда //rarus bonmak 07.08.2020 14375 ++ добавил условие		
		Если СтруктураКТ.Свойство("БУ") И СтруктураКТ.БУ = Истина Тогда
			ПараметрыОткрытия = Новый Структура("МассивСсылок", МассивСсылок);
			ПараметрыОткрытия.Вставить("ЭтоПоступлениеБУ", Истина);
			Обработчик = Новый ОписаниеОповещения("ЗавершениеСозданияПоступленияБУ", ЭтотОбъект, ПараметрыОткрытия);
			
			ПоказатьВопрос(Обработчик, "Необходимо создать поступление на склад?",РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		// rarus tenkam 10.07.2018 mantis 13210 ---
	КонецЕсли; //rarus bonmak 07.08.2020 14375 --
	
	Если НЕ УстановкаВОбрабочике Тогда
		ЗаписатьКТПоСтруктуре(МассивСсылок, СтруктураКТ);
		СнятьФлажки(Неопределено); 
		Элементы.Сток.Обновить();
	КонецЕсли;
	//rarus tenkam 24.02.2017 TLMS 011 (модальность) ---
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруКТ(ТаблицаКТ)
	//rarus tenkam 24.02.2017 TLMS 011 (модальность) +++
	СтруктураКТ = Новый Структура;
	Для Каждого СтрокаКТ из ТаблицаКонтрольныхТочек Цикл
		Если ЗначениеЗаполнено(СтрокаКТ.Значение) Тогда
			СтруктураКТ.Вставить(СтрокаКТ.РеквизитКТ, СтрокаКТ.Значение);
		КонецЕсли;
	КонецЦикла;
	//СтруктураКТ = Новый Структура;
	//Для Каждого СтрокаКТ Из ТаблицаКТ Цикл
	//	Если ЗначениеЗаполнено(СтрокаКТ.Значение) Тогда
	//		РеквизитКТ = ПолучитьРеквизитКонтрольнойТочки(СтрокаКТ.КонтрольнаяТочка);
	//		СтруктураКТ.Вставить(РеквизитКТ, СтрокаКт.Значение);
	//		Если РеквизитКТ = "ЕстьБукингЛист" Тогда
	//			Если СтрокаКТ.Значение = Истина Тогда
	//				СтруктураВозврДанные = ОткрытьФормуМодально("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаБукингЛист",,,);
	//				Если СтруктураВозврДанные <> Неопределено Тогда
	//					СтруктураКТ.Вставить("НомерБукингЛиста", СтруктураВозврДанные.НомерБукингЛиста);
	//					СтруктураКТ.Вставить("ДатаБукингЛиста", СтруктураВозврДанные.ДатаБукингЛиста);
	//				КонецЕсли;
	//			Иначе
	//				СтруктураКТ.Вставить("НомерБукингЛиста", "");
	//				СтруктураКТ.Вставить("ДатаБукингЛиста", Дата('00010101'));
	//			КонецЕсли;
	//			//rarus sergei 12.10.2016 mantis 6925 ++ (Доп. постановка)
	//		ИначеЕсли РеквизитКТ = "ПолученГрузовойБилет" Тогда
	//			Если СтрокаКТ.Значение = Истина Тогда
	//				СтруктураВозврДанные = ОткрытьФормуМодально("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаГрузовогоБилета",,,);
	//				Если СтруктураВозврДанные <> Неопределено Тогда
	//					Если СтруктураВозврДанные.НомерГрузовогоБилета ="" Тогда
	//						Сообщить("Нельзя установить контрольную точку ""Получен грузовой билет"", не указав Номер грузового билета");
	//						СтруктураКТ.Удалить(РеквизитКТ);
	//					ИначеЕсли СтруктураВозврДанные.ДатаГрузовогоБилета = '00010101' Тогда
	//						Сообщить("Нельзя установить контрольную точку ""Получен грузовой билет"", не указав Дату грузового билета");
	//						СтруктураКТ.Удалить(РеквизитКТ);
	//					Иначе
	//						СтруктураКТ.Вставить("НомерГрузовогоБилета", СтруктураВозврДанные.НомерГрузовогоБилета);
	//						СтруктураКТ.Вставить("ДатаГрузовогоБилета", СтруктураВозврДанные.ДатаГрузовогоБилета);
	//					КонецЕсли;
	//				КонецЕсли;
	//			Иначе
	//				СтруктураКТ.Вставить("НомерГрузовогоБилета", "");
	//				СтруктураКТ.Вставить("ДатаГрузовогоБилета", Дата('00010101'));
	//			КонецЕсли;
	//			//rarus sergei 12.10.2016 mantis 6925 --
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//rarus tenkam 24.02.2017 TLMS 011 (модальность) ---

	Возврат СтруктураКТ;				
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитКонтрольнойТочки(КонтрольнаяТочка)
	Возврат КонтрольнаяТочка.РеквизитОбъекта;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьКТНаСервере(РеквизитЗаказа, ЗначениеРеквизита, ИзделиеСсылка) //rarus bonmak 05.08.2019 14427
	
	//rarus tenkam 03.04.2017 mantis 9191 +++
	////rarus sergei 15.08.2016 mantis 7110 ++                             
	//Если РеквизитЗаказа = "ПродуктВАрхиве" Тогда
	//	Если НЕ (ЗначениеЗаполнено(ПродуктСсылка.ДатаПродажиИзделия) И 
	//		ЗначениеЗаполнено(ПродуктСсылка.ДатаПередачиИзделияДилеру))Тогда	//rarus tenkam 01.03.2017 mantis 8415 +
	//	  	Установлен = Ложь;
	//	Иначе	
	//	    Установлен = Scan_РегламентныеЗадания.ПроверитьПродукт(ПродуктСсылка,ЗначениеРеквизита);
	//	КонецЕсли; 

	//	Если НЕ Установлен Тогда
	//		Сообщить("У продукта "+ПродуктСсылка+" не удалось установить контрольную точку продукт в архиве");

	//	КонецЕсли;
	//Иначе
	//	//rarus sergei 15.08.2016 mantis 7110 --
	//	Если ЗначениеЗаполнено(ПродуктСсылка) Тогда	//rarus tenkam 12.01.2017 mantis 8207 +
	//		ЗаказНаЗаводСсылка = ПродуктСсылка.ЗаказНаЗавод;
	//		Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда
	//			ЗаказНаЗаводОбъект = ЗаказНаЗаводСсылка.ПолучитьОбъект();
	//			ЗаказНаЗаводОбъект[РеквизитЗаказа] = ЗначениеРеквизита;
	//			//Справочники.Scan_ЗаказыНаЗавод.УстановитьCDDXY(ЗаказНаЗаводОбъект);			
	//			ЗаказНаЗаводОбъект.Записать();
	//			Справочники.Scan_ЗаказыНаЗавод.ЗаписатьЛогКонтрольныхТочек(ЗаказНаЗаводОбъект);
	//		Иначе
	//			Сообщить("Контрольная точка "+РеквизитЗаказа+" не была установлена! У продукта " + ПродуктСсылка + " не указан заказ на завод."); 
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	НайденнаяКТ = Справочники.Scan_КонтрольныеТочкиБизнесПроцессов.НайтиПоРеквизиту("РеквизитОбъекта", РеквизитЗаказа);
	Если ЗначениеЗаполнено(НайденнаяКТ) Тогда
		ОбъектМетаданных = НайденнаяКТ.ОбъектМетаданных;
	//rarus tenkam 21.04.2017 mantis 9275 +++	
	ИначеЕсли РеквизитЗаказа = "ДатаБукингЛиста" ИЛИ РеквизитЗаказа = "НомерБукингЛиста"  
		  //ИЛИ РеквизитЗаказа = "ДатаГрузовогоБилета" ИЛИ РеквизитЗаказа = "НомерГрузовогоБилета" //rarus BProg_Gladkov 22.11.2019 0014452 +- Удален ГрузовойБилет
	Тогда 
		ОбъектМетаданных = "Scan_ЗаказыНаЗавод";
	//rarus tenkam 21.04.2017 mantis 9275 ---	
	Иначе	
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда //rarus bonmak 05.08.2019 14427			
		Если ОбъектМетаданных = "Scan_ЗаказыНаЗавод" Тогда
			ЗаказНаЗаводСсылка = ИзделиеСсылка.ЗаказНаЗавод; //rarus bonmak 05.08.2019 14427
			Если ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда
				ЗаказНаЗаводОбъект = ЗаказНаЗаводСсылка.ПолучитьОбъект();
				ЗаказНаЗаводОбъект[РеквизитЗаказа] = ЗначениеРеквизита;
				ЗаказНаЗаводОбъект.Записать();
				Справочники.Scan_ЗаказыНаЗавод.ЗаписатьЛогКонтрольныхТочек(ЗаказНаЗаводОбъект);
			Иначе
				Сообщить("Контрольная точка " + РеквизитЗаказа + " не была установлена! У продукта " + ИзделиеСсылка + " не указан заказ на завод."); //rarus bonmak 05.08.2019 14427
			КонецЕсли;
			//rarus bonmak 05.08.2019 14427 ++
		//ИначеЕсли ОбъектМетаданных = "Scan_Продукты" Тогда
		//	Если РеквизитЗаказа = "ПродуктВАрхиве" Тогда
		//		Если ЗначениеЗаполнено(ПродуктСсылка.ДатаПродажиИзделия) И 
		//			ЗначениеЗаполнено(ПродуктСсылка.ДатаПередачиИзделияДилеру) И НЕ ЗначениеЗаполнено(ПродуктСсылка.ПродуктВАрхиве)Тогда	
		//			Установлен = Scan_РегламентныеЗадания.ПроверитьПродукт(ПродуктСсылка,ЗначениеРеквизита);
		//		Иначе 
		//			//rarus FominskiyAS 08.07.2019  mantis 14191 +++
		//			//Сообщить("У продукта " + ПродуктСсылка + " не удалось установить контрольную точку продукт в архиве.");
		//			Если ТекущийЯзык()="en" тогда
		//				Сообщить("Checkpoint cannot be selected, product " + ПродуктСсылка + " is in the archive.");	
		//			иначе
		//				Сообщить("У продукта " + ПродуктСсылка + " не удалось установить контрольную точку продукт в архиве.");
		//			КонецЕсли;
		//			//rarus FominskiyAS 08.07.2019  mantis 14191 ---  
		//		КонецЕсли;
		//		
		//	// rarus tenkam 30.08.2018 mantis 13424 +++
		//	ИначеЕсли РеквизитЗаказа = "МодельПродукта" Тогда
		//		ПродуктОбъект = ПродуктСсылка.ПолучитьОбъект();
		//		ПродуктОбъект[РеквизитЗаказа] = ЗначениеРеквизита;
		//		ПродуктОбъект.НеОбновлятьМоделиИз1БД = Истина;
		//		ПродуктОбъект.Записать();
		//		
		//		ИзделиеСсылка = ПродуктСсылка.Изделие;
		//		Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда
		//			ИзделиеОбъект = ИзделиеСсылка.ПолучитьОбъект();

		//			ИзделиеОбъект.МодельПродукта = ЗначениеРеквизита;
		//			ИзделиеОбъект.НеОбновлятьМоделиИз1БД = Истина;
		//			
		//			Наим = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(ИзделиеОбъект,РеквизитЗаказа);	
		//			Если Наим <> Неопределено Тогда
		//				ИзделиеОбъект.Наименование = Наим;
		//			КонецЕсли;
		//			
		//			ИзделиеОбъект.Записать();
		//		Иначе
		//			Сообщить("Контрольная точка " + РеквизитЗаказа + " не была установлена для изделия! У продукта " + ПродуктСсылка + " не указано изделие."); 
		//		КонецЕсли;			
		//	// rarus tenkam 30.08.2018 mantis 13424 ---
		//	КонецЕсли;
		//rarus bonmak 05.08.2019 14427 --
		ИначеЕсли ОбъектМетаданных = "Scan_Изделия" Тогда
			//ИзделиеСсылка = ПродуктСсылка.Изделие; //rarus bonmak 05.08.2019 14427
			//Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда //rarus bonmak 05.08.2019 14427
				ИзделиеОбъект = ИзделиеСсылка.ПолучитьОбъект();
				//rarus tenkam 04.10.2017 mantis 11183 +++
				Если РеквизитЗаказа = "ТипПродуктаЛогистический" Тогда	
					ИзделиеОбъект.НеОбновлятьЛогистическиеТипыИз1БД = Истина;
				КонецЕсли;
				
				//rarus bonmak 05.08.2019 14427 ++
				Если РеквизитЗаказа = "МодельПродукта" Тогда
					ИзделиеОбъект.НеОбновлятьМоделиИз1БД = Истина;	
				КонецЕсли;
				//rarus bonmak 05.08.2019 14427 --

				//rarus bonmak 07.08.2020 14375 ++
				Если РеквизитЗаказа = "БУ" Тогда
					ИзделиеОбъект.ДополнительныеСвойства.Вставить("ОтправитьРеквизитБУВ1БД", ИСТИНА); 	
				КонецЕсли;
				//rarus bonmak 07.08.2020 14375 --
		
				//rarus tenkam 04.10.2017 mantis 11183 ---
				ИзделиеОбъект[РеквизитЗаказа] = ЗначениеРеквизита;
				//rarus abrant mantis 9073 mantis +++
				Наим = Справочники.Scan_Изделия.СформироватьНаименованиеПоНастройке(ИзделиеОбъект,РеквизитЗаказа);	//rarus tenkam 09.06.2016 mantis 7072 +
				Если Наим <> Неопределено Тогда
					ИзделиеОбъект.Наименование = Наим;
				КонецЕсли;
				//rarus abrant mantis mantis 9073 ---
				ИзделиеОбъект.Записать();
			//Иначе
			//	Сообщить("Контрольная точка " + РеквизитЗаказа + " не была установлена! У продукта " + ПродуктСсылка + " не указано изделие."); 
			//КонецЕсли;
		ИначеЕсли ОбъектМетаданных = "Scan_КлючевыеДатыРегистрСведений" Тогда //rarus bonmak 05.08.2019 14427 ++
			ЗаказНаЗаводСсылка = ИзделиеСсылка.ЗаказНаЗавод; 
			ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты[РеквизитЗаказа];
			ПеречислениеОбъектКлючДат = Перечисления.Scan_КлючевыеДаты.ПолучитьОбъектКлючевойДатыПоПеречислению(ВидКлючевойДаты);
			Если ПеречислениеОбъектКлючДат = Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод Тогда
				СсылкаСпр = ЗаказНаЗаводСсылка;
			ИначеЕсли ПеречислениеОбъектКлючДат = Перечисления.Scan_ОбъектыКлючевыхДат.Изделие Тогда
				СсылкаСпр = ИзделиеСсылка;
			Иначе
				Возврат;
			КонецЕсли;
			// rarus tenkam 23.09.2019 mantis 14834 +++
			Если ВидКлючевойДаты = Перечисления.Scan_КлючевыеДаты.ПродуктВАрхиве И НЕ Scan_ПраваИНастройки.Scan_Право("РазрешатьРедактироватьДатуПродуктВАрхиве") Тогда
				Сообщить(НСтр("ru = 'Нет права на редактирование ключевой даты <Продукт в архиве>. Не удалось установить контрольную точку.'; en = 'Product in archive can not be set. Not enough permissions!'"));
			Иначе
			// rarus tenkam 23.09.2019 mantis 14834 ---
				РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(СсылкаСпр, ПеречислениеОбъектКлючДат, ЗначениеРеквизита, ВидКлючевойДаты);
			КонецЕсли;	// rarus tenkam 23.09.2019 mantis 14834 +
			//rarus bonmak 05.08.2019 14427 --	
		КонецЕсли;
	КонецЕсли;
	//rarus tenkam 03.04.2017 mantis 9191 ---
	
КонецПроцедуры
//rarus tenkam mantis 6925 -- 

//rarus tenkam 24.02.2017 TLMS 011 (модальность) +++
&НаСервереБезКонтекста
Процедура ЗаписатьКТПоСтруктуре(МассивСсылок, СтруктураКТ)
	Для Каждого СтрокаИзделия Из МассивСсылок Цикл //rarus bonmak 05.08.2019 14427
		Для Каждого СтрокаКТ Из СтруктураКТ Цикл
			ЗаписатьКТНаСервере(СтрокаКТ.Ключ, СтрокаКТ.Значение, СтрокаИзделия); //rarus bonmak 05.08.2019 14427
		КонецЦикла;
	КонецЦикла;
	//rarus BProg_Gladkov 22.11.2019 0014452 ++ Удален ГрузовойБилет
	////rarus abrant 02.05.2017 mantis 8698 +++
	//Если СтруктураКТ.Свойство("ПолученГрузовойБилет") И СтруктураКТ.ПолученГрузовойБилет Тогда
	//	ТекстНапоминания = "Загружен грузовой билет №" + СтруктураКТ.НомерГрузовогоБилета + " от " + Формат(СтруктураКТ.ДатаГрузовогоБилета,"ДЛФ=Д") + ".";
	//	Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОЗагрузкеГрузовогоБилета", ТекстНапоминания);
	//	//rarus tenkam 13.11.2017 mantis 8465 +++
	//	Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
	//		Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоОЗагрузкеГрузовогоБилета(Неопределено, " №" + СтруктураКТ.НомерГрузовогоБилета + " от " + Формат(СтруктураКТ.ДатаГрузовогоБилета,"ДЛФ=Д") + ".");
	//	Иначе    //rarus tenkam 13.11.2017 mantis 8465 ---
	//		
	//		Текст = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаУведомленияОЗагрузкеГрузовогоБилета") + " №" + СтруктураКТ.НомерГрузовогоБилета + " от " + Формат(СтруктураКТ.ДатаГрузовогоБилета,"ДЛФ=Д") + ".";
	//		Тема = Scan_ПраваИНастройки.Scan_Право("ТемаПисьмаУведомленияОЗагрузкеГрузовогоБилета"); 
	//		ПисьмоГрузовойБилет = Scan_ВспомогательныеФункцииСервер.ОтправитьПисьмоОЗагрузкеПоПраву("УведомлятьОЗагрузкеГрузовогоБилета", Текст, Тема);
	//		
	//	КонецЕсли; 		//rarus tenkam 13.11.2017 mantis 8465 +
	//КонецЕсли;
	////rarus abrant 02.05.2017 mantis 8698 --- 
	//rarus BProg_Gladkov 22.11.2019 0014452 -- 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКТПослеВыбораБукингЛиста(ЗначениеВозвращаемыхДанных, Параметры) Экспорт
	СформироватьПеремещение = Ложь;
	Если ЗначениеВозвращаемыхДанных <> Неопределено И
		ЗначениеВозвращаемыхДанных <> КодВозвратаДиалога.Отмена Тогда
		
		Если ЗначениеВозвращаемыхДанных.НомерБукингЛиста = "" Тогда
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Нельзя установить контрольную точку ""Есть букинг-лист"", не указав Номер букинг-листа");
			Сообщить(НСтр("ru = 'Нельзя установить контрольную точку ""Есть букинг-лист"", не указав Номер букинг-листа'; en = 'Checkpoint ""Booking List"" cannot be selected without Booking list number'"));
			//rarus FominskiyAS 21.04.2019  mantis 14191 ---
			СтруктураКТ.Удалить("ЕстьБукингЛист");
		ИначеЕсли ЗначениеВозвращаемыхДанных.ДатаБукингЛиста = '00010101' Тогда
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Нельзя установить контрольную точку ""Есть букинг-лист"", не указав Дату букинг-листа");
			Сообщить(НСтр("ru = 'Нельзя установить контрольную точку ""Есть букинг-лист"", не указав Дату букинг-листа'; en = 'Checkpoint ""Booking List"" cannot be selected without Booking list date'"));
			//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
			СтруктураКТ.Удалить("ЕстьБукингЛист");
		Иначе
			СтруктураКТ.Вставить("НомерБукингЛиста", ЗначениеВозвращаемыхДанных.НомерБукингЛиста);
			СтруктураКТ.Вставить("ДатаБукингЛиста", ЗначениеВозвращаемыхДанных.ДатаБукингЛиста);
			Если ЗначениеВозвращаемыхДанных.Свойство("МестоДоставки") Тогда
				СформироватьПеремещение = Истина;
				СтруктураКТ.Вставить("CDDПоставщик", ЗначениеВозвращаемыхДанных.CDDПоставщик);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//rarus BProg_Gladkov 22.11.2019 0014452 ++ Удален грузовой лист
	//Если  Параметры.Свойство("ОбработатьГрузовойЛист") Тогда
	//	ПараметрыОткрытия = Новый Структура("МассивСсылок", Параметры.МассивСсылок);
	//	Если СформироватьПеремещение Тогда
	//		Параметры.Вставить("СформироватьПеремещение", Истина);
	//		Параметры.Вставить("МестоДоставки", ЗначениеВозвращаемыхДанных.МестоДоставки);
	//		Параметры.Вставить("CDDПоставщик", ЗначениеВозвращаемыхДанных.CDDПоставщик);
	//	КонецЕсли;
	//	Обработчик = Новый ОписаниеОповещения("УстановитьКТПослеВыбораГрузовогоБилета", ЭтотОбъект, Параметры);
	//	ОткрытьФорму("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаГрузовогоБилета",,,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//Иначе 
		ЗаписатьКТПоСтруктуре(Параметры.МассивСсылок,СтруктураКТ);
		Если СформироватьПеремещение Тогда
			СформированноеПеремещение = СформироватьЗаписатьПеремещение(ЗначениеВозвращаемыхДанных.МестоДоставки, ЗначениеВозвращаемыхДанных.CDDПоставщик, Параметры.МассивСсылок);
			Если ЗначениеЗаполнено(СформированноеПеремещение) Тогда
				//rarus FominskiyAS 21.04.2019  mantis 14191 +++
				//Сообщить("Записан документ " + СформированноеПеремещение);
				Сообщить(НСтр("ru = 'Записан документ '; en = 'Document saved '") + СформированноеПеремещение);
				//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
			КонецЕсли;
		КонецЕсли;

		СнятьФлажки(Неопределено); 
		Элементы.Сток.Обновить();
	//КонецЕсли;
	//rarus BProg_Gladkov 22.11.2019 0014452 -- 
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьКТПослеВыбораГрузовогоБилета(ЗначениеВозвращаемыхДанных, Параметры) Экспорт
	//rarus BProg_Gladkov 22.11.2019 0014452 ++ Удален ГрузовойБилет
	//Если ЗначениеВозвращаемыхДанных <> Неопределено И
	//	ЗначениеВозвращаемыхДанных <> КодВозвратаДиалога.Отмена Тогда
	//	Если ЗначениеВозвращаемыхДанных.НомерГрузовогоБилета = "" Тогда
	//		//rarus FominskiyAS 21.04.2019  mantis 14191 +++
	//		//Сообщить("Нельзя установить контрольную точку ""Получен грузовой билет"", не указав Номер грузового билета");
	//		Сообщить(НСтр("ru = 'Нельзя установить контрольную точку ""Получен грузовой билет"", не указав Номер грузового билета '; en = 'Checkpoint ""Bill of Lading received"" cannot be selected without Bill of Lading number'"));
	//		//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
	//		СтруктураКТ.Удалить("ПолученГрузовойБилет");
	//	ИначеЕсли ЗначениеВозвращаемыхДанных.ДатаГрузовогоБилета = '00010101' Тогда
	//		//rarus FominskiyAS 21.04.2019  mantis 14191 +++
	//		//Сообщить("Нельзя установить контрольную точку ""Получен грузовой билет"", не указав Дату грузового билета");
	//		Сообщить(НСтр("ru = 'Нельзя установить контрольную точку ""Получен грузовой билет"", не указав Дату грузового билета'; en = 'Checkpoint ""Bill of Lading received"" cannot be selected without Bill of Lading date'"));
	//		//rarus FominskiyAS 21.04.2019  mantis 14191 ---
	//		СтруктураКТ.Удалить("ПолученГрузовойБилет");
	//	Иначе
	//		СтруктураКТ.Вставить("НомерГрузовогоБилета", ЗначениеВозвращаемыхДанных.НомерГрузовогоБилета);
	//		СтруктураКТ.Вставить("ДатаГрузовогоБилета", ЗначениеВозвращаемыхДанных.ДатаГрузовогоБилета);
	//	КонецЕсли;
	//КонецЕсли;
	//rarus BProg_Gladkov 22.11.2019 0014452 -- 

	ЗаписатьКТПоСтруктуре(Параметры.МассивСсылок,СтруктураКТ);
	Если Параметры.Свойство("СформироватьПеремещение") Тогда
		СформированноеПеремещение = СформироватьЗаписатьПеремещение(Параметры.МестоДоставки, Параметры.CDDПоставщик, Параметры.МассивСсылок);
		Если ЗначениеЗаполнено(СформированноеПеремещение) Тогда
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Записан документ " + СформированноеПеремещение);
			Сообщить(НСтр("ru = 'Записан документ '; en = 'Document saved '") + СформированноеПеремещение);
			//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
		КонецЕсли;
	КонецЕсли;
	
	СнятьФлажки(Неопределено); 
	Элементы.Сток.Обновить();
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СформироватьЗаписатьПеремещение(МестоДоставки, CDDПоставщик, МассивПродуктов)
	Возврат Документы.Scan_ПеремещениеИзделий.СформироватьЗаписатьПеремещение(МестоДоставки, CDDПоставщик, МассивПродуктов);		
КонецФункции
//rarus tenkam 24.02.2017 TLMS 011 (модальность) ---

// rarus tenkam 10.07.2018 mantis 13210 +++
&НаКлиенте
Процедура ЗавершениеСозданияПоступленияБУ(ЗначениеВозвращаемыхДанных, Параметры) Экспорт
	Если ЗначениеВозвращаемыхДанных <> Неопределено И
		ЗначениеВозвращаемыхДанных = КодВозвратаДиалога.Да Тогда
		// Откроем документ поступления на склад
		ОткрытьФорму("Документ.Scan_ДвижениеИзделий.Форма.ФормаДокумента",Параметры,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
КонецПроцедуры
// rarus tenkam 10.07.2018 mantis 13210 ---

//rarus sergei 22.11.2016 mantis 6965++
////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА ФАЙЛА ОТ СКАНИЯ-ПИТЕР

&НаКлиенте
Процедура ЗагрузитьДанныеОтСканияПитер(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьФайлОтСканияПитер",Scan_ВспомогательныеФункцииКлиент);
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиДанныхОтСканияПитер",, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
//rarus sergei 22.11.2016 mantis 6965--


//rarus tenkam mantis 6926 ++

////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА ФАЙЛА ОТ ПОСТАВЩИКА

&НаКлиенте
Процедура ЗагрузитьФайлОтПоставщика(Команда)
	//rarus abrant 15.05.2017 mantis 9609 +++
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайлНовый", ЭтотОбъект);	
	//Обработчик = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайл", ЭтотОбъект);
	//rarus abrant 15.05.2017 mantis 9609 ---
	//rarus abrant 17.04.2017 mantis 7617 +++
	ПараметрыКоманды = Новый Структура("ИмяКоманды", Команда.Имя);
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла",ПараметрыКоманды, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ОткрытьФорму("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаЗагрузкиФайлаОтПоставщика",, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//rarus abrant 17.04.2017 mantis 7617 ---

КонецПроцедуры
//rarus tenkam mantis 6926 --

//rarus abrant 15.05.2017 mantis 9609 +++
&НаКлиенте
Процедура ЗагрузитьВыбранныйФайлНовый(ЗначенияВыбранныхПараметров, Параметры) Экспорт	
	Если ЗначенияВыбранныхПараметров = Неопределено ИЛИ
		ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	//rarus FominskiyAS 19.04.2019  mantis 14191 +++
	//Сообщить("Начата загрузка файла " + ТекущаяДата());		//rarus tenkam 01.02.2017 mantis 7176 +
	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'")+" "+ТекущаяДата());
	//rarus FominskiyAS 19.04.2019  mantis 14191 ---
	// rarus tenkam 26.04.2019 mantis 14195 +++
	//ПрочитатьCOMОбъект(ЗначенияВыбранныхПараметров);	
	//Сообщить("Загрузка файла завершена"+" "+ТекущаяДата());

	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если НЕ ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьВыбранныйФайлНовыйФрагмент(ЗначенияВыбранныхПараметров);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайлНовыйЗавершение", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, ,Ложь, УникальныйИдентификатор);
	#КонецЕсли
	// rarus tenkam 26.04.2019 mantis 14195 ---

КонецПроцедуры
// rarus tenkam 26.04.2019 mantis 14195 ---


//&НаКлиенте	// rarus tenkam 26.04.2019 mantis 14195 + 	
&наСервере	
Процедура ПрочитатьCOMОбъект(ЗначенияВыбранныхПараметров)
	Попытка
	    Эксель = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// rarus tenkam 26.04.2019 mantis 14195 +++
	//Книга = Эксель.WorkBooks.Open(ЗначенияВыбранныхПараметров.ПутьКФайлу);
	
	ВремИмяФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xls";
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЗначенияВыбранныхПараметров.АдресВХранилище);
	ДвоичныеДанные.Записать(ВремИмяФайла);
	Книга = Эксель.WorkBooks.Open(СокрЛП(ВремИмяФайла)); 	
	// rarus tenkam 26.04.2019 mantis 14195 ---
	Лист = Книга.WorkSheets(1);
	
	Если ЗначенияВыбранныхПараметров.Свойство("ИмяКоманды") И ЗначенияВыбранныхПараметров.ИмяКоманды = "ЗагрузитьФайлОтПоставщика" Тогда
		МассивИзделий = Новый Массив;
		
		КолвоСтрокДокумента = Лист.Cells(1,1).SpecialCells(11).Row;; 
		НомерНачальнойСтроки = ЗначенияВыбранныхПараметров.НомерСтроки;
		
		нНомерШасси						= ЗначенияВыбранныхПараметров.НомерШасси;
		нМодель 						= ЗначенияВыбранныхПараметров.Модель;
		нВес 							= ЗначенияВыбранныхПараметров.Вес;
		нДлина 							= ЗначенияВыбранныхПараметров.Длина;
		нВысота 						= ЗначенияВыбранныхПараметров.Высота;
		нШирина 						= ЗначенияВыбранныхПараметров.Ширина;
		НомерБукингЛиста 				= ЗначенияВыбранныхПараметров.НомерБукингЛиста;
		МодельиНомерДвигателяИзделия 	= "";
		
		Для нСтрока=НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
			Изделие = Новый Массив(6);
			Если СокрЛП(Лист.Cells(нСтрока,нНомерШасси).Text) = "" И
				СокрЛП(Лист.Cells(нСтрока,нМодель).Text) = "" Тогда
				Прервать;
			КонецЕсли;
			Изделие[0] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нНомерШасси).Text,Символы.НПП, ""));
			Изделие[1] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нМодель).Text, Символы.НПП, ""));
			Изделие[2] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нВес).Text, Символы.НПП, ""));
			Изделие[3] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нДлина).Text, Символы.НПП, ""));
			Изделие[4] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нВысота).Text, Символы.НПП, ""));
			Изделие[5] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нШирина).Text, Символы.НПП, ""));
			МассивИзделий.Добавить(Изделие);
		КонецЦикла;
		ПрочитатьCOMОбъектЗагрузкаФайлаОтПоставщика(МассивИзделий, ЗначенияВыбранныхПараметров);	
		
	ИначеЕсли ЗначенияВыбранныхПараметров.Свойство("ИмяКоманды") И ЗначенияВыбранныхПараметров.ИмяКоманды = "ЗагрузитьДанныеПоПолисамОСАГО" Тогда 	
		МассивИзделий = Новый Массив;
		
		КолвоСтрокДокумента = Лист.Cells(1,1).SpecialCells(11).Row;; 
		НомерНачальнойСтроки = ЗначенияВыбранныхПараметров.НомерСтроки;
		
		нНачало 	= ЗначенияВыбранныхПараметров.ДатаНачалаОСАГО;
		нКонец 		= ЗначенияВыбранныхПараметров.ДатаОкончанияОСАГО;
		нСерия	 	= ЗначенияВыбранныхПараметров.СерияОСАГО;
		нНомер 		= Число(нСерия)+1;
		нVIN 		= ЗначенияВыбранныхПараметров.VINИзделия;
		
		Для нСтрока=НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
			Изделие = Новый Массив(5);
			Если СокрЛП(Лист.Cells(нСтрока,нVIN).Text) = "" И
				СокрЛП(Лист.Cells(нСтрока,нСерия).Text) = "" И
				СокрЛП(Лист.Cells(нСтрока,нНомер).Text) = "" Тогда
				Прервать;
			КонецЕсли;
			Изделие[0] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нНачало).Text,Символы.НПП, ""));
			Изделие[0] = СокрЛП(СтрЗаменить(Изделие[0],".",""));
			Изделие[1] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нКонец).Text, Символы.НПП, ""));
			Изделие[1] = СокрЛП(СтрЗаменить(Изделие[1],".",""));
			Изделие[2] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нСерия).Text, Символы.НПП, ""));
			Изделие[3] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нНомер).Text, Символы.НПП, ""));
			Изделие[4] = СокрЛП(СтрЗаменить(Лист.Cells(нСтрока,нVIN).Text, Символы.НПП, ""));
			МассивИзделий.Добавить(Изделие);
		КонецЦикла;
		ПрочитатьCOMОбъектЗагрузкаПоПолисамОСАГО(МассивИзделий, ЗначенияВыбранныхПараметров);	
	КонецЕсли;
	//rarus abrant 16.05.2017 mantis 9609 +++
	Эксель.Quit();
	//rarus abrant 16.05.2017 mantis 9609 ---
КонецПроцедуры

&НаСервере
Процедура ПрочитатьCOMОбъектЗагрузкаПоПолисамОСАГО(МассивИзделий, ЗначенияВыбранныхПараметров)
	//[0] = Начало [1] = Конец [2] = Серия [3] = Номер [4] = VIN	
	Для нСтрока=0 ПО МассивИзделий.Количество()-1 Цикл	
		Если МассивИзделий[нСтрока][4] <> "" Тогда
			ИскомоеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("VIN",МассивИзделий[нСтрока][4]);
			Если ЗначениеЗаполнено(ИскомоеИзделие)  Тогда
			    ИзделиеОбъект 							= ИскомоеИзделие.ПолучитьОбъект();
				ИзделиеОбъект.ДатаНачалаДействияПолиса 	= Дата(ПреобразоватьДату(МассивИзделий[нСтрока][0])); 
				ИзделиеОбъект.ДатаИстеченияПолиса 		= Дата(ПреобразоватьДату(МассивИзделий[нСтрока][1]));
				ИзделиеОбъект.НомерПолисаОСАГО 			= МассивИзделий[нСтрока][2] + МассивИзделий[нСтрока][3];
				ИзделиеОбъект.Записать();
			Иначе 
				//rarus FominskiyAS 21.04.2019  mantis 14191 +++
				//Сообщить("Изделие с VIN - номером "+МассивИзделий[нСтрока][4]+ " не найдено в базе");
				Сообщить(НСтр("ru = 'Продукт с VIN - номером '; en = 'Product with VIN '")+МассивИзделий[нСтрока][4]+ НСтр("ru = ' не найден в базе'; en = ' not found'"));
				//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//rarus pechek 05.03.2020 mantis 15779 +++
&НаСервере
Процедура ЗаписатьРегистрНаСервере(Изделие,ВидЗначения,Значение,Пользователь)
	ДатаСеанса = ТекущаяДатаСеанса();
	Запись = РегистрыСведений.Scan_ХарактеристикиИзделия.СоздатьМенеджерЗаписи();
	Запись.Период = ДатаСеанса;
	Запись.Изделие = Изделие;
	Запись.ВидЗначения = ПредопределенноеЗначение("Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.ПаромнаяЛиния");
	Запись.Прочитать();
	Если Не Запись.Выбран() Тогда
		Запись.Период = ДатаСеанса;
		Запись.Изделие = Изделие;
		Запись.ВидЗначения = ВидЗначения;
		Запись.Значение = Значение;
		Запись.Пользователь = Пользователь;
		Попытка
			Запись.Записать();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
	Иначе
		Запись.Период = ДатаСеанса;
		Запись.Изделие = Изделие;
		Запись.ВидЗначения = ВидЗначения;
		Запись.Значение = Значение;
		Запись.Пользователь = Пользователь;
		Попытка
			Запись.Записать(Ложь);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	//rarus pechek 20.04.2020 mantis 15943 +++
	Если Scan_ПраваИНастройки.Scan_Право("ЗаполнятьРегистрСводнаяИнформацияПоПродукту") Тогда
		РегистрыСведений.Scan_СводнаяИнформацияПоПродукту.ЗаписьЗначенияРегистраСводнаяИнформацияПоПродукту(Изделие, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Изделие,"ЗаказНаЗавод"),ВидЗначения,Значение);	// rarus tenkam 29.06.2021 mantis 17871 + (добавлен заказ на завод)
	КонецЕсли;
	//rarus pechek 20.04.2020 mantis 15943 --- 		
КонецПроцедуры
//rarus pechek 05.03.2020 mantis 15779 ---

&НаСервере
Процедура ПрочитатьCOMОбъектЗагрузкаФайлаОтПоставщика(МассивИзделий, ЗначенияВыбранныхПараметров)	
	//[0] = НомерШасси [1] = Модель [2] = Вес [3] = Длина [4] = Высота [5] = Ширина
	//МассивБукингЛистов 	= Новый Массив; 	// rarus tenkam 10.09.2018 mantis 13529 +++
	МассивПродуктов 	= Новый Массив; //rarus bonmak 05.08.2019 14427 будут ссылки на изделия
	
	НомерБукингЛиста 				= ЗначенияВыбранныхПараметров.НомерБукингЛиста;
	МодельиНомерДвигателяИзделия 	= "";
	
	Для нСтрока=0 ПО МассивИзделий.Количество()-1 Цикл	
		Если СокрЛП(МассивИзделий[нСтрока][0]) <> "" Тогда
			ИскомоеИзделие = ПолучитьИзделиеПоШасси(СокрЛП(МассивИзделий[нСтрока][0]));
			Если ЗначениеЗаполнено(ИскомоеИзделие)  Тогда
			    ИзделиеОбъект 	= ИскомоеИзделие.ПолучитьОбъект();
				МодельИзделия 	= СтрЗаменить(МассивИзделий[нСтрока][1], Символы.НПП, "");
				ТекВес 			= СтрЗаменить(МассивИзделий[нСтрока][2], Символы.НПП, "");
				ВесИзделия 		= ?(ЗначениеЗаполнено(ТекВес), Число(ТекВес),0);
				ТекДлина 		= СтрЗаменить(МассивИзделий[нСтрока][3], Символы.НПП, "");
				ДлинаИзделия 	= ?(ЗначениеЗаполнено(ТекДлина), Число(ТекДлина),0);
				ТекВысота 		= СтрЗаменить(МассивИзделий[нСтрока][4], Символы.НПП, "");
				ВысотаИзделия 	= ?(ЗначениеЗаполнено(ТекВысота), Число(ТекВысота),0);
				ТекШирина 		= СтрЗаменить(МассивИзделий[нСтрока][5], Символы.НПП, "");
				ШиринаИзделия 	= ?(ЗначениеЗаполнено(ТекШирина), Число(ТекШирина),0);
				//перевод значений в миллиметры
				Если ДлинаИзделия < 1000 Тогда
					ДлинаИзделия = ДлинаИзделия*1000;
				КонецЕсли;
				Если ВысотаИзделия < 1000 Тогда
					ВысотаИзделия = ВысотаИзделия*1000;
				КонецЕсли;
				Если ШиринаИзделия < 1000 Тогда
					ШиринаИзделия = ШиринаИзделия*1000;
				КонецЕсли;
				// rarus tenkam 10.09.2018 mantis 13529 +++ это рудимент от старого алгоритма, букинг лист теперь всегда один
				//Если МассивБукингЛистов.Найти(НомерБукингЛиста) = Неопределено Тогда
				//	МассивБукингЛистов.Добавить(НомерБукингЛиста);
				//КонецЕсли;
				// rarus tenkam 10.09.2018 mantis 13529 ---
				ИзделиеОбъект.ПортОтправки = ЗначенияВыбранныхПараметров.ПортОтправки;
				ИзделиеОбъект.ПортПрихода = ЗначенияВыбранныхПараметров.ПортПрихода;
				ПроверитьКарточкуЗаказаНаСоответствие(ИзделиеОбъект,МодельИзделия,МодельиНомерДвигателяИзделия,ВесИзделия,ДлинаИзделия,ВысотаИзделия,ШиринаИзделия,НомерБукингЛиста,ЗначенияВыбранныхПараметров);
				ИзделиеОбъект.Записать();
				ТекИзделие = ИзделиеОбъект.Ссылка; //РегистрыСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.ПолучитьПродуктПоИзделию(ИзделиеОбъект.Ссылка); //rarus bonmak 05.08.2019 14427
				Если ЗначениеЗаполнено(ТекИзделие) Тогда //rarus bonmak 05.08.2019 14427
					МассивПродуктов.Добавить(ТекИзделие); //rarus bonmak 05.08.2019 14427
				КонецЕсли;
				//rarus pechek 05.03.2020 mantis 15779 +++
				ПаромнаяЛиния = ЗначенияВыбранныхПараметров.ПаромнаяЛиния;
				ВидЗначения = ПредопределенноеЗначение("Перечисление.Scan_ДополнительнаяИнформацияПоИзделиям.ПаромнаяЛиния");
				Если ЗначениеЗаполнено(ПаромнаяЛиния)Тогда
					ЗаписатьРегистрНаСервере(ТекИзделие,ВидЗначения,ПаромнаяЛиния, ПараметрыСеанса.ТекущийПользователь);
				КонецЕсли;
				//rarus pechek 05.03.2020 mantis 15779 ---
			Иначе
				//rarus FominskiyAS 21.04.2019  mantis 14191 +++
				//Сообщить("Изделие с номером шасси "+МассивИзделий[нСтрока][0]+ " не найдено в базе");
				Сообщить(НСтр("ru = 'Продукт с номером шасси '; en = 'Product with Chassis '")+МассивИзделий[нСтрока][0]+ НСтр("ru = ' не найден в базе'; en = ' not found'"));
				//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	// rarus tenkam 10.09.2018 mantis 13529 +++
	//Если МассивБукингЛистов.Количество() <> 0 Тогда
	//	Для Каждого ТекБукингЛист Из МассивБукингЛистов Цикл
	Если ЗначениеЗаполнено(НомерБукингЛиста) Тогда
		// rarus tenkam 10.09.2018 mantis 13529 --- 
		
			//rarus abrant 02.05.2017 mantis 8698 +++
			//rarus anch 16.05.2017 mantis 8698 +++
			//ТекстНапоминания = "Загружен файл от поставщика по букинг-листу №" + ТекБукингЛист + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДЛФ=Д") + "."; 
			//Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОЗагрузкеБукингЛиста", ТекстНапоминания);
			//ТекстНапоминания = " № " + ТекБукингЛист + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДФ=""дд.ММ.гггг'г.'""") + 
			//	" Дата CDD поставщика = " + Формат(ЗначенияВыбранныхПараметров.CDD, "ДФ=""дд.ММ.гггг'г.'""") + ", Количество изделий - " + МассивПродуктов.Количество() + ".";
			//Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОЗагрузкеБукингЛиста", "Загружен файл от поставщика по букинг листу" + ТекстНапоминания);					
			//Текст = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаУведомленияОЗагрузкеБукингЛиста") + ТекстНапоминания;
			
			// rarus tenkam 10.09.2018 mantis 13529 +++
			//ТекстНапоминания = " № " + ТекБукингЛист + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДФ=""дд.ММ.гггг' г.'""") +  			
			ТекстНапоминания = " № " + НомерБукингЛиста + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДФ=""дд.ММ.гггг' г.'""") +
			// rarus tenkam 10.09.2018 mantis 13529 ---
				" Дата CDD поставщика = " + Формат(ЗначенияВыбранныхПараметров.CDD, "ДФ=""дд.ММ.гггг' г.'""") + ", Количество изделий - " + МассивПродуктов.Количество() + ".";
			Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОЗагрузкеБукингЛиста", "Загружен файл от поставщика по букинг листу" + ТекстНапоминания);					
			
			//rarus tenkam 13.11.2017 mantis 8465 +++
			Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
				//rarus BProg_Gladkov 05.05.2020 0015962 ++ ОтправитьПисьмоПоШаблонуИзПрава
				ПараметрыОтправки = Новый Структура("ДополнительныйТекст", ТекстНапоминания);	
				РезультатОтправкиПисьма = Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоПоШаблонуИзПрава("ШаблонЗагрузкаБукингЛиста", , ПараметрыОтправки);
				//rarus BProg_Gladkov 05.05.2020 0015962 -- 
			Иначе	//rarus tenkam 13.11.2017 mantis 8465 ---
				
				Текст = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаУведомленияОЗагрузкеБукингЛиста") + ТекстНапоминания;
				//Текст = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаУведомленияОЗагрузкеБукингЛиста") + " №" + ЗначенияВыбранныхПараметров.НомерБукингЛиста + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДЛФ=Д") + ".";
				//rarus anch 16.05.2017 mantis 8698 ---
				Тема = Scan_ПраваИНастройки.Scan_Право("ТемаПисьмаУведомленияОЗагрузкеБукингЛиста"); 
				ПисьмоГрузовойБилет = Scan_ВспомогательныеФункцииСервер.ОтправитьПисьмоОЗагрузкеПоПраву("УведомлятьОЗагрузкеБукингЛиста", Текст, Тема);
				//rarus abrant 02.05.2017 mantis 8698 --- 
				
			КонецЕсли; 		//rarus tenkam 13.11.2017 mantis 8465 +
		// rarus tenkam 10.09.2018 mantis 13529 +++	
	//	КонецЦикла;
	// rarus tenkam 10.09.2018 mantis 13529 ---
	КонецЕсли;
	
	Если ЗначенияВыбранныхПараметров.Свойство("МестоДоставки") И МассивПродуктов.Количество() <> 0 Тогда
		СформированноеПеремещение = СформироватьЗаписатьПеремещение(ЗначенияВыбранныхПараметров.МестоДоставки, ЗначенияВыбранныхПараметров.CDD, МассивПродуктов);
		Если ЗначениеЗаполнено(СформированноеПеремещение) Тогда
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Записан документ " + СформированноеПеремещение);
			Сообщить(НСтр("ru = 'Записан документ '; en = 'Document saved '") + СформированноеПеремещение);
			//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
//rarus abrant 15.05.2017 mantis 9609 ---

//rarus sergei mantis 6926 ++
&НаКлиенте
Процедура ЗагрузитьВыбранныйФайл(ЗначенияВыбранныхПараметров, Параметры) Экспорт
	//rarus tenkam 01.02.2017 mantis 7176 +++
	//Сообщить("Начата загрузка файла"+" "+ТекущаяДата());
	//rarus tenkam 01.02.2017 mantis 7176 ---	
	Если ЗначенияВыбранныхПараметров = Неопределено ИЛИ
		ЗначенияВыбранныхПараметров = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	//rarus FominskiyAS 19.04.2019  mantis 14191 +++
	//Сообщить("Начата загрузка файла " + ТекущаяДата());		//rarus tenkam 01.02.2017 mantis 7176 +
	Сообщить(Нстр("ru = 'Начата загрузка файла'; en = 'Downloading'")+" "+ТекущаяДата());
	//rarus FominskiyAS 19.04.2019  mantis 14191 ---
	
	// rarus tenkam 26.04.2019 mantis 14195 +++

	//ДвоичныеДанные = Новый ДвоичныеДанные(ЗначенияВыбранныхПараметров.ПутьКФайлу);
	//Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	//ПрочитатьТабличныйДокумент(Адрес,ЗначенияВыбранныхПараметров);	
	////ПрочитатьТабличныйДокумент(ЗначенияВыбранныхПараметров);
	//
	//Сообщить("Загрузка файла завершена"+" "+ТекущаяДата());
	
	ТекПутьКФайлу = ЗначенияВыбранныхПараметров.ПутьКФайлу;
	#Если НЕ ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", АдресВХранилище);
		ПрочитатьТабличныйДокумент(АдресВХранилище,ЗначенияВыбранныхПараметров);	
	   		
		//rarus FominskiyAS 08.07.2019  mantis 14191 +++
		//Сообщить("Загрузка файла завершена"+" "+ТекущаяДата());
		Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
		//rarus FominskiyAS 08.07.2019  mantis 14191 ---  
		
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайлЗавершение", ЭтотОбъект, Новый Структура("ЗначенияВыбранныхПараметров", ЗначенияВыбранныхПараметров));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, ,Ложь, УникальныйИдентификатор);
	#КонецЕсли
	// rarus tenkam 26.04.2019 mantis 14195 ---

КонецПроцедуры
// rarus tenkam 26.04.2019 mantis 14195 ---

&НаСервере
//Процедура ПрочитатьТабличныйДокумент(ЗначенияВыбранныхПараметров)
Процедура ПрочитатьТабличныйДокумент(Адрес,ЗначенияВыбранныхПараметров)  
	//rarus abrant 17.04.2017 mantis 7617 +++
	Если ЗначенияВыбранныхПараметров.ФорматФайла = "xls" Тогда
		ФайлПриемник = ПолучитьИмяВременногоФайла("xls");
	ИначеЕсли ЗначенияВыбранныхПараметров.ФорматФайла = "lsx" Тогда
		ФайлПриемник = ПолучитьИмяВременногоФайла("xlsx");
	КонецЕсли;
	//rarus abrant 17.04.2017 mantis 7617 +++
    ДанныеХранилища = ПолучитьИзВременногоХранилища(Адрес);
    ДанныеХранилища.Записать(ФайлПриемник);
	ТабДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабДокумент.Прочитать(ФайлПриемник, СпособЧтенияЗначенийТабличногоДокумента.Значение); 
		//ТабДокумент.Прочитать(ЗначенияВыбранныхПараметров.ПутьКФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	Попытка
		УдалитьФайлы(ФайлПриемник);
	Исключение
	КонецПопытки;
		
	//rarus abrant 13.04.2017 mantis 9133 +++
	Если ЗначенияВыбранныхПараметров.Свойство("ИмяКоманды") И ЗначенияВыбранныхПараметров.ИмяКоманды = "ЗагрузитьДанныеПоПолисамОСАГО" Тогда
		ПрочитатьТабличныйДокументЗагрузкаПоПолисамОСАГО(ТабДокумент, ЗначенияВыбранныхПараметров);
		//Возврат;
	КонецЕсли;
	//rarus abrant 13.04.2017 mantis 9133---
	
	//rarus abrant 17.04.2017 mantis 7617 +++
	Если ЗначенияВыбранныхПараметров.Свойство("ИмяКоманды") И ЗначенияВыбранныхПараметров.ИмяКоманды = "ЗагрузитьФайлОтПоставщика" Тогда
		ПрочитатьТабличныйДокументЗагрузкаФайлаОтПоставщика(ТабДокумент, ЗначенияВыбранныхПараметров);
		//Возврат;
	КонецЕсли;
	//rarus abrant 17.04.2017 mantis 7617---
	
	//rarus abrant 17.04.2017 mantis 7617 +++
	//КолвоСтрокДокумента = ТабДокумент.ВысотаТаблицы; 
	//НомерНачальнойСтроки = ЗначенияВыбранныхПараметров.НомерСтроки;

	////rarus tenkam 06.02.2017 mantis 7176 +++
	//МассивБукингЛистов = Новый Массив;
	////rarus tenkam 06.02.2017 mantis 7176 ---
	//
	////rarus tenkam 24.02.2017 mantis 8492 +++
	//МассивПродуктов = Новый Массив;	
	////rarus tenkam 24.02.2017 mantis 8492 ---
	//
	//Для нСтрока=НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
	//	Если ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C2").Текст <> "" Тогда
	//		ИскомоеИзделие = ПолучитьИзделиеПоШасси(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C2").Текст);
	//		Если ЗначениеЗаполнено(ИскомоеИзделие)  Тогда
	//		    ИзделиеОбъект = ИскомоеИзделие.ПолучитьОбъект();
	//			//rarus tenkam 06.02.2017 mantis 7176 +++
	//			
	//			//МодельИзделия = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C3").Текст;
	//			//МодельиНомерДвигателяИзделия = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C4").Текст);		
	//			//ВесИзделия = Число(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C6").Текст);
	//			//ДлинаИзделия =Число(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C7").Текст);
	//			//НомерБукингЛиста = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C8").Текст;

	//			МодельИзделия 					= СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C3").Текст, Символы.НПП, "");
	//			МодельиНомерДвигателяИзделия 	= СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C4").Текст, Символы.НПП, "");		
	//			//rarus tenkam 16.03.2017 mantus 7623 +++
	//			ТекВес = СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C6").Текст, Символы.НПП, "");
	//			ВесИзделия = ?(ЗначениеЗаполнено(ТекВес), Число(ТекВес),0);
	//			ТекДлина = СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C7").Текст, Символы.НПП, "");
	//			ДлинаИзделия = ?(ЗначениеЗаполнено(ТекДлина), Число(ТекДлина),0);

	//			//ВесИзделия 						= Число(СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C6").Текст, Символы.НПП, ""));
	//			//ДлинаИзделия 					= Число(СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C7").Текст, Символы.НПП, ""));
	//			//rarus tenkam 16.03.2017 mantus 7623 ---
	//			
	//			НомерБукингЛиста 				= СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C8").Текст, Символы.НПП, "");
	//			Если МассивБукингЛистов.Найти(НомерБукингЛиста) = Неопределено Тогда
	//				МассивБукингЛистов.Добавить(НомерБукингЛиста);
	//			КонецЕсли;
	//			//rarus tenkam 06.02.2017 mantis 7176 ---
	//			ПроверитьКарточкуЗаказаНаСоответствие(ИзделиеОбъект,МодельИзделия,МодельиНомерДвигателяИзделия,ВесИзделия,ДлинаИзделия,НомерБукингЛиста,ЗначенияВыбранныхПараметров);
	//			ИзделиеОбъект.Записать();
	//			//rarus tenkam 24.02.2017 mantis 8492 +++
	//			ТекПродукт = РегистрыСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.ПолучитьПродуктПоИзделию(ИзделиеОбъект.Ссылка);
	//			Если ЗначениеЗаполнено(ТекПродукт) Тогда
	//				МассивПродуктов.Добавить(ТекПродукт);
	//			КонецЕсли;
	//			//rarus tenkam 24.02.2017 mantis 8492 ---
	//		Иначе 
	//			Сообщить("Изделие с номером шасси "+ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C2").Текст+ " не найдено в базе");
	//		КонецЕсли; 
	//	КонецЕсли;
	//КонецЦикла;
	////rarus tenkam 06.02.2017 mantis 7176 +++
	//Если МассивБукингЛистов.Количество() <> 0 Тогда
	//	Для Каждого ТекБукингЛист Из МассивБукингЛистов Цикл
	//		ТекстНапоминания = "Загружен файл от поставщика по букинг-листу №" + ТекБукингЛист; 
	//		Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОЗагрузкеБукингЛиста", ТекстНапоминания);
	//	КонецЦикла;
	//КонецЕсли;
	////rarus tenkam 06.02.2017 mantis 7176 ---
	//
	////rarus tenkam 24.02.2017 mantis 8492 +++
	//Если ЗначенияВыбранныхПараметров.Свойство("МестоДоставки") И МассивПродуктов.Количество() <> 0 Тогда
	//	СформированноеПеремещение = СформироватьЗаписатьПеремещение(ЗначенияВыбранныхПараметров.МестоДоставки, ЗначенияВыбранныхПараметров.CDD, МассивПродуктов);
	//	Если ЗначениеЗаполнено(СформированноеПеремещение) Тогда
	//		Сообщить("Записан документ " + СформированноеПеремещение);
	//	КонецЕсли;
	//КонецЕсли;
	////rarus tenkam 24.02.2017 mantis 8492 ---
	//rarus abrant 17.04.2017 mantis 7617 ---
КонецПроцедуры

//rarus abrant 17.04.2017 mantis 7617 +++
&НаСервере
Процедура ПрочитатьТабличныйДокументЗагрузкаФайлаОтПоставщика(ТабДокумент, ЗначенияВыбранныхПараметров)
	
	КолвоСтрокДокумента = ТабДокумент.ВысотаТаблицы; 
	НомерНачальнойСтроки = ЗначенияВыбранныхПараметров.НомерСтроки;

	МассивБукингЛистов = Новый Массив;
	МассивПродуктов = Новый Массив; //rarus bonmak 05.08.2019 14427 храняться ссылки на изделия 
	
	нНомерШасси						= ЗначенияВыбранныхПараметров.НомерШасси;
	нМодель 						= ЗначенияВыбранныхПараметров.Модель;
	нВес 							= ЗначенияВыбранныхПараметров.Вес;
	нДлина 							= ЗначенияВыбранныхПараметров.Длина;
	нВысота 						= ЗначенияВыбранныхПараметров.Высота;
	нШирина 						= ЗначенияВыбранныхПараметров.Ширина;
	НомерБукингЛиста 				= СокрЛП(ЗначенияВыбранныхПараметров.НомерБукингЛиста);		//rarus tenkam 10.05.2017 mantis 9608 + (добавила СокрЛП)
	МодельиНомерДвигателяИзделия 	= "";
	
	Для нСтрока=НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
		
		Если ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНомерШасси, Символы.НПП, "")).Текст = "" И
			ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нМодель, Символы.НПП, "")).Текст = "" Тогда
			Прервать;
		КонецЕсли;
		
		Если ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНомерШасси, Символы.НПП, "")).Текст <> "" Тогда
			ИскомоеИзделие = ПолучитьИзделиеПоШасси(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНомерШасси, Символы.НПП, "")).Текст);
			
			Если ЗначениеЗаполнено(ИскомоеИзделие)  Тогда
			    ИзделиеОбъект = ИскомоеИзделие.ПолучитьОбъект();
				МодельИзделия 					= СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C" + нМодель).Текст, Символы.НПП, "");
				ТекВес = СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C" + нВес).Текст, Символы.НПП, "");
				ВесИзделия = ?(ЗначениеЗаполнено(ТекВес), Число(ТекВес),0);
				ТекДлина = СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C" + нДлина).Текст, Символы.НПП, "");
				ДлинаИзделия = ?(ЗначениеЗаполнено(ТекДлина), Число(ТекДлина),0);
				ТекВысота = СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C" + нВысота).Текст, Символы.НПП, "");
				ВысотаИзделия = ?(ЗначениеЗаполнено(ТекВысота), Число(ТекВысота),0);
				ТекШирина = СтрЗаменить(ТабДокумент.Область("R"+нСтрока + "C" + нШирина).Текст, Символы.НПП, "");
				ШиринаИзделия = ?(ЗначениеЗаполнено(ТекШирина), Число(ТекШирина),0);
				//перевод значений в миллиметры
				Если ДлинаИзделия < 1000 Тогда
					ДлинаИзделия = ДлинаИзделия*1000;
				КонецЕсли;
				Если ВысотаИзделия < 1000 Тогда
					ВысотаИзделия = ВысотаИзделия*1000;
				КонецЕсли;
				Если ШиринаИзделия < 1000 Тогда
					ШиринаИзделия = ШиринаИзделия*1000;
				КонецЕсли;
				
				Если МассивБукингЛистов.Найти(НомерБукингЛиста) = Неопределено Тогда
					МассивБукингЛистов.Добавить(НомерБукингЛиста);
				КонецЕсли;
				ИзделиеОбъект.ПортОтправки = ЗначенияВыбранныхПараметров.ПортОтправки;
				ИзделиеОбъект.ПортПрихода = ЗначенияВыбранныхПараметров.ПортПрихода;
				ПроверитьКарточкуЗаказаНаСоответствие(ИзделиеОбъект,МодельИзделия,МодельиНомерДвигателяИзделия,ВесИзделия,ДлинаИзделия,ВысотаИзделия,ШиринаИзделия,НомерБукингЛиста,ЗначенияВыбранныхПараметров);
				ИзделиеОбъект.Записать();
				ТекИзделие = ИзделиеОбъект.Ссылка;//РегистрыСведений.Scan_ВзаимосвязьИзделийПродуктовИЗаказов.ПолучитьПродуктПоИзделию(ИзделиеОбъект.Ссылка); //rarus bonmak 05.08.2019 14427
				
				Если ЗначениеЗаполнено(ТекИзделие) Тогда //rarus bonmak 05.08.2019 14427
					МассивПродуктов.Добавить(ТекИзделие); //rarus bonmak 05.08.2019 14427
				КонецЕсли;
			Иначе
				//rarus FominskiyAS 21.04.2019  mantis 14191 +++
				//Сообщить("Изделие с номером шасси "+ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНомерШасси, Символы.НПП, "")).Текст+ " не найдено в базе");
				Сообщить(НСтр("ru = 'Продукт с номером шасси '; en = 'Product with Chassis '")+ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C2").Текст+ НСтр("ru = ' не найден в базе'; en = ' not found'"));
				//rarus FominskiyAS 21.04.2019  mantis 14191 ---//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	//rarus BProg_Gladkov 04.05.2020 0015962 ++ Удалена отправка уведомлений о загрузке букинг-листа
	//Если МассивБукингЛистов.Количество() <> 0 Тогда
	//	Для Каждого ТекБукингЛист Из МассивБукингЛистов Цикл
	//		//rarus abrant 02.05.2017 mantis 8698 +++
	//		//rarus tenkam 05.05.2017 mantis 8698 +++
	//		//ТекстНапоминания = "Загружен файл от поставщика по букинг-листу №" + ТекБукингЛист + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДЛФ=Д") + "."; 
	//		//Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОЗагрузкеБукингЛиста", ТекстНапоминания);
	//		//Текст = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаУведомленияОЗагрузкеБукингЛиста") + " №" + ЗначенияВыбранныхПараметров.НомерБукингЛиста + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДЛФ=Д") + ".";
	//		ТекстНапоминания = " № " + ТекБукингЛист + " от " + Формат(ЗначенияВыбранныхПараметров.ДатаБукингЛиста,"ДФ=""дд.ММ.гггг'г.'""") + 
	//		" Дата CDD поставщика = " + Формат(ЗначенияВыбранныхПараметров.CDD, "ДФ=""дд.ММ.гггг'г.'""") + ", Количество изделий - " + МассивПродуктов.Количество() + ".";
	//		Scan_ВспомогательныеФункцииСервер.СформироватьНапоминаниеПользователямПоПраву("УведомлятьОЗагрузкеБукингЛиста", "Загружен файл от поставщика по букинг листу" + ТекстНапоминания);					
	//		
	//		//rarus tenkam 13.11.2017 mantis 8465 +++
	//		Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьМеханизмШаблоновДляОтправкиПисем") Тогда
	//			//Scan_ОтправкаПисемПоЭлектроннойПочте.ОтправитьПисьмоОЗагрузкеГрузовогоБилета(Неопределено, ТекстНапоминания);
	//		Иначе	//rarus tenkam 13.11.2017 mantis 8465 ---
	//			
	//			Текст = Scan_ПраваИНастройки.Scan_Право("ТекстПисьмаУведомленияОЗагрузкеБукингЛиста") + ТекстНапоминания;
	//			//rarus tenkam 05.05.2017 mantis 8698 ---
	//			Тема = Scan_ПраваИНастройки.Scan_Право("ТемаПисьмаУведомленияОЗагрузкеБукингЛиста"); 
	//			ПисьмоГрузовойБилет = Scan_ВспомогательныеФункцииСервер.ОтправитьПисьмоОЗагрузкеПоПраву("УведомлятьОЗагрузкеБукингЛиста", Текст, Тема);
	//			//rarus abrant 02.05.2017 mantis 8698 ---
	//			
	//		КонецЕсли;		//rarus tenkam 13.11.2017 mantis 8465 +
	//	КонецЦикла;
	//КонецЕсли;
	//rarus BProg_Gladkov 04.05.2020 0015962 -- 
	
	Если ЗначенияВыбранныхПараметров.Свойство("МестоДоставки") И МассивПродуктов.Количество() <> 0 Тогда
		СформированноеПеремещение = СформироватьЗаписатьПеремещение(ЗначенияВыбранныхПараметров.МестоДоставки, ЗначенияВыбранныхПараметров.CDD, МассивПродуктов);
		Если ЗначениеЗаполнено(СформированноеПеремещение) Тогда
			//rarus FominskiyAS 08.07.2019  mantis 14191 +++
			//Сообщить("Записан документ " + СформированноеПеремещение);
			Сообщить(НСтр("ru = 'Записан документ '; en = 'Document saved '") + СформированноеПеремещение);
			//rarus FominskiyAS 08.07.2019  mantis 14191 --- 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//rarus abrant 17.04.2017 mantis 7617 ---

&НаСервере
Процедура ПроверитьКарточкуЗаказаНаСоответствие(Изделие,Модель,МодельИНомерДвигателя = "",Вес,Длина,Высота,Ширина,НомерБукингЛиста,ЗначенияВыбранныхПараметров)
	НаДату = ТекущаяДата();
	//rarus tenkam 16.03.2017 mantis 7623 +++
	//Модель загружается из 1БД
	////Проверяем по модели продукта

	////КарточкаОбъект = КарточкаЗаказа.ПолучитьОбъект();
	//Модель = ВРег(СтрЗаменить(Модель," ","")); 
	//Если Изделие.МодельПродукта <> Модель Тогда
	//	НайденнаяСсылка = Справочники.Scan_МоделиПродуктов.НайтиПоНаименованию(Модель);
	//	//если такой модели нету в справочники то запишем
	//	Если НайденнаяСсылка = Справочники.Scan_МоделиПродуктов.ПустаяСсылка() Тогда
	//		НоваяМодель = Справочники.Scan_МоделиПродуктов.СоздатьЭлемент();
	//		НоваяМодель.Наименование = Модель;
	//		НоваяМодель.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania;
	//		НоваяМодель.Записать();
	//		Сообщить("В справочнике Модели продуктов создана новая модель: "+ НоваяМодель.Ссылка);

	//	КонецЕсли;
	//	// Если модель продукта из файла отличается от модели в TLMS зачищаем спецификацию
	//	//ПродуктОбъект = КарточкаЗаказа.Продукт.ПолучитьОбъект(); 
	//	Изделие.СпецификацияПродукта = Справочники.Scan_СпецификацииПродуктов.ПустаяСсылка();
	//	//ПродуктОбъект.МодельПродукта = Справочники.Scan_МоделиПродуктов.НайтиПоНаименованию(Модель);
	//	//ПродуктОбъект.Записать();
	//	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Изделие.Ссылка.МодельПродукта,Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Модель, НаДату);
	//	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Справочники.Scan_СпецификацииПродуктов.ПустаяСсылка(),Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Спецификация, НаДату);
	//КонецЕсли; 
	
	//НомерДвигателя = Число(Прав(МодельИНомерДвигателя,7));
	//МодельДвигателя = Формат(Лев(МодельИНомерДвигателя,стрДлина(МодельИНомерДвигателя)-8),"ЧГ=");
	//МодельДвигателя = ?(МодельДвигателя = "", Справочники.Scan_МоделиПродуктов.ПустаяСсылка(), МодельДвигателя);	//rarus tenkam 06.02.2017 mantis 7176 +
	////Проверяем Модель двигателя 
	//Если Изделие.МодельДвигателяТС<>МодельДвигателя Тогда
	//	
	//	НайденнаяСсылка = Справочники.Scan_МоделиПродуктов.НайтиПоНаименованию(МодельДвигателя);
	//	Если НайденнаяСсылка = Справочники.Scan_МоделиПродуктов.ПустаяСсылка() Тогда
	//		НоваяМодельДвигателя = Справочники.Scan_МоделиПродуктов.СоздатьЭлемент();
	//		НоваяМодельДвигателя.Наименование = МодельДвигателя;
	//		НоваяМодельДвигателя.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania;
	//		НоваяМодельДвигателя.Записать();
	//		Сообщить("В справочнике Модели продуктов создана новая модель: "+ НоваяМодельДвигателя.Ссылка);
	//	КонецЕсли; 
	//	Изделие.МодельДвигателяТС = Справочники.Scan_МоделиПродуктов.НайтиПоНаименованию(МодельДвигателя);
	//КонецЕсли;
	////Проверим Номер Двигателя
	//Если Изделие.НомерДвигателяТС <> НомерДвигателя Тогда
	//	Изделие.НомерДвигателяТС = НомерДвигателя;
	//КонецЕсли; 
	
	//Обработаем только Модель двигателя ТС, т.к. Номер двигателя ТС приходит из 1БД
	МодельДвигателя = Формат(Лев(МодельИНомерДвигателя,стрДлина(МодельИНомерДвигателя)-8),"ЧГ=");
	МодельДвигателя = ?(МодельДвигателя = "", Справочники.Scan_МоделиПродуктов.ПустаяСсылка(), МодельДвигателя);	
	
	Если ЗначениеЗаполнено(МодельДвигателя) Тогда
		НайденнаяСсылка = Справочники.Scan_МоделиПродуктов.НайтиПоНаименованию(МодельДвигателя);
		Если НайденнаяСсылка = Справочники.Scan_МоделиПродуктов.ПустаяСсылка() Тогда
			НоваяМодельДвигателя = Справочники.Scan_МоделиПродуктов.СоздатьЭлемент();
			НоваяМодельДвигателя.Наименование = МодельДвигателя;
			НоваяМодельДвигателя.МаркаПродукта = Справочники.Scan_МаркиПродуктов.Scania;
			НоваяМодельДвигателя.Записать();
			НайденнаяСсылка = НоваяМодельДвигателя.Ссылка;
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("В справочнике ""Модели продуктов"" создана новая модель: "+ НоваяМодельДвигателя.Ссылка);
			Сообщить(НСтр("ru = 'В справочнике ""Модели продуктов"" создана новая модель: '; en = 'In ""Models"" catalogue new model was created: '")+ НоваяМодельДвигателя.Ссылка);
			//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
		КонецЕсли; 
		Если Изделие.МодельДвигателяТС <> НайденнаяСсылка Тогда
			Изделие.МодельДвигателяТС = НайденнаяСсылка;
		КонецЕсли;
	КонецЕсли;
	//rarus tenkam 16.03.2017 mantis 7623 ---
	
	//Записываем в регистр Вес и Длину
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Вес, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Вес, НаДату);	
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Длина, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Длина, НаДату);	
	//rarus abrant 18.04.2017 mantis 7617 +++
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Высота, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Высота, НаДату);
	Справочники.Scan_Изделия.ЗаписьЗначенияРегистраСведения(Изделие.Ссылка, Ширина, Перечисления.Scan_ДополнительнаяИнформацияПоИзделиям.Ширина, НаДату);
	//rarus abrant 18.04.2017 mantis 7617 ---
	//БукингЛист
	ЗаказНаЗавод = ПолучитьЗаказНаЗавод(Изделие);
	//rarus tenkam 06.02.2017 mantis 7176 +++
	//Если ЗаказНаЗавод <> Неопределено Тогда	
	Если ЗначениеЗаполнено(ЗаказНаЗавод) Тогда	
	//rarus tenkam 06.02.2017 mantis 7176 ---
	
		//Проверяем НомерБукингЛиста
		Если ЗначениеЗаполнено(ЗаказНаЗавод.НомерБукингЛиста) И
			ЗаказНаЗавод.НомерБукингЛиста <> НомерБукингЛиста Тогда //rarus tenkam 16.03.2017 mantis 7623 + (если такой же номер, то перезапишем)
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Ошибка: в заказе на завод "+ЗаказНаЗавод+" номер букинг листа уже заполнен");
			Сообщить(НСтр("ru = 'Ошибка: в заказе на завод '; en = 'Error: in order '")+ЗаказНаЗавод+НСтр("ru = ' номер букинг листа уже заполнен'; en = ' booking list number already filled in'"));
			//rarus FominskiyAS 21.04.2019  mantis 14191 ---  	
		Иначе
			ЗаказНаЗаводОбъект = ЗаказНаЗавод.ПолучитьОбъект();
			ЗаказНаЗаводОбъект.НомерБукингЛиста = НомерБукингЛиста;
			ЗаказНаЗаводОбъект.ЕстьБукингЛист = Истина;
			//rarus abrant 17.04.2017 mantis 7617 +++
			ЗаказНаЗаводОбъект.ДатаБукингЛиста = ЗначенияВыбранныхПараметров.ДатаБукингЛиста;
			//ЗаказНаЗаводОбъект.ДатаБукингЛиста = ТекущаяДата();
			//rarus abrant 17.04.2017 mantis 7617 ---
			//ЗаказНаЗаводОбъект.CDDПоставщик = ЗначенияВыбранныхПараметров.CDD; //rarus BProg_Gladkov 22.11.2019 0014452 +-
			
			//rarus tenkam 06.02.2017 mantis 7176 +++
  			ЗаказНаЗаводОбъект.ДополнительныеСвойства.Вставить("ЭтоФайлОтПоставщика", Истина);
			//rarus tenkam 06.02.2017 mantis 7176 ---
			
			ЗаказНаЗаводОбъект.Записать();
			
			// rarus tenkam 31.05.2019 mantis 14224 +++
			// Запишем ключевую дату
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ЗаказНаЗаводОбъект.Ссылка, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначенияВыбранныхПараметров.ДатаБукингЛиста,
									Перечисления.Scan_КлючевыеДаты.ДатаБукингЛиста, ТекущаяДата());			
			
			// Запишем ключевую дату
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписьЗначенияРегистраСведения(ЗаказНаЗаводОбъект.Ссылка, 
									Перечисления.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод, ЗначенияВыбранныхПараметров.CDD,
									Перечисления.Scan_КлючевыеДаты.CDDПоставщик, ТекущаяДата());			
			// rarus tenkam 31.05.2019 mantis 14224 ---
		КонецЕсли;
	Иначе 
		Сообщить("У продукта "+Изделие.Ссылка+ " нет заказа на завод");
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаказНаЗавод(Изделие);
	//rarus bonmak 05.08.2019 14427
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
	|ИЗ
	|	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
	|ГДЕ
	|	Scan_Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие = &СсылкаИзделие";
	Запрос.УстановитьПараметр("СсылкаИзделие",Изделие.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ЗаказНаЗавод;	
		
	КонецЕсли; 
КонецФункции

&НаСервере
Функция ПолучитьИзделиеПоШасси(НомерШасси)
	Попытка
	СсылкаНомерШасси = Формат(Число(НомерШасси), "ЧГ=");
	Исключение
	КонецПопытки;
	//Запрос = Новый Запрос;
	//Запрос.Текст ="ВЫБРАТЬ
	//              |	Scan_ВзаимосвязьПродуктовИКарточекЗаказов.КарточкаЗаказа
	//              |ИЗ
	//              |	РегистрСведений.Scan_ВзаимосвязьПродуктовИКарточекЗаказов КАК Scan_ВзаимосвязьПродуктовИКарточекЗаказов
	//              |ГДЕ
	//              |	Scan_ВзаимосвязьПродуктовИКарточекЗаказов.Продукт.НомерИзделия = &СсылкаНомерШасси";
	//Запрос.УстановитьПараметр("СсылкаНомерШасси",СсылкаНомерШасси);
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	Сообщить("Карточки заказа с номером шасси: "+ СсылкаНомерШасси + " продукта нет");
	//	Возврат Неопределено;
	//Иначе
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Возврат Выборка.КарточкаЗаказа;
	//	КонецЕсли; 	
	//КонецЕсли; 
	ССылкаНаИзделие=Справочники.Scan_Изделия.НайтиПоРеквизиту("НомерИзделия",СсылкаНомерШасси);
	Возврат ССылкаНаИзделие;	
КонецФункции
//rarus sergei mantis 6926 --

//rarus sergei mantis 6929 ++

//&НаСервере
//Функция ПолучитьМассивпродуктов(мВыбраныСсылки)
//	
//	мВыбраныСсылкиПродукт = Новый Массив;
//	ЕстьПустыеКарточки = Ложь;
//		Для каждого элемент Из мВыбраныСсылки Цикл                                                                                                     
//			Если НЕ ЗначениеЗаполнено(Элемент.Продукт) Тогда
//				Сообщить("Указан заказ: " +Элемент+ " в котором отсутствует продукт. документ не может быть создан");
//				ЕстьПустыеКарточки = Истина;
//			КонецЕсли;
//			мВыбраныСсылкиПродукт.Добавить(Элемент.Продукт);
//		
//		КонецЦикла;	
//	Если НЕ ЕстьПустыеКарточки Тогда
//		Возврат мВыбраныСсылкиПродукт;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли;
//	
//КонецФункции

//rarus sergei 03.08.2016 mantis 6929 ++

//Проверяет есть ли среди выбранных ссылок продукты без изделия
Функция ПроверитьМассивПродуктов(мВыбраныСсылки)
	
	ЕстьПустыеСсылки = Ложь;
	Для каждого элемент Из мВыбраныСсылки Цикл
		Если НЕ ЗначениеЗаполнено(Элемент.Ссылка) Тогда //rarus bonmak 05.08.2019 14427
			Сообщить("Указан заказ: " +Элемент+ " в котором отсутствует продукт. Документ не может быть создан");
			ЕстьПустыеКарточки = Истина;
		КонецЕсли;
		фПродуктВАрхиве = РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЧтениеЗначенияРегистраСведения(Элемент, Перечисления.Scan_ОбъектыКлючевыхДат.Изделие, ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ПродуктВАрхиве")); //rarus bonmak 05.08.2019 14427
		Если ЗначениеЗаполнено(фПродуктВАрхиве) Тогда
			//rarus FominskiyAS 21.04.2019  mantis 14191 +++
			//Сообщить("Выбран продукт: " +Элемент+ ", который находится в архиве. Документ не может быть создан");
			Сообщить(НСтр("ru = 'Выбран продукт: '; en = 'Selected product: '") +Элемент+ НСтр("ru = ', который находится в архиве. Документ не может быть создан""'; en = ' is in archive. Document cannot be created'")); //rarus bonmak 05.08.2019 14427
			//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
			ЕстьПустыеКарточки = Истина;
		КонецЕсли;

	КонецЦикла; 
	Если НЕ ЕстьПустыеСсылки Тогда
		Возврат мВыбраныСсылки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 
//rarus sergei 03.08.2016 mantis 6929 --
 
//rarus sergei 11.07.2016 mantis 7171 ++
&НаКлиенте
Процедура ЗаполнитьЗаявку(Команда)
	//Форма = ПолучитьФорму("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаЗаполненияЗаявкиНаДействие",);
	//Форма.Открыть();
	ПараметрыФормы = Новый Структура;
	Если НЕ ЗначениеЗаполнено(мВыбраныСсылки) Тогда
		//rarus FominskiyAS 21.04.2019  mantis 14191 +++
		//Сообщить("Не выбрано ни одно изделие");
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select the product'"));
		//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
		Возврат;
	КонецЕсли;
	//rarus sergei 03.08.2016 mantis 6929 ++
	//Продукты = ПолучитьМассивпродуктов(мВыбраныСсылки);
	//rarus sergei 03.08.2016 mantis 6929 --
	Изделия = ПроверитьМассивПродуктов(мВыбраныСсылки); //rarus bonmak 05.08.2019 14427
	Если Изделия = Неопределено Тогда //rarus bonmak 05.08.2019 14427
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Изделия", Изделия); //rarus bonmak 05.08.2019 14427 
	
	//rarus tenkam 26.09.2016 mantis 7506 баг ++	
	//ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗаполненияЗаявкиНаДействие",ПараметрыФормы);
	//СтруктураВозврДанные = ОткрытьФормуМодально("ОбщаяФорма.Scan_ФормаЗаполненияЗаявкиНаДействие",ПараметрыФормы,,);   //rarus sergei 07.10.2016 mantis 7609 +
	//rarus tenkam 31.10.2016 TLMS 011 ++ 
	Описание = Новый ОписаниеОповещения("ЗакрытиеЗаявкиНаДействие",ЭтотОбъект);
	ОткрытьФорму("Документ.Scan_ЗаявкаНаДействие.Форма.ФормаДокумента",ПараметрыФормы,,,,,Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//СтруктураВозврДанные = ОткрытьФормуМодально("Документ.Scan_ЗаявкаНаДействие.Форма.ФормаДокумента",ПараметрыФормы,,); //rarus sergei 07.10.2016 mantis 7609 +
	//Если ЗначениеЗаполнено(СтруктураВозврДанные) Тогда
	//	мВыбраныСсылки.Очистить();
	//	ркКоличествоВыбранных = мВыбраныСсылки.Количество();
	//	Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки);
	//КонецЕсли;
	//rarus tenkam 31.10.2016 TLMS 011 --
	//rarus tenkam 26.09.2016 mantis 7506 баг --
КонецПроцедуры                          
//rarus sergei 11.07.2016 mantis 7171 --

//rarus tenkam TLMS 011 ++
&НаКлиенте
Процедура ЗакрытиеЗаявкиНаДействие(СтруктураВозврДанные,ДополнительныеПараметры) Экспорт	
	//Если ЗначениеЗаполнено(СтруктураВозврДанные) Тогда 	//rarus tenkam 22.11.2016 TLMS 010 +
		мВыбраныСсылки.Очистить();
		ркКоличествоВыбранных = мВыбраныСсылки.Количество();
		Сток.Параметры.УстановитьЗначениеПараметра("мВыбраныСсылки", мВыбраныСсылки);
	//КонецЕсли;	
КонецПроцедуры
//rarus tenkam TLMS 011 --

&НаКлиенте
Процедура ЖурналДокументов(Команда)
	ОткрытьФорму("ЖурналДокументов.Scan_ДокументыПоЛогистике.ФормаСписка",);
КонецПроцедуры
//rarus sergei mantis 6929 --

//rarus sergei 22.08.2016 mantis 7122 ++
&НаКлиенте
Процедура РаспределениеЗаявок(Команда)
	ОткрытьФорму("Обработка.Scan_РаспределениеЗаявок.Форма.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура СтокОбработкаЗапросаОбновления()
	
	СтокОбработкаЗапросаОбновленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СтокОбработкаЗапросаОбновленияНаСервере()
	
КонецПроцедуры
//rarus sergei 22.08.2016 mantis 7122 --


////////////////////////////////////////////////////////////////////////////////
// СПИСОК ЗАЯВОК НА ДЕЙСТВИЕ

//rarus tenkam 23.11.2016 mantis 7750 ++
&НаКлиенте
Процедура СтокПриАктивизацииСтроки(Элемент)
	//Отображение заявок по продукту будем вызывать, если открыта таблица
	Если Элементы.ПанельЗаявок.Пометка Тогда
		ТекущаяСтрока = Элементы.Сток.ТекущаяСтрока;
		ЗаявкиНаДействие.Отбор.Элементы.Очистить();
		ЭлементОтбора = ЗаявкиНаДействие.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПродуктыПоЗаявке.Изделие"); //rarus bonmak 05.08.2019 14427
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока;
	КонецЕсли;
	
	//rarus tenkam 06.09.2017 mantis 9425 +++
	//Отображение характеристик АКБ будем вызывать, если открыта таблица
	Если Элементы.ИнформацияПоАКБ.Пометка Тогда
		ТекущаяСтрока = Элементы.Сток.ТекущаяСтрока;
		ХарактеристикиАКБ.Отбор.Элементы.Очистить();
		ЭлементОтбора = ХарактеристикиАКБ.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Изделие");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПолучитьИзделие(ТекущаяСтрока);
		ОбновлениеУсловногоОформленияСостояний();
	КонецЕсли;
	//rarus tenkam 06.09.2017 mantis 9425 ---
	
	//rarus abrant 26.04.2017 011 +++
	
	////rarus tenkam 21.04.2017 011 +++
	//Если Scan_ПраваИНастройки.Scan_Право("ИспользоватьПодсчетКоличестваСтрокВАРМ") Тогда
	//	//rarus samkir 17.04.2017 011 ++
	//	Элементы.НадписьКоличествоСтрок.Заголовок = "Количество продуктов: " + РассчитатьКоличествоСтрок(сток);
	//	//rarus samkir 17.04.2017 011 --
	//КонецЕсли;
	////rarus tenkam 21.04.2017 011 ---
	
	//rarus abrant 26.04.2017 011 ---
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьЗаявку(Команда)
	Для Каждого ТекСтрока Из Элементы.ЗаявкиНаДействие.ВыделенныеСтроки Цикл
		Scan_ВспомогательныеФункцииКлиент.ОбработатьИзменениеЗаявкиНаДействие(Истина, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЗаявку(Команда)
	Для Каждого ТекСтрока Из Элементы.ЗаявкиНаДействие.ВыделенныеСтроки Цикл
		Scan_ВспомогательныеФункцииКлиент.ОбработатьИзменениеЗаявкиНаДействие(Ложь, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

//rarus tenkam 23.11.2016 mantis 7750 --

//rarus tenkam 23.12.2016 mantis 8216 ++
&НаКлиенте
Процедура ПрикрепитьПТС(Команда)
	Если Элементы.Сток.ВыделенныеСтроки.Количество() = 1 Тогда
		СтрокаТаб = Элементы.Сток.ВыделенныеСтроки[0]; //rarus bonmak 05.08.2019 14427
		Изделие = ПолучитьИзделие(СтрокаТаб); //rarus bonmak 05.08.2019 14427
		Если ЗначениеЗаполнено(Изделие) Тогда
			ПараметрыИзделия = Новый Структура("Ключ", Изделие);
			ФормаИзделия = ПолучитьФорму("Справочник.Scan_Изделия.Форма.ФормаЭлемента",ПараметрыИзделия);
			
			// rarus tenkam 15.04.2019 mantis 14195 +++ 
				
			////rarus tenkam 03.05.2017 mantis 9440 +++
			//ВыбранныеФайлы = Новый Массив;
			//
			//ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			//ВыборФайла.МножественныйВыбор = Истина;
			//ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
			//ВыборФайла.Фильтр = НСтр("ru = 'Все файлы'") + " (*.*)|*.*";
			//Если ВыборФайла.Выбрать() Тогда
			//	ВыбранныеФайлы = ВыборФайла.ВыбранныеФайлы;
			//КонецЕсли;
			//
			//Если ВыбранныеФайлы.Количество() <> 0 Тогда
			//	ДопПараметры = Новый Структура;
			//	ДопПараметры.Вставить("ИдентификаторФормы", ФормаИзделия.УникальныйИдентификатор);
			//	ДопПараметры.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
			//	ДопПараметры.Вставить("ВыбранныеФайлы", ВыбранныеФайлы);
			//	ДопПараметры.Вставить("ВладелецФайла", Изделие);
			//	
			//	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлыРасширениеПредложено", ПрисоединенныеФайлыСлужебныйКлиент, ДопПараметры);
			//	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);	
			//КонецЕсли;
			////rarus tenkam 03.05.2017 mantis 9440 ---
			//		
			//ФормаИзделия.Открыть();
			//
			//ПараметрыФормы = Новый Структура;
			//ПараметрыФормы.Вставить("ВладелецФайла",  Изделие);
			//ПараметрыФормы.Вставить("ТолькоПросмотр", ФормаИзделия.ТолькоПросмотр);
			//
			//// rarus tenkam 14.03.2019 mantis 14220 +++ 
			////ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы", ПараметрыФормы, ФормаИзделия, Истина, ФормаИзделия.Окно);
			//ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ФормаИзделия, Истина, ФормаИзделия.Окно);
			//// rarus tenkam 14.03.2019 mantis 14220 ---
			
			ДопПараметры = Новый Структура("Изделие", Изделие);
			ДопПараметры.Вставить("ФормаИзделия", ФормаИзделия);
			ОбработчикРезультата = Новый ОписаниеОповещения("ПрикреплениеПТСЗавершение", ЭтотОбъект, ДопПараметры);
			РаботаСФайламиКлиент.ДобавитьФайлы(Изделие, ФормаИзделия.УникальныйИдентификатор, , , ОбработчикРезультата);
	
			// rarus tenkam 15.04.2019 mantis 14195 --- 
			
		//Иначе //rarus bonmak 05.08.2019 14427
		//	Сообщить("У выбранного продукта нет изделия!");
		КонецЕсли;
	Иначе
		//rarus FominskiyAS 25.04.2019  mantis 14191 +++
		//Сообщить("Для прикрепления ПТС необходимо спозиционироваться на одной строке продукта!");
		Сообщить(НСтр("ru = 'Для прикрепления ПТС необходимо спозиционироваться на одной строке продукта!'; en = 'To attach PTS please select only one line!'")); //rarus bonmak 05.08.2019 14427
		//rarus FominskiyAS 25.04.2019  mantis 14191 --- 
	КонецЕсли;
	
КонецПроцедуры
// rarus tenkam 15.04.2019 mantis 14195 ---

&НаСервереБезКонтекста
Функция ПолучитьИзделие(Строка)//rarus bonmak 05.08.2019 14427
	Возврат Строка.Ссылка; //rarus bonmak 05.08.2019 14427	
КонецФункции
//rarus tenkam 23.12.2016 mantis 8216 --

//rarus tenkam 22.03.2017 mantis 7623 +++
&НаСервере
Функция ВывестиКоличествоСтрокСтока()
	ТЗ = СписокВТЗнаСервере();
	КоличествоСтрок = ТЗ.Количество();
КонецФункции

Процедура СтокПриОбновлении(Элемент, ОформленияСтрок)
	ВывестиКоличествоСтрокСтока();
КонецПроцедуры
//rarus tenkam 22.03.2017 mantis 7623 ---

//rarus tenkam 03.04.2017 mantis 9073 +++
////////////////////////////////////////////////////////////////////////////////
// ОТБОР ПО КОРИДОРУ ЗНАЧЕНИЙ

&НаКлиенте
Процедура ТумблерПоискПриИзменении(Элемент)
	УправлениеДиалогом();
	ОтключитьОтборы();
	Если ТумблерПоиск = "1" Тогда
		Элементы.ПолеОтбораПоПериоду.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивКолонокОтбора());
		//rarus abrant 12.04.2017 mantis 9073 +++
		СписокЗаголовков = ПолучитьСписокЗаголовковКолонокОтбора(); 
		Для каждого ЭлементСпискаВыбора из Элементы.ПолеОтбораПоПериоду.СписокВыбора Цикл
			//rarus abrant 20.04.2017 mantis 9073 +++
			ЭлементСпискаВыбора.Представление = СписокЗаголовков.НайтиПоИдентификатору(ЭлементСпискаВыбора.ПолучитьИдентификатор()%Элементы.ПолеОтбораПоПериоду.СписокВыбора.Количество());
			//rarus abrant 20.04.2017 mantis 9073 ---
		КонецЦикла;	
		//rarus abrant 12.04.2017 mantis 9073 ---
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтбораПоПериодуПриИзменении(Элемент)
	ЗаполнитьТипыПолейПериода(ПолеОтбораПоПериоду);
	ПолеС = "";
	ПолеПо = "";
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивКолонокОтбора()
	МассивКолонокОтбора = Новый Массив;
	ОтборСКД = Неопределено;
	Для Каждого ЭлементКомпоновщика Из Сток.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтборСКД = ЭлементКомпоновщика;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЭлементыОтбора = ОтборСКД.Элементы;
	Для Каждого ТекЭлемент Из ЭлементыОтбора Цикл
		Если ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Дата") ИЛИ
			ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Строка") ИЛИ
			ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Число") Тогда
			МассивКолонокОтбора.Добавить(ТекЭлемент.ЛевоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивКолонокОтбора;	
КонецФункции

//rarus abrant 11.04.2017 mantis 9073 +++
&НаСервере
Функция ПолучитьСписокЗаголовковКолонокОтбора()
	СписокЗаголовковКолонокОтбора = Новый СписокЗначений;
	ЭлементыОтбора = ЭтотОбъект.Отбор.ПолучитьЭлементы(); 
	Для Каждого ТекЭлемент Из ЭлементыОтбора Цикл
		Если ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Дата") ИЛИ
			ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Строка") ИЛИ
			ТипЗнч(ТекЭлемент.ПравоеЗначение) = Тип("Число") Тогда
			СписокЗаголовковКолонокОтбора.Добавить(ТекЭлемент.Заголовок);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокЗаголовковКолонокОтбора;	
КонецФункции
//rarus abrant 11.04.2017 mantis 9073 ---

&НаСервере
Процедура ЗаполнитьТипыПолейПериода(ИмяЛевогоЗначения)
	ОтборСКД = Неопределено;
	Для Каждого ЭлементКомпоновщика Из Сток.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтборСКД = ЭлементКомпоновщика;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЭлементыОтбора = ОтборСКД.Элементы;
	Для Каждого ТекЭлемент Из ЭлементыОтбора Цикл
		Если ТекЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЛевогоЗначения) Тогда
			МассивТипов = Новый  Массив;
			МассивТипов.Добавить(ТипЗнч(ТекЭлемент.ПравоеЗначение));
			ОписаниеТиповПоля = Новый ОписаниеТипов(МассивТипов);
			Элементы.ПолеС.ВыбиратьТип = Ложь;     
			Элементы.ПолеС.ОграничениеТипа = ОписаниеТиповПоля;
			Элементы.ПолеПо	.ВыбиратьТип = Ложь;
			Элементы.ПолеПо.ОграничениеТипа = ОписаниеТиповПоля;
			Возврат;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры
//rarus tenkam 03.04.2017 mantis 9073 ---
////////////////////////////////////////////////////////////////////////////////

//rarus abrant 13.04.2017 mantis 9133 +++
&НаКлиенте
Процедура ЗагрузитьДанныеПоПолисамОСАГО(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьВыбранныйФайл", ЭтотОбъект);
	ПараметрыКоманды = Новый Структура("ИмяКоманды", Команда.Имя);
	ОткрытьФорму("ОбщаяФорма.Scan_ФормаЗагрузкиФайла",ПараметрыКоманды, ЭтотОбъект,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТабличныйДокументЗагрузкаПоПолисамОСАГО(ТабДокумент, ЗначенияВыбранныхПараметров)
	КолвоСтрокДокумента = ТабДокумент.ВысотаТаблицы; 
	НомерНачальнойСтроки = ЗначенияВыбранныхПараметров.НомерСтроки;
	//заполним номера искомых колонок
	нНачало = ЗначенияВыбранныхПараметров.ДатаНачалаОСАГО;
	нКонец = ЗначенияВыбранныхПараметров.ДатаОкончанияОСАГО;
	нСерия = ЗначенияВыбранныхПараметров.СерияОСАГО;
	нНомер = Число(нСерия)+1;
	нVIN = ЗначенияВыбранныхПараметров.VINИзделия;
	Для нСтрока=НомерНачальнойСтроки ПО КолвоСтрокДокумента Цикл
		Если СокрЛП(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст) = "" И
			 СокрЛП(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нСерия, Символы.НПП, "")).Текст) = "" И
			 СокрЛП(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНомер, Символы.НПП, "")).Текст) = "" Тогда
			 Прервать;
		Иначе	
		Если ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст <> "" Тогда
			ИскомоеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("VIN",ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст);
			Если ЗначениеЗаполнено(ИскомоеИзделие)  Тогда
			    ИзделиеОбъект = ИскомоеИзделие.ПолучитьОбъект();
				ИзделиеОбъект.ДатаНачалаДействияПолиса 	= Дата(ПреобразоватьДату(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНачало, Символы.НПП, "")).Текст)); 
				ИзделиеОбъект.ДатаИстеченияПолиса 		= Дата(ПреобразоватьДату(ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нКонец, Символы.НПП, "")).Текст));
				ИзделиеОбъект.НомерПолисаОСАГО = ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нСерия, Символы.НПП, "")).Текст + ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нНомер, Символы.НПП, "")).Текст;
				ИзделиеОбъект.Записать();
			Иначе 
				//rarus FominskiyAS 21.04.2019  mantis 14191 +++
				//Сообщить("Изделие с VIN - номером "+ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст+ " не найдено в базе");
				Сообщить(НСтр("ru = 'Продукт с VIN - номером '; en = 'Product with VIN '")+ТабДокумент.Область("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+СтрЗаменить(нVIN, Символы.НПП, "")).Текст+НСтр("ru = ' не найден в базе'; en = ' not found'"));
				//rarus FominskiyAS 21.04.2019  mantis 14191 ---  
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
//Преобразуем дату из формата 010217 в формат 20170201
&НаСервере
Функция ПреобразоватьДату (СтараяДата)
	//rarus tenkam 30.11.2017 mantis 9133 +++
	ДатаБезТочек = СтрЗаменить(СтараяДата,".","");	//rarus tenkam 30.11.2017 mantis 9133 +
	День = Лев(ДатаБезТочек,2);
	Год = "20"+Прав(ДатаБезТочек,2);
	Месяц = Прав(Лев(ДатаБезТочек,4),2);
	
	//День = Лев(СтараяДата,2);
	//Год = "20"+Прав(СтараяДата,2);
	//Месяц = Прав(Лев(СтараяДата,4),2);
	//rarus tenkam 30.11.2017 mantis 9133 ---
	НоваяДата = Год+Месяц+День;
	Возврат НоваяДата;
КонецФункции	
//rarus abrant 13.04.2017 mantis 9133 ---

//rarus abrant 26.04.2017 011 +++
&НаКлиенте
Процедура ПересчитатьКоличество(Команда)
	//rarus uzeo@1c-tm.com.ua 29.05.2017  ++++
	//Элементы.НадписьКоличествоСтрок.Заголовок = "Количество продуктов: " + РассчитатьКоличествоСтрок(сток);
	Элементы.НадписьКоличествоСтрок.Заголовок = "Количество изделий: " + РассчитатьКоличествоСтрок(); //rarus bonmak 05.08.2019 14427
	// rarus uzeo@1c-tm.com.ua 29.05.2017  ----
КонецПроцедуры
//rarus abrant 26.04.2017 011 ---

//rarus tenkam 06.09.2017 mantis 9425 +++
////////////////////////////////////////////////////////////////////////////////
// СПИСОК ХАРАКТЕРИСТИК АКБ

&НаСервере
Процедура ОбновлениеУсловногоОформленияСостояний()
	Scan_УправлениеДиалогомСервер.СформироватьУсловноеОформление(ЭтаФорма, Справочники.Scan_СостоянияАКБ,"Состояние",,,"ХарактеристикиАКБ");		
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьХарактеристикиАКБ(Команда)
	Если мВыбраныСсылки.Количество() <> 0 Тогда
		МассивИзделий = Новый Массив;
		Для Каждого ТекИзделие Из мВыбраныСсылки Цикл //rarus bonmak 05.08.2019 14427
			МассивИзделий.Добавить(ПолучитьИзделие(ТекИзделие)); //rarus bonmak 05.08.2019 14427	
		КонецЦикла;
		ПараметрыОткрытия = Новый Структура("МассивИзделий", МассивИзделий);
		Описание = Новый ОписаниеОповещения("ЗакрытиеЗаявкиНаДействие",ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.Scan_ДанныеПоАКБИзделий.Форма.ФормаЗаполнения", ПараметрыОткрытия,,,,, Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		//rarus FominskiyAS 23.04.2019  mantis 14191 +++
		//Сообщить("Для заполнения характеристик АКБ необходимо выбрать хотя бы один продукт!");
		Сообщить(НСтр("ru = 'Для заполнения характеристик АКБ необходимо выбрать хотя бы один продукт!'; en = 'To add battery characteristics, please select a product!'")); //rarus bonmak 05.08.2019 14427
		//rarus FominskiyAS 23.04.2019  mantis 14191 ---  
	КонецЕсли;
КонецПроцедуры
//rarus tenkam 06.09.2017 mantis 9425 ---

//rarus tenkam 060510.2017 mantis 9426 +++
////////////////////////////////////////////////////////////////////////////////
// ЗАМЕЧАНИЯ

&НаКлиенте
Процедура ЗамечанияПоАктам(Команда)
	Если мВыбраныСсылки.Количество() <> 0 Тогда
		Если мВыбраныСсылки.Количество() = 1 Тогда
			//открываем форму элемента	
			ТекИзделие = ПолучитьИзделие(мВыбраныСсылки[0]);
			//rarus bonmak 05.08.2019 14427 ++
			//Если НЕ ЗначениеЗаполнено(ТекИзделие) Тогда
			//	Сообщить("Ввод замечаний невозможен, т.к. у продукта нет изделия!");
			//	Возврат;
			//КонецЕсли;
			//rarus bonmak 05.08.2019 14427 --
			ПараметрыИзделия = Новый Структура("Ключ", ТекИзделие);
			ПараметрыИзделия.Вставить("ОткрытьЗамечания",  Истина);
			Описание = Новый ОписаниеОповещения("ЗакрытиеЗаявкиНаДействие",ЭтотОбъект);
			ОткрытьФорму("Справочник.Scan_Изделия.Форма.ФормаЭлемента", ПараметрыИзделия,,,,, Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			//открываем вспомогательную форму	
			
			МассивИзделий = Новый Массив;
			Для Каждого ТекИзделие Из мВыбраныСсылки Цикл //rarus bonmak 05.08.2019 14427
				МассивИзделий.Добавить(ПолучитьИзделие(ТекИзделие));//rarus bonmak 05.08.2019 14427	
			КонецЦикла;
			
			//Если МассивИзделий.Количество() = 0 Тогда //rarus bonmak 05.08.2019 14427 ++
			//	Сообщить("Ввод замечаний невозможен, т.к. у выбранных продуктов нет изделий!");
			//	Возврат;
			//КонецЕсли; //rarus bonmak 05.08.2019 14427 --
			ПараметрыОткрытия = Новый Структура("МассивИзделий", МассивИзделий);
			Описание = Новый ОписаниеОповещения("ЗакрытиеЗаявкиНаДействие",ЭтотОбъект);
			ОткрытьФорму("Обработка.Scan_АРМОтделЛогистики.Форма.ФормаЗамечанияПоАктам", ПараметрыОткрытия,,,,, Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
				
	Иначе
		//rarus FominskiyAS 23.04.2019  mantis 14191 +++
		//Сообщить("Для заполнения замечаний по актам необходимо выбрать хотя бы один продукт!");
		Сообщить(НСтр("ru = 'Для заполнения замечаний по актам необходимо выбрать хотя бы один продукт!'; en = 'Please select a product, to add comments!'")); //rarus bonmak 05.08.2019 14427
		//rarus FominskiyAS 23.04.2019  mantis 14191 ---  
	КонецЕсли;

КонецПроцедуры

//rarus tenkam 060510.2017 mantis 9426 ---

//rarus kolg 22.11.2017 TLMS 9428 ++
&НаКлиенте
Процедура ЗаполнитьЗаявкуНаСервис(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если НЕ ЗначениеЗаполнено(мВыбраныСсылки) Тогда
		//rarus FominskiyAS 21.04.2019  mantis 14191 +++
		//Сообщить("Не выбрано ни одно изделие");
		Сообщить(НСтр("ru = 'Не выбран ни один продукт'; en = 'Please select the product'"));
		//rarus FominskiyAS 21.04.2019  mantis 14191 --- 
		Возврат;
	КонецЕсли;
	
	Изделия = ПроверитьМассивПродуктов(мВыбраныСсылки); //rarus bonmak 05.08.2019 14427
	Если Изделия = Неопределено Тогда //rarus bonmak 05.08.2019 14427
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Изделия", Изделия); //rarus bonmak 05.08.2019 14427 

	Описание = Новый ОписаниеОповещения("ЗакрытиеЗаявкиНаДействие",ЭтотОбъект);
	//ОткрытьФорму("Документ.Scan_ЗаявкаНаСервисныеРаботы.Форма.ФормаДокумента",ПараметрыФормы,,,,,Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ОткрытьФорму("Обработка.Scan_ВводДанныхПоЗаявкеНаСервис.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , НавигационнаяСсылка, Описание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
//rarus tenkam 31.10.2016 TLMS 011 --

// rarus tenkam 10.04.2019 mantis 14195 +++
&НаКлиенте
Процедура ВыборФайлаСатистикаПортЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		ТабДокумент = ПолучитьТабДокументСтатистики(ДополнительныеПараметры.ГодStatistics);	
		СохранитьДанныеВExcel(ТабДокумент, Результат[0]);
	Иначе
		Сообщение = Новый СообщениеПользователю();
		//rarus FominskiyAS 08.07.2019  mantis 14191 +++
		//Сообщение.Текст = НСтр("ru = 'Путь сохранения не выбран!");
		Сообщение.Текст = НСтр("ru = 'Путь сохранения не выбран!'; en = 'Way of saving does not selected!'");
		//rarus FominskiyAS 08.07.2019  mantis 14191 ---  
		Сообщение.Сообщить();   
	КонецЕсли;	
КонецПроцедуры

// rarus tenkam 15.04.2019 mantis 14195 +++ 			
&НаКлиенте
Функция ПрикреплениеПТСЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() <> 0 Тогда
		ДополнительныеПараметры.ФормаИзделия.Открыть();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  ДополнительныеПараметры.Изделие);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ДополнительныеПараметры.ФормаИзделия.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ДополнительныеПараметры.ФормаИзделия, Истина, ДополнительныеПараметры.ФормаИзделия.Окно);
	КонецЕсли;	
КонецФункции	

// rarus tenkam 26.04.2019 mantis 14195 +++	
&НаКлиенте
Процедура ЗагрузитьВыбранныйФайлНовыйЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьВыбранныйФайлНовыйФрагмент(ЗначенияВыбранныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранныйФайлНовыйФрагмент(Знач ЗначенияВыбранныхПараметров)
	
	ПрочитатьCOMОбъект(ЗначенияВыбранныхПараметров);	
	
	//rarus FominskiyAS 08.07.2019  mantis 14191 +++
	//Сообщить("Загрузка файла завершена"+" "+ТекущаяДата());
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
	//rarus FominskiyAS 08.07.2019  mantis 14191 ---  
	
КонецПроцедуры

// rarus tenkam 26.04.2019 mantis 14195 +++
&НаКлиенте
Процедура ЗагрузитьВыбранныйФайлЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗначенияВыбранныхПараметров = ДополнительныеПараметры.ЗначенияВыбранныхПараметров;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ЗначенияВыбранныхПараметров.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ПрочитатьТабличныйДокумент(ПомещенныеФайлы[0].Хранение,ЗначенияВыбранныхПараметров);	
	
	//rarus FominskiyAS 08.07.2019  mantis 14191 +++
	//Сообщить("Загрузка файла завершена"+" "+ТекущаяДата());
	Сообщить(НСтр("ru = 'Загрузка файла завершена'; en = 'Completed'")+" "+ТекущаяДата());
	//rarus FominskiyAS 08.07.2019  mantis 14191 ---  
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрольныхТочекОчиститьПриИзменении(Элемент) //rarus bonmak 12.08.2019 14433 ++
	ТекДанные = Элементы.ТаблицаКонтрольныхТочек.ТекущиеДанные;
	Если ТекДанные.Очистить Тогда
		ТипКонтрольнойТочки = ПолучитьТипКТ(ТекДанные.КонтрольнаяТочка);
		ТекДанные.Значение = ТипКонтрольнойТочки.ПривестиЗначение();
	КонецЕсли;
КонецПроцедуры //rarus bonmak 12.08.2019 14433 --
		
&НаКлиенте
Процедура ТаблицаКонтрольныхТочекПриАктивизацииЯчейки(Элемент)//rarus bonmak 12.08.2019 14433 ++
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаКонтрольныхТочекЗначение" Тогда
		ТекДанные = Элементы.ТаблицаКонтрольныхТочек.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда //rarus bonmak 15032 23.10.2019 добавил условие
			Если ТекДанные.Очистить Тогда
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
			Иначе
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
			КонецЕсли; 		
			
			// rarus tenkam 18.09.2019 mantis 14576 +++
			//rarus BProg_Dekin 18.05.2020 mantis 0015999 ++
			//НайденнаяКТ = ПолучитьКТ("СтатусЗаказаЛокальный");	
			НайденнаяКТ = ПолучитьКТ("ЛокальныйСтатусПродукта");
			//rarus BProg_Dekin 18.05.2020 mantis 0015999 --
			
			Если ТекДанные.КонтрольнаяТочка = НайденнаяКТ Тогда
				Элементы.ТаблицаКонтрольныхТочекЗначение.РедактированиеТекста = Ложь;
				//Элементы.ТаблицаКонтрольныхТочекЗначение.РежимВыбораИзСписка = Истина;
				Элементы.ТаблицаКонтрольныхТочекЗначение.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			КонецЕсли;
			// rarus tenkam 18.09.2019 mantis 14576 ---
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //rarus bonmak 12.08.2019 14433 --

&НаКлиенте
Процедура ТаблицаКонтрольныхТочекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//rarus bonmak 15.08.2019 14576 ++
	//rarus BProg_Dekin 18.05.2020 mantis 0015999 ++
	//НайденнаяКТ = ПолучитьКТ("СтатусЗаказаЛокальный");
	НайденнаяКТ = ПолучитьКТ("ЛокальныйСтатусПродукта");
	//rarus BProg_Dekin 18.05.2020 mantis 0015999 --
	
	Если Элементы.ТаблицаКонтрольныхТочек.ТекущиеДанные.КонтрольнаяТочка = НайденнаяКТ Тогда
		Результат = Истина;
		ТекстОшибки = "";
		СЗ = ЗаполнитьТаблицу(мВыбраныСсылки, Результат, ТекстОшибки);
		Если Результат Тогда 	
			ДанныеВыбора = СЗ;
			СтандартнаяОбработка = Ложь;
		Иначе
			Сообщить(ТекстОшибки);
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//rarus bonmak 15.08.2019 14576 --
КонецПроцедуры

&НаСервере
Функция ПолучитьКТ(ИмяРеквизита) //rarus bonmak 15.08.2019 14576 ++
	НайденнаяКТ = Справочники.Scan_КонтрольныеТочкиБизнесПроцессов.НайтиПоРеквизиту("РеквизитОбъекта", ИмяРеквизита);
	Возврат НайденнаяКТ; 	
КонецФункции //rarus bonmak 15.08.2019 14576 --

&НаСервере
Функция ЗаполнитьТаблицу(мВыбраныСсылки, Результат = Истина, ТекстОшибки) //rarus bonmak 15.08.2019 14576 ++
	СЗ = Новый СписокЗначений;
	//rarus BProg_Dekin 19.05.2020 mantis 0015999 ++ Обращение к локальному статусу по новому имени
	//СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.NEW);
	//СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.OPEN);
	СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыПродуктов.NEW);
	СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыПродуктов.OPEN);
	//rarus BProg_Dekin 19.05.2020 mantis 0015999 --
	ПервыйЗаказ = Истина;
	Если мВыбраныСсылки.Количество() = 0 Тогда
		//СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.SOLD);
		//СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.DELETED);
	Иначе
		//проверим одинаковый ли тип заказа
		Для Каждого СтрокаИзделия Из мВыбраныСсылки Цикл
			ЗаказНаЗаводСсылка = СтрокаИзделия.Ссылка.ЗаказНаЗавод;
			//rarus BProg_Dekin 18.05.2020 mantis 0015999 ++
			//Если ЗаказНаЗаводСсылка = Справочники.Scan_ЗаказыНаЗавод.ПустаяСсылка() Тогда
			//	Результат = Ложь;
			//	ТекстОшибки = Нстр("ru = 'У изделия <'; en = 'The product <'") + СтрокаИзделия.Ссылка + Нстр("ru = '> нет заказа на завод, невозможно установить локальный статус'; en = '> there is no order to the factory, it is impossible to set a local status'");		
			//	Возврат СЗ;
			//КонецЕсли;
			//rarus BProg_Dekin 18.05.2020 mantis 0015999 --
			
			ТипЗаказаНаЗавод = Справочники.Scan_ЗаказыНаЗавод.ЧтениеЗначенияРегистраСведения(ЗаказНаЗаводСсылка, Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод); 
			
			//rarus BProg_Dekin 18.05.2020 mantis 0015999 ++
			//Если ТипЗаказаНаЗавод = Неопределено Тогда
			//	Результат = Ложь;
			//	ТекстОшибки = Нстр("ru = 'В изделии <'; en = 'The product <'") + СтрокаИзделия.Ссылка + Нстр("ru = '> у заказа на завод, не указан тип заказа, невозможно установить локальный статус'; en = '> the order to the factory, is not specified the order type, you cannot set local status'");		
			//	Возврат СЗ;	
			//КонецЕсли;
			//rarus BProg_Dekin 18.05.2020 mantis 0015999 --
			
			Если ПервыйЗаказ Тогда
				ПредыдущийТипЗаказаНаЗавод = ТипЗаказаНаЗавод;
				ПервыйЗаказ = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder Тогда
				//openorder
				Если ПредыдущийТипЗаказаНаЗавод <> ТипЗаказаНаЗавод Тогда 
					Результат = Ложь;
					ТекстОшибки = Нстр("ru = 'У выбранных изделий отличаются типы заказов на завод, невозможно установить локальный статус'; en = 'The selected products are different types of orders to the factory, it is impossible to set a local status'");		
					Возврат СЗ;
				КонецЕсли;
			Иначе
				//Firm order
				Если ПредыдущийТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder Тогда
					Результат = Ложь;
					ТекстОшибки = Нстр("ru = 'У выбранных изделий отличаются типы заказов на завод, невозможно установить локальный статус'; en = 'The selected products are different types of orders to the factory, it is impossible to set a local status'");		
					Возврат СЗ;
				КонецЕсли;				
			КонецЕсли;
			
			ПредыдущийТипЗаказаНаЗавод = ТипЗаказаНаЗавод; 	
		КонецЦикла;	
		
		//rarus BProg_Dekin 18.05.2020 mantis 0015999 ++
		//Если ТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder Тогда
		//	СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.DELETED);
		//КонецЕсли;
		
		ВыбранаМаркаНЕСканиа = Ложь;
		Для Каждого ВыбранныйПродукт Из мВыбраныСсылки Цикл
			МаркаПродукта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйПродукт, "МаркаПродукта");
			Если МаркаПродукта <> Справочники.Scan_МаркиПродуктов.Scania Тогда
				ВыбранаМаркаНЕСканиа = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗаказаНаЗавод = Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder И НЕ ВыбранаМаркаНЕСканиа Тогда
			//rarus BProg_Dekin 19.05.2020 mantis 0015999 ++ Обращение к локальному статусу по новому имени
			//СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.DELETED);
			СЗ.Добавить(Справочники.Scan_ЛокальныеСтатусыПродуктов.DELETED);
			//rarus BProg_Dekin 19.05.2020 mantis 0015999 --
		КонецЕсли;
		//rarus BProg_Dekin 18.05.2020 mantis 0015999 --
	КонецЕсли;
	
	Возврат СЗ;	
КонецФункции //rarus bonmak 15.08.2019 14576 --

&НаСервере
Функция ЛокальныйСтатусЗаполненОчищен() //rarus bonmak 15.08.2019 14576 ++
	ЕстьЗаполненные = Ложь;
	
	//rarus BProg_Dekin 18.05.2020 mantis 0015999 ++
	//НайденнаяКТ = ПолучитьКТ("СтатусЗаказаЛокальный");
	НайденнаяКТ = ПолучитьКТ("ЛокальныйСтатусПродукта");
	//rarus BProg_Dekin 18.05.2020 mantis 0015999 --
	Для Каждого СтрокаКТ Из ТаблицаКонтрольныхТочек Цикл		
		Если СтрокаКТ.КонтрольнаяТочка = НайденнаяКТ Тогда
			Если ЗначениеЗаполнено(СтрокаКТ.Значение) Тогда
				//rarus BProg_Dekin 19.05.2020 mantis 0015999 ++ Обращение к локальному статусу по новому имени
				//СтрокаКТ.Значение = Справочники.Scan_ЛокальныеСтатусыЗаказовНаЗавод.ПустаяСсылка();
				СтрокаКТ.Значение = Справочники.Scan_ЛокальныеСтатусыПродуктов.ПустаяСсылка();
				//rarus BProg_Dekin 19.05.2020 mantis 0015999 --
				ЕстьЗаполненные = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьЗаполненные;	
КонецФункции //rarus bonmak 15.08.2019 14576 --

//rarus kolg 22.11.2017 TLMS 9428 --

