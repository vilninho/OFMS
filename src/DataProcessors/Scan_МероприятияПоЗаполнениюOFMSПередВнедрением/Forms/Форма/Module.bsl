#Область ЗаполнитьDD_DD2_DDS
//rarus bonmak 25.02.2021 17262 ++
&НаКлиенте
Процедура ЗаполнитьDDDD2DDS(Команда)
	
	Если ПустаяСтрока(ПутьКФайлуDD) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайлаDDDD2DDS();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаDDDD2DDS()
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	ТекПутьКФайлу = СокрЛП(ПутьКФайлуDD);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаDDDD2DDSФрагмент(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаDDDD2DDSЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаDDDD2DDSЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаDDDD2DDSФрагмент(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаDDDD2DDSФрагмент(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлDDDD2DDS(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлDDDD2DDS(ПараметрыЗагрузки)
	
	НеобработанныеЗаказыНаЗаводDDDD2DDS.Очистить();
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 4;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	ОбработаноСтрок           = 0;
	НеНайденоЗаказов          = 0;
	ОшибокЗаписиКлючевыхДат   = 0;
	
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		Попытка
			ЧислоСтроки = Число(СтрокаФайла.Заказ);
			НомерЗаказаЧисло  = Истина;
		Исключение 
			НомерЗаказаЧисло  = Ложь;
		КонецПопытки;
		
		НомерЗаказа = СтрокаФайла.Заказ;
		Если НомерЗаказаЧисло Тогда
			КолВоЗнаковЧисло = СтрДлина(ЧислоСтроки);
			Для нПрефикса = 0 По (9 - КолВоЗнаковЧисло) Цикл
				НомерЗаказа = "0" + НомерЗаказа;
			КонецЦикла;
		КонецЕсли;
		
		ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(НомерЗаказа);
		Если ЗаказНаЗавод.Пустая() Тогда
			НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводDDDD2DDS.Добавить();
			НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.Заказ;
			НоваяСтрокаНеобработанных.Комментарий   = "Не найден заказ на завод";
			НеНайденоЗаказов = НеНайденоЗаказов + 1;
			Продолжить;
		КонецЕсли;
		
		Отказ   = Ложь;
		ДатаDD  = ПреобразоватьСтрокуВДату(СтрокаФайла.DD);
		ДатаDD2 = ПреобразоватьСтрокуВДату(СтрокаФайла.DD2);
		ДатаDDS = ПреобразоватьСтрокуВДату(СтрокаФайла.DDS);
		//DD
		РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписатьКлючевуюДатуОбъекта(ЗаказНаЗавод,
																				Перечисления.Scan_КлючевыеДаты.DD,
																				ДатаDD,,
																				Отказ);
		Если Отказ Тогда	
			НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводDDDD2DDS.Добавить();
			НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.Заказ;
			НоваяСтрокаНеобработанных.Комментарий   = "Ошибка записи ключевой даты DD";
			ОшибокЗаписиКлючевыхДат = ОшибокЗаписиКлючевыхДат + 1;
			Отказ = Ложь;
		КонецЕсли;
		//DD2
		Если ДатаDD2 <> Дата(1,1,1) Тогда  
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписатьКлючевуюДатуОбъекта(ЗаказНаЗавод,
																					Перечисления.Scan_КлючевыеДаты.DD2,
																					ДатаDD2,,
																					Отказ);
			Если Отказ Тогда	
				НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводDDDD2DDS.Добавить();
				НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.Заказ;
				НоваяСтрокаНеобработанных.Комментарий   = "Ошибка записи ключевой даты DD2";
				ОшибокЗаписиКлючевыхДат = ОшибокЗаписиКлючевыхДат + 1;
				Отказ = Ложь;
			КонецЕсли;
		КонецЕсли;
		//DDS
		Если ДатаDDS <> Дата(1,1,1) Тогда
			РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписатьКлючевуюДатуОбъекта(ЗаказНаЗавод,
																					Перечисления.Scan_КлючевыеДаты.DDS,
																					ДатаDDS,,
																					Отказ);
			Если Отказ Тогда	
				НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводDDDD2DDS.Добавить();
				НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.Заказ;
				НоваяСтрокаНеобработанных.Комментарий   = "Ошибка записи ключевой даты DDS";
				ОшибокЗаписиКлючевыхДат = ОшибокЗаписиКлючевыхДат + 1;
				Отказ = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading end'")+" "+ТекущаяДата());
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Обработано строк: %1
									|Ошибок обновления ключевых дат: %2
									|Не найдено заказов: %3';
									|en = 'Rows processed: %1
									|Key date update errors: %2
									|Orders not found: %3'"),
									ОбработаноСтрок, ОшибокЗаписиКлючевыхДат, НеНайденоЗаказов);
	Сообщить(ТекстСообщения);
	
КонецПроцедуры

//rarus bonmak 25.02.2021 17262 --
#КонецОбласти

#Область ЗаполнитьRDB
//rarus bonmak 12.03.2021 17383 ++
&НаКлиенте
Процедура ЗаполнитьRDB(Команда)
	
	Если ПустаяСтрока(ПутьКФайлуRDB) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайлаRDB();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаRDB()
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	ТекПутьКФайлу = СокрЛП(ПутьКФайлуRDB);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаRDBФрагмент(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаRDBЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаRDBЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаRDBФрагмент(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаRDBФрагмент(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлRDB(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлRDB(ПараметрыЗагрузки)
	
	НеобработанныеЗаказыНаЗаводRDB.Очистить();
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 2;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	ОбработаноСтрок           = 0;
	НеНайденоЗаказов          = 0;
	ОшибокЗаписиКлючевыхДат   = 0;
	
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		Попытка
			ЧислоСтроки = Число(СтрокаФайла.Заказ);
			НомерЗаказаЧисло  = Истина;
		Исключение 
			НомерЗаказаЧисло  = Ложь;
		КонецПопытки;
		
		НомерЗаказа = СтрокаФайла.Заказ;
		Если НомерЗаказаЧисло Тогда
			КолВоЗнаковЧисло = СтрДлина(ЧислоСтроки);
			Для нПрефикса = 0 По (9 - КолВоЗнаковЧисло) Цикл
				НомерЗаказа = "0" + НомерЗаказа;
			КонецЦикла;
		КонецЕсли;
		
		ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(НомерЗаказа);
		Если ЗаказНаЗавод.Пустая() Тогда
			НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводRDB.Добавить();
			НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.Заказ;
			НоваяСтрокаНеобработанных.Комментарий   = "Не найден заказ на завод";
			НеНайденоЗаказов = НеНайденоЗаказов + 1;
			Продолжить;
		КонецЕсли;
		
		Отказ   = Ложь;
		ДатаRDB  = ПреобразоватьСтрокуВДату(СтрокаФайла.RDB);
		//RDB
		РегистрыСведений.Scan_КлючевыеДатыПроцессов.ЗаписатьКлючевуюДатуОбъекта(ЗаказНаЗавод,
																				Перечисления.Scan_КлючевыеДаты.RDB,
																				ДатаRDB,,
																				Отказ);
		Если Отказ Тогда	
			НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводRDB.Добавить();
			НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.Заказ;
			НоваяСтрокаНеобработанных.Комментарий   = "Ошибка записи ключевой даты RDB";
			ОшибокЗаписиКлючевыхДат = ОшибокЗаписиКлючевыхДат + 1;
			Отказ = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading end'")+" "+ТекущаяДата());
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Обработано строк: %1
									|Ошибок обновления ключевых дат: %2
									|Не найдено заказов: %3';
									|en = 'Rows processed: %1
									|Key date update errors: %2
									|Orders not found: %3'"),
									ОбработаноСтрок, ОшибокЗаписиКлючевыхДат, НеНайденоЗаказов);
	Сообщить(ТекстСообщения);
	
КонецПроцедуры

//rarus bonmak 12.03.2021 17383 --
#КонецОбласти

#Область ЗаполнитьSTDUO

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//rarus vikhle 24.09.2020 mt 16344 +++
	НачалоВыбораФайла(Элемент);
	//Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширения", ЭтотОбъект);
	//ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);
	//rarus vikhle 24.09.2020 mt 16344 ---
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораФайла(Элемент)
	
	//rarus vikhle 24.09.2020 mt 16344 +++
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементВызова",Элемент);
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширения", ЭтотОбъект,ДополнительныеПараметры); //rarus vikhle 24.09.2020 mt 16344
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);	
	//rarus vikhle 24.09.2020 mt 16344
	
КонецПроцедуры	


&НаКлиенте
Процедура ПослеПодключенияРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Таблица XLS (*.xls;*.xlsx)|*.xls;*.xlsx'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь; 
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииДиалогаВыбораФайла", ЭтотОбъект,ДополнительныеПараметры); //rarus vikhle 24.09.2020 mt 16344
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииДиалогаВыбораФайла(ВыбранныйФайл, ДополнительныеПараметры) Экспорт	
	
	Если ВыбранныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыбранныйФайл[0];
	
	//rarus vikhle 24.09.2020 mt 16344 +++
	Если ДополнительныеПараметры.ЭлементВызова = Элементы.ПутьКФайлу Тогда
		ПутьКФайлу = ПолноеИмяФайла;
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ДанныеСоглашенийОПоставке Тогда
		ДанныеСоглашенийОПоставке = ПолноеИмяФайла;
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ДанныеПривязокШасси Тогда
		ДанныеПривязокШасси = ПолноеИмяФайла;	
	//rarus agar 19.10.2020 16346 ++
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ПутьКФайлуЗаявокНаОтгрузку Тогда
		ПутьКФайлуЗаявокНаОтгрузку = ПолноеИмяФайла;
	//rarus agar 19.10.2020 16346 --
	// rarus tenkam 24.12.2020 mantis 16906 +++
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ДанныеПользователейДилеров Тогда
		ДанныеПользователейДилеров = ПолноеИмяФайла;
	// rarus tenkam 24.12.2020 mantis 16906 ---
	// rarus tenkam 29.12.2020 mantis 16345 +++	
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ДанныеСУДляИсторииСтатусов Тогда
		ДанныеСУДляИсторииСтатусов = ПолноеИмяФайла;
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ДанныеСУДляСпискаПродуктов Тогда
		ДанныеСУДляСпискаПродуктов = ПолноеИмяФайла;
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ДанныеСУДляЗагрузки Тогда
		ДанныеСУДляЗагрузки = ПолноеИмяФайла;
	// rarus tenkam 29.12.2020 mantis 16345 ---	
	// rarus tenkam 10.02.2021 mantis 17159 +++
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.УТ_ДанныеПоУсловиямОплаты Тогда
		УТ_ДанныеПоУсловиямОплаты = ПолноеИмяФайла;
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.УТ_ДанныеСпецификации Тогда
		УТ_ДанныеСпецификации = ПолноеИмяФайла;
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.УТ_ДанныеСОВА Тогда
		УТ_ДанныеСОВА = ПолноеИмяФайла;
	// rarus tenkam 10.02.2021 mantis 17159 ---
	//rarus vikhle 12.02.2021 mt 17197 +++
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ДанныеЗаказовНаЗакупку Тогда
		ДанныеЗаказовНаЗакупку = ПолноеИмяФайла;
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ПутьКФайлуDD Тогда //rarus bonmak 25.02.2021 17262 ++
		ПутьКФайлуDD = ПолноеИмяФайла;
		//rarus bonmak 25.02.2021 17262 --
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.ПутьКФайлуRDB Тогда //rarus bonmak 12.03.2021 17383 ++
		ПутьКФайлуRDB = ПолноеИмяФайла;
		//rarus bonmak 12.03.2021 17383 --
	ИначеЕсли ДополнительныеПараметры.ЭлементВызова = Элементы.Склады_ДанныеФайла Тогда //rarus tenkam 02.03.2021 17234 ++
		Склады_ДанныеФайла = ПолноеИмяФайла;
	// rarus tenkam 02.03.2021 17234 --
	
	КонецЕсли;	
	//rarus vikhle 12.02.2021 mt 17197 ---
	
	//rarus vikhle 24.09.2020 mt 16344 ---
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьSTDUO(Команда)
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайлаSTDUO();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаSTDUO()
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	ТекПутьКФайлу = СокрЛП(ПутьКФайлу);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаSTDUOФрагмент(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаSTDUOЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаSTDUOЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаSTDUOФрагмент(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаSTDUOФрагмент(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлSTDUO(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлSTDUO(ПараметрыЗагрузки)
	
	НеобработанныеЗаказыНаЗаводSTDUO.Очистить();
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 4;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	ОбработаноСтрок           = 0;
	ОбновленоПродуктов        = 0;
	НеНайденоЗаказов          = 0;
	НеНайденоПродуктов        = 0;
	ОшибокОбновленияПродуктов = 0;
	
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		Попытка
			ЧислоСтроки = Число(СтрокаФайла.CowOrderId);
			НомерЗаказаЧисло  = Истина;
		Исключение 
			НомерЗаказаЧисло  = Ложь;
		КонецПопытки;
		
		НомерЗаказа = СтрокаФайла.CowOrderId;
		Если НомерЗаказаЧисло Тогда
			КолВоЗнаковЧисло = СтрДлина(ЧислоСтроки);
			Для нПрефикса = 0 По (9 - КолВоЗнаковЧисло) Цикл
				НомерЗаказа = "0" + НомерЗаказа;
			КонецЦикла;
		КонецЕсли;
		
		ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(НомерЗаказа);
		Если ЗаказНаЗавод.Пустая() Тогда
			НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводSTDUO.Добавить();
			НоваяСтрокаНеобработанных.НомерПродукта = СтрокаФайла.ChNo;
			НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.CowOrderId;
			НоваяСтрокаНеобработанных.Комментарий   = "Не найден заказ на завод";
			НеНайденоЗаказов = НеНайденоЗаказов + 1;
			Продолжить;
		КонецЕсли;
		
		Продукт = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(ЗаказНаЗавод);
		Если Продукт.Пустая() Тогда
			НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводSTDUO.Добавить();
			НоваяСтрокаНеобработанных.НомерПродукта = СтрокаФайла.ChNo;
			НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.CowOrderId;
			НоваяСтрокаНеобработанных.Комментарий   = "Не найден продукт";
			НеНайденоПродуктов = НеНайденоПродуктов + 1;
			Продолжить;
		КонецЕсли;
		
		ПродуктОбъект = Продукт.ПолучитьОбъект();
		Если СтрокаФайла.StdCode = "UO" Тогда
			ПродуктОбъект.ТипСпецификации = Перечисления.Scan_ТипыСпецификации.UO;
		ИначеЕсли СтрокаФайла.StdCode = "UUO" Тогда
			ПродуктОбъект.ТипСпецификации = Перечисления.Scan_ТипыСпецификации.UUO;
		Иначе
			//rarus agar 05.04.2021 17394 ++
			//ПродуктОбъект.ТипСпецификации = СтрокаФайла.StdCode;
			ПродуктОбъект.ТипСпецификации         = Перечисления.Scan_ТипыСпецификации.Std;
			ПродуктОбъект.СтандартнаяСпецификация = Документы.Scan_СпецификацияСтандартнойМодели.НайтиПоРеквизиту("НомерСпецификации", СокрЛП(СтрокаФайла.StdCode));
			//rarus agar 05.04.2021 17394 --
		КонецЕсли;
		
		Попытка
			ПродуктОбъект.Записать();
			ОбновленоПродуктов = ОбновленоПродуктов + 1;
		Исключение
			НоваяСтрокаНеобработанных = НеобработанныеЗаказыНаЗаводSTDUO.Добавить();
			НоваяСтрокаНеобработанных.НомерПродукта = СтрокаФайла.ChNo;
			НоваяСтрокаНеобработанных.НомерЗаказа   = СтрокаФайла.CowOrderId;
			НоваяСтрокаНеобработанных.Комментарий   = "Ошибка записи продукта";
			
			ОшибокОбновленияПродуктов = ОшибокОбновленияПродуктов + 1;
		КонецПопытки;
	КонецЦикла;
	
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading end'")+" "+ТекущаяДата());
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Обработано строк: %1
	                                      |Обновлено продуктов: %2
										  |Ошибок обновления продуктов: %3
										  |Не найдено заказов: %4
										  |Не найдено продуктов: %5';
	                                |en = 'Rows processed: %1
	                                      |Products updated : %2
										  |Products update errors: %3
										  |Orders not found: %4
										  |Products not found: %5'"), 
	                                ОбработаноСтрок, ОбновленоПродуктов, ОшибокОбновленияПродуктов, НеНайденоЗаказов, НеНайденоПродуктов);
	Сообщить(ТекстСообщения);
	
КонецПроцедуры


#КонецОбласти

#Область ЗагрузкаЗаявокНаСОПИзSowa
//rarus vikhle 24.09.2020 mt 16344 +++ 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСоответствиеПолейФайлаСоглашения();
	ЗаполнитьСоответствиеПолейФайлаПривязокШасси();
	ЗаполнитьПоляДляЗаполненияРеквизитовПользователейДилеров();	// rarus tenkam 25.12.2020 mantis 16906 +
	Scan_СборСтатистики.Scan_ПриОткрытииОбработки(РеквизитФормыВЗначение("Объект").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСоглашенийОПоставкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораФайла(Элемент);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДанныеПривязокШассиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораФайла(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеПолейФайлаСоглашения()
	СоответствиеПолейФайлаСоглашения.Очистить();	
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "Номер";
	нСтрока.ИмяРеквизита = "НомерЗаявкиНаСОПSOWA";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "DealerId";
	нСтрока.ИмяРеквизита = "Дилер";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "OrderSpec";
	нСтрока.ИмяРеквизита = "УникальностьСпецификации";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "Модель";
	нСтрока.ИмяРеквизита = "Модель";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "СОП";
	нСтрока.ИмяРеквизита = "НомерСОП";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "Запрос";
	нСтрока.ИмяРеквизита = "Количество";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "Цена дилера";
	нСтрока.ИмяРеквизита = "Цена";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "Комментарии дилера";
	нСтрока.ИмяРеквизита = "КомментарийДилераSOWA";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "Комментарии дистрибьютора";
	нСтрока.ИмяРеквизита = "КомментарийSRUSOWA";
	нСтрока = СоответствиеПолейФайлаСоглашения.Добавить();
	нСтрока.ИмяСтолбцаФайла = "Одобрено";
	нСтрока.ИмяРеквизита = "Дата установки статуса";
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСоответствиеПолейФайлаПривязокШасси()
	СоответствиеПолейФайлаПривязокШасси.Очистить();	
	нСтрока = СоответствиеПолейФайлаПривязокШасси.Добавить();
	нСтрока.ИмяСтолбцаФайла = "SopName";
	//нСтрока.ИмяРеквизита = "НомерЗаявкиНаСОПSOWA";	// rarus tenkam 02.12.2020 mantis 16344 +-
	нСтрока.ИмяРеквизита = "НомерСОП";	// rarus tenkam 02.12.2020 mantis 16344 +-
	нСтрока = СоответствиеПолейФайлаПривязокШасси.Добавить();
	нСтрока.ИмяСтолбцаФайла = "ChNO";
	//нСтрока.ИмяРеквизита = "VIN";	// rarus tenkam 02.12.2020 mantis 16344 +-
	нСтрока.ИмяРеквизита = "НомерИзделия";	// rarus tenkam 02.12.2020 mantis 16344 +-
	нСтрока = СоответствиеПолейФайлаПривязокШасси.Добавить();
	нСтрока.ИмяСтолбцаФайла = "ChNotes";
	нСтрока.ИмяРеквизита = "Комментарий";	
	
КонецПроцедуры

#Область ПривязкиШасси

&НаКлиенте
Процедура ПрочитатьДанныеПривязокШасси(Команда)
	
	Если ПустаяСтрока(ДанныеПривязокШасси) Тогда
		ВывестиСообщениеПол("Необходимо указать файл для загрузки!",ЭтотОбъект,"ДанныеПривязокШасси");
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяСтолбцаФайла","");
	НезаполненныеСтроки = СоответствиеПолейФайлаПривязокШасси.НайтиСтроки(СтруктураОтбора);
	Если НЕ НезаполненныеСтроки.Количество() = 0 Тогда
		ВывестиСообщениеПол("Имеются незаполненные поля в таблице cоответствия полей файла данных шасси",ЭтотОбъект,"СоответствиеПолейФайлаПривязокШасси");	
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+ " " + ТекущаяДата());
	ПодключитьОбработчикОжидания("ОбработатьОжиданиеШасси",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеШасси()
	
	ВыполнитьЗагрузкуФайлаПривязокШасси();	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаПривязокШасси()
		
	ТекПутьКФайлу = СокрЛП(ДанныеПривязокШасси);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаПривязокШассиФрагмент(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаПривязокШассиЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли	

	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаПривязокШассиЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаПривязокШассиФрагмент(ПараметрыЗагрузки);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаПривязокШассиФрагмент(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлПривязкиШасси(ПараметрыЗагрузки);
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьФайлПривязкиШасси(ПараметрыЗагрузки)
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТаблицаДанных = Новый ТабличныйДокумент;
	Попытка
		ТаблицаДанных.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'") + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если ТаблицаДанных.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТаблицаДанных.Области[0].Имя;
		ОбластьДанных    = ТаблицаДанных.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ОбластьДанных.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = ОбластьДанных.ШиринаТаблицы;
	
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	СоответствиеПолейБезПробелов = РеквизитФормыВЗначение("СоответствиеПолейФайлаПривязокШасси").Скопировать();
	Для Каждого СтрокаСоответствия Из СоответствиеПолейБезПробелов Цикл
		СтрокаСоответствия.ИмяСтолбцаФайла = НРег(СтрЗаменить(СтрокаСоответствия.ИмяСтолбцаФайла," ","")); 
		СтрокаСоответствия.ИмяРеквизита = Нрег(СтрЗаменить(СтрокаСоответствия.ИмяРеквизита," ",""));
	КонецЦикла;	
	
	УдаляемыеКолонки = Новый Массив;
	Для Каждого КолонкаДанныхФайла Из ДанныеФайла.Колонки Цикл
		КолонкаДанныхФайла.Имя = НРег(КолонкаДанныхФайла.Имя); 
		СтрокаСоответствия = СоответствиеПолейБезПробелов.Найти(КолонкаДанныхФайла.Имя,"ИмяСтолбцаФайла");
		Если СтрокаСоответствия = Неопределено Тогда
			УдаляемыеКолонки.Добавить(КолонкаДанныхФайла);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого УдаляемаяКолонка Из УдаляемыеКолонки Цикл
		ДанныеФайла.Колонки.Удалить(УдаляемаяКолонка);
	КонецЦикла;
		
	Для Каждого СтрокаСоответствия Из СоответствиеПолейБезПробелов Цикл
		КолонкаФайла = ДанныеФайла.Колонки.Найти(СтрокаСоответствия.ИмяСтолбцаФайла);
		Если НЕ КолонкаФайла = Неопределено Тогда
			КолонкаФайла.Имя = СтрокаСоответствия.ИмяРеквизита; 
		Иначе	
			КвалификаторыСтроки = Новый КвалификаторыСтроки(20);
	    	ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
			ДанныеФайла.Колонки.Добавить(СтрокаСоответствия.ИмяРеквизита,ОписаниеСтроки);
			ВывестиСообщениеПол("В файле отсутствует колонка %1 (реквизит %2)",,,,,
								СтрокаСоответствия.ИмяСтолбцаФайла,
								СтрокаСоответствия.ИмяРеквизита);
		КонецЕсли;	
	КонецЦикла;	
	       	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               //|	ДанныеФайла.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,	// rarus tenkam 02.12.2020 mantis 16344 +-
	               //|	ДанныеФайла.VIN КАК VIN,	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |	ДанныеФайла.НомерСОП КАК НомерСОП,	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |	ДанныеФайла.НомерИзделия КАК НомерИзделия,	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |	ДанныеФайла.Комментарий КАК Комментарий
	               |ПОМЕСТИТЬ ДанныеФайла
	               |ИЗ
	               |	&ДанныеФайла КАК ДанныеФайла
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               //|	ДанныеФайла.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,	// rarus tenkam 02.12.2020 mantis 16344 +-
	               //|	ДанныеФайла.VIN КАК VIN,	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |	ДанныеФайла.НомерСОП КАК НомерСОП,	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |	ДанныеФайла.НомерИзделия КАК НомерИзделия,	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |	ДанныеФайла.Комментарий КАК Комментарий,
	               |	ЕСТЬNULL(Scan_СоглашенияОПоставке.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)) КАК СоглашениеОПоставке,
				   |	ЕСТЬNULL(Scan_Изделия.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)) КАК ПродуктOFMS,
				   |	ВЫБОР
				   |		КОГДА Scan_СоглашенияОПоставке.Ссылка ЕСТЬ NULL
				   |			ТОГДА """"
				   |		ИНАЧЕ Scan_СоглашенияОПоставке.НомерЗаявкиНаСОПSOWA
				   |	КОНЕЦ КАК НомерЗаявкиНаСОПSOWA
				   |ИЗ
				   |	ДанныеФайла КАК ДанныеФайла
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
				   |		ПО (ВЫБОР
				   //|				КОГДА НЕ ДанныеФайла.НомерЗаявкиНаСОПSOWA = """"	// rarus tenkam 02.12.2020 mantis 16344 +-
	               //|					ТОГДА ДанныеФайла.НомерЗаявкиНаСОПSOWA = Scan_СоглашенияОПоставке.НомерЗаявкиНаСОПSOWA	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |				КОГДА НЕ ДанныеФайла.НомерСОП = """"	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |					ТОГДА ДанныеФайла.НомерСОП = Scan_СоглашенияОПоставке.Договор.НомерДоговора	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_Изделия КАК Scan_Изделия
	               |		ПО (ВЫБОР
	               //|				КОГДА НЕ ДанныеФайла.VIN = """"	// rarus tenkam 02.12.2020 mantis 16344 +-
	               //|					ТОГДА ДанныеФайла.VIN = Scan_Изделия.VIN	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |				КОГДА НЕ ДанныеФайла.НомерИзделия = """"	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |					ТОГДА ДанныеФайла.НомерИзделия = Scan_Изделия.НомерИзделия	// rarus tenkam 02.12.2020 mantis 16344 +-
	               |			КОНЕЦ)";
	Запрос.УстановитьПараметр("ДанныеФайла",ДанныеФайла);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаПривязокШасси.Загрузить(РезультатЗапроса);
	ВсегоСтрокФайлаПривязок = ТаблицаПривязокШасси.Количество();
	ВывестиСообщениеПол("Данные файла загружены" + " " + ТекущаяДата());
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьДанныеПривязокШасси(Команда)
	Если ТаблицаПривязокШасси.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать файл данных шасси");
	//ИначеЕсли ТаблицаСоглашений.Количество() = 0 Тогда 	
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПривязкаШасси",ЭтотОбъект);
	//	ПоказатьВопрос(ОписаниеОповещения,
	//					"Для заполнения цен у продуктов в соглашениях необходимо прочитать файл соглашений с ценами.
	//					|Файл соглашений не прочитан, у продуктов не будут заполнены цены, продолжить?",РежимДиалогаВопрос.ДаНет);
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиПривязокШасси",0.1,Истина);	
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиПривязокШасси()
	
	ВывестиСообщениеПол("Начата запись данных  шасси" + " " + ТекущаяДата());
	ЗаписатьДанныеПривязокШассиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПривязкаШасси(Результат,ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиПривязокШасси",0.1,Истина);	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьДанныеПривязокШассиНаСервере()
	
	// tenkam +++
	
	//ЗаписаноСоглашений = 0;
	//ОшибокПриЗаписиСоглашений = 0;
	//ЗаписаноПродуктов = 0;
	//ОшибокПриЗаписиПродуктов = 0;
	//
	//ОшибкиЗагрузки.Очистить();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ТаблицаПривязокШасси.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	//               //|	ТаблицаПривязокШасси.VIN КАК VIN,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.НомерСОП КАК НомерСОП,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.НомерИзделия КАК НомерИзделия,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.Комментарий КАК Комментарий,
	//               |	ТаблицаПривязокШасси.СоглашениеОПоставке КАК СоглашениеОПоставке,
	//               |	ТаблицаПривязокШасси.ПродуктOFMS КАК ПродуктOFMS
	//               |ПОМЕСТИТЬ ТаблицаПривязокШасси
	//               |ИЗ
	//               |	&ТаблицаПривязокШасси КАК ТаблицаПривязокШасси
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ТаблицаСоглашений.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	//               |	ТаблицаСоглашений.Цена КАК Цена
	//               |ПОМЕСТИТЬ ТаблицаСоглашений
	//               |ИЗ
	//               |	&ТаблицаСоглашений КАК ТаблицаСоглашений
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ТаблицаПривязокШасси.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	//               //|	ТаблицаПривязокШасси.VIN КАК VIN,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.НомерСОП КАК НомерСОП,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.НомерИзделия КАК НомерИзделия,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.Комментарий КАК Комментарий,
	//               |	ТаблицаПривязокШасси.СоглашениеОПоставке КАК СоглашениеОПоставке,
	//               |	ТаблицаПривязокШасси.ПродуктOFMS КАК ПродуктOFMS,
	//               |	МАКСИМУМ(ЕСТЬNULL(ТаблицаСоглашений.Цена, 0)) КАК Цена
	//               |ИЗ
	//               |	ТаблицаПривязокШасси КАК ТаблицаПривязокШасси
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоглашений КАК ТаблицаСоглашений
	//               |		ПО ТаблицаПривязокШасси.НомерЗаявкиНаСОПSOWA = ТаблицаСоглашений.НомерЗаявкиНаСОПSOWA
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ТаблицаПривязокШасси.НомерЗаявкиНаСОПSOWA,
	//               //|	ТаблицаПривязокШасси.VIN,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.НомерСОП,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.НомерИзделия,	// rarus tenkam 02.12.2020 mantis 16344 +-
	//               |	ТаблицаПривязокШасси.Комментарий,
	//               |	ТаблицаПривязокШасси.СоглашениеОПоставке,
	//               |	ТаблицаПривязокШасси.ПродуктOFMS
	//               |ИТОГИ
	//               |	МАКСИМУМ(СоглашениеОПоставке)
	//               |ПО
	//               |	НомерЗаявкиНаСОПSOWA";	               
	//Запрос.УстановитьПараметр("ТаблицаПривязокШасси",ТаблицаПривязокШасси.Выгрузить());
	//Запрос.УстановитьПараметр("ТаблицаСоглашений",ТаблицаСоглашений.Выгрузить());
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ПроцентСтавкиНДС = Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС.Ставка;
	//Пока Выборка.Следующий() Цикл
	//	Если НЕ ЗначениеЗаполнено(Выборка.СоглашениеОПоставке) Тогда
	//		Если ЗначениеЗаполнено(Выборка.НомерЗаявкиНаСОПSOWA) Тогда	// rarus tenkam 02.12.2020 mantis 16344 +-
	//			нСтрока = ОшибкиЗагрузки.Добавить();
	//			нСтрока.НомерЗаявкиНаСОПSOWA = Выборка.НомерЗаявкиНаСОПSOWA;
	//			нСтрока.ОписаниеОшибки = "При записи привязок шасси не удалось найти заявку на СОП.";	// rarus tenkam 02.12.2020 mantis 16344 +-
	//			ОшибокПриЗаписиСоглашений = ОшибокПриЗаписиСоглашений + 1;
	//			Продолжить;
	//		Иначе	// rarus tenkam 02.12.2020 mantis 16344 +++
	//			нСтрока = ОшибкиЗагрузки.Добавить();
	//			нСтрока.ОписаниеОшибки = "Не удалось найти заявку на СОП, т.к. не заполнен № заявки на СОП SOWA.";	// rarus tenkam 02.12.2020 mantis 16344 +-
	//			ОшибокПриЗаписиСоглашений = ОшибокПриЗаписиСоглашений + 1;					
	//		КонецЕсли;	// rarus tenkam 02.12.2020 mantis 16344 ---
	//	Иначе
	//		НужноЗаписатьСоглашение = Ложь;
	//		СоглашениеОбъект = Выборка.СоглашениеОПоставке.ПолучитьОбъект();
	//		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
	//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПродуктOFMS) Тогда
	//				Если НЕ СоглашениеОбъект.СписокПродуктов.Найти(ВыборкаДетальныеЗаписи.ПродуктOFMS,"Продукт") = Неопределено Тогда
	//					// продукт уже записан в заявке на СОП
	//					Продолжить;
	//				КонецЕсли;	
	//				нСтрокаТЧ = СоглашениеОбъект.СписокПродуктов.Добавить();
	//				нСтрокаТЧ.Продукт = ВыборкаДетальныеЗаписи.ПродуктOFMS;
	//				нСтрокаТЧ.Количество = 1;
	//				нСтрокаТЧ.ЦенаСНДС = ВыборкаДетальныеЗаписи.Цена;
	//				нСтрокаТЧ.ЦенаБезНДС = 100 * нСтрокаТЧ.ЦенаСНДС/ (100 + ПроцентСтавкиНДС);
	//				НужноЗаписатьСоглашение = Истина;
	//				
	//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Комментарий) Тогда
	//					ОбъектИзделие = нСтрокаТЧ.Продукт.ПолучитьОбъект();
	//					ОбъектИзделие.Комментарий = ОбъектИзделие.Комментарий + ";" + ВыборкаДетальныеЗаписи.Комментарий;
	//					Попытка
	//						ОбъектИзделие.Записать();
	//						ЗаписаноПродуктов = ЗаписаноПродуктов + 1;
	//					Исключение
	//						ВывестиСообщениеПол("Не удалось записать продукт %1",,,,,ВыборкаДетальныеЗаписи.Продукт);
	//						ПараметрыОтбора = Новый Структура("НомерЗаявкиНаСОПSOWA",,Выборка.НомерЗаявкиНаСОПSOWA);
	//						СтрокаСоглашения = ОшибкиЗагрузки.НайтиСтроки(ПараметрыОтбора);
	//						Если СтрокаСоглашения.Количество() = 0 Тогда
	//							нСтрока = ОшибкиЗагрузки.Добавить();
	//							нСтрока.СоглашениеОПоставке = СоглашениеОбъект.Ссылка;
	//							нСтрока.НомерЗаявкиНаСОПSOWA = Выборка.НомерЗаявкиНаСОПSOWA;
	//							нСтрока.Продукт = ВыборкаДетальныеЗаписи.Продукт; 
	//							нСтрока.ОписаниеОшибки = "При записи привязок шасси не удалось записать комментарий в карточку продукта. " + ОписаниеОшибки();	// rarus tenkam 02.12.2020 mantis 16344 +-
	//						Иначе
	//							СтрокаСоглашения[0].Продукт = ВыборкаДетальныеЗаписи.Продукт; 
	//							СтрокаСоглашения[0].ОписаниеОшибки = СтрокаСоглашения[0].ОписаниеОшибки + " Не удалось записать комментарий в карточку продукта. " + ОписаниеОшибки();	// rarus tenkam 02.12.2020 mantis 16344 +-
	//						КонецЕсли;
	//						ОшибокПриЗаписиПродуктов = ОшибокПриЗаписиПродуктов + 1;
	//					КонецПопытки;	
	//				КонецЕсли;
	//			Иначе
	//				ОшибокПриЗаписиПродуктов = ОшибокПриЗаписиПродуктов + 1;
	//			КонецЕсли;
	//		КонецЦикла;
	//		Если НужноЗаписатьСоглашение Тогда
	//			Попытка
	//				СоглашениеОбъект.Записать();
	//				ЗаписаноСоглашений = ЗаписаноСоглашений + 1;
	//			Исключение
	//				нСтрока = ОшибкиЗагрузки.Добавить();
	//				нСтрока.СоглашениеОПоставке = СоглашениеОбъект.Ссылка;
	//				нСтрока.НомерЗаявкиНаСОПSOWA = Выборка.НомерЗаявкиНаСОПSOWA;
	//				нСтрока.ОписаниеОшибки = "При записи привязок шасси не удалось записать заявку на СОП. " + ОписаниеОшибки();	// rarus tenkam 02.12.2020 mantis 16344 +-
	//				ОшибокПриЗаписиСоглашений = ОшибокПриЗаписиСоглашений + 1;
	//			КонецПопытки;	
	//		КонецЕсли;	
	//	КонецЕсли;
	//КонецЦикла;	
	//Элементы.ГруппаСтраницыЗагрузкаЗаявок.ТекущаяСтраница = Элементы.СтраницаОшибкиЗагрузки;
	//ВывестиСообщениеПол("Запись данных привязок шасси завершена" + " " + ТекущаяДата());
	//ВывестиСообщениеПол("Записано соглашений: %1
	//					|Ошибок при записи соглашений : %2
	//					|Записано продуктов : %3
	//					|Ошибок при записи продуктов : %4",,,,,
	//					ЗаписаноСоглашений,ОшибокПриЗаписиСоглашений,ЗаписаноПродуктов,ОшибокПриЗаписиПродуктов);
	
	   	
	ЗаписаноПродуктов = 0;
	ОшибокПриЗаписиПродуктов = 0;
	
	ОшибкиЗагрузки.Очистить();
	
	Для Каждого ТекСтрока Из ТаблицаПривязокШасси Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПродуктOFMS) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Комментарий) Тогда
				ОбъектИзделие = ТекСтрока.ПродуктOFMS.ПолучитьОбъект();
				Если СокрЛП(ОбъектИзделие.Комментарий) <> "" Тогда
					ОбъектИзделие.Комментарий = ОбъектИзделие.Комментарий + ";" + ТекСтрока.Комментарий;
				Иначе
					ОбъектИзделие.Комментарий = ТекСтрока.Комментарий;
				КонецЕсли;
				Попытка
					ОбъектИзделие.Записать();
					ЗаписаноПродуктов = ЗаписаноПродуктов + 1;
				Исключение
					ВывестиСообщениеПол("Не удалось записать продукт %1",,,,,ТекСтрока.ПродуктOFMS);
					нСтрока = ОшибкиЗагрузки.Добавить();
					нСтрока.СоглашениеОПоставке = ТекСтрока.СоглашениеОПоставке;
					нСтрока.НомерЗаявкиНаСОПSOWA = ТекСтрока.НомерЗаявкиНаСОПSOWA;
					нСтрока.Продукт = ТекСтрока.ПродуктOFMS; 
					нСтрока.ОписаниеОшибки = "Не удалось записать комментарий в карточку продукта. " + ОписаниеОшибки();	// rarus tenkam 02.12.2020 mantis 16344 +-
					
					ОшибокПриЗаписиПродуктов = ОшибокПриЗаписиПродуктов + 1;
				КонецПопытки;	
			Иначе
				нСтрока = ОшибкиЗагрузки.Добавить();
				нСтрока.НомерЗаявкиНаСОПSOWA = ТекСтрока.НомерЗаявкиНаСОПSOWA;
				нСтрока.Продукт = ТекСтрока.ПродуктOFMS;
				нСтрока.СоглашениеОПоставке = ТекСтрока.СоглашениеОПоставке;
				нСтрока.ОписаниеОшибки = "Не заполнен комментарий.";
				ОшибокПриЗаписиПродуктов = ОшибокПриЗаписиПродуктов + 1;
				Продолжить;	
			КонецЕсли;  
		Иначе
			нСтрока = ОшибкиЗагрузки.Добавить();
			нСтрока.НомерЗаявкиНаСОПSOWA = ТекСтрока.НомерЗаявкиНаСОПSOWA;
			нСтрока.Продукт = ТекСтрока.ПродуктOFMS;
			нСтрока.СоглашениеОПоставке = ТекСтрока.СоглашениеОПоставке;
			нСтрока.ОписаниеОшибки = "Не найден продукт " + ТекСтрока.НомерИзделия;
			ОшибокПриЗаписиПродуктов = ОшибокПриЗаписиПродуктов + 1;
			Продолжить;	
		КонецЕсли;
	КонецЦикла;
	Элементы.ГруппаСтраницыЗагрузкаЗаявок.ТекущаяСтраница = Элементы.СтраницаОшибкиЗагрузки;
	ВывестиСообщениеПол("Запись данных шасси завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Записано продуктов : %1
						|Ошибок при записи продуктов : %2",,,,,
						ЗаписаноПродуктов, ОшибокПриЗаписиПродуктов);
	// tenkam ---
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаПривязокШассиНомерЗаявкиНаСОПSOWAПриИзменении(Элемент)
	
	ТекущееЗначение = Элементы.ТаблицаПривязокШасси.ТекущиеДанные.НомерЗаявкиНаСОПSOWA;
	//Элементы.ТаблицаПривязокШасси.ТекущиеДанные.МодельOFMS = ОбновитьДанныеOFMS("Scan_СоглашенияОПоставке",ТекущееЗначение);	// rarus tenkam 02.12.2020 mantis 16344 +-
	Элементы.ТаблицаПривязокШасси.ТекущиеДанные.СоглашениеОПоставке = ОбновитьДанныеOFMS("Scan_СоглашенияОПоставке",ТекущееЗначение);	// rarus tenkam 02.12.2020 mantis 16344 +-
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПривязокШассиVINПриИзменении(Элемент)
	
	ТекущееЗначение = Элементы.ТаблицаПривязокШасси.ТекущиеДанные.VIN;
	Элементы.ТаблицаПривязокШасси.ТекущиеДанные.ПродуктOFMS = ОбновитьДанныеOFMS("Scan_Изделия",ТекущееЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПривязокШассиНомерИзделияПриИзменении(Элемент)	// rarus tenkam 02.12.2020 mantis 16344 +
	
	ТекущееЗначение = Элементы.ТаблицаПривязокШасси.ТекущиеДанные.НомерИзделия;
	Элементы.ТаблицаПривязокШасси.ТекущиеДанные.ПродуктOFMS = ОбновитьДанныеOFMS("Scan_Изделия",ТекущееЗначение);
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПривязокШассиПриИзменении(Элемент)
	
	ВсегоСтрокФайлаПривязок = ТаблицаПривязокШасси.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеПолейФайлаПривязокШассиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		ИмяСтолбцаФайла = Элементы.СоответствиеПолейФайлаПривязокШасси.ТекущиеДанные.ИмяСтолбцаФайла;
		Если НЕ ПустаяСтрока(ИмяСтолбцаФайла) Тогда
			ПараметрыОтбора = Новый Структура("ИмяСтолбцаФайла",ИмяСтолбцаФайла);
			Если СоответствиеПолейФайлаСоглашения.НайтиСтроки(ПараметрыОтбора).Количество() > 1 Тогда
				Отказ = Истина;
				ВывестиСообщениеПол("Имя столбца ""%1"" уже указано в таблице",,,,,ИмяСтолбцаФайла);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеПолейФайлаПривязокШассиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИмяСтолбцаФайла = Элементы.СоответствиеПолейФайлаПривязокШасси.ТекущиеДанные.ИмяСтолбцаФайла;
	Если НЕ ПустаяСтрока(ИмяСтолбцаФайла) Тогда
		ПараметрыОтбора = Новый Структура("ИмяСтолбцаФайла",ИмяСтолбцаФайла);
		Если СоответствиеПолейФайлаСоглашения.НайтиСтроки(ПараметрыОтбора).Количество() > 1 Тогда
			ВывестиСообщениеПол("Имя столбца ""%1"" уже указано в таблице",,,,,ИмяСтолбцаФайла);
			Элементы.СоответствиеПолейФайлаПривязокШасси.ТекущиеДанные.ИмяСтолбцаФайла = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСоответствиеПривязокШасси(Команда)
	
	ЗаполнитьСоответствиеПолейФайлаПривязокШасси();
	
КонецПроцедуры


#КонецОбласти


#Область ЗагрузкаСоглашений

&НаКлиенте
Процедура ПрочитатьДанныеФайлаСоглашений(Команда)
	
	Если ПустаяСтрока(ДанныеСоглашенийОПоставке) Тогда
		ВывестиСообщениеПол("Необходимо указать файл для загрузки!",ЭтотОбъект,"ДанныеСоглашенийОПоставке");
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяСтолбцаФайла","");
	НезаполненныеСтроки = СоответствиеПолейФайлаСоглашения.НайтиСтроки(СтруктураОтбора);
	Если НЕ НезаполненныеСтроки.Количество() = 0 Тогда
		ВывестиСообщениеПол("Имеются незаполненные поля в таблице cоответствия полей файла соглашения",ЭтотОбъект,"СоответствиеПолейФайлаСоглашения");	
		Возврат;
	КонецЕсли;	
	
	ОчиститьСообщения();
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'") + " " + ТекущаяДата());
	ПодключитьОбработчикОжидания("ОбработатьОжиданиеСоглашение",0.1,Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеСоглашение()
	ВыполнитьЗагрузкуФайлаСоглашений();	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьДанныеФайлаСоглашений(Команда)
	
	Если СтатусЗагружаемыхСоглашений.Пустая() Тогда
		ВывестиСообщениеПол("Необходимо указать статус загружаемого файла",ЭтотОбъект,"СтатусЗагружаемыхСоглашений");
	ИначеЕсли ТаблицаСоглашений.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать данные файл соглашений");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиСоглашений",0.1,Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиСоглашений()
	
	ВывестиСообщениеПол("Начата запись данных соглашений" + " " + ТекущаяДата());
	ЗаписатьДанныеФайлаСоглашенийНаСервере();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьДанныеФайлаСоглашенийНаСервере()
	
	ЗаписаноСоглашений = 0;
	ОшибокПриЗаписиСоглашений = 0;
	ВсеОк = Истина;	// tenkam +-
	ПроцентСтавкиНДС = Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС.Ставка;	// tenkam +-
	
	ОшибкиЗагрузки.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоглашений Цикл
		Если СтрокаТаблицы.СоглашениеОПоставке.Пустая() Тогда 
			СоглашениеОбъект = Справочники.Scan_СоглашенияОПоставке.СоздатьЭлемент();
		Иначе
			СоглашениеОбъект = СтрокаТаблицы.СоглашениеОПоставке.ПолучитьОбъект();
		КонецЕсли;
			
		СоглашениеОбъект.ТипСоглашенияОПоставке = Перечисления.Scan_ТипыСоглашенийОПоставке.ЗаявкаНаСОП;
		СоглашениеОбъект.Статус = СтатусЗагружаемыхСоглашений;
		СоглашениеОбъект.SORDER = ?(СоглашениеОбъект.SORDER.Пустая(),Справочники.Scan_ОпцииПродуктов.Нет_SOrder,СоглашениеОбъект.SORDER);
		СоглашениеОбъект.FFU = ?(СоглашениеОбъект.FFU.Пустая(),Справочники.Scan_ОпцииПродуктов.Нет_FFU,СоглашениеОбъект.FFU);
		СоглашениеОбъект.НомерЗаявкиНаСОПSOWA = СтрокаТаблицы.НомерЗаявкиНаСОПSOWA;
		СоглашениеОбъект.Дилер = СтрокаТаблицы.ДилерOFMS;
		СоглашениеОбъект.УникальностьСпецификации = СтрокаТаблицы.УникальностьСпецификации;
		СоглашениеОбъект.Модель = СтрокаТаблицы.МодельOFMS;
		
		УникальностьСпецификации = нРег(СокрЛП(СтрокаТаблицы.УникальностьСпецификации)); 
		Если УникальностьСпецификации = "std" 
			ИЛИ  УникальностьСпецификации = "uo" 
			ИЛИ УникальностьСпецификации = "uuo" Тогда
			ЗначениеТипаСпецификации = Перечисления.Scan_ТипыСпецификации[УникальностьСпецификации];
		Иначе
			ЗначениеТипаСпецификации = Перечисления.Scan_ТипыСпецификации.Std;
		КонецЕсли;	
		СоглашениеОбъект.УникальностьСпецификации = ЗначениеТипаСпецификации;
		
		СоглашениеОбъект.СтандартнаяСпецификация =  СтрокаТаблицы.СтандартнаяСпецификация; 
		СоглашениеОбъект.НомерСОП = СтрокаТаблицы.НомерСОП;
		
		// tenkam +++
		СоглашениеОбъект.СтавкаНДС = ПредопределенноеЗначение("Справочник.Scan_СтавкиНДС.ОсновнаяСтавкаНДС");
		СоглашениеОбъект.СтатусЗаявки = ПредопределенноеЗначение("Перечисление.Scan_ТипыСтатусовЗаявки.Normal");
		Если ЗначениеЗаполнено(СоглашениеОбъект.Дилер) Тогда
			ПриоритетныйСклад = Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеОбъект.Дилер,"ПриоритетныйСклад");
			СоглашениеОбъект.РегиональныйМенеджер = Документы.Scan_ЗакреплениеМенеджеровЗаДилерами.ПолучитьЗакрепленногоМенеджера(СоглашениеОбъект.Дилер);
		Иначе
			ПриоритетныйСклад = ПредопределенноеЗначение("Справочник.Scan_Склады.ПустаяСсылка");
		КонецЕсли;
		             		
		СоглашениеОбъект.Договор = СтрокаТаблицы.ДоговорOFMS;	
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорOFMS) Тогда
			//rarus bonmak 09.08.2021 16834 ++
			//СоглашениеОбъект.СписокПродуктов.Очистить();
			//Для Каждого ТекСтрока Из СтрокаТаблицы.ДоговорOFMS.СпецификацияКСОП Цикл
			//	нСтрокаТЧ = СоглашениеОбъект.СписокПродуктов.Добавить();
			//	нСтрокаТЧ.Продукт = ТекСтрока.СОП_Изделие;
			//	нСтрокаТЧ.Количество = 1;
			//	нСтрокаТЧ.ЦенаСНДС = СтрокаТаблицы.Цена;
			//	нСтрокаТЧ.ЦенаБезНДС = 100 * нСтрокаТЧ.ЦенаСНДС/ (100 + ПроцентСтавкиНДС);
			//	нСтрокаТЧ.СкладОтгрузки = ПриоритетныйСклад;
			//КонецЦикла;
			//rarus bonmak 09.08.2021 16834 --
		КонецЕсли;
		
		// 17422 +++
		Если СтатусЗагружаемыхСоглашений = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.Одобрено") И
			ЗначениеЗаполнено(СтрокаТаблицы.МодельOFMS) Тогда
			
			СоглашениеОбъект.ТребуетсяРазмещениеЗаказа = Истина;
			СоглашениеОбъект.СписокПродуктов.Очистить();
			НайденныйДрафт = Справочники.Scan_ДрафтыПродуктов.НайтиПоРеквизиту("Модель",СтрокаТаблицы.МодельOFMS);
			Если НЕ ЗначениеЗаполнено(НайденныйДрафт) Тогда
				// Создадим драфт
				НовыйДрафт = Справочники.Scan_ДрафтыПродуктов.СоздатьЭлемент();
				НовыйДрафт.Модель = СтрокаТаблицы.МодельOFMS;
				НовыйДрафт.Наименование = СокрЛП(?(ЗначениеЗаполнено(НовыйДрафт.СегментРынкаПродуктов),НовыйДрафт.СегментРынкаПродуктов.Наименование + " ","") //rarus vikhle 05.11.2020 mt 16723 
						  + ?(ЗначениеЗаполнено(НовыйДрафт.Модель.МаркаПродукта),НовыйДрафт.Модель.МаркаПродукта.Наименование + " ","") 
						  + ?(ЗначениеЗаполнено(НовыйДрафт.Модель),НовыйДрафт.Модель.Наименование,""));
				Попытка
					НовыйДрафт.Записать();    					
					НайденныйДрафт = НовыйДрафт.Ссылка;
				Исключение
					нСтрока = ОшибкиЗагрузки.Добавить();
					нСтрока.НомерЗаявкиНаСОПSOWA = СтрокаТаблицы.НомерЗаявкиНаСОПSOWA;
					нСтрока.ОписаниеОшибки = "Не удалось создать драфт.";
					ОшибокПриЗаписиСоглашений = ОшибокПриЗаписиСоглашений + 1; 	
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДрафт) Тогда
				нСтрокаТЧ = СоглашениеОбъект.СписокПродуктов.Добавить();
				нСтрокаТЧ.Продукт = НайденныйДрафт;
				нСтрокаТЧ.Количество = СтрокаТаблицы.Количество;
			КонецЕсли;
		КонецЕсли;
		// 17422 ---
		// tenkam ---
		
		СоглашениеОбъект.Количество = СтрокаТаблицы.Количество;
		СоглашениеОбъект.КомментарийДилераSOWA = СтрокаТаблицы.КомментарийДилераSOWA;
		СоглашениеОбъект.КомментарийSRUSOWA = СтрокаТаблицы.КомментарийSRUSOWA; 
		
		ДатаУстановкиСтатуса = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаПреобразованная),СтрокаТаблицы.ДатаПреобразованная,Неопределено);
		ВсеОк = Истина;	// tenkam +-	
		Попытка
			СоглашениеОбъект.Записать();
			
			НаборЗаписей = РегистрыСведений.Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектСтатуса.Установить(СоглашениеОбъект.Ссылка);
			//НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());	// tenkam +-
			НаборЗаписей.Отбор.Пользователь.Установить(ПользователиКлиентСервер.ТекущийПользователь());		// tenkam +-
			НаборЗаписей.Записать();
			
			Справочники.Scan_СоглашенияОПоставке.ЗаписьЗначенияРегистраСведения(СоглашениеОбъект.Ссылка,СтатусЗагружаемыхСоглашений,ДатаУстановкиСтатуса);	
			ЗаписаноСоглашений = ЗаписаноСоглашений + 1; 

		Исключение
			нСтрока = ОшибкиЗагрузки.Добавить();
			нСтрока.СоглашениеОПоставке = СоглашениеОбъект.Ссылка;
			нСтрока.НомерЗаявкиНаСОПSOWA = СтрокаТаблицы.НомерЗаявкиНаСОПSOWA;
			нСтрока.ОписаниеОшибки = "Не удалось записать заявку на СОП.";	// tenkam +-
			ВсеОк = Ложь;	// tenkam +-
			
			ОшибокПриЗаписиСоглашений = ОшибокПриЗаписиСоглашений + 1;
			
		КонецПопытки;
		
		// tenkam +++
		// запишем Компанию в договор
		Если ВсеОк И ЗначениеЗаполнено(СоглашениеОбъект.Договор) И ЗначениеЗаполнено(СоглашениеОбъект.Дилер) Тогда
			ДоговорОбъект = СоглашениеОбъект.Договор.ПолучитьОбъект();
			ДоговорОбъект.Компания = СоглашениеОбъект.Дилер;
			
			Попытка
				ДоговорОбъект.Записать();	
			Исключение
				нСтрока = ОшибкиЗагрузки.Добавить();
				нСтрока.СоглашениеОПоставке = СоглашениеОбъект.Ссылка;
				нСтрока.НомерЗаявкиНаСОПSOWA = СтрокаТаблицы.НомерЗаявкиНаСОПSOWA;
				нСтрока.ОписаниеОшибки = "Не удалось записать компанию в договор.";
				ОшибокПриЗаписиСоглашений = ОшибокПриЗаписиСоглашений + 1; 				
			КонецПопытки;  			
		КонецЕсли;
		
		//// Запишем приоритетный склад в запрашиваемое место передачи в продукты
		//Если ВсеОк И ЗначениеЗаполнено(ПриоритетныйСклад) Тогда
		//	Для Каждого ТекСтрока Из СоглашениеОбъект.СписокПродуктов Цикл
		//		ПродуктОбъект = ТекСтрока.Продукт.ПолучитьОбъект();
		//		ПродуктОбъект.ДополнительныеСвойства.Вставить("Источник",СоглашениеОбъект.Ссылка);
		//		ПродуктОбъект.ДополнительныеСвойства.Вставить("Статус",СоглашениеОбъект.Статус);
		//		ПродуктОбъект.ЗапрашиваемоеМестоПередачи = ПриоритетныйСклад;
		//		
		//		Попытка
		//			ПродуктОбъект.Записать();	
		//		Исключение
		//			нСтрока = ОшибкиЗагрузки.Добавить();
		//			нСтрока.СоглашениеОПоставке = СоглашениеОбъект.Ссылка;
		//			нСтрока.НомерЗаявкиНаСОПSOWA = СтрокаТаблицы.НомерЗаявкиНаСОПSOWA;
		//			нСтрока.ОписаниеОшибки = "Не удалось записать запрашиваемое место передачи в продукт.";
		//			ОшибокПриЗаписиСоглашений = ОшибокПриЗаписиСоглашений + 1; 				
		//		КонецПопытки;
		//	КонецЦикла;
		//КонецЕсли;
		// tenkam ---
	КонецЦикла;
	ВывестиСообщениеПол("Запись данных соглашений завершена"+ " " + ТекущаяДата());
	ВывестиСообщениеПол("Записано соглашений: %1
						|Ошибок при записи соглашений : %2",,,,,ЗаписаноСоглашений,ОшибокПриЗаписиСоглашений);

	Элементы.ГруппаСтраницыЗагрузкаЗаявок.ТекущаяСтраница = Элементы.СтраницаОшибкиЗагрузки;
	ОбновитьТаблицуСоглашений();
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаСоглашений()
	
			
	ТекПутьКФайлу = СокрЛП(ДанныеСоглашенийОПоставке);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаСоглашенийФрагмент(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаСоглашенийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаСоглашенийЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаСоглашенийФрагмент(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаСоглашенийФрагмент(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлСоглашений(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлСоглашений(ПараметрыЗагрузки)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТаблицаДанных = Новый ТабличныйДокумент;
	Попытка
		ТаблицаДанных.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла. Необходимо преобразовать файл в формат xlsx. Текст ошибки: '; en = 'Error'") + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если ТаблицаДанных.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТаблицаДанных.Области[0].Имя;
		ОбластьДанных    = ТаблицаДанных.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ОбластьДанных.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = ОбластьДанных.ШиринаТаблицы;
	
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
			
	СоответствиеПолейБезПробелов = РеквизитФормыВЗначение("СоответствиеПолейФайлаСоглашения").Скопировать();
	Для Каждого СтрокаСоответствия Из СоответствиеПолейБезПробелов Цикл
		СтрокаСоответствия.ИмяСтолбцаФайла = НРег(СтрЗаменить(СтрокаСоответствия.ИмяСтолбцаФайла," ","")); 
		СтрокаСоответствия.ИмяРеквизита = Нрег(СтрЗаменить(СтрокаСоответствия.ИмяРеквизита," ",""));
	КонецЦикла;	
	
	УдаляемыеКолонки = Новый Массив;
	Для Каждого КолонкаДанныхФайла Из ДанныеФайла.Колонки Цикл
		КолонкаДанныхФайла.Имя = НРег(КолонкаДанныхФайла.Имя); 
		СтрокаСоответствия = СоответствиеПолейБезПробелов.Найти(КолонкаДанныхФайла.Имя,"ИмяСтолбцаФайла");
		Если СтрокаСоответствия = Неопределено Тогда
			УдаляемыеКолонки.Добавить(КолонкаДанныхФайла);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого УдаляемаяКолонка Из УдаляемыеКолонки Цикл
		ДанныеФайла.Колонки.Удалить(УдаляемаяКолонка);
	КонецЦикла;
		
	Для Каждого СтрокаСоответствия Из СоответствиеПолейБезПробелов Цикл
		КолонкаФайла = ДанныеФайла.Колонки.Найти(СтрокаСоответствия.ИмяСтолбцаФайла);
		Если НЕ КолонкаФайла = Неопределено Тогда
			КолонкаФайла.Имя = СтрокаСоответствия.ИмяРеквизита; 
		Иначе	
			КвалификаторыСтроки = Новый КвалификаторыСтроки(20);
	    	ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
			ДанныеФайла.Колонки.Добавить(СтрокаСоответствия.ИмяРеквизита,ОписаниеСтроки);
			ВывестиСообщениеПол("В файле отсутствует колонка %1 (реквизит %2)",,,,,
								СтрокаСоответствия.ИмяСтолбцаФайла,
								СтрокаСоответствия.ИмяРеквизита);
		КонецЕсли;	
	КонецЦикла;	
		
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеФайла.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	               |	ДанныеФайла.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
	               |	ДанныеФайла.Дилер КАК Дилер,
	               |	ДанныеФайла.УникальностьСпецификации КАК УникальностьСпецификации,
	               |	ДанныеФайла.Модель КАК Модель,
	               |	ДанныеФайла.НомерСОП КАК НомерСОП,
	               |	ДанныеФайла.Количество КАК Количество,
	               |	ДанныеФайла.Цена КАК Цена,
	               |	ДанныеФайла.КомментарийДилераSOWA КАК КомментарийДилераSOWA,
	               |	ДанныеФайла.КомментарийSRUSOWA КАК КомментарийSRUSOWA
	               |ПОМЕСТИТЬ ДанныеФайла
	               |ИЗ
	               |	&ДанныеФайла КАК ДанныеФайла
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеФайла.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	               |	ДанныеФайла.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
	               |	ДанныеФайла.УникальностьСпецификации КАК УникальностьСпецификации,
	               |	ДанныеФайла.НомерСОП КАК НомерСОП,
	               |	ДанныеФайла.Количество КАК Количество,
	               |	ДанныеФайла.Цена КАК Цена,
	               |	ДанныеФайла.КомментарийДилераSOWA КАК КомментарийДилераSOWA,
	               |	ДанныеФайла.КомментарийSRUSOWA КАК КомментарийSRUSOWA,
	               |	ДанныеФайла.Модель КАК Модель,
	               |	ДанныеФайла.Дилер КАК Дилер,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_СоглашенияОПоставке.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка))) КАК СоглашениеОПоставке,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_Компании.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_Компании.ПустаяСсылка))) КАК ДилерOFMS,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_МоделиПродуктов.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_МоделиПродуктов.ПустаяСсылка))) КАК МодельOFMS,
	               |	Scan_СоглашенияОПоставке.Статус КАК Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_ДоговорыВзаиморасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка))) КАК ДоговорOFMS
	               |ПОМЕСТИТЬ ПромежуточнаяВТ
	               |ИЗ
	               |	ДанныеФайла КАК ДанныеФайла
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.НомерЗаявкиНаСОПSOWA = """"
	               |					ТОГДА ДанныеФайла.НомерЗаявкиНаСОПSOWA = Scan_СоглашенияОПоставке.НомерЗаявкиНаСОПSOWA
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_Компании КАК Scan_Компании
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.Дилер = """"
	               |					ТОГДА ДанныеФайла.Дилер = Scan_Компании.КодДилераSOWA
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_МоделиПродуктов КАК Scan_МоделиПродуктов
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.Модель = """"
	               |					ТОГДА ДанныеФайла.Модель = Scan_МоделиПродуктов.Наименование
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ДоговорыВзаиморасчетов КАК Scan_ДоговорыВзаиморасчетов
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.НомерСОП = """"
	               |					ТОГДА ДанныеФайла.НомерСОП = Scan_ДоговорыВзаиморасчетов.НомерДоговора
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеФайла.НомерЗаявкиНаСОПSOWA,
	               |	ДанныеФайла.ДатаУстановкиСтатуса,
	               |	ДанныеФайла.УникальностьСпецификации,
	               |	ДанныеФайла.НомерСОП,
	               |	ДанныеФайла.Количество,
	               |	ДанныеФайла.Цена,
	               |	ДанныеФайла.КомментарийДилераSOWA,
	               |	ДанныеФайла.КомментарийSRUSOWA,
	               |	ДанныеФайла.Модель,
	               |	ДанныеФайла.Дилер,
	               |	Scan_СоглашенияОПоставке.Статус
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПромежуточнаяВТ.УникальностьСпецификации КАК УникальностьСпецификации,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_СпецификацияСтандартнойМодели.Ссылка, ЗНАЧЕНИЕ(Документ.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка))) КАК СпецификацияСтандартнойМодели,
	               |	ПромежуточнаяВТ.НомерЗаявкиНаСОПSOWA КАК Номер
	               |ПОМЕСТИТЬ СпецификацииСтандартнойМодели
	               |ИЗ
	               |	ПромежуточнаяВТ КАК ПромежуточнаяВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Scan_СпецификацияСтандартнойМодели КАК Scan_СпецификацияСтандартнойМодели
	               |		ПО ПромежуточнаяВТ.УникальностьСпецификации = Scan_СпецификацияСтандартнойМодели.НомерСпецификации
	               |ГДЕ
	               |	НЕ ПромежуточнаяВТ.УникальностьСпецификации В ("""", ""STD"", ""UUO"", ""UO"")
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПромежуточнаяВТ.УникальностьСпецификации,
	               |	ПромежуточнаяВТ.НомерЗаявкиНаСОПSOWA
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПромежуточнаяВТ.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	               |	ПромежуточнаяВТ.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
	               |	ВЫБОР
	               |		КОГДА НЕ ПромежуточнаяВТ.УникальностьСпецификации В ("""", ""STD"", ""UO"", ""UUO"")
	               |			ТОГДА ""STD""
	               |		ИНАЧЕ ПромежуточнаяВТ.УникальностьСпецификации
	               |	КОНЕЦ КАК УникальностьСпецификации,
	               |	ПромежуточнаяВТ.НомерСОП КАК НомерСОП,
	               |	ПромежуточнаяВТ.Количество КАК Количество,
	               |	ПромежуточнаяВТ.Цена КАК Цена,
	               |	ПромежуточнаяВТ.КомментарийДилераSOWA КАК КомментарийДилераSOWA,
	               |	ПромежуточнаяВТ.КомментарийSRUSOWA КАК КомментарийSRUSOWA,
	               |	ПромежуточнаяВТ.СоглашениеОПоставке КАК СоглашениеОПоставке,
	               |	ПромежуточнаяВТ.Модель КАК Модель,
	               |	ПромежуточнаяВТ.МодельOFMS КАК МодельOFMS,
	               |	ПромежуточнаяВТ.Дилер КАК Дилер,
	               |	ПромежуточнаяВТ.ДилерOFMS КАК ДилерOFMS,
	               |	СпецификацииСтандартнойМодели.СпецификацияСтандартнойМодели КАК СпецификацияСтандартнойМодели,
	               |	ПромежуточнаяВТ.ДоговорOFMS КАК ДоговорOFMS
	               |ИЗ
	               |	ПромежуточнаяВТ КАК ПромежуточнаяВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСтандартнойМодели КАК СпецификацииСтандартнойМодели
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ПромежуточнаяВТ.НомерЗаявкиНаСОПSOWA = """"
	               |					ТОГДА ПромежуточнаяВТ.НомерЗаявкиНаСОПSOWA = СпецификацииСтандартнойМодели.Номер
	               |			КОНЕЦ)";
	Запрос.УстановитьПараметр("ДанныеФайла",ДанныеФайла);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаСоглашений.Загрузить(РезультатЗапроса);
	ВсегоСтрокФайлаСоглашений = ТаблицаСоглашений.Количество();
	Для Каждого СтрокаТаблицы Из ТаблицаСоглашений Цикл
		СтрокаТаблицы.ДатаПреобразованная = ПреобразоватьСтрокуВДату(СтрокаТаблицы.ДатаУстановкиСтатуса);
		// tenkam +++
		СообщениеОбОшибке = "";
		НайденныйДоговор = ПолучитьОбновитьДоговорИз1БД(СтрокаТаблицы.НомерСОП, СообщениеОбОшибке);
		Если ЗначениеЗаполнено(НайденныйДоговор) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорOFMS) Тогда
			СтрокаТаблицы.ДоговорOFMS = НайденныйДоговор;
		КонецЕсли;
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			ВывестиСообщениеПол("Ошибка подбора данных. " + СообщениеОбОшибке,,,,);
		КонецЕсли;
		// tenkam ---
	КонецЦикла;	
	
	ВывестиСообщениеПол("Данные файла загружены" + " " + ТекущаяДата());
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВДату(СтрокаДаты)
	
	ДатаПреобразованная = Дата(1,1,1);
	Попытка
		ДатаПреобразованная = Дата(Сред(СтрокаДаты,7,4) 
							+ Сред(СтрокаДаты,4,2) 
		  					+ Лев(СтрокаДаты,2));
	Исключение
									
	КонецПопытки;
	Возврат ДатаПреобразованная;
	
КонецФункции	

&НаКлиенте
Процедура СоответствиеПолейФайлаСоглашенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ ОтменаРедактирования Тогда
		ИмяСтолбцаФайла = Элементы.СоответствиеПолейФайлаСоглашения.ТекущиеДанные.ИмяСтолбцаФайла;
		Если НЕ ПустаяСтрока(ИмяСтолбцаФайла) Тогда
			ПараметрыОтбора = Новый Структура("ИмяСтолбцаФайла",ИмяСтолбцаФайла);
			Если СоответствиеПолейФайлаСоглашения.НайтиСтроки(ПараметрыОтбора).Количество() > 1 Тогда
				Отказ = Истина;
				ВывестиСообщениеПол("Имя столбца ""%1"" уже указано в таблице",,,,,ИмяСтолбцаФайла);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеПолейФайлаСоглашенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ИмяСтолбцаФайла = Элементы.СоответствиеПолейФайлаСоглашения.ТекущиеДанные.ИмяСтолбцаФайла;
	Если НЕ ПустаяСтрока(ИмяСтолбцаФайла) Тогда
		ПараметрыОтбора = Новый Структура("ИмяСтолбцаФайла",ИмяСтолбцаФайла);
		Если СоответствиеПолейФайлаСоглашения.НайтиСтроки(ПараметрыОтбора).Количество() > 1 Тогда
			ВывестиСообщениеПол("Имя столбца ""%1"" уже указано в таблице",,,,,ИмяСтолбцаФайла);
			Элементы.СоответствиеПолейФайлаСоглашения.ТекущиеДанные.ИмяСтолбцаФайла = "";
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСоответствиеФайлаСоглашения(Команда)
	ЗаполнитьСоответствиеПолейФайлаСоглашения();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьДанныеOFMS(СправочникЗначения,Значение)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка КАК Ссылка Из Справочник." + СправочникЗначения + " ГДЕ ";
	
	Если СправочникЗначения = "Scan_СоглашенияОПоставке" Тогда
		Запрос.Текст = Запрос.Текст + " НомерЗаявкиНаСОПSOWA = &ПараметрЗапроса";
	ИначеЕсли СправочникЗначения = "Scan_Компании" Тогда 	
		Запрос.Текст = Запрос.Текст + " КодДилераSOWA = &ПараметрЗапроса";	
	ИначеЕсли СправочникЗначения = "Scan_МоделиПродуктов" Тогда
		Запрос.Текст = Запрос.Текст + " Наименование = &ПараметрЗапроса";	
	ИначеЕсли СправочникЗначения = "Scan_Изделия" Тогда
		//Запрос.Текст = Запрос.Текст + " VIN = &ПараметрЗапроса";	// rarus tenkam 02.12.2020 mantis 16344 +-	
		Запрос.Текст = Запрос.Текст + " НомерИзделия = &ПараметрЗапроса";	// rarus tenkam 02.12.2020 mantis 16344 +-		
	КонецЕсли;
	Запрос.УстановитьПараметр("ПараметрЗапроса",Значение);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
   		Выборка.Следующий();
    	Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники[СправочникЗначения].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаСоглашенияНомерЗаявкиНаСОПSOWAПриИзменении(Элемент)
	
	ТекущееЗначение = Элементы.ТаблицаСоглашения.ТекущиеДанные.НомерЗаявкиНаСОПSOWA;
	Элементы.ТаблицаСоглашения.ТекущиеДанные.СоглашениеОПоставке = ОбновитьДанныеOFMS("Scan_СоглашенияОПоставке",ТекущееЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоглашенияDealerIdПриИзменении(Элемент)
	
	ТекущееЗначение = Элементы.ТаблицаСоглашения.ТекущиеДанные.Дилер;
	Элементы.ТаблицаСоглашения.ТекущиеДанные.ДилерOFMS = ОбновитьДанныеOFMS("Scan_Компании",ТекущееЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоглашенияМодельПриИзменении(Элемент)
	
	ТекущееЗначение = Элементы.ТаблицаСоглашения.ТекущиеДанные.Модель;
	Элементы.ТаблицаСоглашения.ТекущиеДанные.МодельOFMS = ОбновитьДанныеOFMS("Scan_МоделиПродуктов",ТекущееЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоглашенияПриИзменении(Элемент)
	
	ВсегоСтрокФайлаСоглашений = ТаблицаСоглашений.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуСоглашений()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСоглашений.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	               |	ТаблицаСоглашений.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
	               |	ТаблицаСоглашений.УникальностьСпецификации КАК УникальностьСпецификации,
	               |	ТаблицаСоглашений.НомерСОП КАК НомерСОП,
	               |	ТаблицаСоглашений.Количество КАК Количество,
	               |	ТаблицаСоглашений.КомментарийДилераSOWA КАК КомментарийДилераSOWA,
	               |	ТаблицаСоглашений.КомментарийSRUSOWA КАК КомментарийSRUSOWA,
	               |	ТаблицаСоглашений.СоглашениеОПоставке КАК СоглашениеОПоставке,
	               |	ТаблицаСоглашений.Модель КАК Модель,
	               |	ТаблицаСоглашений.МодельOFMS КАК МодельOFMS,
	               |	ТаблицаСоглашений.Дилер КАК Дилер,
	               |	ТаблицаСоглашений.ДилерOFMS КАК ДилерOFMS,
	               |	ТаблицаСоглашений.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
	               |	ТаблицаСоглашений.Цена КАК Цена,
	               |	ТаблицаСоглашений.ДатаПреобразованная КАК ДатаПреобразованная
	               |ПОМЕСТИТЬ ТаблицаСоглашений
	               |ИЗ
	               |	&ТаблицаСоглашений КАК ТаблицаСоглашений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСоглашений.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_СоглашенияОПоставке.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка))) КАК СоглашениеОПоставке
	               |ПОМЕСТИТЬ СоглашенияОПоставке
	               |ИЗ
	               |	ТаблицаСоглашений КАК ТаблицаСоглашений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
	               |		ПО ТаблицаСоглашений.НомерЗаявкиНаСОПSOWA = Scan_СоглашенияОПоставке.НомерЗаявкиНаСОПSOWA
	               |ГДЕ
	               |	ТаблицаСоглашений.СоглашениеОПоставке = ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаСоглашений.НомерЗаявкиНаСОПSOWA
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСоглашений.НомерЗаявкиНаСОПSOWA КАК НомерЗаявкиНаСОПSOWA,
	               |	ТаблицаСоглашений.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
	               |	ТаблицаСоглашений.УникальностьСпецификации КАК УникальностьСпецификации,
	               |	ТаблицаСоглашений.НомерСОП КАК НомерСОП,
	               |	ТаблицаСоглашений.Количество КАК Количество,
	               |	ТаблицаСоглашений.КомментарийДилераSOWA КАК КомментарийДилераSOWA,
	               |	ТаблицаСоглашений.КомментарийSRUSOWA КАК КомментарийSRUSOWA,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСоглашений.СоглашениеОПоставке = ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
	               |			ТОГДА СоглашенияОПоставке.СоглашениеОПоставке
	               |		ИНАЧЕ ТаблицаСоглашений.СоглашениеОПоставке
	               |	КОНЕЦ КАК СоглашениеОПоставке,
	               |	ТаблицаСоглашений.Модель КАК Модель,
	               |	ТаблицаСоглашений.МодельOFMS КАК МодельOFMS,
	               |	ТаблицаСоглашений.Дилер КАК Дилер,
	               |	ТаблицаСоглашений.ДилерOFMS КАК ДилерOFMS,
	               |	ТаблицаСоглашений.СтандартнаяСпецификация КАК СтандартнаяСпецификация,
	               |	ТаблицаСоглашений.Цена КАК Цена,
	               |	ТаблицаСоглашений.ДатаПреобразованная КАК ДатаПреобразованная
	               |ИЗ
	               |	ТаблицаСоглашений КАК ТаблицаСоглашений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СоглашенияОПоставке КАК СоглашенияОПоставке
	               |		ПО ТаблицаСоглашений.НомерЗаявкиНаСОПSOWA = СоглашенияОПоставке.НомерЗаявкиНаСОПSOWA";
	Запрос.УстановитьПараметр("ТаблицаСоглашений",ТаблицаСоглашений.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаСоглашений.Загрузить(РезультатЗапроса);
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаСоглашенияОдобреноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСоглашения.ТекущиеДанные;
	ТекущиеДанные.ДатаПреобразованная = ПреобразоватьСтрокуВДату(ТекущиеДанные.ДатаУстановкиСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоглашенияOrderSpecПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСоглашения.ТекущиеДанные;
	Если НЕ Нрег(СокрЛП(ТекущиеДанные.УникальностьСпецификации)) = "std"
		И НЕ Нрег(СокрЛП(ТекущиеДанные.УникальностьСпецификации)) = "uo"
		И НЕ Нрег(СокрЛП(ТекущиеДанные.УникальностьСпецификации)) = "uuo"
		И НЕ ПустаяСтрока(ТекущиеДанные.УникальностьСпецификации) Тогда
		ТекущиеДанные.СтандартнаяСпецификация = ПолучитьСтандартнуюСпецификацию(ТекущиеДанные.УникальностьСпецификации);
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтандартнуюСпецификацию(НомерСпецификации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	Scan_СпецификацияСтандартнойМодели.Ссылка КАК СпецификацияСтандартнойМодели
	               |ИЗ
	               |	Документ.Scan_СпецификацияСтандартнойМодели КАК Scan_СпецификацияСтандартнойМодели
	               |ГДЕ
	               |	Scan_СпецификацияСтандартнойМодели.НомерСпецификации = &НомерСпецификации";
	Запрос.УстановитьПараметр("НомерСпецификации",НомерСпецификации);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СпецификацияСтандартнойМодели;
	Иначе
		Возврат Документы.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка(); 
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьОбновитьДоговорИз1БД(НомерСОП, СообщениеОбОшибке)	// rarus tenkam 08.12.2020 mantis 16344 +-
	Если НЕ	ЗначениеЗаполнено(НомерСОП) Тогда
		Возврат ПредопределенноеЗначение("Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка");
	КонецЕсли;
	
	// Сначала найдем в базе
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_ДоговорыВзаиморасчетов.Ссылка КАК Ссылка,
		|	Scan_ДоговорыВзаиморасчетов.IDExternalSystem КАК IDExternalSystem
		|ИЗ
		|	Справочник.Scan_ДоговорыВзаиморасчетов КАК Scan_ДоговорыВзаиморасчетов
		|ГДЕ
		|	Scan_ДоговорыВзаиморасчетов.IDExternalSystem <> """"
		|	И Scan_ДоговорыВзаиморасчетов.НомерДоговора = &НомерСОП
		|	И Scan_ДоговорыВзаиморасчетов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("НомерСОП", НомерСОП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		// 17422 +++
		
		//// Проверим количество продуктов, может нужно обновить из 1БД
		//ИмяМетода = "GetSOP";
		//СообщениеОбОшибке = "";
		//Отказ = Ложь;
		//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
		//СтруктураПараметров.Вставить("GUID", ВыборкаДетальныеЗаписи.IDExternalSystem);
		//ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
		//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		//Если НЕ Отказ Тогда
		//	//Получим элемент из 1БД
		//	XDTOОбъект = Scan_ВебСервисы.РазобратьОтветВебСервиса(ТекЭлементОтвет, "Answer.Result.СОП", Отказ, ИмяСобытияЖурналаРегистрации, ИмяМетода, СообщениеОбОшибке);	
		//	
		//	СтруктураРеквизитов = Scan_ВебСервисыРазборОтветов.ПолучитьСтруктуруРеквизитов(XDTOОбъект, Отказ, ИмяСобытияЖурналаРегистрации, "GetSOP");
		//	Если Отказ ИЛИ СтруктураРеквизитов = Неопределено Тогда
		//		СообщениеОбОшибке = "Не удалось получить структуру реквизитов при обработке данных СОП из 1БД. Номер договора: " + НомерСОП;
		//		Возврат ВыборкаДетальныеЗаписи.Ссылка;	
		//	КонецЕсли;
		//	
		//	Если СтруктураРеквизитов["Продукты"] <> Неопределено Тогда
		//		СписокПродуктов = СтруктураРеквизитов["Продукты"].ПродуктСОП;
		//		// Проверим равно ли количество продуктов
		//		Если СписокПродуктов.Количество() <> ВыборкаДетальныеЗаписи.Ссылка.СпецификацияКСОП.Количество() Тогда
		//			// Обновим договор из 1БД
		//			ОбъектСсылка = Scan_ВебСервисыРазборОтветов.ОбновитьСОПНовая(ВыборкаДетальныеЗаписи.Ссылка, XDTOОбъект, СтруктураРеквизитов, СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации);
		//		
		//			// После обновления количество продуктов все равно не соответствует - нужно попросить загрузить их в обмен
		//			Если СписокПродуктов.Количество() <> ОбъектСсылка.СпецификацияКСОП.Количество() Тогда
		//				СообщениеОбОшибке = "В OFMS не найдены продукты: ";
		//				Для Каждого ТекПродукт Из СписокПродуктов Цикл
		//					НайденноеИзделие = Справочники.Scan_Изделия.НайтиПоРеквизиту("IDExternalSystemProduct",ТекПродукт.Продукт.GUID);
		//					Если НЕ ЗначениеЗаполнено(НайденноеИзделие) Тогда
		//						СообщениеОбОшибке = СообщениеОбОшибке + ТекПродукт.Продукт.Наименование + ", ";
		//					КонецЕсли;
		//				КонецЦикла;
		//				СообщениеОбОшибке = СообщениеОбОшибке + " необходимо обратиться к SRU IT для регистрации продуктов в обмен. Номер договора: " + НомерСОП;
		//			КонецЕсли;
		//			Возврат ОбъектСсылка;
		//		КонецЕсли;
		//	КонецЕсли; 
		//КонецЕсли;
		// 17422 ---
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	// 17422 +++ 		
	//// Найдем в 1БД  	
	//ИмяМетода = "GetListOfSOP";
	//СообщениеОбОшибке = "";
	//Отказ = Ложь;
	//ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
	//
	//СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода);
	//СтруктураПараметров.НомерДоговора = НомерСОП;
	//
	//ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
	//Если НЕ Отказ Тогда
	//	СсылкаЭлемента = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникДоговорыВзаиморасчетовСОП(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	Scan_ДоговорыВзаиморасчетов.Ссылка КАК Ссылка,
	//	|	Scan_ДоговорыВзаиморасчетов.IDExternalSystem КАК IDExternalSystem
	//	|ИЗ
	//	|	Справочник.Scan_ДоговорыВзаиморасчетов КАК Scan_ДоговорыВзаиморасчетов
	//	|ГДЕ
	//	|	Scan_ДоговорыВзаиморасчетов.IDExternalSystem <> """"
	//	|	И Scan_ДоговорыВзаиморасчетов.НомерДоговора = &НомерСОП
	//	|	И Scan_ДоговорыВзаиморасчетов.ПометкаУдаления = ЛОЖЬ";
	//	
	//	Запрос.УстановитьПараметр("НомерСОП", НомерСОП);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//		ВывестиСообщениеПол("Создан договор из 1БД. Номер договора: " + НомерСОП);
	//		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	//	КонецЕсли;	
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
	//	СообщениеОбОшибке = СообщениеОбОшибке + " Номер договора: " + НомерСОП;
	//КонецЕсли;
	// 17422 ---
		
	Возврат ПредопределенноеЗначение("Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка");
	
КонецФункции	

#КонецОбласти
//rarus vikhle 24.09.2020 mt 16344 ---

#КонецОбласти

#Область ЗагрузкаЗаявокНаОтгрузкуИзSOWA

//rarus agar 19.10.2020 16346 ++

&НаКлиенте
Процедура ПутьКФайлуЗаявокНаОтгрузкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораФайла(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеЗаявокНаОтгрузку(Команда)
	
	Если ПустаяСтрока(ПутьКФайлуЗаявокНаОтгрузку) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайлаЗаявокНаОтгрузку();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаЗаявокНаОтгрузку()
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	ТекПутьКФайлу = СокрЛП(ПутьКФайлуЗаявокНаОтгрузку);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаЗаявокНаОтгрузкуЗавершение(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаЗаявокНаОтгрузкуФрагмент", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаЗаявокНаОтгрузкуФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаЗаявокНаОтгрузкуЗавершение(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаЗаявокНаОтгрузкуЗавершение(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлЗаявокНаОтгрузку(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлЗаявокНаОтгрузку(ПараметрыЗагрузки)
	
	ЗаявкиНаОтгрузку.Очистить();
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 10;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		НоваяСтрока = ЗаявкиНаОтгрузку.Добавить();
		НоваяСтрока.КодДилера          = СокрЛП(СтрокаФайла.DealerId);
		НоваяСтрока.НомерСОП           = СокрЛП(СтрокаФайла.SopNumber);
		НоваяСтрока.ДатаОтгрузки       = СтрокаФайла.PlanDeliveryDate;
		НоваяСтрока.НомерЗаказаНаЗавод = Формат(СтрокаФайла.CowOrderId, "ЧГ=0");
		НоваяСтрока.НомерШасси         = Формат(СтрокаФайла.ChNo, "ЧГ=0");
		НоваяСтрока.Местоположение     = СокрЛП(СтрокаФайла.PlaceName);
		НоваяСтрока.Комментарий        = СокрЛП(СтрокаФайла.DeliveryNotes);
		
		ДозаполнитьСтрокуЗаявкиНаОтгрузку(НоваяСтрока);
	КонецЦикла;
	
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьСтрокуЗаявкиНаОтгрузку(СтрокаЗаявкиНаОтгрузку)
	
	НомерЗаказаЧисло        = Ложь;
	НомерЗаказаНаЗаводЧисло = 0;
	
	НомерЗаказаНаЗавод = СтрокаЗаявкиНаОтгрузку.НомерЗаказаНаЗавод;
	НомерЗаказаНаЗаводСтрокой = Строка(Формат(НомерЗаказаНаЗавод,"ЧГ=0"));
	
	Попытка
		НомерЗаказаНаЗаводЧисло = Число(НомерЗаказаНаЗаводСтрокой);
		НомерЗаказаЧисло        = Истина;
	Исключение КонецПопытки;
	
	Если НомерЗаказаЧисло Тогда
		НомерЗаказаНаЗавод = Формат(НомерЗаказаНаЗаводЧисло, "ЧЦ=9; ЧДЦ=0; ЧВН=; ЧГ=0");
	Иначе
		НомерЗаказаНаЗавод = НомерЗаказаНаЗаводСтрокой;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаЗаявкиНаОтгрузку.КодДилера) Тогда
		СтрокаЗаявкиНаОтгрузку.Дилер = Справочники.Scan_Компании.НайтиПоРеквизиту("КодДилераSOWA", СтрокаЗаявкиНаОтгрузку.КодДилера);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаявкиНаОтгрузку.НомерСОП) Тогда
		СтрокаЗаявкиНаОтгрузку.СОП   = Справочники.Scan_ДоговорыВзаиморасчетов.НайтиПоРеквизиту("НомерДоговора", СтрокаЗаявкиНаОтгрузку.НомерСОП);
	КонецЕсли;
	Если Не СтрокаЗаявкиНаОтгрузку.СОП.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", СтрокаЗаявкиНаОтгрузку.СОП);
		Запрос.Текст = "ВЫБРАТЬ
		|	Scan_СоглашенияОПоставке.Ссылка КАК СоглашениеОПоставке
		|ИЗ
		|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
		|ГДЕ
		|	Scan_СоглашенияОПоставке.Договор = &Договор
		|	И Scan_СоглашенияОПоставке.Статус <> ЗНАЧЕНИЕ(Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС)";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			СтрокаЗаявкиНаОтгрузку.СоглашениеОПоставке = Справочники.Scan_СоглашенияОПоставке.ПустаяСсылка();
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			СтрокаЗаявкиНаОтгрузку.СоглашениеОПоставке = Выборка.СоглашениеОПоставке;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерЗаказаНаЗавод) Тогда
		СтрокаЗаявкиНаОтгрузку.ЗаказНаЗавод = Справочники.Scan_ЗаказыНаЗавод.НайтиПоНаименованию(НомерЗаказаНаЗавод, Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаявкиНаОтгрузку.НомерШасси) Тогда
		СтрокаЗаявкиНаОтгрузку.Продукт = Справочники.Scan_Изделия.НайтиПоРеквизиту("НомерИзделия", СтрокаЗаявкиНаОтгрузку.НомерШасси);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаявкиНаОтгрузку.Местоположение) Тогда
		//rarus agar 17.02.2021 17151 ++
		//СтрокаЗаявкиНаОтгрузку.МестоОтгрузки = Справочники.Scan_МестаХранения.НайтиПоНаименованию(СтрокаЗаявкиНаОтгрузку.Местоположение, Истина);
		СтрокаЗаявкиНаОтгрузку.МестоОтгрузки = Справочники.Scan_Склады.НайтиПоНаименованию(СтрокаЗаявкиНаОтгрузку.Местоположение, Истина);
		//rarus agar 17.02.2021 17151 --
	КонецЕсли;
	
	СтрокаЗаявкиНаОтгрузку.ЗаявкаНаОтгрузку = ПолучитьЗаявкуНаОтгрузку(СтрокаЗаявкиНаОтгрузку.СоглашениеОПоставке,
	                                                                   СтрокаЗаявкиНаОтгрузку.МестоОтгрузки,
																	   СтрокаЗаявкиНаОтгрузку.ДатаОтгрузки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаявкуНаОтгрузку(СоглашениеОПоставке, МестоОтгрузки, ДатаОтгрузки)
	
	ЗаявкаНаОтгрузку = Документы.Scan_ЗаявкаНаОтгрузку.ПустаяСсылка();
	
	Если  Не СоглашениеОПоставке.Пустая()
		И Не МестоОтгрузки.Пустая()
		И    ДатаОтгрузки <> Дата(1,1,1)
		Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СоглашениеОПоставке", СоглашениеОПоставке);
		Запрос.УстановитьПараметр("МестоОтгрузки",       МестоОтгрузки);
		Запрос.УстановитьПараметр("ДатаОтгрузки",        ДатаОтгрузки);
		Запрос.Текст = "ВЫБРАТЬ
		|	Scan_ЗаявкаНаОтгрузку.Ссылка КАК ЗаявкаНаОтгрузку
		|ИЗ
		|	Документ.Scan_ЗаявкаНаОтгрузку КАК Scan_ЗаявкаНаОтгрузку
		|ГДЕ
		|	Scan_ЗаявкаНаОтгрузку.СоглашениеОПоставке = &СоглашениеОПоставке
		|	И Scan_ЗаявкаНаОтгрузку.СкладОтгрузки = &МестоОтгрузки
		|	И Scan_ЗаявкаНаОтгрузку.ДатаОтгрузки = &ДатаОтгрузки";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ЗаявкаНаОтгрузку = Выборка.ЗаявкаНаОтгрузку;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаявкаНаОтгрузку;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьДанныеЗаявокНаОтгрузку(Команда)
	
	Сообщить(Нстр("ru = 'Начато создание заявок на отгрузку'; en = 'Creating documents start'")+" "+ТекущаяДата());
	
	ЗаписатьДанныеЗаявокНаОтгрузкуНаСервере();
	
	Сообщить(Нстр("ru = 'Завершено создание заявок на отгрузку'; en = 'Creating documents finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеЗаявокНаОтгрузкуНаСервере()
	
	ЗаявкиНаОтгрузкуТаблица = ЗаявкиНаОтгрузку.Выгрузить();
	
	ЗаявкиНаОтгрузкуКомбинации = ЗаявкиНаОтгрузкуТаблица.Скопировать(,"СоглашениеОПоставке,МестоОтгрузки,ДатаОтгрузки,Дилер");
	ЗаявкиНаОтгрузкуКомбинации.Свернуть("СоглашениеОПоставке,МестоОтгрузки,ДатаОтгрузки,Дилер");
	
	Для Каждого Комбинация Из ЗаявкиНаОтгрузкуКомбинации Цикл
		Если    Комбинация.СоглашениеОПоставке.Пустая()
			Или Комбинация.МестоОтгрузки.Пустая()
			Или Комбинация.ДатаОтгрузки = Дата(1,1,1)
			Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаявкаНаОтгрузкуСсылка = ПолучитьЗаявкуНаОтгрузку(Комбинация.СоглашениеОПоставке, Комбинация.МестоОтгрузки, Комбинация.ДатаОтгрузки);
		
		Если ЗаявкаНаОтгрузкуСсылка.Пустая() Тогда
			ЗаявкаНаОтгрузкуОбъект = Документы.Scan_ЗаявкаНаОтгрузку.СоздатьДокумент();
			ЗаявкаНаОтгрузкуОбъект.Дата                = ТекущаяДатаСеанса();
			ЗаявкаНаОтгрузкуОбъект.Статус              = ПредопределенноеЗначение("Справочник.Scan_СтатусыЗаявокНаОтгрузку.ЗаявкаНаОтгрузку");
			ЗаявкаНаОтгрузкуОбъект.Дилер               = Комбинация.Дилер;
			ЗаявкаНаОтгрузкуОбъект.ДатаОтгрузки        = Комбинация.ДатаОтгрузки;
			ЗаявкаНаОтгрузкуОбъект.СоглашениеОПоставке = Комбинация.СоглашениеОПоставке;
			ЗаявкаНаОтгрузкуОбъект.СкладОтгрузки       = Комбинация.МестоОтгрузки;
		Иначе
			ЗаявкаНаОтгрузкуОбъект = ЗаявкаНаОтгрузкуСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаявкаНаОтгрузкуОбъект.Продукты.Очистить();
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СоглашениеОПоставке", Комбинация.СоглашениеОПоставке);
		ПараметрыОтбора.Вставить("МестоОтгрузки",       Комбинация.МестоОтгрузки);
		ПараметрыОтбора.Вставить("ДатаОтгрузки",        Комбинация.ДатаОтгрузки);
		
		НайденныеСтроки = ЗаявкиНаОтгрузкуТаблица.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если Не НайденнаяСтрока.Продукт.Пустая() Тогда
				НоваяСтрока = ЗаявкаНаОтгрузкуОбъект.Продукты.Добавить();
				НоваяСтрока.Продукт = НайденнаяСтрока.Продукт;
			КонецЕсли;
			
			Если     ПустаяСтрока(ЗаявкаНаОтгрузкуОбъект.Комментарий)
				И Не ПустаяСтрока(НайденнаяСтрока.Комментарий)
				Тогда
				ЗаявкаНаОтгрузкуОбъект.Комментарий = НайденнаяСтрока.Комментарий;
			КонецЕсли;
		КонецЦикла;
		
		ИнформацияОбОшибке = "";
		
		Попытка
			ЗаявкаНаОтгрузкуОбъект.Записать();
			ЗаявкаНаОтгрузкуСсылка = ЗаявкаНаОтгрузкуОбъект.Ссылка;
		Исключение 
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЗаявкаНаОтгрузку = ЗаявкаНаОтгрузкуСсылка;
			НайденнаяСтрока.Ошибки = ИнформацияОбОшибке;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ЗаявкиНаОтгрузкуТаблица, ЗаявкиНаОтгрузку);
	
КонецПроцедуры

//rarus agar 19.10.2020 16346 --

#КонецОбласти

// rarus tenkam 23.12.2020 mantis 16906 +++
#Область СозданиеПользователейДилеров

&НаКлиенте
Процедура ДанныеПользователейДилеровНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокПользователей(Команда)
	
	Если ПустаяСтрока(ДанныеПользователейДилеров) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайлаДанныхПользователейДилеров();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаДанныхПользователейДилеров()
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	ТекПутьКФайлу = СокрЛП(ДанныеПользователейДилеров);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаДанныхПользователейДилеровЗавершение(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаДанныхПользователейДилеровФрагмент", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаДанныхПользователейДилеровФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаДанныхПользователейДилеровЗавершение(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаДанныхПользователейДилеровЗавершение(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлДанныхПользователейДилеров(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлДанныхПользователейДилеров(ПараметрыЗагрузки)
	
	ПользователиДилеры.Очистить();
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 8;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	НомерСтрокиФайла = 2;
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		НоваяСтрока = ПользователиДилеры.Добавить();
		
		НоваяСтрока.КодСотрудникаНаПортале	 = Формат(СтрокаФайла.IDПортала, "ЧГ=0");
		НоваяСтрока.ЛогинНаПортале			 = СокрЛП(СтрокаФайла.ЛогинПортала);
		НоваяСтрока.Имя						 = СокрЛП(СтрокаФайла.Имя);
		НоваяСтрока.Фамилия					 = СокрЛП(СтрокаФайла.Фамилия);
		НоваяСтрока.Отчество				 = СокрЛП(СтрокаФайла.Отчество);
		НоваяСтрока.Компания				 = СокрЛП(СтрокаФайла.Компания_Дилер);
		НоваяСтрока.КодДилера				 = Формат(СтрокаФайла.КодДилера_1ДБ_, "ЧГ=0");
		НоваяСтрока.КодДилераSOWA			 = СокрЛП(СтрокаФайла.КодДилераSOWA);
		НоваяСтрока.НомерСтрокиФайла		 = НомерСтрокиФайла;
		
		НомерСтрокиФайла = НомерСтрокиФайла + 1;
		
		Если ЗначениеЗаполнено(НоваяСтрока.КодДилера) И ЗначениеЗаполнено(НоваяСтрока.КодДилераSOWA) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Scan_Компании.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Scan_Компании КАК Scan_Компании
			|ГДЕ
			|	Scan_Компании.КодДилера = &КодДилера
			|	И Scan_Компании.КодДилераSOWA = &КодДилераSOWA";
			
			Запрос.УстановитьПараметр("КодДилера", НоваяСтрока.КодДилера);
			Запрос.УстановитьПараметр("КодДилераSOWA", НоваяСтрока.КодДилераSOWA);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				НоваяСтрока.КомпанияOFMS = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		// Проверим, может уже есть пользователь с таким кодом
		НоваяСтрока.ПользовательOFMS = Справочники.Пользователи.НайтиПоРеквизиту("КодСотрудникаНаПортале", НоваяСтрока.КодСотрудникаНаПортале);
	
	КонецЦикла;
	
	ВсегоСтрокПользователиДилеры = ПользователиДилеры.Количество();
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователей(Команда)
	Сообщить(Нстр("ru = 'Начато создание пользователей-дилеров'; en = 'Creating users start'")+" "+ТекущаяДата());
	
	СоздатьПользователейНаСервере();
		
	Сообщить(Нстр("ru = 'Завершено создание пользователей-дилеров'; en = 'Creating users finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПользователейНаСервере()
	ДанныеОСотрудникеСПортала = Новый Структура;
	
	ДанныеОСотрудникеСПортала.Вставить("Логин");
	ДанныеОСотрудникеСПортала.Вставить("Имя");
	ДанныеОСотрудникеСПортала.Вставить("Отчество");
	ДанныеОСотрудникеСПортала.Вставить("Фамилия");
	ДанныеОСотрудникеСПортала.Вставить("Почта");
	ДанныеОСотрудникеСПортала.Вставить("Телефон");
	ДанныеОСотрудникеСПортала.Вставить("Пароль");
	
	Для Каждого ТекСтрока Из ПользователиДилеры Цикл
		
		// Получим данные с портала
		Если НЕ ЗначениеЗаполнено(ТекСтрока.КодСотрудникаНаПортале) Тогда
			Продолжить;
			ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Код сотрудника портала не заполнен.";				
		КонецЕсли;
		
		// Вызов метода getUser для получения данных о сотруднике с портала
		Отказ = Ложь;
		ИмяМетода = "getUser";
		ИмяСобытияЖурналаРегистрации = "Веб-сервис портала." + ИмяМетода;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетодаПортала(ИмяМетода);
		СтруктураПараметров.Вставить ("id",ТекСтрока.КодСотрудникаНаПортале);
		ДанныеОСотрудникеСПортала = Scan_ВебСервисы.ВызовВебСервисаПортала(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
		
		Если Отказ Тогда
			ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Не удалось получить данные пользователя с портала. См. журнал регистрации. ";
			
			// Данных с портала нет, заполним из файла
			ДанныеОСотрудникеСПортала.Вставить("Логин", ТекСтрока.Логин);
			ДанныеОСотрудникеСПортала.Вставить("Имя", ТекСтрока.Имя);
			ДанныеОСотрудникеСПортала.Вставить("Отчество", ТекСтрока.Отчество);
			ДанныеОСотрудникеСПортала.Вставить("Фамилия", ТекСтрока.Фамилия);
			
		Иначе
			ТекСтрока.ЛогинПортал = ДанныеОСотрудникеСПортала.Логин;	
			ТекСтрока.ИмяПортал = ДанныеОСотрудникеСПортала.Имя;	
			ТекСтрока.ФамилияПортал = ДанныеОСотрудникеСПортала.Фамилия;	
			ТекСтрока.ОтчествоПортал = ДанныеОСотрудникеСПортала.Отчество;	
			ТекСтрока.ПочтаПортал = ДанныеОСотрудникеСПортала.Почта;	
			ТекСтрока.ТелефонПортал = ДанныеОСотрудникеСПортала.Телефон;	
			ТекСтрока.ПарольПортал = ДанныеОСотрудникеСПортала.Пароль;				
		КонецЕсли;  				
		          		
		// Создадим обновим контактное лицо
		КонтактноеЛицоКомпании = ПредопределенноеЗначение("Справочник.Scan_КонтактныеЛица.ПустаяСсылка");
		
		Если ЗначениеЗаполнено(ТекСтрока.КомпанияOFMS) Тогда
			КонтактноеЛицоКомпании = СоздатьОбновитьКЛКомпании(ТекСтрока);		
		КонецЕсли; 		
		
		// Создадим обновим пользователя
		Если ЗначениеЗаполнено(ТекСтрока.ПользовательOFMS) Тогда
			ПользовательОбъект = ТекСтрока.ПользовательOFMS.ПолучитьОбъект();
		Иначе
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		КонецЕсли;
		Если ЗначениеЗаполнено(ПодразделениеДилеры) Тогда
			ПользовательОбъект.ПодразделениеОрганизации = ПодразделениеДилеры;
			ПользовательОбъект.Организация = ПодразделениеДилеры.Владелец;
		КонецЕсли;
		ПользовательОбъект.КодСотрудникаНаПортале = ТекСтрока.КодСотрудникаНаПортале;
		
		Если ЗначениеЗаполнено(ДанныеОСотрудникеСПортала.Фамилия) И ЗначениеЗаполнено(ДанныеОСотрудникеСПортала.Имя) Тогда 
			ПользовательОбъект.Наименование = ДанныеОСотрудникеСПортала.Фамилия + " " + ДанныеОСотрудникеСПортала.Имя;
		Иначе
			ПользовательОбъект.Наименование = ДанныеОСотрудникеСПортала.Логин;
		КонецЕсли;	
		
		ПользовательОбъект.ЛогинНаПортале = ДанныеОСотрудникеСПортала.Логин;
		ПользовательОбъект.КонтактноеЛицоКомпании = КонтактноеЛицоКомпании;
		ПользовательОбъект.ПользовательПортала = Истина;
		
		Если НЕ ЗначениеЗаполнено(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
			
			ПользовательИБИмя = ДанныеОСотрудникеСПортала.Логин;			
			// Установка случайного гуид в качестве пароля
			ПользовательИБПароль = Строка(Новый УникальныйИдентификатор);
			
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Истина);
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен",    Истина);
			ОписаниеПользователяИБ.Вставить("ЗапрещеноИзменятьПароль", 	 Ложь);
			ОписаниеПользователяИБ.Вставить("Имя",                       ПользовательИБИмя);
			ОписаниеПользователяИБ.Вставить("Пароль",                    ПользовательИБПароль);
			ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора",   Истина);
			ОписаниеПользователяИБ.Вставить("ПолноеИмя", 				 ПользовательОбъект.Наименование);
			ОписаниеПользователяИБ.Вставить("Действие", 				 "Записать"); 
	            		
			ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		Иначе
			ПользовательИБПароль = Строка(ПользовательОбъект.ИдентификаторПользователяИБ);	
		КонецЕсли;
		
		// Запишем пользователя
		Попытка
			ПользовательОбъект.Записать();
		Исключение
			ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось записать пользователя: " + ОписаниеОшибки();
			Продолжить;		
		КонецПопытки;
		
		// Добавим контактную информацию пользователя	
		ТЗКонтактнойИнформации = ПолучитьТЗКонтактнойИнформации("Пользователь",ДанныеОСотрудникеСПортала);	
		УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(ПользовательОбъект.Ссылка, ТЗКонтактнойИнформации,Ложь);
		
		Если ЗначениеЗаполнено(ТекСтрока.КомпанияOFMS) Тогда
			ТЗКомпанияОсновной = Новый ТаблицаЗначений;
			ТЗКомпанияОсновной.Колонки.Добавить("Компания", Новый ОписаниеТипов("СправочникСсылка.Scan_Компании"));
			ТЗКомпанияОсновной.Колонки.Добавить("Основной", Новый ОписаниеТипов("Булево"));
			
			СтрокаКомпания = ТЗКомпанияОсновной.Добавить();
			СтрокаКомпания.Компания = ТекСтрока.КомпанияOFMS;
			СтрокаКомпания.Основной = Истина;
			
			РегистрыСведений.Scan_КомпанииПользователей.ЗаписьЗначенияРегистраСведений(ПользовательОбъект.Ссылка,ТЗКомпанияОсновной);
		КонецЕсли;
		
		// Добавим пользователя в группу "Дилеры"		
		Если ЗначениеЗаполнено(ГруппаПользователейДилеры) Тогда
			ГруппаДилерыОбъект = ГруппаПользователейДилеры.ПолучитьОбъект();		
			// Вдруг пользователь в группе уже уже есть
			НайденнаяСтрока = ГруппаДилерыОбъект.Состав.Найти(ПользовательОбъект.Ссылка, "Пользователь");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = ГруппаДилерыОбъект.Состав.Добавить();
				НоваяСтрока.Пользователь = ПользовательОбъект.Ссылка;
				
				Попытка
					ГруппаДилерыОбъект.Записать();	
				Исключение
					ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось добавить пользователя в группу Дилеры: " + ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		// Добавим пользователя в роли исполнителей "Дилеры"
		Если ЗначениеЗаполнено(РольИсполнителейДилеры) Тогда
			НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РольИсполнителя.Установить(РольИсполнителейДилеры);
			НаборЗаписей.Отбор.Исполнитель.Установить(ПользовательОбъект.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РольИсполнителя = РольИсполнителейДилеры;
				НоваяЗапись.Исполнитель = ПользовательОбъект.Ссылка;
				
				НоваяЗапись.ГруппаИсполнителейЗадач = Справочники.ГруппыИсполнителейЗадач.НайтиПоРеквизиту("РольИсполнителя", РольИсполнителейДилеры);
			КонецЕсли;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось добавить пользователя в роль исполнителей Дилер: " + ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
		// Добавим разрешение на работу с программой
		НаборЗаписей = РегистрыСведений.Scan_ПраваИНастройки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ПользовательОбъект.Ссылка);
		//НаборЗаписей.Отбор.ПравоНастройка.Установить(ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РазрешитьРаботуСПрограммой"));
		//НаборЗаписей.Прочитать();
		//Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РазрешитьРаботуСПрограммой"); 			
		//Иначе
		//	НоваяЗапись = НаборЗаписей[0];
		//КонецЕсли;
		НоваяЗапись.Значение = Истина; 			
		НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();
		
		НоваяЗапись2 = НаборЗаписей.Добавить();
		НоваяЗапись2.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись2.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РазрешитьИзменениеПравДоступа"); 			
		НоваяЗапись2.Значение = Ложь; 			
		НоваяЗапись2.Пользователь = Пользователи.АвторизованныйПользователь();
		
		НоваяЗапись3 = НаборЗаписей.Добавить();
		НоваяЗапись3.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись3.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РазрешитьИзменениеЛичныхНастроек"); 			
		НоваяЗапись3.Значение = Ложь; 			
		НоваяЗапись3.Пользователь = Пользователи.АвторизованныйПользователь();
		
		НоваяЗапись4 = НаборЗаписей.Добавить();
		НоваяЗапись4.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись4.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьИзделияНаМестахХранения"); 			
		НоваяЗапись4.Значение = Ложь; 			
		НоваяЗапись4.Пользователь = Пользователи.АвторизованныйПользователь();
		
		НоваяЗапись5 = НаборЗаписей.Добавить();
		НоваяЗапись5.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись5.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьПолныйСписокИзделий"); 			
		НоваяЗапись5.Значение = Ложь; 			
		НоваяЗапись5.Пользователь = Пользователи.АвторизованныйПользователь();
		
		НоваяЗапись6 = НаборЗаписей.Добавить();
		НоваяЗапись6.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись6.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьБУ"); 			
		НоваяЗапись6.Значение = Ложь; 			
		НоваяЗапись6.Пользователь = Пользователи.АвторизованныйПользователь();
		
		НоваяЗапись7 = НаборЗаписей.Добавить();
		НоваяЗапись7.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись7.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьДемоТест"); 			
		НоваяЗапись7.Значение = Ложь; 			
		НоваяЗапись7.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись8 = НаборЗаписей.Добавить();
		НоваяЗапись8.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись8.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьАренда"); 			
		НоваяЗапись8.Значение = Ложь; 			
		НоваяЗапись8.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись9 = НаборЗаписей.Добавить();
		НоваяЗапись9.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись9.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьЗаявкиНаДействие"); 			
		НоваяЗапись9.Значение = Ложь; 			
		НоваяЗапись9.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись10 = НаборЗаписей.Добавить();
		НоваяЗапись10.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись10.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьЗаявкиПеревозчику"); 			
		НоваяЗапись10.Значение = Ложь; 			
		НоваяЗапись10.Пользователь = Пользователи.АвторизованныйПользователь();
		
		НоваяЗапись11 = НаборЗаписей.Добавить();
		НоваяЗапись11.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись11.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьПеремещенияИзделий"); 			
		НоваяЗапись11.Значение = Ложь; 			
		НоваяЗапись11.Пользователь = Пользователи.АвторизованныйПользователь();
		
		НоваяЗапись12 = НаборЗаписей.Добавить();
		НоваяЗапись12.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись12.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьРаспределениеЗаявок"); 			
		НоваяЗапись12.Значение = Ложь; 			
		НоваяЗапись12.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись13 = НаборЗаписей.Добавить();
		НоваяЗапись13.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись13.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьМестаХранения"); 			
		НоваяЗапись13.Значение = Ложь; 			
		НоваяЗапись13.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись14 = НаборЗаписей.Добавить();
		НоваяЗапись14.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись14.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьАрхив"); 			
		НоваяЗапись14.Значение = Ложь; 			
		НоваяЗапись14.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись15 = НаборЗаписей.Добавить();
		НоваяЗапись15.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись15.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьСтраницаЗаявкиНаОтгрузку"); 			
		НоваяЗапись15.Значение = Ложь; 			
		НоваяЗапись15.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись16 = НаборЗаписей.Добавить();
		НоваяЗапись16.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись16.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьДвижениеИзделий"); 			
		НоваяЗапись16.Значение = Ложь; 			
		НоваяЗапись16.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись17 = НаборЗаписей.Добавить();
		НоваяЗапись17.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись17.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьНадстройки"); 			
		НоваяЗапись17.Значение = Ложь; 			
		НоваяЗапись17.Пользователь = Пользователи.АвторизованныйПользователь();

		НоваяЗапись18 = НаборЗаписей.Добавить();
		НоваяЗапись18.Объект = ПользовательОбъект.Ссылка; 			
		НоваяЗапись18.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РМОтделаЛогистики_ОтобразитьЗаявки"); 			
		НоваяЗапись18.Значение = Ложь; 			
		НоваяЗапись18.Пользователь = Пользователи.АвторизованныйПользователь();

		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось установить право на работу с программой: " + ОписаниеОшибки();
		КонецПопытки;
		
		// Добавим запись в историю изменений прав и настроек
		Рег2 = РегистрыСведений.Scan_ИсторияИзмененияПравИНастроек.СоздатьМенеджерЗаписи();
		Рег2.Период = ТекущаяДата();
		Рег2.Объект = ПользовательОбъект.Ссылка;
		Рег2.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.Scan_ПраваИНастройки.РазрешитьРаботуСПрограммой");
		Рег2.Значение = Истина;
		Рег2.Пользователь = Пользователи.АвторизованныйПользователь();
		Попытка
			Рег2.Записать();				
		Исключение
			ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось записать историю изменения прав и настроек: " + ОписаниеОшибки();
		КонецПопытки; 		
		
		//Вызов addUpdateUser для передачи пароля пользователя на портал
		Отказ = Ложь;
		ИмяМетода = "addUpdateUser";
		ИмяСобытияЖурналаРегистрации = "Веб-сервис портала." + ИмяМетода;
		СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетодаПортала(ИмяМетода);
		СтруктураПараметров.Вставить ("id",ТекСтрока.КодСотрудникаНаПортале);
		СтруктураПараметров.Вставить ("tokenofms",ПользовательИБПароль); 
		ОтветВебСервиса = Scan_ВебСервисы.ВызовВебСервисаПортала(ИмяМетода,СтруктураПараметров, Отказ,ИмяСобытияЖурналаРегистрации);
		
		Если Отказ Тогда
			ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось передать пароль пользователя на портал, подробности см. в журнале регистрации.";
		КонецЕсли;     		
		
		// Заполним пользователя в таблице
		ТекСтрока.ПользовательOFMS = ПользовательОбъект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТЗКонтактнойИнформации(ВладелецКонтактнойИнформации,ДанныеОСотрудникеСПортала)
	ТЗКонтактнойИнформации = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	
	Если ЗначениеЗаполнено(ДанныеОСотрудникеСПортала.Почта) Тогда	
		СтрокаТЗ = ТЗКонтактнойИнформации.Добавить();
		СтрокаТЗ.Вид = ?(ВладелецКонтактнойИнформации = "Пользователь",Справочники.ВидыКонтактнойИнформации.EmailПользователя,Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
		СтрокаТЗ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаТЗ.Представление = ДанныеОСотрудникеСПортала.Почта;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеОСотрудникеСПортала.Телефон) Тогда	
		СтрокаТЗ = ТЗКонтактнойИнформации.Добавить();
		СтрокаТЗ.Вид = ?(ВладелецКонтактнойИнформации = "Пользователь",Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника);
		СтрокаТЗ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаТЗ.Представление = СтрЗаменить(ДанныеОСотрудникеСПортала.Телефон,"+","");	
	КонецЕсли;	
	Возврат ТЗКонтактнойИнформации;
КонецФункции

&НаСервере
Функция СоздатьОбновитьКЛКомпании(ДанныеСтроки)
	
	ТекКЛСсылка = ПредопределенноеЗначение("Справочник.Scan_КонтактныеЛица.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КонтактныеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_КонтактныеЛица КАК Scan_КонтактныеЛица
		|ГДЕ
		|	Scan_КонтактныеЛица.Владелец = &Владелец
		|	И Scan_КонтактныеЛица.ВидКонтактногоЛица = &ВидКонтактногоЛица
		|	И Scan_КонтактныеЛица.Имя = &Имя
		|	И Scan_КонтактныеЛица.Отчество = &Отчество
		|	И Scan_КонтактныеЛица.Фамилия = &Фамилия";
	
	Запрос.УстановитьПараметр("ВидКонтактногоЛица", Перечисления.Scan_ВидыКонтактныхЛиц.КонтактноеЛицоКомпании);
	Запрос.УстановитьПараметр("Владелец", ДанныеСтроки.КомпанияOFMS);
	Запрос.УстановитьПараметр("Имя", ДанныеСтроки.Имя);
	Запрос.УстановитьПараметр("Отчество", ДанныеСтроки.Отчество);
	Запрос.УстановитьПараметр("Фамилия", ДанныеСтроки.Фамилия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ТекКЛОбъект = Справочники.Scan_КонтактныеЛица.СоздатьЭлемент();
		
		ТекКЛОбъект.Владелец = ДанныеСтроки.КомпанияOFMS;
		ТекКЛОбъект.ВидКонтактногоЛица = Перечисления.Scan_ВидыКонтактныхЛиц.КонтактноеЛицоКомпании;
		ТекКЛОбъект.Имя = ДанныеСтроки.Имя;
		ТекКЛОбъект.Фамилия = ДанныеСтроки.Фамилия;
		ТекКЛОбъект.Отчество = ДанныеСтроки.Отчество;
		ТекКЛОбъект.Наименование = ТекКЛОбъект.Фамилия + " " + ТекКЛОбъект.Имя + " " +ТекКЛОбъект.Отчество;
		
		Попытка
			ТекКЛОбъект.Записать();
			ТекКЛСсылка = ТекКЛОбъект.Ссылка;
			
			// Запишем контактную информацию
			ТЗКонтактнойИнформации = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
			
			Если ЗначениеЗаполнено(ДанныеСтроки.ПочтаПортал) Тогда	
				СтрокаТЗ = ТЗКонтактнойИнформации.Добавить();
				СтрокаТЗ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица");
				СтрокаТЗ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
				СтрокаТЗ.Представление = ДанныеСтроки.ПочтаПортал;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтроки.ТелефонПортал) Тогда	
				СтрокаТЗ = ТЗКонтактнойИнформации.Добавить();
				СтрокаТЗ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийКонтактногоЛица");
				СтрокаТЗ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
				СтрокаТЗ.Представление = СтрЗаменить(ДанныеСтроки.ТелефонПортал,"+","");	
			КонецЕсли;
			УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(ТекКЛСсылка, ТЗКонтактнойИнформации);
			
			Возврат ТекКЛСсылка;
		Исключение
			ДанныеСтроки.Ошибки = ДанныеСтроки.Ошибки + "Не удалось создать КЛ компании. " + ОписаниеОшибки();	
			Возврат ПредопределенноеЗначение("Справочник.Scan_КонтактныеЛица.ПустаяСсылка");	
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТекКЛСсылка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляДляЗаполненияРеквизитовПользователейДилеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|ГДЕ
		|	ГруппыПользователей.Наименование = ""Дилеры""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ГруппаПользователейДилеры = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_Подразделения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_Подразделения КАК Scan_Подразделения
		|ГДЕ
		|	Scan_Подразделения.Наименование = ""Отдел для дилера""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПодразделениеДилеры = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Наименование = ""Дилер""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		РольИсполнителейДилеры = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти
// rarus tenkam 23.12.2020 mantis 16906 ---

// rarus tenkam 29.12.2020 mantis 16345 +++
#Область ЗагрузкаСУ	

&НаКлиенте
Процедура ДанныеСУДляИсторииСтатусовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСУДляСпискаПродуктовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСУДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СУПрочитатьДанныеСУ(Команда)
	
	Если ПустаяСтрока(ДанныеСУДляЗагрузки) И 
		ПустаяСтрока(ДанныеСУДляСпискаПродуктов) И
		ПустаяСтрока(ДанныеСУДляИсторииСтатусов) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайловСУ(1);

КонецПроцедуры

&НаКлиенте
Процедура СУПрочитатьДанныеПоСпискуПродуктов(Команда)
	Если ПустаяСтрока(ДанныеСУДляСпискаПродуктов) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайловСУ(2);
КонецПроцедуры

&НаКлиенте
Процедура СУПрочитатьДанныеПоИсторииСтатусов(Команда)
		Если ПустаяСтрока(ДанныеСУДляИсторииСтатусов) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайловСУ(3);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайловСУ(КодЗагрузки)
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	Если КодЗагрузки = 1 Тогда
		ТекПутьКФайлу = СокрЛП(ДанныеСУДляЗагрузки);
	ИначеЕсли КодЗагрузки = 2 Тогда
		ТекПутьКФайлу = СокрЛП(ДанныеСУДляСпискаПродуктов);	
	ИначеЕсли КодЗагрузки = 3 Тогда
		ТекПутьКФайлу = СокрЛП(ДанныеСУДляИсторииСтатусов);	
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("КодЗагрузки", КодЗагрузки);
		
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		
		ЗагрузитьДанныеФайловСУЗавершение(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайловСУФрагмент", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайловСУФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайловСУЗавершение(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайловСУЗавершение(Знач ПараметрыЗагрузки)
	Если ПараметрыЗагрузки.КодЗагрузки = 1 Тогда
		ПрочитатьДанныеСУ(ПараметрыЗагрузки);
	ИначеЕсли ПараметрыЗагрузки.КодЗагрузки = 2 Тогда
		ПрочитатьСписокПродуктов(ПараметрыЗагрузки);	
	ИначеЕсли ПараметрыЗагрузки.КодЗагрузки = 3 Тогда
		ПрочитатьИсториюСтатусов(ПараметрыЗагрузки);	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеСУ(ПараметрыЗагрузки)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 21;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	
	НомерСтрокиФайла = 2;
	СУТаблицаДанныхСУ.Очистить();
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		Если СокрЛП(СтрокаФайла.SpPriceId) = "Код документа СУ" Тогда
			Продолжить;	
		КонецЕсли;
		
		НоваяСтрока = СУТаблицаДанныхСУ.Добавить();
		
		НоваяСтрока.КодСУSOWA = Формат(СтрокаФайла.SpPriceId, "ЧГ=0");
		НоваяСтрока.DealerID = СокрЛП(СтрокаФайла.DealerID);
		НоваяСтрока.DealerName = СокрЛП(СтрокаФайла.DealerName);
		НоваяСтрока.CustomerName = СокрЛП(СтрокаФайла.CustomerName);
		НоваяСтрока.CustomerINN = СтрЗаменить(Формат(СтрокаФайла.CustomerINN, "ЧГ=0")," ","");
		НоваяСтрока.StdID = СокрЛП(СтрокаФайла.StdID);
		НоваяСтрока.AmModel = СокрЛП(СтрокаФайла.AmModel);
		НоваяСтрока.Квота = СокрЛП(СтрокаФайла.Quota);
		НоваяСтрока.DD = СокрЛП(СтрокаФайла.MaxCDD);
		НоваяСтрока.СебестоимостьСНДС = СокрЛП(СтрокаФайла.DDP_Price);
		НоваяСтрока.СпецDealerNet = СокрЛП(СтрокаФайла.DealerPrice);
		НоваяСтрока.СпецCustomerPrice = СокрЛП(СтрокаФайла.CustomerPrice);
		НоваяСтрока.ПроцентОплаты = СокрЛП(СтрокаФайла.SopPercent);
		НоваяСтрока.СрокДействияСпециальныхУсловий = СокрЛП(СтрокаФайла.ValidTill);
		
		НоваяСтрока.ПрайсDealerNet = СокрЛП(СтрокаФайла.BaseDealerPrice);
		НоваяСтрока.ПрайсCustomerPrice = СокрЛП(СтрокаФайла.BaseCustomerPrice);
		НоваяСтрока.DistributorNet = СокрЛП(СтрокаФайла.FactoryNetPrice);
		НоваяСтрока.RUНомер = СокрЛП(СтрокаФайла.FleetId);
		НоваяСтрока.Salesman = СокрЛП(СтрокаФайла.Salesman);
		                                 		
		НоваяСтрока.Дилер = ПолучитьДилераПоКоду(НоваяСтрока.DealerID);
		
		НоваяСтрока.КонечныйКлиент = ПолучитьКонтрагентаПоИНН(НоваяСтрока.CustomerINN);
		НоваяСтрока.КонечныйКлиентКомпания = ПолучитьКомпаниюКонтрагента(НоваяСтрока.КонечныйКлиент);
		
		НоваяСтрока.ПродавецДилера = ПолучитьПродавцаПоДилеруИИмени(НоваяСтрока.Дилер, НоваяСтрока.Salesman);
		
		НоваяСтрока.Комментарий = СокрЛП(СтрокаФайла.DistrNotes); 		

	КонецЦикла; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеФайла.КодСУSOWA КАК КодСУSOWA,
	               |	ДанныеФайла.DealerID КАК DealerID,
	               |	ДанныеФайла.DealerName КАК DealerName,
	               |	ДанныеФайла.CustomerName КАК CustomerName,
	               |	ДанныеФайла.CustomerINN КАК CustomerINN,
	               |	ДанныеФайла.StdID КАК StdID,
	               |	ДанныеФайла.AmModel КАК AmModel,
	               |	ДанныеФайла.Квота КАК Квота,
	               |	ДанныеФайла.DD КАК DD,
	               |	ДанныеФайла.СебестоимостьСНДС КАК СебестоимостьСНДС,
	               |	ДанныеФайла.СпецDealerNet КАК СпецDealerNet,
	               |	ДанныеФайла.СпецCustomerPrice КАК СпецCustomerPrice,
	               |	ДанныеФайла.ПроцентОплаты КАК ПроцентОплаты,
	               |	ДанныеФайла.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
	               |	ДанныеФайла.Дилер КАК Дилер,
	               |	ДанныеФайла.КонечныйКлиент КАК КонечныйКлиент,
	               |	ДанныеФайла.ПрайсDealerNet КАК ПрайсDealerNet,
	               |	ДанныеФайла.ПрайсCustomerPrice КАК ПрайсCustomerPrice,
	               |	ДанныеФайла.DistributorNet КАК DistributorNet,
	               |	ДанныеФайла.RUНомер КАК RUНомер,
	               |	ДанныеФайла.Salesman КАК Salesman,
	               |	ДанныеФайла.ПродавецДилера КАК ПродавецДилера,
	               |	ДанныеФайла.Комментарий КАК Комментарий,
	               |	ДанныеФайла.КонечныйКлиентКомпания КАК КонечныйКлиентКомпания
	               |ПОМЕСТИТЬ ДанныеФайла
	               |ИЗ
	               |	&ДанныеФайла КАК ДанныеФайла
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеФайла.КодСУSOWA КАК КодСУSOWA,
	               |	ДанныеФайла.DealerID КАК DealerID,
	               |	ДанныеФайла.DealerName КАК DealerName,
	               |	ДанныеФайла.CustomerName КАК CustomerName,
	               |	ДанныеФайла.CustomerINN КАК CustomerINN,
	               |	ДанныеФайла.StdID КАК StdID,
	               |	ДанныеФайла.AmModel КАК AmModel,
	               |	ДанныеФайла.Квота КАК Квота,
	               |	ДанныеФайла.DD КАК DD,
	               |	ДанныеФайла.СебестоимостьСНДС КАК СебестоимостьСНДС,
	               |	ДанныеФайла.СпецDealerNet КАК СпецDealerNet,
	               |	ДанныеФайла.СпецCustomerPrice КАК СпецCustomerPrice,
	               |	ДанныеФайла.ПроцентОплаты КАК ПроцентОплаты,
	               |	ДанныеФайла.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
	               |	ДанныеФайла.Дилер КАК Дилер,
	               |	ДанныеФайла.КонечныйКлиент КАК КонечныйКлиент,
	               |	ДанныеФайла.ПрайсDealerNet КАК ПрайсDealerNet,
	               |	ДанныеФайла.ПрайсCustomerPrice КАК ПрайсCustomerPrice,
	               |	ДанныеФайла.DistributorNet КАК DistributorNet,
	               |	ДанныеФайла.RUНомер КАК RUНомер,
	               |	ДанныеФайла.Salesman КАК Salesman,
	               |	ДанныеФайла.ПродавецДилера КАК ПродавецДилера,
	               |	ДанныеФайла.Комментарий КАК Комментарий,
	               |	ДанныеФайла.КонечныйКлиентКомпания КАК КонечныйКлиентКомпания,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_МоделиПродуктов.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_МоделиПродуктов.ПустаяСсылка))) КАК Модель
	               |ПОМЕСТИТЬ ПромежуточнаяВТ
	               |ИЗ
	               |	ДанныеФайла КАК ДанныеФайла
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_МоделиПродуктов КАК Scan_МоделиПродуктов
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.AmModel = """"
	               |					ТОГДА ДанныеФайла.AmModel = Scan_МоделиПродуктов.Наименование
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеФайла.КодСУSOWA,
	               |	ДанныеФайла.DealerID,
	               |	ДанныеФайла.DealerName,
	               |	ДанныеФайла.CustomerName,
	               |	ДанныеФайла.CustomerINN,
	               |	ДанныеФайла.StdID,
	               |	ДанныеФайла.AmModel,
	               |	ДанныеФайла.Квота,
	               |	ДанныеФайла.DD,
	               |	ДанныеФайла.СебестоимостьСНДС,
	               |	ДанныеФайла.СпецDealerNet,
	               |	ДанныеФайла.СпецCustomerPrice,
	               |	ДанныеФайла.ПроцентОплаты,
	               |	ДанныеФайла.СрокДействияСпециальныхУсловий,
	               |	ДанныеФайла.Дилер,
	               |	ДанныеФайла.КонечныйКлиент,
	               |	ДанныеФайла.ПрайсDealerNet,
	               |	ДанныеФайла.ПрайсCustomerPrice,
	               |	ДанныеФайла.DistributorNet,
	               |	ДанныеФайла.RUНомер,
	               |	ДанныеФайла.Salesman,
	               |	ДанныеФайла.ПродавецДилера,
	               |	ДанныеФайла.Комментарий,
	               |	ДанныеФайла.КонечныйКлиентКомпания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_СпецификацияСтандартнойМодели.Ссылка КАК СтандартнаяСпецификация,
	               |	Scan_СпецификацияСтандартнойМодели.НомерСпецификации КАК НомерСпецификации
	               |ПОМЕСТИТЬ СпецификацииСТ
	               |ИЗ
	               |	Документ.Scan_СпецификацияСтандартнойМодели КАК Scan_СпецификацияСтандартнойМодели
	               |ГДЕ
	               |	Scan_СпецификацияСтандартнойМодели.ПометкаУдаления = ЛОЖЬ
	               |	И Scan_СпецификацияСтандартнойМодели.Проведен = ИСТИНА
	               |	И Scan_СпецификацияСтандартнойМодели.Сторнирован = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПромежуточнаяВТ.StdID КАК StdID,
	               |	ЕСТЬNULL(СпецификацииСТ.СтандартнаяСпецификация, ЗНАЧЕНИЕ(Документ.Scan_СпецификацияСтандартнойМодели.ПустаяСсылка)) КАК СтандартнаяСпецификация
	               |ПОМЕСТИТЬ СпецификацияСтандартнойМодели
	               |ИЗ
	               |	ПромежуточнаяВТ КАК ПромежуточнаяВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСТ КАК СпецификацииСТ
	               |		ПО ПромежуточнаяВТ.StdID = СпецификацииСТ.НомерСпецификации
	               |ГДЕ
	               |	НЕ ПромежуточнаяВТ.StdID В ("""", ""STD"", ""UUO"", ""UO"")
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПромежуточнаяВТ.КодСУSOWA КАК КодСУSOWA,
	               |	ПромежуточнаяВТ.DealerID КАК DealerID,
	               |	ПромежуточнаяВТ.DealerName КАК DealerName,
	               |	ПромежуточнаяВТ.CustomerName КАК CustomerName,
	               |	ПромежуточнаяВТ.CustomerINN КАК CustomerINN,
	               |	ПромежуточнаяВТ.StdID КАК StdID,
	               |	ВЫБОР
	               |		КОГДА ПромежуточнаяВТ.StdID = ""UO""
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСпецификации.Uo)
	               |		КОГДА ПромежуточнаяВТ.StdID = ""UUO""
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСпецификации.Uuo)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Scan_ТипыСпецификации.Std)
	               |	КОНЕЦ КАК УникальностьСпецификации,
	               |	ПромежуточнаяВТ.AmModel КАК AmModel,
	               |	ПромежуточнаяВТ.Квота КАК Квота,
	               |	ПромежуточнаяВТ.DD КАК DD,
	               |	ПромежуточнаяВТ.СебестоимостьСНДС КАК СебестоимостьСНДС,
	               |	ПромежуточнаяВТ.СпецDealerNet КАК СпецDealerNet,
	               |	ПромежуточнаяВТ.СпецCustomerPrice КАК СпецCustomerPrice,
	               |	ПромежуточнаяВТ.ПроцентОплаты КАК ПроцентОплаты,
	               |	ПромежуточнаяВТ.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
	               |	ПромежуточнаяВТ.Дилер КАК Дилер,
	               |	ПромежуточнаяВТ.Модель КАК Модель,
	               |	ПромежуточнаяВТ.КонечныйКлиент КАК КонечныйКлиент,
	               |	ПромежуточнаяВТ.ПрайсDealerNet КАК ПрайсDealerNet,
	               |	ПромежуточнаяВТ.ПрайсCustomerPrice КАК ПрайсCustomerPrice,
	               |	ПромежуточнаяВТ.DistributorNet КАК DistributorNet,
	               |	ПромежуточнаяВТ.RUНомер КАК RUНомер,
	               |	ПромежуточнаяВТ.Salesman КАК Salesman,
	               |	ПромежуточнаяВТ.ПродавецДилера КАК ПродавецДилера,
	               |	ПромежуточнаяВТ.Комментарий КАК Комментарий,
	               |	ПромежуточнаяВТ.КонечныйКлиентКомпания КАК КонечныйКлиентКомпания,
	               |	СпецификацияСтандартнойМодели.СтандартнаяСпецификация КАК СтандартнаяСпецификация
	               |ИЗ
	               |	ПромежуточнаяВТ КАК ПромежуточнаяВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацияСтандартнойМодели КАК СпецификацияСтандартнойМодели
	               |		ПО ПромежуточнаяВТ.StdID = СпецификацияСтандартнойМодели.StdID";
	Запрос.УстановитьПараметр("ДанныеФайла",СУТаблицаДанныхСУ.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СУТаблицаДанныхСУ.Загрузить(РезультатЗапроса);
	ВсегоСтрокСУДанныеСУ = СУТаблицаДанныхСУ.Количество();
	
	// Доп. проверка модели
	Для Каждого ТекСтрока Из СУТаблицаДанныхСУ Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Модель) Тогда
			НаименоавниеМодели = ТекСтрока.AmModel + "NA";
			ТекМодель = Справочники.Scan_МоделиПродуктов.НайтиПоНаименованию(НаименоавниеМодели,Истина);
			Если ЗначениеЗаполнено(ТекМодель) Тогда
				ТекСтрока.Модель = ТекМодель;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСписокПродуктов(ПараметрыЗагрузки)
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла со списком продуктов'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла со списком продуктов'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 4;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	НомерСтрокиФайла = 2;
	СУТаблицаСписокПродуктов.Очистить();
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		Если СокрЛП(СтрокаФайла.SpPriceId) = "Код документа СУ" Тогда
			Продолжить;	
		КонецЕсли;
		НоваяСтрока = СУТаблицаСписокПродуктов.Добавить();
		
		НоваяСтрока.КодСУSOWA = Формат(СтрокаФайла.SpPriceId, "ЧГ=0");
		НоваяСтрока.CowOrderId = СокрЛП(СтрокаФайла.CowOrderId); 
		НоваяСтрока.ChNo = СокрЛП(СтрокаФайла.ChNo);
		НоваяСтрока.AmModel = СокрЛП(СтрокаФайла.AmModel);		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеФайла.КодСУSOWA КАК КодСУSOWA,
	               |	ДанныеФайла.CowOrderId КАК CowOrderId,
	               |	ДанныеФайла.ChNo КАК ChNo,
	               |	ДанныеФайла.AmModel КАК AmModel
	               |ПОМЕСТИТЬ ДанныеФайла
	               |ИЗ
	               |	&ДанныеФайла КАК ДанныеФайла
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеФайла.КодСУSOWA КАК КодСУSOWA,
	               |	ДанныеФайла.CowOrderId КАК CowOrderId,
	               |	ДанныеФайла.ChNo КАК ChNo,
	               |	ДанныеФайла.AmModel КАК AmModel,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_ЗаказыНаЗавод.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка))) КАК ЗаказНаЗавод,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_МоделиПродуктов.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_МоделиПродуктов.ПустаяСсылка))) КАК Модель
	               |ПОМЕСТИТЬ ПромежуточнаяВТ
	               |ИЗ
	               |	ДанныеФайла КАК ДанныеФайла
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.CowOrderId = """"
	               |					ТОГДА ДанныеФайла.CowOrderId = Scan_ЗаказыНаЗавод.Наименование
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_МоделиПродуктов КАК Scan_МоделиПродуктов
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.AmModel = """"
	               |					ТОГДА ДанныеФайла.AmModel = Scan_МоделиПродуктов.Наименование
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеФайла.КодСУSOWA,
	               |	ДанныеФайла.CowOrderId,
	               |	ДанныеФайла.ChNo,
	               |	ДанныеФайла.AmModel
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПромежуточнаяВТ.КодСУSOWA КАК КодСУSOWA,
	               |	ПромежуточнаяВТ.CowOrderId КАК CowOrderId,
	               |	ПромежуточнаяВТ.ChNo КАК ChNo,
	               |	ПромежуточнаяВТ.AmModel КАК AmModel,
	               |	ПромежуточнаяВТ.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ПромежуточнаяВТ.Модель КАК Модель,
	               |	ВЫБОР
	               |		КОГДА ПромежуточнаяВТ.ЗаказНаЗавод = ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
	               |		ИНАЧЕ ЕСТЬNULL(Scan_Изделия.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка))
	               |	КОНЕЦ КАК Продукт,
	               |	МАКСИМУМ(Scan_СпециальныеУсловия.Ссылка) КАК СУ
	               |ПОМЕСТИТЬ ДанныеССУ
	               |ИЗ
	               |	ПромежуточнаяВТ КАК ПромежуточнаяВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_Изделия КАК Scan_Изделия
	               |		ПО ПромежуточнаяВТ.ЗаказНаЗавод = Scan_Изделия.ЗаказНаЗавод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СпециальныеУсловия КАК Scan_СпециальныеУсловия
	               |		ПО ПромежуточнаяВТ.КодСУSOWA = Scan_СпециальныеУсловия.КодСУSOWA
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПромежуточнаяВТ.Модель,
	               |	ПромежуточнаяВТ.ЗаказНаЗавод,
	               |	ВЫБОР
	               |		КОГДА ПромежуточнаяВТ.ЗаказНаЗавод = ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
	               |		ИНАЧЕ ЕСТЬNULL(Scan_Изделия.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка))
	               |	КОНЕЦ,
	               |	ПромежуточнаяВТ.AmModel,
	               |	ПромежуточнаяВТ.КодСУSOWA,
	               |	ПромежуточнаяВТ.CowOrderId,
	               |	ПромежуточнаяВТ.ChNo
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеССУ.КодСУSOWA КАК КодСУSOWA,
	               |	ДанныеССУ.CowOrderId КАК CowOrderId,
	               |	ДанныеССУ.ChNo КАК ChNo,
	               |	ДанныеССУ.AmModel КАК AmModel,
	               |	ДанныеССУ.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ДанныеССУ.Модель КАК Модель,
	               |	ДанныеССУ.Продукт КАК Продукт,
	               |	ДанныеССУ.СУ КАК СУ,
	               |	ДанныеССУ.Продукт.МодельПродукта КАК ПродуктМодель,
	               |	ДанныеССУ.СУ.Модель КАК СУМодель,
	               |	ДанныеССУ.Продукт.МодельПродукта.Наименование КАК ПродуктМодельНаименование
	               |ИЗ
	               |	ДанныеССУ КАК ДанныеССУ";
	Запрос.УстановитьПараметр("ДанныеФайла",СУТаблицаСписокПродуктов.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СУТаблицаСписокПродуктов.Загрузить(РезультатЗапроса);
	ВсегоСтрокСУТаблицаСписокПродуктов = СУТаблицаСписокПродуктов.Количество();
	
	Для Каждого ТекСтрока Из СУТаблицаСписокПродуктов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПродуктМодель) И ЗначениеЗаполнено(ТекСтрока.Модель) И
			ТекСтрока.ПродуктМодель <> ТекСтрока.Модель Тогда
			ТекСтрока.Примечание = "Модель продукта не соответствует модели из файла.";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.СУМодель) И ЗначениеЗаполнено(ТекСтрока.Модель) И
			ТекСтрока.СУМодель <> ТекСтрока.Модель Тогда
			ТекСтрока.Примечание = "Модель из спец. условий не соответствует модели из файла.";
		КонецЕсли;
	КонецЦикла;
	
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла со списком продуктов'; en = 'Downloading finish'")+" "+ТекущаяДата());

КонецПроцедуры

&НаСервере
Процедура ПрочитатьИсториюСтатусов(ПараметрыЗагрузки)
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	                 
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла с историей статусов'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла с историей статусов'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 10;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	НомерСтрокиФайла = 2;
	СУИсторияСтатусовСУ.Очистить();
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		Если СокрЛП(СтрокаФайла.SpPriceId) = "Код документа СУ" Тогда
			Продолжить;	
		КонецЕсли;
		НоваяСтрока = СУИсторияСтатусовСУ.Добавить();
		
		НоваяСтрока.КодСУSOWA = Формат(СтрокаФайла.SpPriceId, "ЧГ=0");
		НоваяСтрока.Status = СокрЛП(СтрокаФайла.Status); 
		НоваяСтрока.КоличествоПродуктов = Формат(СтрокаФайла.AmQty, "ЧГ=0");
		НоваяСтрока.DeliveryDate = СокрЛП(СтрокаФайла.MaxCDD);	
		НоваяСтрока.DealerNet = Формат(СтрокаФайла.DealerPrice, "ЧГ=0");	
		НоваяСтрока.CustomerPrice = Формат(СтрокаФайла.CustomerPrice, "ЧГ=0");	
		НоваяСтрока.ТекстСообщения = СокрЛП(СтрокаФайла.Notes);	
		НоваяСтрока.Период = СтрокаФайла.CreatedAt;	
		НоваяСтрока.CreatedBy = СокрЛП(СтрокаФайла.CreatedBy);	    		
		НоваяСтрока.СрокДействияСпециальныхУсловий = СокрЛП(СтрокаФайла.ValidTill); 		

	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеФайла.КодСУSOWA КАК КодСУSOWA,
	               |	ДанныеФайла.Status КАК Status,
	               |	ДанныеФайла.КоличествоПродуктов КАК КоличествоПродуктов,
	               |	ДанныеФайла.DeliveryDate КАК DeliveryDate,
	               |	ДанныеФайла.DealerNet КАК DealerNet,
	               |	ДанныеФайла.CustomerPrice КАК CustomerPrice,
	               |	ДанныеФайла.ТекстСообщения КАК ТекстСообщения,
	               |	ДанныеФайла.Период КАК Период,
	               |	ДанныеФайла.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
	               |	ДанныеФайла.CreatedBy КАК CreatedBy
	               |ПОМЕСТИТЬ ДанныеФайла
	               |ИЗ
	               |	&ДанныеФайла КАК ДанныеФайла
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеФайла.КодСУSOWA КАК КодСУSOWA,
	               |	ДанныеФайла.Status КАК Status,
	               |	ДанныеФайла.КоличествоПродуктов КАК КоличествоПродуктов,
	               |	ДанныеФайла.DeliveryDate КАК DeliveryDate,
	               |	ДанныеФайла.DealerNet КАК DealerNet,
	               |	ДанныеФайла.CustomerPrice КАК CustomerPrice,
	               |	ДанныеФайла.ТекстСообщения КАК ТекстСообщения,
	               |	ДанныеФайла.Период КАК Период,
	               |	ДанныеФайла.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
	               |	ДанныеФайла.CreatedBy КАК CreatedBy,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ДанныеФайла.Status = ""Одобрено""
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.ОдобреноНетВСОП)
	               |			ИНАЧЕ ЕСТЬNULL(Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.ПустаяСсылка))
	               |		КОНЕЦ) КАК Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(Пользователи.Ссылка, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))) КАК Пользователь,
	               |	МАКСИМУМ(Scan_СпециальныеУсловия.Ссылка) КАК СУ
	               |ИЗ
	               |	ДанныеФайла КАК ДанныеФайла
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий КАК Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.Status = """"
	               |					ТОГДА ДанныеФайла.Status = Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.Наименование
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ДанныеФайла.CreatedBy = """"
	               |					ТОГДА ДанныеФайла.CreatedBy = Пользователи.ЛогинНаПортале
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СпециальныеУсловия КАК Scan_СпециальныеУсловия
	               |		ПО ДанныеФайла.КодСУSOWA = Scan_СпециальныеУсловия.КодСУSOWA
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеФайла.КодСУSOWA,
	               |	ДанныеФайла.Status,
	               |	ДанныеФайла.КоличествоПродуктов,
	               |	ДанныеФайла.DeliveryDate,
	               |	ДанныеФайла.DealerNet,
	               |	ДанныеФайла.CustomerPrice,
	               |	ДанныеФайла.ТекстСообщения,
	               |	ДанныеФайла.Период,
	               |	ДанныеФайла.СрокДействияСпециальныхУсловий,
	               |	ДанныеФайла.CreatedBy";
	Запрос.УстановитьПараметр("ДанныеФайла",СУИсторияСтатусовСУ.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СУИсторияСтатусовСУ.Загрузить(РезультатЗапроса);
	ВсегоСтрокСУИсторияСтатусовСУ = СУИсторияСтатусовСУ.Количество();
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла с историей статусов'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура СУЗаписатьДанныеСУ(Команда)
	Если СУТаблицаДанныхСУ.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать файл с данными СУ");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиДанныхСУ",0.1,Истина);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиДанныхСУ()
	
	ВывестиСообщениеПол("Начата запись данных" + " " + ТекущаяДата());
	СУЗаписатьДанныеСУНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СУЗаписатьДанныеСУНаСервере()
	ОшибкиПриЗаписи = 0;

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	                          
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанныеСУ.КодСУSOWA КАК КодСУSOWA,
		|	ТаблицаДанныеСУ.DealerID КАК DealerID,
		|	ТаблицаДанныеСУ.DealerName КАК DealerName,
		|	ТаблицаДанныеСУ.CustomerName КАК CustomerName,
		|	ТаблицаДанныеСУ.CustomerINN КАК CustomerINN,
		|	ТаблицаДанныеСУ.StdID КАК StdID,
		|	ТаблицаДанныеСУ.AmModel КАК AmModel,
		|	ТаблицаДанныеСУ.Квота КАК Квота,
		|	ТаблицаДанныеСУ.DD КАК DD,
		|	ТаблицаДанныеСУ.СебестоимостьСНДС КАК СебестоимостьСНДС,
		|	ТаблицаДанныеСУ.СпецDealerNet КАК СпецDealerNet,
		|	ТаблицаДанныеСУ.СпецCustomerPrice КАК СпецCustomerPrice,
		|	ТаблицаДанныеСУ.ПроцентОплаты КАК ПроцентОплаты,
		|	ТаблицаДанныеСУ.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
		|	ТаблицаДанныеСУ.Дилер КАК Дилер,
		|	ТаблицаДанныеСУ.Модель КАК Модель,
		|	ТаблицаДанныеСУ.КонечныйКлиент КАК КонечныйКлиент,
		|	ТаблицаДанныеСУ.ПрайсDealerNet КАК ПрайсDealerNet,
		|	ТаблицаДанныеСУ.ПрайсCustomerPrice КАК ПрайсCustomerPrice,
		|	ТаблицаДанныеСУ.DistributorNet КАК DistributorNet,
		|	ТаблицаДанныеСУ.RUНомер КАК RUНомер,
		|	ТаблицаДанныеСУ.Salesman КАК Salesman,
		|	ТаблицаДанныеСУ.ПродавецДилера КАК ПродавецДилера,
		|	ТаблицаДанныеСУ.Комментарий КАК Комментарий,
	    |	ТаблицаДанныеСУ.КонечныйКлиентКомпания КАК КонечныйКлиентКомпания,
		|	ТаблицаДанныеСУ.УникальностьСпецификации КАК УникальностьСпецификации,
		|	ТаблицаДанныеСУ.СтандартнаяСпецификация КАК СтандартнаяСпецификация
		|ПОМЕСТИТЬ ТаблицаДанныхСУ
		|ИЗ
		|	&ТаблицаДанныеСУ КАК ТаблицаДанныеСУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанныхСУ.КодСУSOWA КАК КодСУSOWA,
		|	ТаблицаДанныхСУ.DealerName КАК DealerName,
		|	МАКСИМУМ(Scan_СпециальныеУсловия.Ссылка) КАК СУ,
		|	ТаблицаДанныхСУ.DealerID КАК DealerID,
		|	ТаблицаДанныхСУ.CustomerName КАК CustomerName,
		|	ТаблицаДанныхСУ.CustomerINN КАК CustomerINN,
		|	ТаблицаДанныхСУ.StdID КАК StdID,
		|	ТаблицаДанныхСУ.AmModel КАК AmModel,
		|	ТаблицаДанныхСУ.Квота КАК Квота,
		|	ТаблицаДанныхСУ.DD КАК DD,
		|	ТаблицаДанныхСУ.СебестоимостьСНДС КАК СебестоимостьСНДС,
		|	ТаблицаДанныхСУ.СпецDealerNet КАК СпецDealerNet,
		|	ТаблицаДанныхСУ.СпецCustomerPrice КАК СпецCustomerPrice,
		|	ТаблицаДанныхСУ.ПроцентОплаты КАК ПроцентОплаты,
		|	ТаблицаДанныхСУ.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
		|	ТаблицаДанныхСУ.Дилер КАК Дилер,
		|	ТаблицаДанныхСУ.Модель КАК Модель,
		|	ТаблицаДанныхСУ.КонечныйКлиент КАК КонечныйКлиент,
		|	ТаблицаДанныхСУ.ПрайсDealerNet КАК ПрайсDealerNet,
		|	ТаблицаДанныхСУ.ПрайсCustomerPrice КАК ПрайсCustomerPrice,
		|	ТаблицаДанныхСУ.DistributorNet КАК DistributorNet,
		|	ТаблицаДанныхСУ.RUНомер КАК RUНомер,
		|	ТаблицаДанныхСУ.Salesman КАК Salesman,
		|	ТаблицаДанныхСУ.ПродавецДилера КАК ПродавецДилера,
		|	ТаблицаДанныхСУ.Комментарий КАК Комментарий,
	    |	ТаблицаДанныхСУ.КонечныйКлиентКомпания КАК КонечныйКлиентКомпания,
		|	ТаблицаДанныхСУ.УникальностьСпецификации КАК УникальностьСпецификации,
		|	ТаблицаДанныхСУ.СтандартнаяСпецификация КАК СтандартнаяСпецификация
		|ИЗ
		|	ТаблицаДанныхСУ КАК ТаблицаДанныхСУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СпециальныеУсловия КАК Scan_СпециальныеУсловия
		|		ПО ТаблицаДанныхСУ.КодСУSOWA = Scan_СпециальныеУсловия.КодСУSOWA
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанныхСУ.КодСУSOWA,
		|	ТаблицаДанныхСУ.DealerName,
		|	ТаблицаДанныхСУ.DealerID,
		|	ТаблицаДанныхСУ.КонечныйКлиент,
		|	ТаблицаДанныхСУ.СпецDealerNet,
		|	ТаблицаДанныхСУ.Квота,
		|	ТаблицаДанныхСУ.ПроцентОплаты,
		|	ТаблицаДанныхСУ.CustomerINN,
		|	ТаблицаДанныхСУ.CustomerName,
		|	ТаблицаДанныхСУ.Модель,
		|	ТаблицаДанныхСУ.AmModel,
		|	ТаблицаДанныхСУ.DD,
		|	ТаблицаДанныхСУ.УникальностьСпецификации,
		|	ТаблицаДанныхСУ.СебестоимостьСНДС,
		|	ТаблицаДанныхСУ.СтандартнаяСпецификация,
		|	ТаблицаДанныхСУ.StdID,
		|	ТаблицаДанныхСУ.СпецCustomerPrice,
		|	ТаблицаДанныхСУ.СрокДействияСпециальныхУсловий,
		|	ТаблицаДанныхСУ.КонечныйКлиентКомпания,
		|	ТаблицаДанныхСУ.ПрайсDealerNet,
		|	ТаблицаДанныхСУ.ПрайсCustomerPrice,
		|	ТаблицаДанныхСУ.DistributorNet,
		|	ТаблицаДанныхСУ.RUНомер,
		|	ТаблицаДанныхСУ.Salesman,
		|	ТаблицаДанныхСУ.ПродавецДилера,
		|	ТаблицаДанныхСУ.Комментарий,
	    |	ТаблицаДанныхСУ.Дилер";
	Запрос.УстановитьПараметр("ТаблицаДанныеСУ",СУТаблицаДанныхСУ.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СУ) Тогда
			// СУ уже есть
			
			//нСтрока = ОшибкиЗагрузкиСУ.Добавить();
			//
			//нСтрока.СУ = ВыборкаДетальныеЗаписи.СУ;
			//нСтрока.КодСУSOWA = ВыборкаДетальныеЗаписи.КодСУSOWA;
			//нСтрока.ОписаниеОшибки = "В базе уже есть СУ с указанным кодом."; 
			//
			//ОшибкиПриЗаписи = ОшибкиПриЗаписи + 1;
			//
			//Продолжить;
			СУОбъект = ВыборкаДетальныеЗаписи.СУ.ПолучитьОбъект();
		Иначе
			СУОбъект = Справочники.Scan_СпециальныеУсловия.СоздатьЭлемент();			
		КонецЕсли;
		
		//СУОбъект = Справочники.Scan_СпециальныеУсловия.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СУОбъект, ВыборкаДетальныеЗаписи);
		СУОбъект.КоличествоПродуктов = ВыборкаДетальныеЗаписи.Квота;
		СУОбъект.DeliveryDate = ВыборкаДетальныеЗаписи.DD;
		
		СУОбъект.СтавкаНДС = Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС;  		
		ЗначениеСтавкиНДС =  Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СУОбъект.СтавкаНДС,"Ставка");
		
		СУОбъект.Наименование = "СУ / " + СУОбъект.Дилер + " / " + СУОбъект.Модель + " / " + СУОбъект.КонечныйКлиент;
	
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПроцентОплаты) Тогда
			СУОбъект.УсловияОплаты.Очистить();
			
			СтрокаУсловияОплаты = СУОбъект.УсловияОплаты.Добавить();	
			СтрокаУсловияОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыОплат.Предоплата");
			СтрокаУсловияОплаты.ПроцентОплаты = ВыборкаДетальныеЗаписи.ПроцентОплаты;
			СтрокаУсловияОплаты.СрокОплатыАванса = 5;
			СтрокаУсловияОплаты.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыДоговора");
			
			// доп. требование
			СтрокаУсловияОплаты = СУОбъект.УсловияОплаты.Добавить();	
			СтрокаУсловияОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыОплат.Постоплата");
			СтрокаУсловияОплаты.ПроцентОплаты = 100 - ВыборкаДетальныеЗаписи.ПроцентОплаты;
			СтрокаУсловияОплаты.СрокОплатыАванса = 30;
			СтрокаУсловияОплаты.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыОтгрузкиDDS");
						
		КонецЕсли;
		
		// Заполним маржу
		
		СУОбъект.МаржаДист = 0; 		
		СУОбъект.МаржаДилера = 0;
		
		Если ЗначениеЗаполнено(СУОбъект.ПрайсDealerNet) Тогда 		
			Маржа = СУОбъект.ПрайсDealerNet - СУОбъект.СебестоимостьСНДС;
			СУОбъект.ПрайсМаржаDist = окр(Маржа/(Маржа+СУОбъект.СебестоимостьСНДС) * 100,2);
		Иначе
			СУОбъект.ПрайсМаржаDist = 0;
		КонецЕсли; 	
		
		Если ЗначениеЗаполнено(СУОбъект.ПрайсCustomerPrice) Тогда
			Маржа = СУОбъект.ПрайсCustomerPrice - СУОбъект.ПрайсDealerNet;
			СтароеЗначение = СУОбъект.ПрайсМаржаDealer;
			СУОбъект.ПрайсМаржаDealer = окр(Маржа/(Маржа+СУОбъект.ПрайсDealerNet) * 100,2);
		Иначе
			СУОбъект.ПрайсМаржаDealer = 0;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СУОбъект.СпецDealerNet) Тогда 		
			Маржа = СУОбъект.СпецDealerNet - СУОбъект.СебестоимостьСНДС;
			СУОбъект.СпецМаржаDist = окр(Маржа/(Маржа+СУОбъект.СебестоимостьСНДС) * 100,2);
			СУОбъект.ЦенаБезНДС = 100 * СУОбъект.СпецDealerNet/ (100 + ЗначениеСтавкиНДС);
		Иначе
			СУОбъект.СпецМаржаDist = 0;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СУОбъект.СпецCustomerPrice) Тогда
			Маржа = СУОбъект.СпецCustomerPrice - СУОбъект.СпецDealerNet;
			СтароеЗначение = СУОбъект.СпецМаржаDealer; 
			СУОбъект.СпецМаржаDealer = окр(Маржа/(Маржа+СУОбъект.СпецDealerNet) * 100,2);
			СУОбъект.ЦенаДляКлиентаБезНДС = 100 * СУОбъект.СпецCustomerPrice/ (100 + ЗначениеСтавкиНДС);
		Иначе
			СУОбъект.СпецМаржаDealer = 0;
		КонецЕсли;
		
		Попытка
			СУОбъект.Записать();
		Исключение
			нСтрока = ОшибкиЗагрузкиСУ.Добавить();
			
			нСтрока.СУ = СУОбъект.Ссылка;
			нСтрока.КодСУSOWA = СУОбъект.КодСУSOWA;
			нСтрока.ОписаниеОшибки = "Не удалось записать СУ. " + ОписаниеОшибки(); 
			
			ОшибкиПриЗаписи = ОшибкиПриЗаписи + 1; 				
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Если ОшибкиПриЗаписи <> 0 Тогда
		Элементы.ЗагрузкаСУ.ТекущаяСтраница = Элементы.ЗагрузкаСУОшибкиЗагрузки;
	КонецЕсли;
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Ошибок при записи : %1",,,,, ОшибкиПриЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура СУЗаполнитьСписокПродуктов(Команда)
	Если СУТаблицаСписокПродуктов.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать файл со списком продуктов");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиСпискаПродуктов",0.1,Истина);	
	КонецЕсли;				
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиСпискаПродуктов()
	
	ВывестиСообщениеПол("Начата запись данных" + " " + ТекущаяДата());
	СУЗаполнитьСписокПродуктовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СУЗаполнитьСписокПродуктовНаСервере()

	ОшибкиПриЗаписи = 0;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСписокПродуктов.КодСУSOWA КАК КодСУSOWA,
		|	ТаблицаСписокПродуктов.CowOrderId КАК CowOrderId,
		|	ТаблицаСписокПродуктов.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ТаблицаСписокПродуктов.Продукт КАК Продукт,
		|	ТаблицаСписокПродуктов.ChNo КАК ChNo,
		|	ТаблицаСписокПродуктов.AmModel КАК AmModel,
		|	ТаблицаСписокПродуктов.Модель КАК Модель,
		|	ТаблицаСписокПродуктов.СУ КАК СУ
		|ПОМЕСТИТЬ ВремТаблицаСписокПродуктов
		|ИЗ
		|	&ТаблицаСписокПродуктов КАК ТаблицаСписокПродуктов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремТаблицаСписокПродуктов.КодСУSOWA КАК КодСУSOWA,
		|	ВремТаблицаСписокПродуктов.CowOrderId КАК CowOrderId,
		|	ВремТаблицаСписокПродуктов.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ВремТаблицаСписокПродуктов.Продукт КАК Продукт,
		|	ВремТаблицаСписокПродуктов.ChNo КАК ChNo,
		|	ВремТаблицаСписокПродуктов.AmModel КАК AmModel,
		|	ВремТаблицаСписокПродуктов.Модель КАК Модель,
		|	ВремТаблицаСписокПродуктов.СУ КАК СУТЗ,
		|	ЕСТЬNULL(Scan_СпециальныеУсловия.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_СпециальныеУсловия.ПустаяСсылка)) КАК СУ
		|ИЗ
		|	ВремТаблицаСписокПродуктов КАК ВремТаблицаСписокПродуктов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СпециальныеУсловия КАК Scan_СпециальныеУсловия
		|		ПО ВремТаблицаСписокПродуктов.КодСУSOWA = Scan_СпециальныеУсловия.КодСУSOWA
		|ИТОГИ
		|	МАКСИМУМ(СУ)
		|ПО
		|	КодСУSOWA";
	Запрос.УстановитьПараметр("ТаблицаСписокПродуктов",СУТаблицаСписокПродуктов.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКодСУSOWA = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКодСУSOWA.Следующий() Цикл
		Если ВыборкаКодСУSOWA.СУ = ПредопределенноеЗначение("Справочник.Scan_СпециальныеУсловия.ПустаяСсылка") Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаКодСУSOWA.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				нСтрока = ОшибкиЗагрузкиСУ.Добавить();
				
				нСтрока.КодСУSOWA = ВыборкаДетальныеЗаписи.КодСУSOWA;
				нСтрока.ОписаниеОшибки = "Не удалось найти СУ по коду СУ SOWA."; 
				
				ОшибкиПриЗаписи = ОшибкиПриЗаписи + 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СУОбъект = ВыборкаКодСУSOWA.СУ.ПолучитьОбъект();
		СУОбъект.СписокПродуктов.Очистить();
		
		ВыборкаДетальныеЗаписи = ВыборкаКодСУSOWA.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Продукт) Тогда
				нСтрока = ОшибкиЗагрузкиСУ.Добавить();
				
				нСтрока.СУ = ВыборкаДетальныеЗаписи.СУ;
				нСтрока.КодСУSOWA = ВыборкаДетальныеЗаписи.КодСУSOWA;
				нСтрока.Продукт = ВыборкаДетальныеЗаписи.Продукт;
				нСтрока.ОписаниеОшибки = "Не удалось найти продукт " + ВыборкаДетальныеЗаписи.ChNo + ", по заказу " + ВыборкаДетальныеЗаписи.CowOrderId; 
				
				ОшибкиПриЗаписи = ОшибкиПриЗаписи + 1;
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СУОбъект.СписокПродуктов.Добавить(); 			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		Попытка
			СУОбъект.Записать();
		Исключение
			Для Каждого ТекСтрока Из СУОбъект Цикл
				нСтрока = ОшибкиЗагрузкиСУ.Добавить();
				
				нСтрока.СУ = СУОбъект.Ссылка;
				нСтрока.КодСУSOWA = СУОбъект.КодСУSOWA;
				нСтрока.Продукт = ТекСтрока.Продукт;
				нСтрока.ОписаниеОшибки = "Не удалось записать список продуктов в СУ."; 
			
				ОшибкиПриЗаписи = ОшибкиПриЗаписи + 1;
			КонецЦикла;
		КонецПопытки;    		
	КонецЦикла;
	
	Если ОшибкиПриЗаписи <> 0 Тогда
		Элементы.ЗагрузкаСУ.ТекущаяСтраница = Элементы.ЗагрузкаСУОшибкиЗагрузки;
	КонецЕсли;
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Ошибок при записи : %1",,,,, ОшибкиПриЗаписи);

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаКлиенте
Процедура СУЗаполнитьИсториюСтатусов(Команда)
	Если СУИсторияСтатусовСУ.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать файл с историей статусов");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиИсторииСтатусов",0.1,Истина);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиИсторииСтатусов()
	
	ВывестиСообщениеПол("Начата запись данных" + " " + ТекущаяДата());
	СУЗаполнитьИсториюСтатусовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СУЗаполнитьИсториюСтатусовНаСервере()

	ОшибкиПриЗаписи = 0;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИсторияСтатусов.КодСУSOWA КАК КодСУSOWA,
		|	ТаблицаИсторияСтатусов.Статус КАК Статус,
		|	ТаблицаИсторияСтатусов.Status КАК Status,
		|	ТаблицаИсторияСтатусов.КоличествоПродуктов КАК КоличествоПродуктов,
		|	ТаблицаИсторияСтатусов.DeliveryDate КАК DeliveryDate,
		|	ТаблицаИсторияСтатусов.DealerNet КАК DealerNet,
		|	ТаблицаИсторияСтатусов.CustomerPrice КАК CustomerPrice,
		|	ТаблицаИсторияСтатусов.ТекстСообщения КАК ТекстСообщения,
		|	ТаблицаИсторияСтатусов.Период КАК Период,
		|	ТаблицаИсторияСтатусов.CreatedBy КАК CreatedBy,
		|	ТаблицаИсторияСтатусов.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
		|	ТаблицаИсторияСтатусов.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ВремТаблицаИсторияСтатусов
		|ИЗ
		|	&ТаблицаИсторияСтатусов КАК ТаблицаИсторияСтатусов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремТаблицаИсторияСтатусов.КодСУSOWA КАК КодСУSOWA,
		|	ВремТаблицаИсторияСтатусов.Статус КАК Статус,
		|	ВремТаблицаИсторияСтатусов.Status КАК Status,
		|	ВремТаблицаИсторияСтатусов.КоличествоПродуктов КАК КоличествоПродуктов,
		|	ВремТаблицаИсторияСтатусов.DeliveryDate КАК DeliveryDate,
		|	ВремТаблицаИсторияСтатусов.DealerNet КАК DealerNet,
		|	ВремТаблицаИсторияСтатусов.CustomerPrice КАК CustomerPrice,
		|	ВремТаблицаИсторияСтатусов.ТекстСообщения КАК ТекстСообщения,
		|	ВремТаблицаИсторияСтатусов.Период КАК Период,
		|	ВремТаблицаИсторияСтатусов.CreatedBy КАК CreatedBy,
		|	ВремТаблицаИсторияСтатусов.СрокДействияСпециальныхУсловий КАК СрокДействияСпециальныхУсловий,
		|	ВремТаблицаИсторияСтатусов.Пользователь КАК Пользователь,
		|	ЕСТЬNULL(Scan_СпециальныеУсловия.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_СпециальныеУсловия.ПустаяСсылка)) КАК СУ
		|ИЗ
		|	ВремТаблицаИсторияСтатусов КАК ВремТаблицаИсторияСтатусов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СпециальныеУсловия КАК Scan_СпециальныеУсловия
		|		ПО ВремТаблицаИсторияСтатусов.КодСУSOWA = Scan_СпециальныеУсловия.КодСУSOWA
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	МАКСИМУМ(СУ)
		|ПО
		|	КодСУSOWA";
	
	Запрос.УстановитьПараметр("ТаблицаИсторияСтатусов",СУИсторияСтатусовСУ.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКодСУSOWA = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКодСУSOWA.Следующий() Цикл
		Если ВыборкаКодСУSOWA.СУ = ПредопределенноеЗначение("Справочник.Scan_СпециальныеУсловия.ПустаяСсылка") Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаКодСУSOWA.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				нСтрока = ОшибкиЗагрузкиСУ.Добавить();
				
				нСтрока.КодСУSOWA = ВыборкаДетальныеЗаписи.КодСУSOWA;
				нСтрока.ОписаниеОшибки = "Не удалось найти СУ по коду СУ SOWA."; 
				
				ОшибкиПриЗаписи = ОшибкиПриЗаписи + 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СУОбъект = ВыборкаКодСУSOWA.СУ.ПолучитьОбъект();
		СУОбъект.Цены.Очистить();
		
		ВыборкаДетальныеЗаписи = ВыборкаКодСУSOWA.Выбрать();
		
		ТекСтатус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.ПустаяСсылка");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Статус) Тогда
				нСтрока = ОшибкиЗагрузкиСУ.Добавить();
				
				нСтрока.СУ = ВыборкаДетальныеЗаписи.СУ;
				нСтрока.КодСУSOWA = ВыборкаДетальныеЗаписи.КодСУSOWA;
				нСтрока.ОписаниеОшибки = "Не удалось найти статус " + ВыборкаДетальныеЗаписи.Status; 
				
				ОшибкиПриЗаписи = ОшибкиПриЗаписи + 1;
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СУОбъект.Цены.Добавить(); 			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			ТекСтатус = ВыборкаДетальныеЗаписи.Статус;
			//НоваяСтрока.ТипЦены = ;
			//НоваяСтрока.МаржаDist = ;
			//НоваяСтрока.МаржаDealer = ;			
			//НоваяСтрока.СрокДействияСпециальныхУсловий = ВыборкаДетальныеЗаписи.;
		КонецЦикла;
		
		СУОбъект.Статус = ТекСтатус;
		Попытка
			СУОбъект.Записать();
			
			// Очистим статусы и заново запишем
			
			НаборЗаписей = РегистрыСведений.Scan_ИсторияСтатусовСоглашенийОПоставкеИСпециальныхУсловий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектСтатуса.Установить(СУОбъект.Ссылка);
			НаборЗаписей.Записать();
			
			Для Каждого ТекСтатус Из СУОбъект.Цены Цикл
				Справочники.Scan_СоглашенияОПоставке.ЗаписьЗначенияРегистраСведения(СУОбъект.Ссылка, ТекСтатус.Статус, ТекСтатус.Период);	
			КонецЦикла;
			
		Исключение
			Для Каждого ТекСтрока Из СУОбъект.Цены Цикл
				нСтрока = ОшибкиЗагрузкиСУ.Добавить();
			
				нСтрока.СУ = ТекСтрока.Ссылка;
				нСтрока.КодСУSOWA = ТекСтрока.КодСУSOWA;
				нСтрока.Статус = ТекСтрока.КодСУSOWA;
				нСтрока.ОписаниеОшибки = "Не удалось записать историю статусов."; 
				
				ОшибкиПриЗаписи = ОшибкиПриЗаписи + 1;
			КонецЦикла;
		КонецПопытки;    		
	КонецЦикла;
	
	Если ОшибкиПриЗаписи <> 0 Тогда
		Элементы.ЗагрузкаСУ.ТекущаяСтраница = Элементы.ЗагрузкаСУОшибкиЗагрузки;
	КонецЕсли;
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Ошибок при записи : %1",,,,, ОшибкиПриЗаписи);
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДилераПоКоду(КодДилераSOWA)
	Если ЗначениеЗаполнено(КодДилераSOWA) Тогда
		
		СтатусыКомпаний = Новый Массив;    		
		СтатусыКомпаний.Добавить(ПредопределенноеЗначение("Справочник.Scan_СтатусыКомпаний.ПустаяСсылка"));
		
		ТекСтатусДействующая = Справочники.Scan_СтатусыКомпаний.НайтиПоНаименованию("Действующая");
		Если ЗначениеЗаполнено(ТекСтатусДействующая) Тогда
			СтатусыКомпаний.Добавить(ТекСтатусДействующая);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Scan_Компании.Ссылка КАК Ссылка,
		|	Scan_Компании.СтатусыКомпаний КАК СтатусыКомпаний
		|ИЗ
		|	Справочник.Scan_Компании КАК Scan_Компании
		|ГДЕ
		|	Scan_Компании.КодДилераSOWA = &КодДилераSOWA
		|	И Scan_Компании.СтатусыКомпаний В(&СтатусыКомпаний)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыКомпаний УБЫВ";
		
		Запрос.УстановитьПараметр("КодДилераSOWA", КодДилераSOWA);
		Запрос.УстановитьПараметр("СтатусыКомпаний", СтатусыКомпаний);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.Scan_Компании.ПустаяСсылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПоИНН(ИННКонтрагента, ПолучитьИз1БД = Истина)
	Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
		
		МассивКонтрагентов = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_Контрагенты.Ссылка КАК Ссылка,
		|	Scan_Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Scan_Контрагенты КАК Scan_Контрагенты
		|ГДЕ
		|	Scan_Контрагенты.ИНН = &ИННКонтрагента";
		
		Запрос.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураКонтрагента = Новый Структура("Контрагент", ВыборкаДетальныеЗаписи.Ссылка);
			СтруктураКонтрагента.Вставить("КПП", ВыборкаДетальныеЗаписи.КПП);
			
			МассивКонтрагентов.Добавить(СтруктураКонтрагента);
		КонецЦикла;
		
		Если МассивКонтрагентов.Количество()=0 И ПолучитьИз1БД Тогда
			
			// Получим из 1БД
			ИмяМетода = "GetListOfContragents";
			СообщениеОбОшибке = "";
			Отказ = Ложь;
			СтруктураПараметров = Scan_ВебСервисы.ПолучитьСтруктуруПараметровМетода(ИмяМетода, Истина);
			СтруктураПараметров.Вставить("ИНН", ИННКонтрагента);
			ИмяСобытияЖурналаРегистрации = "Веб-сервис." + ИмяМетода;
			ТекЭлементОтвет = Scan_ВебСервисы.ВызватьМетод(ИмяМетода, СтруктураПараметров, Отказ, ИмяСобытияЖурналаРегистрации);
			Если НЕ Отказ Тогда
				СсылкаЭлемента = Scan_ВебСервисыРазборОтветов.РазборОтветаСправочникКонтрагенты(ТекЭлементОтвет,Отказ,СообщениеОбОшибке,ИмяСобытияЖурналаРегистрации,ИмяМетода);
			КонецЕсли;
			
			Возврат ПолучитьКонтрагентаПоИНН(ИННКонтрагента, Ложь);
			
		ИначеЕсли МассивКонтрагентов.Количество() = 1 Тогда
			
			// Вернем найденного
			Возврат МассивКонтрагентов[0].Контрагент;	
			
		ИначеЕсли МассивКонтрагентов.Количество() > 1 Тогда
			
			// Вернем того, у которого в КПП 5-я и 6-я цифры "01"
			Для Каждого ТекСтрока Из МассивКонтрагентов Цикл
				ПервыеШесть = Лев(СокрЛП(ТекСтрока.КПП), 6);
				ПятыйШестой = Прав(ПервыеШесть, 2);
				Если ПятыйШестой = "01" Тогда
					Возврат ТекСтрока.Контрагент;					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.Scan_Контрагенты.ПустаяСсылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомпаниюКонтрагента(Контрагент)
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Scan_ВзаимосвязьКомпанийСКонтрагентами.Компания КАК Компания
		               |ИЗ
		               |	РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами КАК Scan_ВзаимосвязьКомпанийСКонтрагентами
		               |ГДЕ
		               |	Scan_ВзаимосвязьКомпанийСКонтрагентами.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетЗаписи.Следующий() Тогда
			Возврат ВыборкаДетЗаписи.Компания;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.Scan_Компании.ПустаяСсылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПродавцаПоДилеруИИмени(ТекДилер, ИмяКЛ)
	ТекКЛ = ПредопределенноеЗначение("Справочник.Scan_КонтактныеЛица.ПустаяСсылка");
	Если НЕ ЗначениеЗаполнено(ТекДилер) Тогда
		Возврат ТекКЛ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяКЛ) Тогда
		Возврат ТекКЛ;	
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_КонтактныеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Scan_КонтактныеЛица КАК Scan_КонтактныеЛица
		|ГДЕ
		|	Scan_КонтактныеЛица.Наименование = &ИмяКЛ
		|	И Scan_КонтактныеЛица.Владелец = &ТекДилер";
	
	Запрос.УстановитьПараметр("ИмяКЛ", ИмяКЛ);
	Запрос.УстановитьПараметр("ТекДилер", ТекДилер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	Иначе
		// Попробуем разбить на имя и фамилию и поискать по двум реквизитам
		ИмяФамилия = СокрЛП(ИмяКЛ);
		Найдено = СтрНайти(ИмяФамилия, " ");
		Если Найдено = 0 Тогда
			Возврат ТекКЛ;
		Иначе
			Фамилия = Лев(ИмяФамилия, Найдено-1); 
			Имя = Прав(ИмяФамилия,СтрДлина(ИмяФамилия)-Найдено);
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_КонтактныеЛица.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Scan_КонтактныеЛица КАК Scan_КонтактныеЛица
			|ГДЕ
			|	Scan_КонтактныеЛица.Владелец = &ТекДилер
			|	И Scan_КонтактныеЛица.Имя = &Имя
			|	И Scan_КонтактныеЛица.Фамилия = &Фамилия";
			
			Запрос.УстановитьПараметр("Имя", Имя);
			Запрос.УстановитьПараметр("Фамилия", Фамилия);
			Запрос.УстановитьПараметр("ТекДилер", ТекДилер);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
	
КонецФункции
// rarus tenkam 29.12.2020 mantis 16345 ---
#КонецОбласти

// rarus tenkam 15.02.2021 mantis 17159 +++
#Область ЗагрузкаДанныхИзУТ

&НаСервере
Процедура УТ_ЗаполнитьДанныеДляПередачиВ1БДНаСервере()
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Исполнен"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_ИсполненЧастично"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СоглашенияОПоставке.Ссылка КАК ДопСоглашение,
		|	Scan_СоглашенияОПоставке.Основание КАК Заявка,
		|	Scan_СоглашенияОПоставке.Договор КАК Договор,
		|	Scan_СоглашенияОПоставке.Основание.Договор КАК ДоговорЗаявки
		|ИЗ
		|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
		|ГДЕ
		|	Scan_СоглашенияОПоставке.НомерЗаявкиНаСОПSOWA <> """"
		|	И Scan_СоглашенияОПоставке.Договор.IDExternalSystem = """"
		|	И Scan_СоглашенияОПоставке.Договор <> ЗНАЧЕНИЕ(Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка)
		|	И Scan_СоглашенияОПоставке.Статус В (&СписокСтатусов)
		|	И Scan_СоглашенияОПоставке.Основание <> ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)";
	Запрос.УстановитьПараметр("СписокСтатусов",СписокСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	УТ_ТЗДанныеДляОтправкиВ1БД.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = УТ_ТЗДанныеДляОтправкиВ1БД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	УТ_ВсегоДля1БД = УТ_ТЗДанныеДляОтправкиВ1БД.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УТ_ЗаполнитьДанныеДляПередачиВ1БД(Команда)
	УТ_ЗаполнитьДанныеДляПередачиВ1БДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаУТ_ПередатьДанныеВ1БД(Команда)
	Если УТ_ТЗДанныеДляОтправкиВ1БД.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала получить данные для отправки");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаОтправкив1БД",0.1,Истина);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаОтправкив1БД()
	
	ВывестиСообщениеПол("Начата запись данных  по условиям оплаты" + " " + ТекущаяДата());
	ЗагрузкаУТ_ПередатьДанныеВ1БДНаСервере();
	Элементы.УТ_ТЗДанныеДляОтправкиВ1БД.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаУТ_ПередатьДанныеВ1БДНаСервере()
	
	КоличествоОшибок = 0;
	
	IDСОПОформлен = Справочники.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС.IDExternalSystem;
	Для Каждого ТекСтрока Из УТ_ТЗДанныеДляОтправкиВ1БД Цикл
		
		// Создадим доп. соглашение в 1БД
		СообщениеОбОшибке = "";
		ДанныеОтправлены = СоздатьДоговорВ1БДБезПроверок(ТекСтрока.Договор, ТекСтрока.ДопСоглашение,СообщениеОбОшибке);		
		Если НЕ ДанныеОтправлены Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Не удалось отправить данные по доп. соглашению в 1БД" + СообщениеОбОшибке;		
		КонецЕсли;
		
		// Отправим статус недействительно есть ДС по заявке основанию
		СообщениеОбОшибке = "";
		СтруктураИзмененныеРеквизиты = Новый Структура;
		СтруктураИзмененныеРеквизиты.Вставить("СтатусGUID",IDСОПОформлен);		
		ВсеОК = ИзменитьДоговорв1БДБезПроверок(СтруктураИзмененныеРеквизиты, ТекСтрока.ДоговорЗаявки, ТекСтрока.Заявка, СообщениеОбОшибке);	
		Если НЕ ВсеОК Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Не удалось отправить данные о статусе в 1БД" + СообщениеОбОшибке;		
		КонецЕсли;
		
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	ВывестиСообщениеПол("Завершена отправка данных" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Количество ошибок : %1",,,,, КоличествоОшибок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДоговорВ1БДБезПроверок(СОПДоговорСсылка, СоглашениеОПоставкеСсылка, СообщениеОбОшибке)
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	// Отправим в 1БД запрос на создание договора
	IDExternalSystemСОП = Scan_ВебСервисыРазборОтветов.ВызватьМетод_CreateSOP(СОПДоговорСсылка, СоглашениеОПоставкеСсылка, Отказ, СообщениеОбОшибке);
	
	Если НЕ Отказ Тогда
		Если НЕ ЗначениеЗаполнено(IDExternalSystemСОП) Тогда
			СообщениеОбОшибке = "Обмен прошел некорректно. Текст сообщения обмена с 1БД: " + СообщениеОбОшибке;
			Возврат Ложь;
		КонецЕсли;
		
		// Запишем полученный GUID в договор
		ВсеОК = Справочники.Scan_ДоговорыВзаиморасчетов.ЗаписатьIDExternalSystemВДоговор(СОПДоговорСсылка, IDExternalSystemСОП);
		Если НЕ ВсеОК Тогда
			СообщениеОбОшибке = "Не удалось записать ID External System " + IDExternalSystemСОП;	
		КонецЕсли;
		Возврат ВсеОК;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьДоговорв1БДБезПроверок(СтруктураПараметров, СОПДоговорСсылка, СоглашениеОПоставкеСсылка, СообщениеОбОшибке)
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	// Отправим в 1БД запрос на изменение договора
	IDExternalSystemСОП = Scan_ВебСервисыРазборОтветов.ВызватьМетод_SetSOP(СтруктураПараметров, СОПДоговорСсылка, СоглашениеОПоставкеСсылка, Отказ, СообщениеОбОшибке);
	
	Если НЕ Отказ Тогда
		Возврат Истина;
	Иначе
		СообщениеОбОшибке = "Данные не могут быть отправлены в 1БД " + СообщениеОбОшибке;
		Возврат Ложь; 			
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УТ_ДанныеПоУсловиямОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УТ_ДанныеСпецификацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УТ_ДанныеСОВАНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УТПрочитатьДанные(Команда)
	
	Если ПустаяСтрока(УТ_ДанныеПоУсловиямОплаты) И 
		ПустаяСтрока(УТ_ДанныеСпецификации) И
		ПустаяСтрока(УТ_ДанныеСОВА) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайловУТ(1);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайловУТ(КодЗагрузки)
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	Если КодЗагрузки = 1 Тогда
		ТекПутьКФайлу = СокрЛП(УТ_ДанныеПоУсловиямОплаты);
	ИначеЕсли КодЗагрузки = 2 Тогда
		ТекПутьКФайлу = СокрЛП(УТ_ДанныеСОВА);	
	ИначеЕсли КодЗагрузки = 3 Тогда
		ТекПутьКФайлу = СокрЛП(УТ_ДанныеСпецификации);	
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("КодЗагрузки", КодЗагрузки);
		
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		
		ЗагрузитьДанныеФайловУТЗавершение(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайловУТФрагмент", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайловУТФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайловУТЗавершение(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайловУТЗавершение(Знач ПараметрыЗагрузки)
	Если ПараметрыЗагрузки.КодЗагрузки = 1 Тогда
		УТ_ПрочитатьУсловияОплаты(ПараметрыЗагрузки);
	ИначеЕсли ПараметрыЗагрузки.КодЗагрузки = 2 Тогда
		УТ_ПрочитатьДанныеСОВА(ПараметрыЗагрузки);	
	ИначеЕсли ПараметрыЗагрузки.КодЗагрузки = 3 Тогда
		УТ_ПрочитатьДанныеСпецификации(ПараметрыЗагрузки);	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УТ_ПрочитатьУсловияОплаты(ПараметрыЗагрузки)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 12;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	
	НомерСтрокиФайла = 2;
	УТ_ТЗДанныеПоУсловиямОплаты.Очистить();
	                            	
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		
		НоваяСтрока = УТ_ТЗДанныеПоУсловиямОплаты.Добавить();
		
		НоваяСтрока.НомерДоговора = СокрЛП(СтрокаФайла.НомерДоговора);
		
		ИндексРазделителяНомераСоглашения = СтрНайти(НоваяСтрока.НомерДоговора,"-",,6); 
		Если НЕ ИндексРазделителяНомераСоглашения = 0 Тогда
			СтарыйНомерДопСоглашения = Число(Прав(НоваяСтрока.НомерДоговора,СтрДлина(НоваяСтрока.НомерДоговора)- ИндексРазделителяНомераСоглашения));
			НоваяСтрока.НомерБезПостфикса = Лев(НоваяСтрока.НомерДоговора,СтрДлина(НоваяСтрока.НомерДоговора) - СтрДлина(СтарыйНомерДопСоглашения)-1);
		Иначе
			НоваяСтрока.НомерБезПостфикса = НоваяСтрока.НомерДоговора;	
		КонецЕсли;          
		
		НоваяСтрока.ДатаДоговора = ПреобразоватьСтрокуВДату(СокрЛП(СтрокаФайла.ДатаДоговора));
		НоваяСтрока.СостояниеПредоплаты = СокрЛП(СтрокаФайла.СостояниеПредоплаты);
		НоваяСтрока.ВидОплатыФайл = СокрЛП(СтрокаФайла.ВидОплаты);
		НоваяСтрока.Сумма = СокрЛП(СтрокаФайла.Сумма);
		НоваяСтрока.ПроцентОплаты = СокрЛП(СтрокаФайла.Процент);
		НоваяСтрока.КрайняяДатаОплаты = ПреобразоватьСтрокуВДату(СокрЛП(СтрокаФайла.Дата_крайняя_));
		НоваяСтрока.РасчетДатыОплатыФайл = СокрЛП(СтрокаФайла.РасчетДатыОплаты);
		НоваяСтрока.СрокОплатыАванса = СокрЛП(СтрокаФайла.СрокВКален_Днях);
		
		НоваяСтрока.Договор = Справочники.Scan_ДоговорыВзаиморасчетов.НайтиПоРеквизиту("НомерДоговора",НоваяСтрока.НомерБезПостфикса);
		Если ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
			//НоваяСтрока.Заявка = Справочники.Scan_СоглашенияОПоставке.НайтиПоРеквизиту("Договор", НоваяСтрока.Договор);	// rarus tenkam 22.03.2021 mantis 17422 -
			НоваяСтрока.Заявка = Справочники.Scan_СоглашенияОПоставке.НайтиСоглашениеОПоставкеПоДоговору(НоваяСтрока.Договор);	// rarus tenkam 22.03.2021 mantis 17422 +
		
		КонецЕсли;
		//НоваяСтрока.СОП_СтатусОплаты = Перечисления.Scan_СтатусыОплатПоСОП[НоваяСтрока.СостояниеПредоплаты];
		НоваяСтрока.ВидОплаты = Перечисления.Scan_ВидыОплат[НоваяСтрока.ВидОплатыФайл];;
		НоваяСтрока.РасчетДатыОплаты = ПолучитьЗначениеВидыРасчетаДатыОплаты(НоваяСтрока.РасчетДатыОплатыФайл);
		НоваяСтрока.НомерСтрокиФайла = НомерСтрокиФайла;
		НомерСтрокиФайла = НомерСтрокиФайла + 1;
	КонецЦикла; 	
	ВсегоСтрокУТ_УсловияОплаты = УТ_ТЗДанныеПоУсловиямОплаты.Количество();
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеВидыРасчетаДатыОплаты(РасчетДатыОплатыФайл)
	
	Если РасчетДатыОплатыФайл = "От даты договора" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыДоговора");	
	ИначеЕсли РасчетДатыОплатыФайл = "От даты отгрузки" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыОтгрузкиDDS");	 		
	ИначеЕсли РасчетДатыОплатыФайл = "До даты отгрузки" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ДоДатыОтгрузкиDDS");	
	Иначе	
		Возврат ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ПустаяСсылка");	
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УТ_УсловияОплаты_ЗаписатьНаСервере()
	
	КоличествоОшибок = 0;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУсловийОплаты.НомерДоговора КАК НомерДоговора,
		|	ТаблицаУсловийОплаты.Договор КАК Договор,
		|	ТаблицаУсловийОплаты.ДатаДоговора КАК ДатаДоговора,
		|	ТаблицаУсловийОплаты.Заявка КАК Заявка,
		|	ТаблицаУсловийОплаты.НомерБезПостфикса КАК НомерБезПостфикса,
		|	ТаблицаУсловийОплаты.Сумма КАК Сумма,
		|	ТаблицаУсловийОплаты.ПроцентОплаты КАК ПроцентОплаты,
		|	ТаблицаУсловийОплаты.КрайняяДатаОплаты КАК КрайняяДатаОплаты,
		|	ТаблицаУсловийОплаты.РасчетДатыОплаты КАК РасчетДатыОплаты,
		|	ТаблицаУсловийОплаты.СрокОплатыАванса КАК СрокОплатыАванса,
		|	ТаблицаУсловийОплаты.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ТаблицаУсловийОплаты.ВидОплаты КАК ВидОплаты
		|ПОМЕСТИТЬ ДанныеТаблицы
		|ИЗ
		|	&ТаблицаУсловийОплаты КАК ТаблицаУсловийОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТаблицы.НомерДоговора КАК НомерДоговора,
		|	ДанныеТаблицы.Договор КАК Договор,
		|	ДанныеТаблицы.ДатаДоговора КАК ДатаДоговора,
		|	ДанныеТаблицы.Заявка КАК Заявка,
		|	ДанныеТаблицы.НомерБезПостфикса КАК НомерБезПостфикса,
		|	ДанныеТаблицы.Сумма КАК Сумма,
		|	ДанныеТаблицы.ПроцентОплаты КАК ПроцентОплаты,
		|	ДанныеТаблицы.КрайняяДатаОплаты КАК КрайняяДатаОплаты,
		|	ДанныеТаблицы.РасчетДатыОплаты КАК РасчетДатыОплаты,
		|	ДанныеТаблицы.СрокОплатыАванса КАК СрокОплатыАванса,
		|	ДанныеТаблицы.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ДанныеТаблицы.ВидОплаты КАК ВидОплаты
		|ИЗ
		|	ДанныеТаблицы КАК ДанныеТаблицы
		|ГДЕ
		|	ДанныеТаблицы.Договор <> ЗНАЧЕНИЕ(Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка)
		|	И ДанныеТаблицы.Заявка <> ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
		|	И ДанныеТаблицы.Заявка.Статус = &СтатусСОПОформлен
		//|	И ДанныеТаблицы.Заявка.Основание = ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка) // rarus tenkam 22.03.2021 mantis 17422 +
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерДоговора УБЫВ,
		|	ВидОплаты		
		|ИТОГИ
		|	МАКСИМУМ(ДатаДоговора),
		|	МАКСИМУМ(Заявка),
		|	МАКСИМУМ(НомерБезПостфикса)
		|ПО
		|	Договор,
		|	НомерДоговора";
	Запрос.УстановитьПараметр("СтатусСОПОформлен",ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен"));
	Запрос.УстановитьПараметр("ТаблицаУсловийОплаты",УТ_ТЗДанныеПоУсловиямОплаты.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	 	       	
	ВыборкаДоговор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДоговор.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДоговор
	
		ВыборкаНомерДоговора = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаНомерДоговора.Следующий() Цикл
			// Вставить обработку выборки ВыборкаНомерДоговора
			
			НужноОбработатьЗаявкуОснование = Ложь;
			Если ВыборкаНомерДоговора.НомерДоговора = ВыборкаНомерДоговора.НомерБезПостфикса Тогда
				ЗаявкаОбъект = ВыборкаНомерДоговора.Заявка.ПолучитьОбъект();
				
				// Проверим, может уже создавали доп. соглашение
				Если ЗаявкаОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС") Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				ЗаявкаДоп = ПолучитьДопСоглашениеПоЗаявке(ВыборкаНомерДоговора.Заявка);
				Если ЗначениеЗаполнено(ЗаявкаДоп) Тогда
					Продолжить;
				Иначе
					//НужноОбработатьЗаявкуОснование = Истина;
					
					// У старого договора установим дату окончания
					СтарыйДоговорОбъект = ВыборкаНомерДоговора.Договор.ПолучитьОбъект();
					СтарыйДоговорОбъект.Бессрочный = Ложь;
					СтарыйДоговорОбъект.ДатаОкончания = ВыборкаНомерДоговора.ДатаДоговора;
					Попытка
						СтарыйДоговорОбъект.Записать();
					Исключение
						КоличествоОшибок = КоличествоОшибок + 1;
						ПараметрыОтбора = Новый Структура("НомерДоговора", ВыборкаНомерДоговора.НомерДоговора);
						НайденныеСтроки = УТ_ТЗДанныеПоУсловиямОплаты.НайтиСтроки(ПараметрыОтбора);
						Для Каждого ТекСтрока Из НайденныеСтроки Цикл
							ТекСтрока.ДанныеОбработаны = Истина;
							ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось установить дату окончания в неактуальном договоре. " + ОписаниеОшибки();
						КонецЦикла;
					КонецПопытки;
					
					// У старой заявки установим статус неактуальной
					ЗаявкаСтараяОбъект = ВыборкаНомерДоговора.Заявка.ПолучитьОбъект();
					ЗаявкаСтараяОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.НеактуальноЕстьДС");
					ЗаявкаСтараяОбъект.УсловияОплаты.Очистить();
					
					Попытка
						ЗаявкаСтараяОбъект.Записать();
					Исключение
						КоличествоОшибок = КоличествоОшибок + 1;
						
						ПараметрыОтбора = Новый Структура("НомерДоговора", ВыборкаНомерДоговора.НомерДоговора);
						НайденныеСтроки = УТ_ТЗДанныеПоУсловиямОплаты.НайтиСтроки(ПараметрыОтбора);
						Для Каждого ТекСтрока Из НайденныеСтроки Цикл
							ТекСтрока.ДанныеОбработаны = Истина;
							ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не установить установить статус (Неактуальна.ЕстьДС) в заявке. " + ОписаниеОшибки();
						КонецЦикла;
					КонецПопытки;
					
					// Создадим доп. соглашение
					ЗаявкаОбъект = Справочники.Scan_СоглашенияОПоставке.СоздатьЭлемент();
										
					// Сначала создадим договор
					ДопДоговор = Справочники.Scan_ДоговорыВзаиморасчетов.СоздатьЭлемент();
					ДопДоговор.Заполнить(ВыборкаНомерДоговора.Договор);
					ДопДоговор.ВидДоговора = Перечисления.Scan_ВидыДоговоров.ДопСоглашениеКСОП;
					ДопДоговор.НомерДоговора = ВыборкаНомерДоговора.НомерДоговора;	
					ДопДоговор.IDExternalSystem = "";
					ДопДоговор.ДатаОбновления = Дата(1,1,1);
					ДопДоговор.ДатаНачала = ВыборкаНомерДоговора.ДатаДоговора;
					ДопДоговор.ДатаОкончания = Дата(1,1,1);
					ДопДоговор.Наименование = "№ " + СокрЛП(ДопДоговор.НомерДоговора) + " от " + Формат(ДопДоговор.ДатаНачала,"ДФ=dd.MM.yyyy; ДЛФ=Д");
					
					Попытка
						ДопДоговор.Записать();
					Исключение
						КоличествоОшибок = КоличествоОшибок + 1;
						
						ПараметрыОтбора = Новый Структура("НомерДоговора", ВыборкаНомерДоговора.НомерДоговора);
						НайденныеСтроки = УТ_ТЗДанныеПоУсловиямОплаты.НайтиСтроки(ПараметрыОтбора);
						Для Каждого ТекСтрока Из НайденныеСтроки Цикл
							ТекСтрока.ДанныеОбработаны = Истина;
							ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось создать договор для доп. соглашения. " + ОписаниеОшибки();
						КонецЦикла;
						Продолжить;
					КонецПопытки;
					
					// Заполним данные в заявке
					ЗаявкаОбъект.Заполнить(ВыборкаНомерДоговора.Заявка);
					ЗаявкаОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен");
					ЗаявкаОбъект.Договор = ДопДоговор.Ссылка;
					ЗаявкаОбъект.СписокПродуктов.Загрузить(ВыборкаНомерДоговора.Заявка.СписокПродуктов.Выгрузить());
					ЗаявкаОбъект.Количество = ЗаявкаОбъект.СписокПродуктов.Итог("Количество");
					
					ЗаявкаОбъект.НомерЗаявкиНаСОПSOWA = ВыборкаНомерДоговора.Заявка.НомерЗаявкиНаСОПSOWA;
					ЗаявкаОбъект.КомментарийДилераSOWA = ВыборкаНомерДоговора.Заявка.КомментарийДилераSOWA;
					ЗаявкаОбъект.КомментарийSRUSOWA = ВыборкаНомерДоговора.Заявка.КомментарийSRUSOWA;
							
				КонецЕсли;
			КонецЕсли;
			// Заполним условия оплаты
			ЗаявкаОбъект.Условияоплаты.Очистить();
			ВыборкаДетальныеЗаписи = ВыборкаНомерДоговора.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НоваяСтрока = ЗаявкаОбъект.УсловияОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
				//НоваяСтрока.Сумма = 0;
				
				// Установим флаг, что данные обработаны
				ПараметрыОтбора = Новый Структура("НомерСтрокиФайла", ВыборкаДетальныеЗаписи.НомерСтрокиФайла);
				НайденныеСтроки = УТ_ТЗДанныеПоУсловиямОплаты.НайтиСтроки(ПараметрыОтбора);
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					ТекСтрока.ДанныеОбработаны = Истина;
				КонецЦикла;
			КонецЦикла;
			
			// Заполним график платежей
			ЦеныПродажиПродуктов = Новый Соответствие;
			
			Для Каждого ТекСтрока Из ЗаявкаОбъект.СписокПродуктов Цикл				
				ЦеныПродажиПродуктов.Вставить(ТекСтрока.Продукт, ТекСтрока.ЦенаСНДС);
			КонецЦикла; 			
			ОбновитьГрафикПлатежей(ЗаявкаОбъект, ЦеныПродажиПродуктов);
		                                                  			
			// Запишем заявку
			Попытка
				ЗаявкаОбъект.Записать();
			Исключение
				КоличествоОшибок = КоличествоОшибок + 1;
						
				ПараметрыОтбора = Новый Структура("НомерДоговора", ВыборкаНомерДоговора.НомерДоговора);
				НайденныеСтроки = УТ_ТЗДанныеПоУсловиямОплаты.НайтиСтроки(ПараметрыОтбора);
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					ТекСтрока.ДанныеОбработаны = Истина;
					ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось записать заявку. " + ОписаниеОшибки();
				КонецЦикла;
				Продолжить;
			КонецПопытки;
		
		КонецЦикла;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	ПараметрыОтбора = Новый Структура("ДанныеОбработаны", Истина);
	НайденныеСтроки = УТ_ТЗДанныеПоУсловиямОплаты.НайтиСтроки(ПараметрыОтбора);
	УТ_УсловияОплаты_ВсегоОбработано = НайденныеСтроки.Количество();
	
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Количество ошибок : %1",,,,, КоличествоОшибок);
	//
КонецПроцедуры

&НаКлиенте
Процедура УТ_УсловияОплаты_Записать(Команда)
	Если УТ_ТЗДанныеПоУсловиямОплаты.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать файл данных");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиУсловийоплаты",0.1,Истина);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиУсловийоплаты()
	
	ВывестиСообщениеПол("Начата запись данных  по условиям оплаты" + " " + ТекущаяДата());
	УТ_УсловияОплаты_ЗаписатьНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопСоглашениеПоЗаявке(ЗаявкаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СоглашенияОПоставке.Ссылка КАК Ссылка,
		|	Scan_СоглашенияОПоставке.Договор КАК Договор,
		|	Scan_СоглашенияОПоставке.Договор.НомерДоговора КАК ДоговорНомерДоговора
		|ИЗ
		|	Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
		|ГДЕ
		|	Scan_СоглашенияОПоставке.Основание = &ЗаявкаСсылка";
	
	Запрос.УстановитьПараметр("ЗаявкаСсылка", ЗаявкаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;    		
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка");	
	КонецЕсли;

	Возврат ПредопределенноеЗначение("Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка");
КонецФункции

&НаКлиенте
Процедура УТ_ТЗДанныеДляОтправкиВ1БДПриИзменении(Элемент)
	УТ_ВсегоДля1БД = УТ_ТЗДанныеДляОтправкиВ1БД.Количество();
КонецПроцедуры

&НаКлиенте
Процедура УТ_ЦеныСОВА_Прочитать(Команда)
	Если ПустаяСтрока(УТ_ДанныеПоУсловиямОплаты) И 
		ПустаяСтрока(УТ_ДанныеСпецификации) И
		ПустаяСтрока(УТ_ДанныеСОВА) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайловУТ(2); 	
КонецПроцедуры

&НаКлиенте
Процедура УТ_ЦеныСпецификация_Прочитать(Команда)
	Если ПустаяСтрока(УТ_ДанныеПоУсловиямОплаты) И 
		ПустаяСтрока(УТ_ДанныеСпецификации) И
		ПустаяСтрока(УТ_ДанныеСОВА) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ТЗ_УстановитьЦенуПродажи.Очистить();
	Элементы.УстановитьЦенуПродажи.Заголовок = "Редактирование цены продажи";
	ВыполнитьЗагрузкуФайловУТ(3);
КонецПроцедуры

&НаСервере
Процедура УТ_ПрочитатьДанныеСОВА(ПараметрыЗагрузки)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 6;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	
	НомерСтрокиФайла = 2;
	УТ_ТЗДанныеСОВА.Очистить();
	                            	
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		
		НоваяСтрока = УТ_ТЗДанныеСОВА.Добавить();
		
		НоваяСтрока.НомерДоговораФайл = СокрЛП(СтрокаФайла.Договор);
		
		//Добавление лидирующих нулей для числовых заказов
		Попытка
			ЧислоСтроки = Число(СтрокаФайла.НомерЗаказа);
			НомерЗаказаЧисло  = Истина;
		Исключение 
			НомерЗаказаЧисло  = Ложь;
		КонецПопытки;
		
		НомерЗаказа = СтрокаФайла.НомерЗаказа;
		Если НомерЗаказаЧисло Тогда
			КолВоЗнаковЧисло = СтрДлина(ЧислоСтроки);
			Для нПрефикса = 0 По (9 - КолВоЗнаковЧисло) Цикл
				НомерЗаказа = "0" + НомерЗаказа;
			КонецЦикла;
		КонецЕсли;
		НоваяСтрока.НомерЗаказаФайл = СтрЗаменить(СокрЛП(НомерЗаказа),Символы.НПП,"");
		НоваяСтрока.НомерПродукта = Формат(СтрокаФайла.НомерШасси, "ЧГ=0");
		НоваяСтрока.ПроцентДрайв = СокрЛП(СтрокаФайла.СкидкаПоДрайв__);
		НоваяСтрока.СкидкаДрайв = СокрЛП(СтрокаФайла.СкидкаПоДрайв_Руб_);
		НоваяСтрока.СпецЦена = Формат(СтрокаФайла.Спец_Цена, "ЧГ=0");
		
		НоваяСтрока.НомерСтрокиФайла = НомерСтрокиФайла;
		НомерСтрокиФайла = НомерСтрокиФайла + 1;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеФайла.НомерДоговораФайл КАК НомерДоговораФайл,
	               |	ДанныеФайла.НомерЗаказаФайл КАК НомерЗаказаФайл,
	               |	ДанныеФайла.НомерПродукта КАК НомерПродукта,
	               |	ДанныеФайла.ПроцентДрайв КАК ПроцентДрайв,
	               |	ДанныеФайла.СкидкаДрайв КАК СкидкаДрайв,
	               |	ДанныеФайла.СпецЦена КАК СпецЦена,
	               |	ДанныеФайла.НомерСтрокиФайла КАК НомерСтрокиФайла
	               |ПОМЕСТИТЬ ДанныеФайла
	               |ИЗ
	               |	&ДанныеФайла КАК ДанныеФайла
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_Изделия.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка))) КАК Продукт,
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_Изделия.ЗаказНаЗавод, ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка))) КАК ЗаказНаЗавод,
	               |	ДанныеФайла.НомерДоговораФайл КАК НомерДоговораФайл,
	               |	ДанныеФайла.НомерЗаказаФайл КАК НомерЗаказаФайл,
	               |	ДанныеФайла.НомерПродукта КАК НомерПродукта,
	               |	ДанныеФайла.ПроцентДрайв КАК ПроцентДрайв,
	               |	ДанныеФайла.СкидкаДрайв КАК СкидкаДрайв,
	               |	ДанныеФайла.СпецЦена КАК СпецЦена,
	               |	ДанныеФайла.НомерСтрокиФайла КАК НомерСтрокиФайла,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ДанныеФайла.СпецЦена = 0
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.Scan_СпециальныеУсловия.ПустаяСсылка)
	               |			ИНАЧЕ Scan_СпециальныеУсловия.Ссылка
	               |		КОНЕЦ) КАК СУ
	               |ПОМЕСТИТЬ ТаблицаЗаказовПродуктовСУ
	               |ИЗ
	               |	ДанныеФайла КАК ДанныеФайла
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_Изделия КАК Scan_Изделия
	               |		ПО ДанныеФайла.НомерЗаказаФайл = Scan_Изделия.ЗаказНаЗавод.Наименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СпециальныеУсловия КАК Scan_СпециальныеУсловия
	               |		ПО ДанныеФайла.СпецЦена = Scan_СпециальныеУсловия.КодСУSOWA
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеФайла.НомерЗаказаФайл,
	               |	ДанныеФайла.НомерСтрокиФайла,
	               |	ДанныеФайла.НомерДоговораФайл,
	               |	ДанныеФайла.НомерПродукта,
	               |	ДанныеФайла.ПроцентДрайв,
	               |	ДанныеФайла.СкидкаДрайв,
	               |	ДанныеФайла.СпецЦена
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_ДоговорыВзаиморасчетов.Ссылка КАК Ссылка,
	               |	Scan_ДоговорыВзаиморасчетов.НомерДоговора КАК НомерДоговора
	               |ПОМЕСТИТЬ ДоговорыСоглашения
	               |ИЗ
	               |	Справочник.Scan_ДоговорыВзаиморасчетов КАК Scan_ДоговорыВзаиморасчетов
	               |ГДЕ
	               |	Scan_ДоговорыВзаиморасчетов.НомерДоговора <> """"
	               |	И Scan_ДоговорыВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
	               |	И (Scan_ДоговорыВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДоговоров.Соглашение)
	               |			ИЛИ Scan_ДоговорыВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДоговоров.ДопСоглашениеКСОП))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗаказовПродуктовСУ.Продукт КАК Продукт,
	               |	ТаблицаЗаказовПродуктовСУ.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ТаблицаЗаказовПродуктовСУ.НомерДоговораФайл КАК НомерДоговораФайл,
	               |	ТаблицаЗаказовПродуктовСУ.НомерЗаказаФайл КАК НомерЗаказаФайл,
	               |	ТаблицаЗаказовПродуктовСУ.НомерПродукта КАК НомерПродукта,
	               |	ТаблицаЗаказовПродуктовСУ.ПроцентДрайв КАК ПроцентДрайв,
	               |	ТаблицаЗаказовПродуктовСУ.СкидкаДрайв КАК СкидкаДрайв,
	               |	ТаблицаЗаказовПродуктовСУ.СпецЦена КАК СпецЦена,
	               |	ТаблицаЗаказовПродуктовСУ.НомерСтрокиФайла КАК НомерСтрокиФайла,
	               |	ТаблицаЗаказовПродуктовСУ.СУ КАК СУ,
	               |	МАКСИМУМ(ЕСТЬNULL(ДоговорыСоглашения.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка))) КАК Договор,
	               |	МАКСИМУМ(ЕСТЬNULL(ДоговорыСоглашения.НомерДоговора, """")) КАК НомерДоговора
	               |ПОМЕСТИТЬ ТаблицаСДоговором
	               |ИЗ
	               |	ТаблицаЗаказовПродуктовСУ КАК ТаблицаЗаказовПродуктовСУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСоглашения КАК ДоговорыСоглашения
	               |		ПО (ДоговорыСоглашения.НомерДоговора ПОДОБНО ТаблицаЗаказовПродуктовСУ.НомерДоговораФайл + ""%"")
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаЗаказовПродуктовСУ.Продукт,
	               |	ТаблицаЗаказовПродуктовСУ.ЗаказНаЗавод,
	               |	ТаблицаЗаказовПродуктовСУ.НомерДоговораФайл,
	               |	ТаблицаЗаказовПродуктовСУ.НомерЗаказаФайл,
	               |	ТаблицаЗаказовПродуктовСУ.НомерПродукта,
	               |	ТаблицаЗаказовПродуктовСУ.ПроцентДрайв,
	               |	ТаблицаЗаказовПродуктовСУ.СкидкаДрайв,
	               |	ТаблицаЗаказовПродуктовСУ.СпецЦена,
	               |	ТаблицаЗаказовПродуктовСУ.НомерСтрокиФайла,
	               |	ТаблицаЗаказовПродуктовСУ.СУ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСДоговором.Продукт КАК Продукт,
	               |	ТаблицаСДоговором.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ТаблицаСДоговором.НомерДоговораФайл КАК НомерДоговораФайл,
	               |	ТаблицаСДоговором.НомерЗаказаФайл КАК НомерЗаказаФайл,
	               |	ТаблицаСДоговором.НомерПродукта КАК НомерПродукта,
	               |	ТаблицаСДоговором.ПроцентДрайв КАК ПроцентДрайв,
	               |	ТаблицаСДоговором.СкидкаДрайв КАК СкидкаДрайв,
	               |	ТаблицаСДоговором.СпецЦена КАК СпецЦена,
	               |	ТаблицаСДоговором.НомерСтрокиФайла КАК НомерСтрокиФайла,
	               |	ТаблицаСДоговором.СУ КАК СУ,
	               |	ЕСТЬNULL(ДоговорыСоглашения.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка)) КАК Договор
	               |ПОМЕСТИТЬ ТаблицаСПоследнимДоговором
	               |ИЗ
	               |	ТаблицаСДоговором КАК ТаблицаСДоговором
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСоглашения КАК ДоговорыСоглашения
	               |		ПО ТаблицаСДоговором.НомерДоговора = ДоговорыСоглашения.НомерДоговора
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСПоследнимДоговором.Продукт КАК Продукт,
	               |	ТаблицаСПоследнимДоговором.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ТаблицаСПоследнимДоговором.НомерДоговораФайл КАК НомерДоговораФайл,
	               |	ТаблицаСПоследнимДоговором.НомерЗаказаФайл КАК НомерЗаказаФайл,
	               |	ТаблицаСПоследнимДоговором.НомерПродукта КАК НомерПродукта,
	               |	ТаблицаСПоследнимДоговором.ПроцентДрайв КАК ПроцентДрайв,
	               |	ТаблицаСПоследнимДоговором.СкидкаДрайв КАК СкидкаДрайв,
	               |	ТаблицаСПоследнимДоговором.СпецЦена КАК СпецЦена,
	               |	ТаблицаСПоследнимДоговором.НомерСтрокиФайла КАК НомерСтрокиФайла,
	               |	ТаблицаСПоследнимДоговором.СУ КАК СУ,
	               |	ТаблицаСПоследнимДоговором.Договор КАК Договор,
	               |	ТаблицаСПоследнимДоговором.Продукт.НомерИзделия КАК НомерИзделия,
	               |	ТаблицаСПоследнимДоговором.Продукт.СоглашениеОПоставке КАК ЗаявкаВПродукте,
	               |	МАКСИМУМ(Scan_СоглашенияОПоставке.Ссылка) КАК Заявка
	               |ИЗ
	               |	ТаблицаСПоследнимДоговором КАК ТаблицаСПоследнимДоговором
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
	               |		ПО ТаблицаСПоследнимДоговором.Договор = Scan_СоглашенияОПоставке.Договор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаСПоследнимДоговором.НомерСтрокиФайла,
	               |	ТаблицаСПоследнимДоговором.ЗаказНаЗавод,
	               |	ТаблицаСПоследнимДоговором.НомерПродукта,
	               |	ТаблицаСПоследнимДоговором.СпецЦена,
	               |	ТаблицаСПоследнимДоговором.НомерЗаказаФайл,
	               |	ТаблицаСПоследнимДоговором.НомерДоговораФайл,
	               |	ТаблицаСПоследнимДоговором.Продукт,
	               |	ТаблицаСПоследнимДоговором.ПроцентДрайв,
	               |	ТаблицаСПоследнимДоговором.СкидкаДрайв,
	               |	ТаблицаСПоследнимДоговором.СУ,
	               |	ТаблицаСПоследнимДоговором.Договор,
	               |	ТаблицаСПоследнимДоговором.Продукт.НомерИзделия,
	               |	ТаблицаСПоследнимДоговором.Продукт.СоглашениеОПоставке";

	
	Запрос.УстановитьПараметр("ДанныеФайла",РеквизитФормыВЗначение("УТ_ТЗДанныеСОВА"));
	//РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//УТ_ТЗДанныеСОВА.Загрузить(РезультатЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетЗаписей = РезультатЗапроса.Выбрать();
	
	СообщениеОНенайденных = "Не удалось найти договоры: ";
	КоличествоНенайденных = 0;
	
	УТ_ТЗДанныеСОВА.Очистить();
	Пока ВыборкаДетЗаписей.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаДетЗаписей.Договор) Тогда
			СообщениеОНенайденных = СообщениеОНенайденных + ВыборкаДетЗаписей.НомерДоговораФайл + "; ";
			КоличествоНенайденных = КоличествоНенайденных + 1;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = УТ_ТЗДанныеСОВА.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетЗаписей);
	КонецЦикла;
	
	Если КоличествоНенайденных <> 0 Тогда
		Сообщить("Не найдено договоров: " + КоличествоНенайденных);
		Сообщить(СокрЛП(СообщениеОНенайденных));
	КонецЕсли;
	
	ВсегоСтрокУТ_ДанныеСОВА = УТ_ТЗДанныеСОВА.Количество();
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура УТ_ЦеныСОВА_Записать(Команда)
	Если УТ_ТЗДанныеСОВА.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать файл данных");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиЦенСОВА",0.1,Истина);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиЦенСОВА()
	
	ВывестиСообщениеПол("Начата запись данных СОВА" + " " + ТекущаяДата());
	УТ_ЦеныСОВА_ЗаписатьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УТ_ЦеныСОВА_ЗаписатьНаСервере()
	
	МассивСУДляОбновленияСтатуса = Новый Массив;
	КоличествоОшибок = 0;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗДанныеСОВА.Договор КАК Договор,
		|	ТЗДанныеСОВА.Продукт КАК Продукт,
		|	ТЗДанныеСОВА.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ТЗДанныеСОВА.Заявка КАК Заявка,
		|	ТЗДанныеСОВА.ПроцентДрайв КАК ПроцентДрайв,
		|	ТЗДанныеСОВА.СкидкаДрайв КАК СкидкаДрайв,
		|	ТЗДанныеСОВА.СУ КАК СУ,
		|	ТЗДанныеСОВА.ЗаявкаВПродукте КАК ЗаявкаВПродукте
		|ПОМЕСТИТЬ ДанныеТаблицы
		|ИЗ
		|	&ТЗДанныеСОВА КАК ТЗДанныеСОВА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТаблицы.Договор КАК Договор,
		|	ДанныеТаблицы.Продукт КАК Продукт,
		|	ДанныеТаблицы.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ДанныеТаблицы.Заявка КАК Заявка,
		|	ДанныеТаблицы.ПроцентДрайв КАК ПроцентДрайв,
		|	ДанныеТаблицы.СкидкаДрайв КАК СкидкаДрайв,
		|	ДанныеТаблицы.СУ КАК СУ
		|ИЗ
		|	ДанныеТаблицы КАК ДанныеТаблицы
		|ГДЕ
		|	ДанныеТаблицы.Заявка = ДанныеТаблицы.ЗаявкаВПродукте
		|	И (ДанныеТаблицы.ПроцентДрайв <> 0
		|			ИЛИ ДанныеТаблицы.СУ <> ЗНАЧЕНИЕ(Справочник.Scan_СпециальныеУсловия.пустаяСсылка))
		|	И ДанныеТаблицы.Договор <> ЗНАЧЕНИЕ(Справочник.Scan_ДоговорыВзаиморасчетов.пустаяСсылка)
		|	И ДанныеТаблицы.Продукт <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.пустаяСсылка)
		|	И ДанныеТаблицы.Заявка <> ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.пустаяСсылка)
		|ИТОГИ
		|	МАКСИМУМ(Заявка)
		|ПО
		|	Договор";
	
	Запрос.УстановитьПараметр("ТЗДанныеСОВА",УТ_ТЗДанныеСОВА.Выгрузить());  	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДоговор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДоговор.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДоговор
		
		ЗаявкаОбъект = ВыборкаДоговор.Заявка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.СтавкаНДС) Тогда
			ЗаявкаОбъект.СтавкаНДС = Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаДоговор.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Найдем строку с продуктом
			НайденнаяСтрока = ЗаявкаОбъект.СписокПродуктов.Найти(ВыборкаДетальныеЗаписи.Продукт,"Продукт");
			Если НайденнаяСтрока = Неопределено Тогда
				КоличествоОшибок = КоличествоОшибок + 1;
				// запишем ошибку
				ПараметрыОтбора = Новый Структура("НомерСтрокиФайла", ВыборкаДетальныеЗаписи.НомерСтрокиФайла);
				НайденныеСтроки = УТ_ТЗДанныеСОВА.НайтиСтроки(ПараметрыОтбора);
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					ТекСтрока.ДанныеОбработаны = Истина;
					ТекСтрока.Ошибки = "В заявке не найден продукт.";
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			// Заполним данные в заявке
			НайденнаяСтрока.ПроцентДрайв = ВыборкаДетальныеЗаписи.ПроцентДрайв;
			НайденнаяСтрока.СпециальныеУсловия = ВыборкаДетальныеЗаписи.СУ;
			НайденнаяСтрока.Драйв = ЗначениеЗаполнено(НайденнаяСтрока.ПроцентДрайв);
			
			// Создадим документ установки цен
			ДокументУстановкиЦен = СоздатьДокументУстановкиПлановыхЦен(НайденнаяСтрока, ЗаявкаОбъект);
			Если ДокументУстановкиЦен = Неопределено Тогда
				КоличествоОшибок = КоличествоОшибок + 1;
				// запишем ошибку
				ПараметрыОтбора = Новый Структура("НомерСтрокиФайла", ВыборкаДетальныеЗаписи.НомерСтрокиФайла);
				НайденныеСтроки = УТ_ТЗДанныеСОВА.НайтиСтроки(ПараметрыОтбора);
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Ошибка при создании документа установки плановых цен продукта.";
				КонецЦикла;	
			Иначе 				
				// Скорректируем в документе размер скидки по драйву
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СкидкаДрайв) Тогда
					ДокументУстановкиЦенОбъект = ДокументУстановкиЦен.ПолучитьОбъект();
					НайденнаяСоставляющая = ДокументУстановкиЦенОбъект.СкидкиНаценки.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ДрайвDealerNet"),"СоставляющаяЦены");	
					Если НайденнаяСоставляющая <> Неопределено Тогда
						НайденнаяСоставляющая.ЦенаСНДС = ВыборкаДетальныеЗаписи.СкидкаДрайв;
						
						ЗначениеСтавки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденнаяСоставляющая.СтавкаНДС,"Ставка");
						НайденнаяСоставляющая.ЦенаБезНДС = 100*НайденнаяСоставляющая.ЦенаСНДС/(100 + ЗначениеСтавки);
						НайденнаяСоставляющая.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
						
						Попытка
							ДокументУстановкиЦенОбъект.Записать();
						Исключение
							КоличествоОшибок = КоличествоОшибок + 1;
							// запишем ошибку
							ПараметрыОтбора = Новый Структура("НомерСтрокиФайла", ВыборкаДетальныеЗаписи.НомерСтрокиФайла);
							НайденныеСтроки = УТ_ТЗДанныеСОВА.НайтиСтроки(ПараметрыОтбора);
							Для Каждого ТекСтрока Из НайденныеСтроки Цикл
								ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Ошибка при корректировке суммы скидки по драйву.";
							КонецЦикла;	
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  			
			
			// Установим флаг, что данные обработаны
			ПараметрыОтбора = Новый Структура("НомерСтрокиФайла", ВыборкаДетальныеЗаписи.НомерСтрокиФайла);
			НайденныеСтроки = УТ_ТЗДанныеСОВА.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекСтрока.ДанныеОбработаны = Истина;
			КонецЦикла;

		КонецЦикла;
		
		// Запишем заявку
		Попытка
			ЗаявкаОбъект.Записать();
			
			Для Каждого ТекСтрока Из ЗаявкаОбъект.СписокПродуктов Цикл
				Если ЗначениеЗаполнено(ТекСтрока.СпециальныеУсловия) Тогда
					МассивСУДляОбновленияСтатуса.Добавить(ТекСтрока.СпециальныеУсловия);
				КонецЕсли;
			КонецЦикла;
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
			ПараметрыОтбора = Новый Структура("Договор", ВыборкаДоговор.Договор);
			НайденныеСтроки = УТ_ТЗДанныеСОВА.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекСтрока.ДанныеОбработаны = Истина;
				ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось записать заявку. " + ОписаниеОшибки();
			КонецЦикла;
			
		КонецПопытки;
	КонецЦикла;
	
	// У указанных СУ, если был статус Одобрено нет в СОП, то установим Одобрено, есть в СОП.
	Для Каждого ТекСУ Из МассивСУДляОбновленияСтатуса Цикл
		Если ТекСУ.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.ОдобреноНетВСОП") Тогда
			ТекСУОбъект = ТекСУ.ПолучитьОбъект();
			ТекСУОбъект.Статус = ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.ОдобреноЕстьВСОП");
			
			Попытка
				ТекСУОбъект.Записать();
			Исключение
				КоличествоОшибок = КоличествоОшибок + 1;
				ПараметрыОтбора = Новый Структура("СУ", ТекСУ);
				НайденныеСтроки = УТ_ТЗДанныеСОВА.НайтиСтроки(ПараметрыОтбора);
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось записать статус СУ. " + ОписаниеОшибки();
				КонецЦикла;  				
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА  

	ПараметрыОтбора = Новый Структура("ДанныеОбработаны", Истина);
	НайденныеСтроки = УТ_ТЗДанныеСОВА.НайтиСтроки(ПараметрыОтбора);
	УТ_ДанныеСОВА_ВсегоОбработано = НайденныеСтроки.Количество();
	
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Количество ошибок : %1",,,,, КоличествоОшибок);
				
КонецПроцедуры

&НаСервере
Функция СоздатьДокументУстановкиПлановыхЦен(СтрокаТаблицы, ЗаявкаОбъект, СообщениеОбОшибке = "")
	ТабРучныхСоставляющих = Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьТаблицуРучныхСоставляющихСкидкиНаценки(СтрокаТаблицы.Продукт);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Установка Базовой цены
	СтрокаСоставляющей 				= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаДилера"),"СоставляющаяЦены");
	СтрокаСоставляющей.ЦенаСНДС 	= СтрокаТаблицы.ЦенаСНДС;
	СтрокаСоставляющей.ЦенаБезНДС 	= СтрокаТаблицы.ЦенаБезНДС;
	СтрокаСоставляющей.СтавкаНДС 	= ЗаявкаОбъект.СтавкаНДС;
	СтрокаСоставляющей.Пользователь = ТекущийПользователь;
	СтрокаСоставляющей.Источник 	= ЗаявкаОбъект.Ссылка; 
	
	// Установка СУ и цены для клиента
	Если ЗначениеЗаполнено(СтрокаТаблицы.СпециальныеУсловия) Тогда
		СтрокаСоставляющей 					= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet"),"СоставляющаяЦены");
		СтрокаСоставляющей.ЦенаСНДС 		= СтрокаТаблицы.СпециальныеУсловия.СпецDealerNet;
		СтрокаСоставляющей.ЦенаБезНДС 		= СтрокаТаблицы.СпециальныеУсловия.ЦенаБезНДС;
		СтрокаСоставляющей.СтавкаНДС 		= СтрокаТаблицы.СпециальныеУсловия.СтавкаНДС;
		СтрокаСоставляющей.Пользователь		= ТекущийПользователь;
		СтрокаСоставляющей.Источник			= ЗаявкаОбъект.Ссылка;
		
		СтрокаСоставляющей = ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУRetailPrice"),"СоставляющаяЦены");
		СтрокаСоставляющей.ЦенаСНДС 		= СтрокаТаблицы.СпециальныеУсловия.СпецCustomerPrice;
		СтрокаСоставляющей.ЦенаБезНДС		= СтрокаТаблицы.СпециальныеУсловия.ЦенаДляКлиентаБезНДС;
		СтрокаСоставляющей.СтавкаНДС 		= СтрокаТаблицы.СпециальныеУсловия.СтавкаНДС;
		СтрокаСоставляющей.Пользователь 	= ТекущийПользователь;
		СтрокаСоставляющей.Источник 		= ЗаявкаОбъект.Ссылка;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЦенаСНДС) Тогда
			// Установка Базовой цены = цене СУ
			СтрокаСоставляющей 				= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаДилера"),"СоставляющаяЦены");
			СтрокаСоставляющей.ЦенаСНДС 	= СтрокаТаблицы.СпециальныеУсловия.СпецDealerNet;
			СтрокаСоставляющей.ЦенаБезНДС 	= СтрокаТаблицы.СпециальныеУсловия.ЦенаБезНДС;
			СтрокаСоставляющей.СтавкаНДС 	= ЗаявкаОбъект.СтавкаНДС;
			СтрокаСоставляющей.Пользователь = ТекущийПользователь;
			СтрокаСоставляющей.Источник 	= ЗаявкаОбъект.Ссылка; 			
		КонецЕсли;
	Иначе
		СтрокаСоставляющей 					= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet"),"СоставляющаяЦены");
		СтрокаСоставляющей.ЦенаСНДС 		= 0;
		СтрокаСоставляющей.ЦенаБезНДС 		= 0;
		СтрокаСоставляющей.Пользователь		= ТекущийПользователь;
		СтрокаСоставляющей.Источник			= ЗаявкаОбъект.Ссылка;
		
		СтрокаСоставляющей = ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУRetailPrice"),"СоставляющаяЦены");
		СтрокаСоставляющей.ЦенаСНДС 		= 0;
		СтрокаСоставляющей.Пользователь 	= ТекущийПользователь;
		СтрокаСоставляющей.Источник 		= ЗаявкаОбъект.Ссылка;	
	КонецЕсли;
	
	// Установка % драйва
	СтрокаСоставляющей 					= ТабРучныхСоставляющих.Найти(ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ПроцентДрайва"),"СоставляющаяЦены");
	СтрокаСоставляющей.ЦенаСНДС 		= СтрокаТаблицы.ПроцентДрайв;
	СтрокаСоставляющей.ЦенаБезНДС 		= СтрокаТаблицы.ПроцентДрайв;	
	СтрокаСоставляющей.СтавкаНДС 		= ЗаявкаОбъект.СтавкаНДС;
	СтрокаСоставляющей.Пользователь 	= ТекущийПользователь;
	СтрокаСоставляющей.Источник 		= ЗаявкаОбъект.Ссылка;
	
	
	ДокументУстановкиЦен = Документы.Scan_УстановкаПлановыхЦенПродукта.СоздатьСкорректироватьДокументУстановкиЦен(СтрокаТаблицы.Продукт,ТабРучныхСоставляющих,ЗаявкаОбъект.Ссылка,СтрокаТаблицы.СпециальныеУсловия);	
	
	Возврат ДокументУстановкиЦен;	
КонецФункции

&НаСервере
Процедура УТ_ПрочитатьДанныеСпецификации(ПараметрыЗагрузки)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 8;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	
	НомерСтрокиФайла = 2;
	УТ_ТЗСпецификации.Очистить();
	                            	
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		
		НоваяСтрока = УТ_ТЗСпецификации.Добавить();
		
		НоваяСтрока.НомерДоговораФайл = СокрЛП(СтрокаФайла.Договор);
		НоваяСтрока.ЦенаЗакупки = СокрЛП(СтрокаФайла.ЦенаЗакупки);
		НоваяСтрока.ЦенаПродажи = СокрЛП(СтрокаФайла.ЦенаПродажи);
		НоваяСтрока.НДСПродажи = СокрЛП(СтрокаФайла.НДСПродажи);
		НоваяСтрока.Количество = СокрЛП(СтрокаФайла.Количество);
		НоваяСтрока.СуммаПродажи = СокрЛП(СтрокаФайла.СуммаПродажи);
		НоваяСтрока.СрокПоставки = ПреобразоватьСтрокуВДату(СокрЛП(СтрокаФайла.СрокПоставки));
		НоваяСтрока.Примечание = СокрЛП(СтрокаФайла.Примечание);
		
		НоваяСтрока.НомерСтрокиФайла = НомерСтрокиФайла;
		НомерСтрокиФайла = НомерСтрокиФайла + 1;
	КонецЦикла;		
		

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСпецификации.НомерДоговораФайл КАК НомерДоговораФайл,
		|	ТаблицаСпецификации.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ТаблицаСпецификации.ЦенаПродажи КАК ЦенаПродажи,
		|	ТаблицаСпецификации.НДСПродажи КАК НДСПродажи,
		|	ТаблицаСпецификации.Количество КАК Количество,
		|	ТаблицаСпецификации.СуммаПродажи КАК СуммаПродажи,
		|	ТаблицаСпецификации.СрокПоставки КАК СрокПоставки,
		|	ТаблицаСпецификации.Примечание КАК Примечание,
		|	ТаблицаСпецификации.НомерСтрокиФайла КАК НомерСтрокиФайла
		|ПОМЕСТИТЬ ДанныеФайла
		|ИЗ
		|	&ТаблицаСпецификации КАК ТаблицаСпецификации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеФайла.НомерДоговораФайл КАК НомерДоговораФайл,
		|	ДанныеФайла.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ДанныеФайла.ЦенаПродажи КАК ЦенаПродажи,
		|	ДанныеФайла.НДСПродажи КАК НДСПродажи,
		|	ДанныеФайла.Количество КАК Количество,
		|	ДанныеФайла.СуммаПродажи КАК СуммаПродажи,
		|	ДанныеФайла.СрокПоставки КАК СрокПоставки,
		|	ДанныеФайла.Примечание КАК Примечание,
		|	ДанныеФайла.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	МАКСИМУМ(ЕСТЬNULL(Scan_СоглашенияОПоставке.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка))) КАК Заявка,
		|	МАКСИМУМ(ЕСТЬNULL(Scan_СоглашенияОПоставке.Договор, ЗНАЧЕНИЕ(Справочник.Scan_ДоговорыВзаиморасчетов.ПустаяСсылка))) КАК Договор
		|ПОМЕСТИТЬ ТаблицаСЗаявкой
		|ИЗ
		|	ДанныеФайла КАК ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_СоглашенияОПоставке КАК Scan_СоглашенияОПоставке
		|		ПО ДанныеФайла.НомерДоговораФайл = Scan_СоглашенияОПоставке.Договор.НомерДоговора
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеФайла.НомерДоговораФайл,
		|	ДанныеФайла.ЦенаЗакупки,
		|	ДанныеФайла.ЦенаПродажи,
		|	ДанныеФайла.НДСПродажи,
		|	ДанныеФайла.Количество,
		|	ДанныеФайла.СуммаПродажи,
		|	ДанныеФайла.СрокПоставки,
		|	ДанныеФайла.Примечание,
		|	ДанныеФайла.НомерСтрокиФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСЗаявкой.НомерДоговораФайл КАК НомерДоговораФайл,
		|	ТаблицаСЗаявкой.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ТаблицаСЗаявкой.ЦенаПродажи КАК ЦенаПродажи,
		|	ТаблицаСЗаявкой.НДСПродажи КАК НДСПродажи,
		|	ТаблицаСЗаявкой.Количество КАК Количество,
		|	ТаблицаСЗаявкой.СуммаПродажи КАК СуммаПродажи,
		|	ТаблицаСЗаявкой.СрокПоставки КАК СрокПоставки,
		|	ТаблицаСЗаявкой.Примечание КАК Примечание,
		|	ТаблицаСЗаявкой.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ТаблицаСЗаявкой.Заявка КАК Заявка,
		|	ТаблицаСЗаявкой.Договор КАК Договор,
		|	ТаблицаСЗаявкой.Заявка.Статус КАК ЗаявкаСтатус
		|ПОМЕСТИТЬ ТЗ_ВсеДанныеФайла
		|ИЗ
		|	ТаблицаСЗаявкой КАК ТаблицаСЗаявкой
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЗ_ВсеДанныеФайла.ЦенаЗакупки) КАК ЦенаЗакупкиКоличество,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЗ_ВсеДанныеФайла.ЦенаПродажи) КАК ЦенаПродажиКоличество,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЗ_ВсеДанныеФайла.СрокПоставки) КАК СрокПоставкиКоличество,
		|	ТЗ_ВсеДанныеФайла.Заявка КАК Заявка,
		|	ТЗ_ВсеДанныеФайла.Договор КАК Договор,
		|	ТЗ_ВсеДанныеФайла.ЗаявкаСтатус КАК ЗаявкаСтатус
		|ПОМЕСТИТЬ ТЗ_ОформленныеСгруппированные
		|ИЗ
		|	ТЗ_ВсеДанныеФайла КАК ТЗ_ВсеДанныеФайла
		|ГДЕ
		|	ТЗ_ВсеДанныеФайла.ЗаявкаСтатус = &СтатусСОПОформлен
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЗ_ВсеДанныеФайла.Заявка,
		|	ТЗ_ВсеДанныеФайла.Договор,
		|	ТЗ_ВсеДанныеФайла.ЗаявкаСтатус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ОформленныеСгруппированные.Заявка КАК Заявка,
		|	ВЫБОР
		|		КОГДА ТЗ_ОформленныеСгруппированные.ЦенаЗакупкиКоличество = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПеренестиЦенуЗакупки,
		|	ВЫБОР
		|		КОГДА ТЗ_ОформленныеСгруппированные.ЦенаПродажиКоличество = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПеренестиЦенуПродажи,
		|	ЛОЖЬ КАК ПеренестиСрокПоставки
		//|	ВЫБОР
		//|		КОГДА ТЗ_ОформленныеСгруппированные.СрокПоставкиКоличество = 1
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ЛОЖЬ
		//|	КОНЕЦ КАК ПеренестиСрокПоставки
		|ПОМЕСТИТЬ ТЗ_Заявки_ФлагиПереноса
		|ИЗ
		|	ТЗ_ОформленныеСгруппированные КАК ТЗ_ОформленныеСгруппированные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ВсеДанныеФайла.НомерДоговораФайл КАК НомерДоговораФайл,
		|	ТЗ_ВсеДанныеФайла.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ТЗ_ВсеДанныеФайла.ЦенаПродажи КАК ЦенаПродажи,
		|	ТЗ_ВсеДанныеФайла.НДСПродажи КАК НДСПродажи,
		|	ТЗ_ВсеДанныеФайла.Количество КАК Количество,
		|	ТЗ_ВсеДанныеФайла.СуммаПродажи КАК СуммаПродажи,
		|	ТЗ_ВсеДанныеФайла.СрокПоставки КАК СрокПоставки,
		|	ТЗ_ВсеДанныеФайла.Примечание КАК Примечание,
		|	ТЗ_ВсеДанныеФайла.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ТЗ_ВсеДанныеФайла.Заявка КАК Заявка,
		|	ТЗ_ВсеДанныеФайла.Договор КАК Договор,
		|	ТЗ_ВсеДанныеФайла.ЗаявкаСтатус КАК ЗаявкаСтатус,
		|	ЕСТЬNULL(ТЗ_Заявки_ФлагиПереноса.ПеренестиЦенуЗакупки, ЛОЖЬ) КАК ПеренестиЦенуЗакупки,
		|	ЕСТЬNULL(ТЗ_Заявки_ФлагиПереноса.ПеренестиЦенуПродажи, ЛОЖЬ) КАК ПеренестиЦенуПродажи,
		|	ЕСТЬNULL(ТЗ_Заявки_ФлагиПереноса.ПеренестиСрокПоставки, ЛОЖЬ) КАК ПеренестиСрокПоставки,
		|	ВЫБОР
		|		КОГДА ТЗ_Заявки_ФлагиПереноса.ПеренестиЦенуЗакупки = ЛОЖЬ
		|				ИЛИ ТЗ_Заявки_ФлагиПереноса.ПеренестиЦенуПродажи = ЛОЖЬ
		//|				ИЛИ ТЗ_Заявки_ФлагиПереноса.ПеренестиСрокПоставки = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбработатьВручную
		|ИЗ
		|	ТЗ_ВсеДанныеФайла КАК ТЗ_ВсеДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_Заявки_ФлагиПереноса КАК ТЗ_Заявки_ФлагиПереноса
		|		ПО ТЗ_ВсеДанныеФайла.Заявка = ТЗ_Заявки_ФлагиПереноса.Заявка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиФайла";
	
	Запрос.УстановитьПараметр("ТаблицаСпецификации",РеквизитФормыВЗначение("УТ_ТЗСпецификации"));
	Запрос.УстановитьПараметр("СтатусСОПОформлен",ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен"));
	РезультатЗапроса = Запрос.Выполнить();
	УТ_ТЗСпецификации.Загрузить(РезультатЗапроса.Выгрузить());
	
	ВсегоСтрокУТ_Спецификации = УТ_ТЗСпецификации.Количество();
	       	
	// Заполним таблицу по ручной обработке данных 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_ВсеДанныеФайла.НомерДоговораФайл КАК НомерДоговораФайл,
		|	ТЗ_ВсеДанныеФайла.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ТЗ_ВсеДанныеФайла.ЦенаПродажи КАК ЦенаПродажи,
		|	ТЗ_ВсеДанныеФайла.НДСПродажи КАК НДСПродажи,
		|	ТЗ_ВсеДанныеФайла.Количество КАК Количество,
		|	ТЗ_ВсеДанныеФайла.СуммаПродажи КАК СуммаПродажи,
		|	ТЗ_ВсеДанныеФайла.СрокПоставки КАК СрокПоставки,
		|	ТЗ_ВсеДанныеФайла.Примечание КАК Примечание,
		|	ТЗ_ВсеДанныеФайла.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ТЗ_ВсеДанныеФайла.ПеренестиЦенуЗакупки КАК ПеренестиЦенуЗакупки,
		|	ТЗ_ВсеДанныеФайла.ПеренестиЦенуПродажи КАК ПеренестиЦенуПродажи,
		//|	ТЗ_ВсеДанныеФайла.ПеренестиСрокПоставки КАК ПеренестиСрокПоставки,
		|	ТЗ_ВсеДанныеФайла.ОбработатьВручную КАК ОбработатьВручную,
		|	ТЗ_ВсеДанныеФайла.Заявка КАК Заявка,
		|	ТЗ_ВсеДанныеФайла.ЗаявкаСтатус КАК ЗаявкаСтатус
		|ПОМЕСТИТЬ ДанныеВсе
		|ИЗ
		|	&ТЗ_ВсеДанныеФайла КАК ТЗ_ВсеДанныеФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВсе.НомерДоговораФайл КАК НомерДоговораФайл,
		|	ДанныеВсе.Заявка КАК Заявка,
		|	ДанныеВсе.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ДанныеВсе.ЦенаПродажи КАК ЦенаПродажи,
		|	ДанныеВсе.НДСПродажи КАК НДСПродажи,
		|	ДанныеВсе.Количество КАК Количество,
		|	ДанныеВсе.СуммаПродажи КАК СуммаПродажи,
		|	ДанныеВсе.СрокПоставки КАК СрокПоставки,
		|	ДанныеВсе.Примечание КАК Примечание,
		|	ДанныеВсе.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	НЕ ДанныеВсе.ПеренестиЦенуЗакупки КАК ПроверитьЦенуЗакупки,
		|	НЕ ДанныеВсе.ПеренестиЦенуПродажи КАК ПроверитьЦенуПродажи
		//|	НЕ ДанныеВсе.ПеренестиСрокПоставки КАК ПроверитьСрокПоставки
		|ИЗ
		|	ДанныеВсе КАК ДанныеВсе
		|ГДЕ
		|	ДанныеВсе.ОбработатьВручную = ИСТИНА
		|	И ДанныеВсе.ЗаявкаСтатус = &СтатусСОПОформлен";
	Запрос.УстановитьПараметр("ТЗ_ВсеДанныеФайла",РеквизитФормыВЗначение("УТ_ТЗСпецификации"));
	Запрос.УстановитьПараметр("СтатусСОПОформлен",ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен"));
	РезультатЗапроса = Запрос.Выполнить();
	УТ_ТЗДляРучнойОбработки.Загрузить(РезультатЗапроса.Выгрузить());
	
	ВсегоСтрокУТ_РучнаяОбработка = УТ_ТЗДляРучнойОбработки.Количество();
	
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура УТ_ЦеныСпецификация_Записать(Команда)
	Если УТ_ТЗСпецификации.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать файл данных");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиЦенСпецификации",0.1,Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиЦенСпецификации()
	
	ВывестиСообщениеПол("Начата запись данных по спецификации" + " " + ТекущаяДата());
	УТ_ЦеныСпецификация_ЗаписатьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УТ_ЦеныСпецификация_ЗаписатьНаСервере()

	КоличествоОшибок = 0;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_Спецификации.Договор КАК Договор,
		|	ТЗ_Спецификации.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ТЗ_Спецификации.ЦенаПродажи КАК ЦенаПродажи,
		|	ТЗ_Спецификации.НДСПродажи КАК НДСПродажи,
		|	ТЗ_Спецификации.СрокПоставки КАК СрокПоставки,
		|	ТЗ_Спецификации.Примечание КАК Примечание,
		|	ТЗ_Спецификации.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ТЗ_Спецификации.Заявка КАК Заявка,
		|	ТЗ_Спецификации.ПеренестиЦенуПродажи КАК ПеренестиЦенуПродажи,
		|	ТЗ_Спецификации.ПеренестиСрокПоставки КАК ПеренестиСрокПоставки,
		|	ТЗ_Спецификации.ПеренестиЦенуЗакупки КАК ПеренестиЦенуЗакупки,
		|	ТЗ_Спецификации.ОбработатьВручную КАК ОбработатьВручную
		|ПОМЕСТИТЬ ДанныеТаблицы
		|ИЗ
		|	&ТЗ_Спецификации КАК ТЗ_Спецификации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТаблицы.Договор КАК Договор,
		|	ДанныеТаблицы.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ДанныеТаблицы.ЦенаПродажи КАК ЦенаПродажи,
		|	ДанныеТаблицы.НДСПродажи КАК НДСПродажи,
		|	ДанныеТаблицы.СрокПоставки КАК СрокПоставки,
		|	ДанныеТаблицы.Примечание КАК Примечание,
		|	ДанныеТаблицы.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	ДанныеТаблицы.Заявка КАК Заявка,
		|	ДанныеТаблицы.ПеренестиЦенуПродажи КАК ПеренестиЦенуПродажи,
		|	ДанныеТаблицы.ПеренестиСрокПоставки КАК ПеренестиСрокПоставки,
		|	ДанныеТаблицы.ПеренестиЦенуЗакупки КАК ПеренестиЦенуЗакупки,
		|	ДанныеТаблицы.ОбработатьВручную КАК ОбработатьВручную
		|ИЗ
		|	ДанныеТаблицы КАК ДанныеТаблицы
		|ГДЕ
		|	ДанныеТаблицы.Заявка <> ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
		|	И (ДанныеТаблицы.ПеренестиЦенуПродажи = ИСТИНА
		|			ИЛИ ДанныеТаблицы.ПеренестиЦенуЗакупки = ИСТИНА
		|			ИЛИ ДанныеТаблицы.ПеренестиСрокПоставки = ИСТИНА
		|			ИЛИ ДанныеТаблицы.Примечание <> """")
		|ИТОГИ
		|	МАКСИМУМ(Договор),
		|	МАКСИМУМ(ЦенаЗакупки),
		|	МАКСИМУМ(ЦенаПродажи),
		|	МАКСИМУМ(НДСПродажи),
		|	МАКСИМУМ(СрокПоставки),
		|	МИНИМУМ(ПеренестиЦенуПродажи),
		|	МИНИМУМ(ПеренестиСрокПоставки),
		|	МИНИМУМ(ПеренестиЦенуЗакупки)
		|ПО
		|	Заявка";
	Запрос.УстановитьПараметр("ТЗ_Спецификации",УТ_ТЗСпецификации.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаявка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаявка.Следующий() Цикл
		
		ЗаявкаОбъект = ВыборкаЗаявка.Заявка.ПолучитьОбъект();
		
		//// Заполним срок поставки
		//Если ВыборкаЗаявка.ПеренестиСрокПоставки Тогда
		//	Для Каждого ТекСтрока Из ЗаявкаОбъект.СписокПродуктов Цикл
		//		ТекСтрока.DDS = ВыборкаЗаявка.СрокПоставки;
		//	КонецЦикла;
		//КонецЕсли;
		
		// Заполним себестоимость
		Если ВыборкаЗаявка.ПеренестиЦенуЗакупки Тогда
			Для Каждого ТекСтрока Из ЗаявкаОбъект.СписокПродуктов Цикл
				ТекСтрока.Себестоимость = ВыборкаЗаявка.ЦенаЗакупки;
			КонецЦикла;
		КонецЕсли;
		
		// Заполним цену продажи
		Если ВыборкаЗаявка.ПеренестиЦенуПродажи Тогда
			Для Каждого ТекСтрока Из ЗаявкаОбъект.СписокПродуктов Цикл
				
				// Получим документ установки цен
				ДокументУстановкиЦен = Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьДокументУстановкиЦенПоПродукту(ТекСтрока.Продукт);
				
				// Если документа нет, то создадим, заполним пустым значением базовые цены Dealer Net и СУ Dealer Net
				Если НЕ ЗначениеЗаполнено(ДокументУстановкиЦен) Тогда
					ДокументУстановкиЦен = СоздатьПустойДокументУстановкиЦен(ТекСтрока.Продукт, ЗаявкаОбъект.Ссылка);
					Если ДокументУстановкиЦен = Неопределено Тогда
						// Не удалось создать документ для продукта
						КоличествоОшибок = КоличествоОшибок + 1;
						// запишем ошибку
						ПараметрыОтбора = Новый Структура("Договор", ВыборкаЗаявка.Договор);
						НайденныеСтроки = УТ_ТЗСпецификации.НайтиСтроки(ПараметрыОтбора);
						Для Каждого ТекСтрока Из НайденныеСтроки Цикл
							ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Не удалось создать документ установки цен для продукта " + ТекСтрока.Продукт;
						КонецЦикла;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ДокументУстановкиЦенОбъект = ДокументУстановкиЦен.ПолучитьОбъект();
				
				// Получим сумму скидки по драйву 
				ДрайвDealerNet = 0;
				Если ТекСтрока.Драйв Тогда
					НайденнаяСтрока = ДокументУстановкиЦен.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.ДрайвDealerNet,"СоставляющаяЦены");
					Если НайденнаяСтрока <> Неопределено Тогда
						ДрайвDealerNet = НайденнаяСтрока.ЦенаСНДС;	
					КонецЕсли;
				КонецЕсли;
				
				// Если есть Драйв, то базовая цена = Сумма скидки драйва + цена продажи
				БазоваяЦена = ДрайвDealerNet + ВыборкаЗаявка.ЦенаПродажи;  
				ПроцентСтавкиНДС = Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаОбъект.СтавкаНДС,"Ставка"); 
				Если ПроцентСтавкиНДС = Неопределено Тогда
					ПроцентСтавкиНДС = 0;
					БазоваяЦенаБезНДС = БазоваяЦена;
				Иначе
					БазоваяЦенаБезНДС = 100 * БазоваяЦена/ (100 + ПроцентСтавкиНДС);
				КонецЕсли;
				
				// Установим базовую цену в заявке
				ТекСтрока.ЦенаСНДС = БазоваяЦена;
				ТекСтрока.ЦенаБезНДС = БазоваяЦенаБезНДС;
				
				// Установим базовую цену в документе
				НайденнаяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаДилера,"СоставляющаяЦены");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ЦенаСНДС = БазоваяЦена;	
					НайденнаяСтрока.ЦенаБезНДС = ТекСтрока.ЦенаБезНДС;
				Иначе
					// Добавим составляющую с базовой ценой
					НоваяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Добавить();
					НоваяСтрока.СоставляющаяЦены = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаДилера");
					НоваяСтрока.СтавкаНДС = ЗаявкаОбъект.Ссылка.СтавкаНДС;
					НоваяСтрока.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
					НоваяСтрока.Источник = ЗаявкаОбъект.Ссылка;
	                НоваяСтрока.ЦенаСНДС = БазоваяЦена;	
					НоваяСтрока.ЦенаБезНДС = ТекСтрока.ЦенаБезНДС;
					                        					
	                // итоговая составляющая
					НоваяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Добавить();
					НоваяСтрока.СоставляющаяЦены = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой");
					НоваяСтрока.СтавкаНДС = ЗаявкаОбъект.Ссылка.СтавкаНДС;
					НоваяСтрока.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
					НоваяСтрока.Источник = ЗаявкаОбъект.Ссылка;
				КонецЕсли;
				
				// Вспомогательно нужно установить СУ Dealer Net = базе, если нет СУ
				Если НЕ ЗначениеЗаполнено(ДокументУстановкиЦен.СпециальныеУсловия) Тогда
					НайденнаяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet,"СоставляющаяЦены");
					Если НайденнаяСтрока <> Неопределено Тогда
						НайденнаяСтрока.ЦенаСНДС = БазоваяЦена;	
						НайденнаяСтрока.ЦенаБезНДС = ТекСтрока.ЦенаБезНДС;
					Иначе
						// Добавим составляющую с СУ = базе
						НоваяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Добавить();
						НоваяСтрока.СоставляющаяЦены = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet");
						НоваяСтрока.СтавкаНДС = ЗаявкаОбъект.Ссылка.СтавкаНДС;
						НоваяСтрока.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
						НоваяСтрока.Источник = ЗаявкаОбъект.Ссылка;
						НоваяСтрока.ЦенаСНДС = БазоваяЦена;	
						НоваяСтрока.ЦенаБезНДС = ТекСтрока.ЦенаБезНДС; 						
					КонецЕсли;	
				Иначе
					// Если СУ есть, то пересчитаем скидку по СУ
					НайденнаяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.СкидкаСУDealerNet,"СоставляющаяЦены");
					Если НайденнаяСтрока <> Неопределено Тогда
						НайденнаяСтрока.ЦенаСНДС = БазоваяЦена - ДокументУстановкиЦен.СпециальныеУсловия.СпецDealerNet;	
						НайденнаяСтрока.ЦенаБезНДС = БазоваяЦенаБезНДС - ДокументУстановкиЦен.СпециальныеУсловия.ЦенаБезНДС;
					КонецЕсли;
				КонецЕсли;
				
				// Установим в документе цену продажи и итоговые цены				
				НайденнаяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой,"СоставляющаяЦены");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ЦенаСНДС = ВыборкаЗаявка.ЦенаПродажи;	
					НайденнаяСтрока.ЦенаБезНДС = 100 / (100 + ПроцентСтавкиНДС) * ВыборкаЗаявка.ЦенаПродажи;
				КонецЕсли;
				ДокументУстановкиЦенОбъект.ЦенаDealerNetСоСкидкой = ВыборкаЗаявка.ЦенаПродажи;
				
				// Запишем документ
				Попытка
					ДокументУстановкиЦенОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					КоличествоОшибок = КоличествоОшибок + 1;
					// запишем ошибку
					ПараметрыОтбора = Новый Структура("Договор", ВыборкаЗаявка.Договор);
					НайденныеСтроки = УТ_ТЗСпецификации.НайтиСтроки(ПараметрыОтбора);
					Для Каждого ТекСтрока Из НайденныеСтроки Цикл
						ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Не удалось записать документ установки цен для продукта " + ТекСтрока.Продукт + " " + ОписаниеОшибки();
					КонецЦикла;	
				КонецПопытки; 				
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаЗаявка.Выбрать();  	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Запишем примечание
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Примечание) Тогда
				ЗаявкаОбъект.КомментарийИзУТ = ЗаявкаОбъект.КомментарийИзУТ + ВыборкаДетальныеЗаписи.Примечание + "; ";
			КонецЕсли;
		КонецЦикла;
		ЗаявкаОбъект.КомментарийИзУТ = СокрЛП(ЗаявкаОбъект.КомментарийИзУТ);
		
		// Обновим график платежей
		//Если ВыборкаЗаявка.ПеренестиСрокПоставки ИЛИ ВыборкаЗаявка.ПеренестиЦенуПродажи Тогда
		Если ВыборкаЗаявка.ПеренестиЦенуПродажи Тогда
			СоответствиеЦеныDealerNet = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЦеныПродуктов(ЗаявкаОбъект.СписокПродуктов.Выгрузить(,"Продукт"), ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой"));
			ЦеныПродажиПродуктов = Новый Соответствие;
			
			Для Каждого ТекСтрока Из ЗаявкаОбъект.СписокПродуктов Цикл				
				ЦенаПродажи = СоответствиеЦеныDealerNet.Получить(ТекСтрока.Продукт);
				Если ЦенаПродажи = Неопределено Тогда
					ЦенаПродажи = 0;
				КонецЕсли;
				ЦеныПродажиПродуктов.Вставить(ТекСтрока.Продукт, ЦенаПродажи);
			КонецЦикла;
			
			ОбновитьГрафикПлатежей(ЗаявкаОбъект, ЦеныПродажиПродуктов);
		КонецЕсли;
			
		
		// Запишем заявку
		Попытка
			ЗаявкаОбъект.Записать();
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
			// запишем ошибку
			ПараметрыОтбора = Новый Структура("Договор", ВыборкаЗаявка.Договор);
			НайденныеСтроки = УТ_ТЗСпецификации.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Не удалось записать заявку " + ОписаниеОшибки();
			КонецЦикла;
		КонецПопытки;  		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Количество ошибок : %1",,,,, КоличествоОшибок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьПустойДокументУстановкиЦен(ТекПродукт, ТекЗаявка)
	ДокументОбъект = Документы.Scan_УстановкаПлановыхЦенПродукта.СоздатьДокумент();
	
	Автор = ПользователиКлиентСервер.АвторизованныйПользователь();
	ДокументОбъект.Организация = Автор.Организация;
	ДокументОбъект.ПодразделениеКомпании = Автор.ПодразделениеОрганизации;
	ДокументОбъект.Автор = Автор;
	ДокументОбъект.Менеджер = Автор;
	ДокументОбъект.Дата = ТекущаяДата();
	ДокументОбъект.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
	ДокументОбъект.ХозОперация = Справочники.Scan_ХозяйственныеОперации.УстановкаПлановыхЦенПродуктов;
	Scan_ВспомогательныеФункцииСервер.ЗаполнитьКомпаниюИКонтрагента(Автор,ДокументОбъект.Компания,ДокументОбъект.Контрагент);
	
	ДокументОбъект.Продукт = ТекПродукт;
	ДокументОбъект.СоглашениеОПоставке = ТекЗаявка;
	
	НоваяСтрока = ДокументОбъект.СкидкиНаценки.Добавить();
	НоваяСтрока.СоставляющаяЦены = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаДилера");
	НоваяСтрока.СтавкаНДС = ТекЗаявка.СтавкаНДС;
	НоваяСтрока.Пользователь = Автор;
	НоваяСтрока.Источник = ТекЗаявка;
	
	НоваяСтрока = ДокументОбъект.СкидкиНаценки.Добавить();
	НоваяСтрока.СоставляющаяЦены = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet");
	НоваяСтрока.СтавкаНДС = ТекЗаявка.СтавкаНДС;
	НоваяСтрока.Пользователь = Автор;
	НоваяСтрока.Источник = ТекЗаявка;
	
	НоваяСтрока = ДокументОбъект.СкидкиНаценки.Добавить();
	НоваяСтрока.СоставляющаяЦены = ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой");
	НоваяСтрока.СтавкаНДС = ТекЗаявка.СтавкаНДС;
	НоваяСтрока.Пользователь = Автор;
	НоваяСтрока.Источник = ТекЗаявка;   
	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеПоDDS(Команда)
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	ЗаполнитьДанныеПоDDSНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоDDSНаСервере()
	
	ТЗ_ДанныеПоDDS.Очистить();
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка КАК Заявка,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.НомерСтроки КАК НомерСтроки,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.Продукт КАК Продукт,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.Продукт.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.DDS КАК DDSзаявка
		|ПОМЕСТИТЬ ДанныеЗаявок
		|ИЗ
		|	Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Scan_КлючевыеДатыПроцессовСрезПоследних.Объект КАК ЗаказНаЗавод,
		|	Scan_КлючевыеДатыПроцессовСрезПоследних.Значение КАК DDSзаказ
		|ПОМЕСТИТЬ ДанныеЗаказов
		|ИЗ
		|	РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(
		|			,
		|			Объект В
		|					(ВЫБРАТЬ
		|						ДанныеЗаявок.ЗаказНаЗавод КАК ЗаказНаЗавод
		|					ИЗ
		|						ДанныеЗаявок КАК ДанныеЗаявок)
		|				И ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DDS)) КАК Scan_КлючевыеДатыПроцессовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗаявок.Заявка КАК Заявка,
		|	ДанныеЗаявок.НомерСтроки КАК НомерСтроки,
		|	ДанныеЗаявок.Продукт КАК Продукт,
		|	ДанныеЗаявок.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ДанныеЗаявок.DDSзаявка КАК DDSзаявка,
		|	ЕСТЬNULL(ДанныеЗаказов.DDSзаказ, ДАТАВРЕМЯ(1, 1, 1)) КАК DDSзаказ
		|ПОМЕСТИТЬ ОбъединенныеДанные
		|ИЗ
		|	ДанныеЗаявок КАК ДанныеЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗаказов КАК ДанныеЗаказов
		|		ПО ДанныеЗаявок.ЗаказНаЗавод = ДанныеЗаказов.ЗаказНаЗавод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъединенныеДанные.Заявка КАК Заявка,
		|	ОбъединенныеДанные.НомерСтроки КАК НомерСтроки,
		|	ОбъединенныеДанные.Продукт КАК Продукт,
		|	ОбъединенныеДанные.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ОбъединенныеДанные.DDSзаявка КАК DDSзаявка,
		|	ОбъединенныеДанные.DDSзаказ КАК DDSзаказ
		|ИЗ
		|	ОбъединенныеДанные КАК ОбъединенныеДанные
		|ГДЕ
		|	ОбъединенныеДанные.DDSзаявка <> ОбъединенныеДанные.DDSзаказ
		|	И ОбъединенныеДанные.DDSзаказ <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ОбъединенныеДанные.Заявка.Статус = &СтатусСОПОформлен";
	Запрос.УстановитьПараметр("СтатусСОПОформлен", ПредопределенноеЗначение("Справочник.Scan_СтатусыСоглашенийОПоставкеИСпециальныхУсловий.СОП_Оформлен"));
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ_ДанныеПоDDS.Загрузить(РезультатЗапроса.Выгрузить());
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	ВсегоСтрок_ДанныеПоDDS = ТЗ_ДанныеПоDDS.Количество();
	Сообщить(Нстр("ru = 'Завершена загрузка данных'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьDDSИзКлючевыхДат(Команда)
	Если ТЗ_ДанныеПоDDS.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала подобрать данные");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиDDSВзаявках",0.1,Истина);	
	КонецЕсли;
	ЗаписатьDDSИзКлючевыхДатНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьDDSИзКлючевыхДатНаСервере()
	КоличествоОшибок = 0;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеТаблицы.Заявка КАК Заявка,
		|	ДанныеТаблицы.НомерСтроки КАК НомерСтроки,
		|	ДанныеТаблицы.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ДанныеТаблицы.Продукт КАК Продукт,
		|	ДанныеТаблицы.DDSзаявка КАК DDSзаявка,
		|	ДанныеТаблицы.DDSзаказ КАК DDSзаказ
		|ПОМЕСТИТЬ ДанныеТЗ
		|ИЗ
		|	&ДанныеТаблицы КАК ДанныеТаблицы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТЗ.Заявка КАК Заявка,
		|	ДанныеТЗ.НомерСтроки КАК НомерСтроки,
		|	ДанныеТЗ.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ДанныеТЗ.Продукт КАК Продукт,
		|	ДанныеТЗ.DDSзаявка КАК DDSзаявка,
		|	ДанныеТЗ.DDSзаказ КАК DDSзаказ
		|ИЗ
		|	ДанныеТЗ КАК ДанныеТЗ
		|ИТОГИ ПО
		|	Заявка";
	Запрос.УстановитьПараметр("ДанныеТаблицы", ТЗ_ДанныеПоDDS.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаявка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаявка.Следующий() Цикл
		ЗаявкаОбъект = ВыборкаЗаявка.Заявка.ПолучитьОбъект();
		
		ВыборкаДетальныеЗаписи = ВыборкаЗаявка.Выбрать();
		
		// Заполним DDS
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НайденнаяСтрока = ЗаявкаОбъект.СписокПродуктов.Найти(ВыборкаДетальныеЗаписи.Продукт, "Продукт");
			Если НайденнаяСтрока<> Неопределено Тогда
				НайденнаяСтрока.DDS = ВыборкаДетальныеЗаписи.DDSзаказ;
			КонецЕсли;
		КонецЦикла;
		
		// Обновим график платежей
		СоответствиеЦеныDealerNet = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЦеныПродуктов(ЗаявкаОбъект.СписокПродуктов.Выгрузить(,"Продукт"), ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой"));
		ЦеныПродажиПродуктов = Новый Соответствие;
		
		Для Каждого ТекСтрока Из ЗаявкаОбъект.СписокПродуктов Цикл				
			ЦенаПродажи = СоответствиеЦеныDealerNet.Получить(ТекСтрока.Продукт);
			Если ЦенаПродажи = Неопределено Тогда
				ЦенаПродажи = 0;
			КонецЕсли;
			ЦеныПродажиПродуктов.Вставить(ТекСтрока.Продукт, ЦенаПродажи);
		КонецЦикла;
		
		ОбновитьГрафикПлатежей(ЗаявкаОбъект, ЦеныПродажиПродуктов);		
		
		Попытка
			ЗаявкаОбъект.Записать();
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
			
			ПараметрыОтбора = Новый Структура("Заявка", ВыборкаЗаявка.Заявка);
			НайденныеСтроки = ТЗ_ДанныеПоDDS.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекСтрока.Ошибки = ТекСтрока.Ошибки + " Не удалось записать заявку. " + ОписаниеОшибки();
			КонецЦикла;
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Количество ошибок : %1",,,,, КоличествоОшибок);

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиDDSВзаявках()
	
	ВывестиСообщениеПол("Начата запись данных" + " " + ТекущаяДата());
	ЗаписатьDDSИзКлючевыхДатНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикПлатежей(ЗаявкаОбъект, ЦеныПродажиПродуктов)
	                                         	
	ОбщаяСуммаТекущегоСоглашения = 0;
	Для Каждого ТекСтрока Из ЦеныПродажиПродуктов Цикл
		ОбщаяСуммаТекущегоСоглашения = ОбщаяСуммаТекущегоСоглашения + ТекСтрока.Значение;
	КонецЦикла;
	
	ЗаявкаОбъект.ГрафикПлатежей.Очистить();
	Для Каждого СтрокаУсловий Из ЗаявкаОбъект.УсловияОплаты Цикл
		Для Каждого СтрокаПродукта Из ЗаявкаОбъект.СписокПродуктов Цикл
			нСтрокаГрафика = ЗаявкаОбъект.ГрафикПлатежей.Добавить();
			нСтрокаГрафика.ВидОплаты = СтрокаУсловий.ВидОплаты;
			Если СтрокаУсловий.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыДоговора") Тогда
				//При расчете от даты договора в график идет 1 общая запись
				нСтрокаГрафика.ДатаПлатежа	= СтрокаУсловий.КрайняяДатаОплаты;
				нСтрокаГрафика.Сумма		= СтрокаУсловий.Сумма;
				Прервать;
			ИначеЕсли СтрокаУсловий.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ДоДатыОтгрузкиDDS") Тогда
				Если ЗначениеЗаполнено(СтрокаПродукта.DDS) Тогда
					нСтрокаГрафика.ДатаПлатежа = НачалоДня(СтрокаПродукта.DDS) - СтрокаУсловий.СрокОплатыАванса * 60 * 60 * 24;
				КонецЕсли;
				Если НЕ ОбщаяСуммаТекущегоСоглашения = 0 Тогда
					ИтоговаяСумма = ЦеныПродажиПродуктов.Получить(СтрокаПродукта.Продукт);
					ПроцентПродукта			= 100 * ИтоговаяСумма / ОбщаяСуммаТекущегоСоглашения; 
					СуммаПоПродукту 		= СтрокаУсловий.Сумма * ПроцентПродукта / 100;
					нСтрокаГрафика.Сумма	= СуммаПоПродукту;
				КонецЕсли;	
			ИначеЕсли СтрокаУсловий.РасчетДатыОплаты = ПредопределенноеЗначение("Перечисление.Scan_ВидыРасчетаДатыОплаты.ОтДатыОтгрузкиDDS") Тогда
				Если ЗначениеЗаполнено(СтрокаПродукта.DDS) Тогда
					нСтрокаГрафика.ДатаПлатежа = НачалоДня(СтрокаПродукта.DDS) + СтрокаУсловий.СрокОплатыАванса * 60 * 60 * 24;
				КонецЕсли;
				Если НЕ ОбщаяСуммаТекущегоСоглашения = 0 Тогда
					ИтоговаяСумма = ЦеныПродажиПродуктов.Получить(СтрокаПродукта.Продукт);
					ПроцентПродукта = 100 * ИтоговаяСумма / ОбщаяСуммаТекущегоСоглашения; 
					СуммаПоПродукту = СтрокаУсловий.Сумма * ПроцентПродукта / 100;
					нСтрокаГрафика.Сумма = СуммаПоПродукту;
				КонецЕсли;	
			КонецЕсли;			
		КонецЦикла;	
	КонецЦикла;
	ЗаявкаОбъект.ГрафикПлатежей.Свернуть("ВидОплаты,ДатаПлатежа","Сумма");
	ЗаявкаОбъект.ГрафикПлатежей.Сортировать("ВидОплаты Убыв,ДатаПлатежа");
КонецПроцедуры

&НаКлиенте
Процедура УТ_ТЗДляРучнойОбработкиПриАктивизацииСтроки(Элемент)
	ТекущаяСтрокаСписка = Элементы.УТ_ТЗДляРучнойОбработки.ТекущаяСтрока;
	
	Если ТекущаяСтрокаСписка <> Неопределено Тогда
		Попытка
			Если Цены_РедактируемаяЗаявкаНаСОП <> УТ_ТЗДляРучнойОбработки[ТекущаяСтрокаСписка].Заявка Тогда
				
				Цены_РедактируемаяЗаявкаНаСОП = УТ_ТЗДляРучнойОбработки[ТекущаяСтрокаСписка].Заявка; 			    		
				ЗаполнитьТаблицуЦеныПродажи(Цены_РедактируемаяЗаявкаНаСОП);
				   				
			КонецЕсли;
		Исключение
		КонецПопытки;
	Иначе
		ТЗ_УстановитьЦенуПродажи.Очистить();	
		Элементы.УстановитьЦенуПродажи.Заголовок = "Редактирование цены продажи";
	КонецЕсли;    	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЦеныПродажи(ЗаявкаСсылка)
	ТЗ_УстановитьЦенуПродажи.Очистить();
	Элементы.УстановитьЦенуПродажи.Заголовок = "Редактирование цены продажи";
	Если НЕ ЗначениеЗаполнено(ЗаявкаСсылка) Тогда
		Возврат;
	КонецЕсли;
				
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка КАК Заявка,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.Продукт КАК Продукт,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.Драйв КАК Драйв,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.СпециальныеУсловия КАК СпециальныеУсловия,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.DDS КАК DDS,
		|	ЕСТЬNULL(Scan_КлючевыеДатыПроцессовСрезПоследних.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК DD,
		|	Scan_СоглашенияОПоставкеСписокПродуктов.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.Scan_СоглашенияОПоставке.СписокПродуктов КАК Scan_СоглашенияОПоставкеСписокПродуктов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(, ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DD)) КАК Scan_КлючевыеДатыПроцессовСрезПоследних
		|		ПО Scan_СоглашенияОПоставкеСписокПродуктов.Продукт.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессовСрезПоследних.Объект
		|ГДЕ
		|	Scan_СоглашенияОПоставкеСписокПродуктов.Ссылка = &ЗаявкаСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ЗаявкаСсылка",ЗаявкаСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ_УстановитьЦенуПродажи.Загрузить(РезультатЗапроса.Выгрузить());
	
	Если ЗначениеЗаполнено(Цены_РедактируемаяЗаявкаНаСОП.Договор) Тогда
		Элементы.УстановитьЦенуПродажи.Заголовок = "Редактирование цены продажи. СОП " + Цены_РедактируемаяЗаявкаНаСОП.Договор.НомерДоговора;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

&НаКлиенте
Процедура УТ_ЗаписатьЦеныПродажи(Команда)
	УТ_ЗаписатьЦеныПродажиНаСервере();
КонецПроцедуры

&НаСервере
Процедура УТ_ЗаписатьЦеныПродажиНаСервере()
	Если ТЗ_УстановитьЦенуПродажи.Количество() = 0 Тогда
		Сообщить("Нет данных для записи!");
		Возврат;
	КонецЕсли;
	ЗаявкаСсылка = ТЗ_УстановитьЦенуПродажи[0].Заявка;
	ЗаписатьЗаявку = Ложь;
	КоличествоОшибок = 0;
	ЗаявкаОбъект = ЗаявкаСсылка.ПолучитьОбъект();
	ЗначениеСтавкиНДС =  Scan_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаОбъект.СтавкаНДС,"Ставка");
		
	Для Каждого ТекСтрока Из ТЗ_УстановитьЦенуПродажи Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЦенаПродажиКУстановке) Тогда
			НайденнаяСтрока = ЗаявкаОбъект.СписокПродуктов.Найти(ТекСтрока.Продукт, "Продукт");
			Если НайденнаяСтрока <> Неопределено Тогда
				ЗаписатьЗаявку = Истина;
				
				// Получим документ установки цен
				ДокументУстановкиЦен = Документы.Scan_УстановкаПлановыхЦенПродукта.ПолучитьДокументУстановкиЦенПоПродукту(ТекСтрока.Продукт);
				
				// Если документа нет, то создадим, заполним пустым значением базовые цены Dealer Net и СУ Dealer Net
				Если НЕ ЗначениеЗаполнено(ДокументУстановкиЦен) Тогда
					ДокументУстановкиЦен = СоздатьПустойДокументУстановкиЦен(ТекСтрока.Продукт, ЗаявкаОбъект.Ссылка);
					Если ДокументУстановкиЦен = Неопределено Тогда
						// Не удалось создать документ для продукта
						КоличествоОшибок = КоличествоОшибок + 1;
						// запишем ошибку
						Сообщить("Не удалось создать документ установки цен для продукта " + ТекСтрока.Продукт); 
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ДокументУстановкиЦенОбъект = ДокументУстановкиЦен.ПолучитьОбъект();
				                                								
				// Установим базовую цену в документе = цене продажи, если ранее не было базовой цены
				НайденнаяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаДилера,"СоставляющаяЦены");
				Если НайденнаяСтрока <> Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ЦенаСНДС) Тогда
						НайденнаяСтрока.ЦенаСНДС = ТекСтрока.ЦенаПродажиКУстановке;	
						НайденнаяСтрока.ЦенаБезНДС = 100/ (100 + ЗначениеСтавкиНДС) * НайденнаяСтрока.ЦенаСНДС;
						
						// Вспомогательно нужно установить СУ Dealer Net = базе, если нет СУ
						Если НЕ ЗначениеЗаполнено(ДокументУстановкиЦен.СпециальныеУсловия) Тогда
							НайденнаяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.СУDealerNet,"СоставляющаяЦены");
							Если НайденнаяСтрока <> Неопределено Тогда
								НайденнаяСтрока.ЦенаСНДС = ТекСтрока.ЦенаПродажиКУстановке;	
								НайденнаяСтрока.ЦенаБезНДС = 100 / (100 + ЗначениеСтавкиНДС)* НайденнаяСтрока.ЦенаСНДС;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				         								
				// Установим в документе цену продажи и итоговые цены				
				НайденнаяСтрока = ДокументУстановкиЦенОбъект.СкидкиНаценки.Найти(Справочники.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой,"СоставляющаяЦены");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ЦенаСНДС = ТекСтрока.ЦенаПродажиКУстановке;	
					НайденнаяСтрока.ЦенаБезНДС = 100/ (100 + ЗначениеСтавкиНДС) * НайденнаяСтрока.ЦенаСНДС;
				КонецЕсли;
				ДокументУстановкиЦенОбъект.ЦенаDealerNetСоСкидкой = ТекСтрока.ЦенаПродажиКУстановке;
				
				// Запишем документ
				Попытка
					ДокументУстановкиЦенОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					КоличествоОшибок = КоличествоОшибок + 1;
					Сообщить("Не удалось записать документ установки цен для продукта " + ТекСтрока.Продукт + " " + ОписаниеОшибки());
				КонецПопытки; 
				
			Иначе
				КоличествоОшибок = КоличествоОшибок + 1;
				// Выведем ошибку, продукт не найден
				Сообщить("Продукт не найден в заявке. Не удалось установить сумму продажи для продукта " + ТекСтрока.Продукт);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаписатьЗаявку Тогда
		// Пересчитаем условия оплаты и график платежей
		
		СоответствиеЦеныDealerNet = РегистрыСведений.Scan_ПлановыеЗначенияСоставляющихЦеныПродукта.ПолучитьЦеныПродуктов(ЗаявкаОбъект.СписокПродуктов.Выгрузить(,"Продукт"), ПредопределенноеЗначение("Справочник.Scan_СоставляющиеРасчетаЦеныПродуктов.ЦенаDealerNetСоСкидкой"));
		ЦеныПродажиПродуктов = Новый Соответствие;
		
		ОбщаяСуммаСоглашения = 0;
		Для Каждого ТекСтрока Из ЗаявкаОбъект.СписокПродуктов Цикл				
			ЦенаПродажи = СоответствиеЦеныDealerNet.Получить(ТекСтрока.Продукт);
			Если ЦенаПродажи = Неопределено Тогда
				ЦенаПродажи = 0;
			КонецЕсли;
			ЦеныПродажиПродуктов.Вставить(ТекСтрока.Продукт, ЦенаПродажи);
			
			ОбщаяСуммаСоглашения = ОбщаяСуммаСоглашения + ЦенаПродажи;
		КонецЦикла;
		
		// Обновим условия оплаты
		Для Каждого СтрокаТаблицы Из ЗаявкаОбъект.УсловияОплаты Цикл
			СтрокаТаблицы.Сумма = СтрокаТаблицы.ПроцентОплаты / 100 * ОбщаяСуммаСоглашения; 
		КонецЦикла;

		// Обновим график платежей
		ОбновитьГрафикПлатежей(ЗаявкаОбъект, ЦеныПродажиПродуктов);
				
		// Запишем заявку
		Попытка
			ЗаявкаОбъект.Записать();
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
			Сообщить("Не удалось записать заявку " + ОписаниеОшибки());			
		КонецПопытки;
		
	КонецЕсли;
	
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Количество ошибок : %1",,,,, КоличествоОшибок);
	
КонецПроцедуры

#КонецОбласти

// rarus tenkam 15.02.2021 mantis 17159 ---

// rarus vikhle 12.02.2021 mt 17197 +++
#Область ЗагрузкаДанныхЗаказовНаЗакупку

&НаКлиенте
Процедура ДанныеЗаказовНаЗакупкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораФайла(Элемент);
	
КонецПроцедуры	

////ПРОЧИТАТЬ
&НаКлиенте
Процедура ПрочитатьДанныеЗаказовНаЗакупку(Команда)
	
	Если ПустаяСтрока(ДанныеЗаказовНаЗакупку) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайлаДанныхЗаказовНаЗакупку();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаДанныхЗаказовНаЗакупку()
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	ТекПутьКФайлу = СокрЛП(ДанныеЗаказовНаЗакупку);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаЗаказовНаОтгрузкуЗавершение(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаЗаказовНаОтгрузкуФрагмент", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаЗаказовНаОтгрузкуФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаЗаказовНаОтгрузкуЗавершение(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаЗаказовНаОтгрузкуЗавершение(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлЗаказовНаОтгрузку(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлЗаказовНаОтгрузку(ПараметрыЗагрузки)
	
	ТаблицаДанныхЗаказовНаЗакупку.Очистить();
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 3;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		НоваяСтрока = ТаблицаДанныхЗаказовНаЗакупку.Добавить();
		
		//Добавление лидирующих нулей для числовых заказов
		Попытка
			ЧислоСтроки = Число(СтрокаФайла.Заказ);
			НомерЗаказаЧисло  = Истина;
		Исключение 
			НомерЗаказаЧисло  = Ложь;
		КонецПопытки;
		
		НомерЗаказа = СтрокаФайла.Заказ;
		Если НомерЗаказаЧисло Тогда
			КолВоЗнаковЧисло = СтрДлина(ЧислоСтроки);
			Для нПрефикса = 0 По (9 - КолВоЗнаковЧисло) Цикл
				НомерЗаказа = "0" + НомерЗаказа;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.ЗаказНаЗавод       = СтрЗаменить(СокрЛП(НомерЗаказа),Символы.НПП,"");
		НоваяСтрока.Кузовщик           = СокрЛП(СтрокаФайла.BodyBrand);
		НоваяСтрока.ЗаказНаЗакупку     = СтрЗаменить(СокрЛП(СтрокаФайла.BodyOrder),Символы.НПП,"");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеФайла.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ДанныеФайла.Кузовщик КАК Кузовщик,
	               |	ДанныеФайла.ЗаказНаЗакупку КАК ЗаказНаЗакупку
	               |ПОМЕСТИТЬ ДанныеФайла
	               |ИЗ
	               |	&ДанныеФайла КАК ДанныеФайла
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_ЗаказыНаЗавод.Ссылка КАК ЗаказНаЗаводOFMS,
	               |	ДанныеФайла.ЗаказНаЗавод КАК ЗаказНаЗавод
	               |ПОМЕСТИТЬ ТаблицаЗаказов
	               |ИЗ
	               |	ДанныеФайла КАК ДанныеФайла
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_ЗаказыНаЗавод КАК Scan_ЗаказыНаЗавод
	               |		ПО ДанныеФайла.ЗаказНаЗавод = Scan_ЗаказыНаЗавод.Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Scan_Контрагенты.Ссылка) КАК КузовщикOFMS,
	               |	ВложенныйЗапрос.Кузовщик КАК Кузовщик
	               |ПОМЕСТИТЬ ТаблицаКонтрагентов
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ДанныеФайла.Кузовщик КАК Кузовщик
	               |	ИЗ
	               |		ДанныеФайла КАК ДанныеФайла) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_Контрагенты КАК Scan_Контрагенты
	               |		ПО ВложенныйЗапрос.Кузовщик = Scan_Контрагенты.Наименование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Кузовщик
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(Scan_Контрагенты.Ссылка) = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеФайла.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ДанныеФайла.Кузовщик КАК Кузовщик,
	               |	ДанныеФайла.ЗаказНаЗакупку КАК ЗаказНаЗакупку,
	               |	ТаблицаЗаказов.ЗаказНаЗаводOFMS КАК ЗаказНаЗаводOFMS,
	               |	ТаблицаКонтрагентов.КузовщикOFMS КАК КузовщикOFMS
	               |ИЗ
	               |	ДанныеФайла КАК ДанныеФайла
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗаказов КАК ТаблицаЗаказов
	               |		ПО ДанныеФайла.ЗаказНаЗавод = ТаблицаЗаказов.ЗаказНаЗавод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	               |		ПО (ДанныеФайла.Кузовщик = ТаблицаКонтрагентов.Кузовщик)";
	Запрос.УстановитьПараметр("ДанныеФайла",РеквизитФормыВЗначение("ТаблицаДанныхЗаказовНаЗакупку"));
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаДанныхЗаказовНаЗакупку.Загрузить(РезультатЗапроса);
	
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры

////ЗАГРУЗКА
&НаКлиенте
Процедура ЗаписатьДанныеЗаказовНаЗагрузку(Команда)
	
	Сообщить(Нстр("ru = 'Начата загрузка данных о заказах на закупку в заказы на завод'; en = 'Updating order start'")+" "+ТекущаяДата());
	ЗаписатьДанныеЗаказовНаЗагрузкуНаСервере();
	Сообщить(Нстр("ru = 'Завершена загрузка данных о заказах на закупку в заказы на завод'; en = 'Updating order finish'")+" "+ТекущаяДата());
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеЗаказовНаЗагрузкуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеФайла.ЗаказНаЗаводOFMS КАК ЗаказНаЗавод,
	               |	ДанныеФайла.Кузовщик КАК Кузовщик,
	               |	ДанныеФайла.КузовщикOFMS КАК КузовщикOFMS,
	               |	ДанныеФайла.ЗаказНаЗакупку КАК ЗаказНаЗакупку
	               |ПОМЕСТИТЬ ДанныеФайла
	               |ИЗ
	               |	&ДанныеФайла КАК ДанныеФайла
	               |ГДЕ
	               |	НЕ ДанныеФайла.ЗаказНаЗаводOFMS = ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеФайла.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	ВЫБОР
	               |		КОГДА ДанныеФайла.КузовщикOFMS = ЗНАЧЕНИЕ(Справочник.Scan_Контрагенты.ПустаяСсылка)
	               |			ТОГДА ДанныеФайла.Кузовщик
	               |		ИНАЧЕ ДанныеФайла.КузовщикOFMS
	               |	КОНЕЦ КАК Кузовщик,
	               |	ДанныеФайла.ЗаказНаЗакупку КАК ЗаказНаЗакупку
	               |ИЗ
	               |	ДанныеФайла КАК ДанныеФайла
	               |ИТОГИ ПО
	               |	ЗаказНаЗавод";
	Запрос.УстановитьПараметр("ДанныеФайла",РеквизитФормыВЗначение("ТаблицаДанныхЗаказовНаЗакупку"));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ЗаказНаЗаводОбъект = Выборка.ЗаказНаЗавод.ПолучитьОбъект();
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СуществующаяСтрокаТЧ = ЗаказНаЗаводОбъект.ЗаказыНаЗакупку.Найти(ВыборкаДетальныеЗаписи.ЗаказНаЗакупку,"ЗаказНаЗакупку");
			Если НЕ СуществующаяСтрокаТЧ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			нСтрокаТЧ = ЗаказНаЗаводОбъект.ЗаказыНаЗакупку.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрокаТЧ,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		ОбновитьПредставленияВЗаказе(ЗаказНаЗаводОбъект);
		
		Если ЗаказНаЗаводОбъект.Модифицированность() Тогда
			Попытка
				ЗаказНаЗаводОбъект.Записать();
			Исключение
				ВывестиСообщениеПол(Нстр("ru = 'Произошла ошибка при записи заказа %1 : %2'"),,,,,ЗаказНаЗаводОбъект.Представление,ОписаниеОшибки());
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьПредставленияВЗаказе(ЗаказНаЗаводОбъект)
	
	ТаблицаЗаказыНаЗакупку = ЗаказНаЗаводОбъект.ЗаказыНаЗакупку.Выгрузить();
	ТаблицаКузовщиков = ТаблицаЗаказыНаЗакупку.Скопировать(,"Кузовщик");
	ТаблицаКузовщиков.Свернуть("Кузовщик");
	ЗаказНаЗаводОбъект.КузовщикиПредставление = СтрСоединить(ТаблицаКузовщиков.ВыгрузитьКолонку("Кузовщик"), ",");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказыНаЗакупку", ТаблицаЗаказыНаЗакупку.ВыгрузитьКолонку("ЗаказНаЗакупку"));
	Запрос.УстановитьПараметр("ТаблицаЗаказыНаЗакупку",ТаблицаЗаказыНаЗакупку);//rarus vikhle 11.02.2021 mt 17197
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаказыНаЗакупку.ЗаказНаЗакупку КАК ЗаказНаЗакупку
	               |ПОМЕСТИТЬ СтроковыеЗаказы
	               |ИЗ
	               |	&ТаблицаЗаказыНаЗакупку КАК ТаблицаЗаказыНаЗакупку
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ТаблицаЗаказыНаЗакупку.ЗаказНаЗакупку) = ТИП(СТРОКА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫБОР
	               |		КОГДА Scan_ЗаказНаЗакупку.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный)
	               |			ТОГДА Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку
	               |		КОГДА Scan_ЗаказНаЗакупку.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро)
	               |			ТОГДА Scan_ЗаказНаЗакупку.BBНомерЗаказаНаЗакупку
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК Номер
	               |ИЗ
	               |	Документ.Scan_ЗаказНаЗакупку КАК Scan_ЗаказНаЗакупку
	               |ГДЕ
	               |	Scan_ЗаказНаЗакупку.Ссылка В(&ЗаказыНаЗакупку)
	               |	И ВЫБОР
	               |			КОГДА Scan_ЗаказНаЗакупку.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЛокальный)
	               |				ТОГДА Scan_ЗаказНаЗакупку.ДОНомерЗаказаНаЗакупку
	               |			КОГДА Scan_ЗаказНаЗакупку.ХозОперация = ЗНАЧЕНИЕ(Справочник.Scan_ХозяйственныеОперации.ЗаказНаЗакупкуЕвро)
	               |				ТОГДА Scan_ЗаказНаЗакупку.BBНомерЗаказаНаЗакупку
	               |			ИНАЧЕ """"
	               |		КОНЕЦ <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СтроковыеЗаказы.ЗаказНаЗакупку
	               |ИЗ
	               |	СтроковыеЗаказы КАК СтроковыеЗаказы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номер";
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаказНаЗаводОбъект.ЗаказыНаЗакупкуПредставление = СтрСоединить(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номер"), ",");
	
	
КонецПроцедуры

#КонецОбласти
// rarus vikhle 12.02.2021 mt 17197 ---


&НаКлиенте
Процедура Склады_ДанныеФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Склады_Прочитать(Команда)
		
	Если ПустаяСтрока(Склады_ДанныеФайла) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать файл для загрузки!'; en = 'File to download required!'"), 15);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуФайлаДанныхСкладов();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлаДанныхСкладов()
	
	Сообщить(Нстр("ru = 'Начата загрузка и обработка файла'; en = 'Downloading start'")+" "+ТекущаяДата());
	
	ТекПутьКФайлу = СокрЛП(Склады_ДанныеФайла);
	
	ПараметрыЗагрузки = Новый Структура;
	
	#Если Не ВебКлиент Тогда
		ТекДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДанные);
		ПараметрыЗагрузки.Вставить("АдресВХранилище", АдресВХранилище);
		ЗагрузитьДанныеФайлаДанныхСкладовЗавершение(ПараметрыЗагрузки);
	#Иначе
		ПомещаемыеФайлыМассив = Новый Массив;
		ПомещаемыеФайлыМассив.Добавить(Новый ОписаниеПередаваемогоФайла(ТекПутьКФайлу, ""));
		Описание = Новый ОписаниеОповещения("ЗагрузитьДанныеФайлаДанныхСкладовФрагмент", ЭтотОбъект, Новый Структура("ПараметрыЗагрузки", ПараметрыЗагрузки));
		НачатьПомещениеФайлов(Описание, ПомещаемыеФайлыМассив, , Ложь, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаДанныхСкладовФрагмент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыЗагрузки;
		
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
	Иначе
		ПараметрыЗагрузки.Вставить("АдресВХранилище", ПомещенныеФайлы[0].Хранение);
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаДанныхСкладовЗавершение(ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФайлаДанныхСкладовЗавершение(Знач ПараметрыЗагрузки)
	
	ПрочитатьФайлДанныхСкладов(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлДанныхСкладов(ПараметрыЗагрузки)
	
	ПользователиДилеры.Очистить();
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "FileEXCEL" + Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss") + ".xlsx";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецПопытки;
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		ИмяОбластиДанных = ТабличныйДокумент.Области[0].Имя;
		ОбластьДанных    = ТабличныйДокумент.ПолучитьОбласть(ИмяОбластиДанных);
	Иначе
		Сообщить(НСтр("ru = 'Ошибка при обработке файла'; en = 'Error'"));
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки     = 1;
	НомерПоследнейСтроки  = ТабличныйДокумент.ВысотаТаблицы;
	НомерПервойКолонки    = 1;
	НомерПоследнейКолонки = 26;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьДанных.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки));
	ПостроительЗапроса.Выполнить();
	
	ДанныеФайла = ПостроительЗапроса.Результат.Выгрузить();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение КонецПопытки;
	
	
	НомерСтрокиФайла = 2;
	Для Каждого СтрокаФайла Из ДанныеФайла Цикл
		НоваяСтрока = Склады_ТЗ_ДляЗагрузки.Добавить();
		
	
		НоваяСтрока.ЗаказФайл = Формат(СтрокаФайла.Заказ, "ЧГ=0");
		НоваяСтрока.НомерЗаказа = "000" + НоваяСтрока.ЗаказФайл;
		НоваяСтрока.ДоговорФайл = СокрЛП(СтрокаФайла.СОПНомер);
		НоваяСтрока.СкладОтгрузкиФайл = СокрЛП(СтрокаФайла.СкладОтгрузки);
		НомерСтрокиФайла = НомерСтрокиФайла + 1;
		
	КонецЦикла;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеТЗ.ЗаказФайл КАК ЗаказФайл,
		|	ДанныеТЗ.НомерЗаказа КАК НомерЗаказа,
		|	ДанныеТЗ.СкладОтгрузкиФайл КАК СкладОтгрузкиФайл,
		|	ДанныеТЗ.ДоговорФайл КАК ДоговорФайл
		|ПОМЕСТИТЬ ДанныеТаблицы
		|ИЗ
		|	&ДанныеТЗ КАК ДанныеТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТаблицы.ЗаказФайл КАК ЗаказФайл,
		|	ДанныеТаблицы.НомерЗаказа КАК НомерЗаказа,
		|	ЕСТЬNULL(Scan_Изделия.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)) КАК Продукт,
		|	ДанныеТаблицы.ДоговорФайл КАК ДоговорФайл,
		|	ДанныеТаблицы.СкладОтгрузкиФайл КАК СкладОтгрузкиФайл,
		|	ЕСТЬNULL(Scan_Склады.Ссылка, ЗНАЧЕНИЕ(Справочник.Scan_Склады.ПустаяСсылка)) КАК Склад,
		|	ЕСТЬNULL(Scan_Изделия.ЗаказНаЗавод, ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка)) КАК ЗаказНаЗавод
		|ПОМЕСТИТЬ ДанныеСоСкладомИПродуктом
		|ИЗ
		|	ДанныеТаблицы КАК ДанныеТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_Изделия КАК Scan_Изделия
		|		ПО ДанныеТаблицы.НомерЗаказа = Scan_Изделия.ЗаказНаЗавод.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_Склады КАК Scan_Склады
		|		ПО ДанныеТаблицы.СкладОтгрузкиФайл = Scan_Склады.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСоСкладомИПродуктом.ЗаказФайл КАК ЗаказФайл,
		|	ДанныеСоСкладомИПродуктом.НомерЗаказа КАК НомерЗаказа,
		|	ДанныеСоСкладомИПродуктом.Продукт КАК Продукт,
		|	ДанныеСоСкладомИПродуктом.ДоговорФайл КАК ДоговорФайл,
		|	ДанныеСоСкладомИПродуктом.СкладОтгрузкиФайл КАК СкладОтгрузкиФайл,
		|	ДанныеСоСкладомИПродуктом.Склад КАК Склад,
		|	ДанныеСоСкладомИПродуктом.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	ДанныеСоСкладомИПродуктом.Продукт.СоглашениеОПоставке КАК Заявка,
		|	ДанныеСоСкладомИПродуктом.Продукт.СоглашениеОПоставке.Договор КАК Договор
		|ИЗ
		|	ДанныеСоСкладомИПродуктом КАК ДанныеСоСкладомИПродуктом";
	Запрос.УстановитьПараметр("ДанныеТЗ",Склады_ТЗ_ДляЗагрузки.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Склады_ТЗ_ДляЗагрузки.Загрузить(РезультатЗапроса.Выгрузить());
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Для Каждого ТекСтрока Из Склады_ТЗ_ДляЗагрузки Цикл
		ТекСтрока.НомерДоговора = Лев(ТекСтрока.Договор.НомерДоговора,9);
	КонецЦикла;
	
	ВсегоСтрокСклады = Склады_ТЗ_ДляЗагрузки.Количество();
	Сообщить(Нстр("ru = 'Завершена загрузка и обработка файла'; en = 'Downloading finish'")+" "+ТекущаяДата());
	
КонецПроцедуры


&НаКлиенте
Процедура Склады_Записать(Команда)
	Если Склады_ТЗ_ДляЗагрузки.Количество() = 0 Тогда
		ВывестиСообщениеПол("Необходимо сначала прочитать файл с историей статусов");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьОжиданиеНачалаЗаписиСкладов",0.1,Истина);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОжиданиеНачалаЗаписиСкладов()
	
	ВывестиСообщениеПол("Начата запись данных" + " " + ТекущаяДата());
	Склады_ЗаписатьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Склады_ЗаписатьНаСервере()
	КоличествоОшибок = 0;
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеТЗ.Продукт КАК Продукт,
		|	ДанныеТЗ.Заявка КАК Заявка,
		|	ДанныеТЗ.Склад КАК Склад
		|ПОМЕСТИТЬ ДанныеТаблицы
		|ИЗ
		|	&ДанныеТЗ КАК ДанныеТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТаблицы.Продукт КАК Продукт,
		|	ДанныеТаблицы.Заявка КАК Заявка,
		|	ДанныеТаблицы.Склад КАК Склад
		|ИЗ
		|	ДанныеТаблицы КАК ДанныеТаблицы
		|ГДЕ
		|	ДанныеТаблицы.Заявка <> ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
		|	И ДанныеТаблицы.Продукт <> ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
		|	И ДанныеТаблицы.Склад <> ЗНАЧЕНИЕ(Справочник.Scan_Склады.ПустаяСсылка)
		|ИТОГИ ПО
		|	Заявка";
	
	Запрос.УстановитьПараметр("ДанныеТЗ",Склады_ТЗ_ДляЗагрузки.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаявка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаявка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаЗаявка
		
		ЗаявкаОбъект = ВыборкаЗаявка.Заявка.ПолучитьОбъект();
		
		ВыборкаДетальныеЗаписи = ВыборкаЗаявка.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Запишем в заяку
			НайденнаяСтрокаВЗаявке = ЗаявкаОбъект.СписокПродуктов.Найти(ВыборкаДетальныеЗаписи.Продукт, "Продукт");
			НайденнаяСтрокаВЗаявке.СкладОтгрузки = ВыборкаДетальныеЗаписи.Склад;
			
			// Заполним в продукте
			ПродуктОбъект = ВыборкаДетальныеЗаписи.Продукт.ПолучитьОбъект();
			ПродуктОбъект.ЗапрашиваемоеМестоПередачи = ВыборкаДетальныеЗаписи.Склад;
			ПродуктОбъект.СкладПродажи = ВыборкаДетальныеЗаписи.Склад;
			ПродуктОбъект.МестоПередачи = ВыборкаДетальныеЗаписи.Склад;
			
			// Запишем продукт
			Попытка
				ПродуктОбъект.Записать();
			Исключение
				КоличествоОшибок = КоличествоОшибок + 1;
				// запишем ошибку
				ПараметрыОтбора = Новый Структура("Продукт", ВыборкаДетальныеЗаписи.Продукт);
				НайденныеСтроки = Склады_ТЗ_ДляЗагрузки.НайтиСтроки(ПараметрыОтбора);
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Ошибка записи продукта. " + ОписаниеОшибки();
				КонецЦикла;
			КонецПопытки;
			
		КонецЦикла;
		
		// Запишем заявку
		Попытка
			ЗаявкаОбъект.Записать();
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
			// запишем ошибку
			ПараметрыОтбора = Новый Структура("Заявка", ВыборкаЗаявка.Заявка);
			НайденныеСтроки = Склады_ТЗ_ДляЗагрузки.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекСтрока.Ошибки = ТекСтрока.Ошибки + "Ошибка записи заявки. " + ОписаниеОшибки();
			КонецЦикла;
		КонецПопытки;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА   
	
	ВывестиСообщениеПол("Запись данных завершена" + " " + ТекущаяДата());
	ВывестиСообщениеПол("Количество ошибок : %1",,,,, КоличествоОшибок);
	
КонецПроцедуры

