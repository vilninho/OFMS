//rarus abrant 14.06.2017 mantis 9146 +++
&НаКлиенте
Процедура ЗаполнитьМатрицу(Команда)
	ВсеОК = Истина;
	Если НЕ ЗначениеЗаполнено(МестоПолучения) Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Пожалуйста, заполните поле 'Место получения'");
		Сообщить(НСтр("ru = 'Пожалуйста, заполните поле ''Место получения'''; en = 'Please add ""Delivery point"" '"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		ВсеОК = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаУстановкиТарифа) Тогда
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Пожалуйста, заполните поле 'Дата установки тарифа'");
		Сообщить(НСтр("ru = 'Пожалуйста, заполните поле ''Дата установки тарифа'''; en = 'Please add ""Tariff date""'"));
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		ВсеОК = Ложь;
	КонецЕсли;
	Если ВсеОК Тогда
		ЗаполнитьМатрицуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатрицуНаСервере()
	СуммаОсновнойУслуги = 0;
	СуммаУслуг = 0;
	Для Каждого НоменклатураУслуга Из ДействующиеУслуги Цикл
		Если НоменклатураУслуга.ОсновнаяУслуга Тогда
			СуммаОсновнойУслуги = НоменклатураУслуга.Стоимость;
		Иначе
			СуммаУслуг = СуммаУслуг + НоменклатураУслуга.Стоимость; 
		КонецЕсли;
	КонецЦикла;
	
	МатрицаТарифов.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический КАК АдресПолучения,
	               |	Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический КАК АдресДоставки
	               |ПОМЕСТИТЬ АдресаХранения
	               |ИЗ
	               |	Справочник.Scan_МестаХранения КАК Scan_МестаХранения
	               |ГДЕ
	               |	Scan_МестаХранения.Маршрут = ИСТИНА
	               |	И Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический <> ЗНАЧЕНИЕ(Справочник.Scan_АдресаХранения.ПустаяСсылка)
	               |	И Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический <> ЗНАЧЕНИЕ(Справочник.Scan_АдресаХранения.ПустаяСсылка)
	               |	И Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический = &МестоПолучения
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Scan_МестаХранения.ИсходныйПункт.АдресСкладаЛогистический,
	               |	Scan_МестаХранения.КонечныйПункт.АдресСкладаЛогистический
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресаХранения.АдресПолучения,
	               |	АдресаХранения.АдресДоставки,
	               |	Scan_РасстояниеМеждуАдресами.Расстояние
	               |ПОМЕСТИТЬ Расстояния
	               |ИЗ
	               |	АдресаХранения КАК АдресаХранения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_РасстояниеМеждуАдресами КАК Scan_РасстояниеМеждуАдресами
	               |		ПО АдресаХранения.АдресПолучения = Scan_РасстояниеМеждуАдресами.АдресПолучения
	               |			И АдресаХранения.АдресДоставки = Scan_РасстояниеМеждуАдресами.АдресДоставки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресаХранения.АдресПолучения,
	               |	АдресаХранения.АдресДоставки,
	               |	Scan_КолесныеФормулыИзделий.Ссылка КАК КолеснаяФормула,
	               |	Scan_СпособыДоставкиПродуктов.Ссылка КАК СпособДоставки,
	               |	Scan_ТипыПродуктовЛогистика.Ссылка КАК ЛогистическийТип
	               |ПОМЕСТИТЬ Варианты
	               |ИЗ
	               |	АдресаХранения КАК АдресаХранения,
	               |	Справочник.Scan_КолесныеФормулыИзделий КАК Scan_КолесныеФормулыИзделий,
	               |	Справочник.Scan_ТипыПродуктовЛогистика КАК Scan_ТипыПродуктовЛогистика,
	               |	Перечисление.Scan_СпособыДоставкиПродуктов КАК Scan_СпособыДоставкиПродуктов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Варианты.АдресПолучения,
	               |	Варианты.АдресДоставки,
	               |	Варианты.КолеснаяФормула,
	               |	Варианты.СпособДоставки,
	               |	Варианты.ЛогистическийТип,
	               |	Расстояния.Расстояние,
	               |	МАКСИМУМ(Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.Стоимость1Км) КАК Стоимость1Км
	               |ИЗ
	               |	Варианты КАК Варианты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Расстояния КАК Расстояния
	               |		ПО Варианты.АдресПолучения = Расстояния.АдресПолучения
	               |			И Варианты.АдресДоставки = Расстояния.АдресДоставки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СрезПоследних(&ДатаУстановкиТарифа, ) КАК Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних
	               |		ПО Варианты.АдресПолучения = Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.АдресПолучения
	               |			И Варианты.АдресДоставки = Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.АдресДоставки
	               |			И Варианты.КолеснаяФормула = Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.КолеснаяФормула
	               |			И Варианты.СпособДоставки = Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.СпособДоставки
	               |			И Варианты.ЛогистическийТип = Scan_МатрицаТарифовПоДоставкеИзделийСрезПоследних.ЛогистическийТип
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Варианты.СпособДоставки,
	               |	Варианты.АдресПолучения,
	               |	Варианты.КолеснаяФормула,
	               |	Варианты.АдресДоставки,
	               |	Варианты.ЛогистическийТип,
	               |	Расстояния.Расстояние";
	
	Запрос.УстановитьПараметр("МестоПолучения", МестоПолучения);
	Запрос.УстановитьПараметр("ДатаУстановкиТарифа", ДатаУстановкиТарифа);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	н=0;
	м=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Тариф = МатрицаТарифов.Добавить();
		ЗаполнитьЗначенияСвойств(Тариф,ВыборкаДетальныеЗаписи);
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Расстояние) 	И ВыборкаДетальныеЗаписи.Расстояние 	> 0 И 
			 ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Стоимость1км) И ВыборкаДетальныеЗаписи.Стоимость1км 	> 0 И
			 Перегон > 0 И
			 ВыборкаДетальныеЗаписи.Расстояние > Перегон Тогда
			// rarus tenkam 24.12.2018 mantis 13896 +++    		
			//Тариф.Стоимость = Окр(((ВыборкаДетальныеЗаписи.Расстояние - Перегон)*ВыборкаДетальныеЗаписи.Стоимость1км+СуммаОсновнойУслуги)*1.18+СуммаУслуг,-2);	 
			Тариф.Стоимость = Окр(((ВыборкаДетальныеЗаписи.Расстояние - Перегон)*ВыборкаДетальныеЗаписи.Стоимость1км+СуммаОсновнойУслуги)*(1 + Справочники.Scan_СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100)+СуммаУслуг,-2);
			// rarus tenkam 24.12.2018 mantis 13896 ---    		
			н=н+1;	
		КонецЕсли;
		м=м+1;
	КонецЦикла;
	к=0;

КонецПроцедуры

&НаКлиенте
Процедура МестоПолученияПриИзменении(Элемент)	
	Матрица.Параметры.УстановитьЗначениеПараметра("МестоПолучения", МестоПолучения);
КонецПроцедуры

&НаКлиенте
Процедура ДатаУстановкиТарифаПриИзменении(Элемент)
	//ДействующиеУслугиНаДатуУстановкиТарифа.Параметры.УстановитьЗначениеПараметра("Дата", ДатаУстановкиТарифа);
	ДатаУстановкиТарифаПриИзмененииНаСервере();		
КонецПроцедуры

&НаСервере
Процедура ДатаУстановкиТарифаПриИзмененииНаСервере()
	ДействующиеУслуги.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийScan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Услуга,
	               |	РегистрСведенийScan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.Стоимость,
	               |	РегистрСведенийScan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.ОсновнаяУслуга
	               |ИЗ
	               |	РегистрСведений.Scan_СтоимостьУслугДляРасчетаСтоимостиДоставки.СрезПоследних(&Дата, ) КАК РегистрСведенийScan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних
	               |ГДЕ
	               |	РегистрСведенийScan_СтоимостьУслугДляРасчетаСтоимостиДоставкиСрезПоследних.ИспользуетсяВРасчетах = ИСТИНА";
	Запрос.УстановитьПараметр("Дата", ДатаУстановкиТарифа);
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Услуга = ДействующиеУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(Услуга,ВыборкаДетальныеЗаписи);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДействующиеУслугиНаДатуУстановкиТарифа.Параметры.УстановитьЗначениеПараметра("Дата", Дата("00010102"));
	Перегон = Scan_ПраваИНастройки.Scan_Право("ЛьготноеРасстояниеПриДоставке");
	Матрица.Параметры.УстановитьЗначениеПараметра("МестоПолучения", Справочники.Scan_АдресаХранения.ПустаяСсылка());
КонецПроцедуры

&НаКлиенте
Процедура МатрицаТарифовСтоимостьПриИзменении(Элемент)
	Элементы.МатрицаТарифов.ТекущиеДанные.Вручную = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	ВыполнитьКомандуНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере()
	н=0;
	Для каждого Тариф из МатрицаТарифов.Выгрузить() Цикл
		Если Тариф.Стоимость > 0 Тогда
			МенеджерЗаписи = РегистрыСведений.Scan_МатрицаТарифовДляДилеровПоДоставкеИзделий.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период 				= ДатаУстановкиТарифа;
			МенеджерЗаписи.АдресПолучения 		= Тариф.АдресПолучения;
			МенеджерЗаписи.АдресДоставки 		= Тариф.АдресДоставки;
			МенеджерЗаписи.Стоимость 			= Тариф.Стоимость;
			МенеджерЗаписи.КолеснаяФормула 		= Тариф.КолеснаяФормула;
			МенеджерЗаписи.ЛогистическийТип 	= Тариф.ЛогистическийТип;
			МенеджерЗаписи.СпособДоставки 		= Тариф.СпособДоставки;
			МенеджерЗаписи.ТарифУказанВручную 	= Тариф.Вручную;
			МенеджерЗаписи.Пользователь 		= ПользователиКлиентСервер.ТекущийПользователь();
			МенеджерЗаписи.Записать();
			н=н+1;
		КонецЕсли;
	КонецЦикла;
	//rarus FominskiyAS 24.04.2019  mantis 14191 +++
	//Сообщить("Записаны " + н + " тарифов для дилеров по доставке изделий.");
	Сообщить(НСтр("ru = 'Записаны '; en = ' '") + н + НСтр("ru = ' тарифов для дилеров по доставке продуктов.'; en = 'dealer transportation tariff saved'"));
	//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
КонецПроцедуры


//&НаСервере
//Процедура ОчиститьНаСервере()
//	НаборЗаписей = РегистрыСведений.Scan_МатрицаТарифовПоДоставкеИзделий.СоздатьНаборЗаписей();
//	НаборЗаписей.Записать();
//КонецПроцедуры

//&НаКлиенте
//Процедура Очистить(Команда)
//	ОчиститьНаСервере();
//КонецПроцедуры

//rarus abrant 14.06.2017 mantis 9146 ---
