
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Scan_Взаимодействия.ОбработатьНеобходимостьОтображенияГруппПользователей(ЭтотОбъект);
	
	Scan_Взаимодействия.ДобавитьСтраницыФормыПодбораКонтактов(ЭтотОбъект);
	
	//+Рарус Внесены правки, чтобы данную форму открыть из документа рассылка
	Если Параметры.Свойство("СписокТиповКонтактов") Тогда
		Для Каждого Страница ИЗ Элементы.СтраницыСписки.ПодчиненныеЭлементы Цикл
			Если Страница.Имя = "СтраницаВсеКонтактыПоПредмету" Тогда
				Продолжить;
			ИначеЕсли Параметры.СписокТиповКонтактов.Найти(Страница.Имя) = Неопределено Тогда
				Страница.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		Элементы.Группа.Видимость = Ложь;
		Элементы.Контакт.Видимость = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("ТипКИ") Тогда
		ТипКИ = Параметры.ТипКИ;
	Иначе 
		ТипКИ  = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	КонецЕсли;
	//-Рарус
	
	ЗаполнитьТаблицуПолучателей();
	УстановитьГруппуПоУмолчанию();

	// Заполним контакты по предмету
	Предмет = Параметры.Предмет;
	Scan_Взаимодействия.ЗаполнитьКонтактыПоПредмету(Элементы, Предмет, КонтактыПоПредмету, Истина);
	
	// Получим информацию об индексе ППД
	Scan_Взаимодействия.ОбновитьИнформациюОбАктуальностиИндексаППД(
		ИнформацияОбАктуальностиИндексаППД, ППДВключен, ИндексАктуален);

	// Заполним список вариантов поиска и осуществим первый поиск
	ВсеСпискиПоиска = Scan_Взаимодействия.ПолучитьСписокДоступныхПоисков(ППДВключен, Параметры, Элементы, Истина);
	ВариантыПоиска = "ПоEmail";
	
	Scan_СборСтатистики.Scan_ПриОткрытииФормы(ЭтотОбъект.ИмяФормы); // Rarus tenkam 11.04.2022 mantis 18433 +

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностью();
	УправлениеСтраницами();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Scan_ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УправлениеСтраницами();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТолькоEmail",                       Истина);
	ПараметрыОткрытия.Вставить("ТолькоТелефон",                     Ложь);
	ПараметрыОткрытия.Вставить("ЗаменятьПустыеАдресИПредставление", Истина);
	ПараметрыОткрытия.Вставить("ДляФормыУточненияКонтактов",        Ложь);

	Scan_ВзаимодействияКлиент.ВыбратьКонтакт(Предмет, ТекущиеДанные.Адрес, ТекущиеДанные.Представление,
	                                    ТекущиеДанные.Контакт,ПараметрыОткрытия)
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Группа = "Кому";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "Адрес" Тогда
		Элементы.Адрес.СписокВыбора.Очистить();
		
		ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекущиеДанные.СписокАдресов) Тогда
			Элементы.Адрес.СписокВыбора.ЗагрузитьЗначения(
			СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущиеДанные.СписокАдресов,";"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПоПредметуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ДобавитьПолучателяИзСпискаПоПредмету();

КонецПроцедуры

//+Рарус
//Получает наименование и адреса контактной информации
//
//Параметры
//  Контакт - Ссылка - контакт, для которого получаются данные
//  ТипКИ   - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации
//
//Возвращаемое значение:
//  Структура - содержит наименование контакта и список значений электронной почты контакта
//
&НаСервере
Функция ПолучитьНаименованиеИКИКонтакта(Контакт,ТипКИ) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Контакт.Метаданные().Иерархический Тогда
		Если Контакт.ЭтоГруппа Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕстьNULL(ТаблицаКонтактнаяИнформация.Представление,"""") КАК КИ,
	|	Таблица.Наименование КАК Наименование
	|ИЗ
	|	" + ИмяТаблицы + " КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = &ТипКИ)
	|ГДЕ
	|	Таблица.Ссылка = &Контакт
	|ИТОГИ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокКИ = Новый Структура("Наименование,КИ", Выборка.Наименование, Новый СписокЗначений);
	ВыборкаКИ = Выборка.Выбрать();
	Пока ВыборкаКИ.Следующий() Цикл
		СписокКИ.КИ.Добавить(ВыборкаКИ.КИ);
	КонецЦикла;
	
	Возврат СписокКИ;
	
КонецФункции //ПолучитьНаименованиеИКИКонтакта() //-Рарус

&НаКлиенте
Процедура СписокСправочникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	//+Рарус Изменено для того чтобы получать различную контактную информация, в зависимости от типа
	//Результат = ВзаимодействияВызовСервера.ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(ВыбраннаяСтрока);
	Результат = ПолучитьНаименованиеИКИКонтакта(ВыбраннаяСтрока,ТипКИ);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КИ = Результат.КИ[0];
	// rarus agar 04.08.2021 АПК ++
	//СписокАдресов = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Результат.КИ.ВыгрузитьЗначения(), ";");
	СписокАдресов = СтрСоединить(Результат.КИ.ВыгрузитьЗначения(), ";");
	// rarus agar 04.08.2021 АПК --
	ДобавитьПолучателя(КИ, Результат.Наименование, ВыбраннаяСтрока, СписокАдресов);
	//-Рарус
	
КонецПроцедуры

//Универсальный обработчик активизации строки динамического списка, у которого есть подчиненные списки.
&НаКлиенте
Процедура Подключаемый_СписокВладелецПриАктивизацииСтроки(Элемент)
	
	Scan_ВзаимодействияКлиент.КонтактВладелецПриАктивизацииСтроки(Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеКонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НайденныеКонтакты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//+Рарус Изменено для того чтобы получать различную контактную информация, в зависимости от типа
	//Результат = ВзаимодействияВызовСервера.ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(ВыбраннаяСтрока);
	Результат = ПолучитьНаименованиеИКИКонтакта(ТекущиеДанные.Ссылка,ТипКИ);
	Если Результат <> Неопределено И Результат.КИ.Количество() > 0 Тогда
		// rarus agar 04.08.2021 АПК ++
		//СписокАдресов = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Результат.КИ.ВыгрузитьЗначения(), ";");
		СписокАдресов = СтрСоединить(Результат.КИ.ВыгрузитьЗначения(), ";");
		// rarus agar 04.08.2021 АПК --
	Иначе
		СписокАдресов = "";
	КонецЕсли;
	//-Рарус
	
	ДобавитьПолучателя(ТекущиеДанные.Представление, ТекущиеДанные.НаименованиеКонтакта, ТекущиеДанные.Ссылка, СписокАдресов);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПриАктивизацииСтроки(Элемент)
	
	СписокПользователей.Параметры.УстановитьЗначениеПараметра("ГруппаПользователей", Элементы.ГруппыПользователей.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Передает владельцу в качестве результата работы формы массив структур содержащих 
// адреса выбранных получателей и закрывает форму. 
//
&НаКлиенте
Процедура КомандаОКВыполнить()
	
	Результат = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ПолучателиПисьма Цикл
		Группа = ?(ПустаяСтрока(СтрокаТаблицы.Группа), "Кому", СтрокаТаблицы.Группа);
		//+Рарус Добавлен в структуру список возможное КИ контакта
		Контакт = Новый Структура("Адрес, Представление, Контакт, Группа, СписокАдресов",
		                          СтрокаТаблицы.Адрес, СтрокаТаблицы.Представление, СтрокаТаблицы.Контакт, Группа, СтрокаТаблицы.СписокАдресов);
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Адрес) Тогда
			Результат.Добавить(Контакт);
		КонецЕсли;
		//-РАРУС
	КонецЦикла;
	
	ОповеститьОВыборе(Результат);
	
КонецПроцедуры

//Переносит текущий контакт из списка "Контакты по предмету" в список "Получатели письма". 
//
&НаКлиенте
Процедура ДобавитьИзСпискаПредметовВыполнить()

	ДобавитьПолучателяИзСпискаПоПредмету();

КонецПроцедуры

//Изменяет текущую группу получателей письма на группу "Кому". 
//
&НаКлиенте
Процедура ИзменитьГруппуКомуВыполнить()

	ИзменитьГруппу("Кому");

КонецПроцедуры

//Изменяет текущую группу получателей письма на группу "Копии". 
//
&НаКлиенте
Процедура ИзменитьГруппуКопииВыполнить()

	ИзменитьГруппу("Копии");

КонецПроцедуры 

//Изменяет текущую группу получателей письма на группу "Скрытые". 
//
&НаКлиенте
Процедура ИзменитьГруппуСкрытыеВыполнить()

	ИзменитьГруппу("Скрытые");

КонецПроцедуры

//Инициирует процесс поиска контактов.
//
&НаКлиенте
Процедура КомандаНайтиВыполнить()
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не задана строка поиска!'"),,"СтрокаПоиска");
		Возврат;
	КонецЕсли;
	
	Результат = "";
	НайденныеКонтакты.Очистить();
	
	Если ВариантыПоиска = "ПоEmail" Тогда
		НайтиПоEmail(Ложь);
	ИначеЕсли ВариантыПоиска = "ПоДомену" Тогда
		НайтиПоEmail(Истина);
	ИначеЕсли ВариантыПоиска = "ПоСтроке" Тогда
		Результат = КонтактыНайденныеПоСтроке();
	ИначеЕсли ВариантыПоиска = "НачинаетсяС" Тогда
		НайтиПоНачалуНаименования();
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат) Тогда
		
		ПоказатьПредупреждение(,Результат);
		
	КонецЕсли;
	
КонецПроцедуры

//Обновляет индекс полнотекстового поиска. 
//
&НаКлиенте
Процедура КомандаОбновитьИндексППДВыполнить()
	
	Scan_ВзаимодействияКлиент.КомандаОбновитьИндексППДВыполнить(ИнформацияОбАктуальностиИндексаППД,ППДВключен,ИндексАктуален);
	УправлениеДоступностью();
	
КонецПроцедуры 

//Выполняет позиционирование в соответствующем динамическом списке на текущем контакте из 
//списка "Найденные контакты".
//
&НаКлиенте
Процедура НайтиВСпискеИзСпискаНайденныхВыполнить()
	
	ТекущиеДанные = Элементы.НайденныеКонтакты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		УстановитьТекущимКонтакт(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

//Выполняет позиционирование в соответствующем динамическом списке на текущем контакте
//из списка "Получатели письма".
//
&НаКлиенте
Процедура НайтиВСпискеИзСпискаПолучателейВыполнить()
	
	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Контакт) Тогда
		УстановитьТекущимКонтакт(ТекущиеДанные.Контакт);
	КонецЕсли;
	
КонецПроцедуры

//Выполняет позиционирование в соответствующем динамическом списке на текущем контакте
//из списка "Контакты по предмету".
//
&НаКлиенте
Процедура НайтиВСпискеИзСпискаПредметовВыполнить()
	
	ТекущиеДанные = Элементы.КонтактыПоПредмету.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьТекущимКонтакт(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

//Инициирует поиск контактов по адресу электронной почты текущей строки списка "Получатели письма". 
//
&НаКлиенте
Процедура НайтиПоАдресуВыполнить()
	
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов;
	НайденныеКонтакты.Очистить();
	ВариантыПоиска = "ПоEmail";

	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаПоиска = ТекущиеДанные.Адрес;
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		НайтиПоEmail(Ложь);
	КонецЕсли;

КонецПроцедуры

//Инициирует поиск контактов по представлению текущей строки списка "Получатели письма". 
//
&НаКлиенте
Процедура НайтиПоПредставлениюВыполнить()
	
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов;
	НайденныеКонтакты.Очистить();
	ВариантыПоиска = "ПоСтроке";

	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = ТекущиеДанные.Представление;
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		Результат = КонтактыНайденныеПоСтроке();
		Если Не ПустаяСтрока(Результат) Тогда
			ПоказатьПредупреждение(,Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

//Осуществляет поиск всех адресов электронной почты контакта из списка "Получатели письма" и
 //предлагает пользователю сделать выбор, если у контакта более одного адреса электронной почты.
&НаКлиенте
Процедура УстановитьАдресКонтактаВыполнить()
	
	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Scan_ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(ТекущиеДанные.Контакт);
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Количество() = 1 Тогда
		Адрес = Результат[0].АдресЭП;
		Представление = Результат[0].Представление;
		УстановитьАдресИПредставлениеВыбранногоКонтакта(ТекущиеДанные, Представление, Адрес);
	Иначе
		СписокВыбора = Новый СписокЗначений;
		Номер = 0;
		Для Каждого Элемент Из Результат Цикл
			СписокВыбора.Добавить(Номер, Элемент.ВидНаименование + ": " + Элемент.АдресЭП);
			Номер = Номер + 1;
		КонецЦикла;
		
		ПараметрыОбработкиВыбора = Новый Структура;
		ПараметрыОбработкиВыбора.Вставить("Результат", Результат);
		ПараметрыОбработкиВыбора.Вставить("ТекущиеДанные", ТекущиеДанные);

		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("СписокВыбораАдресаЭППослеЗавершения", ЭтотОбъект, ПараметрыОбработкиВыбора);

		СписокВыбора.ПоказатьВыборЭлемента(ОбработчикОповещенияОЗакрытии);
	КонецЕсли;

КонецПроцедуры

//Выполняет позиционирование в соответствующем динамическом списке на текущем контакте
//из списка "Контакты по предмету".
//
&НаКлиенте
Процедура УстановитьКонтактИзСпискаПредметовВыполнить()
	
	ТекущиеДанные = Элементы.КонтактыПоПредмету.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьКонтактВСпискеПолучателей(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПереместитьИзВыбранногоВСписокВсе(Команда)
	
	ПолучателиПисьма.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзВыбранногоВСписок(Команда)
	
	ВыделенныеСтроки = Элементы.ПолучателиПисьма.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ПолучателиПисьма.Удалить(ПолучателиПисьма.НайтиПоИдентификатору(ВыделеннаяСтрока));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзСпискаВВыбранное(Команда)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов Тогда
		
		Для каждого ВыделеннаяСтрока Из Элементы.НайденныеКонтакты.ВыделенныеСтроки Цикл
		
			ДанныеСтроки = Элементы.НайденныеКонтакты.ДанныеСтроки(ВыделеннаяСтрока);
			ДобавитьПолучателя(ДанныеСтроки.Представление, ДанныеСтроки.НаименованиеКонтакта, ДанныеСтроки.Ссылка);
		
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	НомерЭлементаФормы = Неопределено;
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы.Количество() = 1 Тогда
		
		НомерЭлементаФормы = 0;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы.Количество() = 2 Тогда
		
		Если ТекущийЭлемент.Имя = "ПереместитьИзВерхнегоСпискаВВыбранное" Тогда
			
			НомерЭлементаФормы = 0;
			
		Иначе
			
			НомерЭлементаФормы = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерЭлементаФормы = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПеренестиВыделенныеСтроки(
		Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы[НомерЭлементаФормы].ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции осуществления поиска

// Осуществляет поиск контактов по доменному имени или по адресу электронной почты.
// 
&НаСервере
Процедура НайтиПоEmail(ПоДомену)
	
	Scan_Взаимодействия.НайтиПоEmail(СтрокаПоиска, ПоДомену ,ЭтотОбъект);
	
КонецПроцедуры

//Осуществляет поиск контактов по строке
//
&НаСервере
Функция КонтактыНайденныеПоСтроке()
	
	Возврат Scan_Взаимодействия.ОсуществитьПоискКонтактовПоСтроке(ЭтотОбъект, Истина);
	
КонецФункции

// Осуществляет поиск контактов по началу наименования
//
&НаСервере
Процедура НайтиПоНачалуНаименования()
	
	Scan_Взаимодействия.ПолучитьВсеКонтактыПоНачалуНаименованияСАдресамиЭлектроннойПочты(СтрокаПоиска, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьТаблицуПолучателей()
	
	табПолучатели = РеквизитФормыВЗначение("ПолучателиПисьма");
	
	Для Каждого ГруппаВыбранных Из Параметры.СписокВыбранных Цикл
		Если ГруппаВыбранных.Значение <> Неопределено Тогда
			Для Каждого Элемент Из ГруппаВыбранных.Значение Цикл
				НоваяСтрока = табПолучатели.Добавить();
				НоваяСтрока.Группа = ГруппаВыбранных.Представление;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	табПолучатели.Сортировать("Группа");
	
	Если табПолучатели.Количество() > 0 Тогда
		//+Рарус Изменено для того чтобы получать КИ в зависимости от переданного типа.
		ТаблицаАдресов = Scan_Взаимодействия.ПолучитьКИДляМассиваКонтактов(табПолучатели.ВыгрузитьКолонку("Контакт"),,ТипКИ);
		//-Рарус
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ПолучателиПисьма.Адрес,
			|	ПолучателиПисьма.Представление,
			|	ПолучателиПисьма.Контакт,
			|	ПолучателиПисьма.Группа
			|ПОМЕСТИТЬ ПолучателиПисьма
			|ИЗ
			|	&ПолучателиПисьма КАК ПолучателиПисьма
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонтактыАдреса.Контакт,
			|	КонтактыАдреса.СписокАдресов
			|ПОМЕСТИТЬ КонтактыСписокАдресов
			|ИЗ
			|	&КонтактыАдреса КАК КонтактыАдреса
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПолучателиПисьма.Адрес,
			|	ПолучателиПисьма.Представление,
			|	ПолучателиПисьма.Контакт,
			|	ПолучателиПисьма.Группа,
			|	ЕСТЬNULL(КонтактыСписокАдресов.СписокАдресов, """") КАК СписокАдресов
			|ИЗ
			|	ПолучателиПисьма КАК ПолучателиПисьма
			|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактыСписокАдресов КАК КонтактыСписокАдресов
			|		ПО КонтактыСписокАдресов.Контакт = ПолучателиПисьма.Контакт";
			
			Запрос.УстановитьПараметр("ПолучателиПисьма", табПолучатели);
			Запрос.УстановитьПараметр("КонтактыАдреса", ТаблицаАдресов);
			
			табПолучатели = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(табПолучатели, "ПолучателиПисьма");
	
КонецПроцедуры

//Добавляет строку в таблицу "Получатели письма" и заполняет ее согласно переданным параметрам.
//
//Параметры
//  Адрес        - Строка - адрес электронной почты.
//  Наименование - Строка - Представление адресата.
//  Контакт      - СправочникСсылка - контакт получатель.
//
&НаКлиенте
Процедура ДобавитьПолучателя(Адрес, Наименование, Контакт,СписокАдресов = "")
	
	НоваяСтрока = ПолучателиПисьма.Добавить();
	НоваяСтрока.Адрес         = Адрес;
	НоваяСтрока.Представление = Наименование;
	НоваяСтрока.Контакт       = Контакт;
	НоваяСтрока.СписокАдресов = СписокАдресов;
	НоваяСтрока.Группа        = ГруппаПоУмолчанию;
	
КонецПроцедуры

// Добавляет в таблицу получателей письма выбранную строку из списка "Контакты по предмету"
//
&НаКлиенте
Процедура ДобавитьПолучателяИзСпискаПоПредмету()
	
	ТекущиеДанные = Элементы.КонтактыПоПредмету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Scan_ВзаимодействияВызовСервера.ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(ТекущиеДанные.Ссылка);
	Если Результат <> Неопределено И Результат.Адреса.Количество() > 0 Тогда
		// rarus agar 04.08.2021 АПК ++
		//СписокАдресов = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Результат.Адреса.ВыгрузитьЗначения(), ";");
		СписокАдресов = СтрСоединить(Результат.Адреса.ВыгрузитьЗначения(), ";");
		// rarus agar 04.08.2021 АПК --
	Иначе
		СписокАдресов = "";
	КонецЕсли;
	
	ДобавитьПолучателя(ТекущиеДанные.Адрес, ТекущиеДанные.Наименование, ТекущиеДанные.Ссылка, СписокАдресов);
	
КонецПроцедуры

//Позиционируется на заданном контакте в списке получателей письма
//
//Параметры
//  Контакт - СправочникСсылка - контакт, на котором необходимо спозиционироваться.
//
&НаКлиенте
Процедура УстановитьКонтактВСпискеПолучателей(Контакт)
	
	Если ЗначениеЗаполнено(Контакт) И Элементы.ПолучателиПисьма.ТекущиеДанные <> Неопределено Тогда
		Элементы.ПолучателиПисьма.ТекущиеДанные.Контакт = Контакт;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текущим контакт в соответствующем динамическом списке.
//
//Параметры
//  Контакт  - СправочникСсылка - контакт, на котором необходимо спозиционироваться.
//
&НаСервере
Процедура УстановитьТекущимКонтакт(Контакт)
	
	Scan_Взаимодействия.УстановитьТекущимКонтакт(Контакт, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГруппу(ИмяГруппы)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПолучателиПисьма.ВыделенныеСтроки Цикл
		Элемент = ПолучателиПисьма.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Элемент.Группа = ИмяГруппы;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтроки(ЗНАЧ ВыделенныеСтроки)

	//+Рарус Изменено для того чтобы получать КИ в зависимости от переданного типа.
	//Результат = Взаимодействия.ПолучитьАдресаЭлектроннойПочтыДляМассиваКонтактов(ВыделенныеСтроки, ГруппаПоУмолчанию);
	Результат = Scan_Взаимодействия.ПолучитьКИДляМассиваКонтактов(ВыделенныеСтроки,ГруппаПоУмолчанию,ТипКИ);
	//-Рарус
	
	Если Результат <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппуПоУмолчанию()
	
	Если Параметры.Свойство("ГруппаПоУмолчанию") Тогда
		ГруппаПоУмолчанию = Параметры.ГруппаПоУмолчанию;
	КонецЕсли;
	Если ПустаяСтрока(ГруппаПоУмолчанию) Тогда
		ГруппаПоУмолчанию = НСтр("ru = 'Кому'");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УправлениеДоступностью()

	Элементы.КомандаОбновитьИндексППД.Доступность = Не ИндексАктуален;

КонецПроцедуры

&НаКлиенте
Процедура УправлениеСтраницами()

	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаВсеКонтактыПоПредмету ИЛИ 
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов ИЛИ 
		Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы.Количество() = 1 ИЛИ
		(Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей И 
		(НЕ ИспользоватьГруппыПользователей))Тогда
		
		Элементы.СтраницыПереместить.ТекущаяСтраница = Элементы.СтраницаПереместитьОднаТаблица;
		
	Иначе
		
		Элементы.СтраницыПереместить.ТекущаяСтраница = Элементы.СтраницаПереместитьДвеТаблицы;
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СписокВыбораАдресаЭППослеЗавершения(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ВыбранныйЭлемент.Значение;
	Адрес = ДополнительныеПараметры.Результат[Индекс].АдресЭП;
	Представление = ДополнительныеПараметры.Результат[Индекс].Представление;
	УстановитьАдресИПредставлениеВыбранногоКонтакта(ДополнительныеПараметры.ТекущиеДанные, Представление, Адрес);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьАдресИПредставлениеВыбранногоКонтакта(ТекущиеДанные, Представление, Адрес)

	Позиция = Найти(Представление, "<");
	Представление = ?(Позиция= 0, "", СокрЛП(Лев(Представление, Позиция-1)));

	ТекущиеДанные.Адрес = Адрес;
	Если Не ПустаяСтрока(Представление) Тогда
		ТекущиеДанные.Представление = Представление;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
