//rarus vikhle 13.09.2021 АПК +++
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

//rarus ozhnik 20.01.2020 14927 ++  
Процедура ПриЗаписи(Отказ, Замещение)
	
	//rarus vikhle 07.09.2021 mt 18212 +++
	ТаблицаЗаписей		 = ЭтотОбъект.Выгрузить();
	// rarus agar 10.01.2022 17739 ++
	//АльтернативныйРасчет = Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake");
	// rarus agar 10.01.2022 17739 --
	
	Для Каждого Запись Из ТаблицаЗаписей Цикл
		
		Если Запись.Заказ.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Запись.Реквизит = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод Тогда
			// Установлен тип заказа Open, нужно удалить, при наличии, записи по заказу в регистра Order Intake и Расчет Order Intake
			Если Запись.Значение = Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder Тогда
				// rarus agar 10.01.2022 17739 ++
				//// rarus agar 16.09.2021 17739 ++
				////Если Не АльтернативныйРасчет Тогда
				////	РегистрыСведений.Scan_OrderIntake.УдалитьЗаписиПоЗаказу(Запись.Заказ);
				////Иначе	
				////	РегистрыСведений.Scan_РасчетOrderIntake.УдалитьЗаписиПоЗаказу(Запись.Заказ);
				////КонецЕсли;
				//РегистрыСведений.Scan_OrderIntake.УдалитьЗаписиПоЗаказу(Запись.Заказ);
				//Если АльтернативныйРасчет Тогда
				//	РегистрыСведений.Scan_РасчетOrderIntake.УдалитьЗаписиПоЗаказу(Запись.Заказ);
				//КонецЕсли;
				//// rarus agar 16.09.2021 17739 --
				// rarus agar 10.01.2022 17739 --
			Иначе	
				ТипыЗаказаFirm = Перечисления.Scan_ТипыЗаказовНаЗавод.ТипыЗаказаFirm();
				
				Если НЕ ТипыЗаказаFirm.Найти(Запись.Значение) = Неопределено Тогда
					
					СтруктураОтбора   = Новый Структура("Заказ,Реквизит", Запись.Заказ, Запись.Реквизит);
					СтруктураСведений = РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ПолучитьПоследнее(Запись.Период - 1, СтруктураОтбора);
					ЗначениеСтарое    = СтруктураСведений.Значение;
					
					// Тип заказа изменен с пустого или с Open на Firm, нужно восстановить записи в регистрах Order Intake и Расчет Order Intake
					Если ЗначениеСтарое = Неопределено ИЛИ ЗначениеСтарое = Перечисления.Scan_ТипыЗаказовНаЗавод.OpenOrder Тогда
						РегистрыСведений.Scan_OrderIntake.ВосстановитьЗаписиПоЗаказу(Запись.Заказ);	
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ОбработатьДанныеДляOrderIntake(ТаблицаЗаписей);
	//rarus vikhle 05.09.2021 mt 18212 ---
	
	//rarus vikhle 05.09.2021 mt 18212 +++ 
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	//rarus bonmak 04.01.2021 17062 ++
	//	//|	МАКСИМУМ(КалендарныеГрафики.ДатаГрафика) КАК ДатаГрафика
	//	|ЕСТЬNULL(МАКСИМУМ(КалендарныеГрафики.ДатаГрафика), &ТекущаяДата) КАК ДатаГрафика
	//	//rarus bonmak 04.01.2021 17062 --
	//	|ИЗ
	//	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//	|ГДЕ
	//	|	КалендарныеГрафики.ДатаГрафика <= &ТекущаяДата
	//	|	И КалендарныеГрафики.Год = &Год
	//	|	И КалендарныеГрафики.ДеньВключенВГрафик = ИСТИНА";
	//
	//Запрос.УстановитьПараметр("Год", Год(ТекущаяДатаСеанса()));
	//Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//РабочаяДата = ТекущаяДатаСеанса();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	РабочаяДата = ВыборкаДетальныеЗаписи.ДатаГрафика;
	//КонецЦикла;
	//РабочаяДата = НачалоДня(РабочаяДата);
	//
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТЗ.Период КАК Период,
	//	|	ВЫРАЗИТЬ(ТЗ.Значение КАК Справочник.Scan_ЗаводскиеСтатусыЗаказаНаЗавод) КАК Значение,
	//	|	ТЗ.Заказ КАК ЗаказНаЗавод
	//	|ПОМЕСТИТЬ ВТ_ТЗ_Типизация
	//	|ИЗ
	//	|	&ТаблицаЗаписей КАК ТЗ
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ТЗ.Период КАК Период,
	//	|	ВТ_ТЗ.Значение КАК Значение,
	//	|	ВТ_ТЗ.ЗаказНаЗавод КАК ЗаказНаЗавод,
	//	//rarus vikhle 03.09.2021 mt 18212 +++
	//	|	ВЫРАЗИТЬ(Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение КАК Перечисление.Scan_ТипыЗаказовНаЗавод) КАК ТипЗаказаНаЗавод
	//	//rarus vikhle 03.09.2021 mt 18212 ---
	//	|ПОМЕСТИТЬ ВТ_ТЗ
	//	|ИЗ
	//	|	ВТ_ТЗ_Типизация КАК ВТ_ТЗ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Scan_Изделия КАК Scan_Изделия
	//	|		ПО ВТ_ТЗ.ЗаказНаЗавод = Scan_Изделия.ЗаказНаЗавод
	//	//rarus vikhle 03.09.2021 mt 18212 +++
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПоследних(
	//	|				,
	//	|				Заказ В
	//	|						(ВЫБРАТЬ
	//	|							ВТ_ТЗ_Типизация.ЗаказНаЗавод КАК ЗаказНаЗавод
	//	|						ИЗ
	//	|							ВТ_ТЗ_Типизация КАК ВТ_ТЗ_Типизация)
	//	|					И Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод)) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних
	//	|		ПО ВТ_ТЗ.ЗаказНаЗавод = Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Заказ
	//	//rarus vikhle 03.09.2021 mt 18212 ---
	//	|ГДЕ
	//	|	ВТ_ТЗ.Значение.СтатусCOW >= 30
	//	|	И (Scan_Изделия.Ссылка ЕСТЬ NULL
	//	|			ИЛИ Scan_Изделия.БУ = ЛОЖЬ)
	//	//rarus vikhle 03.09.2021 mt 18212 +++
	//	|	И ВЫРАЗИТЬ(Scan_ХарактеристикиЗаказовНаЗаводСрезПоследних.Значение КАК Перечисление.Scan_ТипыЗаказовНаЗавод) В (&ТипыЗаказаFirm)
	//	//rarus vikhle 03.09.2021 mt 18212 ---
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ТЗ.Период КАК ПериодБазовый,
	//	|	ВТ_ТЗ.Значение КАК ЗначениеБазовое,
	//	|	ВТ_ТЗ.ЗаказНаЗавод КАК ЗаказНаЗавод,
	//	|	Scan_OrderIntakeСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗаводПодтверждениеЗавода,
	//	|	Scan_OrderIntakeСрезПоследних1.ЗаказНаЗавод КАК ЗаказНаЗавод1,
	//	|	Scan_OrderIntakeСрезПоследних1.Период КАК ПериодВнесениеОплаты
	//	|ИЗ
	//	|	ВТ_ТЗ КАК ВТ_ТЗ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_OrderIntake.СрезПоследних(, ВидДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода)) КАК Scan_OrderIntakeСрезПоследних
	//	|		ПО ВТ_ТЗ.ЗаказНаЗавод = Scan_OrderIntakeСрезПоследних.ЗаказНаЗавод
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_OrderIntake.СрезПоследних(, ВидДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты)) КАК Scan_OrderIntakeСрезПоследних1
	//	|		ПО ВТ_ТЗ.ЗаказНаЗавод = Scan_OrderIntakeСрезПоследних1.ЗаказНаЗавод
	//	|ГДЕ
	//	|	Scan_OrderIntakeСрезПоследних.ЗаказНаЗавод ЕСТЬ NULL";
	//
	//
	//Запрос.УстановитьПараметр("ТаблицаЗаписей",ЭтотОбъект.Выгрузить());	
	////rarus vikhle 03.09.2021 mt 18212 +++
	//ТипыЗаказаFirm = Перечисления.Scan_ТипыЗаказовНаЗавод.ТипыЗаказаFirm();
	//Запрос.УстановитьПараметр("ТипыЗаказаFirm", ТипыЗаказаFirm);
	////rarus vikhle 03.09.2021 mt 18212 ---
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//// rarus agar 20.04.2021 OI ++
	//АльтернативныйРасчет = Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake");
	//// rarus agar 20.04.2021 OI --
	//
	////rarus ozhnik 14927 14.04.2020 + 
	////НаборЗаписейOrderIntake =  РегистрыСведений.Scan_OrderIntake.СоздатьНаборЗаписей();
	////НаборЗаписейOrderIntake.Отбор.Период.Установить(РабочаяДата);
	////НаборЗаписейOrderIntake.Прочитать();
	////rarus ozhnik 14927 14.04.2020 + 

	//Пока Выборка.Следующий() Цикл
	//	// rarus agar 20.04.2021 OI ++
	//	Если Не АльтернативныйРасчет Тогда
	//	// rarus agar 20.04.2021 OI --
	//		Если не значениеЗаполнено(Выборка.ЗаказНаЗаводПодтверждениеЗавода) Тогда // нет состояния "подтверждение завода", надо добавить
	//			НоваяЗапись = РегистрыСведений.Scan_OrderIntake.СоздатьМенеджерЗаписи(); //rarus ozhnik 14927 14.04.2020 + 
	//			НоваяЗапись.Период = РабочаяДата;
	//			НоваяЗапись.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода;
	//			НоваяЗапись.ЗаказНаЗавод = Выборка.ЗаказНаЗавод;  			
	//			НоваяЗапись.Прочитать();
	//			
	//			Если Не НоваяЗапись.Выбран() Тогда
	//				НоваяЗапись.Период = РабочаяДата;
	//				НоваяЗапись.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода;
	//				НоваяЗапись.ЗаказНаЗавод = Выборка.ЗаказНаЗавод;
	//				НоваяЗапись.ИспользоватьВОтчетах = Истина; //rarus vikhle 21.03.2021 mt 17479
	//				НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;	   
	//				НоваяЗапись.Записать();
	//			КонецЕсли;
	//			
	//		КонецЕсли; 	
	//		Если не значениеЗаполнено(Выборка.ЗаказНаЗаводПодтверждениеЗавода) и значениеЗаполнено(Выборка.ЗаказНаЗавод1) Тогда // не было состояния "внесение оплаты", но было подтверждение завода, надо добавить статус Order Intake
	//			НоваяЗапись = РегистрыСведений.Scan_OrderIntake.СоздатьМенеджерЗаписи(); //rarus ozhnik 14927 14.04.2020 + 
	//			НоваяЗапись.Период = ?(РабочаяДата > Выборка.ПериодВнесениеОплаты,РабочаяДата, Выборка.ПериодВнесениеОплаты);
	//			НоваяЗапись.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake;
	//			НоваяЗапись.ЗаказНаЗавод = Выборка.ЗаказНаЗавод;
	//			НоваяЗапись.Прочитать();
	//			Если Не НоваяЗапись.Выбран() Тогда
	//				НоваяЗапись.Период = ?(РабочаяДата > Выборка.ПериодВнесениеОплаты,РабочаяДата, Выборка.ПериодВнесениеОплаты);
	//				НоваяЗапись.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake;
	//				НоваяЗапись.ЗаказНаЗавод = Выборка.ЗаказНаЗавод;
	//				НоваяЗапись.ИспользоватьВОтчетах = Истина; //rarus vikhle 21.03.2021 mt 17479
	//				НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;	   
	//				НоваяЗапись.Записать();
	//			КонецЕсли;     
	//		КонецЕсли;
	//	// rarus agar 20.04.2021 OI ++
	//	Иначе
	//		МенеджерЗаписи = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьМенеджерЗаписи();
	//		МенеджерЗаписи.Период       = ТекущаяДатаСеанса();
	//		МенеджерЗаписи.ЗаказНаЗавод = Выборка.ЗаказНаЗавод;
	//		МенеджерЗаписи.Событие      = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода;
	//		МенеджерЗаписи.ДатаСобытия  = РабочаяДата;
	//		МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//		УстановитьПривилегированныйРежим(Истина);
	//		МенеджерЗаписи.Записать();
	//		УстановитьПривилегированныйРежим(Ложь);
	//	КонецЕсли;
	//	// rarus agar 20.04.2021 OI --
	//КонецЦикла;  
	////НаборЗаписейOrderIntake.Записать();	//rarus ozhnik  14.04.2020 + 
	//rarus vikhle 05.09.2021 mt 18212 ---
	
	УстановитьСтатусПродуктаDELETE();  //rarus BProg_Dekin 19.05.2020 mantis 0015999 +-
КонецПроцедуры
//rarus ozhnik 20.01.2020 14927

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтатусПродуктаDELETE() //rarus BProg_Dekin 19.05.2020 mantis 0015999 +-
	Для Каждого СтрокаДвижения Из ЭтотОбъект Цикл
		Если СтрокаДвижения.Реквизит = Перечисления.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ТипЗаказаНаЗавод Тогда
			Справочники.Scan_Изделия.УстановитьСтатусПродуктаDELETE(СтрокаДвижения.Заказ);
			Прервать;		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
//rarus vikhle 13.09.2021 АПК ---