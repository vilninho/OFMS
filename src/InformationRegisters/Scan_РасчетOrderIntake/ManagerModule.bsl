#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьРасчетДатOrderIntake(ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Если Не Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake") Тогда
		Возврат;
	КонецЕсли;
	
	//МинимальныйОстатокOrderIntake = 2;
	МинимальныйОстатокOrderIntake = Scan_ПраваИНастройки.Scan_Право("МинимальныйОстатокВесовСобытийАльтернативногоOrderIntake");
	
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	
	// Если не задан период, данные выбираем по всем заказам в регистре
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Scan_НастройкиРасчетаOrderIntake.Событие КАК Событие,
	|	Scan_НастройкиРасчетаOrderIntake.ВесСобытия КАК ВесСобытия
	|ИЗ
	|	РегистрСведений.Scan_НастройкиРасчетаOrderIntake КАК Scan_НастройкиРасчетаOrderIntake";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВесаСобытий = РезультатЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Scan_РасчетOrderIntake.ЗаказНаЗавод КАК ЗаказНаЗавод
	|ПОМЕСТИТЬ ВТ_ЗаказыНаЗавод
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	(&ДатаНачала = НЕОПРЕДЕЛЕНО
	|			ИЛИ Scan_РасчетOrderIntake.Период >= &ДатаНачала)
	|	И (&ДатаОкончания = НЕОПРЕДЕЛЕНО
	|			ИЛИ Scan_РасчетOrderIntake.Период <= &ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Scan_РасчетOrderIntake.Период КАК Период,
	|	Scan_РасчетOrderIntake.ЗаказНаЗавод КАК ЗаказНаЗавод,
	|	Scan_РасчетOrderIntake.Событие КАК Событие,
	|	Scan_РасчетOrderIntake.ДатаСобытия КАК ДатаСобытия,
	|	Scan_РасчетOrderIntake.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake КАК Scan_РасчетOrderIntake
	|ГДЕ
	|	Scan_РасчетOrderIntake.ЗаказНаЗавод В
	|			(ВЫБРАТЬ
	|				ВТ_ЗаказыНаЗавод.ЗаказНаЗавод
	|			ИЗ
	|				ВТ_ЗаказыНаЗавод)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия
	|ИТОГИ ПО
	|	ЗаказНаЗавод";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаЗаказНаЗавод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЗаказНаЗавод");
	Пока ВыборкаЗаказНаЗавод.Следующий() Цикл
		// Для накопления остатка
		ТекущийОстаток      = 0;
		// Признак регистрации даты Order Intake
		БылOrderIntake          = Ложь;
		БылоПодтверждениеЗавода = Ложь;
		
		// Массив с индексами строк таблицы расчета, в которых есть дата Order Intake
		ИндексыСтрокOrderIntake = Новый Массив;
		
		// Таблицу расчета получаем из набора записей регистра расчета
		НаборЗаписейРасчета = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьНаборЗаписей();
		ТаблицаРасчета      = НаборЗаписейРасчета.ВыгрузитьКолонки();
		
		Выборка = ВыборкаЗаказНаЗавод.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Запомним предыдущую строку до добавления новой
			ПредыдущаяСтрокаРасчета = Неопределено;
			СтрокВТаблицеРасчета    = ТаблицаРасчета.Количество();
			
			Если СтрокВТаблицеРасчета > 0 Тогда
				ПредыдущаяСтрокаРасчета = ТаблицаРасчета[СтрокВТаблицеРасчета-1];
			КонецЕсли;
			
			Если Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода") Тогда
				БылоПодтверждениеЗавода = Истина;
			КонецЕсли;
			
			// Новая строка расчета
			НоваяСтрокаРасчета = ТаблицаРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчета, Выборка, "Период,ЗаказНаЗавод,Событие,ДатаСобытия,Пользователь");
			
			#Область ОпределениеВесаСобытия
			
			// Повтор события
			Если  ПредыдущаяСтрокаРасчета <> Неопределено
				И Выборка.Событие = ПредыдущаяСтрокаРасчета.Событие
				Тогда
				ВесСобытия = 0;
			Иначе
				НайденныеСтрокиВесов = ВесаСобытий.НайтиСтроки(Новый Структура("Событие", Выборка.Событие));
				Если НайденныеСтрокиВесов.Количество() > 0 Тогда
					ВесСобытия = НайденныеСтрокиВесов[0].ВесСобытия;
				Иначе
					ВесСобытия = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Rarus tenkam 08.07.2022 mantis 18726 АПК +++ (ПодтвержденияЗаводаНет - такого начения больше нет)
			//// Отмена подтверждения раньше подтверждения
			//Если Не БылоПодтверждениеЗавода
			//	И   Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ПодтвержденияЗаводаНет") 
			//	Тогда
			//	ВесСобытия = 0;
			//	НоваяСтрокаРасчета.Комментарий = "Отмена подтверждения раньше подтверждения";
			//КонецЕсли;
			// Rarus tenkam 08.07.2022 mantis 18726 АПК ---
			
			ТекущийОстаток = ТекущийОстаток + ВесСобытия;
			
			НоваяСтрокаРасчета.ВесСобытия = ВесСобытия;
			НоваяСтрокаРасчета.Остаток    = ТекущийОстаток;
			
			#КонецОбласти
			
			#Область РасчетДатыOrderIntake
			
			Если ТекущийОстаток = МинимальныйОстатокOrderIntake Тогда
				// Набрался остаток, достаточный для регистрации даты Order Intake
				НоваяСтрокаРасчета.OrderIntake     = 1;
				НоваяСтрокаРасчета.ДатаOrderIntake = Выборка.ДатаСобытия;
				
				БылOrderIntake = Истина;
			ИначеЕсли БылOrderIntake 
				И     ТекущийОстаток < МинимальныйОстатокOrderIntake 
				Тогда
				// Дата Order Intake была зарегистрирована
				// После этого событие с отрицательным весом
				НоваяСтрокаРасчета.OrderIntake     = -1;
			КонецЕсли;
			
			#КонецОбласти
			
			#Область Исключения
			
			// Отгрузка без внесения оплаты - отгрузка в кредит
			// Дата Order Intake = Дата отгрузки
			Если Не БылOrderIntake 
				И   Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаОтгрузки") 
				Тогда
				НоваяСтрокаРасчета.OrderIntake     = 1;
				НоваяСтрокаРасчета.ДатаOrderIntake = Выборка.ДатаСобытия;
				НоваяСтрокаРасчета.Комментарий     = "Отгрузка без внесения оплаты";
				
				БылOrderIntake = Истина;
			КонецЕсли;
			
			// Повтор события
			Если  ПредыдущаяСтрокаРасчета <> Неопределено
				И Выборка.Событие = ПредыдущаяСтрокаРасчета.Событие
				Тогда
				НоваяСтрокаРасчета.OrderIntake     = 0;
				НоваяСтрокаРасчета.ДатаOrderIntake = Неопределено;
				НоваяСтрокаРасчета.Комментарий     = "Повтор события";
			КонецЕсли;
			
			// Отмена отгрузки
			// Дата Order Intake = Дата предыдущего Order Intake
			Если  БылOrderIntake 
				И Выборка.Событие = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОтгрузки") 
				Тогда
				Если ИндексыСтрокOrderIntake.Количество() > 0 Тогда
					ИндексСтрокиПредыдущегоOrderIntake = ИндексыСтрокOrderIntake[ИндексыСтрокOrderIntake.Количество()-1];
					
					НоваяСтрокаРасчета.OrderIntake     = 1;
					НоваяСтрокаРасчета.ДатаOrderIntake = ТаблицаРасчета[ИндексСтрокиПредыдущегоOrderIntake].ДатаOrderIntake;
					НоваяСтрокаРасчета.Комментарий     = "Отмена отгрузки";
					
					БылOrderIntake = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если  НоваяСтрокаРасчета.ДатаOrderIntake <> Дата(1,1,1) 
				И ИндексыСтрокOrderIntake.Найти(ТаблицаРасчета.Индекс(НоваяСтрокаРасчета)) = Неопределено 
				Тогда
				ИндексыСтрокOrderIntake.Добавить(ТаблицаРасчета.Индекс(НоваяСтрокаРасчета));
			КонецЕсли;
			
			#КонецОбласти
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписейРасчета.Отбор.ЗаказНаЗавод.Установить(ВыборкаЗаказНаЗавод.ЗаказНаЗавод);
		НаборЗаписейРасчета.Загрузить(ТаблицаРасчета);
		НаборЗаписейРасчета.Записать(Истина);
		
		НаборЗаписейOrderIntake = РегистрыСведений.Scan_OrderIntakeАльтернативный.СоздатьНаборЗаписей();
		НаборЗаписейOrderIntake.Отбор.ЗаказНаЗавод.Установить(ВыборкаЗаказНаЗавод.ЗаказНаЗавод);
		НаборЗаписейOrderIntake.Прочитать();
		
		ТекущиеЗаписиOrderIntake = НаборЗаписейOrderIntake.Выгрузить();
		
		НаборЗаписейOrderIntake.Очистить();
		
		// Массив, в котором будут храниться периоды записей с видов Order Intake
		// rarus agar 12.10.2021 17739 ++
		//ПериодыЗаписейOI = Новый Массив; //rarus vikhle 29.09.2021 m 17739
		//Для Каждого СтрокаРасчета Из ТаблицаРасчета Цикл
		//	НоваяЗаписьOrderIntake = НаборЗаписейOrderIntake.Добавить();
		//	НоваяЗаписьOrderIntake.Период               = СтрокаРасчета.ДатаСобытия;
		//	НоваяЗаписьOrderIntake.ЗаказНаЗавод         = ВыборкаЗаказНаЗавод.ЗаказНаЗавод;
		//	НоваяЗаписьOrderIntake.ВидДаты              = СтрокаРасчета.Событие;
		//	НоваяЗаписьOrderIntake.ИспользоватьВОтчетах = Истина;
		//	НоваяЗаписьOrderIntake.ИдентификаторЗаписи  = Новый УникальныйИдентификатор;
		//	НоваяЗаписьOrderIntake.Пользователь         = Пользователи.АвторизованныйПользователь();
		//	
		//	Если ЗначениеЗаполнено(СтрокаРасчета.ДатаOrderIntake) Тогда
		//		ПериодыЗаписейOI.Добавить(СтрокаРасчета.ДатаOrderIntake);
		//		
		//		//rarus vikhle 29.09.2021 m 17739 +++ возможна неуникальность по измерениям
		//		//НоваяЗаписьOrderIntake = НаборЗаписейOrderIntake.Добавить();
		//		//НоваяЗаписьOrderIntake.Период               = СтрокаРасчета.ДатаOrderIntake;
		//		//НоваяЗаписьOrderIntake.ЗаказНаЗавод         = ВыборкаЗаказНаЗавод.ЗаказНаЗавод;
		//		//НоваяЗаписьOrderIntake.ВидДаты              = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake");
		//		//НоваяЗаписьOrderIntake.ИспользоватьВОтчетах = Истина;
		//		//НоваяЗаписьOrderIntake.ИдентификаторЗаписи  = Новый УникальныйИдентификатор;
		//		//НоваяЗаписьOrderIntake.Пользователь         = Пользователи.АвторизованныйПользователь();
		//		//rarus vikhle 29.09.2021 m 17739 ---
		//	КонецЕсли;
		//КонецЦикла;
		
		// Оставляем только уникальные периоды
		//ПериодыЗаписейOI = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПериодыЗаписейOI);
		//
		//// Добавляем в набор записи с видом Order Intake с уникальными периодами, для уникальности по измерениям
		//Для Каждого Период Из ПериодыЗаписейOI Цикл //rarus vikhle 29.09.2021 m 17739 +++
		//	НоваяЗаписьOrderIntake = НаборЗаписейOrderIntake.Добавить();
		//	НоваяЗаписьOrderIntake.Период               = Период;
		//	НоваяЗаписьOrderIntake.ЗаказНаЗавод         = ВыборкаЗаказНаЗавод.ЗаказНаЗавод;
		//	НоваяЗаписьOrderIntake.ВидДаты              = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake");
		//	НоваяЗаписьOrderIntake.ИспользоватьВОтчетах = Истина;
		//	НоваяЗаписьOrderIntake.ИдентификаторЗаписи  = Новый УникальныйИдентификатор;
		//	НоваяЗаписьOrderIntake.Пользователь         = Пользователи.АвторизованныйПользователь();	
		//КонецЦикла;	
		//rarus vikhle 29.09.2021 m 17739 ---
		
		ТаблицаOrderIntakeАльтернативный = Новый ТаблицаЗначений;
		ТаблицаOrderIntakeАльтернативный.Колонки.Добавить("Событие");
		ТаблицаOrderIntakeАльтернативный.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		Для Каждого СтрокаРасчета Из ТаблицаРасчета Цикл
			НоваяСтрокаOrderIntakeАльтернативный = ТаблицаOrderIntakeАльтернативный.Добавить();
			НоваяСтрокаOrderIntakeАльтернативный.Событие     = СтрокаРасчета.Событие;
			НоваяСтрокаOrderIntakeАльтернативный.ДатаСобытия = СтрокаРасчета.ДатаСобытия;
			
			Если ЗначениеЗаполнено(СтрокаРасчета.ДатаOrderIntake) Тогда
				НоваяСтрокаOrderIntakeАльтернативный = ТаблицаOrderIntakeАльтернативный.Добавить();
				НоваяСтрокаOrderIntakeАльтернативный.Событие     = ПредопределенноеЗначение("Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake");
				НоваяСтрокаOrderIntakeАльтернативный.ДатаСобытия = СтрокаРасчета.ДатаOrderIntake;
			КонецЕсли;
		КонецЦикла;
		ТаблицаOrderIntakeАльтернативный.Свернуть("Событие,ДатаСобытия");
		
		Для Каждого СтрокаOrderIntakeАльтернативный Из ТаблицаOrderIntakeАльтернативный Цикл
			НоваяЗаписьOrderIntake = НаборЗаписейOrderIntake.Добавить();
			НоваяЗаписьOrderIntake.Период               = СтрокаOrderIntakeАльтернативный.ДатаСобытия;
			НоваяЗаписьOrderIntake.ЗаказНаЗавод         = ВыборкаЗаказНаЗавод.ЗаказНаЗавод;
			НоваяЗаписьOrderIntake.ВидДаты              = СтрокаOrderIntakeАльтернативный.Событие;
			НоваяЗаписьOrderIntake.ИспользоватьВОтчетах = Истина;
			НоваяЗаписьOrderIntake.ИдентификаторЗаписи  = Новый УникальныйИдентификатор;
			НоваяЗаписьOrderIntake.Пользователь         = АвторизованныйПользователь;
		КонецЦикла;
		
		Попытка
			НаборЗаписейOrderIntake.Записать(Истина);
		Исключение
			НаборЗаписейOrderIntake.Очистить();
			НаборЗаписейOrderIntake.Загрузить(ТекущиеЗаписиOrderIntake);
			ЗаписьЖурналаРегистрации(СтрШаблон(Нстр("ru = 'Не удалось обновить записи в регистре Order Intake (альтернативный) по заказу на завод %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ВыборкаЗаказНаЗавод.ЗаказНаЗавод),
									УровеньЖурналаРегистрации.Ошибка, 
									Метаданные.РегистрыСведений.Scan_OrderIntakeАльтернативный,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Попытка
				НаборЗаписейOrderIntake.Записать(Истина);
				ЗаписьЖурналаРегистрации(СтрШаблон(Нстр("ru = 'Записи регистра Order Intake (альтернативный) по заказу на завод %1 восстановлены'", ОбщегоНазначения.КодОсновногоЯзыка()), ВыборкаЗаказНаЗавод.ЗаказНаЗавод),
									УровеньЖурналаРегистрации.Ошибка, 
									Метаданные.РегистрыСведений.Scan_OrderIntakeАльтернативный,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Исключение КонецПопытки;
		КонецПопытки;
		// rarus agar 12.10.2021 17739 --
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗаписиПоЗаказу(ЗаказНаЗавод) Экспорт //rarus vikhle 07.09.2021 mt 18212 +++ 
	
	Если НЕ ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказНаЗавод.Установить(ЗаказНаЗавод);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Выбран() Тогда
		НаборЗаписей.Очистить();
		
		Попытка
		НаборЗаписей.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(Нстр("ru = 'Произошла ошибка при удалении записей по заказу %1 в регистре Расчет Order Intake по причине:'"), ЗаказНаЗавод); 
			ТекстОшибки = ТекстОшибки + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВывестиСообщениеПол(ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(Нстр("ru = 'Удаление записи по заказу в регистре Расчет Order Intake'", ОбщегоНазначения.КодОсновногоЯзыка()), //rarus vikhle 13.09.2021 АПК +код языка
									УровеньЖурналаРегистрации.Ошибка, 
									Метаданные.РегистрыСведений.Scan_РасчетOrderIntake,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
	КонецЕсли;	
		
КонецПроцедуры //rarus vikhle 07.09.2021 mt 18212

// rarus agar 20.09.2021 17739 ++
Процедура ЗаписатьОтменуОплаты(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
	
	Если Не Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake") Тогда
		Возврат;
	КонецЕсли;
	
	Если  Продукт = Неопределено
		И ЗаказНаЗавод = Неопределено
		Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
		
		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи отмены оплаты в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ЭтоЗаказFirm(ЗаказНаЗавод) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("П1", ДатаСобытия);
	Запрос.УстановитьПараметр("П2", ЗаказНаЗавод);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_РасчетOrderIntakeСрезПоследних.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.Scan_РасчетOrderIntake.СрезПоследних(
	|			&П1,
	|			(Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты)
	|				ИЛИ Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ОтменаОплаты))
	|				И ЗаказНаЗавод = &П2) КАК Scan_РасчетOrderIntakeСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Scan_РасчетOrderIntakeСрезПоследних.Период УБЫВ";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если  Выборка.Следующий() 
		И Выборка.Событие = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты 
		Тогда
		МенеджерЗаписи = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период       = ТекущаяДатаСеанса();
		МенеджерЗаписи.ЗаказНаЗавод = ЗаказНаЗавод;
		МенеджерЗаписи.Событие      = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ОтменаОплаты;
		МенеджерЗаписи.ДатаСобытия  = ДатаСобытия;
		МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		УстановитьПривилегированныйРежим(Истина);
		МенеджерЗаписи.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Rarus tenkam 08.07.2022 mantis 18726 АПК +++
//Процедура ЗаписатьОтменуПодтвержденияЗавода(ДатаСобытия, ЗаказНаЗавод = Неопределено, Продукт = Неопределено) Экспорт
//	
//	Если Не Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если  Продукт = Неопределено
//		И ЗаказНаЗавод = Неопределено
//		Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
//		Если ТипЗнч(Продукт) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
//			Возврат;
//		КонецЕсли;
//		
//		ЗаказНаЗавод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "ЗаказНаЗавод");
//		
//		Если Не ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
//			ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи отмены оплаты в регистр Расчет Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, Продукт);
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Не РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ЭтоЗаказFirm(ЗаказНаЗавод) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("П1", ДатаСобытия);
//	Запрос.УстановитьПараметр("П2", ЗаказНаЗавод);
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Scan_РасчетOrderIntakeСрезПоследних.Событие КАК Событие
//	|ИЗ
//	|	РегистрСведений.Scan_РасчетOrderIntake.СрезПоследних(
//	|			&П1,
//	|			(Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода)
//	|				ИЛИ Событие = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ПодтвержденияЗаводаНет))
//	|				И ЗаказНаЗавод = &П2) КАК Scan_РасчетOrderIntakeСрезПоследних
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Scan_РасчетOrderIntakeСрезПоследних.Период УБЫВ";
//	УстановитьПривилегированныйРежим(Истина);
//	РезультатЗапроса = Запрос.Выполнить();
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Если  Выборка.Следующий()
//		И Выборка.Событие = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода 
//		Тогда
//		МенеджерЗаписи = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьМенеджерЗаписи();
//		МенеджерЗаписи.Период       = ТекущаяДатаСеанса();
//		МенеджерЗаписи.ЗаказНаЗавод = ЗаказНаЗавод;
//		МенеджерЗаписи.Событие      = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтвержденияЗаводаНет;
//		МенеджерЗаписи.ДатаСобытия  = ДатаСобытия;
//		МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
//		УстановитьПривилегированныйРежим(Истина);
//		МенеджерЗаписи.Записать();
//		УстановитьПривилегированныйРежим(Ложь);
//	КонецЕсли;
//	
//КонецПроцедуры
// Rarus tenkam 08.07.2022 mantis 18726 АПК ---

// rarus agar 20.09.2021 17739 --

#КонецОбласти

#КонецЕсли
