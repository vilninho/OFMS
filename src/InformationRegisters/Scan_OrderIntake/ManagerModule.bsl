
Функция ЗаписатьДатуРасторжения(ПродуктСсылка, ДатаРасторжения) Экспорт 	// rarus tenkam 05.11.2020 mantis 16759 +++
	Если ТипЗнч(ПродуктСсылка) <> Тип("СправочникСсылка.Scan_Изделия") Тогда
		// Это драфт, ничего не делаем
		Возврат Истина;
	КонецЕсли;
	
	ЗаказНаЗаводСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПродуктСсылка, "ЗаказНаЗавод");
	
	Если НЕ ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи даты расторжения в регистр Order Intake. Не удалось получить заказ на завод для продукта <%1>.'"),,,,, ПродуктСсылка);
		Возврат Ложь;
	КонецЕсли;
	
	//rarus vikhle 03.09.2021 mt 18212 +++
	Если НЕ РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ЭтоЗаказFirm(ЗаказНаЗаводСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	//rarus vikhle 03.09.2021 mt 18212 ---
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Scan_OrderIntakeСрезПоследних.Период КАК Период,
	|	Scan_OrderIntakeСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод,
	|	Scan_OrderIntakeСрезПоследних.ВидДаты КАК ВидДаты
	|ИЗ
	|	РегистрСведений.Scan_OrderIntake.СрезПоследних(
	|			&ДатаРасторжения,
	|			ВидДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake)
	|				И ЗаказНаЗавод = &ЗаказНаЗаводСсылка) КАК Scan_OrderIntakeСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаРасторжения", ДатаРасторжения);
	Запрос.УстановитьПараметр("ЗаказНаЗаводСсылка", ЗаказНаЗаводСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// rarus agar 15.09.2021 17739 ++
	//АльтернативныйРасчет = Scan_ПраваИНастройки.Scan_Право("ИспользоватьАльтернативныйРасчетДатOrderIntake");
	// rarus agar 15.09.2021 17739 --
	
	//rarus vikhle 28.09.2021 mt 18286 +++
	//Если АльтернативныйРасчет Тогда
	//	МенеджерЗаписи = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьМенеджерЗаписи();
	//	МенеджерЗаписи.Период       = ТекущаяДатаСеанса();
	//	МенеджерЗаписи.ЗаказНаЗавод = ЗаказНаЗаводСсылка;
	//	МенеджерЗаписи.Событие      = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаРасторжения;
	//	МенеджерЗаписи.ДатаСобытия  = ДатаРасторжения;
	//	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//	УстановитьПривилегированныйРежим(Истина);
	//	МенеджерЗаписи.Записать();
	//	УстановитьПривилегированныйРежим(Ложь);
	//КонецЕсли;
	//rarus vikhle 28.09.2021 mt 18286 ---
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НоваяЗапись = РегистрыСведений.Scan_OrderIntake.СоздатьМенеджерЗаписи(); 
		НоваяЗапись.Период = ДатаРасторжения;
		НоваяЗапись.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаРасторжения;
		НоваяЗапись.ЗаказНаЗавод = ЗаказНаЗаводСсылка;
		НоваяЗапись.Прочитать();
		Если НЕ НоваяЗапись.Выбран() Тогда
			// Зафиксируем дату расторжения
			НоваяЗапись.Период = ДатаРасторжения;
			НоваяЗапись.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаРасторжения;
			НоваяЗапись.ЗаказНаЗавод = ЗаказНаЗаводСсылка;
			НоваяЗапись.ИспользоватьВОтчетах = Истина; //rarus vikhle 21.03.2021 mt 17479
			НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;	
			Попытка
				НоваяЗапись.Записать();
				Возврат Истина;
			Исключение
				ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи даты расторжения в регистр Order Intake для заказа <%1>. Ошибка: %2'"),,,,, ЗаказНаЗаводСсылка, ОписаниеОшибки());
				СообщениеОбОшибке = "";
				Возврат Ложь;
			КонецПопытки;
		Иначе
			// Запись уже есть
			Возврат Истина;
		КонецЕсли;
		
		//rarus vikhle 28.09.2021 mt 18286 +++
		// rarus agar 15.09.2021 17739 ++
		//Если АльтернативныйРасчет Тогда
		//	МенеджерЗаписи = РегистрыСведений.Scan_РасчетOrderIntake.СоздатьМенеджерЗаписи();
		//	МенеджерЗаписи.Период       = ТекущаяДатаСеанса();
		//	МенеджерЗаписи.ЗаказНаЗавод = ЗаказНаЗаводСсылка;
		//	МенеджерЗаписи.Событие      = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаРасторжения;
		//	МенеджерЗаписи.ДатаСобытия  = ДатаРасторжения;
		//	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		//	УстановитьПривилегированныйРежим(Истина);
		//	МенеджерЗаписи.Записать();
		//	УстановитьПривилегированныйРежим(Ложь);
		//КонецЕсли;
		// rarus agar 15.09.2021 17739 --
		//rarus vikhle 28.09.2021 mt 18286 ---
	Иначе
		// По заказу ранее не было даты OI, дату расторжения не нужно фиксировать
		Возврат Истина;
	КонецЕсли;
КонецФункции	// rarus tenkam 05.11.2020 mantis 16759 ---

Функция ЗаписатьДатуРасторженияПоЗаявкеНаСОП(ЗаявкаНаСОП, ДатаРасторжения) Экспорт
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаСОП) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеОК = Истина;
	Для Каждого ТекСтрока Из ЗаявкаНаСОП.СписокПродуктов Цикл 		
		ВсеОК = ВсеОК И ЗаписатьДатуРасторжения(ТекСтрока.Продукт, ДатаРасторжения);		
	КонецЦикла;
	Возврат ВсеОК;
КонецФункции

//rarus vikhle 21.03.2021 mt 17479 +++
Функция ЗаписатьИспользованиеВОтчетах(КлючЗаписи, ИспользоватьВОтчетах) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.Scan_OrderIntake.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,КлючЗаписи);
	МенеджерЗаписи.Пользователь			= Пользователи.ТекущийПользователь();
	МенеджерЗаписи.ИспользоватьВОтчетах = ИспользоватьВОтчетах;
	МенеджерЗаписи.ДатаКорректировки	= ТекущаяДатаСеанса();
	Попытка
		МенеджерЗаписи.Записать();
		Возврат Истина;
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи использования в отчетах в регистр Order Intake для заказа <%1>. Ошибка: %2'"),,,,, МенеджерЗаписи.ЗаказНаЗавод, ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;
	
КонецФункции	

Функция ИзменитьПериодЗаписи(КлючЗаписи,ВидДаты,НовоеЗначение) Экспорт
	
	//rarus vikhle 07.09.2021 mt 18212 +++
	Если НЕ РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ЭтоЗаказFirm(КлючЗаписи.ЗаказНаЗавод) Тогда
		ВывестиСообщениеПол(Нстр("ru = 'У заказа %1 тип заказа отличается от Firm. Запись не изменена в регистре Order Intake.'"),,,,,
							КлючЗаписи.ЗаказНаЗавод);
		Возврат Ложь;
	КонецЕсли;	
	//rarus vikhle 07.09.2021 mt 18212 ---
	
	МенеджерЗаписи = РегистрыСведений.Scan_OrderIntake.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,КлючЗаписи);
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		//Запись существует, удаляем
		МенеджерЗаписи.Удалить();
	КонецЕсли;	
	
	//Добавляем новую запись с новым периодом
	МенеджерЗаписи = РегистрыСведений.Scan_OrderIntake.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период				= НовоеЗначение;
	МенеджерЗаписи.ЗаказНаЗавод 		= КлючЗаписи.ЗаказНаЗавод;
	МенеджерЗаписи.ВидДаты				= ВидДаты;
	МенеджерЗаписи.ИспользоватьВОтчетах = Истина;
	МенеджерЗаписи.Пользователь 		= Пользователи.ТекущийПользователь();
	МенеджерЗаписи.ДатаКорректировки	= ТекущаяДатаСеанса();
	
	Попытка
		МенеджерЗаписи.Записать();
		Возврат Истина; //rarus vikhle 25.03.2021 mt 17479
	Исключение
		ВывестиСообщениеПол(НСтр("ru = 'Ошибка записи в регистр Order Intake для заказа <%1>. Ошибка: %2'"),,,,, МенеджерЗаписи.ЗаказНаЗавод, ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;
	
	//rarus vikhle 25.03.2021 mt 17479 +++
	//Если КлючЗаписи.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода
	//	ИЛИ КлючЗаписи.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты Тогда //rarus vikhle 24.03.2021 mt 17479
	//	
	//	Если КлючЗаписи.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода Тогда 
	//		ПроверяемыйВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты; 
	//	ИначеЕсли КлючЗаписи.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты Тогда 
	//		ПроверяемыйВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода;	
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	Scan_OrderIntakeСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод
	//	               |ИЗ
	//	               |	РегистрСведений.Scan_OrderIntake.СрезПоследних(
	//	               |			,
	//	               |			ВидДаты = &ВидДаты
	//	               |				И ЗаказНаЗавод = &ЗаказНаЗавод) КАК Scan_OrderIntakeСрезПоследних";
	//	
	//	//Запрос.УстановитьПараметр("Период",КонецДня(НовоеЗначение));//rarus vikhle 24.03.2021 mt 17479
	//	Запрос.УстановитьПараметр("ЗаказНаЗавод",КлючЗаписи.ЗаказНаЗавод);
	//	Запрос.УстановитьПараметр("ВидДаты",ПроверяемыйВидДаты);
	//		
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		МенеджерЗаписи = РегистрыСведений.Scan_OrderIntake.СоздатьМенеджерЗаписи();
	//		МенеджерЗаписи.Период				= НовоеЗначение;
	//		МенеджерЗаписи.ЗаказНаЗавод 		= КлючЗаписи.ЗаказНаЗавод;
	//		МенеджерЗаписи.ВидДаты				= Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake;
	//		МенеджерЗаписи.Прочитать();
	//		Если НЕ МенеджерЗаписи.Выбран() Тогда
	//			МенеджерЗаписи.Период				= НовоеЗначение;
	//			МенеджерЗаписи.ЗаказНаЗавод 		= КлючЗаписи.ЗаказНаЗавод;
	//			МенеджерЗаписи.ВидДаты				= Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake;
	//			МенеджерЗаписи.ИспользоватьВОтчетах = Истина;
	//			МенеджерЗаписи.Пользователь 		= Пользователи.ТекущийПользователь();
	//			МенеджерЗаписи.ДатаКорректировки	= ТекущаяДатаСеанса();
	//			МенеджерЗаписи.Записать();
	//			ВывестиСообщениеПол(Нстр("ru = 'Добавлена запись с видом даты Order Intake по заказу на завод %1'"),,,,,КлючЗаписи.ЗаказНаЗавод);
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЕсли;
	//Возврат Истина;
	//rarus vikhle 25.03.2021 mt 17479 ---
	
КонецФункции	
//rarus vikhle 21.03.2021 mt 17479 ---

// Определяет необходимость добавления записи с видом даты Order Intake и добавляет ее
Процедура СоздатьЗаписьПоOI(МенеджерЗаписи) Экспорт 
	
	//rarus vikhle 08.09.2021 mt 18212 +++
	//rarus vikhle 07.09.2021 mt 18212 +++
	//Если НЕ РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ЭтоЗаказFirm(МенеджерЗаписи.ЗаказНаЗавод) Тогда
	//	ВывестиСообщениеПол(Нстр("ru = 'У заказа %1 тип заказа отличается от Firm. Запись не добавлена в регистр Order Intake.'"),,,,,
	//						МенеджерЗаписи.ЗаказНаЗавод);
	//	Возврат;
	//КонецЕсли;	
	//rarus vikhle 07.09.2021 mt 18212 ---
	//rarus vikhle 08.09.2021 mt 18212 ---
	
	//rarus vikhle 26.03.2021 mt 17479 +++
	Если МенеджерЗаписи.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода Тогда 
		ПроверяемыйВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты; 
	ИначеЕсли МенеджерЗаписи.ВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ВнесениеОплаты Тогда
		ПроверяемыйВидДаты = Перечисления.Scan_ДатыДляФормированияОтчетаOI.ПодтверждениеЗавода;	
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Scan_OrderIntakeСрезПоследнихПроверямаяДата.ЗаказНаЗавод КАК ЗаказНаЗавод,
	               |	Scan_OrderIntakeСрезПоследнихOrderIntake.ЗаказНаЗавод КАК ЗаказНаЗаводOrderIntake,
	               |	Scan_OrderIntakeСрезПоследнихРасторжение.ЗаказНаЗавод КАК ЗаказНаЗаводРасторжение,
	               |	Scan_OrderIntakeСрезПоследнихРасторжение.Период КАК ПериодРасторжения,
	               |	Scan_OrderIntakeСрезПоследнихOrderIntake.Период КАК ПериодOrderIntake,
	               |	Scan_OrderIntakeСрезПоследнихПроверямаяДата.Период КАК ПериодПроверяемаяДата
	               |ИЗ
	               |	РегистрСведений.Scan_OrderIntake.СрезПоследних(
	               |			,
	               |			ВидДаты = &ВидДаты
	               |				И ЗаказНаЗавод = &ЗаказНаЗавод) КАК Scan_OrderIntakeСрезПоследнихПроверямаяДата
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_OrderIntake.СрезПоследних(
	               |				,
	               |				ВидДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake)
	               |					И ЗаказНаЗавод = &ЗаказНаЗавод) КАК Scan_OrderIntakeСрезПоследнихOrderIntake
	               |		ПО Scan_OrderIntakeСрезПоследнихПроверямаяДата.ЗаказНаЗавод = Scan_OrderIntakeСрезПоследнихOrderIntake.ЗаказНаЗавод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_OrderIntake.СрезПоследних(
	               |				,
	               |				ВидДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ДатыДляФормированияОтчетаOI.ДатаРасторжения)
	               |					И ЗаказНаЗавод = &ЗаказНаЗавод) КАК Scan_OrderIntakeСрезПоследнихРасторжение
	               |		ПО Scan_OrderIntakeСрезПоследнихПроверямаяДата.ЗаказНаЗавод = Scan_OrderIntakeСрезПоследнихРасторжение.ЗаказНаЗавод";
	
	Запрос.УстановитьПараметр("ЗаказНаЗавод",МенеджерЗаписи.ЗаказНаЗавод);
	Запрос.УстановитьПараметр("ВидДаты",ПроверяемыйВидДаты);
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Выборка.ЗаказНаЗаводOrderIntake) //Есть проверяемая дата, нет OI  
			ИЛИ (ЗначениеЗаполнено(Выборка.ЗаказНаЗаводРасторжение) И Выборка.ПериодOrderIntake <= Выборка.ПериодРасторжения) Тогда  //Есть проверяемая дата, есть OI, дата расторжения позже OI			
			нЗапись = РегистрыСведений.Scan_OrderIntake.СоздатьМенеджерЗаписи();
			нЗапись.Период				= МенеджерЗаписи.Период;
			нЗапись.ЗаказНаЗавод 		= МенеджерЗаписи.ЗаказНаЗавод;
			нЗапись.ВидДаты				= Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake;
			нЗапись.Прочитать();
			Если НЕ нЗапись.Выбран() Тогда
				нЗапись.Период				= МенеджерЗаписи.Период;
				нЗапись.ЗаказНаЗавод 		= МенеджерЗаписи.ЗаказНаЗавод;
				нЗапись.ВидДаты				= Перечисления.Scan_ДатыДляФормированияОтчетаOI.ДатаOrderIntake;
				нЗапись.ИспользоватьВОтчетах = Истина;
				нЗапись.Пользователь 		= Пользователи.ТекущийПользователь();
				нЗапись.Записать();
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	//rarus vikhle 26.03.2021 mt 17479 ---
КонецПроцедуры	

// Восстановление записей по заказу
Процедура ВосстановитьЗаписиПоЗаказу(ЗаказНаЗавод) Экспорт //rarus vikhle 05.09.2021 mt 18212 +++ //rarus vikhle 13.09.2021 АПК поменял на процедуру
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Продукт,
	               |	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод КАК ЗаказНаЗавод
	               |ПОМЕСТИТЬ ЗаказПродукт
	               |ИЗ
	               |	РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
	               |ГДЕ
	               |	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = &ЗаказНаЗавод
	               |
				   //rarus vikhle 10.09.2021 m 18212 +++
				   //|ИНДЕКСИРОВАТЬ ПО
				   //|	Продукт,
				   //|	ЗаказНаЗавод
				   //rarus vikhle 10.09.2021 m 18212 ---
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке КАК Заявка,
	               |	ВЫБОР
	               |		КОГДА Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке ЕСТЬ NULL
	               |				ИЛИ Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке = ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
	               |			ТОГДА ЗаказПродукт.Продукт.СОП
	               |		ИНАЧЕ Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Договор
	               |	КОНЕЦ КАК Договор,
	               |	ВЫБОР
	               |		КОГДА Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке ЕСТЬ NULL
	               |				ИЛИ Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке = ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ЗаказПродукт.Продукт.СОП.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
	               |						ТОГДА ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту)
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
	               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту)
	               |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВидДатыПродажи,
	               |	ЗаказПродукт.Продукт КАК Продукт,
	               |	ЗаказПродукт.ЗаказНаЗавод КАК ЗаказНаЗавод
	               |ПОМЕСТИТЬ ДанныеПоСОП
	               |ИЗ
	               |	ЗаказПродукт КАК ЗаказПродукт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних(
	               |				,
	               |				Изделие В
	               |					(ВЫБРАТЬ
	               |						ЗаказПродукт.Продукт КАК Продукт
	               |					ИЗ
	               |						ЗаказПродукт КАК ЗаказПродукт)) КАК Scan_СоставСоглашенийОПоставкеСрезПоследних
	               |		ПО ЗаказПродукт.Продукт = Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие
	               |
				   //rarus vikhle 10.09.2021 m 18212 +++
				   //|ИНДЕКСИРОВАТЬ ПО
				   //|	Договор
				   //rarus vikhle 10.09.2021 m 18212 ---
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Scan_ИсторияИзмененияДанныхПоСОПСрезПервых.Значение КАК Перечисление.Scan_СтатусыОплатПоСОП) КАК СтатусОплаты,
	               |	Scan_ИсторияИзмененияДанныхПоСОПСрезПервых.Период КАК ДатаВнесенияОплаты,
	               |	Scan_ИсторияИзмененияДанныхПоСОПСрезПервых.Договор КАК Договор,
	               |	ДанныеПоСОП.ЗаказНаЗавод КАК ЗаказНаЗавод
	               |ПОМЕСТИТЬ ВнесениеОплаты
	               |ИЗ
	               |	ДанныеПоСОП КАК ДанныеПоСОП
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ИсторияИзмененияДанныхПоСОП.СрезПервых(
	               |				,
	               |				ВидЗначения = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоСОП.СтатусОплаты)
	               |					И Договор В
	               |						(ВЫБРАТЬ
	               |							ДанныеПоСОП.Договор КАК Договор
	               |						ИЗ
	               |							ДанныеПоСОП КАК ДанныеПоСОП)
	               |					И Значение В (&СтатусыОплачено)) КАК Scan_ИсторияИзмененияДанныхПоСОПСрезПервых
	               |		ПО ДанныеПоСОП.Договор = Scan_ИсторияИзмененияДанныхПоСОПСрезПервых.Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Scan_ХарактеристикиЗаказовНаЗаводСрезПервых.Период КАК ДатаУстановкиСтатусаЗаказа,
	               |	ВЫРАЗИТЬ(Scan_ХарактеристикиЗаказовНаЗаводСрезПервых.Значение КАК Справочник.Scan_ЗаводскиеСтатусыЗаказаНаЗавод) КАК СтатусЗаказа,
	               |	Scan_ХарактеристикиЗаказовНаЗаводСрезПервых.Заказ КАК Заказ
	               |ПОМЕСТИТЬ ПодтверждениеЗаводом
	               |ИЗ
	               |	РегистрСведений.Scan_ХарактеристикиЗаказовНаЗавод.СрезПервых(
	               |			,
	               |			Заказ = &ЗаказНаЗавод
	               |				И Реквизит = ЗНАЧЕНИЕ(Перечисление.Scan_ДополнительнаяИнформацияПоЗаказамНаЗавод.ЗаводскойСтатусЗаказа)
	               |				И ВЫРАЗИТЬ(Значение КАК Справочник.Scan_ЗаводскиеСтатусыЗаказаНаЗавод).СтатусCOW > 30) КАК Scan_ХарактеристикиЗаказовНаЗаводСрезПервых
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЕСТЬNULL(Scan_КлючевыеДатыПроцессов.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК Период,
	               |	ЗаказПродукт.ЗаказНаЗавод КАК ЗаказНаЗавод
	               |ПОМЕСТИТЬ ДатаПоследнейОчисткиДатыПродажи
	               |ИЗ
	               |	ЗаказПродукт КАК ЗаказПродукт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
	               |		ПО ЗаказПродукт.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессов.Объект
	               |			И (Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты В
	               |				(ВЫБРАТЬ
	               |					ДанныеПоСОП.ВидДатыПродажи КАК ВидДатыПродажи
	               |				ИЗ
	               |					ДанныеПоСОП КАК ДанныеПоСОП))
	               |			И (Scan_КлючевыеДатыПроцессов.ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод))
	               |			И (Scan_КлючевыеДатыПроцессов.Объект = &ЗаказНаЗавод)
	               |			И (Scan_КлючевыеДатыПроцессов.Значение = ДАТАВРЕМЯ(1, 1, 1))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПродукт.ЗаказНаЗавод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Scan_КлючевыеДатыПроцессов.Значение КАК ДатаПродажи,
	               |	Scan_КлючевыеДатыПроцессов.Период КАК ДатаУстановкиДатыПродажи,
	               |	Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты КАК ВидКлючевойДаты,
	               |	Scan_КлючевыеДатыПроцессов.ОбъектКлючевойДаты КАК ОбъектКлючевойДаты,
	               |	Scan_КлючевыеДатыПроцессов.Объект КАК Объект
	               |ПОМЕСТИТЬ ДатаОтгрузки
	               |ИЗ
	               |	ДатаПоследнейОчисткиДатыПродажи КАК ДатаПоследнейОчисткиДатыПродажи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
	               |		ПО (Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты В
	               |				(ВЫБРАТЬ
	               |					ДанныеПоСОП.ВидДатыПродажи КАК ВидДатыПродажи
	               |				ИЗ
	               |					ДанныеПоСОП КАК ДанныеПоСОП))
	               |			И (Scan_КлючевыеДатыПроцессов.Объект = &ЗаказНаЗавод)
	               |			И (Scan_КлючевыеДатыПроцессов.ОбъектКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_ОбъектыКлючевыхДат.ЗаказНаЗавод))
	               |			И ДатаПоследнейОчисткиДатыПродажи.ЗаказНаЗавод = Scan_КлючевыеДатыПроцессов.Объект
	               |ГДЕ
	               |	Scan_КлючевыеДатыПроцессов.Период > ДатаПоследнейОчисткиДатыПродажи.Период
	               |	И НЕ Scan_КлючевыеДатыПроцессов.Значение = ДАТАВРЕМЯ(1, 1, 1)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Scan_КлючевыеДатыПроцессов.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеПоСОП.ЗаказНаЗавод КАК Заказ,
	               |	ПодтверждениеЗаводом.ДатаУстановкиСтатусаЗаказа КАК Период,
	               |	ПодтверждениеЗаводом.СтатусЗаказа КАК Значение
	               |ИЗ
	               |	ДанныеПоСОП КАК ДанныеПоСОП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПодтверждениеЗаводом КАК ПодтверждениеЗаводом
	               |		ПО ДанныеПоСОП.ЗаказНаЗавод = ПодтверждениеЗаводом.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВнесениеОплаты.СтатусОплаты КАК Значение,
	               |	ВнесениеОплаты.ДатаВнесенияОплаты КАК Период,
	               |	ВнесениеОплаты.Договор КАК Договор
	               |ИЗ
	               |	ДанныеПоСОП КАК ДанныеПоСОП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнесениеОплаты КАК ВнесениеОплаты
	               |		ПО ДанныеПоСОП.ЗаказНаЗавод = ВнесениеОплаты.ЗаказНаЗавод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеПоСОП.ЗаказНаЗавод КАК Объект,
	               |	ДатаОтгрузки.ДатаПродажи КАК Значение,
	               |	ДатаОтгрузки.ВидКлючевойДаты КАК ВидКлючевойДаты,
	               |	ДатаОтгрузки.ОбъектКлючевойДаты КАК ОбъектКлючевойДаты
	               |ИЗ
	               |	ДанныеПоСОП КАК ДанныеПоСОП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДатаОтгрузки КАК ДатаОтгрузки
	               |		ПО ДанныеПоСОП.ЗаказНаЗавод = ДатаОтгрузки.Объект";
	
	СтатусыОплачено = Новый Массив;
	СтатусыОплачено.Добавить(Перечисления.Scan_СтатусыОплатПоСОП.Оплачено);
	СтатусыОплачено.Добавить(Перечисления.Scan_СтатусыОплатПоСОП.ОплаченоЧастично);	
	СтатусыОплачено.Добавить(Перечисления.Scan_СтатусыОплатПоСОП.ПредоплатаПолученаНесоответствуетГрафику);	
	СтатусыОплачено.Добавить(Перечисления.Scan_СтатусыОплатПоСОП.ПредоплатаПолученаСоответствуетГрафику);
	СтатусыОплачено.Добавить(Перечисления.Scan_СтатусыОплатПоСОП.ПредоплатаВнесенаПолностью);
	СтатусыОплачено.Добавить(Перечисления.Scan_СтатусыОплатПоСОП.ОплаченоПолностью);
	
	ТипыЗаказаFirm = Перечисления.Scan_ТипыЗаказовНаЗавод.ТипыЗаказаFirm();
	
	Запрос.УстановитьПараметр("ЗаказНаЗавод", 	 ЗаказНаЗавод);
	Запрос.УстановитьПараметр("СтатусыОплачено", СтатусыОплачено);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	ТЗПодтверждениеЗавода	= МассивРезультатов[6].Выгрузить();
	ТЗВнесениеОплаты		= МассивРезультатов[7].Выгрузить();
	ТЗДатаОтгрузки			= МассивРезультатов[8].Выгрузить();
	
	// Добавление записей с видом "ПодтверждениеЗавода"
	Если ТЗПодтверждениеЗавода.Количество() > 0 
		И ЗначениеЗаполнено(ТЗПодтверждениеЗавода[0].Значение) Тогда
		// rarus agar 11.02.2022 17739 ++
		//РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ОбработатьДанныеДляOrderIntake(ТЗПодтверждениеЗавода, ТЗПодтверждениеЗавода[0].Период);
		РегистрыСведений.Scan_ХарактеристикиЗаказовНаЗавод.ОбработатьДанныеДляOrderIntake(ТЗПодтверждениеЗавода, ТЗПодтверждениеЗавода[0].Период, Истина);
		// rarus agar 10.01.2022 17739 --
	КонецЕсли;
	
	// Добавление записей с видом "ВнесениеОплаты" 
	Если ТЗВнесениеОплаты.Количество() > 0 
		И ЗначениеЗаполнено(ТЗВнесениеОплаты[0].Значение) Тогда
		// rarus agar 11.02.2022 17739 ++
		//РегистрыСведений.Scan_ИсторияИзмененияДанныхПоСОП.ОбработатьДанныеДляOrderIntake(ТЗВнесениеОплаты, ТЗВнесениеОплаты[0].Период);
		РегистрыСведений.Scan_ИсторияИзмененияДанныхПоСОП.ОбработатьДанныеДляOrderIntake(ТЗВнесениеОплаты, ТЗВнесениеОплаты[0].Период, Истина);
		// rarus agar 11.02.2022 17739 --
	КонецЕсли;	
	
	// Добавление записей с видом "ДатаОтгрузки"
	Если ТЗДатаОтгрузки.Количество() > 0 
		И ЗначениеЗаполнено(ТЗДатаОтгрузки[0].Значение) Тогда
		// rarus agar 11.02.2022 17739 ++
		//РегистрыСведений.Scan_КлючевыеДатыПроцессов.ОбработатьДанныеДляOrderIntake(ТЗДатаОтгрузки);
		РегистрыСведений.Scan_КлючевыеДатыПроцессов.ОбработатьДанныеДляOrderIntake(ТЗДатаОтгрузки, Истина);
		// rarus agar 11.02.2022 17739 --
	КонецЕсли;
			
		
КонецПроцедуры //rarus vikhle 05.09.2021 mt 18212

// Удаление записей по заказу
Процедура УдалитьЗаписиПоЗаказу(ЗаказНаЗавод) Экспорт //rarus vikhle 07.09.2021 mt 18212 +++ 
	
	Если НЕ ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.Scan_OrderIntake.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказНаЗавод.Установить(ЗаказНаЗавод);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Выбран() Тогда
		НаборЗаписей.Очистить();
		
		Попытка
		НаборЗаписей.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(Нстр("ru = 'Произошла ошибка при удалении записей по заказу %1 в регистре Order Intake по причине:'"), ЗаказНаЗавод); 
			ТекстОшибки = ТекстОшибки + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВывестиСообщениеПол(ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(Нстр("ru = 'Удаление записи по заказу в регистре Order Intake'", ОбщегоНазначения.КодОсновногоЯзыка()), //rarus vikhle 13.09.2021 АПК + код языка
									УровеньЖурналаРегистрации.Ошибка, 
									Метаданные.РегистрыСведений.Scan_OrderIntake,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
	КонецЕсли;	
		
КонецПроцедуры //rarus vikhle 07.09.2021 mt 18212	