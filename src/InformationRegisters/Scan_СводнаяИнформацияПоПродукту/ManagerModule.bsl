//rarus pechek 22.04.2020 mantis 15943 +++
//rarus bonmak 09.08.2021 16834 ++
//Функция ЕстьЗаписьЗаказНаЗавод(ЗаказНаЗавод)
//	ЕстьЗапись = Ложь;
//	Если ЗначениеЗаполнено(ЗаказНаЗавод) Тогда
//		ТекстЗапроса = "ВЫБРАТЬ
//		               |	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод КАК ЗаказНаЗавод
//		               |ИЗ
//		               |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
//		               |ГДЕ
//		               |	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод = &ЗаказНаЗавод";
//		Запрос = Новый Запрос(ТекстЗапроса);
//		Запрос.УстановитьПараметр("ЗаказНаЗавод",ЗаказНаЗавод);
//		РезультатЗапроса = Запрос.Выполнить();
//		ЕстьЗапись = Не РезультатЗапроса.Пустой();
//	КонецЕсли;
//	Возврат ЕстьЗапись;
//КонецФункции 
////rarus pechek 22.04.2020 mantis 15943 ---

////rarus pechek 22.04.2020 mantis 15943 +++
//Функция ЕстьЗаписьПродукт(Продукт)
//	ЕстьЗапись = Ложь;
//	Если ЗначениеЗаполнено(Продукт) Тогда
//		ТекстЗапроса = "ВЫБРАТЬ
//		               |	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Продукт
//		               |ИЗ
//		               |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
//		               |ГДЕ
//		               |	Scan_СводнаяИнформацияПоПродукту.Продукт = &Продукт";
//		Запрос = Новый Запрос(ТекстЗапроса);
//		Запрос.УстановитьПараметр("Продукт",Продукт);
//		РезультатЗапроса = Запрос.Выполнить();
//		ЕстьЗапись = Не РезультатЗапроса.Пустой();
//	КонецЕсли;
//	Возврат ЕстьЗапись;
//КонецФункции
////rarus pechek 22.04.2020 mantis 15943 ---

//Функция ПолучитьЗаписьПоСводномуРегистру(ЗаказНаЗавод, Изделие)
//	ТекстЗапроса =  "ВЫБРАТЬ
//	                |	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Продукт,
//	                |	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод КАК ЗаказНаЗавод,
//					//rarus BProg_Dekin 20.05.2020 mantis 0015999 ++ Вместо статуса заказа используется статус продукта
//					//|	Scan_СводнаяИнформацияПоПродукту.СтатусЗаказаЛокальный КАК СтатусЗаказаЛокальный,
//	                |	Scan_СводнаяИнформацияПоПродукту.ЛокальныйСтатусПродукта КАК ЛокальныйСтатусПродукта,
//					//rarus BProg_Dekin 20.05.2020 mantis 0015999 --
//					|	Scan_СводнаяИнформацияПоПродукту.ТипПродукта КАК ТипПродукта,
//	                |	Scan_СводнаяИнформацияПоПродукту.DCD КАК DCD,
//	                |	Scan_СводнаяИнформацияПоПродукту.DDD КАК DDD,
//	                |	Scan_СводнаяИнформацияПоПродукту.PODOD КАК PODOD,
//	                |	Scan_СводнаяИнформацияПоПродукту.SDDate КАК SDDate,
//	                |	Scan_СводнаяИнформацияПоПродукту.PDD КАК PDD,
//	                |	Scan_СводнаяИнформацияПоПродукту.EDD КАК EDD,
//	                |	Scan_СводнаяИнформацияПоПродукту.CRD КАК CRD,
//	                |	Scan_СводнаяИнформацияПоПродукту.FinishDate КАК FinishDate,
//	                |	Scan_СводнаяИнформацияПоПродукту.CDD КАК CDD,
//	                |	Scan_СводнаяИнформацияПоПродукту.CDD2 КАК CDD2,
//	                |	Scan_СводнаяИнформацияПоПродукту.CDDПоставщик КАК CDDПоставщик,
//	                |	Scan_СводнаяИнформацияПоПродукту.CDDX КАК CDDX,
//	                |	Scan_СводнаяИнформацияПоПродукту.ПортСПБ КАК ПортСПБ,
//	                |	Scan_СводнаяИнформацияПоПродукту.ADD КАК ADD,
//	                |	Scan_СводнаяИнформацияПоПродукту.ETA КАК ETA,
//	                |	Scan_СводнаяИнформацияПоПродукту.ADDLBB КАК ADDLBB,
//	                |	Scan_СводнаяИнформацияПоПродукту.AN КАК AN,
//	                |	Scan_СводнаяИнформацияПоПродукту.PAD КАК PAD,
//	                |	Scan_СводнаяИнформацияПоПродукту.AAD КАК AAD,
//	                |	Scan_СводнаяИнформацияПоПродукту.PTSD КАК PTSD,
//	                |	Scan_СводнаяИнформацияПоПродукту.RFT КАК RFT,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия КАК ДатаПродажиИзделия,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПередачиИзделияДилеру КАК ДатаПередачиИзделияДилеру,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту КАК ДатаПродажиКлиенту,
//	                |	Scan_СводнаяИнформацияПоПродукту.SoW КАК SoW,
//	                |	Scan_СводнаяИнформацияПоПродукту.WED КАК WED,
//	                |	Scan_СводнаяИнформацияПоПродукту.ПродуктВАрхиве КАК ПродуктВАрхиве,
//	                |	Scan_СводнаяИнформацияПоПродукту.DD КАК DD,
//	                |	Scan_СводнаяИнформацияПоПродукту.DD2 КАК DD2,
//	                |	Scan_СводнаяИнформацияПоПродукту.DDS КАК DDS,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаИнвойса КАК ДатаИнвойса,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПокупкиБУИзделия КАК ДатаПокупкиБУИзделия,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУДилеру КАК ДатаПродажиБУДилеру,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУКлиенту КАК ДатаПродажиБУКлиенту,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаОтгрузкиСЗаводаПриEXW КАК ДатаОтгрузкиСЗаводаПриEXW,
//	                |	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
//	                |	Scan_СводнаяИнформацияПоПродукту.RDB КАК RDB,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИнвойса1С КАК ДатаПоступленияИнвойса1С,
//					//rarus bonmak 18.05.2020 14375 ++
//					|	Scan_СводнаяИнформацияПоПродукту.ДатаПередачиБУИзделияДилеру КАК ДатаПередачиБУИзделияДилеру,
//					|	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИзделияНаСклад КАК ДатаПоступленияИзделияНаСклад,
//					|	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИзделияБУНаСклад КАК ДатаПоступленияИзделияБУНаСклад,
//					//rarus bonmak 18.05.2020 14375 --
//					//rarus bonmak 24.12.2020 16653 ++
//					|	Scan_СводнаяИнформацияПоПродукту.ДатаСписания КАК ДатаСписания,
//					//rarus bonmak 24.12.2020 16653 --
//	                |	Scan_СводнаяИнформацияПоПродукту.КодАдресаДоставки КАК КодАдресаДоставки,
//	                |	Scan_СводнаяИнформацияПоПродукту.MarketChange КАК MarketChange,
//	                |	Scan_СводнаяИнформацияПоПродукту.Клиент КАК Клиент,
//	                |	Scan_СводнаяИнформацияПоПродукту.PartPeriod КАК PartPeriod,
//	                |	Scan_СводнаяИнформацияПоПродукту.КомплектностьПоставки КАК КомплектностьПоставки,
//	                |	Scan_СводнаяИнформацияПоПродукту.SOrderНомер КАК SOrderНомер,
//	                |	Scan_СводнаяИнформацияПоПродукту.FFUНомер КАК FFUНомер,
//	                |	Scan_СводнаяИнформацияПоПродукту.Вес КАК Вес,
//	                |	Scan_СводнаяИнформацияПоПродукту.Длина КАК Длина,
//	                |	Scan_СводнаяИнформацияПоПродукту.Высота КАК Высота,
//	                |	Scan_СводнаяИнформацияПоПродукту.Ширина КАК Ширина,
//	                |	Scan_СводнаяИнформацияПоПродукту.ГосударственныйНомер КАК ГосударственныйНомер,
//	                |	Scan_СводнаяИнформацияПоПродукту.ГосударственныйНомерДатаПолучения КАК ГосударственныйНомерДатаПолучения,
//	                |	Scan_СводнаяИнформацияПоПродукту.НомерБортовогоУстройстваПлатон КАК НомерБортовогоУстройстваПлатон,
//	                |	Scan_СводнаяИнформацияПоПродукту.ПаромнаяЛиния КАК ПаромнаяЛиния,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаОбновленияЗаписи КАК ДатаОбновленияЗаписи
//	                |ИЗ
//	                |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
//	                |ГДЕ
//	                |	Scan_СводнаяИнформацияПоПродукту.Продукт = &Продукт
//	                |	И Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод = ЗНАЧЕНИЕ(Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка)
//	                |
//	                |ОБЪЕДИНИТЬ ВСЕ
//	                |
//	                |ВЫБРАТЬ
//	                |	Scan_СводнаяИнформацияПоПродукту.Продукт,
//	                |	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод,
//					//rarus BProg_Dekin 20.05.2020 mantis 0015999 ++ Вместо статуса заказа используется статус продукта
//					//|	Scan_СводнаяИнформацияПоПродукту.СтатусЗаказаЛокальный,
//	                |	Scan_СводнаяИнформацияПоПродукту.ЛокальныйСтатусПродукта,
//					//rarus BProg_Dekin 20.05.2020 mantis 0015999 --
//	                |	Scan_СводнаяИнформацияПоПродукту.ТипПродукта,
//	                |	Scan_СводнаяИнформацияПоПродукту.DCD,
//	                |	Scan_СводнаяИнформацияПоПродукту.DDD,
//	                |	Scan_СводнаяИнформацияПоПродукту.PODOD,
//	                |	Scan_СводнаяИнформацияПоПродукту.SDDate,
//	                |	Scan_СводнаяИнформацияПоПродукту.PDD,
//	                |	Scan_СводнаяИнформацияПоПродукту.EDD,
//	                |	Scan_СводнаяИнформацияПоПродукту.CRD,
//	                |	Scan_СводнаяИнформацияПоПродукту.FinishDate,
//	                |	Scan_СводнаяИнформацияПоПродукту.CDD,
//	                |	Scan_СводнаяИнформацияПоПродукту.CDD2,
//	                |	Scan_СводнаяИнформацияПоПродукту.CDDПоставщик,
//	                |	Scan_СводнаяИнформацияПоПродукту.CDDX,
//	                |	Scan_СводнаяИнформацияПоПродукту.ПортСПБ,
//	                |	Scan_СводнаяИнформацияПоПродукту.ADD,
//	                |	Scan_СводнаяИнформацияПоПродукту.ETA,
//	                |	Scan_СводнаяИнформацияПоПродукту.ADDLBB,
//	                |	Scan_СводнаяИнформацияПоПродукту.AN,
//	                |	Scan_СводнаяИнформацияПоПродукту.PAD,
//	                |	Scan_СводнаяИнформацияПоПродукту.AAD,
//	                |	Scan_СводнаяИнформацияПоПродукту.PTSD,
//	                |	Scan_СводнаяИнформацияПоПродукту.RFT,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПередачиИзделияДилеру,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту,
//	                |	Scan_СводнаяИнформацияПоПродукту.SoW,
//	                |	Scan_СводнаяИнформацияПоПродукту.WED,
//	                |	Scan_СводнаяИнформацияПоПродукту.ПродуктВАрхиве,
//	                |	Scan_СводнаяИнформацияПоПродукту.DD,
//	                |	Scan_СводнаяИнформацияПоПродукту.DD2,
//	                |	Scan_СводнаяИнформацияПоПродукту.DDS,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаИнвойса,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПокупкиБУИзделия,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУДилеру,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиБУКлиенту,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаОтгрузкиСЗаводаПриEXW,
//	                |	Scan_СводнаяИнформацияПоПродукту.БроньДилера,
//	                |	Scan_СводнаяИнформацияПоПродукту.RDB,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИнвойса1С,
//					//rarus bonmak 18.05.2020 14375 ++
//					|	Scan_СводнаяИнформацияПоПродукту.ДатаПередачиБУИзделияДилеру,
//					|	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИзделияНаСклад,
//					|	Scan_СводнаяИнформацияПоПродукту.ДатаПоступленияИзделияБУНаСклад,
//					//rarus bonmak 18.05.2020 14375 --
//					//rarus bonmak 24.12.2020 16653 ++
//					|	Scan_СводнаяИнформацияПоПродукту.ДатаСписания КАК ДатаСписания,
//					//rarus bonmak 24.12.2020 16653 --
//	                |	Scan_СводнаяИнформацияПоПродукту.КодАдресаДоставки,
//	                |	Scan_СводнаяИнформацияПоПродукту.MarketChange,
//	                |	Scan_СводнаяИнформацияПоПродукту.Клиент,
//	                |	Scan_СводнаяИнформацияПоПродукту.PartPeriod,
//	                |	Scan_СводнаяИнформацияПоПродукту.КомплектностьПоставки,
//	                |	Scan_СводнаяИнформацияПоПродукту.SOrderНомер,
//	                |	Scan_СводнаяИнформацияПоПродукту.FFUНомер,
//	                |	Scan_СводнаяИнформацияПоПродукту.Вес,
//	                |	Scan_СводнаяИнформацияПоПродукту.Длина,
//	                |	Scan_СводнаяИнформацияПоПродукту.Высота,
//	                |	Scan_СводнаяИнформацияПоПродукту.Ширина,
//	                |	Scan_СводнаяИнформацияПоПродукту.ГосударственныйНомер,
//	                |	Scan_СводнаяИнформацияПоПродукту.ГосударственныйНомерДатаПолучения,
//	                |	Scan_СводнаяИнформацияПоПродукту.НомерБортовогоУстройстваПлатон,
//	                |	Scan_СводнаяИнформацияПоПродукту.ПаромнаяЛиния,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаОбновленияЗаписи
//	                |ИЗ
//	                |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
//	                |ГДЕ
//	                |	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод = &ЗаказНаЗавод
//	                |	И Scan_СводнаяИнформацияПоПродукту.Продукт = ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)";
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("ЗаказНаЗавод", ЗаказНаЗавод);
//	Запрос.УстановитьПараметр("Продукт", Изделие);

//	Возврат Запрос.Выполнить().Выгрузить();
//КонецФункции
//rarus bonmak 09.08.2021 16834 --

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

//rarus pechek 20.04.2020 mantis 15943 +++
// rarus tenkam 27.08.2020 mantis 16468 +++
//Процедура ЗаписьЗначенияРегистраСводнаяИнформацияПоПродукту(Изделие,ЗаказНаЗавод = Неопределено,ВидЗначения,Значение) Экспорт
// rarus agar 21.06.2021 17925 ++
//Процедура ЗаписьЗначенияРегистраСводнаяИнформацияПоПродукту(Изделие = Неопределено, ЗаказНаЗавод = Неопределено, ВидЗначения, Значение, Отказ = Ложь) Экспорт
Процедура ЗаписьЗначенияРегистраСводнаяИнформацияПоПродукту(Изделие = Неопределено, ЗаказНаЗавод = Неопределено, ВидЗначения, Значение, Отказ = Ложь, Комментарий = "") Экспорт
// rarus agar 21.06.2021 17925 --
	ИзделиеСсылка = Изделие;
	ЗаказНаЗаводСсылка = ЗаказНаЗавод;	
	ПроверитьДубли = Ложь; //rarus bonmak 16867 26.11.2020
	
	// Изделие будет пустое, только если его нет в базе вообще	
	Если Не ЗначениеЗаполнено(ИзделиеСсылка) Тогда
		ИзделиеСсылка = РегистрыСведений.Scan_ВзаимосвязьИзделийИЗаказов.ПолучитьИзделиеПоЗаказу(ЗаказНаЗаводСсылка);
	КонецЕсли;
	
	// Заказ на завод будет пустой, если его нет в базе, либо его очистили в изделии
	Если Не ЗначениеЗаполнено(ЗаказНаЗаводСсылка) Тогда	
		ЗаказНаЗаводСсылка = ПредопределенноеЗначение("Справочник.Scan_ЗаказыНаЗавод.ПустаяСсылка");
	КонецЕсли;
	
	// Проверим, есть ли в измерениях и ресурсах переданный вид значения (перечисление)
	НазваниеПеречисления = ВидЗначения.Метаданные().Имя;
	ИмяРеквизита = Метаданные.Перечисления[НазваниеПеречисления].ЗначенияПеречисления[Перечисления[НазваниеПеречисления].Индекс(ВидЗначения)].Имя;
	
	ИзмерениеНайдено = Истина;
	Попытка
		Реквизит = Метаданные.РегистрыСведений.Scan_СводнаяИнформацияПоПродукту.Измерения[ИмяРеквизита];
	Исключение
		ИзмерениеНайдено = Ложь;
	КонецПопытки;
	
	РесурсНайден = Истина;    			
	Попытка
		Реквизит = Метаданные.РегистрыСведений.Scan_СводнаяИнформацияПоПродукту.Ресурсы[ИмяРеквизита];
	Исключение
		РесурсНайден = Ложь;
	КонецПопытки;
	
	Если Не РесурсНайден И Не ИзмерениеНайдено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.Scan_СводнаяИнформацияПоПродукту.СоздатьНаборЗаписей();
	
	// Получим запись, которую нужно отредактировать	
	ТаблицаДанныхРегистра = ПолучитьЗаписиРегистраПоИзделиюЗаказу(ИзделиеСсылка,ЗаказНаЗаводСсылка);	
	Если ТаблицаДанныхРегистра.Количество() = 0 Тогда
	// Записей еще нет
		Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда
			НаборЗаписей.Отбор.Продукт.Установить(ИзделиеСсылка);
		Иначе
			НаборЗаписей.Отбор.ЗаказНаЗавод.Установить(ЗаказНаЗаводСсылка);	
		КонецЕсли;	
	Иначе	// Записей максимум две, первую - редактируем, вторую(если есть) - удаляем, предварительно перенести данные из второй
		ПерваяЗапись = ТаблицаДанныхРегистра[0];
		ЗаказНаЗаводСтарый = ПерваяЗапись.ЗаказНаЗавод;
		
		Если ЗначениеЗаполнено(ПерваяЗапись.Продукт) Тогда
			НаборЗаписей.Отбор.Продукт.Установить(ПерваяЗапись.Продукт);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаказНаЗаводСтарый) И ЗаказНаЗаводСтарый = ЗаказНаЗаводСсылка Тогда
			НаборЗаписей.Отбор.ЗаказНаЗавод.Установить(ЗаказНаЗаводСтарый);
		КонецЕсли;
	КонецЕсли;
	НаборЗаписей.Прочитать();                   
	
	Если НаборЗаписей.Количество() = 1 Тогда
		Запись = НаборЗаписей[0];
		// Если значение изменилось, то запишем
		Если Запись[ИмяРеквизита] <> Значение Тогда
			
			Запись.Продукт = ИзделиеСсылка;
			Запись.ЗаказНаЗавод = ЗаказНаЗаводСсылка;
			Запись[ИмяРеквизита] = Значение;
			
			// Обработаем ситуацию, когда заказ на завод очистили - нужно очистить и признаки заказа на завод
			Если НЕ ЗначениеЗаполнено(ЗаказНаЗаводСсылка) И ЗаказНаЗаводСтарый <> ЗаказНаЗаводСсылка Тогда
				ПустаяЗапись = ПолучитьПустуюЗаписьСводнойИнформации();
				ЗаполнитьЗначенияСвойств(Запись,ПустаяЗапись,,"Продукт, ЛокальныйСтатусПродукта, ТипПродукта, SoW, WED, ПродуктВАрхиве, ДатаПокупкиБУИзделия, ДатаПродажиБУДилеру, ДатаПродажиБУКлиенту, Вес, Длина, Высота, Ширина, ГосударственныйНомер, ГосударственныйНомерДатаПолучения, НомерБортовогоУстройстваПлатон, ПаромнаяЛиния, ГодВыпускаПродукта, ДатаВводаДанныхОПробеге, Пробег, ДатаПередачиБУИзделияДилеру, ДатаПоступленияИзделияНаСклад, ДатаПоступленияИзделияБУНаСклад");
			КонецЕсли;
			
			// Обработаем вторую запись (с заказом на завод), объединим записи
			Если ТаблицаДанныхРегистра.Количество() > 1 Тогда
		    	ВтораяЗапись = ТаблицаДанныхРегистра[1];
				// Перенесем признаки заказа на завод в первую запись (исключим признаки изделия)
		        ЗаполнитьЗначенияСвойств(Запись,ВтораяЗапись,,"Продукт, ЛокальныйСтатусПродукта, ТипПродукта, SoW, WED, ПродуктВАрхиве, ДатаПокупкиБУИзделия, ДатаПродажиБУДилеру, ДатаПродажиБУКлиенту, Вес, Длина, Высота, Ширина, ГосударственныйНомер, ГосударственныйНомерДатаПолучения, НомерБортовогоУстройстваПлатон, ПаромнаяЛиния, ГодВыпускаПродукта, ДатаВводаДанныхОПробеге, Пробег, ДатаПередачиБУИзделияДилеру, ДатаПоступленияИзделияНаСклад, ДатаПоступленияИзделияБУНаСклад");
				
				// Удалим запись "пустой продукт - заказ на завод"
				зНаборЗаписей = РегистрыСведений.Scan_СводнаяИнформацияПоПродукту.СоздатьНаборЗаписей();
				зНаборЗаписей.Отбор.ЗаказНаЗавод.Установить(ВтораяЗапись.ЗаказНаЗавод);
				зНаборЗаписей.Записать();
			КонецЕсли;				
			
			Запись.ДатаОбновленияЗаписи = ТекущаяДата();
			// rarus agar 21.06.2021 17925 ++
			Запись.Комментарий = Комментарий;
			// rarus agar 21.06.2021 17925 --
			Попытка
				НаборЗаписей.Записать();
				
				// Обработаем ситуацию, когда заказ на завод очистили или заменили
				Если ЗначениеЗаполнено(ЗаказНаЗаводСтарый) И ЗаказНаЗаводСтарый <> ЗаказНаЗаводСсылка Тогда
					// Добавим запись с открепленным заказом на завод
					зНаборЗаписей = РегистрыСведений.Scan_СводнаяИнформацияПоПродукту.СоздатьНаборЗаписей();
					зНаборЗаписей.Отбор.ЗаказНаЗавод.Установить(ЗаказНаЗаводСтарый);
					нЗапись = зНаборЗаписей.Добавить();
					
					ЗаполнитьЗначенияСвойств(нЗапись,ПерваяЗапись,,"Продукт, ЛокальныйСтатусПродукта, ТипПродукта, SoW, WED, ПродуктВАрхиве, ДатаПокупкиБУИзделия, ДатаПродажиБУДилеру, ДатаПродажиБУКлиенту, Вес, Длина, Высота, Ширина, ГосударственныйНомер, ГосударственныйНомерДатаПолучения, НомерБортовогоУстройстваПлатон, ПаромнаяЛиния, ГодВыпускаПродукта, ДатаВводаДанныхОПробеге, Пробег, ДатаПередачиБУИзделияДилеру, ДатаПоступленияИзделияНаСклад, ДатаПоступленияИзделияБУНаСклад");
					нЗапись.ДатаОбновленияЗаписи = ТекущаяДата();
					зНаборЗаписей.Записать();	
				КонецЕсли;
				ПроверитьДубли = Истина; //rarus bonmak 16867 26.11.2020
			Исключение
				Отказ = Истина;
				СообщениеОбОшибке = "Не удалось изменить запись в регистре сводная информация по продукту, изделие " + ИзделиеСсылка + " Заказ на завод  " + ЗаказНаЗаводСсылка + " имя реквизита " + ИмяРеквизита + " причина ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "РС Сводная информация по продукту");	
			КонецПопытки;
		КонецЕсли;     		
	ИначеЕсли НаборЗаписей.Количество() = 0 Тогда 
		// Записей не было, добавим
		Запись = НаборЗаписей.Добавить();
		Запись.Продукт = ИзделиеСсылка;
		Запись.ЗаказНаЗавод = ЗаказНаЗаводСсылка;
		Запись[ИмяРеквизита] = Значение;
		Запись.ДатаОбновленияЗаписи = ТекущаяДата();
		// rarus agar 21.06.2021 17925 ++
		Запись.Комментарий = Комментарий;
		// rarus agar 21.06.2021 17925 --
		Попытка
			НаборЗаписей.Записать();
			ПроверитьДубли = Истина; //rarus bonmak 16867 26.11.2020
		Исключение
			Отказ = Истина;
			СообщениеОбОшибке = "Не удалось создать запись в регистре сводная информация по продукту, изделие " + ИзделиеСсылка + " Заказ на завод  " + ЗаказНаЗаводСсылка + " имя реквизита " + ИмяРеквизита + " причина ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Scan_ВебСервисы.scЗафиксироватьОшибку(СообщениеОбОшибке, "РС Сводная информация по продукту");	
		КонецПопытки;
	Иначе
		// Нашли дубли
		ЗаписьДублейВРегистр = РегистрыСведений.Scan_Обмен1БДНезагруженныеОбъекты.СоздатьМенеджерЗаписи();
		ЗаписьДублейВРегистр.ВидЗапроса = "Сводная информация по продукту";
		Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда
			ЗаписьДублейВРегистр.IDExternalSystem = ИзделиеСсылка.IDExternalSystem;
			ЗаписьДублейВРегистр.Объект = ИзделиеСсылка; 
		Иначе 
			ЗаписьДублейВРегистр.IDExternalSystem = ЗаказНаЗаводСсылка.IDExternalSystem;
			ЗаписьДублейВРегистр.Объект = ЗаказНаЗаводСсылка;
		КонецЕсли;
		ЗаписьДублейВРегистр.ПричинаОшибки = "Дубли записи по изделию " + ИзделиеСсылка + " и заказу на завод " + ЗаказНаЗаводСсылка;
		Попытка
			ЗаписьДублейВРегистр.Записать();
		Исключение
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если ПроверитьДубли Тогда //rarus bonmak 16867 26.11.2020 добавил условие
		// Проверим, что не создали дублей
		ТаблицаДанныхРегистраПослеЗаписи = ПолучитьЗаписиРегистраПоИзделиюЗаказу(ИзделиеСсылка,ЗаказНаЗаводСсылка);	
		Если ТаблицаДанныхРегистраПослеЗаписи.Количество() > 1 Тогда
			ЗаписьДублейВРегистр = РегистрыСведений.Scan_Обмен1БДНезагруженныеОбъекты.СоздатьМенеджерЗаписи();
			ЗаписьДублейВРегистр.ВидЗапроса = "Сводная информация по продукту";
			Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда
				ЗаписьДублейВРегистр.IDExternalSystem = ИзделиеСсылка.IDExternalSystem;
				ЗаписьДублейВРегистр.Объект = ИзделиеСсылка; 
			Иначе 
				ЗаписьДублейВРегистр.IDExternalSystem = ЗаказНаЗаводСсылка.IDExternalSystem;
				ЗаписьДублейВРегистр.Объект = ЗаказНаЗаводСсылка;
			КонецЕсли;
			ЗаписьДублейВРегистр.ПричинаОшибки = "Дубли записи по изделию " + ИзделиеСсылка + " и заказу на завод " + ЗаказНаЗаводСсылка;
			Попытка
				ЗаписьДублейВРегистр.Записать();
			Исключение
				Отказ = Истина;
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
//rarus pechek 20.04.2020 mantis 15943 ---

Функция ПолучитьЗаписиРегистраПоИзделиюЗаказу(ИзделиеСсылка, ЗаказНаЗаводСсылка)	// rarus tenkam 28.08.2020 mantis 16468 +++
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
		|ГДЕ
		|	(Scan_СводнаяИнформацияПоПродукту.Продукт = ЗНАЧЕНИЕ(Справочник.Scan_Изделия.ПустаяСсылка)
		|				И Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод = &ЗаказНаЗаводСсылка)
		|			ИЛИ (&УсловиеЛожь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Scan_СводнаяИнформацияПоПродукту.Продукт УБЫВ";
	
	Запрос.УстановитьПараметр("ЗаказНаЗаводСсылка", ЗаказНаЗаводСсылка);
	Запрос.УстановитьПараметр("УсловиеЛожь", Ложь);
	
	Если ЗначениеЗаполнено(ИзделиеСсылка) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЛожь", "Scan_СводнаяИнформацияПоПродукту.Продукт = &ИзделиеСсылка");
		Запрос.УстановитьПараметр("ИзделиеСсылка", ИзделиеСсылка);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции	// rarus tenkam 28.08.2020 mantis 16468 ---

Функция ПолучитьПустуюЗаписьСводнойИнформации()		// rarus tenkam 28.08.2020 mantis 16468 +++
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 *
		|ИЗ
		|	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	ТаблицаДанных.Очистить();
	НоваяСтрока = ТаблицаДанных.Добавить();
	Возврат ТаблицаДанных[0];
КонецФункции	// rarus tenkam 28.08.2020 mantis 16468 ---

#КонецОбласти

#КонецЕсли