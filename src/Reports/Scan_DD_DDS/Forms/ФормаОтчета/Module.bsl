// Rarus tenkam 29.06.2022 mantis 18726 АПК + (Стандартные области)
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СхемаКомпоновки = Отчеты.Scan_DD_DDS.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	Scan_СборСтатистики.Scan_ПриОткрытииОтчета(РеквизитФормыВЗначение("Отчет").Метаданные().Синоним); // Rarus tenkam 11.04.2022 mantis 18433 +

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметрыРасшифровки = Новый Структура("Расшифровка", Расшифровка);
	ОписаниеОпвещения = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтаФорма, ДополнительныеПараметрыРасшифровки);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникНастроек);
	
	ОсновноеДействие = ОсновноеДействие(Расшифровка);
	Если ОсновноеДействие = Неопределено Тогда
		ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОпвещения, Расшифровка);
	ИначеЕсли ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда 
		//СтандартнаяОбработка = истина;
	Иначе
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ОсновноеДействие);
		ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОпвещения, Расшифровка, ДоступныеДействия,,истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультирующиеНастройкиРасшифровки(ОписаниеОбработкиРасшифровки)
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникНастроек);
	РезультирующиеНастройкиРасшифровки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	ОтборСтруктура = Новый Структура;
	Для каждого ЭлементОтбора Из РезультирующиеНастройкиРасшифровки.Отбор.Элементы Цикл
		Если ТИПЗнч (ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") и ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно и ЭлементОтбора.Использование = истина Тогда
			Если строка(ЭлементОтбора.ЛевоеЗначение) = "DDFinal.ДатыНачала.НачалоМесяца" Тогда			
				ОтборСтруктура.Вставить("DDFinalMonthly",ЭлементОтбора.ПравоеЗначение);
			Иначе
				ОтборСтруктура.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли; 		
	КонецЦикла; 
	//Меняем настройки
	//СхемаКомпоновки = Отчеты.Scan_DD_DDS.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//Настройки = СхемаКомпоновки.ВариантыНастроек.Найти("Расшифровка");
	//СкопироватьЭлементыНастроекКомпоновкиДанных(Настройки.Настройки.Отбор, РезультирующиеНастройкиРасшифровки.Отбор);
	//СкопироватьЭлементыНастроекКомпоновкиДанных(Настройки.Настройки.ПараметрыДанных, РезультирующиеНастройкиРасшифровки.ПараметрыДанных);
	
	//РезультирующиеНастройкиРасшифровки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, Настройки.Настройки);
	
	Возврат ОтборСтруктура;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеВыбораДействия(ВыбранноеДействие, ПараметрВыбранногоДействия, ДополнительныеПараметры) Экспорт
	
	
	Если ложь и не ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет
		//ИЛИ ВыбранноеДействие = Неопределено
	Тогда
		Возврат;
		
    ИначеЕсли ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(, ПараметрВыбранногоДействия);
		
  	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта", "Расшифровка");

		ОписаниеОбработкиРасшифровки = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ДополнительныеПараметры.Расшифровка, ПараметрВыбранногоДействия);
		
		Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
			ПараметрыФормы.Вставить("Отбор", РезультирующиеНастройкиРасшифровки(ОписаниеОбработкиРасшифровки));			
		Иначе	
			ПараметрыФормы.Вставить("Расшифровка", ОписаниеОбработкиРасшифровки);
		КонецЕсли;	
		
		НастройкиПараметров = ПолучитьНастройкиПараметров();
						
		
		
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", НастройкиПараметров);
		ПараметрыФормы.Вставить("РежимПоНастройкамКомпоновки", истина);
		
		
		
		
		ОткрытьФорму("Отчет.Scan_DD_DDS.Форма.ФормаОтчета", ПараметрыФормы, , Истина);
    КонецЕсли;
 	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиПараметров()
	
		ОтчетОбъект = Отчеты.Scan_DD_DDS.Создать();
		КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Настройки                 = КомпоновщикНастроек.Настройки;
		ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
		ОтборОтчета = Новый Структура;
		Для каждого ЭлементПользовательскоНастройки Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементПользовательскоНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")  Тогда
				ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ЭлементПользовательскоНастройки.Параметр);
				ЭлементНастройки.Значение = ЭлементПользовательскоНастройки.Значение;
				Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
					ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
					Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
						ПользовательскийПараметр.Значение = ЭлементНастройки.Значение;
						ПользовательскийПараметр.Использование = Истина;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементПользовательскоНастройки) = Тип("ОтборКомпоновкиДанных") Тогда	
										
			КонецЕсли;
		КонецЦикла; 
		
		
		
		
		//ПараметрыОтчета = Новый Структура;
		//Для каждого ЭлементОтбора Из МассивПолей Цикл
		//	Если ТипЗнч(ЭлементОтбора) = Тип ("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
		//		Если ТипЗнч(ЭлементОтбора) = Тип ("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
		//			Если ЭлементОтбора.Поле = "DDFinal.ДатыНачала.НачалоМесяца" Тогда			
		//				//НовыйОтбор = ЭлементПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//				//НовыйОтбор.ЛевоеЗначение = "DDFinal";
		//				//НовыйОтбор.ПравоеЗначение = КонецДня(ЭлементОтбора.Значение);
		//				//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		//				//НовыйОтбор.Использование = Истина;
		//				//НовыйОтбор = ЭлементПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//				//НовыйОтбор.ЛевоеЗначение = "DDFinal";
		//				//НовыйОтбор.ПравоеЗначение = НачалоДня(ЭлементОтбора.Значение);
		//				//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		//				//НовыйОтбор.Использование = Истина;
		//				УстановитьЭлементПользовательскогоОтбораСКД(КомпоновщикНастроек, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ЭлементОтбора.Поле, КонецДня(ЭлементОтбора.Значение));
		//				УстановитьЭлементПользовательскогоОтбораСКД(КомпоновщикНастроек, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ЭлементОтбора.Поле, НачалоДня(ЭлементОтбора.Значение));
		//				//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементПриемник, ЭлементОтбора.Поле,НачалоДня(ЭлементОтбора.Значение),ВидСравненияКомпоновкиДанных.БольшеИлиРавно,"Начало",Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,Новый УникальныйИдентификатор);  
		//				//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементПриемник, ЭлементОтбора.Поле,КонецДня(ЭлементОтбора.Значение),ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,"Конец",Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,Новый УникальныйИдентификатор);  
		//				ОтборОтчета.Вставить("DDFinalMonthly",ЭлементОтбора.Значение);
		//			Иначе
		//				ОтборОтчета.Вставить(ЭлементОтбора.Поле,ЭлементОтбора.Значение);
		//				//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементПриемник, ЭлементОтбора.Поле,ЭлементОтбора.Значение,ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,Новый УникальныйИдентификатор);  
		//			КонецЕсли;
		//		КонецЕсли; 			
		//	КонецЕсли;
		//КонецЦикла;
		возврат ПользовательскиеНастройки;
	
КонецФункции
 
&НаСервере
Функция ОсновноеДействие(Расшифровка)
	
	ДанныеРасшифровкиОбъект =  ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровкиОбъект.Элементы.Получить(Расшифровка);
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		ОсновноеДействие = ЭлементРасшифровки.ОсновноеДействие;
	Иначе
		ОсновноеДействие = Неопределено;
	КонецЕсли;
	
	Возврат ОсновноеДействие;
	
КонецФункции

&НаСервере
Процедура СкопироватьЭлементыНастроекКомпоновкиДанных(Приемник, Источник, ОчищатьПриемник = Истина) Экспорт 
    
    СоздаватьПоТипу = ТипЗнч(Источник) <> Тип("УсловноеОформлениеКомпоновкиДанных")
        			И ТипЗнч(Источник) <> Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
        			И ТипЗнч(Источник) <> Тип("ОформляемыеПоляКомпоновкиДанных")
        			И ТипЗнч(Источник) <> Тип("ЗначенияПараметровДанныхКомпоновкиДанных");
    
    ПриемникЭлементов = Приемник.Элементы;
	
	Если ОчищатьПриемник Тогда
        ПриемникЭлементов.Очистить();
    КонецЕсли;
	
	ИсточникЭлементов = Источник.Элементы;
    Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
        
        Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
            Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);                            // Элементы порядка добавляем в начало
            ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
        Иначе
            Если СоздаватьПоТипу Тогда
                ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
            Иначе
                ЭлементПриемник = ПриемникЭлементов.Добавить();
            КонецЕсли;
        КонецЕсли;
        
        ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
        
        // В некоторых коллекциях необходимо заполнить другие коллекции
        Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастроекКомпоновкиДанных(ЭлементПриемник.Поля, 	ЭлементИсточник.Поля);
            СкопироватьЭлементыНастроекКомпоновкиДанных(ЭлементПриемник.Отбор, 	ЭлементИсточник.Отбор);
            ЗаполнитьЭлементыНастроекКд(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
			
		ИначеЕсли ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастроекКомпоновкиДанных(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
        КонецЕсли;
        
        // В некоторых элементах коллекции необходимо заполнить другие коллекции
        Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастроекКомпоновкиДанных(ЭлементПриемник, ЭлементИсточник);
        ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастроекКомпоновкиДанных(ЭлементПриемник, ЭлементИсточник);
        ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастроекКомпоновкиДанных(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
        ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
            ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
            ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
            ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
            ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыНастроекКд(Приемник, Источник, ПервыйУровень = Неопределено)
    
    Если ТипЗнч(Приемник) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
        КоллекцияЗначений = Источник;
    Иначе
        КоллекцияЗначений = Источник.Элементы;
    КонецЕсли;
    
    Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
        Если ПервыйУровень = Неопределено Тогда
            ЭлементПриемник = Приемник.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
        Иначе
            ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
        КонецЕсли;
        Если ЭлементПриемник = Неопределено Тогда
            Продолжить;
        КонецЕсли;
        ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
        Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
            Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
                ЗаполнитьЭлементыНастроекКд(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, Приемник);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

#КонецОбласти

