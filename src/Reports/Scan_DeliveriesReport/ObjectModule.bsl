
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - Сформировать отчет
//
// Параметры:
//  ДокументРезультат	 - ТабличныйДокумент - результат формирования
//
Процедура СформироватьОтчет(ДокументРезультат) Экспорт //rarus pechek 25.02.2020 mantis 15409 +++
	ДокументРезультат.Очистить();

	Если ВариантОтчета = 0 Тогда
		 СформироватьОтчетПолный(ДокументРезультат);
	 ИначеЕсли ВариантОтчета = 1 Тогда
		 СформироватьОтчетНезависимый(ДокументРезультат);
	 Иначе
		 СформироватьОтчетСобственный(ДокументРезультат);		 
	КонецЕсли;
	
КонецПроцедуры //rarus pechek 25.02.2020 mantis 15409 ---

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НеИспользуетсяАПК
////rarus pechek 25.02.2020 mantis 15409 +++
////Общие показатели
//Процедура ЗаполнитьДанныеОбщая(ДанныеОбщ)
//	ДанныеОбщ = Новый ТаблицаЗначений;
//	
//	// rarus tenkam 06.07.2021 mantis 17571 ++
//	//ВТ = Новый ТаблицаЗначений;
//	//ВТ1 = Новый ТаблицаЗначений;
//	//	
//	//ЗаполнитьДанные(ВТ);
//	//ЗаполнитьДанныеСобственный(ВТ1);
//	//
//	//ДанныеОбщ = ВТ.СкопироватьКолонки();
//	//
//	//Для Каждого СтрокаВТ Из ВТ Цикл
//	//	НоваяСтрока = ДанныеОбщ.Добавить();
//	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВТ);
//	//КонецЦикла;
//	//Для Каждого СтрокаВТ Из ВТ1 Цикл
//	//	НоваяСтрока = ДанныеОбщ.Добавить();
//	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВТ);
//	//КонецЦикла;
//	
//	ТЗПоНезависимымДилерам = ПолучитьТЗСДаннымиПоВидуДилера(ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Независимый"));
//	ТЗПоСобственнымДилерам = ПолучитьТЗСДаннымиПоВидуДилера(ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Собственный"));
//	
//	//Объединим таблицы и свернем
//	ДанныеОбщ = ТЗПоНезависимымДилерам.СкопироватьКолонки();
//	Для Каждого СтрокаТЗ Из ТЗПоНезависимымДилерам Цикл
//		НоваяСтрока = ДанныеОбщ.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
//	КонецЦикла;
//	Для Каждого СтрокаТЗ Из ТЗПоСобственнымДилерам Цикл
//		НоваяСтрока = ДанныеОбщ.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
//	КонецЦикла;
//	// rarus tenkam 06.07.2021 mantis 17571 --
//	
//	Для Каждого СтрокаДанныеОбщ Из ДанныеОбщ Цикл
//		Если СтрокаДанныеОбщ.Наименование = "Stock RFD SRU without dlv/booking" Тогда
//			СтрокаДанныеОбщ.Наименование = "Stock RFD SRG without dlv/booking";
//		КонецЕсли;
//		Если СтрокаДанныеОбщ.Наименование = "Stock RFD SSG without dlv/booking" Тогда
//			СтрокаДанныеОбщ.Наименование = "Stock RFD SRG without dlv/booking";
//		КонецЕсли;
//		
//		Если СтрокаДанныеОбщ.Наименование = "Stock RFD SRU Sold  without dlv/booking" Тогда
//			СтрокаДанныеОбщ.Наименование = "Stock RFD SRG Sold  without dlv/booking";
//		КонецЕсли;         		
//	КонецЦикла;
//	
//	СписокКолонок = "";
//	Для Каждого СтрокаКолонка Из ДанныеОбщ.Колонки Цикл
//		Если СтрокаКолонка.Имя = "Наименование"  Тогда
//			Продолжить;
//		КонецЕсли;
//		СписокКолонок = СписокКолонок + СтрокаКолонка.Имя + ","; 
//	КонецЦикла;
//	
//	СписокКолонок = Лев(СписокКолонок,СтрДлина(СписокКолонок) - 1);
//	
//	ДанныеОбщ.Свернуть("Наименование", СписокКолонок);
//	
//КонецПроцедуры
////rarus pechek 25.02.2020 mantis 15409 ---

////rarus pechek 25.02.2020 mantis 15409 +++
////Независимый дилер
//Процедура ЗаполнитьДанные(Данные)
//	Данные = Новый ТаблицаЗначений;
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И КалендарныеГрафики.Год = &ГодПланирования
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования";
//	ТекстЗапроса = "ВЫБРАТЬ
//	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	               |ПОМЕСТИТЬ втРабочиеДни
//	               |ИЗ
//	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	               |ГДЕ
//	               |	КалендарныеГрафики.ДеньВключенВГрафик
//	               |	И КалендарныеГрафики.Год = &ГодПланирования
//	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	втРабочиеДни.РабочийДень КАК РабочийДень
//	               |ИЗ
//	               |	втРабочиеДни КАК втРабочиеДни";
//	//rarus vikhle 28.02.2020 mt 15409 ---	
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;//rarus vikhle 28.02.2020 mt 15409
//	Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
//	Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
//	РезультатЗапроса = Запрос.Выполнить();
//	тзРабочиеДни = РезультатЗапроса.Выгрузить();//rarus vikhle 28.02.2020 mt 15409
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Данные.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
//	Данные.Колонки.Добавить("Итого",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10)));
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		Данные.Колонки.Добавить("Д" + Строка(День(Выборка.РабочийДень)),Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10)));
//	КонецЦикла;
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ТекстЗапроса =  "ВЫБРАТЬ
//	//                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня КАК РабочийДень,
//	//                |	ЕСТЬNULL(Scan_ПланПоDeliveriesReportСрезПоследних.КоличествоПлан, 0) КАК Количество
//	//                |ИЗ
//	//                |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	//                |ГДЕ
//	//                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня В
//	//                |			(ВЫБРАТЬ
//	//                |				КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
//	//                |			ИЗ
//	//                |				РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//                |			ГДЕ
//	//                |				КалендарныеГрафики.Год = &ГодОтчета
//	//                |				И КалендарныеГрафики.ДеньВключенВГрафик
//	//                |				И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета)
//	//                |
//	//                |УПОРЯДОЧИТЬ ПО
//	//                |	ДатаРабочегоДня" ;
//	Запрос.Текст =  "ВЫБРАТЬ
//	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня КАК РабочийДень,
//	                |	ЕСТЬNULL(Scan_ПланПоDeliveriesReportСрезПоследних.КоличествоПлан, 0) КАК Количество
//	                |ИЗ
//	                |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	                |ГДЕ
//	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня В
//	                |			(ВЫБРАТЬ
//	                |				втРабочиеДни.РабочийДень КАК ДатаГрафика
//	                |			ИЗ
//	                |				втРабочиеДни КАК втРабочиеДни)
//	                |
//	                |УПОРЯДОЧИТЬ ПО
//	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня" ;
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//rarus vikhle 28.02.2020 mt 15409 ---
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));//rarus vikhle 28.02.2020 mt 15409
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату)); //rarus vikhle 28.02.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = Данные.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Average forecast";
//	Иначе
//		НоваяСтрока.Наименование = "Средний план продаж на день";
//	КонецЕсли;	
//	
//	ТекстЗапроса2 =	"ВЫБРАТЬ ПЕРВЫЕ 1
//	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК Количество
//	                 |ИЗ
//	                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	                 |ГДЕ
//	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
//	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
//	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета";
//	Запрос = Новый Запрос(ТекстЗапроса2);
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	РезультатЗапроса2 = Запрос.Выполнить();
//	Выборка2 = РезультатЗапроса2.Выбрать();

//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Если Выборка2.Следующий() Тогда
//			Если Выборка2.Количество <> 0 Тогда
//				// rarus tenkam 24.06.2021 mantis 17571 +++
//				// было
//				//Итого = Выборка2.Количество;
//				Итого = Итого + Выборка2.Количество;     			
//				
//			//Иначе
//			//	Итого = "0";
//				// rarus tenkam 24.06.2021 mantis 17571 ---
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	// rarus tenkam 25.06.2021 mantis 17571 в запросе исправлено получение дат из сводной информации, а не ключевых дат процессов
//	//rarus vikhle 08.05.2020 mt 15409 в запрос добавлены параметры по виду продукта виртуальной таблицы Scan_ВзаимосвязьИзделийИЗаказов	
//	ТекстЗапроса = "ВЫБРАТЬ
//	               //rarus bonmak 09.08.2021 16834 |	Scan_СводнаяИнформацияПоПродукту.RFD КАК RFD,
//	               |	Scan_СводнаяИнформацияПоПродукту.DD2 КАК DD2,
//	               |	Scan_СводнаяИнформацияПоПродукту.DD КАК DD,
//	               |	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
//	               |	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Изделие,
//	               |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия КАК ДатаПродажиИзделия,
//	               |	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод КАК ЗаказНаЗавод
//	               |ПОМЕСТИТЬ ВременнаяТаблица
//	               |ИЗ
//	               |	РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних,
//	               |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
//	               |ГДЕ
//	               |	(Scan_СводнаяИнформацияПоПродукту.DD МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	               |			ИЛИ Scan_СводнаяИнформацияПоПродукту.DD2 МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ))
//	               |	И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера В (ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый), ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка))
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               //rarus bonmak 09.08.2021 16834 |	МАКСИМУМ(ВременнаяТаблица.RFD) КАК RFD,
//	               |	МАКСИМУМ(ВременнаяТаблица.DD2) КАК DD2,
//	               |	МАКСИМУМ(ВременнаяТаблица.DD) КАК DD,
//	               |	ВременнаяТаблица.Изделие КАК Изделие
//	               |ПОМЕСТИТЬ ВременнаяТаблица2
//	               |ИЗ
//	               |	ВременнаяТаблица КАК ВременнаяТаблица
//	               |ГДЕ
//	               |	ВременнаяТаблица.БроньДилера = ДАТАВРЕМЯ(1, 1, 1)
//	               |	И ВременнаяТаблица.ДатаПродажиИзделия = ДАТАВРЕМЯ(1, 1, 1)
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	ВременнаяТаблица.Изделие
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	               |	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица2.Изделие), 0) КАК Количество
//	               |ИЗ
//	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица2 КАК ВременнаяТаблица2
//	               |		ПО (ВЫБОР
//				   //rarus bonmak 09.08.2021 16834 ++
//				   //|				КОГДА ВременнаяТаблица2.RFD <> ДАТАВРЕМЯ(1, 1, 1)
//	               //|					ТОГДА ВременнаяТаблица2.RFD = КалендарныеГрафики.ДатаГрафика
//	               //|				ИНАЧЕ ВЫБОР
//				   //rarus bonmak 09.08.2021 16834 --
//	               |						КОГДА ВременнаяТаблица2.DD2 <> ДАТАВРЕМЯ(1, 1, 1)
//	               |							ТОГДА ВременнаяТаблица2.DD2 = КалендарныеГрафики.ДатаГрафика
//	               |						ИНАЧЕ ВЫБОР
//	               |								КОГДА ВременнаяТаблица2.DD <> ДАТАВРЕМЯ(1, 1, 1)
//	               |									ТОГДА ВременнаяТаблица2.DD = КалендарныеГрафики.ДатаГрафика
//	               |								ИНАЧЕ ЛОЖЬ
//	               |							КОНЕЦ
//	               //rarus bonmak 09.08.2021 16834|					КОНЕЦ
//	               |			КОНЕЦ)
//	               |ГДЕ
//	               |	КалендарныеГрафики.ДеньВключенВГрафик
//	               |	И КалендарныеГрафики.Год = &ГодОтчета
//	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	КалендарныеГрафики.ДатаГрафика";
//	
//	ВидКлючевойДаты = Новый Массив;
//	//rarus bonmak 09.08.2021 16834 ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.RFD"));
//	ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DD2"));
//	ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DD"));
//	
//	//rarus bonmak 29.03.2021 17400 ++
//	//ВидКлючевойДатыБроньДилера = Новый Массив;
//	//ВидКлючевойДатыБроньДилера.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера"));
//	//rarus bonmak 29.03.2021 17400 --
//	
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;//rarus vikhle 28.02.2020 mt 15409
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("Вид", 	ВидКлючевойДаты);
//	//Запрос.УстановитьПараметр("ВидБроньДилера", 	ВидКлючевойДатыБроньДилера); //rarus bonmak 29.03.2021 17400
//	Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	Запрос.УстановитьПараметр("ВидПродукта",ВидПродукта);//rarus vikhle 08.05.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = Данные.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Stock RFD SRU without dlv/booking";
//	Иначе
//		НоваяСтрока.Наименование = "Готово к отгрузке, не забронировано";
//	КонецЕсли;	
//	
//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Если Выборка.Количество <> 0 Тогда
//			// rarus tenkam 24.06.2021 mantis 17571 +++
//			// было
//			//Итого = Выборка.Количество;
//			Итого = Итого + Выборка.Количество;     			
//			// rarus tenkam 24.06.2021 mantis 17571 ---
//		КонецЕсли;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//	               |	ВЫБОР
//	//	               |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.RFD)
//	//	               |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//	               |	КОНЕЦ КАК RFD,
//	//	               |	ВЫБОР
//	//	               |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DD2)
//	//	               |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//	               |	КОНЕЦ КАК DD2,
//	//	               |	ВЫБОР
//	//	               |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DD)
//	//	               |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//	               |	КОНЕЦ КАК DD,
//	//	               |	ВЫБОР
//	//	               |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.БроньДилера)
//	//	               |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//	               |	КОНЕЦ КАК БроньДилера,
//	//	               |	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
//	//	               |	ВЫБОР
//	//	               |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
//	//	               |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//	               |	КОНЕЦ КАК ДатаПродажиИзделия
//	//	               |ПОМЕСТИТЬ ВременнаяТаблица
//	//	               |ИЗ
//	//	               |	РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
//	//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	//	               |		ПО Scan_КлючевыеДатыПроцессов.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	//	               |		ПО Scan_КлючевыеДатыПроцессов.Объект.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	//	               |ГДЕ
//	//	               |	Scan_КлючевыеДатыПроцессов.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	//	               |	И Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты В(&Вид)
//	//	               |	И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
//	//	               |	И НЕ Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие.СОП.Ссылка ЕСТЬ NULL
//	//	               |;
//	//	               |
//	//	               |////////////////////////////////////////////////////////////////////////////////
//	//	               |ВЫБРАТЬ
//	//	               |	МАКСИМУМ(ВременнаяТаблица.RFD) КАК RFD,
//	//	               |	МАКСИМУМ(ВременнаяТаблица.RFD) КАК DD2,
//	//	               |	МАКСИМУМ(ВременнаяТаблица.DD) КАК DD,
//	//	               |	ВременнаяТаблица.Изделие КАК Изделие
//	//	               |ПОМЕСТИТЬ ВременнаяТаблица2
//	//	               |ИЗ
//	//	               |	ВременнаяТаблица КАК ВременнаяТаблица
//	//	               |ГДЕ
//	//	               |	ВременнаяТаблица.БроньДилера = ДАТАВРЕМЯ(1, 1, 1)
//	//	               |	И ВременнаяТаблица.ДатаПродажиИзделия = ДАТАВРЕМЯ(1, 1, 1)
//	//	               |
//	//	               |СГРУППИРОВАТЬ ПО
//	//	               |	ВременнаяТаблица.Изделие
//	//	               |;
//	//	               |
//	//	               |////////////////////////////////////////////////////////////////////////////////
//	//	               |ВЫБРАТЬ
//	//	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	//	               |	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица2.Изделие), 0) КАК Количество,
//	//	               |	ВременнаяТаблица2.Изделие КАК Изделие
//	//	               |ИЗ
//	//	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица2 КАК ВременнаяТаблица2
//	//	               |		ПО (ВЫБОР
//	//	               |				КОГДА ВременнаяТаблица2.RFD <> ДАТАВРЕМЯ(1, 1, 1)
//	//	               |					ТОГДА ВременнаяТаблица2.RFD = КалендарныеГрафики.ДатаГрафика
//	//	               |				ИНАЧЕ ВЫБОР
//	//	               |						КОГДА ВременнаяТаблица2.DD2 <> ДАТАВРЕМЯ(1, 1, 1)
//	//	               |							ТОГДА ВременнаяТаблица2.DD2 = КалендарныеГрафики.ДатаГрафика
//	//	               |						ИНАЧЕ ВЫБОР
//	//	               |								КОГДА ВременнаяТаблица2.DD <> ДАТАВРЕМЯ(1, 1, 1)
//	//	               |									ТОГДА ВременнаяТаблица2.DD = КалендарныеГрафики.ДатаГрафика
//	//	               |								ИНАЧЕ ЛОЖЬ
//	//	               |							КОНЕЦ
//	//	               |					КОНЕЦ
//	//	               |			КОНЕЦ)
//	//	               |ГДЕ
//	//	               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//	               |	И КалендарныеГрафики.Год = &ГодОтчета
//	//	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	//	               |
//	//	               |СГРУППИРОВАТЬ ПО
//	//	               |	КалендарныеГрафики.ДатаГрафика,
//	//	               |	ВременнаяТаблица2.Изделие";
//	Запрос.Текст = 	"ВЫБРАТЬ
//	               	//rarus bonmak 09.08.2021 16834 |	ВременнаяТаблица.RFD КАК RFD,
//	               	|	ВременнаяТаблица.DD2 КАК DD2,
//	               	|	ВременнаяТаблица.DD КАК DD,
//	               	|	ВременнаяТаблица.БроньДилера КАК БроньДилера,
//	               	|	ВременнаяТаблица.Изделие КАК Изделие,
//	               	|	ВременнаяТаблица.ДатаПродажиИзделия КАК ДатаПродажиИзделия
//	               	|ПОМЕСТИТЬ ВременнаяТаблица1
//	               	|ИЗ
//	               	|	ВременнаяТаблица КАК ВременнаяТаблица
//	               	|ГДЕ
//	               	|	НЕ ВременнаяТаблица.Изделие.СОП.Ссылка ЕСТЬ NULL
//	               	|;
//	               	|
//	               	|////////////////////////////////////////////////////////////////////////////////
//	               	|ВЫБРАТЬ
//	               	//rarus bonmak 09.08.2021 16834 |	МАКСИМУМ(ВременнаяТаблица1.RFD) КАК RFD,
//	               	|	МАКСИМУМ(ВременнаяТаблица1.DD2) КАК DD2,
//	               	|	МАКСИМУМ(ВременнаяТаблица1.DD) КАК DD,
//	               	|	ВременнаяТаблица1.Изделие КАК Изделие
//	               	|ПОМЕСТИТЬ ВременнаяТаблица3
//	               	|ИЗ
//	               	|	ВременнаяТаблица1 КАК ВременнаяТаблица1
//	               	|ГДЕ
//	               	|	ВременнаяТаблица1.БроньДилера = ДАТАВРЕМЯ(1, 1, 1)
//	               	|	И ВременнаяТаблица1.ДатаПродажиИзделия = ДАТАВРЕМЯ(1, 1, 1)
//	               	|
//	               	|СГРУППИРОВАТЬ ПО
//	               	|	ВременнаяТаблица1.Изделие
//	               	|;
//	               	|
//	               	|////////////////////////////////////////////////////////////////////////////////
//	               	|ВЫБРАТЬ
//	               	|	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	               	|	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица3.Изделие), 0) КАК Количество,
//	               	|	ВременнаяТаблица3.Изделие КАК Изделие
//	               	|ИЗ
//	               	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	               	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица3 КАК ВременнаяТаблица3
//	               	|		ПО (ВЫБОР
//					//rarus bonmak 09.08.2021 16834 ++
//					//|				КОГДА ВременнаяТаблица3.RFD <> ДАТАВРЕМЯ(1, 1, 1)
//					//|					ТОГДА ВременнаяТаблица3.RFD = КалендарныеГрафики.ДатаГрафика
//					//|				ИНАЧЕ ВЫБОР
//					//rarus bonmak 09.08.2021 16834 --
//	               	|						КОГДА ВременнаяТаблица3.DD2 <> ДАТАВРЕМЯ(1, 1, 1)
//	               	|							ТОГДА ВременнаяТаблица3.DD2 = КалендарныеГрафики.ДатаГрафика
//	               	|						ИНАЧЕ ВЫБОР
//	               	|								КОГДА ВременнаяТаблица3.DD <> ДАТАВРЕМЯ(1, 1, 1)
//	               	|									ТОГДА ВременнаяТаблица3.DD = КалендарныеГрафики.ДатаГрафика
//	               	|								ИНАЧЕ ЛОЖЬ
//	               	|							КОНЕЦ
//	               	//rarus bonmak 09.08.2021 16834|					КОНЕЦ
//	               	|			КОНЕЦ)
//	               	|ГДЕ
//	               	|	КалендарныеГрафики.ДеньВключенВГрафик
//	               	|	И КалендарныеГрафики.Год = &ГодОтчета
//	               	|	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	               	|
//	               	|СГРУППИРОВАТЬ ПО
//	               	|	КалендарныеГрафики.ДатаГрафика,
//	               	|	ВременнаяТаблица3.Изделие";
//	
//	//ВидКлючевойДаты = Новый Массив;
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.RFD"));
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DD2"));
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DD"));
//		
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("Вид", 	ВидКлючевойДаты);
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	//rarus vikhle 28.02.2020 mt 15409 ---
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = Данные.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Stock RFD SRU Sold  without dlv/booking";
//	Иначе
//		НоваяСтрока.Наименование = "Готово к отгрузке, есть СОП, не забронировано";
//	КонецЕсли;	
//	
//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Если Выборка.Количество <> 0 Тогда
//			// rarus tenkam 24.06.2021 mantis 17571 +++
//			// было
//			//Итого = Выборка.Количество;
//			Итого = Итого + Выборка.Количество;     			
//			// rarus tenkam 24.06.2021 mantis 17571 ---
//		КонецЕсли;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;

//	//Actual deliveries (from booking)
//	ВидКлючевойДаты = Новый Массив;
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера")); //rarus bonmak 29.03.2021 17400
//	ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия"));
//	//rarus vikhle 08.05.2020 mt 15409 добавлены параметры по виду продукта виртуальной таблицы Scan_ВзаимосвязьИзделийИЗаказов
//	
//	//rarus bonmak 29.03.2021 17400 ++
//	//ВидКлючевойДатыБроньДилера = Новый Массив;
//	//ВидКлючевойДатыБроньДилера.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера"));
//	//rarus bonmak 29.03.2021 17400 --
//	
//	// rarus tenkam 25.06.2021 mantis 17571 в запросе исправлено получение дат из сводной информации, а не ключевых дат процессов
//	ТекстЗапроса =  "ВЫБРАТЬ
//	                |	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия КАК ДатаПродажиИзделия,
//	                |	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Изделие
//	                |ПОМЕСТИТЬ ВременнаяТаблица
//	                |ИЗ
//	                |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту,
//	                |	РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	                |ГДЕ
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	                |	И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера В (ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый), ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка))
//	                |;
//	                |
//	                |////////////////////////////////////////////////////////////////////////////////
//	                |ВЫБРАТЬ
//	                |	МАКСИМУМ(ВременнаяТаблица.БроньДилера) КАК БроньДилера,
//	                |	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) КАК ДатаПродажиИзделия,
//	                |	ВременнаяТаблица.Изделие КАК Изделие
//	                |ПОМЕСТИТЬ ВременнаяТаблица1
//	                |ИЗ
//	                |	ВременнаяТаблица КАК ВременнаяТаблица
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	ВременнаяТаблица.Изделие
//	                |
//	                |ИМЕЮЩИЕ
//	                |	МАКСИМУМ(ВременнаяТаблица.БроньДилера) <> ДАТАВРЕМЯ(1, 1, 1) И
//	                |	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) <> ДАТАВРЕМЯ(1, 1, 1)
//	                |;
//	                |
//	                |////////////////////////////////////////////////////////////////////////////////
//	                |ВЫБРАТЬ
//	                |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	                |	КОЛИЧЕСТВО(ВременнаяТаблица1.Изделие) КАК Количество
//	                |ИЗ
//	                |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица1 КАК ВременнаяТаблица1
//	                |		ПО (ВременнаяТаблица1.БроньДилера = КалендарныеГрафики.ДатаГрафика)
//	                |			И (ВременнаяТаблица1.ДатаПродажиИзделия = КалендарныеГрафики.ДатаГрафика)
//	                |ГДЕ
//	                |	КалендарныеГрафики.ДеньВключенВГрафик
//	                |	И КалендарныеГрафики.Год = &ГодОтчета
//	                |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	КалендарныеГрафики.ДатаГрафика" ;
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ВидКлючевойДаты = Новый Массив;
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера"));
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия"));
//	//rarus vikhle 28.02.2020 mt 15409 ---
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("Вид", 	ВидКлючевойДаты);
//	//Запрос.УстановитьПараметр("ВидБроньДилера", 	ВидКлючевойДатыБроньДилера); //rarus bonmak 29.03.2021 17400
//	Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	Запрос.УстановитьПараметр("ВидПродукта",ВидПродукта);//rarus vikhle 08.05.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = Данные.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Actual deliveries (from booking)";
//	Иначе
//		НоваяСтрока.Наименование = "Отгружено согласно плану";
//	КонецЕсли;	
//	
//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Итого = Итого + Выборка.Количество;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	
//	//Additional sales
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ВидКлючевойДаты = Новый Массив;
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера"));
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия"));
//	//rarus vikhle 28.02.2020 mt 15409 ---
//	
//	// rarus tenkam 25.06.2021 mantis 17571 в запросе исправлено получение дат из сводной информации, а не ключевых дат процессов
//	//rarus vikhle 08.05.2020 mt 15409 добавлены параметры по виду продукта виртуальной таблицы Scan_ВзаимосвязьИзделийИЗаказов
//	Запрос.Текст =  "ВЫБРАТЬ
//	                |	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия КАК ДатаПродажиИзделия,
//	                |	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Изделие
//	                |ПОМЕСТИТЬ ВременнаяТаблица
//	                |ИЗ
//	                |	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту,
//	                |	РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	                |ГДЕ
//	                |	Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	                |	И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера В (ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый), ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка))
//	                |;
//	                |
//	                |////////////////////////////////////////////////////////////////////////////////
//	                |ВЫБРАТЬ
//	                |	МАКСИМУМ(ВременнаяТаблица.БроньДилера) КАК БроньДилера,
//	                |	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) КАК ДатаПродажиИзделия,
//	                |	ВременнаяТаблица.Изделие КАК Изделие
//	                |ПОМЕСТИТЬ ВременнаяТаблица1
//	                |ИЗ
//	                |	ВременнаяТаблица КАК ВременнаяТаблица
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	ВременнаяТаблица.Изделие
//	                |
//	                |ИМЕЮЩИЕ
//	                |	МАКСИМУМ(ВременнаяТаблица.БроньДилера) <> ДАТАВРЕМЯ(1, 1, 1) И
//	                |	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) <> ДАТАВРЕМЯ(1, 1, 1)
//	                |;
//	                |
//	                |////////////////////////////////////////////////////////////////////////////////
//	                |ВЫБРАТЬ
//	                |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	                |	КОЛИЧЕСТВО(ВременнаяТаблица1.Изделие) КАК Количество,
//	                |	ВременнаяТаблица1.Изделие КАК Изделие
//	                |ИЗ
//	                |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица1 КАК ВременнаяТаблица1
//	                |		ПО (ВременнаяТаблица1.БроньДилера <> КалендарныеГрафики.ДатаГрафика)
//	                |			И (ВременнаяТаблица1.ДатаПродажиИзделия = КалендарныеГрафики.ДатаГрафика)
//	                |ГДЕ
//	                |	КалендарныеГрафики.ДеньВключенВГрафик
//	                |	И КалендарныеГрафики.Год = &ГодОтчета
//	                |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	КалендарныеГрафики.ДатаГрафика,
//	                |	ВременнаяТаблица1.Изделие" ;
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	//Запрос.УстановитьПараметр("Вид", ВидКлючевойДаты);
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	//rarus vikhle 28.02.2020 mt 15409 ---
//		
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = Данные.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Additional Sales";
//	Иначе
//		НоваяСтрока.Наименование = "Дополнительные отгрузки";
//	КонецЕсли;	
//	
//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Итого = Итого + Выборка.Количество;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	//rarus vikhle 04.03.2020 mt 15409 +++	
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	Scan_КлючевыеДатыПроцессов.Значение КАК РабочийДень,
//	//               |	КОЛИЧЕСТВО(ЕСТЬNULL(Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие, 0)) КАК Количество
//	//               |ИЗ
//	//               |	РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
//	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	//               |		ПО Scan_КлючевыеДатыПроцессов.Объект.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	//               |		ПО Scan_КлючевыеДатыПроцессов.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	//               |ГДЕ
//	//               |	Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
//	//               |	И Scan_КлючевыеДатыПроцессов.Значение >= НАЧАЛОПЕРИОДА(&НаДату, ДЕНЬ)
//	//               |	И Scan_КлючевыеДатыПроцессов.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	//               |	И Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.scan_ключевыедаты.броньдилера)
//	//               |
//	//               |СГРУППИРОВАТЬ ПО
//	//               |	Scan_КлючевыеДатыПроцессов.Значение";
//	
//	
//	//rarus vikhle 08.05.2020 mt 15409 добавлены параметры по виду продукта виртуальной таблицы Scan_ВзаимосвязьИзделийИЗаказов	
//	ТекстЗапроса = "ВЫБРАТЬ
//	               |	Scan_КлючевыеДатыПроцессовСрезПоследних.Значение КАК РабочийДень,
//	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие, 0)) КАК Количество
//	               |ИЗ
//	               |	РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(, ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.scan_КлючевыеДаты.БроньДилера)) КАК Scan_КлючевыеДатыПроцессовСрезПоследних
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, МЕСЯЦ), ) КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	               |		ПО Scan_КлючевыеДатыПроцессовСрезПоследних.Объект.ЗаказНаЗавод.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(
//	               |				КОНЕЦПЕРИОДА(&НаДату, МЕСЯЦ),
//	               |				&ВидПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ВидыПродуктов.ПустаяСсылка)
//	               |					ИЛИ Изделие.ТипПродукта.ВидПродукта = &ВидПродукта) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	               |		ПО Scan_КлючевыеДатыПроцессовСрезПоследних.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие
//	               |ГДЕ
//	               |	Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера В (ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый),ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка))//rarus vikhle 24.05.2021 mt 17543
//	               |	И Scan_КлючевыеДатыПроцессовСрезПоследних.Значение МЕЖДУ &НаДату И КОНЕЦПЕРИОДА(&НаДату, МЕСЯЦ)
//	               |	И Scan_КлючевыеДатыПроцессовСрезПоследних.Значение В(&РабочиеДни)
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	Scan_КлючевыеДатыПроцессовСрезПоследних.Значение";
//	//rarus vikhle 04.03.2020 mt 15409 ---
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("РабочиеДни",тзРабочиеДни);//rarus vikhle 04.03.2020 mt 15409
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));//rarus vikhle 04.03.2020 mt 15409
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));//rarus vikhle 04.03.2020 mt 15409
//	Запрос.УстановитьПараметр("ВидПродукта",ВидПродукта);//rarus vikhle 08.05.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = Данные.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Booking";
//	Иначе
//		НоваяСтрока.Наименование = "Отгружено/забронировано";
//	КонецЕсли;	
//	
//	Итого = 0;
//	ДеньЧисло = День(НаДату) - 1;
//	Для Индекс = 1 По ДеньЧисло Цикл
//		Если Данные.Колонки.Найти("Д" + Строка(Индекс)) = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		ЗначениеActualDeliveries = Данные[3]["Д" + Строка(Индекс)];
//		ЗначениеAdditionalSales = Данные[4]["Д" + Строка(Индекс)];
//		ЗначениеBooking = ЗначениеActualDeliveries + ЗначениеAdditionalSales;
//		НоваяСтрока["Д" + Строка(Индекс)] = ЗначениеBooking;
//		Итого = Итого + ЗначениеBooking;
//	КонецЦикла;
//	
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Итого = Итого + Выборка.Количество;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	
//	Данные.Сдвинуть(НоваяСтрока,-2);
//КонецПроцедуры
////rarus pechek 25.02.2020 mantis 15409 ---

////rarus pechek 25.02.2020 mantis 15409 +++
////Собственный дилер
//Процедура ЗаполнитьДанныеСобственный(ДанныеСобств)
//	ДанныеСобств = Новый ТаблицаЗначений;
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень

//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И КалендарныеГрафики.Год = &ГодПланирования
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования";
//	ТекстЗапроса = "ВЫБРАТЬ
//	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	               |ПОМЕСТИТЬ втРабочиеДни
//	               |ИЗ
//	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	               |ГДЕ
//	               |	КалендарныеГрафики.ДеньВключенВГрафик
//	               |	И КалендарныеГрафики.Год = &ГодПланирования
//	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	втРабочиеДни.РабочийДень КАК РабочийДень
//	               |ИЗ
//	               |	втРабочиеДни КАК втРабочиеДни";
//	//rarus vikhle 28.02.2020 mt 15409 ---
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;//rarus vikhle 28.02.2020 mt 15409
//	Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
//	Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
//	РезультатЗапроса = Запрос.Выполнить();
//	тзРабочиеДни = РезультатЗапроса.Выгрузить();//rarus vikhle 04.03.2020 mt 15409
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеСобств.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
//	ДанныеСобств.Колонки.Добавить("Итого",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10)));
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		ДанныеСобств.Колонки.Добавить("Д" + Строка(День(Выборка.РабочийДень)),Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10)));
//	КонецЦикла;
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ТекстЗапроса =  "ВЫБРАТЬ
//	//                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня КАК РабочийДень,
//	//                |	ЕСТЬNULL(Scan_ПланПоDeliveriesReportСрезПоследних.КоличествоПлан, 0) КАК Количество
//	//                |ИЗ
//	//                |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	//                |ГДЕ
//	//                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня В
//	//                |			(ВЫБРАТЬ
//	//                |				КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
//	//                |			ИЗ
//	//                |				РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//                |			ГДЕ
//	//                |				КалендарныеГрафики.Год = &ГодОтчета
//	//                |				И КалендарныеГрафики.ДеньВключенВГрафик
//	//                |				И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета)
//	//                |
//	//                |УПОРЯДОЧИТЬ ПО
//	//                |	ДатаРабочегоДня" ;
//	Запрос.Текст =  "ВЫБРАТЬ
//	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня КАК РабочийДень,
//	                |	ЕСТЬNULL(Scan_ПланПоDeliveriesReportСрезПоследних.КоличествоПлан, 0) КАК Количество
//	                |ИЗ
//	                |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	                |ГДЕ
//	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня В
//	                |			(ВЫБРАТЬ
//	                |				втРабочиеДни.РабочийДень КАК ДатаГрафика
//	                |			ИЗ
//	                |				втРабочиеДни КАК втРабочиеДни)
//	                |
//	                |УПОРЯДОЧИТЬ ПО
//	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня" ;
//	//Запрос = Новый Запрос(ТекстЗапроса);//rarus vikhle 28.02.2020 mt 15409
//	//rarus vikhle 28.02.2020 mt 15409 ---
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));//rarus vikhle 28.02.2020 mt 15409
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));//rarus vikhle 28.02.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	ТекстЗапроса2 =   "ВЫБРАТЬ ПЕРВЫЕ 1
//	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК Количество
//	                 |ИЗ
//	                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	                 |ГДЕ
//	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
//	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета";
//	Запрос = Новый Запрос(ТекстЗапроса2);
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	РезультатЗапроса2 = Запрос.Выполнить();
//	Выборка2 = РезультатЗапроса2.Выбрать();

//	НоваяСтрока = ДанныеСобств.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Average forecast";
//	Иначе
//		НоваяСтрока.Наименование = "Средний план продаж на день";
//	КонецЕсли;	
//	
//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Если Выборка2.Следующий() Тогда
//			Если Выборка2.Количество <> 0 Тогда
//				// rarus tenkam 24.06.2021 mantis 17571 +++
//				//Итого = Выборка2.Количество;
//				Итого = Итого + Выборка2.Количество;
//				// rarus tenkam 24.06.2021 mantis 17571 ---
//			// rarus tenkam 24.06.2021 mantis 17571 +++
//			//Иначе
//			//	Итого = "0";
//			// rarus tenkam 24.06.2021 mantis 17571 ---
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	//rarus vikhle 08.05.2020 mt 15409 добавлены параметры по виду продукта виртуальной таблицы Scan_ВзаимосвязьИзделийИЗаказов
//	ТекстЗапроса = "ВЫБРАТЬ
//					//rarus bonmak 09.08.2021 16834 ++
//				   //|	ВЫБОР
//				   //|		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.RFD)
//				   //|			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//				   //|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//				   //|	КОНЕЦ КАК RFD,
//				   //rarus bonmak 09.08.2021 16834 --
//	               |	ВЫБОР
//	               |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DD2)
//	               |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	               |	КОНЕЦ КАК DD2,
//	               |	ВЫБОР
//	               |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.DD)
//	               |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	               |	КОНЕЦ КАК DD,
//	               |	ЕСТЬNULL(Scan_СводнаяИнформацияПоПродукту.БроньДилера, ДАТАВРЕМЯ(1, 1, 1)) КАК БроньДилера,
//	               |	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие,
//	               |	ВЫБОР
//	               // rarus tenkam 15.06.2021 mantis 17571 +++
//				   //|		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
//	               |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту)
//	               // rarus tenkam 15.06.2021 mantis 17571 ---
//					|			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	               |	КОНЕЦ КАК ДатаПродажиИзделия
//	               |ПОМЕСТИТЬ ВременнаяТаблица
//	               |ИЗ
//	               |	РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(
//	               |				&НаДату,
//	               |				&ВидПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ВидыПродуктов.ПустаяСсылка)
//	               |					ИЛИ Изделие.ТипПродукта.ВидПродукта = &ВидПродукта) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
//	               |			ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод
//	               |		ПО Scan_КлючевыеДатыПроцессов.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	               |		ПО Scan_КлючевыеДатыПроцессов.Объект.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	               |ГДЕ
//	               |	Scan_КлючевыеДатыПроцессов.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	               |	И Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты В(&Вид)
//	               |	И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               //rarus bonmak 09.08.2021 16834 |	МАКСИМУМ(ВременнаяТаблица.RFD) КАК RFD,
//	               |	МАКСИМУМ(ВременнаяТаблица.DD2) КАК DD2,
//	               |	МАКСИМУМ(ВременнаяТаблица.DD) КАК DD,
//	               |	ВременнаяТаблица.Изделие КАК Изделие
//	               |ПОМЕСТИТЬ ВременнаяТаблица2
//	               |ИЗ
//	               |	ВременнаяТаблица КАК ВременнаяТаблица
//	               |ГДЕ
//	               |	ВременнаяТаблица.БроньДилера = ДАТАВРЕМЯ(1, 1, 1)
//	               |	И ВременнаяТаблица.ДатаПродажиИзделия = ДАТАВРЕМЯ(1, 1, 1)
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	ВременнаяТаблица.Изделие
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	               |	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица2.Изделие), 0) КАК Количество
//	               |ИЗ
//	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица2 КАК ВременнаяТаблица2
//	               |		ПО (ВЫБОР
//				   //rarus bonmak 09.08.2021 16834 ++
//				   //|				КОГДА ВременнаяТаблица2.RFD <> ДАТАВРЕМЯ(1, 1, 1)
//				   //|					ТОГДА ВременнаяТаблица2.RFD = КалендарныеГрафики.ДатаГрафика
//				   //|				ИНАЧЕ ВЫБОР
//				   //rarus bonmak 09.08.2021 16834 --
//	               |						КОГДА ВременнаяТаблица2.DD2 <> ДАТАВРЕМЯ(1, 1, 1)
//	               |							ТОГДА ВременнаяТаблица2.DD2 = КалендарныеГрафики.ДатаГрафика
//	               |						ИНАЧЕ ВЫБОР
//	               |								КОГДА ВременнаяТаблица2.DD <> ДАТАВРЕМЯ(1, 1, 1)
//	               |									ТОГДА ВременнаяТаблица2.DD = КалендарныеГрафики.ДатаГрафика
//	               |								ИНАЧЕ ЛОЖЬ
//	               |							КОНЕЦ
//	               //rarus bonmak 09.08.2021 16834|					КОНЕЦ
//	               |			КОНЕЦ)
//	               |ГДЕ
//	               |	КалендарныеГрафики.ДеньВключенВГрафик
//	               |	И КалендарныеГрафики.Год = &ГодОтчета
//	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	КалендарныеГрафики.ДатаГрафика";
//		
//	ВидКлючевойДаты = Новый Массив;
//	//rarus bonmak 09.08.2021 16834 ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.RFD"));
//	ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DD2"));
//	ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.DD"));
//	//rarus bonmak 29.03.2021 17400 ++
//	//ВидКлючевойДатыБроньДилера = Новый Массив;
//	//ВидКлючевойДатыБроньДилера.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера"));
//	//rarus bonmak 29.03.2021 17400 --
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("Вид", 	ВидКлючевойДаты);
//	//Запрос.УстановитьПараметр("ВидБроньДилера", 	ВидКлючевойДатыБроньДилера); //rarus bonmak 29.03.2021 17400
//	Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	Запрос.УстановитьПараметр("ВидПродукта",ВидПродукта);//rarus vikhle 08.05.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = ДанныеСобств.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Stock RFD SSG without dlv/booking";
//	Иначе
//		НоваяСтрока.Наименование = "Готово к отгрузке, не забронировано";
//	КонецЕсли;	
//	
//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Если Выборка.Количество <> 0 Тогда
//			// rarus tenkam 24.06.2021 mantis 17571 +++
//			//Итого = Выборка.Количество;
//			Итого = Итого + Выборка.Количество;
//			// rarus tenkam 24.06.2021 mantis 17571 ---			
//		КонецЕсли;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	
//	
//	//Actual deliveries (from booking)
//	ВидКлючевойДаты = Новый Массив;
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера")); //rarus bonmak 29.03.2021 17400
//	// rarus tenkam 15.06.2021 mantis 17571 +++
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия"));
//	ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту"));
//	// rarus tenkam 15.06.2021 mantis 17571 ---
//	//rarus vikhle 08.05.2020 mt 15409 добавлены параметры по виду продукта виртуальной таблицы Scan_ВзаимосвязьИзделийИЗаказов
//	//rarus bonmak 29.03.2021 17400 ++
//	//ВидКлючевойДатыБроньДилера = Новый Массив;
//	//ВидКлючевойДатыБроньДилера.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера"));
//	//rarus bonmak 29.03.2021 17400 --
//	ТекстЗапроса =  "ВЫБРАТЬ
//	                |	ЕСТЬNULL(Scan_СводнаяИнформацияПоПродукту.БроньДилера, ДАТАВРЕМЯ(1, 1, 1)) КАК БроньДилера,
//	                |	ВЫБОР
//	                // rarus tenkam 15.06.2021 mantis 17571 +++
//					//|		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
//	                |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту)
//	                // rarus tenkam 15.06.2021 mantis 17571 ---
//					|			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	                |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	                |	КОНЕЦ КАК ДатаПродажиИзделия,
//	                |	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие
//	                |ПОМЕСТИТЬ ВременнаяТаблица
//	                |ИЗ
//	                |	РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
//	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(
//	                |				&НаДату,
//	                |				&ВидПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ВидыПродуктов.ПустаяСсылка)
//	                |					ИЛИ Изделие.ТипПродукта.ВидПродукта = &ВидПродукта) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	                |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
//	                |			ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод
//	                |		ПО Scan_КлючевыеДатыПроцессов.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	                |		ПО Scan_КлючевыеДатыПроцессов.Объект.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	                |ГДЕ
//	                |	Scan_КлючевыеДатыПроцессов.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	                |	И Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты В(&Вид)
//	                |	И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	                |;
//	                |
//	                |////////////////////////////////////////////////////////////////////////////////
//	                |ВЫБРАТЬ
//	                |	МАКСИМУМ(ВременнаяТаблица.БроньДилера) КАК БроньДилера,
//	                |	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) КАК ДатаПродажиИзделия,
//	                |	ВременнаяТаблица.Изделие КАК Изделие
//	                |ПОМЕСТИТЬ ВременнаяТаблица1
//	                |ИЗ
//	                |	(ВЫБРАТЬ
//	                |		ЕСТЬNULL(Scan_СводнаяИнформацияПоПродукту.БроньДилера, ДАТАВРЕМЯ(1, 1, 1)) КАК БроньДилера,
//	                |		ВЫБОР
//	                // rarus tenkam 15.06.2021 mantis 17571 +++
//					//|			КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
//	                |			КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиКлиенту)
//	                // rarus tenkam 15.06.2021 mantis 17571 ---
//					|				ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	                |			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	                |		КОНЕЦ КАК ДатаПродажиИзделия,
//	                |		Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие
//	                |	ИЗ
//	                |		РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
//	                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(
//	                |					&НаДату,
//	                |					&ВидПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ВидыПродуктов.ПустаяСсылка)
//	                |						ИЛИ Изделие.ТипПродукта.ВидПродукта = &ВидПродукта) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	                |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
//	                |				ПО Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод = Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод
//	                |			ПО Scan_КлючевыеДатыПроцессов.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	                |			ПО Scan_КлючевыеДатыПроцессов.Объект.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	                |	ГДЕ
//	                |		Scan_КлючевыеДатыПроцессов.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, 1), ДЕНЬ)
//	                |		И Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты В(&Вид)
//	                |		И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	                |		И Scan_КлючевыеДатыПроцессов.Значение <> ДАТАВРЕМЯ(1, 1, 1)
//	                |		И Scan_СводнаяИнформацияПоПродукту.БроньДилера <> ДАТАВРЕМЯ(1, 1, 1)
//	                |		И Scan_СводнаяИнформацияПоПродукту.БроньДилера МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, 1), ДЕНЬ)) КАК ВременнаяТаблица
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	ВременнаяТаблица.Изделие
//	                |
//	                |ИМЕЮЩИЕ
//	                |	МАКСИМУМ(ВременнаяТаблица.БроньДилера) <> ДАТАВРЕМЯ(1, 1, 1) И
//	                |	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) <> ДАТАВРЕМЯ(1, 1, 1)
//	                |;
//	                |
//	                |////////////////////////////////////////////////////////////////////////////////
//	                |ВЫБРАТЬ
//	                |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	                |	КОЛИЧЕСТВО(ВременнаяТаблица1.Изделие) КАК Количество
//	                |ИЗ
//	                |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица1 КАК ВременнаяТаблица1
//	                |		ПО (ВременнаяТаблица1.БроньДилера = КалендарныеГрафики.ДатаГрафика)
//	                |			И (ВременнаяТаблица1.ДатаПродажиИзделия = КалендарныеГрафики.ДатаГрафика)
//	                |ГДЕ
//	                |	КалендарныеГрафики.ДеньВключенВГрафик
//	                |	И КалендарныеГрафики.Год = &ГодОтчета
//	                |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	КалендарныеГрафики.ДатаГрафика" ;
//	
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ВидКлючевойДаты = Новый Массив;
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера"));
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия"));
//	//rarus vikhle 28.02.2020 mt 15409 ---

//	
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;//rarus vikhle 28.02.2020 mt 15409
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("Вид", 	ВидКлючевойДаты);
//	//Запрос.УстановитьПараметр("ВидБроньДилера", 	ВидКлючевойДатыБроньДилера); //rarus bonmak 29.03.2021 17400
//	Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	Запрос.УстановитьПараметр("ВидПродукта",ВидПродукта);//rarus vikhle 08.05.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = ДанныеСобств.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Actual deliveries (from booking)";
//	Иначе
//		НоваяСтрока.Наименование = "Отгружено согласно плану";
//	КонецЕсли;	
//	
//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Итого = Итого + Выборка.Количество;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	
//	//Additional sales
//	
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	//ВидКлючевойДаты = Новый Массив;
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.БроньДилера"));
//	//ВидКлючевойДаты.Добавить(ПредопределенноеЗначение("Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия"));
//	
//	//ТекстЗапроса =  "ВЫБРАТЬ
//	//                |	ВЫБОР
//	//                |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.БроньДилера)
//	//                |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//                |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//                |	КОНЕЦ КАК БроньДилера,
//	//                |	ВЫБОР
//	//                |		КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
//	//                |			ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//                |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//                |	КОНЕЦ КАК ДатаПродажиИзделия,
//	//                |	Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие
//	//                |ПОМЕСТИТЬ ВременнаяТаблица
//	//                |ИЗ
//	//                |	РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
//	//                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	//                |		ПО Scan_КлючевыеДатыПроцессов.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	//                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	//                |		ПО Scan_КлючевыеДатыПроцессов.Объект.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	//                |ГДЕ
//	//                |	Scan_КлючевыеДатыПроцессов.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	//                |	И Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты В(&Вид)
//	//                |	И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	//                |;
//	//                |
//	//                |////////////////////////////////////////////////////////////////////////////////
//	//                |ВЫБРАТЬ
//	//                |	МАКСИМУМ(ВременнаяТаблица.БроньДилера) КАК БроньДилера,
//	//                |	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) КАК ДатаПродажиИзделия,
//	//                |	ВременнаяТаблица.Изделие КАК Изделие
//	//                |ПОМЕСТИТЬ ВременнаяТаблица1
//	//                |ИЗ
//	//                |	(ВЫБРАТЬ
//	//                |		ВЫБОР
//	//                |			КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.БроньДилера)
//	//                |				ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//                |			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//                |		КОНЕЦ КАК БроньДилера,
//	//                |		ВЫБОР
//	//                |			КОГДА Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.Scan_КлючевыеДаты.ДатаПродажиИзделия)
//	//                |				ТОГДА Scan_КлючевыеДатыПроцессов.Значение
//	//                |			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
//	//                |		КОНЕЦ КАК ДатаПродажиИзделия,
//	//                |		Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие КАК Изделие
//	//                |	ИЗ
//	//                |		РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
//	//                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	//                |			ПО Scan_КлючевыеДатыПроцессов.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	//                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	//                |			ПО Scan_КлючевыеДатыПроцессов.Объект.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	//                |	ГДЕ
//	//                |		Scan_КлючевыеДатыПроцессов.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	//                |		И Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты В(&Вид)
//	//                |		И Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	//                |		И Scan_КлючевыеДатыПроцессов.Значение <> ДАТАВРЕМЯ(1, 1, 1)) КАК ВременнаяТаблица
//	//                |
//	//                |СГРУППИРОВАТЬ ПО
//	//                |	ВременнаяТаблица.Изделие
//	//                |
//	//                |ИМЕЮЩИЕ
//	//                |	МАКСИМУМ(ВременнаяТаблица.БроньДилера) <> ДАТАВРЕМЯ(1, 1, 1) И
//	//                |	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) <> ДАТАВРЕМЯ(1, 1, 1)
//	//                |;
//	//                |
//	//                |////////////////////////////////////////////////////////////////////////////////
//	//                |ВЫБРАТЬ
//	//                |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	//                |	КОЛИЧЕСТВО(ВременнаяТаблица1.Изделие) КАК Количество,
//	//                |	ВременнаяТаблица1.Изделие КАК Изделие
//	//                |ИЗ
//	//                |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//                |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица1 КАК ВременнаяТаблица1
//	//                |		ПО (ВременнаяТаблица1.БроньДилера <> КалендарныеГрафики.ДатаГрафика)
//	//                |			И (ВременнаяТаблица1.ДатаПродажиИзделия = КалендарныеГрафики.ДатаГрафика)
//	//                |ГДЕ
//	//                |	КалендарныеГрафики.ДеньВключенВГрафик
//	//                |	И КалендарныеГрафики.Год = &ГодОтчета
//	//                |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	//                |
//	//                |СГРУППИРОВАТЬ ПО
//	//                |	КалендарныеГрафики.ДатаГрафика,
//	//                |	ВременнаяТаблица1.Изделие" ;
//	Запрос.Текст =  "ВЫБРАТЬ
//	                |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
//	                |	КОЛИЧЕСТВО(ВременнаяТаблица1.Изделие) КАК Количество,
//	                |	ВременнаяТаблица1.Изделие КАК Изделие
//	                |ИЗ
//	                |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица1 КАК ВременнаяТаблица1
//	                |		ПО (ВременнаяТаблица1.БроньДилера <> КалендарныеГрафики.ДатаГрафика)
//	                |			И (ВременнаяТаблица1.ДатаПродажиИзделия = КалендарныеГрафики.ДатаГрафика)
//	                |ГДЕ
//	                |	КалендарныеГрафики.ДеньВключенВГрафик
//	                |	И КалендарныеГрафики.Год = &ГодОтчета
//	                |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	КалендарныеГрафики.ДатаГрафика,
//	                |	ВременнаяТаблица1.Изделие" ;
//	
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	//Запрос.УстановитьПараметр("Вид", ВидКлючевойДаты);
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	//rarus vikhle 28.02.2020 mt 15409 ---
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	НоваяСтрока = ДанныеСобств.Добавить();
//	НоваяСтрока.Наименование = "Additional Sales";
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Additional Sales";
//	Иначе
//		НоваяСтрока.Наименование = "Дополнительные отгрузки";
//	КонецЕсли;	
//	
//	Итого = 0;
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Итого = Итого + Выборка.Количество;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	//rarus vikhle 04.03.2020 mt 15409 +++
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	Scan_КлючевыеДатыПроцессов.Значение КАК РабочийДень,
//	//               |	КОЛИЧЕСТВО(ЕСТЬNULL(Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие, 0)) КАК Количество
//	//               |ИЗ
//	//               |	РегистрСведений.Scan_КлючевыеДатыПроцессов КАК Scan_КлючевыеДатыПроцессов
//	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	//               |		ПО Scan_КлючевыеДатыПроцессов.Объект.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(&НаДату, ) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	//               |		ПО Scan_КлючевыеДатыПроцессов.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.ЗаказНаЗавод
//	//               |ГДЕ
//	//               |	Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	//               |	И Scan_КлючевыеДатыПроцессов.Значение >= НАЧАЛОПЕРИОДА(&НаДату, ДЕНЬ)
//	//               |	И Scan_КлючевыеДатыПроцессов.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
//	//               |	И Scan_КлючевыеДатыПроцессов.ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.scan_ключевыедаты.броньдилера)
//	//               |
//	//               |СГРУППИРОВАТЬ ПО
//	//               |	Scan_КлючевыеДатыПроцессов.Значение";
//	
//	//rarus vikhle 08.05.2020 mt 15409 добавлены параметры по виду продукта виртуальной таблицы Scan_ВзаимосвязьИзделийИЗаказов
//	ТекстЗапроса = "ВЫБРАТЬ
//	               |	Scan_КлючевыеДатыПроцессовСрезПоследних.Значение КАК РабочийДень,
//	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие, 0)) КАК Количество
//	               |ИЗ
//	               |	РегистрСведений.Scan_КлючевыеДатыПроцессов.СрезПоследних(, ВидКлючевойДаты = ЗНАЧЕНИЕ(Перечисление.scan_КлючевыеДаты.БроньДилера)) КАК Scan_КлючевыеДатыПроцессовСрезПоследних
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьКомпанийСКонтрагентами.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, МЕСЯЦ), ) КАК Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних
//	               |		ПО Scan_КлючевыеДатыПроцессовСрезПоследних.Объект.ЗаказНаЗавод.Заказчик = Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Контрагент
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Scan_ВзаимосвязьИзделийИЗаказов.СрезПоследних(
//	               |				КОНЕЦПЕРИОДА(&НаДату, МЕСЯЦ),
//	               |				&ВидПродукта = ЗНАЧЕНИЕ(Справочник.Scan_ВидыПродуктов.ПустаяСсылка)
//	               |					ИЛИ Изделие.ТипПродукта.ВидПродукта = &ВидПродукта) КАК Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних
//	               |		ПО Scan_КлючевыеДатыПроцессовСрезПоследних.Объект = Scan_ВзаимосвязьИзделийИЗаказовСрезПоследних.Изделие
//	               |ГДЕ
//	               |	Scan_ВзаимосвязьКомпанийСКонтрагентамиСрезПоследних.Компания.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	               |	И Scan_КлючевыеДатыПроцессовСрезПоследних.Значение МЕЖДУ &НаДату И КОНЕЦПЕРИОДА(&НаДату, МЕСЯЦ)
//	               |	И Scan_КлючевыеДатыПроцессовСрезПоследних.Значение В(&РабочиеДни)
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	Scan_КлючевыеДатыПроцессовСрезПоследних.Значение";
//	//rarus vikhle 04.03.2020 mt 15409 ---
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("РабочиеДни",тзРабочиеДни);//rarus vikhle 04.03.2020 mt 15409
//	Запрос.УстановитьПараметр("ВидПродукта",ВидПродукта);//rarus vikhle 08.05.2020 mt 15409
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату)); //rarus vikhle 04.03.2020 mt 15409
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));//rarus vikhle 04.03.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	

//	НоваяСтрока = ДанныеСобств.Добавить();
//	Если ВыборЯзыка = 0 Тогда
//		НоваяСтрока.Наименование = "Booking";
//	Иначе
//		НоваяСтрока.Наименование = "Отгружено/забронировано";
//	КонецЕсли;	
//	                                                                                             
//	Итого = 0;
//	ДеньЧисло = День(НаДату) - 1;
//	Для Индекс = 1 По ДеньЧисло Цикл
//		Если ДанныеСобств.Колонки.Найти("Д" + Строка(Индекс)) = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		ЗначениеActualDeliveries = ДанныеСобств[2]["Д" + Строка(Индекс)];
//		ЗначениеAdditionalSales = ДанныеСобств[3]["Д" + Строка(Индекс)];
//		ЗначениеBooking = ЗначениеActualDeliveries + ЗначениеAdditionalSales;
//		НоваяСтрока["Д" + Строка(Индекс)] = ЗначениеBooking;
//		Итого = Итого + ЗначениеBooking;
//	КонецЦикла;
//	
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
//		Итого = Итого + Выборка.Количество;
//	КонецЦикла;
//	НоваяСтрока.Итого = Итого;
//	
//	ДанныеСобств.Сдвинуть(НоваяСтрока,-2); 
//КонецПроцедуры
////rarus pechek 25.02.2020 mantis 15409 ---

//Процедура СформироватьОтчетПолный2(ДокументРезультат)	
//	ДокументРезультат = Новый ТабличныйДокумент;
//	Макет = ПолучитьМакет("Макет");
//	
//	ДанныеОбщ = ПолучитьОбщиеДанные();	
//	Разделитель = Макет.ПолучитьОбласть("Разделитель");
//	
//	График = Макет.ПолучитьОбласть("График");
//	Диаграмма = График.Рисунки.D1.Объект;    
//	
//	//rarus vikhle 27.02.2020 mt 15409 +++	
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И КалендарныеГрафики.Год = &ГодПланирования
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
//	//               |
//	//               |УПОРЯДОЧИТЬ ПО
//	//               |	РабочийДень";
//	ТекстЗапроса = "ВЫБРАТЬ
//	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	               |ПОМЕСТИТЬ втРабочиеДни
//	               |ИЗ
//	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	               |ГДЕ
//	               |	КалендарныеГрафики.ДеньВключенВГрафик
//	               |	И КалендарныеГрафики.Год = &ГодОтчета
//	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	втРабочиеДни.РабочийДень КАК РабочийДень
//	               |ИЗ
//	               |	втРабочиеДни КАК втРабочиеДни
//	               |
//	               |УПОРЯДОЧИТЬ ПО
//	               |	РабочийДень";
//	//rarus vikhle 27.02.2020 mt 15409 ---
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; //rarus vikhle 27.02.2020 mt 15409
//	Запрос.УстановитьПараметр("ГодОтчета",Год(НаДату));
//	Запрос.УстановитьПараметр("МесяцОтчета",Месяц(НаДату));
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	Диаграмма.Обновление = Ложь;
//	Диаграмма.Очистить();
//	Диаграмма.АвтоТранспонирование = Ложь;
//	
//	Диаграмма.ОтображатьЗаголовок = Истина;
//	Диаграмма.ОбластьЗаголовка.Лево = Истина;
//	Диаграмма.ОбластьЗаголовка.Верх = Истина;
//	Если ВыборЯзыка = 0 Тогда
//		Диаграмма.ОбластьЗаголовка.Текст = "SRG Deliveries " + Формат(НаДату,"Л=en;ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
//	Иначе
//		Диаграмма.ОбластьЗаголовка.Текст = "SRG Deliveries " + Формат(НаДату,"ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
//	КонецЕсли;
//	
//	Диаграмма.Серии.Добавить(ДанныеОбщ[0].Наименование);
//	Диаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
//	Диаграмма.Серии[0].Цвет = Новый Цвет(68,114,196);
//	Выборка.Сбросить();
//	Пока Выборка.Следующий() Цикл
//		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[0], ДанныеОбщ[0]["Д" + Строка(День(Выборка.РабочийДень))], );
//	КонецЦикла;
//	Диаграмма.Серии.Добавить(ДанныеОбщ[1].Наименование);
//	Диаграмма.Серии[1].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
//	Диаграмма.Серии[1].Маркер = ТипМаркераДиаграммы.Нет;
//	Диаграмма.Серии[1].Цвет = Новый Цвет(0,176,80);
//	Выборка.Сбросить();
//	НакопленноеЗначение = 0; //rarus vikhle 27.02.2020 mt 15409  
//	Пока Выборка.Следующий() Цикл
//		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//		//rarus vikhle 27.02.2020 mt 15409 +++ 
//		НакопленноеЗначение = НакопленноеЗначение + ДанныеОбщ[1]["Д" + Строка(День(Выборка.РабочийДень))];
//		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1],НакопленноеЗначение);
//		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1], ДанныеОбщ[1]["Д" + Строка(День(Выборка.РабочийДень))], );
//		//rarus vikhle 27.02.2020 mt 15409 ---
//	КонецЦикла;
//	Диаграмма.Серии.Добавить(ДанныеОбщ[2].Наименование);
//	Диаграмма.Серии[2].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
//	Диаграмма.Серии[2].Маркер = ТипМаркераДиаграммы.Нет;
//	Диаграмма.Серии[2].Цвет = Новый Цвет(169,209,142);
//	Выборка.Сбросить();
//	НакопленноеЗначение = 0; //rarus vikhle 27.02.2020 mt 15409
//	Пока Выборка.Следующий() Цикл
//		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//		//rarus vikhle 27.02.2020 mt 15409 +++
//		НакопленноеЗначение = НакопленноеЗначение + ДанныеОбщ[2]["Д" + Строка(День(Выборка.РабочийДень))];
//		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2],НакопленноеЗначение);
//		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2], ДанныеОбщ[2]["Д" + Строка(День(Выборка.РабочийДень))], );
//		//rarus vikhle 27.02.2020 mt 15409 ---
//	КонецЦикла;
//	Диаграмма.Серии.Добавить(ДанныеОбщ[3].Наименование);
//	Диаграмма.Серии[3].Маркер = ТипМаркераДиаграммы.Нет;
//	Диаграмма.Серии[3].Цвет = Новый Цвет(132,151,176);
//	Выборка.Сбросить();
//	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
//	Пока Выборка.Следующий() Цикл
//		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//		//rarus vikhle 27.02.2020 mt 15409 +++
//		НакопленноеЗначение = НакопленноеЗначение + ДанныеОбщ[3]["Д" + Строка(День(Выборка.РабочийДень))];
//		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3],НакопленноеЗначение);
//		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3], ДанныеОбщ[3]["Д" + Строка(День(Выборка.РабочийДень))], );
//		//rarus vikhle 27.02.2020 mt 15409 ---
//	КонецЦикла;
//	Диаграмма.Серии.Добавить(ДанныеОбщ[4].Наименование);
//	Диаграмма.Серии[4].Маркер = ТипМаркераДиаграммы.Нет;
//	Диаграмма.Серии[4].Цвет = Новый Цвет(197,90,17);
//	Выборка.Сбросить();
//	НакопленноеЗначение = 0; //rarus vikhle 27.02.2020 mt 15409
//	Пока Выборка.Следующий() Цикл
//		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//		//rarus vikhle 27.02.2020 mt 15409 +++
//		НакопленноеЗначение = НакопленноеЗначение + ДанныеОбщ[4]["Д" + Строка(День(Выборка.РабочийДень))];
//		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4],НакопленноеЗначение);
//		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4], ДанныеОбщ[4]["Д" + Строка(День(Выборка.РабочийДень))], );
//		//rarus vikhle 27.02.2020 mt 15409 ---
//	КонецЦикла;
//	
//	Диаграмма.АвтоТранспонирование = Истина;
//	Диаграмма.Обновление = Истина;
//	ДокументРезультат.Вывести(График);
//	
//	// SRG маленькая таблица
//	
//	SRGTotalНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
//	SRGTotalРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
//	
//	SRGDeliveryPerDayНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
//	SRGDeliveryPerDayРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
//	/////
//	//rarus vikhle 27.02.2020 mt 15409 +++	
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК КолонкаДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.Год = &ГодОтчета
//	//               |	И КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	//               |
//	//               |УПОРЯДОЧИТЬ ПО
//	//               |	КолонкаДень";                                
//	//
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Выборка = РезультатЗапроса.Выбрать();
//	//rarus vikhle 27.02.2020 mt 15409 ---
//	Выборка.Сбросить();
//	//Пока Выборка.Следующий() Цикл //rarus vikhle 27.02.2020 mt 15409
//		DaysInMonthРез = Выборка.Количество();
//	//КонецЦикла;//rarus vikhle 27.02.2020 mt 15409
//	//
//	Запрос.Текст =   "ВЫБРАТЬ ПЕРВЫЕ 1
//	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК ПланМесяц
//	                 |ПОМЕСТИТЬ ВременнаяТаблица
//	                 |ИЗ
//	                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	                 |ГДЕ
//	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
//	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
//	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета
//	                 |;
//	                 |
//	                 |////////////////////////////////////////////////////////////////////////////////
//	                 |ВЫБРАТЬ ПЕРВЫЕ 1
//	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК ПланМесяц
//	                 |ПОМЕСТИТЬ ВременнаяТаблица1
//	                 |ИЗ
//	                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	                 |ГДЕ
//	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
//	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета
//	                 |;
//	                 |
//	                 |////////////////////////////////////////////////////////////////////////////////
//	                 |ВЫБРАТЬ
//	                 |	ВременнаяТаблица.ПланМесяц + ВременнаяТаблица1.ПланМесяц КАК Количество
//	                 |ИЗ
//	                 |	ВременнаяТаблица КАК ВременнаяТаблица,
//	                 |	ВременнаяТаблица1 КАК ВременнаяТаблица1";
//	//Запрос = Новый Запрос(ТекстЗапроса);//rarus vikhle 27.02.2020 mt 15409
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));//rarus vikhle 27.02.2020 mt 15409
//    //Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));//rarus vikhle 27.02.2020 mt 15409
//	РезультатЗапроса = Запрос.Выполнить().Выбрать();
//	Если ВыборЯзыка = 0 Тогда
//		SRGTotalНаименование.Параметры.Наименование = "Total";
//	Иначе
//		SRGTotalНаименование.Параметры.Наименование = "Итого";
//	КонецЕсли;
//	ДокументРезультат.Вывести(SRGTotalНаименование);
//	
//	Пока РезультатЗапроса.Следующий() Цикл
//		SRGTotalРез = РезультатЗапроса.Количество;
//		Если ЗначениеЗаполнено(SRGTotalРез) Тогда
//			SRGTotalРезультат.Параметры.Данные = SRGTotalРез;
//		Иначе 
//			SRGTotalРезультат.Параметры.Данные = "0";
//		КонецЕсли;
//	КонецЦикла;	
//	ДокументРезультат.Присоединить(SRGTotalРезультат); 
//	//
//	Если ВыборЯзыка = 0 Тогда
//		SRGDeliveryPerDayНаименование.Параметры.Наименование = "Delivery per day";
//	Иначе
//		SRGDeliveryPerDayНаименование.Параметры.Наименование = "В среднем на день";
//	КонецЕсли;
//	ДокументРезультат.Вывести(SRGDeliveryPerDayНаименование);
//	Если ЗначениеЗаполнено(DaysInMonthРез) и ЗначениеЗаполнено(SRGTotalРез) Тогда
//		Если  Окр(SRGTotalРез/DaysInMonthРез,0,0) = 0 Тогда
//			SRGDeliveryPerDayРезультат.Параметры.Данные = "1";
//		Иначе
//			SRGDeliveryPerDayРезультат.Параметры.Данные = Окр(SRGTotalРез/DaysInMonthРез,0,0);
//		КонецЕсли;
//	Иначе
//		SRGDeliveryPerDayРезультат.Параметры.Данные = "0";
//	КонецЕсли;
//	ДокументРезультат.Присоединить(SRGDeliveryPerDayРезультат);
//	
//	ДокументРезультат.Вывести(Разделитель);	
//	
//	//rarus vikhle 27.02.2020 mt 15409 +++	
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И КалендарныеГрафики.Год = &ГодПланирования
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
//	//               |
//	//               |УПОРЯДОЧИТЬ ПО
//	//               |	РабочийДень";
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	втРабочиеДни.РабочийДень КАК РабочийДень
//	               |ИЗ
//	               |	втРабочиеДни КАК втРабочиеДни
//	               |
//	               |УПОРЯДОЧИТЬ ПО
//	               |	РабочийДень";
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
//	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
//	//rarus vikhle 27.02.2020 mt 15409 ---
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Выборка.Сбросить();
//	
//	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьНаименование");
//	ОбластьКолонкаДень = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаДень");
//	ОбластьКолонкаИтого = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаИтого");
//	ДокументРезультат.Вывести(ОбластьШапка);
//	Пока Выборка.Следующий() Цикл
//		ОбластьКолонкаДень.Параметры.КолонкаДень = Формат(Выборка.РабочийДень,"ДФ=dd.MM");
//		ДокументРезультат.Присоединить(ОбластьКолонкаДень);
//	КонецЦикла;
//	Если ВыборЯзыка = 0 Тогда
//		ОбластьКолонкаИтого.Параметры.Total = "Total";
//	Иначе
//		ОбластьКолонкаИтого.Параметры.Total = "Итого";
//	КонецЕсли;
//	
//	ДокументРезультат.Присоединить(ОбластьКолонкаИтого);
//	
//	
//	Индекс = 0;
//	Для Каждого СтрокаДанныеОбщ Из ДанныеОбщ Цикл
//		ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
//		СтрокаНаименование = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьНаименование");
//		СтрокаДниЗначение = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаДень");
//		СтрокаИтого = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаИтого");
//		Выборка.Сбросить();
//		СтрокаНаименование.Параметры.Наименование = СтрокаДанныеОбщ.Наименование;
//		ДокументРезультат.Вывести(СтрокаНаименование);
//		Пока Выборка.Следующий() Цикл
//			Значение = СтрокаДанныеОбщ["Д" + Строка(День(Выборка.РабочийДень))];
//			СтрокаДниЗначение.Параметры.Количество = Значение;
//			ДокументРезультат.Присоединить(СтрокаДниЗначение);
//		КонецЦикла;
//		СтрокаИтого.Параметры.Итого = СтрокаДанныеОбщ["Итого"];
//		ДокументРезультат.Присоединить(СтрокаИтого); 
//		Индекс = Индекс + 1;
//	КонецЦикла;
//	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();//rarus vikhle 05.03.2020 mt 15409
//	//rarus vikhle 28.02.2020 mt 15409 +++
//	// Независимый дилер
//	СформироватьОтчетНезависимый(ДокументРезультат, Истина);
//	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();//rarus vikhle 05.03.2020 mt 15409
//	// Собственный дилер
//	СформироватьОтчетСобственный(ДокументРезультат, Истина);
//	#Область ПовторныйКодНезависимыйДилер 
//	//Данные = Неопределено;	
//	//ЗаполнитьДанные(Данные);	
//	//Разделитель = Макет.ПолучитьОбласть("Разделитель");
//	//
//	//График = Макет.ПолучитьОбласть("График");
//	//Диаграмма=График.Рисунки.D1.Объект;    
//	//
//	//
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И КалендарныеГрафики.Год = &ГодПланирования
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
//	//               |
//	//               |УПОРЯДОЧИТЬ ПО
//	//               |	РабочийДень";
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
//	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Выборка = РезультатЗапроса.Выбрать();
//	//
//	//Диаграмма.Обновление = Ложь;
//	//Диаграмма.Очистить();
//	//Диаграмма.АвтоТранспонирование = Ложь;
//	//
//	//Диаграмма.ОтображатьЗаголовок = Истина;
//	//Диаграмма.ОбластьЗаголовка.Лево = Истина;
//	//Диаграмма.ОбластьЗаголовка.Верх = Истина;
//	//Если ВыборЯзыка = 0 Тогда
//	//	Диаграмма.ОбластьЗаголовка.Текст = "SRU Deliveries " + Формат(НаДату,"Л=en;ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
//	//Иначе
//	//	Диаграмма.ОбластьЗаголовка.Текст = "SRU Deliveries " + Формат(НаДату,"ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
//	//КонецЕсли;
//	//
//	//Диаграмма.Серии.Добавить(Данные[0].Наименование);
//	//Диаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[0].Цвет = Новый Цвет(68,114,196);
//	//Выборка.Сбросить();
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[0], Данные[0]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//КонецЦикла;
//	//Диаграмма.Серии.Добавить(Данные[1].Наименование);
//	//Диаграмма.Серии[1].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
//	//Диаграмма.Серии[1].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[1].Цвет = Новый Цвет(0,176,80);
//	//Выборка.Сбросить();
//	//НакопленноеЗначение = 0;// rarus vikhle 27.02.2020 mt 15409 
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	//rarus vikhle 27.02.2020 mt 15409 +++
//	//	НакопленноеЗначение = НакопленноеЗначение + Данные[1]["Д" + Строка(День(Выборка.РабочийДень))];
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1],НакопленноеЗначение);
//	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1], Данные[1]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//	//rarus vikhle 27.02.2020 mt 15409 ---
//	//КонецЦикла;
//	//Диаграмма.Серии.Добавить(Данные[2].Наименование);
//	//Диаграмма.Серии[2].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
//	//Диаграмма.Серии[2].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[2].Цвет = Новый Цвет(169,209,142);
//	//Выборка.Сбросить();
//	//НакопленноеЗначение = 0;// //rarus vikhle 27.02.2020 mt 15409
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	//rarus vikhle 27.02.2020 mt 15409 +++
//	//	НакопленноеЗначение = НакопленноеЗначение + Данные[2]["Д" + Строка(День(Выборка.РабочийДень))];
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2],НакопленноеЗначение); 
//	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2], Данные[2]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//	//rarus vikhle 27.02.2020 mt 15409 ---
//	//КонецЦикла;
//	//Диаграмма.Серии.Добавить(Данные[3].Наименование);
//	//Диаграмма.Серии[3].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[3].Цвет = Новый Цвет(132,151,176);
//	//Выборка.Сбросить();
//	//НакопленноеЗначение = 0;// //rarus vikhle 27.02.2020 mt 15409	
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	//rarus vikhle 27.02.2020 mt 15409 +++
//	//	НакопленноеЗначение = НакопленноеЗначение + Данные[3]["Д" + Строка(День(Выборка.РабочийДень))];
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3],НакопленноеЗначение);
//	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3], Данные[3]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//	//rarus vikhle 27.02.2020 mt 15409 ---
//	//КонецЦикла;
//	//Диаграмма.Серии.Добавить(Данные[4].Наименование);
//	//Диаграмма.Серии[4].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[4].Цвет = Новый Цвет(197,90,17);
//	//Выборка.Сбросить();
//	//НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	//rarus vikhle 27.02.2020 mt 15409 +++
//	//	НакопленноеЗначение = НакопленноеЗначение + Данные[4]["Д" + Строка(День(Выборка.РабочийДень))];
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4],НакопленноеЗначение);
//	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4], Данные[4]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//	//rarus vikhle 27.02.2020 mt 15409 ---
//	//КонецЦикла;
//	//
//	//Диаграмма.АвтоТранспонирование = Истина;
//	//Диаграмма.Обновление = Истина;
//	//ДокументРезультат.Вывести(График);
//	//
//	//// SRU маленькая таблица
//	//DaysInMonthНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
//	//DaysInMonthРезультат= Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
//	//
//	//SRUTotalНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
//	//SRUTotalРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
//	//
//	//SRUDeliveryPerDayНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
//	//SRUDeliveryPerDayРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
//	///////
//	//
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК КолонкаДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.Год = &ГодОтчета
//	//               |	И КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
//	//               |
//	//               |УПОРЯДОЧИТЬ ПО
//	//               |	КолонкаДень";                                
//	//
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Выборка = РезультатЗапроса.Выбрать();
//	//Если ВыборЯзыка = 0 Тогда
//	//	DaysInMonthНаименование.Параметры.Наименование = "Days in month"; 
//	//Иначе
//	//	DaysInMonthНаименование.Параметры.Наименование = "Количество рабочих дней в месяце"; 
//	//КонецЕсли;
//	//ДокументРезультат.Вывести(DaysInMonthНаименование);
//	//Выборка.Сбросить();
//	//Пока Выборка.Следующий() Цикл
//	//	DaysInMonthРез = Выборка.Количество();
//	//	DaysInMonthРезультат.Параметры.Данные = DaysInMonthРез;
//	//КонецЦикла;
//	//ДокументРезультат.Присоединить(DaysInMonthРезультат); 
//	////
//	//ТекстЗапроса =   "ВЫБРАТЬ ПЕРВЫЕ 1
//	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК Количество
//	//                 |ИЗ
//	//                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	//                 |ГДЕ
//	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
//	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
//	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета";
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
//	//Если ВыборЯзыка = 0 Тогда
//	//	SRUTotalНаименование.Параметры.Наименование = "SRU Total";
//	//Иначе
//	//	SRUTotalНаименование.Параметры.Наименование = "Итого independent";
//	//КонецЕсли;

//	//ДокументРезультат.Вывести(SRUTotalНаименование);
//	//
//	//Пока РезультатЗапроса.Следующий() Цикл
//	//	SRUTotalРез = РезультатЗапроса.Количество;
//	//	Если ЗначениеЗаполнено(SRUTotalРез) Тогда
//	//		SRUTotalРезультат.Параметры.Данные = SRUTotalРез;
//	//	Иначе 
//	//		SRUTotalРезультат.Параметры.Данные = "0";
//	//	КонецЕсли;
//	//КонецЦикла;	
//	//ДокументРезультат.Присоединить(SRUTotalРезультат); 
//	////
//	//Если ВыборЯзыка = 0 Тогда
//	//	SRUDeliveryPerDayНаименование.Параметры.Наименование = "Delivery per day";
//	//Иначе
//	//	SRUDeliveryPerDayНаименование.Параметры.Наименование = "В среднем на день";
//	//КонецЕсли;

//	//ДокументРезультат.Вывести(SRUDeliveryPerDayНаименование);
//	//Если ЗначениеЗаполнено(DaysInMonthРез) и ЗначениеЗаполнено(SRUTotalРез) Тогда
//	//	Если Окр(SRUTotalРез/DaysInMonthРез,0,0) = 0 Тогда
//	//		SRUDeliveryPerDayРезультат.Параметры.Данные = "1";
//	//	Иначе
//	//		SRUDeliveryPerDayРезультат.Параметры.Данные = Окр(SRUTotalРез/DaysInMonthРез,0,0);
//	//	КонецЕсли;
//	//Иначе
//	//	SRUDeliveryPerDayРезультат.Параметры.Данные = "0";
//	//КонецЕсли;
//	//ДокументРезультат.Присоединить(SRUDeliveryPerDayРезультат);
//	//
//	//ДокументРезультат.Вывести(Разделитель);	
//	//
//	//
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И КалендарныеГрафики.Год = &ГодПланирования
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
//	//               |
//	//               |УПОРЯДОЧИТЬ ПО
//	//               |	РабочийДень";
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
//	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Выборка = РезультатЗапроса.Выбрать();
//	//Выборка.Сбросить();
//	//
//	//ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьНаименование");
//	//ОбластьКолонкаДень = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаДень");
//	//ОбластьКолонкаИтого = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаИтого");
//	//ДокументРезультат.Вывести(ОбластьШапка);
//	//Пока Выборка.Следующий() Цикл
//	//	ОбластьКолонкаДень.Параметры.КолонкаДень = Формат(Выборка.РабочийДень,"ДФ=dd.MM");
//	//	ДокументРезультат.Присоединить(ОбластьКолонкаДень);
//	//КонецЦикла;
//	//Если ВыборЯзыка = 0 Тогда
//	//	ОбластьКолонкаИтого.Параметры.Total = "Total";
//	//Иначе
//	//	ОбластьКолонкаИтого.Параметры.Total = "Итого";
//	//КонецЕсли;
//	//
//	//ДокументРезультат.Присоединить(ОбластьКолонкаИтого);
//	//
//	//
//	//Индекс = 0;
//	//Для Каждого СтрокаДанные Из Данные Цикл
//	//	ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
//	//	СтрокаНаименование = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьНаименование");
//	//	СтрокаДниЗначение = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаДень");
//	//	СтрокаИтого = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаИтого");
//	//	Выборка.Сбросить();
//	//	СтрокаНаименование.Параметры.Наименование = СтрокаДанные.Наименование;
//	//	ДокументРезультат.Вывести(СтрокаНаименование);
//	//	Пока Выборка.Следующий() Цикл
//	//		Значение = СтрокаДанные["Д" + Строка(День(Выборка.РабочийДень))];
//	//		СтрокаДниЗначение.Параметры.Количество = Значение;
//	//		ДокументРезультат.Присоединить(СтрокаДниЗначение);
//	//	КонецЦикла;
//	//	СтрокаИтого.Параметры.Итого = СтрокаДанные["Итого"];
//	//	ДокументРезультат.Присоединить(СтрокаИтого); 
//	//	Индекс = Индекс + 1;
//	//КонецЦикла;
//#КонецОбласти	

//#Область ПовторныйКодСобственныйДилер	
//	//ДанныеСобств = Неопределено;	
//	//ЗаполнитьДанныеСобственный(ДанныеСобств);	
//	//
//	//Разделитель = Макет.ПолучитьОбласть("Разделитель");
//	//
//	//График = Макет.ПолучитьОбласть("График");
//	//Диаграмма=График.Рисунки.D1.Объект;    
//	//
//	//
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И КалендарныеГрафики.Год = &ГодПланирования
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
//	//               |
//	//               |УПОРЯДОЧИТЬ ПО
//	//               |	РабочийДень";
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
//	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Выборка = РезультатЗапроса.Выбрать();
//	//
//	//Диаграмма.Обновление = Ложь;
//	//Диаграмма.Очистить();
//	//Диаграмма.АвтоТранспонирование = Ложь;
//	//
//	//Диаграмма.ОтображатьЗаголовок = Истина;
//	//Диаграмма.ОбластьЗаголовка.Лево = Истина;
//	//Диаграмма.ОбластьЗаголовка.Верх = Истина;
//	//Если ВыборЯзыка = 0 Тогда
//	//	Диаграмма.ОбластьЗаголовка.Текст = "SSG Deliveries " + Формат(НаДату,"Л=en;ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
//	//Иначе
//	//	Диаграмма.ОбластьЗаголовка.Текст = "SSG Deliveries " + Формат(НаДату,"ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
//	//КонецЕсли;
//	//
//	//Диаграмма.Серии.Добавить(ДанныеСобств[0].Наименование);
//	//Диаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[0].Цвет = Новый Цвет(68,114,196);
//	//Выборка.Сбросить();
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[0], ДанныеСобств[0]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//КонецЦикла;
//	//Диаграмма.Серии.Добавить(ДанныеСобств[1].Наименование);
//	//Диаграмма.Серии[1].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
//	//Диаграмма.Серии[1].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[1].Цвет = Новый Цвет(0,176,80);
//	//Выборка.Сбросить();
//	//НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	//rarus vikhle 27.02.2020 mt 15409 +++
//	//	НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[1]["Д" + Строка(День(Выборка.РабочийДень))];
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1],НакопленноеЗначение);
//	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1], ДанныеСобств[1]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//	//rarus vikhle 27.02.2020 mt 15409 ---
//	//КонецЦикла;
//	//
//	//Диаграмма.Серии.Добавить(ДанныеСобств[2].Наименование);
//	//Диаграмма.Серии[2].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[2].Цвет = Новый Цвет(132,151,176);
//	//Выборка.Сбросить();
//	//НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	//rarus vikhle 27.02.2020 mt 15409 +++
//	//	НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[2]["Д" + Строка(День(Выборка.РабочийДень))];
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2],НакопленноеЗначение);
//	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2], ДанныеСобств[2]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//	//rarus vikhle 27.02.2020 mt 15409 ---
//	//КонецЦикла;
//	//Диаграмма.Серии.Добавить(ДанныеСобств[3].Наименование);
//	//Диаграмма.Серии[3].Маркер = ТипМаркераДиаграммы.Нет;
//	//Диаграмма.Серии[3].Цвет = Новый Цвет(197,90,17);
//	//Выборка.Сбросить();
//	//НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
//	//Пока Выборка.Следующий() Цикл
//	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
//	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
//	//	//rarus vikhle 27.02.2020 mt 15409 +++
//	//	НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[3]["Д" + Строка(День(Выборка.РабочийДень))];
//	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3],НакопленноеЗначение);
//	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3], ДанныеСобств[3]["Д" + Строка(День(Выборка.РабочийДень))], );
//	//	//rarus vikhle 27.02.2020 mt 15409 ---
//	//КонецЦикла;
//	//
//	//Диаграмма.АвтоТранспонирование = Истина;
//	//Диаграмма.Обновление = Истина;
//	//ДокументРезультат.Вывести(График);
//	//
//	//// SSG маленькая таблица
//	//
//	//SSGTotalНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
//	//SSGTotalРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
//	//
//	//SSGDeliveryPerDayНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
//	//SSGDeliveryPerDayРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
//	////
//	//ТекстЗапроса =   "ВЫБРАТЬ ПЕРВЫЕ 1
//	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК Количество
//	//                 |ИЗ
//	//                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
//	//                 |ГДЕ
//	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
//	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
//	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета";
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
//	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
//	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
//	//Если ВыборЯзыка = 0 Тогда
//	//	SSGTotalНаименование.Параметры.Наименование = "SSG Total";
//	//Иначе
//	//	SSGTotalНаименование.Параметры.Наименование = "Итого Captive";
//	//КонецЕсли;

//	//ДокументРезультат.Вывести(SSGTotalНаименование);
//	//
//	//Пока РезультатЗапроса.Следующий() Цикл
//	//	SSGTotalРез = РезультатЗапроса.Количество;
//	//	Если ЗначениеЗаполнено(SSGTotalРез) Тогда
//	//		SSGTotalРезультат.Параметры.Данные = SSGTotalРез;
//	//	Иначе 
//	//		SSGTotalРезультат.Параметры.Данные = "0";
//	//	КонецЕсли;
//	//КонецЦикла;	
//	//ДокументРезультат.Присоединить(SSGTotalРезультат); 
//	////
//	//Если ВыборЯзыка = 0 Тогда
//	//	SSGDeliveryPerDayНаименование.Параметры.Наименование = "Delivery per day";
//	//Иначе
//	//	SSGDeliveryPerDayНаименование.Параметры.Наименование = "В среднем на день";
//	//КонецЕсли;

//	//ДокументРезультат.Вывести(SSGDeliveryPerDayНаименование);
//	//Если ЗначениеЗаполнено(DaysInMonthРез) и ЗначениеЗаполнено(SSGTotalРез) Тогда
//	//	Если Окр(SSGTotalРез/DaysInMonthРез,0,0) = 0 Тогда
//	//		SSGDeliveryPerDayРезультат.Параметры.Данные = "1";
//	//	Иначе
//	//		SSGDeliveryPerDayРезультат.Параметры.Данные = Окр(SSGTotalРез/DaysInMonthРез,0,0);
//	//	КонецЕсли;
//	//Иначе
//	//	SSGDeliveryPerDayРезультат.Параметры.Данные = "0";
//	//КонецЕсли;
//	//ДокументРезультат.Присоединить(SSGDeliveryPerDayРезультат);
//	//
//	//ДокументРезультат.Вывести(Разделитель);	
//	//
//	//
//	//ТекстЗапроса = "ВЫБРАТЬ
//	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	//               |ИЗ
//	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	//               |ГДЕ
//	//               |	КалендарныеГрафики.ДеньВключенВГрафик
//	//               |	И КалендарныеГрафики.Год = &ГодПланирования
//	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
//	//               |
//	//               |УПОРЯДОЧИТЬ ПО
//	//               |	РабочийДень";
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
//	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Выборка = РезультатЗапроса.Выбрать();
//	//Выборка.Сбросить();
//	//
//	//ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьНаименование");
//	//ОбластьКолонкаДень = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаДень");
//	//ОбластьКолонкаИтого = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаИтого");
//	//ДокументРезультат.Вывести(ОбластьШапка);
//	//Пока Выборка.Следующий() Цикл
//	//	ОбластьКолонкаДень.Параметры.КолонкаДень = Формат(Выборка.РабочийДень,"ДФ=dd.MM");
//	//	ДокументРезультат.Присоединить(ОбластьКолонкаДень);
//	//КонецЦикла;
//	//Если ВыборЯзыка = 0 Тогда
//	//	ОбластьКолонкаИтого.Параметры.Total = "Total";
//	//Иначе
//	//	ОбластьКолонкаИтого.Параметры.Total = "Итого";
//	//КонецЕсли;

//	//ДокументРезультат.Присоединить(ОбластьКолонкаИтого);
//	//
//	//Индекс = 0;
//	//Для Каждого СтрокаДанныеСобств Из ДанныеСобств Цикл
//	//	ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
//	//	Если Индекс = 2  Тогда
//	//		Индекс = Индекс+1;
//	//		ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
//	//	КонецЕсли;
//	//	СтрокаНаименование = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьНаименование");
//	//	СтрокаДниЗначение = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаДень");
//	//	СтрокаИтого = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаИтого");
//	//	Выборка.Сбросить();
//	//	СтрокаНаименование.Параметры.Наименование = СтрокаДанныеСобств.Наименование;
//	//	ДокументРезультат.Вывести(СтрокаНаименование);
//	//	Пока Выборка.Следующий() Цикл
//	//		Значение = СтрокаДанныеСобств["Д" + Строка(День(Выборка.РабочийДень))];
//	//		СтрокаДниЗначение.Параметры.Количество = Значение;
//	//		ДокументРезультат.Присоединить(СтрокаДниЗначение);
//	//	КонецЦикла;
//	//	СтрокаИтого.Параметры.Итого = СтрокаДанныеСобств["Итого"];
//	//	ДокументРезультат.Присоединить(СтрокаИтого); 
//	//	Индекс = Индекс + 1;
//	//КонецЦикла;
//#КонецОбласти	

//	//rarus vikhle 28.02.2020 mt 15409 ---	
//КонецПроцедуры

#КонецОбласти

#Область Закомментированно
//rarus vikhle 27.02.2020 mt 15409 +++ закомментировал
//rarus pechek 25.02.2020 mantis 15409 +++
//Функция ПолучитьРабочихДней(ГодПланирования,МесяцПланирования) 	
//	ТекстЗапроса = "ВЫБРАТЬ
//	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
//	               |ИЗ
//	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	               |ГДЕ
//	               |	КалендарныеГрафики.ДеньВключенВГрафик
//	               |	И КалендарныеГрафики.Год = &ГодПланирования
//	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования";
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("ГодПланирования",ГодПланирования);
//	Запрос.УстановитьПараметр("МесяцПланирования",МесяцПланирования);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Выборка.Следующий();
//	Возврат Выборка.КоличествоРабочихДней;
//КонецФункции
//rarus pechek 25.02.2020 mantis 15409 ---
//rarus vikhle 27.02.2020 mt 15409 --- закомментировал
#КонецОбласти

//rarus pechek 25.02.2020 mantis 15409 +++
Процедура СформироватьОтчетПолный(ДокументРезультат)	
	//ДокументРезультат.Очистить();
	ДокументРезультат = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Макет");
	
	// rarus tenkam 09.07.2021 mantis 17571 ++
	//ДанныеОбщ = Неопределено;	
	//ЗаполнитьДанныеОбщая(ДанныеОбщ);   	
	ДанныеОбщ = ПолучитьОбщиеДанные();	
	// rarus tenkam 09.07.2021 mantis 17571 --
	
	Разделитель = Макет.ПолучитьОбласть("Разделитель");
	
	График = Макет.ПолучитьОбласть("График");
	Диаграмма=График.Рисунки.D1.Объект;    
	
	//rarus vikhle 27.02.2020 mt 15409 +++	
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	               |ПОМЕСТИТЬ втРабочиеДни
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.ДеньВключенВГрафик
	               |	И КалендарныеГрафики.Год = &ГодОтчета
	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРабочиеДни.РабочийДень КАК РабочийДень
	               |ИЗ
	               |	втРабочиеДни КАК втРабочиеДни
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РабочийДень";
	//rarus vikhle 27.02.2020 mt 15409 ---
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; //rarus vikhle 27.02.2020 mt 15409
	Запрос.УстановитьПараметр("ГодОтчета",Год(НаДату));
	Запрос.УстановитьПараметр("МесяцОтчета",Месяц(НаДату));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	Диаграмма.АвтоТранспонирование = Ложь;
	
	Диаграмма.ОтображатьЗаголовок = Истина;
	Диаграмма.ОбластьЗаголовка.Лево = Истина;
	Диаграмма.ОбластьЗаголовка.Верх = Истина;
	Если ВыборЯзыка = 0 Тогда
		Диаграмма.ОбластьЗаголовка.Текст = "SRG Deliveries " + Формат(НаДату,"Л=en;ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	Иначе
		Диаграмма.ОбластьЗаголовка.Текст = "SRG Deliveries " + Формат(НаДату,"ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	КонецЕсли;
	
	Диаграмма.Серии.Добавить(ДанныеОбщ[0].Наименование);
	Диаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[0].Цвет = Новый Цвет(68,114,196);
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[0], ДанныеОбщ[0]["Д" + Строка(День(Выборка.РабочийДень))], );
	КонецЦикла;
	Диаграмма.Серии.Добавить(ДанныеОбщ[1].Наименование);
	Диаграмма.Серии[1].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
	Диаграмма.Серии[1].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[1].Цвет = Новый Цвет(0,176,80);
	Выборка.Сбросить();
	НакопленноеЗначение = 0; //rarus vikhle 27.02.2020 mt 15409  
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++ 
		НакопленноеЗначение = НакопленноеЗначение + ДанныеОбщ[1]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1], ДанныеОбщ[1]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	Диаграмма.Серии.Добавить(ДанныеОбщ[2].Наименование);
	Диаграмма.Серии[2].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
	Диаграмма.Серии[2].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[2].Цвет = Новый Цвет(169,209,142);
	Выборка.Сбросить();
	НакопленноеЗначение = 0; //rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + ДанныеОбщ[2]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2], ДанныеОбщ[2]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	Диаграмма.Серии.Добавить(ДанныеОбщ[3].Наименование);
	Диаграмма.Серии[3].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[3].Цвет = Новый Цвет(132,151,176);
	Выборка.Сбросить();
	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + ДанныеОбщ[3]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3], ДанныеОбщ[3]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	Диаграмма.Серии.Добавить(ДанныеОбщ[4].Наименование);
	Диаграмма.Серии[4].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[4].Цвет = Новый Цвет(197,90,17);
	Выборка.Сбросить();
	НакопленноеЗначение = 0; //rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + ДанныеОбщ[4]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4], ДанныеОбщ[4]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	
	Диаграмма.АвтоТранспонирование = Истина;
	Диаграмма.Обновление = Истина;
	ДокументРезультат.Вывести(График);
	
	// SRG маленькая таблица
	
	SRGTotalНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	SRGTotalРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	
	SRGDeliveryPerDayНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	SRGDeliveryPerDayРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	/////
	//rarus vikhle 27.02.2020 mt 15409 +++	
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК КолонкаДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.Год = &ГодОтчета
	//               |	И КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	КолонкаДень";                                
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//rarus vikhle 27.02.2020 mt 15409 ---
	Выборка.Сбросить();
	//Пока Выборка.Следующий() Цикл //rarus vikhle 27.02.2020 mt 15409
		DaysInMonthРез = Выборка.Количество();
	//КонецЦикла;//rarus vikhle 27.02.2020 mt 15409
	//
	Запрос.Текст =   "ВЫБРАТЬ ПЕРВЫЕ 1
	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК ПланМесяц
	                 |ПОМЕСТИТЬ ВременнаяТаблица
	                 |ИЗ
	                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	                 |ГДЕ
	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ ПЕРВЫЕ 1
	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК ПланМесяц
	                 |ПОМЕСТИТЬ ВременнаяТаблица1
	                 |ИЗ
	                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	                 |ГДЕ
	                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
	                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	ВременнаяТаблица.ПланМесяц + ВременнаяТаблица1.ПланМесяц КАК Количество
	                 |ИЗ
	                 |	ВременнаяТаблица КАК ВременнаяТаблица,
	                 |	ВременнаяТаблица1 КАК ВременнаяТаблица1";
	//Запрос = Новый Запрос(ТекстЗапроса);//rarus vikhle 27.02.2020 mt 15409
	Запрос.УстановитьПараметр("НаДату", НаДату);
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));//rarus vikhle 27.02.2020 mt 15409
    //Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));//rarus vikhle 27.02.2020 mt 15409
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборЯзыка = 0 Тогда
		SRGTotalНаименование.Параметры.Наименование = "Total";
	Иначе
		SRGTotalНаименование.Параметры.Наименование = "Итого";
	КонецЕсли;
	ДокументРезультат.Вывести(SRGTotalНаименование);
	
	Пока РезультатЗапроса.Следующий() Цикл
		SRGTotalРез = РезультатЗапроса.Количество;
		Если ЗначениеЗаполнено(SRGTotalРез) Тогда
			SRGTotalРезультат.Параметры.Данные = SRGTotalРез;
		Иначе 
			SRGTotalРезультат.Параметры.Данные = "0";
		КонецЕсли;
	КонецЦикла;	
	ДокументРезультат.Присоединить(SRGTotalРезультат); 
	//
	Если ВыборЯзыка = 0 Тогда
		SRGDeliveryPerDayНаименование.Параметры.Наименование = "Delivery per day";
	Иначе
		SRGDeliveryPerDayНаименование.Параметры.Наименование = "В среднем на день";
	КонецЕсли;
	ДокументРезультат.Вывести(SRGDeliveryPerDayНаименование);
	Если ЗначениеЗаполнено(DaysInMonthРез) и ЗначениеЗаполнено(SRGTotalРез) Тогда
		Если  Окр(SRGTotalРез/DaysInMonthРез,0,0) = 0 Тогда
			SRGDeliveryPerDayРезультат.Параметры.Данные = "1";
		Иначе
			SRGDeliveryPerDayРезультат.Параметры.Данные = Окр(SRGTotalРез/DaysInMonthРез,0,0);
		КонецЕсли;
	Иначе
		SRGDeliveryPerDayРезультат.Параметры.Данные = "0";
	КонецЕсли;
	ДокументРезультат.Присоединить(SRGDeliveryPerDayРезультат);
	
	ДокументРезультат.Вывести(Разделитель);	
	
	//rarus vikhle 27.02.2020 mt 15409 +++	
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	Запрос.Текст = "ВЫБРАТЬ
	               |	втРабочиеДни.РабочийДень КАК РабочийДень
	               |ИЗ
	               |	втРабочиеДни КАК втРабочиеДни
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РабочийДень";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	//rarus vikhle 27.02.2020 mt 15409 ---
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Сбросить();
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьНаименование");
	ОбластьКолонкаДень = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаДень");
	ОбластьКолонкаИтого = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаИтого");
	ДокументРезультат.Вывести(ОбластьШапка);
	Пока Выборка.Следующий() Цикл
		ОбластьКолонкаДень.Параметры.КолонкаДень = Формат(Выборка.РабочийДень,"ДФ=dd.MM");
		ДокументРезультат.Присоединить(ОбластьКолонкаДень);
	КонецЦикла;
	Если ВыборЯзыка = 0 Тогда
		ОбластьКолонкаИтого.Параметры.Total = "Total";
	Иначе
		ОбластьКолонкаИтого.Параметры.Total = "Итого";
	КонецЕсли;
	
	ДокументРезультат.Присоединить(ОбластьКолонкаИтого);
	
	
	Индекс = 0;
	Для Каждого СтрокаДанныеОбщ Из ДанныеОбщ Цикл
		ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
		СтрокаНаименование = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьНаименование");
		СтрокаДниЗначение = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаДень");
		СтрокаИтого = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаИтого");
		Выборка.Сбросить();
		СтрокаНаименование.Параметры.Наименование = СтрокаДанныеОбщ.Наименование;
		ДокументРезультат.Вывести(СтрокаНаименование);
		Пока Выборка.Следующий() Цикл
			Значение = СтрокаДанныеОбщ["Д" + Строка(День(Выборка.РабочийДень))];
			СтрокаДниЗначение.Параметры.Количество = Значение;
			ДокументРезультат.Присоединить(СтрокаДниЗначение);
		КонецЦикла;
		СтрокаИтого.Параметры.Итого = СтрокаДанныеОбщ["Итого"];
		ДокументРезультат.Присоединить(СтрокаИтого); 
		Индекс = Индекс + 1;
	КонецЦикла;
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();//rarus vikhle 05.03.2020 mt 15409
	//rarus vikhle 28.02.2020 mt 15409 +++
	// Независимый дилер
	СформироватьОтчетНезависимый(ДокументРезультат, Истина);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();//rarus vikhle 05.03.2020 mt 15409
	// Собственный дилер
	СформироватьОтчетСобственный(ДокументРезультат, Истина);
	#Область ПовторныйКодНезависимыйДилер 
	//Данные = Неопределено;	
	//ЗаполнитьДанные(Данные);	
	//Разделитель = Макет.ПолучитьОбласть("Разделитель");
	//
	//График = Макет.ПолучитьОбласть("График");
	//Диаграмма=График.Рисунки.D1.Объект;    
	//
	//
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Диаграмма.Обновление = Ложь;
	//Диаграмма.Очистить();
	//Диаграмма.АвтоТранспонирование = Ложь;
	//
	//Диаграмма.ОтображатьЗаголовок = Истина;
	//Диаграмма.ОбластьЗаголовка.Лево = Истина;
	//Диаграмма.ОбластьЗаголовка.Верх = Истина;
	//Если ВыборЯзыка = 0 Тогда
	//	Диаграмма.ОбластьЗаголовка.Текст = "SRU Deliveries " + Формат(НаДату,"Л=en;ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	//Иначе
	//	Диаграмма.ОбластьЗаголовка.Текст = "SRU Deliveries " + Формат(НаДату,"ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	//КонецЕсли;
	//
	//Диаграмма.Серии.Добавить(Данные[0].Наименование);
	//Диаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[0].Цвет = Новый Цвет(68,114,196);
	//Выборка.Сбросить();
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[0], Данные[0]["Д" + Строка(День(Выборка.РабочийДень))], );
	//КонецЦикла;
	//Диаграмма.Серии.Добавить(Данные[1].Наименование);
	//Диаграмма.Серии[1].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
	//Диаграмма.Серии[1].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[1].Цвет = Новый Цвет(0,176,80);
	//Выборка.Сбросить();
	//НакопленноеЗначение = 0;// rarus vikhle 27.02.2020 mt 15409 
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	//rarus vikhle 27.02.2020 mt 15409 +++
	//	НакопленноеЗначение = НакопленноеЗначение + Данные[1]["Д" + Строка(День(Выборка.РабочийДень))];
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1],НакопленноеЗначение);
	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1], Данные[1]["Д" + Строка(День(Выборка.РабочийДень))], );
	//	//rarus vikhle 27.02.2020 mt 15409 ---
	//КонецЦикла;
	//Диаграмма.Серии.Добавить(Данные[2].Наименование);
	//Диаграмма.Серии[2].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
	//Диаграмма.Серии[2].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[2].Цвет = Новый Цвет(169,209,142);
	//Выборка.Сбросить();
	//НакопленноеЗначение = 0;// //rarus vikhle 27.02.2020 mt 15409
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	//rarus vikhle 27.02.2020 mt 15409 +++
	//	НакопленноеЗначение = НакопленноеЗначение + Данные[2]["Д" + Строка(День(Выборка.РабочийДень))];
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2],НакопленноеЗначение); 
	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2], Данные[2]["Д" + Строка(День(Выборка.РабочийДень))], );
	//	//rarus vikhle 27.02.2020 mt 15409 ---
	//КонецЦикла;
	//Диаграмма.Серии.Добавить(Данные[3].Наименование);
	//Диаграмма.Серии[3].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[3].Цвет = Новый Цвет(132,151,176);
	//Выборка.Сбросить();
	//НакопленноеЗначение = 0;// //rarus vikhle 27.02.2020 mt 15409	
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	//rarus vikhle 27.02.2020 mt 15409 +++
	//	НакопленноеЗначение = НакопленноеЗначение + Данные[3]["Д" + Строка(День(Выборка.РабочийДень))];
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3],НакопленноеЗначение);
	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3], Данные[3]["Д" + Строка(День(Выборка.РабочийДень))], );
	//	//rarus vikhle 27.02.2020 mt 15409 ---
	//КонецЦикла;
	//Диаграмма.Серии.Добавить(Данные[4].Наименование);
	//Диаграмма.Серии[4].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[4].Цвет = Новый Цвет(197,90,17);
	//Выборка.Сбросить();
	//НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	//rarus vikhle 27.02.2020 mt 15409 +++
	//	НакопленноеЗначение = НакопленноеЗначение + Данные[4]["Д" + Строка(День(Выборка.РабочийДень))];
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4],НакопленноеЗначение);
	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4], Данные[4]["Д" + Строка(День(Выборка.РабочийДень))], );
	//	//rarus vikhle 27.02.2020 mt 15409 ---
	//КонецЦикла;
	//
	//Диаграмма.АвтоТранспонирование = Истина;
	//Диаграмма.Обновление = Истина;
	//ДокументРезультат.Вывести(График);
	//
	//// SRU маленькая таблица
	//DaysInMonthНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	//DaysInMonthРезультат= Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	//
	//SRUTotalНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	//SRUTotalРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	//
	//SRUDeliveryPerDayНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	//SRUDeliveryPerDayРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	///////
	//
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК КолонкаДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.Год = &ГодОтчета
	//               |	И КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	КолонкаДень";                                
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//Если ВыборЯзыка = 0 Тогда
	//	DaysInMonthНаименование.Параметры.Наименование = "Days in month"; 
	//Иначе
	//	DaysInMonthНаименование.Параметры.Наименование = "Количество рабочих дней в месяце"; 
	//КонецЕсли;
	//ДокументРезультат.Вывести(DaysInMonthНаименование);
	//Выборка.Сбросить();
	//Пока Выборка.Следующий() Цикл
	//	DaysInMonthРез = Выборка.Количество();
	//	DaysInMonthРезультат.Параметры.Данные = DaysInMonthРез;
	//КонецЦикла;
	//ДокументРезультат.Присоединить(DaysInMonthРезультат); 
	////
	//ТекстЗапроса =   "ВЫБРАТЬ ПЕРВЫЕ 1
	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК Количество
	//                 |ИЗ
	//                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	//                 |ГДЕ
	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("НаДату", НаДату);
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//Если ВыборЯзыка = 0 Тогда
	//	SRUTotalНаименование.Параметры.Наименование = "SRU Total";
	//Иначе
	//	SRUTotalНаименование.Параметры.Наименование = "Итого independent";
	//КонецЕсли;

	//ДокументРезультат.Вывести(SRUTotalНаименование);
	//
	//Пока РезультатЗапроса.Следующий() Цикл
	//	SRUTotalРез = РезультатЗапроса.Количество;
	//	Если ЗначениеЗаполнено(SRUTotalРез) Тогда
	//		SRUTotalРезультат.Параметры.Данные = SRUTotalРез;
	//	Иначе 
	//		SRUTotalРезультат.Параметры.Данные = "0";
	//	КонецЕсли;
	//КонецЦикла;	
	//ДокументРезультат.Присоединить(SRUTotalРезультат); 
	////
	//Если ВыборЯзыка = 0 Тогда
	//	SRUDeliveryPerDayНаименование.Параметры.Наименование = "Delivery per day";
	//Иначе
	//	SRUDeliveryPerDayНаименование.Параметры.Наименование = "В среднем на день";
	//КонецЕсли;

	//ДокументРезультат.Вывести(SRUDeliveryPerDayНаименование);
	//Если ЗначениеЗаполнено(DaysInMonthРез) и ЗначениеЗаполнено(SRUTotalРез) Тогда
	//	Если Окр(SRUTotalРез/DaysInMonthРез,0,0) = 0 Тогда
	//		SRUDeliveryPerDayРезультат.Параметры.Данные = "1";
	//	Иначе
	//		SRUDeliveryPerDayРезультат.Параметры.Данные = Окр(SRUTotalРез/DaysInMonthРез,0,0);
	//	КонецЕсли;
	//Иначе
	//	SRUDeliveryPerDayРезультат.Параметры.Данные = "0";
	//КонецЕсли;
	//ДокументРезультат.Присоединить(SRUDeliveryPerDayРезультат);
	//
	//ДокументРезультат.Вывести(Разделитель);	
	//
	//
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//Выборка.Сбросить();
	//
	//ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьНаименование");
	//ОбластьКолонкаДень = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаДень");
	//ОбластьКолонкаИтого = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаИтого");
	//ДокументРезультат.Вывести(ОбластьШапка);
	//Пока Выборка.Следующий() Цикл
	//	ОбластьКолонкаДень.Параметры.КолонкаДень = Формат(Выборка.РабочийДень,"ДФ=dd.MM");
	//	ДокументРезультат.Присоединить(ОбластьКолонкаДень);
	//КонецЦикла;
	//Если ВыборЯзыка = 0 Тогда
	//	ОбластьКолонкаИтого.Параметры.Total = "Total";
	//Иначе
	//	ОбластьКолонкаИтого.Параметры.Total = "Итого";
	//КонецЕсли;
	//
	//ДокументРезультат.Присоединить(ОбластьКолонкаИтого);
	//
	//
	//Индекс = 0;
	//Для Каждого СтрокаДанные Из Данные Цикл
	//	ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
	//	СтрокаНаименование = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьНаименование");
	//	СтрокаДниЗначение = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаДень");
	//	СтрокаИтого = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаИтого");
	//	Выборка.Сбросить();
	//	СтрокаНаименование.Параметры.Наименование = СтрокаДанные.Наименование;
	//	ДокументРезультат.Вывести(СтрокаНаименование);
	//	Пока Выборка.Следующий() Цикл
	//		Значение = СтрокаДанные["Д" + Строка(День(Выборка.РабочийДень))];
	//		СтрокаДниЗначение.Параметры.Количество = Значение;
	//		ДокументРезультат.Присоединить(СтрокаДниЗначение);
	//	КонецЦикла;
	//	СтрокаИтого.Параметры.Итого = СтрокаДанные["Итого"];
	//	ДокументРезультат.Присоединить(СтрокаИтого); 
	//	Индекс = Индекс + 1;
	//КонецЦикла;
#КонецОбласти	

#Область ПовторныйКодСобственныйДилер	
	//ДанныеСобств = Неопределено;	
	//ЗаполнитьДанныеСобственный(ДанныеСобств);	
	//
	//Разделитель = Макет.ПолучитьОбласть("Разделитель");
	//
	//График = Макет.ПолучитьОбласть("График");
	//Диаграмма=График.Рисунки.D1.Объект;    
	//
	//
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Диаграмма.Обновление = Ложь;
	//Диаграмма.Очистить();
	//Диаграмма.АвтоТранспонирование = Ложь;
	//
	//Диаграмма.ОтображатьЗаголовок = Истина;
	//Диаграмма.ОбластьЗаголовка.Лево = Истина;
	//Диаграмма.ОбластьЗаголовка.Верх = Истина;
	//Если ВыборЯзыка = 0 Тогда
	//	Диаграмма.ОбластьЗаголовка.Текст = "SSG Deliveries " + Формат(НаДату,"Л=en;ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	//Иначе
	//	Диаграмма.ОбластьЗаголовка.Текст = "SSG Deliveries " + Формат(НаДату,"ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	//КонецЕсли;
	//
	//Диаграмма.Серии.Добавить(ДанныеСобств[0].Наименование);
	//Диаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[0].Цвет = Новый Цвет(68,114,196);
	//Выборка.Сбросить();
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[0], ДанныеСобств[0]["Д" + Строка(День(Выборка.РабочийДень))], );
	//КонецЦикла;
	//Диаграмма.Серии.Добавить(ДанныеСобств[1].Наименование);
	//Диаграмма.Серии[1].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
	//Диаграмма.Серии[1].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[1].Цвет = Новый Цвет(0,176,80);
	//Выборка.Сбросить();
	//НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	//rarus vikhle 27.02.2020 mt 15409 +++
	//	НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[1]["Д" + Строка(День(Выборка.РабочийДень))];
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1],НакопленноеЗначение);
	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1], ДанныеСобств[1]["Д" + Строка(День(Выборка.РабочийДень))], );
	//	//rarus vikhle 27.02.2020 mt 15409 ---
	//КонецЦикла;
	//
	//Диаграмма.Серии.Добавить(ДанныеСобств[2].Наименование);
	//Диаграмма.Серии[2].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[2].Цвет = Новый Цвет(132,151,176);
	//Выборка.Сбросить();
	//НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	//rarus vikhle 27.02.2020 mt 15409 +++
	//	НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[2]["Д" + Строка(День(Выборка.РабочийДень))];
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2],НакопленноеЗначение);
	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2], ДанныеСобств[2]["Д" + Строка(День(Выборка.РабочийДень))], );
	//	//rarus vikhle 27.02.2020 mt 15409 ---
	//КонецЦикла;
	//Диаграмма.Серии.Добавить(ДанныеСобств[3].Наименование);
	//Диаграмма.Серии[3].Маркер = ТипМаркераДиаграммы.Нет;
	//Диаграмма.Серии[3].Цвет = Новый Цвет(197,90,17);
	//Выборка.Сбросить();
	//НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	//Пока Выборка.Следующий() Цикл
	//	Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
	//	Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
	//	//rarus vikhle 27.02.2020 mt 15409 +++
	//	НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[3]["Д" + Строка(День(Выборка.РабочийДень))];
	//	Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3],НакопленноеЗначение);
	//	//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3], ДанныеСобств[3]["Д" + Строка(День(Выборка.РабочийДень))], );
	//	//rarus vikhle 27.02.2020 mt 15409 ---
	//КонецЦикла;
	//
	//Диаграмма.АвтоТранспонирование = Истина;
	//Диаграмма.Обновление = Истина;
	//ДокументРезультат.Вывести(График);
	//
	//// SSG маленькая таблица
	//
	//SSGTotalНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	//SSGTotalРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	//
	//SSGDeliveryPerDayНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	//SSGDeliveryPerDayРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	////
	//ТекстЗапроса =   "ВЫБРАТЬ ПЕРВЫЕ 1
	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК Количество
	//                 |ИЗ
	//                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	//                 |ГДЕ
	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("НаДату", НаДату);
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//Если ВыборЯзыка = 0 Тогда
	//	SSGTotalНаименование.Параметры.Наименование = "SSG Total";
	//Иначе
	//	SSGTotalНаименование.Параметры.Наименование = "Итого Captive";
	//КонецЕсли;

	//ДокументРезультат.Вывести(SSGTotalНаименование);
	//
	//Пока РезультатЗапроса.Следующий() Цикл
	//	SSGTotalРез = РезультатЗапроса.Количество;
	//	Если ЗначениеЗаполнено(SSGTotalРез) Тогда
	//		SSGTotalРезультат.Параметры.Данные = SSGTotalРез;
	//	Иначе 
	//		SSGTotalРезультат.Параметры.Данные = "0";
	//	КонецЕсли;
	//КонецЦикла;	
	//ДокументРезультат.Присоединить(SSGTotalРезультат); 
	////
	//Если ВыборЯзыка = 0 Тогда
	//	SSGDeliveryPerDayНаименование.Параметры.Наименование = "Delivery per day";
	//Иначе
	//	SSGDeliveryPerDayНаименование.Параметры.Наименование = "В среднем на день";
	//КонецЕсли;

	//ДокументРезультат.Вывести(SSGDeliveryPerDayНаименование);
	//Если ЗначениеЗаполнено(DaysInMonthРез) и ЗначениеЗаполнено(SSGTotalРез) Тогда
	//	Если Окр(SSGTotalРез/DaysInMonthРез,0,0) = 0 Тогда
	//		SSGDeliveryPerDayРезультат.Параметры.Данные = "1";
	//	Иначе
	//		SSGDeliveryPerDayРезультат.Параметры.Данные = Окр(SSGTotalРез/DaysInMonthРез,0,0);
	//	КонецЕсли;
	//Иначе
	//	SSGDeliveryPerDayРезультат.Параметры.Данные = "0";
	//КонецЕсли;
	//ДокументРезультат.Присоединить(SSGDeliveryPerDayРезультат);
	//
	//ДокументРезультат.Вывести(Разделитель);	
	//
	//
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//Выборка.Сбросить();
	//
	//ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьНаименование");
	//ОбластьКолонкаДень = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаДень");
	//ОбластьКолонкаИтого = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаИтого");
	//ДокументРезультат.Вывести(ОбластьШапка);
	//Пока Выборка.Следующий() Цикл
	//	ОбластьКолонкаДень.Параметры.КолонкаДень = Формат(Выборка.РабочийДень,"ДФ=dd.MM");
	//	ДокументРезультат.Присоединить(ОбластьКолонкаДень);
	//КонецЦикла;
	//Если ВыборЯзыка = 0 Тогда
	//	ОбластьКолонкаИтого.Параметры.Total = "Total";
	//Иначе
	//	ОбластьКолонкаИтого.Параметры.Total = "Итого";
	//КонецЕсли;

	//ДокументРезультат.Присоединить(ОбластьКолонкаИтого);
	//
	//Индекс = 0;
	//Для Каждого СтрокаДанныеСобств Из ДанныеСобств Цикл
	//	ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
	//	Если Индекс = 2  Тогда
	//		Индекс = Индекс+1;
	//		ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
	//	КонецЕсли;
	//	СтрокаНаименование = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьНаименование");
	//	СтрокаДниЗначение = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаДень");
	//	СтрокаИтого = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаИтого");
	//	Выборка.Сбросить();
	//	СтрокаНаименование.Параметры.Наименование = СтрокаДанныеСобств.Наименование;
	//	ДокументРезультат.Вывести(СтрокаНаименование);
	//	Пока Выборка.Следующий() Цикл
	//		Значение = СтрокаДанныеСобств["Д" + Строка(День(Выборка.РабочийДень))];
	//		СтрокаДниЗначение.Параметры.Количество = Значение;
	//		ДокументРезультат.Присоединить(СтрокаДниЗначение);
	//	КонецЦикла;
	//	СтрокаИтого.Параметры.Итого = СтрокаДанныеСобств["Итого"];
	//	ДокументРезультат.Присоединить(СтрокаИтого); 
	//	Индекс = Индекс + 1;
	//КонецЦикла;
#КонецОбласти	

	//rarus vikhle 28.02.2020 mt 15409 ---	
КонецПроцедуры
//rarus pechek 25.02.2020 mantis 15409 ---

//rarus pechek 25.02.2020 mantis 15409 +++
Процедура СформироватьОтчетНезависимый(ДокументРезультат, ОбщийОтчет = Ложь) //rarus vikhle 28.02.2020 mt 15409 добавлен параметр - признак вызова из общего варианта отчета
	
	// rarus tenkam 09.07.2021 mantis 17571 ++
	//Данные = Неопределено;	
	//ЗаполнитьДанные(Данные);	
	Данные = ПолучитьТЗСДаннымиПоВидуДилера(ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Независимый"));	
	// rarus tenkam 09.07.2021 mantis 17571 --
	
	//rarus vikhle 28.02.2020 mt 15409 +++
	Если Не ОбщийОтчет Тогда
		ДокументРезультат = Новый ТабличныйДокумент;
	КонецЕсли;
	//rarus vikhle 28.02.2020 mt 15409 ---	
	Макет = ПолучитьМакет("Макет");
		
	Разделитель = Макет.ПолучитьОбласть("Разделитель");
	
	График = Макет.ПолучитьОбласть("График");
	Диаграмма=График.Рисунки.D1.Объект;    
	
	//rarus vikhle 28.02.2020 mt 15409 +++	
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	               |ПОМЕСТИТЬ втРабочиеДни
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.ДеньВключенВГрафик
	               |	И КалендарныеГрафики.Год = &ГодПланирования
	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРабочиеДни.РабочийДень КАК РабочийДень
	               |ИЗ
	               |	втРабочиеДни КАК втРабочиеДни
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РабочийДень";
	//rarus vikhle 28.02.2020 mt 15409 ---	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;//rarus vikhle 28.02.2020 mt 15409 
	Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	Диаграмма.АвтоТранспонирование = Ложь;
	
	Диаграмма.ОтображатьЗаголовок = Истина;
	Диаграмма.ОбластьЗаголовка.Лево = Истина;
	Диаграмма.ОбластьЗаголовка.Верх = Истина;
	Если ВыборЯзыка = 0 Тогда
		Диаграмма.ОбластьЗаголовка.Текст = "SRU Deliveries " + Формат(НаДату,"Л=en;ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	Иначе
		Диаграмма.ОбластьЗаголовка.Текст = "SRU Deliveries " + Формат(НаДату,"ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	КонецЕсли;
	
	
	Диаграмма.Серии.Добавить(Данные[0].Наименование);
	Диаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[0].Цвет = Новый Цвет(68,114,196);
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[0], Данные[0]["Д" + Строка(День(Выборка.РабочийДень))], );
	КонецЦикла;
	Диаграмма.Серии.Добавить(Данные[1].Наименование);
	Диаграмма.Серии[1].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
	Диаграмма.Серии[1].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[1].Цвет = Новый Цвет(0,176,80);
	Выборка.Сбросить();
	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + Данные[1]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1], Данные[1]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	Диаграмма.Серии.Добавить(Данные[2].Наименование);
	Диаграмма.Серии[2].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
	Диаграмма.Серии[2].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[2].Цвет = Новый Цвет(169,209,142);
	Выборка.Сбросить();
	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + Данные[2]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2], Данные[2]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	Диаграмма.Серии.Добавить(Данные[3].Наименование);
	Диаграмма.Серии[3].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[3].Цвет = Новый Цвет(132,151,176);
	Выборка.Сбросить();
	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + Данные[3]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3], Данные[3]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	Диаграмма.Серии.Добавить(Данные[4].Наименование);
	Диаграмма.Серии[4].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[4].Цвет = Новый Цвет(197,90,17);
	Выборка.Сбросить();
	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + Данные[4]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[4], Данные[4]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	
	Диаграмма.АвтоТранспонирование = Истина;
	Диаграмма.Обновление = Истина;
	ДокументРезультат.Вывести(График);
	
	// SRU маленькая таблица
	DaysInMonthНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	DaysInMonthРезультат= Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	
	SRUTotalНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	SRUTotalРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	
	SRUDeliveryPerDayНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	SRUDeliveryPerDayРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	/////
	//rarus vikhle 27.02.2020 mt 15409 ---	
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК КолонкаДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.Год = &ГодОтчета
	//               |	И КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	КолонкаДень";                                
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//rarus vikhle 27.02.2020 mt 15409 ---
	Выборка.Сбросить();
	Если ВыборЯзыка = 0 Тогда
		DaysInMonthНаименование.Параметры.Наименование = "Days in month";
	Иначе
		DaysInMonthНаименование.Параметры.Наименование = "Количество рабочих дней в месяце";
	КонецЕсли;
	ДокументРезультат.Вывести(DaysInMonthНаименование);
	Выборка.Сбросить();
	DaysInMonthРез = Выборка.Количество();//rarus vikhle 27.02.2020 mt 15409	
	Пока Выборка.Следующий() Цикл
		//DaysInMonthРез = Выборка.Количество();//rarus vikhle 27.02.2020 mt 15409
		DaysInMonthРезультат.Параметры.Данные = DaysInMonthРез;
	КонецЦикла;
	ДокументРезультат.Присоединить(DaysInMonthРезультат); 
	//vikhle 27.02.2020 mt 15409 +++
	//ТекстЗапроса =   "ВЫБРАТЬ ПЕРВЫЕ 1
	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК Количество
	//                 |ИЗ
	//                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	//                 |ГДЕ
	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцОтчета
	//                 |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодОтчета";
	//заменил имена параметров
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Scan_ПланПоDeliveriesReportСрезПоследних.ПланМесяц КАК Количество
	               |ИЗ
	               |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	               |ГДЕ
	               |	Scan_ПланПоDeliveriesReportСрезПоследних.ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
	               |	И Scan_ПланПоDeliveriesReportСрезПоследних.МесяцПланирования = &МесяцПланирования
	               |	И Scan_ПланПоDeliveriesReportСрезПоследних.ГодПланирования = &ГодПланирования";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//vikhle 27.02.2020 mt 15409 ---
	Запрос.УстановитьПараметр("НаДату", НаДату);
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));//rarus vikhle 28.02.2020 mt 15409
	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));//rarus vikhle 28.02.2020 mt 15409
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборЯзыка = 0 Тогда
		SRUTotalНаименование.Параметры.Наименование = "SRU Total";
	Иначе
		SRUTotalНаименование.Параметры.Наименование = "Итого independent";
	КонецЕсли;
	ДокументРезультат.Вывести(SRUTotalНаименование);
	
	Пока РезультатЗапроса.Следующий() Цикл
		SRUTotalРез = РезультатЗапроса.Количество;
		Если ЗначениеЗаполнено(SRUTotalРез) Тогда
			SRUTotalРезультат.Параметры.Данные = SRUTotalРез;
		Иначе 
			SRUTotalРезультат.Параметры.Данные = "0";
		КонецЕсли;
	КонецЦикла;	
	ДокументРезультат.Присоединить(SRUTotalРезультат); 
	//
	Если ВыборЯзыка = 0 Тогда
		SRUDeliveryPerDayНаименование.Параметры.Наименование = "Delivery per day";
	Иначе
		SRUDeliveryPerDayНаименование.Параметры.Наименование = "В среднем на день";
	КонецЕсли;
	ДокументРезультат.Вывести(SRUDeliveryPerDayНаименование);
	Если ЗначениеЗаполнено(DaysInMonthРез) и ЗначениеЗаполнено(SRUTotalРез) Тогда
		Если Окр(SRUTotalРез/DaysInMonthРез,0,0) = 0 Тогда
			SRUDeliveryPerDayРезультат.Параметры.Данные = "1";
		Иначе
			SRUDeliveryPerDayРезультат.Параметры.Данные = Окр(SRUTotalРез/DaysInMonthРез,0,0);
		КонецЕсли;
	Иначе
		SRUDeliveryPerDayРезультат.Параметры.Данные = "0";
	КонецЕсли;
	ДокументРезультат.Присоединить(SRUDeliveryPerDayРезультат);
	
	ДокументРезультат.Вывести(Разделитель);	
	
	//rarus vikhle 28.02.2020 mt 15409 +++	
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	Запрос.Текст = "ВЫБРАТЬ
	               |	втРабочиеДни.РабочийДень КАК РабочийДень
	               |ИЗ
	               |	втРабочиеДни КАК втРабочиеДни
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РабочийДень";
	//rarus vikhle 28.02.2020 mt 15409 ---			   
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	//Выборка.Сбросить(); ////rarus vikhle 28.02.2020 mt 15409
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьНаименование");
	ОбластьКолонкаДень = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаДень");
	ОбластьКолонкаИтого = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаИтого");
	ДокументРезультат.Вывести(ОбластьШапка);
	Пока Выборка.Следующий() Цикл
		ОбластьКолонкаДень.Параметры.КолонкаДень = Формат(Выборка.РабочийДень,"ДФ=dd.MM");
		ДокументРезультат.Присоединить(ОбластьКолонкаДень);
	КонецЦикла;
	Если ВыборЯзыка = 0 Тогда
		ОбластьКолонкаИтого.Параметры.Total = "Total";
	Иначе
		ОбластьКолонкаИтого.Параметры.Total = "Итого";
	КонецЕсли;
	
	ДокументРезультат.Присоединить(ОбластьКолонкаИтого);
	
	
	Индекс = 0;
	Для Каждого СтрокаДанные Из Данные Цикл
		ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
		СтрокаНаименование = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьНаименование");
		СтрокаДниЗначение = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаДень");
		СтрокаИтого = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаИтого");
		Выборка.Сбросить();
		СтрокаНаименование.Параметры.Наименование = СтрокаДанные.Наименование;
		ДокументРезультат.Вывести(СтрокаНаименование);
		Пока Выборка.Следующий() Цикл
			Значение = СтрокаДанные["Д" + Строка(День(Выборка.РабочийДень))];
			СтрокаДниЗначение.Параметры.Количество = Значение;
			ДокументРезультат.Присоединить(СтрокаДниЗначение);
		КонецЦикла;
		СтрокаИтого.Параметры.Итого = СтрокаДанные["Итого"];
		ДокументРезультат.Присоединить(СтрокаИтого); 
		Индекс = Индекс + 1;
	КонецЦикла;
	//rarus vikhle 05.03.2020 mt 15409 +++
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб = Истина;
	//rarus vikhle 05.03.2020 mt 15409 ---
КонецПроцедуры
//rarus pechek 25.02.2020 mantis 15409 ---

//rarus pechek 25.02.2020 mantis 15409 +++
Процедура СформироватьОтчетСобственный(ДокументРезультат, ОбщийОтчет = Ложь) //rarus vikhle 28.02.2020 mt 15409 добавлен параметр - признак вызова из общего варианта отчета
	// rarus tenkam 09.07.2021 mantis 17571 ++
	//ДанныеСобств = Неопределено;	
	//ЗаполнитьДанныеСобственный(ДанныеСобств);	
	ДанныеСобств = ПолучитьТЗСДаннымиПоВидуДилера(ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Собственный"));	
	// rarus tenkam 09.07.2021 mantis 17571 --
	
	//rarus vikhle 28.02.2020 mt 15409 +++
	Если Не ОбщийОтчет Тогда
		ДокументРезультат = Новый ТабличныйДокумент;
	КонецЕсли;
	//rarus vikhle 28.02.2020 mt 15409 ---
	Макет = ПолучитьМакет("Макет");
	
	Разделитель = Макет.ПолучитьОбласть("Разделитель");
	
	График = Макет.ПолучитьОбласть("График");
	Диаграмма=График.Рисунки.D1.Объект;    
	
	//rarus vikhle 28.02.2020 mt 15409	+++ 
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	               |ПОМЕСТИТЬ втРабочиеДни
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.ДеньВключенВГрафик
	               |	И КалендарныеГрафики.Год = &ГодПланирования
	               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРабочиеДни.РабочийДень КАК РабочийДень
	               |ИЗ
	               |	втРабочиеДни КАК втРабочиеДни
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РабочийДень"; 	
	//rarus vikhle 28.02.2020 mt 15409	---			   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;//rarus vikhle 28.02.2020 mt 15409	
	Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	Диаграмма.АвтоТранспонирование = Ложь;
	
	Диаграмма.ОтображатьЗаголовок = Истина;
	Диаграмма.ОбластьЗаголовка.Лево = Истина;
	Диаграмма.ОбластьЗаголовка.Верх = Истина;
	Если ВыборЯзыка = 0 Тогда
		Диаграмма.ОбластьЗаголовка.Текст = "SSG Deliveries " + Формат(НаДату,"Л=en;ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	Иначе
		Диаграмма.ОбластьЗаголовка.Текст = "SSG Deliveries " + Формат(НаДату,"ДФ=ММММ") + " " + Формат(НаДату, "ДФ=гггг");
	КонецЕсли;
	
	Диаграмма.Серии.Добавить(ДанныеСобств[0].Наименование);
	Диаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[0].Цвет = Новый Цвет(68,114,196);
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[0], ДанныеСобств[0]["Д" + Строка(День(Выборка.РабочийДень))], );
	КонецЦикла;
	Диаграмма.Серии.Добавить(ДанныеСобств[1].Наименование);
	Диаграмма.Серии[1].Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир);
	Диаграмма.Серии[1].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[1].Цвет = Новый Цвет(0,176,80);
	Выборка.Сбросить();
	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[1]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[1], ДанныеСобств[1]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	
	Диаграмма.Серии.Добавить(ДанныеСобств[2].Наименование);
	Диаграмма.Серии[2].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[2].Цвет = Новый Цвет(132,151,176);
	Выборка.Сбросить();
	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409	
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[2]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[2], ДанныеСобств[2]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	Диаграмма.Серии.Добавить(ДанныеСобств[3].Наименование);
	Диаграмма.Серии[3].Маркер = ТипМаркераДиаграммы.Нет;
	Диаграмма.Серии[3].Цвет = Новый Цвет(197,90,17);
	Выборка.Сбросить();
	НакопленноеЗначение = 0;//rarus vikhle 27.02.2020 mt 15409
	Пока Выборка.Следующий() Цикл
		Точка = Диаграмма.УстановитьТочку(Формат(Выборка.РабочийДень,"ДФ=dd.MM"));
		Точка.Текст = Формат(Выборка.РабочийДень,	"ДФ=dd.MM");
		//rarus vikhle 27.02.2020 mt 15409 +++
		НакопленноеЗначение = НакопленноеЗначение + ДанныеСобств[3]["Д" + Строка(День(Выборка.РабочийДень))];
		Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3],НакопленноеЗначение);
		//Диаграмма.УстановитьЗначение(Точка,Диаграмма.Серии[3], ДанныеСобств[3]["Д" + Строка(День(Выборка.РабочийДень))], );
		//rarus vikhle 27.02.2020 mt 15409 ---
	КонецЦикла;
	
	Диаграмма.АвтоТранспонирование = Истина;
	Диаграмма.Обновление = Истина;
	ДокументРезультат.Вывести(График);
	
	// SSG маленькая таблица
	
	SSGTotalНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	SSGTotalРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	
	SSGDeliveryPerDayНаименование = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьНаименование");
	SSGDeliveryPerDayРезультат = Макет.ПолучитьОбласть("ОбластьСтрокаМТ|ОбластьКолонкаИтого");
	//rarus vikhle 27.02.2020 mt 15409 +++	
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК КолонкаДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.Год = &ГодОтчета
	//               |	И КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	КолонкаДень";                                
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату));
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//rarus vikhle 27.02.2020 mt 15409 ---	
	Выборка.Сбросить();
	//Пока Выборка.Следующий() Цикл //rarus vikhle 27.02.2020 mt 15409
		DaysInMonthРез = Выборка.Количество();
	//КонецЦикла;//rarus vikhle 27.02.2020 mt 15409

	//rarus vikhle 28.02.2020 mt 15409	+++
	//ТекстЗапроса =   "ВЫБРАТЬ
	//                 |	МАКСИМУМ(Scan_ПланПоDeliveriesReportСрезПоследних.КоличествоПлан) КАК Количество
	//                 |ИЗ
	//                 |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	//                 |ГДЕ
	//                 |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня В
	//                 |			(ВЫБРАТЬ
	//                 |				КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	//                 |			ИЗ
	//                 |				РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//                 |			ГДЕ
	//                 |				КалендарныеГрафики.Год = &ГодОтчета
	//                 |				И КалендарныеГрафики.ДеньВключенВГрафик
	//                 |				И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета)";
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(Scan_ПланПоDeliveriesReportСрезПоследних.КоличествоПлан) КАК Количество
	               |ИЗ
	               |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ВидДилера = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	               |ГДЕ
	               |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня В
	               |			(ВЫБРАТЬ
	               |				втРабочиеДни.РабочийДень
	               |			ИЗ
	               |				втРабочиеДни КАК втРабочиеДни)";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//rarus vikhle 28.02.2020 mt 15409	---
	Запрос.УстановитьПараметр("НаДату", НаДату);
	//Запрос.УстановитьПараметр("МесяцОтчета", Месяц(НаДату)); //rarus vikhle 28.02.2020 mt 15409
	//Запрос.УстановитьПараметр("ГодОтчета", Год(НаДату));//rarus vikhle 28.02.2020 mt 15409
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборЯзыка = 0 Тогда
		SSGTotalНаименование.Параметры.Наименование = "SSG Total";
	Иначе
		SSGTotalНаименование.Параметры.Наименование = "Итого Captive";
	КонецЕсли;
	ДокументРезультат.Вывести(SSGTotalНаименование);
	
	Пока РезультатЗапроса.Следующий() Цикл
		SSGTotalРез = РезультатЗапроса.Количество;
		Если ЗначениеЗаполнено(SSGTotalРез) Тогда
			SSGTotalРезультат.Параметры.Данные = SSGTotalРез;
		Иначе 
			SSGTotalРезультат.Параметры.Данные = "0";
		КонецЕсли;
	КонецЦикла;	
	ДокументРезультат.Присоединить(SSGTotalРезультат); 
	//
	Если ВыборЯзыка = 0 Тогда
		SSGDeliveryPerDayНаименование.Параметры.Наименование = "Delivery per day";
	Иначе
		SSGDeliveryPerDayНаименование.Параметры.Наименование = "В среднем на день";
	КонецЕсли;
	ДокументРезультат.Вывести(SSGDeliveryPerDayНаименование);
	Если ЗначениеЗаполнено(DaysInMonthРез) и ЗначениеЗаполнено(SSGTotalРез) Тогда
		Если Окр(SSGTotalРез/DaysInMonthРез,0,0) = 0 Тогда
			SSGDeliveryPerDayРезультат.Параметры.Данные = "1";
		Иначе
			SSGDeliveryPerDayРезультат.Параметры.Данные = Окр(SSGTotalРез/DaysInMonthРез,0,0);
		КонецЕсли;
	Иначе
		SSGDeliveryPerDayРезультат.Параметры.Данные = "0";
	КонецЕсли;
	ДокументРезультат.Присоединить(SSGDeliveryPerDayРезультат);
	
	ДокументРезультат.Вывести(Разделитель);	
	
	//rarus vikhle 28.02.2020 mt 15409	+++	
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	//               |ИЗ
	//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	//               |ГДЕ
	//               |	КалендарныеГрафики.ДеньВключенВГрафик
	//               |	И КалендарныеГрафики.Год = &ГодПланирования
	//               |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РабочийДень";
	Запрос.Текст = "ВЫБРАТЬ
	               |	втРабочиеДни.РабочийДень КАК РабочийДень
	               |ИЗ
	               |	втРабочиеДни КАК втРабочиеДни
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РабочийДень";
	
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ГодПланирования",Год(НаДату));
	//Запрос.УстановитьПараметр("МесяцПланирования",Месяц(НаДату));
	//rarus vikhle 27.02.2020 mt 15409 ---
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Сбросить();
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьНаименование");
	ОбластьКолонкаДень = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаДень");
	ОбластьКолонкаИтого = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьКолонкаИтого");
	ДокументРезультат.Вывести(ОбластьШапка);
	Пока Выборка.Следующий() Цикл
		ОбластьКолонкаДень.Параметры.КолонкаДень = Формат(Выборка.РабочийДень,"ДФ=dd.MM");
		ДокументРезультат.Присоединить(ОбластьКолонкаДень);
	КонецЦикла;
	Если ВыборЯзыка = 0 Тогда
		ОбластьКолонкаИтого.Параметры.Total = "Total";
	Иначе
		ОбластьКолонкаИтого.Параметры.Total = "Итого";
	КонецЕсли;
	ДокументРезультат.Присоединить(ОбластьКолонкаИтого);
	
	Индекс = 0;
	Для Каждого СтрокаДанныеСобств Из ДанныеСобств Цикл
		ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
		Если Индекс = 2  Тогда
			Индекс = Индекс+1;
			ИндексСтрока = ?(Индекс = 0,"",Строка(Индекс));
		КонецЕсли;
		СтрокаНаименование = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьНаименование");
		СтрокаДниЗначение = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаДень");
		СтрокаИтого = Макет.ПолучитьОбласть("ОбластьСтрока"+ИндексСтрока+"|ОбластьКолонкаИтого");
		Выборка.Сбросить();
		СтрокаНаименование.Параметры.Наименование = СтрокаДанныеСобств.Наименование;
		ДокументРезультат.Вывести(СтрокаНаименование);
		Пока Выборка.Следующий() Цикл
			Значение = СтрокаДанныеСобств["Д" + Строка(День(Выборка.РабочийДень))];
			СтрокаДниЗначение.Параметры.Количество = Значение;
			ДокументРезультат.Присоединить(СтрокаДниЗначение);
		КонецЦикла;
		СтрокаИтого.Параметры.Итого = СтрокаДанныеСобств["Итого"];
		ДокументРезультат.Присоединить(СтрокаИтого); 
		Индекс = Индекс + 1;
	КонецЦикла;
	//rarus vikhle 05.03.2020 mt 15409 +++
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб = Истина;
	//rarus vikhle 05.03.2020 mt 15409 ---
КонецПроцедуры
//rarus pechek 25.02.2020 mantis 15409 ---

Функция ПолучитьТЗСДаннымиПоВидуДилера(ВидДилера) // rarus tenkam 09.07.2021 mantis 17571 ++
	Данные = Новый ТаблицаЗначений;
	
	ЧастьЗаголовкаSRG = "SRG";
	Если ВидДилера = ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Независимый") Тогда
		ЧастьЗаголовкаSRG = "SRU";
	ИначеЕсли ВидДилера = ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Собственный") Тогда
		ЧастьЗаголовкаSRG = "SSG";	
	КонецЕсли;
	
	ГодОтчета = Год(НаДату);
	МесяцОтчета = Месяц(НаДату);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
		|ПОМЕСТИТЬ втРабочиеДни
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|	И КалендарныеГрафики.Год = &ГодПланирования
		|	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРабочиеДни.РабочийДень КАК РабочийДень
		|ИЗ
		|	втРабочиеДни КАК втРабочиеДни";
	
	Запрос.УстановитьПараметр("ГодПланирования", ГодОтчета);
	Запрос.УстановитьПараметр("МесяцПланирования", МесяцОтчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Данные;
	КонецЕсли;
	
	тзРабочиеДни = РезультатЗапроса.Выгрузить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	// Добавим в таблицу необходимые колонки
	Данные.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	Данные.Колонки.Добавить("Итого",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10)));
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Данные.Колонки.Добавить("Д" + Строка(День(ВыборкаДетальныеЗаписи.РабочийДень)),Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10)));
	КонецЦикла;
	
	// Заполним строку Average forecast / Средний план продаж на день
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	КалендарныеГрафики.ДатаГрафика КАК РабочийДень
	                |ПОМЕСТИТЬ втРабочиеДни
	                |ИЗ
	                |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	                |ГДЕ
	                |	КалендарныеГрафики.ДеньВключенВГрафик
	                |	И КалендарныеГрафики.Год = &ГодПланирования
	                |	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцПланирования
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня КАК РабочийДень,
	                |	ЕСТЬNULL(Scan_ПланПоDeliveriesReportСрезПоследних.КоличествоПлан, 0) КАК Количество
	                |ИЗ
	                |	РегистрСведений.Scan_ПланПоDeliveriesReport.СрезПоследних(&НаДату, ВидДилера = &ВидДилера) КАК Scan_ПланПоDeliveriesReportСрезПоследних
	                |ГДЕ
	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня В
	                |			(ВЫБРАТЬ
	                |				втРабочиеДни.РабочийДень КАК ДатаГрафика
	                |			ИЗ
	                |				втРабочиеДни КАК втРабочиеДни)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Scan_ПланПоDeliveriesReportСрезПоследних.ДатаРабочегоДня" ;
	Запрос.УстановитьПараметр("ГодПланирования", ГодОтчета);
	Запрос.УстановитьПараметр("МесяцПланирования", МесяцОтчета);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("ВидДилера", ВидДилера);
	Запрос.УстановитьПараметр("тзРабочиеДни", тзРабочиеДни);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НоваяСтрока = Данные.Добавить();
	Если ВыборЯзыка = 0 Тогда
		НоваяСтрока.Наименование = "Average forecast";
	Иначе
		НоваяСтрока.Наименование = "Средний план продаж на день";
	КонецЕсли;	
	
	Итого = 0;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
		Итого = Выборка.Количество;
	КонецЦикла;
	// Т.к. план накопительлным итогом, то в итоги выведем последнее значение
	НоваяСтрока.Итого = Итого;
	
	// Заполним строку Stock RFD SRG without dlv/booking / Готово к отгрузке, не забронировано
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Изделие,
		|	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод КАК ЗаказНаЗавод,
		|	Scan_СводнаяИнформацияПоПродукту.DD2 КАК DD2,
		|	Scan_СводнаяИнформацияПоПродукту.DD КАК DD,
		|	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
		|			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
		|		КОГДА ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
		|			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту
		|		ИНАЧЕ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
		|	КОНЕЦ КАК ДатаПродажиИзделия,
		|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)) КАК ВидДилера,
		|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)) КАК ЗаявкаНаСОП,
		|	Scan_СводнаяИнформацияПоПродукту.ТипПродукта.ВидПродукта КАК ВидПродукта
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних КАК Scan_СоставСоглашенийОПоставкеСрезПоследних
		|		ПО Scan_СводнаяИнформацияПоПродукту.Продукт = Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие
		|ГДЕ
		|	(Scan_СводнаяИнформацияПоПродукту.DD МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
		|			ИЛИ Scan_СводнаяИнформацияПоПродукту.DD2 МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблица.DD2) КАК DD2,
		|	МАКСИМУМ(ВременнаяТаблица.DD) КАК DD,
		|	ВременнаяТаблица.Изделие КАК Изделие
		|ПОМЕСТИТЬ ВременнаяТаблица2
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|ГДЕ
		|	ВременнаяТаблица.БроньДилера = ДАТАВРЕМЯ(1, 1, 1)
		|	И ВременнаяТаблица.ДатаПродажиИзделия = ДАТАВРЕМЯ(1, 1, 1)
		|	И ВременнаяТаблица.ВидДилера = &ВидДилера    		
		|	И &УсловиеВидаПродукта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица2.Изделие), 0) КАК Количество
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица2 КАК ВременнаяТаблица2
		|		ПО (ВЫБОР
		|				КОГДА ВременнаяТаблица2.DD2 <> ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ВременнаяТаблица2.DD2 = КалендарныеГрафики.ДатаГрафика
		|				КОГДА ВременнаяТаблица2.DD <> ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ВременнаяТаблица2.DD = КалендарныеГрафики.ДатаГрафика
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|ГДЕ
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|	И КалендарныеГрафики.Год = &ГодОтчета
		|	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
		|
		|СГРУППИРОВАТЬ ПО
		|	КалендарныеГрафики.ДатаГрафика";
	
	Если ЗначениеЗаполнено(ВидПродукта) И ВидПродукта <> ПредопределенноеЗначение("Справочник.Scan_ВидыПродуктов.ПустаяСсылка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВидаПродукта","ВременнаяТаблица.ВидПродукта = &ВидПродукта");
		Запрос.УстановитьПараметр("ВидПродукта", ВидПродукта);
	Иначе
		Запрос.УстановитьПараметр("УсловиеВидаПродукта",ИСТИНА);	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДилера", ВидДилера);
	Запрос.УстановитьПараметр("ГодОтчета", ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета", МесяцОтчета);
	Запрос.УстановитьПараметр("НаДату", НаДату); 	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НоваяСтрока = Данные.Добавить();
	Если ВыборЯзыка = 0 Тогда
		НоваяСтрока.Наименование = "Stock RFD SRG without dlv/booking";
		НоваяСтрока.Наименование = СтрЗаменить(НоваяСтрока.Наименование, "SRG", ЧастьЗаголовкаSRG);
	Иначе
		НоваяСтрока.Наименование = "Готово к отгрузке, не забронировано";
	КонецЕсли;	
	
	Итого = 0;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
		Если Выборка.Количество <> 0 Тогда
			Итого = Итого + Выборка.Количество;     			
		КонецЕсли;
	КонецЦикла;
	НоваяСтрока.Итого = Итого;
	
	// Заполним строку Stock RFD SRG Sold without dlv/booking / Готово к отгрузке, есть СОП, не забронировано
	// Только для независимых
	Если ВидДилера = ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Независимый") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Изделие,
			|	Scan_СводнаяИнформацияПоПродукту.ЗаказНаЗавод КАК ЗаказНаЗавод,
			|	Scan_СводнаяИнформацияПоПродукту.DD2 КАК DD2,
			|	Scan_СводнаяИнформацияПоПродукту.DD КАК DD,
			|	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
			|			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
			|		КОГДА ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
			|			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту
			|		ИНАЧЕ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
			|	КОНЕЦ КАК ДатаПродажиИзделия,
			|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)) КАК ВидДилера,
			|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)) КАК ЗаявкаНаСОП,
			|	Scan_СводнаяИнформацияПоПродукту.ТипПродукта.ВидПродукта КАК ВидПродукта
			|ПОМЕСТИТЬ ВременнаяТаблица
			|ИЗ
			|	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних КАК Scan_СоставСоглашенийОПоставкеСрезПоследних
			|		ПО Scan_СводнаяИнформацияПоПродукту.Продукт = Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие
			|ГДЕ
			|	(Scan_СводнаяИнформацияПоПродукту.DD МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
			|			ИЛИ Scan_СводнаяИнформацияПоПродукту.DD2 МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВременнаяТаблица.DD2) КАК DD2,
			|	МАКСИМУМ(ВременнаяТаблица.DD) КАК DD,
			|	ВременнаяТаблица.Изделие КАК Изделие
			|ПОМЕСТИТЬ ВременнаяТаблица2
			|ИЗ
			|	ВременнаяТаблица КАК ВременнаяТаблица
			|ГДЕ
			|	ВременнаяТаблица.БроньДилера = ДАТАВРЕМЯ(1, 1, 1)
			|	И ВременнаяТаблица.ДатаПродажиИзделия = ДАТАВРЕМЯ(1, 1, 1)
			|	И ВременнаяТаблица.ВидДилера = &ВидДилера
			|	И ВременнаяТаблица.ЗаявкаНаСОП <> ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
			|	И &УсловиеВидаПродукта
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблица.Изделие
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица2.Изделие), 0) КАК Количество
			|ИЗ
			|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица2 КАК ВременнаяТаблица2
			|		ПО (ВЫБОР
			|				КОГДА ВременнаяТаблица2.DD2 <> ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ВременнаяТаблица2.DD2 = КалендарныеГрафики.ДатаГрафика
			|				КОГДА ВременнаяТаблица2.DD <> ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ВременнаяТаблица2.DD = КалендарныеГрафики.ДатаГрафика
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|ГДЕ
			|	КалендарныеГрафики.ДеньВключенВГрафик
			|	И КалендарныеГрафики.Год = &ГодОтчета
			|	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
			|
			|СГРУППИРОВАТЬ ПО
			|	КалендарныеГрафики.ДатаГрафика";
		
		Если ЗначениеЗаполнено(ВидПродукта) И ВидПродукта <> ПредопределенноеЗначение("Справочник.Scan_ВидыПродуктов.ПустаяСсылка") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВидаПродукта","ВременнаяТаблица.ВидПродукта = &ВидПродукта");
			Запрос.УстановитьПараметр("ВидПродукта", ВидПродукта);
		Иначе
			Запрос.УстановитьПараметр("УсловиеВидаПродукта",ИСТИНА);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидДилера", ВидДилера);
		Запрос.УстановитьПараметр("ГодОтчета", ГодОтчета);
		Запрос.УстановитьПараметр("МесяцОтчета", МесяцОтчета);
		Запрос.УстановитьПараметр("НаДату", НаДату);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		НоваяСтрока = Данные.Добавить();
		Если ВыборЯзыка = 0 Тогда
			НоваяСтрока.Наименование = "Stock RFD SRG Sold without dlv/booking";
			НоваяСтрока.Наименование = СтрЗаменить(НоваяСтрока.Наименование, "SRG", ЧастьЗаголовкаSRG);
		Иначе
			НоваяСтрока.Наименование = "Готово к отгрузке, есть СОП, не забронировано";
		КонецЕсли;	
		
		Итого = 0;
		Пока Выборка.Следующий() Цикл
			НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
			Если Выборка.Количество <> 0 Тогда
				Итого = Итого + Выборка.Количество;     			
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.Итого = Итого;
	КонецЕсли;
	
	// Заполним строку Actual deliveries (from booking) / Отгружено согласно плану
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Изделие,
		|	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
		|			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
		|		КОГДА ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
		|			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту
		|		ИНАЧЕ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
		|	КОНЕЦ КАК ДатаПродажиИзделия,
		|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)) КАК ВидДилера,
		|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)) КАК ЗаявкаНаСОП,
		|	Scan_СводнаяИнформацияПоПродукту.ТипПродукта.ВидПродукта КАК ВидПродукта
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних КАК Scan_СоставСоглашенийОПоставкеСрезПоследних
		|		ПО Scan_СводнаяИнформацияПоПродукту.Продукт = Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие
		|ГДЕ
		|	(Scan_СводнаяИнформацияПоПродукту.БроньДилера МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
		|			ИЛИ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
		|			ИЛИ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.Изделие КАК Изделие,
		|	МАКСИМУМ(ВременнаяТаблица.БроньДилера) КАК БроньДилера,
		|	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) КАК ДатаПродажиИзделия
		|ПОМЕСТИТЬ ВременнаяТаблица2
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|ГДЕ
		|	ВременнаяТаблица.БроньДилера <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ВременнаяТаблица.ДатаПродажиИзделия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ВременнаяТаблица.ВидДилера = &ВидДилера
		|	И &УсловиеВидаПродукта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица2.Изделие), 0) КАК Количество
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица2 КАК ВременнаяТаблица2
		|		ПО КалендарныеГрафики.ДатаГрафика = ВременнаяТаблица2.БроньДилера
		|			И КалендарныеГрафики.ДатаГрафика = ВременнаяТаблица2.ДатаПродажиИзделия
		|ГДЕ
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|	И КалендарныеГрафики.Год = &ГодОтчета
		|	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
		|
		|СГРУППИРОВАТЬ ПО
		|	КалендарныеГрафики.ДатаГрафика";
	
	Если ЗначениеЗаполнено(ВидПродукта) И ВидПродукта <> ПредопределенноеЗначение("Справочник.Scan_ВидыПродуктов.ПустаяСсылка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВидаПродукта","ВременнаяТаблица.ВидПродукта = &ВидПродукта");
		Запрос.УстановитьПараметр("ВидПродукта", ВидПродукта);
	Иначе
		Запрос.УстановитьПараметр("УсловиеВидаПродукта",ИСТИНА);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидДилера", ВидДилера);
	Запрос.УстановитьПараметр("ГодОтчета", ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета", МесяцОтчета);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НоваяСтрока = Данные.Добавить();
	Если ВыборЯзыка = 0 Тогда
		НоваяСтрока.Наименование = "Actual deliveries (from booking)";
	Иначе
		НоваяСтрока.Наименование = "Отгружено согласно плану";
	КонецЕсли;	
	
	Итого = 0;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
		Итого = Итого + Выборка.Количество;
	КонецЦикла;
	НоваяСтрока.Итого = Итого;
	
	// Заполним строку Additional sales / Дополнительные отгрузки
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Изделие,
		|	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)
		|			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
		|		КОГДА ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Собственный)
		|			ТОГДА Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту
		|		ИНАЧЕ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия
		|	КОНЕЦ КАК ДатаПродажиИзделия,
		|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)) КАК ВидДилера,
		|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)) КАК ЗаявкаНаСОП,
		|	Scan_СводнаяИнформацияПоПродукту.ТипПродукта.ВидПродукта КАК ВидПродукта
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних КАК Scan_СоставСоглашенийОПоставкеСрезПоследних
		|		ПО Scan_СводнаяИнформацияПоПродукту.Продукт = Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие
		|ГДЕ
		|	(Scan_СводнаяИнформацияПоПродукту.БроньДилера МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
		|			ИЛИ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиИзделия МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ)
		|			ИЛИ Scan_СводнаяИнформацияПоПродукту.ДатаПродажиКлиенту МЕЖДУ НАЧАЛОПЕРИОДА(&НаДату, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НаДату, ДЕНЬ, -1), ДЕНЬ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.Изделие КАК Изделие,
		|	МАКСИМУМ(ВременнаяТаблица.БроньДилера) КАК БроньДилера,
		|	МАКСИМУМ(ВременнаяТаблица.ДатаПродажиИзделия) КАК ДатаПродажиИзделия
		|ПОМЕСТИТЬ ВременнаяТаблица2
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|ГДЕ
		|	ВременнаяТаблица.ДатаПродажиИзделия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ВременнаяТаблица.ВидДилера = &ВидДилера
		|	И &УсловиеВидаПродукта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица2.Изделие), 0) КАК Количество
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица2 КАК ВременнаяТаблица2
		|		ПО КалендарныеГрафики.ДатаГрафика <> ВременнаяТаблица2.БроньДилера
		|			И КалендарныеГрафики.ДатаГрафика = ВременнаяТаблица2.ДатаПродажиИзделия
		|ГДЕ
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|	И КалендарныеГрафики.Год = &ГодОтчета
		|	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
		|
		|СГРУППИРОВАТЬ ПО
		|	КалендарныеГрафики.ДатаГрафика";
	
	Если ЗначениеЗаполнено(ВидПродукта) И ВидПродукта <> ПредопределенноеЗначение("Справочник.Scan_ВидыПродуктов.ПустаяСсылка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВидаПродукта","ВременнаяТаблица.ВидПродукта = &ВидПродукта");
		Запрос.УстановитьПараметр("ВидПродукта", ВидПродукта);
	Иначе
		Запрос.УстановитьПараметр("УсловиеВидаПродукта",ИСТИНА);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидДилера", ВидДилера);
	Запрос.УстановитьПараметр("ГодОтчета", ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета", МесяцОтчета);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НоваяСтрока = Данные.Добавить();
	Если ВыборЯзыка = 0 Тогда
		НоваяСтрока.Наименование = "Additional Sales";
	Иначе
		НоваяСтрока.Наименование = "Дополнительные отгрузки";
	КонецЕсли;	
	
	Итого = 0;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
		Итого = Итого + Выборка.Количество;
	КонецЦикла;
	НоваяСтрока.Итого = Итого;
	
	// Заполним строку Booking / Отгружено/забронировано
	
	// Бронь считается только для дней, последующих за отчётным  	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Scan_СводнаяИнформацияПоПродукту.Продукт КАК Изделие,
		|	Scan_СводнаяИнформацияПоПродукту.БроньДилера КАК БроньДилера,
		|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке.Дилер.ВидДилера, ЗНАЧЕНИЕ(Перечисление.Scan_ВидыДилеров.Независимый)) КАК ВидДилера,
		|	ЕСТЬNULL(Scan_СоставСоглашенийОПоставкеСрезПоследних.СоглашениеОПоставке, ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)) КАК ЗаявкаНаСОП,
		|	Scan_СводнаяИнформацияПоПродукту.ТипПродукта.ВидПродукта КАК ВидПродукта
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрСведений.Scan_СводнаяИнформацияПоПродукту КАК Scan_СводнаяИнформацияПоПродукту
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Scan_СоставСоглашенийОПоставке.СрезПоследних КАК Scan_СоставСоглашенийОПоставкеСрезПоследних
		|		ПО Scan_СводнаяИнформацияПоПродукту.Продукт = Scan_СоставСоглашенийОПоставкеСрезПоследних.Изделие
		|ГДЕ
		|	Scan_СводнаяИнформацияПоПродукту.БроньДилера МЕЖДУ &НаДату И КОНЕЦПЕРИОДА(&НаДату, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.Изделие КАК Изделие,
		|	МАКСИМУМ(ВременнаяТаблица.БроньДилера) КАК БроньДилера
		|ПОМЕСТИТЬ ВременнаяТаблица2
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|ГДЕ
		|	ВременнаяТаблица.БроньДилера <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ВременнаяТаблица.ВидДилера = &ВидДилера
		|	И ВременнаяТаблица.ЗаявкаНаСОП <> ЗНАЧЕНИЕ(Справочник.Scan_СоглашенияОПоставке.ПустаяСсылка)
		|	И &УсловиеВидаПродукта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.Изделие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика КАК РабочийДень,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВременнаяТаблица2.Изделие), 0) КАК Количество
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица2 КАК ВременнаяТаблица2
		|		ПО КалендарныеГрафики.ДатаГрафика = ВременнаяТаблица2.БроньДилера
		|ГДЕ
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|	И КалендарныеГрафики.Год = &ГодОтчета
		|	И МЕСЯЦ(КалендарныеГрафики.ДатаГрафика) = &МесяцОтчета
		|
		|СГРУППИРОВАТЬ ПО
		|	КалендарныеГрафики.ДатаГрафика";
	
	
	Если ЗначениеЗаполнено(ВидПродукта) И ВидПродукта <> ПредопределенноеЗначение("Справочник.Scan_ВидыПродуктов.ПустаяСсылка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВидаПродукта","ВременнаяТаблица.ВидПродукта = &ВидПродукта");
		Запрос.УстановитьПараметр("ВидПродукта", ВидПродукта);
	Иначе
		Запрос.УстановитьПараметр("УсловиеВидаПродукта",ИСТИНА);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидДилера", ВидДилера);
	Запрос.УстановитьПараметр("ГодОтчета", ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета", МесяцОтчета);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НоваяСтрока = Данные.Добавить();
	Если ВыборЯзыка = 0 Тогда
		НоваяСтрока.Наименование = "Booking";
	Иначе
		НоваяСтрока.Наименование = "Отгружено/забронировано";
	КонецЕсли;
	
	Итого = 0; 	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока["Д" + Строка(День(Выборка.РабочийДень))] = Выборка.Количество;
		Итого = Итого + Выборка.Количество;
	КонецЦикла;    
	
	// Для отчётного дня и всех предыдущих в качестве брони отражаются отгрузки: Actual deliveries (from booking) + Additional Sales
	ДеньЧисло = День(НаДату) - 1;
	СтрокаActual = ?(ВидДилера = ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Независимый"), 3,2);
	Для Индекс = 1 По ДеньЧисло Цикл
		Если Данные.Колонки.Найти("Д" + Строка(Индекс)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеActualDeliveries = Данные[СтрокаActual]["Д" + Строка(Индекс)];
		ЗначениеAdditionalSales = Данные[СтрокаActual+1]["Д" + Строка(Индекс)];
		ЗначениеBooking = ЗначениеActualDeliveries + ЗначениеAdditionalSales;
		НоваяСтрока["Д" + Строка(Индекс)] = ЗначениеBooking;
		Итого = Итого + ЗначениеBooking;
	КонецЦикла;
	
	НоваяСтрока.Итого = Итого;
	
	Данные.Сдвинуть(НоваяСтрока,-2);
	
	Возврат Данные;
КонецФункции // rarus tenkam 09.07.2021 mantis 17571 --

Функция ПолучитьОбщиеДанные() // rarus tenkam 09.07.2021 mantis 17571 ++
	
	ТЗПоНезависимымДилерам = ПолучитьТЗСДаннымиПоВидуДилера(ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Независимый"));
	ТЗПоСобственнымДилерам = ПолучитьТЗСДаннымиПоВидуДилера(ПредопределенноеЗначение("Перечисление.Scan_ВидыДилеров.Собственный"));
	
	//Объединим таблицы и свернем
	Данные = Новый ТаблицаЗначений;
	Данные = ТЗПоНезависимымДилерам.СкопироватьКолонки();
	
	Для Каждого СтрокаТЗ Из ТЗПоНезависимымДилерам Цикл
		НоваяСтрока = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	Для Каждого СтрокаТЗ Из ТЗПоСобственнымДилерам Цикл
		НоваяСтрока = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	Для Каждого СтрокаДанныеОбщ Из Данные Цикл
		Если СтрокаДанныеОбщ.Наименование = "Stock RFD SRU without dlv/booking" Тогда
			СтрокаДанныеОбщ.Наименование = "Stock RFD SRG without dlv/booking";
		КонецЕсли;     		
		Если СтрокаДанныеОбщ.Наименование = "Stock RFD SRU Sold  without dlv/booking" Тогда
			СтрокаДанныеОбщ.Наименование = "Stock RFD SRG Sold  without dlv/booking";
		КонецЕсли; 
		
		Если СтрокаДанныеОбщ.Наименование = "Stock RFD SSG without dlv/booking" Тогда
			СтрокаДанныеОбщ.Наименование = "Stock RFD SRG without dlv/booking";
		КонецЕсли;		
	КонецЦикла;
	
	СписокКолонок = "";
	Для Каждого СтрокаКолонка Из Данные.Колонки Цикл
		Если СтрокаКолонка.Имя = "Наименование"  Тогда
			Продолжить;
		КонецЕсли;
		СписокКолонок = СписокКолонок + СтрокаКолонка.Имя + ","; 
	КонецЦикла;
	
	СписокКолонок = Лев(СписокКолонок,СтрДлина(СписокКолонок) - 1);
	
	Данные.Свернуть("Наименование", СписокКолонок);
	
	Возврат Данные;
КонецФункции // rarus tenkam 09.07.2021 mantis 17571 --

#КонецОбласти

#Иначе
  ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли


