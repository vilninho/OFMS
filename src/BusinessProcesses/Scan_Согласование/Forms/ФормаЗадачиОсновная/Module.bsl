//Rarus bonmak 28.07.2022 18726 добавил области

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура ЗаполнитьХодИсполнения()
	ХодИсполнения.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗадачаЗадачаИсполнителя.Ссылка,
	|	ЗадачаЗадачаИсполнителя.ПометкаУдаления,
	|	ЗадачаЗадачаИсполнителя.Номер,
	|	ЗадачаЗадачаИсполнителя.Дата,
	|	ЗадачаЗадачаИсполнителя.БизнесПроцесс,
	|	ЗадачаЗадачаИсполнителя.ТочкаМаршрута,
	|	ЗадачаЗадачаИсполнителя.Наименование,
	|	ЗадачаЗадачаИсполнителя.Выполнена,
	|	ЗадачаЗадачаИсполнителя.Важность,
	|	ЗадачаЗадачаИсполнителя.ДатаИсполнения,
	|	ЗадачаЗадачаИсполнителя.Автор,
	|	ЗадачаЗадачаИсполнителя.Описание,
	|	ЗадачаЗадачаИсполнителя.СрокИсполнения,
	|	ЗадачаЗадачаИсполнителя.ДатаНачала,
	|	ЗадачаЗадачаИсполнителя.РезультатВыполнения,
	|	ЗадачаЗадачаИсполнителя.Предмет,
	|	ЗадачаЗадачаИсполнителя.Исполнитель,
	|	РезультатыСогласования.РезультатСогласования,
	|	РезультатыСогласования.НомерИтерации
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Scan_Согласование.РезультатыСогласования КАК РезультатыСогласования
	|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыСогласования.ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И РезультатыСогласования.НомерИтерации = &НомерИтерации
	|	И ЗадачаЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)");
	
	списТочкиМаршрута = Новый СписокЗначений;
	списТочкиМаршрута.Добавить(БизнесПроцессы.Scan_Согласование.ТочкиМаршрута.СогласоватьПоследовательно);
	списТочкиМаршрута.Добавить(БизнесПроцессы.Scan_Согласование.ТочкиМаршрута.СогласоватьПараллельно);
	Запрос.УстановитьПараметр("ТочкиМаршрута", списТочкиМаршрута);
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	
	тбл = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из тбл Цикл
		НоваяСтрока = ХодИсполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	//настроить командную панель внизу
	Если Объект.Выполнена Тогда
		ТолькоПросмотр = Истина;
		Элементы.КомандыГруппаОзнакомиться.Видимость = Ложь;
		Элементы.ФормаСогласовано.Видимость   = Ложь;
		Элементы.ФормаЕстьЗамечания.Видимость = Ложь;
		Элементы.ФормаНеСогласовано.Видимость = Ложь;

		Элементы.КомандыГруппаСогласовать.Видимость = Ложь;
		Элементы.ФормаЗавершить.Видимость           = Ложь;
		Элементы.ФормаПовторить.Видимость           = Ложь;
		
	Иначе
		Если (Объект.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Scan_Согласование.ТочкаМаршрута.СогласоватьПараллельно") ИЛИ
			Объект.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Scan_Согласование.ТочкаМаршрута.СогласоватьПоследовательно")) Тогда
			
			Элементы.КомандыГруппаОзнакомиться.Видимость = Истина;
			Элементы.ФормаСогласовано.Видимость   = Истина;
			Элементы.ФормаЕстьЗамечания.Видимость = Истина;
			Элементы.ФормаНеСогласовано.Видимость = Истина;
	
			Элементы.КомандыГруппаСогласовать.Видимость = Ложь;
			Элементы.ФормаЗавершить.Видимость           = Ложь;
			Элементы.ФормаПовторить.Видимость           = Ложь;
		

		
		ИначеЕсли Объект.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Scan_Согласование.ТочкаМаршрута.Ознакомиться") Тогда
			Элементы.КомандыГруппаОзнакомиться.Видимость = Ложь;
			Элементы.ФормаСогласовано.Видимость   = Ложь;
			Элементы.ФормаЕстьЗамечания.Видимость = Ложь;
			Элементы.ФормаНеСогласовано.Видимость = Ложь;
			Элементы.КомандыГруппаСогласовать.Видимость = Истина;
			Элементы.ФормаЗавершить.Видимость           = Истина;
			Элементы.ФормаПовторить.Видимость           = Истина;

			
		КонецЕсли;
	КонецЕсли;
		
	Если Объект.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Scan_Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОзнакомление;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСогласование;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СогласованоСервер()
	//rarus BProg_Gladkov 03.01.2020 0015117 +++
	Отказ = Ложь;
	БизнесПроцессы.Scan_Согласование.УстановитьРезультатСогласования(Объект.Ссылка, Перечисления.Scan_РезультатыСогласования.Согласовано, Отказ);
	
	//УстановитьПривилегированныйРежим(Истина);
	//СогласованиеОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	//Попытка
	//	ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
	//Исключение
	//	ТекстСообщения = "Согласование """ + СогласованиеОбъект.Номер + " от " + Формат(СогласованиеОбъект.Дата, "ДФ='dd.MM.yyyy HH:mm'") + """ заблокировано (возможно открыта форма)!
	//		|Для продолжения операции следует разблокировать согласование (закрыть форму) и повторить операцию";
	//	ВызватьИсключение ТекстСообщения;
	//КонецПопытки;
	//НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
	//НайденнаяСтрока.РезультатСогласования = Перечисления.Scan_РезультатыСогласования.Согласовано;
	//СогласованиеОбъект.Записать();
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//НачатьТранзакцию();
	//Попытка
	//	Блокировка = Новый БлокировкаДанных;
	//	ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
	//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//	ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
	//	Блокировка.Заблокировать();
	//	
	//	ЗадачаОбъект = Объект.Ссылка.ПолучитьОбъект();
	//	ЗадачаОбъект.Прочитать();
	//	ЗадачаОбъект.Выполнена = Ложь;
	//	ЗадачаОбъект.ВыполнитьЗадачу();
	//	ЗафиксироватьТранзакцию();
	//Исключение
	//	ОтменитьТранзакцию();
	//	ВызватьИсключение;
	//КонецПопытки;
	//rarus BProg_Gladkov 03.01.2020 0015117 ---
КонецПроцедуры

&НаСервере
Процедура ЕстьЗамечанияСервер()
	//rarus BProg_Gladkov 03.01.2020 0015117 +++
	Отказ = Ложь;
	БизнесПроцессы.Scan_Согласование.УстановитьРезультатСогласования(Объект.Ссылка, Перечисления.Scan_РезультатыСогласования.СогласованоСЗамечаниями, Отказ);
	//УстановитьПривилегированныйРежим(Истина);
	//СогласованиеОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	//Попытка
	//	ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
	//Исключение
	//	ТекстСообщения = "Согласование """ + СогласованиеОбъект.Номер + " от " + Формат(СогласованиеОбъект.Дата, "ДФ='dd.MM.yyyy HH:mm'") + """ заблокировано (возможно открыта форма)!
	//		|Для продолжения операции следует разблокировать согласование (закрыть форму) и повторить операцию";
	//	ВызватьИсключение ТекстСообщения;
	//КонецПопытки;
	//НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
	//НайденнаяСтрока.РезультатСогласования = Перечисления.Scan_РезультатыСогласования.СогласованоСЗамечаниями;
	//СогласованиеОбъект.Записать();
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//НачатьТранзакцию();
	//Попытка
	//	Блокировка = Новый БлокировкаДанных;
	//	ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
	//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//	ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
	//	Блокировка.Заблокировать();
	//	
	//	ЗадачаОбъект = Объект.Ссылка.ПолучитьОбъект();
	//	ЗадачаОбъект.Прочитать();
	//	ЗадачаОбъект.Выполнена = Ложь;
	//	ЗадачаОбъект.ВыполнитьЗадачу();
	//	ЗафиксироватьТранзакцию();
	//Исключение
	//	ОтменитьТранзакцию();
	//	ВызватьИсключение;
	//КонецПопытки;
	//rarus BProg_Gladkov 03.01.2020 0015117 ---

КонецПроцедуры

&НаСервере
Процедура НеСогласованоСервер()
	//rarus BProg_Gladkov 03.01.2020 0015117 +++
	Отказ = Ложь;
	БизнесПроцессы.Scan_Согласование.УстановитьРезультатСогласования(Объект.Ссылка, Перечисления.Scan_РезультатыСогласования.НеСогласовано, Отказ);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//СогласованиеОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	//Попытка
	//	ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
	//Исключение
	//	ТекстСообщения = "Согласование """ + СогласованиеОбъект.Номер + " от " + Формат(СогласованиеОбъект.Дата, "ДФ='dd.MM.yyyy HH:mm'") + """ заблокировано (возможно открыта форма)!
	//		|Для продолжения операции следует разблокировать согласование (закрыть форму) и повторить операцию";
	//	ВызватьИсключение ТекстСообщения;
	//КонецПопытки;
	//НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
	//НайденнаяСтрока.РезультатСогласования = Перечисления.Scan_РезультатыСогласования.НеСогласовано;
	//СогласованиеОбъект.Записать();
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//НачатьТранзакцию();
	//Попытка
	//	Блокировка = Новый БлокировкаДанных;
	//	ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
	//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//	ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
	//	Блокировка.Заблокировать();
	//	
	//	ЗадачаОбъект = Объект.Ссылка.ПолучитьОбъект();
	//	ЗадачаОбъект.Прочитать();
	//	ЗадачаОбъект.Выполнена = Ложь;
	//	ЗадачаОбъект.ВыполнитьЗадачу();
	//	ЗафиксироватьТранзакцию();
	//Исключение
	//	ОтменитьТранзакцию();
	//	ВызватьИсключение;
	//КонецПопытки;
	//rarus BProg_Gladkov 03.01.2020 0015117 ---

КонецПроцедуры

&НаСервере
Процедура ЗавершитьСогласованиеСервер()
	УстановитьПривилегированныйРежим(Истина);
	СогласованиеОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
	Исключение
		ТекстСообщения = "Согласование """ + СогласованиеОбъект.Номер + " от " + Формат(СогласованиеОбъект.Дата, "ДФ='dd.MM.yyyy HH:mm'") + """ заблокировано (возможно открыта форма)!
			|Для продолжения операции следует разблокировать согласование (закрыть форму) и повторить операцию";
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
	НайденнаяСтрока.ОтправленоНаПовторноеСогласование = Ложь;
	СогласованиеОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = Объект.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Прочитать();
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.ВыполнитьЗадачу();
		
		// rarus tenkam 07.11.2018 mantis 13672 +++
		Если СогласованиеОбъект.РезультатСогласования = Перечисления.Scan_РезультатыСогласования.Согласовано ИЛИ 
				СогласованиеОбъект.РезультатСогласования = Перечисления.Scan_РезультатыСогласования.СогласованоСЗамечаниями Тогда
			// Перепроведем документ Заявка на действие
			Если ТипЗнч(СогласованиеОбъект.Предмет) = Тип("ДокументСсылка.Scan_ЗаявкаНаДействие") Тогда
				ДокументОбъект =  СогласованиеОбъект.Предмет.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;		
		// rarus tenkam 07.11.2018 mantis 13672 ---
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПовторитьСогласованиеСервер()
	УстановитьПривилегированныйРежим(Истина);
	СогласованиеОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
	Исключение
		ТекстСообщения = "Согласование """ + СогласованиеОбъект.Номер + " от " + Формат(СогласованиеОбъект.Дата, "ДФ='dd.MM.yyyy HH:mm'") + """ заблокировано (возможно открыта форма)!
			|Для продолжения операции следует разблокировать согласование (закрыть форму) и повторить операцию";
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	СогласованиеОбъект.ПовторитьСогласование = Истина;
	НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
	НайденнаяСтрока.ОтправленоНаПовторноеСогласование = Истина;
	СогласованиеОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = Объект.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Прочитать();
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.ВыполнитьЗадачу();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеЗадачи()
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ЗадачаОбъект.ПроверитьЗаполнение();
КонецФункции

&НаКлиенте
Процедура УстановитьДатуИсполненияПоУмолчанию()
	ЗадачаБылаВыполнена = Ложь;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗадачаБылаВыполнена = Scan_ОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Ссылка, "Выполнена");
	КонецЕсли;
	
	Если НЕ ЗадачаБылаВыполнена Тогда
		// Если задача выполнена, то запишем в реквизит Исполнитель того
		// пользователя, который фактически выполнил задачу. Это нам потом
		// потребуется для отчетов. Такую запись делаем только в том
		// случае, если в базе было не выполнено, а в объекте стало выполнено
		Если Объект.Исполнитель.Пустая() Тогда
			Объект.Исполнитель = ПользователиКлиент.ТекущийПользователь(); //Rarus bonmak 28.07.2022 18726 АПК ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Если Объект.ДатаИсполнения = Дата(1,1,1) Тогда
			Объект.ДатаИсполнения = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДействияКомандныхПанелейФормы

&НаКлиенте
Процедура БизнесПроцесс(Команда)
	Попытка
		// rarus tenkam 10.04.2019 mantis 14195 +++
		//ОткрытьЗначение(Объект.БизнесПроцесс);
		ПоказатьЗначение(,Объект.БизнесПроцесс);
		// rarus tenkam 10.04.2019 mantis 14195 ---		
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Согласовано(Команда)
	УстановитьДатуИсполненияПоУмолчанию();
	//
	Если НЕ ПроверитьЗаполнениеЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Задачу не удалось записать", СтатусСообщения.Внимание);
		Сообщить(НСтр("ru = 'Задачу не удалось записать '; en = 'Action failed'"), СтатусСообщения.Внимание);
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  		
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	СогласованоСервер();
	
	Оповестить("ЗадачаВыполнена", Объект.Ссылка);
	Оповестить("ЗадачаИзменена", Объект.Ссылка);
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЕстьЗамечания(Команда)
	УстановитьДатуИсполненияПоУмолчанию();
	Если НЕ ЗначениеЗаполнено(Объект.РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Поле ""Комментарий"" не заполнено", СтатусСообщения.Внимание);
		// rarus tenkam 21.08.2019 mantis 14794 +++
		//Сообщить("ru = 'Поле ""Комментарий"" не заполнено'; en = 'The ""Comment"" not filled'", СтатусСообщения.Внимание);
		Сообщить(НСтр("ru = 'Поле ""Комментарий"" не заполнено'; en = 'The ""Comment"" not filled'"), СтатусСообщения.Внимание);
		// rarus tenkam 21.08.2019 mantis 14794 ---
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		Возврат;	
	КонецЕсли;	
	Если НЕ ПроверитьЗаполнениеЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Задачу не удалось записать", СтатусСообщения.Внимание);
		Сообщить(НСтр("ru = 'Задачу не удалось записать '; en = 'Action failed'"), СтатусСообщения.Внимание);
		//rarus FominskiyAS 24.04.2019  mantis 14191 --- 
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ЕстьЗамечанияСервер();
	
	Оповестить("ЗадачаВыполнена", Объект.Ссылка);
	Оповестить("ЗадачаИзменена", Объект.Ссылка);
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовано(Команда)
	
	УстановитьДатуИсполненияПоУмолчанию();
	
	Если НЕ ЗначениеЗаполнено(Объект.РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Поле ""Комментарий"" не заполнено", СтатусСообщения.Внимание);
		// rarus tenkam 21.08.2019 mantis 14794 +++
		//Сообщить("ru = 'Поле ""Комментарий"" не заполнено'; en = 'The ""Comment"" not filled'", СтатусСообщения.Внимание);
		Сообщить(НСтр("ru = 'Поле ""Комментарий"" не заполнено'; en = 'The ""Comment"" not filled'"), СтатусСообщения.Внимание);
		// rarus tenkam 21.08.2019 mantis 14794 ---
		//rarus FominskiyAS 24.04.2019  mantis 14191 ---  
		Возврат;	
	КонецЕсли;	
	Если НЕ ПроверитьЗаполнениеЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Задачу не удалось записать", СтатусСообщения.Внимание);
		Сообщить(НСтр("ru = 'Задачу не удалось записать '; en = 'Action failed'"), СтатусСообщения.Внимание);
		//rarus FominskiyAS 24.04.2019  mantis 14191 --- 
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	НеСогласованоСервер();
	
	Оповестить("ЗадачаВыполнена", Объект.Ссылка);
	Оповестить("ЗадачаИзменена", Объект.Ссылка);
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	УстановитьДатуИсполненияПоУмолчанию();
	
	Если НЕ ПроверитьЗаполнениеЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Задачу не удалось записать", СтатусСообщения.Внимание);
		Сообщить(НСтр("ru = 'Задачу не удалось записать '; en = 'Action failed'"), СтатусСообщения.Внимание);
		//rarus FominskiyAS 24.04.2019  mantis 14191 --- 
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗавершитьСогласованиеСервер();
	
	Оповестить("ЗадачаВыполнена", Объект.Ссылка);
	Оповестить("ЗадачаИзменена", Объект.Ссылка);
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Повторить(Команда)
	УстановитьДатуИсполненияПоУмолчанию();
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.БизнесПроцесс);
	
	ОткрытьФорму("БизнесПроцесс.Scan_Согласование.Форма.ФормаИзменениеПараметров", ПараметрыФормы, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ПовторитьЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;	
	
	Если НЕ ПроверитьЗаполнениеЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		//rarus FominskiyAS 24.04.2019  mantis 14191 +++
		//Сообщить("Задачу не удалось записать", СтатусСообщения.Внимание);
		Сообщить(НСтр("ru = 'Задачу не удалось записать '; en = 'Action failed'"), СтатусСообщения.Внимание);
		//rarus FominskiyAS 24.04.2019  mantis 14191 --- 
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ПовторитьСогласованиеСервер();
	
	Закрыть();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура ХодИсполненияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Попытка
		// rarus tenkam 10.04.2019 mantis 14195 +++
		//ОткрытьЗначение(Элементы.ХодИсполнения.ТекущиеДанные.Ссылка);
		ПоказатьЗначение(,Элементы.ХодИсполнения.ТекущиеДанные.Ссылка);
		// rarus tenkam 10.04.2019 mantis 14195 ---
		
	Исключение
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// номер итерации
	НайденнаяСтрока = Объект.БизнесПроцесс.РезультатыОзнакомлений.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерации = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	Если Объект.Выполнена Тогда
		// Заполнение текста результата выполнения для выполненной задачи (согласование)
		НайденнаяСтрока = Объект.БизнесПроцесс.РезультатыСогласования.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
			ТекстРезультатаВыполнения = Строка(НайденнаяСтрока.РезультатСогласования);
			Если НайденнаяСтрока.РезультатСогласования = Перечисления.Scan_РезультатыСогласования.НеСогласовано Тогда
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = WebЦвета.Красный;
			Иначе
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = WebЦвета.Зеленый;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение текста результата выполнения для выполненной задачи (ознакомление)
		НайденнаяСтрока = Объект.БизнесПроцесс.РезультатыОзнакомлений.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
			Если НайденнаяСтрока.ОтправленоНаПовторноеСогласование Тогда
				ТекстРезультатаВыполнения = "Отправлено на повторное согласование";
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = WebЦвета.Красный;
			Иначе	
				ТекстРезультатаВыполнения = "Ознакомился";
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = WebЦвета.Зеленый;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерации.Видимость = Ложь;
	КонецЕсли;	
	
	ЗаполнитьХодИсполнения();
	
	// результат согласования
	РезультатСогласования = Объект.БизнесПроцесс.РезультатСогласования;
	Если РезультатСогласования = Перечисления.Scan_РезультатыСогласования.НеСогласовано Тогда
		Элементы.РезультатСогласования.ЦветТекста = WebЦвета.Красный;
	Иначе
		Элементы.РезультатСогласования.ЦветТекста = WebЦвета.Зеленый;
	КонецЕсли;
	
	Если НЕ Scan_ПраваИНастройки.Scan_ПолучитьПраваИНастройкиПользователя(Пользователи.ТекущийПользователь(), ПланыВидовХарактеристик.Scan_ПраваИНастройки.РазрешитьИзменятьПараметрыСогласования) Тогда //Rarus bonmak 28.07.2022 18726 АПК первый параметр ПользователиКлиентСервер.ТекущийПользователь()
		ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступность();
КонецПроцедуры

//rarus FominskiyAS 28.02.2019  mantis 13863 +++
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры
//rarus FominskiyAS 28.02.2019  mantis 13863 ---

#КонецОбласти

