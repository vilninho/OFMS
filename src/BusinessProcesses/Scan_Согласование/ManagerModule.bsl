// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка) Экспорт
	
	//// Изменяем бизнес-процесс
	//УстановитьПривилегированныйРежим(Истина);
	//БизнесПроцессОбъект = ЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	//БизнесПроцессОбъект.Заблокировать();
	//Строка = БизнесПроцессОбъект.ДополнительныеИсполнители.Добавить();
	//Если Не ЗадачаСсылка.Исполнитель.Пустая() Тогда
	//	Строка.Исполнитель = ЗадачаСсылка.Исполнитель;
	//Иначе	
	//	Строка.Исполнитель = ЗадачаСсылка.РольИсполнителя;
	//КонецЕсли;	
	//Строка.ОсновнойОбъектАдресации = ЗадачаСсылка.ОсновнойОбъектАдресации;
	//Строка.ДополнительныйОбъектАдресации = ЗадачаСсылка.ДополнительныйОбъектАдресации;
	//
	//Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
	//	Строка.ГруппаДоступаИсполнителей = Справочники.ГруппыИсполнителейЗадач.ГруппаИсполнителейЗадач(
	//		Строка.Исполнитель, Строка.ОсновнойОбъектАдресации, Строка.ДополнительныйОбъектАдресации);
	//Иначе		
	//	Строка.ГруппаДоступаИсполнителей = Строка.Исполнитель;
	//КонецЕсли;		
	//
	//БизнесПроцессОбъект.Записать();
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//РаботаСБизнесПроцессами.ПриПеренаправленииЗадачи(ЗадачаСсылка);
	
КонецПроцедуры

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаБизнесПроцесса - точка маршрута 
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы",       "БизнесПроцесс.Scan_Согласование.Форма.ФормаЗадачиОсновная");
	
	Возврат Результат;
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   БизнесПроцессСсылка - БизнесПроцессСсылка - бизнес-процесс, по которому сформирована задача ЗадачаСсылка.
//   ТочкаМаршрутаБизнесПроцесса - точка маршрута.
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	ОсобойОбработкиНеТребуется = Истина;
	
КонецПроцедуры

//rarus BProg_Gladkov 19.12.2019 0015117 +++
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Истина);
	
	Результат.СписокВариантовОтветов.Добавить(Перечисления.Scan_РезультатыСогласования.Согласовано,НСтр("ru = 'Согласовать'"));
	Результат.СписокВариантовОтветов.Добавить(Перечисления.Scan_РезультатыСогласования.СогласованоСЗамечаниями,НСтр("ru = 'Согласовать с замечаниями'"));
	Результат.СписокВариантовОтветов.Добавить(Перечисления.Scan_РезультатыСогласования.НеСогласовано,НСтр("ru = 'Отказать'"));
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьРезультатСогласования(ЗадачаСсылка, РезультатСогласования, Отказ) Экспорт   //перенес из модуля формы   
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();	
	
	УстановитьПривилегированныйРежим(Истина);
	СогласованиеОбъект = ЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
	Исключение
		Отказ = Истина;
		ТекстСообщения = "Согласование """ + СогласованиеОбъект.Номер + " от " + Формат(СогласованиеОбъект.Дата, "ДФ='dd.MM.yyyy HH:mm'") + """ заблокировано (возможно открыта форма)!
		|Для продолжения операции следует разблокировать согласование (закрыть форму) и повторить операцию";
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
	НайденнаяСтрока.РезультатСогласования = РезультатСогласования;
	СогласованиеОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект.Прочитать();
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.ВыполнитьЗадачу();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры


//rarus BProg_Gladkov 19.12.2019 0015117 ---

//rarus agar 14.07.2020  15690 ++
Процедура ПрерватьСогласование(СогласованиеСсылка) Экспорт
	
	НачатьТранзакцию();
	
	УстановитьПривилегированныйРежим(Истина);
	СогласованиеОбъект = СогласованиеСсылка.ПолучитьОбъект();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(СогласованиеСсылка);
	Исключение
		Отказ = Истина;
		ТекстСообщения = "Согласование """ + СогласованиеОбъект.Номер + " от " + Формат(СогласованиеОбъект.Дата, "ДФ='dd.MM.yyyy HH:mm'") + """ заблокировано (возможно открыта форма)!
		|Для продолжения операции следует разблокировать согласование (закрыть форму) и повторить операцию";
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	РезультатСогласования = Перечисления.Scan_РезультатыСогласования.НеСогласовано;
	
	СогласованиеОбъект.РезультатСогласования = РезультатСогласования;
	СогласованиеОбъект.Завершен = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", СогласованиеСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(Выборка.Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.РезультатСогласования = РезультатСогласования;
		КонецЕсли;
	КонецЦикла;
	
	СогласованиеОбъект.Записать();
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Задача);
			Блокировка.Заблокировать();
			
			ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
			
			ЗадачаОбъект.Прочитать();
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.ВыполнитьЗадачу();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры
//rarus agar 14.07.2020  15690 --